
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	00 60 00 20 c1 3a 01 00 f3 f0 01 00 95 3a 01 00     .`. .:.......:..
  10:	95 3a 01 00 95 3a 01 00 95 3a 01 00 00 00 00 00     .:...:...:......
	...
  2c:	09 33 01 00 95 3a 01 00 00 00 00 00 79 32 01 00     .3...:......y2..
  3c:	95 3a 01 00                                         .:..

00000040 <_irq_vector_table>:
  40:	79 34 01 00 ff 0c 02 00 79 34 01 00 79 34 01 00     y4......y4..y4..
  50:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  60:	ad 0c 02 00 79 34 01 00 79 34 01 00 e5 0c 02 00     ....y4..y4......
  70:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  80:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  90:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  a0:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  b0:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  c0:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  d0:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  e0:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..
  f0:	79 34 01 00 79 34 01 00 79 34 01 00 79 34 01 00     y4..y4..y4..y4..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00b fea8 	bl	be74 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	ec92 0a08 	vldmia	r2, {s0-s7}
     2a6:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2aa:	ee07 1a10 	vmov	s14, r1
     2ae:	ec53 2a10 	vmov	r2, r3, s0, s1
     2b2:	ec56 4a11 	vmov	r4, r6, s2, s3
     2b6:	fba7 5102 	umull	r5, r1, r7, r2
     2ba:	fba8 0b02 	umull	r0, fp, r8, r2
     2be:	fbe7 1063 	umaal	r1, r0, r7, r3
     2c2:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c6:	ec41 5a14 	vmov	s8, s9, r5, r1
     2ca:	fba8 5103 	umull	r5, r1, r8, r3
     2ce:	fbea 0162 	umaal	r0, r1, sl, r2
     2d2:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d6:	fbe7 0566 	umaal	r0, r5, r7, r6
     2da:	fbe8 1566 	umaal	r1, r5, r8, r6
     2de:	ee05 ba10 	vmov	s10, fp
     2e2:	fba9 b603 	umull	fp, r6, r9, r3
     2e6:	fbea 1663 	umaal	r1, r6, sl, r3
     2ea:	fbec 5663 	umaal	r5, r6, ip, r3
     2ee:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2f2:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f6:	fbea 5b64 	umaal	r5, fp, sl, r4
     2fa:	fbec 6b64 	umaal	r6, fp, ip, r4
     2fe:	ee05 0a90 	vmov	s11, r0
     302:	fbac 3002 	umull	r3, r0, ip, r2
     306:	ee12 4a10 	vmov	r4, s4
     30a:	fbee 5062 	umaal	r5, r0, lr, r2
     30e:	fbe9 6064 	umaal	r6, r0, r9, r4
     312:	fbea b064 	umaal	fp, r0, sl, r4
     316:	fbe7 3164 	umaal	r3, r1, r7, r4
     31a:	fbe8 5164 	umaal	r5, r1, r8, r4
     31e:	ee12 4a90 	vmov	r4, s5
     322:	fbe8 6164 	umaal	r6, r1, r8, r4
     326:	fbe9 b164 	umaal	fp, r1, r9, r4
     32a:	fbea 0164 	umaal	r0, r1, sl, r4
     32e:	ee06 3a10 	vmov	s12, r3
     332:	fba7 3204 	umull	r3, r2, r7, r4
     336:	ee13 4a10 	vmov	r4, s6
     33a:	fbe7 6264 	umaal	r6, r2, r7, r4
     33e:	fbe8 b264 	umaal	fp, r2, r8, r4
     342:	fbe9 0264 	umaal	r0, r2, r9, r4
     346:	fbea 1264 	umaal	r1, r2, sl, r4
     34a:	ee11 4a90 	vmov	r4, s3
     34e:	fbe9 5364 	umaal	r5, r3, r9, r4
     352:	fbea 6364 	umaal	r6, r3, sl, r4
     356:	ee13 4a90 	vmov	r4, s7
     35a:	fbe7 b364 	umaal	fp, r3, r7, r4
     35e:	fbe8 0364 	umaal	r0, r3, r8, r4
     362:	fbe9 1364 	umaal	r1, r3, r9, r4
     366:	fbea 2364 	umaal	r2, r3, sl, r4
     36a:	ee06 5a90 	vmov	s13, r5
     36e:	ee17 9a10 	vmov	r9, s14
     372:	e899 0600 	ldmia.w	r9, {r9, sl}
     376:	ee10 8a10 	vmov	r8, s0
     37a:	fba9 5408 	umull	r5, r4, r9, r8
     37e:	fbea b468 	umaal	fp, r4, sl, r8
     382:	ee12 8a10 	vmov	r8, s4
     386:	fbec 0468 	umaal	r0, r4, ip, r8
     38a:	fbee 1468 	umaal	r1, r4, lr, r8
     38e:	fbe9 2468 	umaal	r2, r4, r9, r8
     392:	fbea 3468 	umaal	r3, r4, sl, r8
     396:	ee10 8a90 	vmov	r8, s1
     39a:	fbee 6568 	umaal	r6, r5, lr, r8
     39e:	fbe9 b568 	umaal	fp, r5, r9, r8
     3a2:	fbea 0568 	umaal	r0, r5, sl, r8
     3a6:	ee12 8a90 	vmov	r8, s5
     3aa:	fbec 1568 	umaal	r1, r5, ip, r8
     3ae:	fbee 2568 	umaal	r2, r5, lr, r8
     3b2:	fbe9 3568 	umaal	r3, r5, r9, r8
     3b6:	fbea 4568 	umaal	r4, r5, sl, r8
     3ba:	ee07 6a10 	vmov	s14, r6
     3be:	ee11 8a10 	vmov	r8, s2
     3c2:	fbae 7608 	umull	r7, r6, lr, r8
     3c6:	fbe9 0668 	umaal	r0, r6, r9, r8
     3ca:	fbea 1668 	umaal	r1, r6, sl, r8
     3ce:	ee13 8a10 	vmov	r8, s6
     3d2:	fbec 2668 	umaal	r2, r6, ip, r8
     3d6:	fbee 3668 	umaal	r3, r6, lr, r8
     3da:	fbe9 4668 	umaal	r4, r6, r9, r8
     3de:	fbea 5668 	umaal	r5, r6, sl, r8
     3e2:	ee11 8a90 	vmov	r8, s3
     3e6:	fbec b768 	umaal	fp, r7, ip, r8
     3ea:	fbee 0768 	umaal	r0, r7, lr, r8
     3ee:	fbe9 1768 	umaal	r1, r7, r9, r8
     3f2:	fbea 2768 	umaal	r2, r7, sl, r8
     3f6:	ee13 8a90 	vmov	r8, s7
     3fa:	fbec 3768 	umaal	r3, r7, ip, r8
     3fe:	fbee 4768 	umaal	r4, r7, lr, r8
     402:	fbe9 5768 	umaal	r5, r7, r9, r8
     406:	fbea 6768 	umaal	r6, r7, sl, r8
     40a:	bd00      	pop	{pc}

0000040c <ocrypto_bigint_mul256>:
     40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     410:	ee07 0a90 	vmov	s15, r0
     414:	f7ff ff44 	bl	2a0 <ocrypto_mul256_noframe>
     418:	ee17 8a90 	vmov	r8, s15
     41c:	ee07 ba90 	vmov	s15, fp
     420:	eca8 4a08 	vstmia	r8!, {s8-s15}
     424:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000042c <ocrypto_sqr256_noframe>:
     42c:	b500      	push	{lr}
     42e:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     432:	fba3 5203 	umull	r5, r2, r3, r3
     436:	fba3 0104 	umull	r0, r1, r3, r4
     43a:	fbe3 2064 	umaal	r2, r0, r3, r4
     43e:	fbe3 1067 	umaal	r1, r0, r3, r7
     442:	ec42 5a14 	vmov	s8, s9, r5, r2
     446:	fba3 5207 	umull	r5, r2, r3, r7
     44a:	fbe3 0268 	umaal	r0, r2, r3, r8
     44e:	fbe4 1564 	umaal	r1, r5, r4, r4
     452:	fbe3 0568 	umaal	r0, r5, r3, r8
     456:	fbe3 2569 	umaal	r2, r5, r3, r9
     45a:	fba4 b607 	umull	fp, r6, r4, r7
     45e:	fbe3 2669 	umaal	r2, r6, r3, r9
     462:	fbe3 566a 	umaal	r5, r6, r3, sl
     466:	fbe4 0b67 	umaal	r0, fp, r4, r7
     46a:	fbe4 2b68 	umaal	r2, fp, r4, r8
     46e:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     472:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     476:	ec40 1a15 	vmov	s10, s11, r1, r0
     47a:	fba4 1008 	umull	r1, r0, r4, r8
     47e:	fbe4 5069 	umaal	r5, r0, r4, r9
     482:	fbe3 606c 	umaal	r6, r0, r3, ip
     486:	fbe3 b06e 	umaal	fp, r0, r3, lr
     48a:	fbe7 2167 	umaal	r2, r1, r7, r7
     48e:	fbe4 5169 	umaal	r5, r1, r4, r9
     492:	fbe4 616a 	umaal	r6, r1, r4, sl
     496:	fbe3 b16e 	umaal	fp, r1, r3, lr
     49a:	fbe4 016e 	umaal	r0, r1, r4, lr
     49e:	ee06 2a10 	vmov	s12, r2
     4a2:	fba7 3208 	umull	r3, r2, r7, r8
     4a6:	fbe4 626a 	umaal	r6, r2, r4, sl
     4aa:	fbe4 b26c 	umaal	fp, r2, r4, ip
     4ae:	fbe4 026e 	umaal	r0, r2, r4, lr
     4b2:	fbe7 126e 	umaal	r1, r2, r7, lr
     4b6:	fbe7 5368 	umaal	r5, r3, r7, r8
     4ba:	fbe7 6369 	umaal	r6, r3, r7, r9
     4be:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4c2:	fbe7 036c 	umaal	r0, r3, r7, ip
     4c6:	fbe7 136e 	umaal	r1, r3, r7, lr
     4ca:	fbe8 236e 	umaal	r2, r3, r8, lr
     4ce:	ee06 5a90 	vmov	s13, r5
     4d2:	fba7 5409 	umull	r5, r4, r7, r9
     4d6:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4da:	fbe7 046c 	umaal	r0, r4, r7, ip
     4de:	fbe8 146c 	umaal	r1, r4, r8, ip
     4e2:	fbe8 246e 	umaal	r2, r4, r8, lr
     4e6:	fbe9 346e 	umaal	r3, r4, r9, lr
     4ea:	fbe8 6568 	umaal	r6, r5, r8, r8
     4ee:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4f2:	fbe8 056a 	umaal	r0, r5, r8, sl
     4f6:	fbe8 156c 	umaal	r1, r5, r8, ip
     4fa:	fbe9 256c 	umaal	r2, r5, r9, ip
     4fe:	fbe9 356e 	umaal	r3, r5, r9, lr
     502:	fbea 456e 	umaal	r4, r5, sl, lr
     506:	ee07 6a10 	vmov	s14, r6
     50a:	fba8 7609 	umull	r7, r6, r8, r9
     50e:	fbe8 066a 	umaal	r0, r6, r8, sl
     512:	fbe9 166a 	umaal	r1, r6, r9, sl
     516:	fbe9 266c 	umaal	r2, r6, r9, ip
     51a:	fbea 366c 	umaal	r3, r6, sl, ip
     51e:	fbea 466e 	umaal	r4, r6, sl, lr
     522:	fbec 566e 	umaal	r5, r6, ip, lr
     526:	fbe8 b769 	umaal	fp, r7, r8, r9
     52a:	fbe9 0769 	umaal	r0, r7, r9, r9
     52e:	fbe9 176a 	umaal	r1, r7, r9, sl
     532:	fbea 276a 	umaal	r2, r7, sl, sl
     536:	fbea 376c 	umaal	r3, r7, sl, ip
     53a:	fbec 476c 	umaal	r4, r7, ip, ip
     53e:	fbec 576e 	umaal	r5, r7, ip, lr
     542:	fbee 676e 	umaal	r6, r7, lr, lr
     546:	bd00      	pop	{pc}

00000548 <ocrypto_bigint_sqr256>:
     548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     54c:	ee07 0a90 	vmov	s15, r0
     550:	f7ff ff6c 	bl	42c <ocrypto_sqr256_noframe>
     554:	ee17 8a90 	vmov	r8, s15
     558:	ee07 ba90 	vmov	s15, fp
     55c:	eca8 4a08 	vstmia	r8!, {s8-s15}
     560:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000568 <ocrypto_constant_time_equal>:
     568:	b430      	push	{r4, r5}
     56a:	f04f 0300 	mov.w	r3, #0

0000056e <constant_time_equal_loop>:
     56e:	f810 4b01 	ldrb.w	r4, [r0], #1
     572:	f811 5b01 	ldrb.w	r5, [r1], #1
     576:	3a01      	subs	r2, #1
     578:	ea84 0405 	eor.w	r4, r4, r5
     57c:	ea43 0304 	orr.w	r3, r3, r4
     580:	d1f5      	bne.n	56e <constant_time_equal_loop>
     582:	f1a3 0301 	sub.w	r3, r3, #1
     586:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     58a:	bc30      	pop	{r4, r5}
     58c:	4770      	bx	lr
     58e:	bf00      	nop

00000590 <ocrypto_constant_time_is_zero>:
     590:	f04f 0300 	mov.w	r3, #0

00000594 <constant_time_is_zero_loop>:
     594:	f810 2b01 	ldrb.w	r2, [r0], #1
     598:	3901      	subs	r1, #1
     59a:	ea43 0302 	orr.w	r3, r3, r2
     59e:	d1f9      	bne.n	594 <constant_time_is_zero_loop>
     5a0:	f1a3 0301 	sub.w	r3, r3, #1
     5a4:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     5a8:	4770      	bx	lr
     5aa:	bf00      	nop

000005ac <ocrypto_constant_time_xor>:
     5ac:	b430      	push	{r4, r5}

000005ae <constant_time_xor_loop>:
     5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
     5b2:	f812 5b01 	ldrb.w	r5, [r2], #1
     5b6:	406c      	eors	r4, r5
     5b8:	f800 4b01 	strb.w	r4, [r0], #1
     5bc:	3b01      	subs	r3, #1
     5be:	d1f6      	bne.n	5ae <constant_time_xor_loop>
     5c0:	bc30      	pop	{r4, r5}
     5c2:	4770      	bx	lr

000005c4 <ocrypto_mod_p256_add>:
     5c4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5c8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5cc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d0:	185b      	adds	r3, r3, r1
     5d2:	eb54 040c 	adcs.w	r4, r4, ip
     5d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5da:	414d      	adcs	r5, r1
     5dc:	eb56 060c 	adcs.w	r6, r6, ip
     5e0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5e4:	414f      	adcs	r7, r1
     5e6:	eb58 080c 	adcs.w	r8, r8, ip
     5ea:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5ee:	eb59 0901 	adcs.w	r9, r9, r1
     5f2:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5f6:	4189      	sbcs	r1, r1
     5f8:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5fc:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     600:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     604:	f176 0600 	sbcs.w	r6, r6, #0
     608:	f177 0700 	sbcs.w	r7, r7, #0
     60c:	f178 0800 	sbcs.w	r8, r8, #0
     610:	f179 0901 	sbcs.w	r9, r9, #1
     614:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     618:	f151 0100 	adcs.w	r1, r1, #0
     61c:	185b      	adds	r3, r3, r1
     61e:	414c      	adcs	r4, r1
     620:	414d      	adcs	r5, r1
     622:	f156 0600 	adcs.w	r6, r6, #0
     626:	f157 0700 	adcs.w	r7, r7, #0
     62a:	f158 0800 	adcs.w	r8, r8, #0
     62e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     632:	eb5a 0a01 	adcs.w	sl, sl, r1
     636:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     63a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     63e:	4770      	bx	lr

00000640 <ocrypto_mod_p256_sub>:
     640:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     644:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     648:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     64c:	1a5b      	subs	r3, r3, r1
     64e:	eb74 040c 	sbcs.w	r4, r4, ip
     652:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     656:	418d      	sbcs	r5, r1
     658:	eb76 060c 	sbcs.w	r6, r6, ip
     65c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     660:	418f      	sbcs	r7, r1
     662:	eb78 080c 	sbcs.w	r8, r8, ip
     666:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     66a:	eb79 0901 	sbcs.w	r9, r9, r1
     66e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     672:	4189      	sbcs	r1, r1
     674:	185b      	adds	r3, r3, r1
     676:	414c      	adcs	r4, r1
     678:	414d      	adcs	r5, r1
     67a:	f156 0600 	adcs.w	r6, r6, #0
     67e:	f157 0700 	adcs.w	r7, r7, #0
     682:	f158 0800 	adcs.w	r8, r8, #0
     686:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     68a:	eb5a 0a01 	adcs.w	sl, sl, r1
     68e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     692:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     696:	4770      	bx	lr

00000698 <mul_reduce>:
     698:	eb18 0804 	adds.w	r8, r8, r4
     69c:	eb59 0905 	adcs.w	r9, r9, r5
     6a0:	eb5a 0a06 	adcs.w	sl, sl, r6
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	f05f 0c00 	movs.w	ip, #0
     6ac:	f14c 0c00 	adc.w	ip, ip, #0
     6b0:	eb18 0805 	adds.w	r8, r8, r5
     6b4:	eb59 0906 	adcs.w	r9, r9, r6
     6b8:	eb5a 0a07 	adcs.w	sl, sl, r7
     6bc:	eb5b 0b07 	adcs.w	fp, fp, r7
     6c0:	eb50 000c 	adcs.w	r0, r0, ip
     6c4:	f05f 0c00 	movs.w	ip, #0
     6c8:	eb51 010c 	adcs.w	r1, r1, ip
     6cc:	eb52 020c 	adcs.w	r2, r2, ip
     6d0:	4163      	adcs	r3, r4
     6d2:	f14c 0c00 	adc.w	ip, ip, #0
     6d6:	ebb8 0807 	subs.w	r8, r8, r7
     6da:	f179 0900 	sbcs.w	r9, r9, #0
     6de:	f17a 0a00 	sbcs.w	sl, sl, #0
     6e2:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6e6:	41a8      	sbcs	r0, r5
     6e8:	41b1      	sbcs	r1, r6
     6ea:	41a2      	sbcs	r2, r4
     6ec:	41b3      	sbcs	r3, r6
     6ee:	f16c 0c00 	sbc.w	ip, ip, #0
     6f2:	ebbb 0b05 	subs.w	fp, fp, r5
     6f6:	41b0      	sbcs	r0, r6
     6f8:	41b9      	sbcs	r1, r7
     6fa:	41aa      	sbcs	r2, r5
     6fc:	41bb      	sbcs	r3, r7
     6fe:	f16c 0c00 	sbc.w	ip, ip, #0
     702:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     706:	ebb8 0804 	subs.w	r8, r8, r4
     70a:	eb79 0904 	sbcs.w	r9, r9, r4
     70e:	eb7a 0a04 	sbcs.w	sl, sl, r4
     712:	f17b 0b00 	sbcs.w	fp, fp, #0
     716:	f170 0000 	sbcs.w	r0, r0, #0
     71a:	f171 0100 	sbcs.w	r1, r1, #0
     71e:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     722:	41a3      	sbcs	r3, r4
     724:	f16c 0c00 	sbc.w	ip, ip, #0
     728:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     72c:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     730:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     734:	f15b 0b00 	adcs.w	fp, fp, #0
     738:	f150 0400 	adcs.w	r4, r0, #0
     73c:	f151 0500 	adcs.w	r5, r1, #0
     740:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     744:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     748:	f14c 0c00 	adc.w	ip, ip, #0
     74c:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     750:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     754:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     758:	f15b 0300 	adcs.w	r3, fp, #0
     75c:	f154 0400 	adcs.w	r4, r4, #0
     760:	f155 0500 	adcs.w	r5, r5, #0
     764:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     768:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     76c:	4770      	bx	lr
     76e:	bf00      	nop

00000770 <ocrypto_mod_p256_mul>:
     770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     774:	ee07 0a90 	vmov	s15, r0
     778:	f7ff fd92 	bl	2a0 <ocrypto_mul256_noframe>
     77c:	ec59 8a16 	vmov	r8, r9, s12, s13
     780:	ee17 aa10 	vmov	sl, s14
     784:	f7ff ff88 	bl	698 <mul_reduce>
     788:	ec59 8a14 	vmov	r8, r9, s8, s9
     78c:	ec5b aa15 	vmov	sl, fp, s10, s11
     790:	f7ff ff82 	bl	698 <mul_reduce>
     794:	ee17 8a90 	vmov	r8, s15
     798:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007a0 <ocrypto_mod_p256_sqr>:
     7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7a4:	ee07 0a90 	vmov	s15, r0
     7a8:	f7ff fe40 	bl	42c <ocrypto_sqr256_noframe>
     7ac:	ec59 8a16 	vmov	r8, r9, s12, s13
     7b0:	ee17 aa10 	vmov	sl, s14
     7b4:	f7ff ff70 	bl	698 <mul_reduce>
     7b8:	ec59 8a14 	vmov	r8, r9, s8, s9
     7bc:	ec5b aa15 	vmov	sl, fp, s10, s11
     7c0:	f7ff ff6a 	bl	698 <mul_reduce>
     7c4:	ee17 8a90 	vmov	r8, s15
     7c8:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7d2:	4c14      	ldr	r4, [pc, #80]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7d4:	7a20      	ldrb	r0, [r4, #8]
     7d6:	f88d 0001 	strb.w	r0, [sp, #1]
     7da:	79e0      	ldrb	r0, [r4, #7]
     7dc:	f88d 0000 	strb.w	r0, [sp]
     7e0:	79a0      	ldrb	r0, [r4, #6]
     7e2:	f8ad 0004 	strh.w	r0, [sp, #4]
     7e6:	7960      	ldrb	r0, [r4, #5]
     7e8:	f8ad 0002 	strh.w	r0, [sp, #2]
     7ec:	4668      	mov	r0, sp
     7ee:	f006 f84d 	bl	688c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7f2:	b108      	cbz	r0, 7f8 <ocrypto_mod_p256_sqr+0x58>
     7f4:	21a7      	movs	r1, #167	; 0xa7
     7f6:	e010      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     7f8:	68e0      	ldr	r0, [r4, #12]
     7fa:	9002      	str	r0, [sp, #8]
     7fc:	a802      	add	r0, sp, #8
     7fe:	f006 f85b 	bl	68b8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     802:	b108      	cbz	r0, 808 <CONFIG_ISR_STACK_SIZE+0x8>
     804:	21ab      	movs	r1, #171	; 0xab
     806:	e008      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     808:	4807      	ldr	r0, [pc, #28]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     80a:	6800      	ldr	r0, [r0, #0]
     80c:	9003      	str	r0, [sp, #12]
     80e:	a803      	add	r0, sp, #12
     810:	f00e ffa1 	bl	f756 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     814:	2800      	cmp	r0, #0
     816:	d003      	beq.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
     818:	21af      	movs	r1, #175	; 0xaf
     81a:	2003      	movs	r0, #3
     81c:	f000 f8dc 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     820:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     822:	0000      	.short	0x0000
     824:	20000a08 	.word	0x20000a08
     828:	00000ae0 	.word	0x00000ae0

0000082c <sdc_build_revision_get>:
     82c:	b510      	push	{r4, lr}
     82e:	b128      	cbz	r0, 83c <sdc_build_revision_get+0x10>
     830:	2214      	movs	r2, #20
     832:	4904      	ldr	r1, [pc, #16]	; (844 <sdc_build_revision_get+0x18>)
     834:	f00f fdd0 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     838:	2000      	movs	r0, #0
     83a:	bd10      	pop	{r4, pc}
     83c:	f06f 0015 	mvn.w	r0, #21
     840:	bd10      	pop	{r4, pc}
     842:	0000      	.short	0x0000
     844:	00000b04 	.word	0x00000b04

00000848 <sdc_cfg_set>:
     848:	b570      	push	{r4, r5, r6, lr}
     84a:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     84e:	bbb8      	cbnz	r0, 8c0 <__z_interrupt_stack_SIZEOF+0x40>
     850:	4c1e      	ldr	r4, [pc, #120]	; (8cc <__z_interrupt_stack_SIZEOF+0x4c>)
     852:	7860      	ldrb	r0, [r4, #1]
     854:	b108      	cbz	r0, 85a <sdc_cfg_set+0x12>
     856:	1198      	asrs	r0, r3, #6
     858:	bd70      	pop	{r4, r5, r6, pc}
     85a:	b301      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x1e>
     85c:	f06f 0515 	mvn.w	r5, #21
     860:	b1aa      	cbz	r2, 88e <__z_interrupt_stack_SIZEOF+0xe>
     862:	481b      	ldr	r0, [pc, #108]	; (8d0 <__z_interrupt_stack_SIZEOF+0x50>)
     864:	1e89      	subs	r1, r1, #2
     866:	2906      	cmp	r1, #6
     868:	d22b      	bcs.n	8c2 <__z_interrupt_stack_SIZEOF+0x42>
     86a:	e8df f001 	tbb	[pc, r1]
     86e:	0603      	.short	0x0603
     870:	1c2a1916 	.word	0x1c2a1916
     874:	7811      	ldrb	r1, [r2, #0]
     876:	7041      	strb	r1, [r0, #1]
     878:	e017      	b.n	8aa <__z_interrupt_stack_SIZEOF+0x2a>
     87a:	7891      	ldrb	r1, [r2, #2]
     87c:	b139      	cbz	r1, 88e <__z_interrupt_stack_SIZEOF+0xe>
     87e:	78d1      	ldrb	r1, [r2, #3]
     880:	b129      	cbz	r1, 88e <__z_interrupt_stack_SIZEOF+0xe>
     882:	7811      	ldrb	r1, [r2, #0]
     884:	291b      	cmp	r1, #27
     886:	d302      	bcc.n	88e <__z_interrupt_stack_SIZEOF+0xe>
     888:	7851      	ldrb	r1, [r2, #1]
     88a:	291b      	cmp	r1, #27
     88c:	d201      	bcs.n	892 <__z_interrupt_stack_SIZEOF+0x12>
     88e:	4628      	mov	r0, r5
     890:	bd70      	pop	{r4, r5, r6, pc}
     892:	6811      	ldr	r1, [r2, #0]
     894:	f8c0 1005 	str.w	r1, [r0, #5]
     898:	e007      	b.n	8aa <__z_interrupt_stack_SIZEOF+0x2a>
     89a:	6811      	ldr	r1, [r2, #0]
     89c:	60c1      	str	r1, [r0, #12]
     89e:	e004      	b.n	8aa <__z_interrupt_stack_SIZEOF+0x2a>
     8a0:	7811      	ldrb	r1, [r2, #0]
     8a2:	7081      	strb	r1, [r0, #2]
     8a4:	e001      	b.n	8aa <__z_interrupt_stack_SIZEOF+0x2a>
     8a6:	8811      	ldrh	r1, [r2, #0]
     8a8:	8241      	strh	r1, [r0, #18]
     8aa:	2201      	movs	r2, #1
     8ac:	4908      	ldr	r1, [pc, #32]	; (8d0 <__z_interrupt_stack_SIZEOF+0x50>)
     8ae:	2000      	movs	r0, #0
     8b0:	f00b fc30 	bl	c114 <__udivmoddi4+0x2a0>
     8b4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     8b8:	db05      	blt.n	8c6 <__z_interrupt_stack_SIZEOF+0x46>
     8ba:	f06f 000b 	mvn.w	r0, #11
     8be:	bd70      	pop	{r4, r5, r6, pc}
     8c0:	e7ff      	b.n	8c2 <__z_interrupt_stack_SIZEOF+0x42>
     8c2:	4618      	mov	r0, r3
     8c4:	e7fb      	b.n	8be <__z_interrupt_stack_SIZEOF+0x3e>
     8c6:	2101      	movs	r1, #1
     8c8:	70a1      	strb	r1, [r4, #2]
     8ca:	e7f8      	b.n	8be <__z_interrupt_stack_SIZEOF+0x3e>
     8cc:	20000028 	.word	0x20000028
     8d0:	20000a08 	.word	0x20000a08

000008d4 <sdc_disable>:
     8d4:	b510      	push	{r4, lr}
     8d6:	4c07      	ldr	r4, [pc, #28]	; (8f4 <sdc_disable+0x20>)
     8d8:	7860      	ldrb	r0, [r4, #1]
     8da:	b120      	cbz	r0, 8e6 <sdc_disable+0x12>
     8dc:	f006 faca 	bl	6e74 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     8e0:	7820      	ldrb	r0, [r4, #0]
     8e2:	f00b f9e7 	bl	bcb4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     8e6:	f000 fd87 	bl	13f8 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     8ea:	f000 fe5f 	bl	15ac <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     8ee:	2000      	movs	r0, #0
     8f0:	7060      	strb	r0, [r4, #1]
     8f2:	bd10      	pop	{r4, pc}
     8f4:	20000028 	.word	0x20000028

000008f8 <sdc_enable>:
     8f8:	b570      	push	{r4, r5, r6, lr}
     8fa:	460c      	mov	r4, r1
     8fc:	0005      	movs	r5, r0
     8fe:	d002      	beq.n	906 <sdc_enable+0xe>
     900:	b10c      	cbz	r4, 906 <sdc_enable+0xe>
     902:	0760      	lsls	r0, r4, #29
     904:	d002      	beq.n	90c <sdc_enable+0x14>
     906:	f06f 0015 	mvn.w	r0, #21
     90a:	bd70      	pop	{r4, r5, r6, pc}
     90c:	f000 f920 	bl	b50 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     910:	b1a8      	cbz	r0, 93e <sdc_enable+0x46>
     912:	4628      	mov	r0, r5
     914:	f00b f994 	bl	bc40 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     918:	4d0a      	ldr	r5, [pc, #40]	; (944 <sdc_enable+0x4c>)
     91a:	2200      	movs	r2, #0
     91c:	490a      	ldr	r1, [pc, #40]	; (948 <sdc_enable+0x50>)
     91e:	7028      	strb	r0, [r5, #0]
     920:	4620      	mov	r0, r4
     922:	f00b fbf7 	bl	c114 <__udivmoddi4+0x2a0>
     926:	f00f fb30 	bl	ff8a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     92a:	2100      	movs	r1, #0
     92c:	7828      	ldrb	r0, [r5, #0]
     92e:	f006 fa8b 	bl	6e48 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     932:	f7ff ff4d 	bl	7d0 <ocrypto_mod_p256_sqr+0x30>
     936:	2001      	movs	r0, #1
     938:	7068      	strb	r0, [r5, #1]
     93a:	2000      	movs	r0, #0
     93c:	bd70      	pop	{r4, r5, r6, pc}
     93e:	f04f 30ff 	mov.w	r0, #4294967295
     942:	bd70      	pop	{r4, r5, r6, pc}
     944:	20000028 	.word	0x20000028
     948:	20000a08 	.word	0x20000a08

0000094c <sdc_init>:
     94c:	b530      	push	{r4, r5, lr}
     94e:	b089      	sub	sp, #36	; 0x24
     950:	0004      	movs	r4, r0
     952:	d00c      	beq.n	96e <sdc_init+0x22>
     954:	f00b f91a 	bl	bb8c <mpsl_is_initialized>
     958:	f04f 35ff 	mov.w	r5, #4294967295
     95c:	b120      	cbz	r0, 968 <sdc_init+0x1c>
     95e:	f00a ffad 	bl	b8bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     962:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     966:	d905      	bls.n	974 <sdc_init+0x28>
     968:	4628      	mov	r0, r5
     96a:	b009      	add	sp, #36	; 0x24
     96c:	bd30      	pop	{r4, r5, pc}
     96e:	f06f 0015 	mvn.w	r0, #21
     972:	e7fa      	b.n	96a <sdc_init+0x1e>
     974:	4d13      	ldr	r5, [pc, #76]	; (9c4 <sdc_init+0x78>)
     976:	4814      	ldr	r0, [pc, #80]	; (9c8 <sdc_init+0x7c>)
     978:	606c      	str	r4, [r5, #4]
     97a:	f000 fa0b 	bl	d94 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     97e:	2000      	movs	r0, #0
     980:	7068      	strb	r0, [r5, #1]
     982:	70a8      	strb	r0, [r5, #2]
     984:	4601      	mov	r1, r0
     986:	2220      	movs	r2, #32
     988:	4668      	mov	r0, sp
     98a:	f00f fd9f 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     98e:	2220      	movs	r2, #32
     990:	490e      	ldr	r1, [pc, #56]	; (9cc <sdc_init+0x80>)
     992:	4668      	mov	r0, sp
     994:	f00f fd20 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     998:	2220      	movs	r2, #32
     99a:	4669      	mov	r1, sp
     99c:	480c      	ldr	r0, [pc, #48]	; (9d0 <sdc_init+0x84>)
     99e:	f00f fd1b 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     9a2:	f3ef 8410 	mrs	r4, PRIMASK
     9a6:	b672      	cpsid	i
     9a8:	f000 fd34 	bl	1414 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     9ac:	4809      	ldr	r0, [pc, #36]	; (9d4 <sdc_init+0x88>)
     9ae:	f000 fe09 	bl	15c4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     9b2:	b118      	cbz	r0, 9bc <sdc_init+0x70>
     9b4:	21c5      	movs	r1, #197	; 0xc5
     9b6:	2003      	movs	r0, #3
     9b8:	f000 f80e 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     9bc:	b904      	cbnz	r4, 9c0 <sdc_init+0x74>
     9be:	b662      	cpsie	i
     9c0:	2000      	movs	r0, #0
     9c2:	e7d2      	b.n	96a <sdc_init+0x1e>
     9c4:	20000028 	.word	0x20000028
     9c8:	000007d1 	.word	0x000007d1
     9cc:	00000ae4 	.word	0x00000ae4
     9d0:	20000a08 	.word	0x20000a08
     9d4:	00000b7d 	.word	0x00000b7d

000009d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     9d8:	b50e      	push	{r1, r2, r3, lr}
     9da:	b672      	cpsid	i
     9dc:	4a15      	ldr	r2, [pc, #84]	; (a34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     9de:	6855      	ldr	r5, [r2, #4]
     9e0:	b1dd      	cbz	r5, a1a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     9e2:	2200      	movs	r2, #0
     9e4:	4603      	mov	r3, r0
     9e6:	466e      	mov	r6, sp
     9e8:	240a      	movs	r4, #10
     9ea:	e003      	b.n	9f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     9ec:	fbb0 f0f4 	udiv	r0, r0, r4
     9f0:	1c52      	adds	r2, r2, #1
     9f2:	b2d2      	uxtb	r2, r2
     9f4:	2800      	cmp	r0, #0
     9f6:	d1f9      	bne.n	9ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     9f8:	54b0      	strb	r0, [r6, r2]
     9fa:	e00a      	b.n	a12 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     9fc:	b2d8      	uxtb	r0, r3
     9fe:	fbb0 f7f4 	udiv	r7, r0, r4
     a02:	fbb3 f3f4 	udiv	r3, r3, r4
     a06:	fb04 0017 	mls	r0, r4, r7, r0
     a0a:	1e52      	subs	r2, r2, #1
     a0c:	b2d2      	uxtb	r2, r2
     a0e:	3030      	adds	r0, #48	; 0x30
     a10:	54b0      	strb	r0, [r6, r2]
     a12:	2a00      	cmp	r2, #0
     a14:	d1f2      	bne.n	9fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     a16:	4630      	mov	r0, r6
     a18:	47a8      	blx	r5
     a1a:	f3bf 8f4f 	dsb	sy
     a1e:	4806      	ldr	r0, [pc, #24]	; (a38 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     a20:	6801      	ldr	r1, [r0, #0]
     a22:	4a06      	ldr	r2, [pc, #24]	; (a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     a24:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     a28:	4311      	orrs	r1, r2
     a2a:	6001      	str	r1, [r0, #0]
     a2c:	f3bf 8f4f 	dsb	sy
     a30:	bf00      	nop
     a32:	e7fd      	b.n	a30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     a34:	20000028 	.word	0x20000028
     a38:	e000ed0c 	.word	0xe000ed0c
     a3c:	05fa0004 	.word	0x05fa0004

00000a40 <sdc_support_adv>:
     a40:	4806      	ldr	r0, [pc, #24]	; (a5c <sdc_support_adv+0x1c>)
     a42:	b510      	push	{r4, lr}
     a44:	7881      	ldrb	r1, [r0, #2]
     a46:	7840      	ldrb	r0, [r0, #1]
     a48:	4301      	orrs	r1, r0
     a4a:	d002      	beq.n	a52 <sdc_support_adv+0x12>
     a4c:	f04f 30ff 	mov.w	r0, #4294967295
     a50:	bd10      	pop	{r4, pc}
     a52:	f006 fa1f 	bl	6e94 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     a56:	2000      	movs	r0, #0
     a58:	bd10      	pop	{r4, pc}
     a5a:	0000      	.short	0x0000
     a5c:	20000028 	.word	0x20000028

00000a60 <sdc_support_dle_peripheral>:
     a60:	4806      	ldr	r0, [pc, #24]	; (a7c <sdc_support_dle_peripheral+0x1c>)
     a62:	b510      	push	{r4, lr}
     a64:	7881      	ldrb	r1, [r0, #2]
     a66:	7840      	ldrb	r0, [r0, #1]
     a68:	4301      	orrs	r1, r0
     a6a:	d002      	beq.n	a72 <sdc_support_dle_peripheral+0x12>
     a6c:	f04f 30ff 	mov.w	r0, #4294967295
     a70:	bd10      	pop	{r4, pc}
     a72:	f005 ff6d 	bl	6950 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
     a76:	2000      	movs	r0, #0
     a78:	bd10      	pop	{r4, pc}
     a7a:	0000      	.short	0x0000
     a7c:	20000028 	.word	0x20000028

00000a80 <sdc_support_le_2m_phy>:
     a80:	4806      	ldr	r0, [pc, #24]	; (a9c <sdc_support_le_2m_phy+0x1c>)
     a82:	b510      	push	{r4, lr}
     a84:	7881      	ldrb	r1, [r0, #2]
     a86:	7840      	ldrb	r0, [r0, #1]
     a88:	4301      	orrs	r1, r0
     a8a:	d002      	beq.n	a92 <sdc_support_le_2m_phy+0x12>
     a8c:	f04f 30ff 	mov.w	r0, #4294967295
     a90:	bd10      	pop	{r4, pc}
     a92:	f00e ffff 	bl	fa94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     a96:	2000      	movs	r0, #0
     a98:	bd10      	pop	{r4, pc}
     a9a:	0000      	.short	0x0000
     a9c:	20000028 	.word	0x20000028

00000aa0 <sdc_support_peripheral>:
     aa0:	4806      	ldr	r0, [pc, #24]	; (abc <sdc_support_peripheral+0x1c>)
     aa2:	b510      	push	{r4, lr}
     aa4:	7881      	ldrb	r1, [r0, #2]
     aa6:	7840      	ldrb	r0, [r0, #1]
     aa8:	4301      	orrs	r1, r0
     aaa:	d002      	beq.n	ab2 <sdc_support_peripheral+0x12>
     aac:	f04f 30ff 	mov.w	r0, #4294967295
     ab0:	bd10      	pop	{r4, pc}
     ab2:	f006 fa01 	bl	6eb8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
     ab6:	2000      	movs	r0, #0
     ab8:	bd10      	pop	{r4, pc}
     aba:	0000      	.short	0x0000
     abc:	20000028 	.word	0x20000028

00000ac0 <sdc_support_phy_update_peripheral>:
     ac0:	4806      	ldr	r0, [pc, #24]	; (adc <sdc_support_phy_update_peripheral+0x1c>)
     ac2:	b510      	push	{r4, lr}
     ac4:	7881      	ldrb	r1, [r0, #2]
     ac6:	7840      	ldrb	r0, [r0, #1]
     ac8:	4301      	orrs	r1, r0
     aca:	d002      	beq.n	ad2 <sdc_support_phy_update_peripheral+0x12>
     acc:	f04f 30ff 	mov.w	r0, #4294967295
     ad0:	bd10      	pop	{r4, pc}
     ad2:	f00e ffef 	bl	fab4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
     ad6:	2000      	movs	r0, #0
     ad8:	bd10      	pop	{r4, pc}
     ada:	0000      	.short	0x0000
     adc:	20000028 	.word	0x20000028
     ae0:	00000001 	.word	0x00000001
     ae4:	00010100 	.word	0x00010100
     ae8:	031b1b00 	.word	0x031b1b00
     aec:	00000002 	.word	0x00000002
     af0:	00001d4c 	.word	0x00001d4c
     af4:	001f0000 	.word	0x001f0000
	...
     b04:	2f2d0cd8 	.word	0x2f2d0cd8
     b08:	5ce2ae36 	.word	0x5ce2ae36
     b0c:	4c802680 	.word	0x4c802680
     b10:	53164d3f 	.word	0x53164d3f
     b14:	73c79650 	.word	0x73c79650

00000b18 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b18:	4a05      	ldr	r2, [pc, #20]	; (b30 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b1a:	b510      	push	{r4, lr}
     b1c:	6852      	ldr	r2, [r2, #4]
     b1e:	b112      	cbz	r2, b26 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b24:	4710      	bx	r2
     b26:	2192      	movs	r1, #146	; 0x92
     b28:	2004      	movs	r0, #4
     b2a:	f7ff ff55 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b2e:	0000      	.short	0x0000
     b30:	20000a28 	.word	0x20000a28

00000b34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     b34:	4a05      	ldr	r2, [pc, #20]	; (b4c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     b36:	b510      	push	{r4, lr}
     b38:	6892      	ldr	r2, [r2, #8]
     b3a:	b112      	cbz	r2, b42 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b40:	4710      	bx	r2
     b42:	2198      	movs	r1, #152	; 0x98
     b44:	2004      	movs	r0, #4
     b46:	f7ff ff47 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b4a:	0000      	.short	0x0000
     b4c:	20000a28 	.word	0x20000a28

00000b50 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b50:	4805      	ldr	r0, [pc, #20]	; (b68 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b52:	6801      	ldr	r1, [r0, #0]
     b54:	b129      	cbz	r1, b62 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b56:	6841      	ldr	r1, [r0, #4]
     b58:	b119      	cbz	r1, b62 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b5a:	6880      	ldr	r0, [r0, #8]
     b5c:	b108      	cbz	r0, b62 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b5e:	2001      	movs	r0, #1
     b60:	4770      	bx	lr
     b62:	2000      	movs	r0, #0
     b64:	4770      	bx	lr
     b66:	0000      	.short	0x0000
     b68:	20000a28 	.word	0x20000a28

00000b6c <sdc_rand_source_register>:
     b6c:	4902      	ldr	r1, [pc, #8]	; (b78 <sdc_rand_source_register+0xc>)
     b6e:	c80d      	ldmia	r0, {r0, r2, r3}
     b70:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     b74:	2000      	movs	r0, #0
     b76:	4770      	bx	lr
     b78:	20000a28 	.word	0x20000a28

00000b7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b7e:	4c12      	ldr	r4, [pc, #72]	; (bc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     b80:	2600      	movs	r6, #0
     b82:	6825      	ldr	r5, [r4, #0]
     b84:	e011      	b.n	baa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b86:	9800      	ldr	r0, [sp, #0]
     b88:	2802      	cmp	r0, #2
     b8a:	d002      	beq.n	b92 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     b8c:	2803      	cmp	r0, #3
     b8e:	d10c      	bne.n	baa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b90:	e006      	b.n	ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     b92:	6820      	ldr	r0, [r4, #0]
     b94:	b110      	cbz	r0, b9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     b96:	2000      	movs	r0, #0
     b98:	6026      	str	r6, [r4, #0]
     b9a:	e005      	b.n	ba8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     b9c:	2128      	movs	r1, #40	; 0x28
     b9e:	e00c      	b.n	bba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     ba0:	6820      	ldr	r0, [r4, #0]
     ba2:	b168      	cbz	r0, bc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     ba4:	2001      	movs	r0, #1
     ba6:	6026      	str	r6, [r4, #0]
     ba8:	47a8      	blx	r5
     baa:	4668      	mov	r0, sp
     bac:	f000 fcd0 	bl	1550 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     bb0:	2800      	cmp	r0, #0
     bb2:	d0e8      	beq.n	b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     bb4:	2805      	cmp	r0, #5
     bb6:	d005      	beq.n	bc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     bb8:	2135      	movs	r1, #53	; 0x35
     bba:	2004      	movs	r0, #4
     bbc:	f7ff ff0c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bc0:	212d      	movs	r1, #45	; 0x2d
     bc2:	e7fa      	b.n	bba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bc6:	0000      	.short	0x0000
     bc8:	20000030 	.word	0x20000030

00000bcc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     bcc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     bd0:	4e25      	ldr	r6, [pc, #148]	; (c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     bd2:	4605      	mov	r5, r0
     bd4:	1d00      	adds	r0, r0, #4
     bd6:	f106 0744 	add.w	r7, r6, #68	; 0x44
     bda:	6030      	str	r0, [r6, #0]
     bdc:	7838      	ldrb	r0, [r7, #0]
     bde:	b158      	cbz	r0, bf8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     be0:	78ba      	ldrb	r2, [r7, #2]
     be2:	463c      	mov	r4, r7
     be4:	1c79      	adds	r1, r7, #1
     be6:	4628      	mov	r0, r5
     be8:	1c92      	adds	r2, r2, #2
     bea:	f00f fbf5 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     bee:	2000      	movs	r0, #0
     bf0:	7020      	strb	r0, [r4, #0]
     bf2:	2004      	movs	r0, #4
     bf4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     bf8:	481b      	ldr	r0, [pc, #108]	; (c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     bfa:	f001 fe7f 	bl	28fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     bfe:	4604      	mov	r4, r0
     c00:	2802      	cmp	r0, #2
     c02:	d004      	beq.n	c0e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c04:	2c04      	cmp	r4, #4
     c06:	d007      	beq.n	c18 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c08:	2c08      	cmp	r4, #8
     c0a:	d027      	beq.n	c5c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
     c0c:	e02a      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c0e:	4916      	ldr	r1, [pc, #88]	; (c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c10:	4628      	mov	r0, r5
     c12:	f00b fb02 	bl	c21a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c16:	e025      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c18:	7830      	ldrb	r0, [r6, #0]
     c1a:	2808      	cmp	r0, #8
     c1c:	d104      	bne.n	c28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
     c1e:	2105      	movs	r1, #5
     c20:	203e      	movs	r0, #62	; 0x3e
     c22:	f00b facc 	bl	c1be <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c26:	b160      	cbz	r0, c42 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x76>
     c28:	490f      	ldr	r1, [pc, #60]	; (c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c2a:	4628      	mov	r0, r5
     c2c:	f00b fb5a 	bl	c2e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c30:	2800      	cmp	r0, #0
     c32:	d0d3      	beq.n	bdc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c34:	78a9      	ldrb	r1, [r5, #2]
     c36:	7828      	ldrb	r0, [r5, #0]
     c38:	f00b fac1 	bl	c1be <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c3c:	2800      	cmp	r0, #0
     c3e:	d0cd      	beq.n	bdc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c40:	e010      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c42:	88b0      	ldrh	r0, [r6, #4]
     c44:	f8ad 0000 	strh.w	r0, [sp]
     c48:	a901      	add	r1, sp, #4
     c4a:	4668      	mov	r0, sp
     c4c:	f00b fe35 	bl	c8ba <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     c50:	2800      	cmp	r0, #0
     c52:	d0c3      	beq.n	bdc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c54:	21a7      	movs	r1, #167	; 0xa7
     c56:	2008      	movs	r0, #8
     c58:	f7ff febe 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c5c:	4902      	ldr	r1, [pc, #8]	; (c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c5e:	4628      	mov	r0, r5
     c60:	f00b fb09 	bl	c276 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c64:	4620      	mov	r0, r4
     c66:	e7c5      	b.n	bf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c68:	20000a34 	.word	0x20000a34
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	780a      	ldrb	r2, [r1, #0]
     c70:	7082      	strb	r2, [r0, #2]
     c72:	b33a      	cbz	r2, cc4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     c74:	2a01      	cmp	r2, #1
     c76:	d825      	bhi.n	cc4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     c78:	2313      	movs	r3, #19
     c7a:	7003      	strb	r3, [r0, #0]
     c7c:	2300      	movs	r3, #0
     c7e:	e00a      	b.n	c96 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
     c80:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     c84:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     c88:	78a6      	ldrb	r6, [r4, #2]
     c8a:	70ee      	strb	r6, [r5, #3]
     c8c:	8864      	ldrh	r4, [r4, #2]
     c8e:	0a24      	lsrs	r4, r4, #8
     c90:	1c5b      	adds	r3, r3, #1
     c92:	712c      	strb	r4, [r5, #4]
     c94:	b2db      	uxtb	r3, r3
     c96:	4293      	cmp	r3, r2
     c98:	d3f2      	bcc.n	c80 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
     c9a:	2300      	movs	r3, #0
     c9c:	e00b      	b.n	cb6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
     c9e:	bf00      	nop
     ca0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     ca4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     ca8:	792e      	ldrb	r6, [r5, #4]
     caa:	7166      	strb	r6, [r4, #5]
     cac:	88ad      	ldrh	r5, [r5, #4]
     cae:	0a2d      	lsrs	r5, r5, #8
     cb0:	1c5b      	adds	r3, r3, #1
     cb2:	71a5      	strb	r5, [r4, #6]
     cb4:	b2db      	uxtb	r3, r3
     cb6:	4293      	cmp	r3, r2
     cb8:	d3f2      	bcc.n	ca0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
     cba:	2101      	movs	r1, #1
     cbc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     cc0:	b2c0      	uxtb	r0, r0
     cc2:	bd70      	pop	{r4, r5, r6, pc}
     cc4:	2000      	movs	r0, #0
     cc6:	bd70      	pop	{r4, r5, r6, pc}

00000cc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     cc8:	2840      	cmp	r0, #64	; 0x40
     cca:	d203      	bcs.n	cd4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     ccc:	1e40      	subs	r0, r0, #1
     cce:	b2c1      	uxtb	r1, r0
     cd0:	4805      	ldr	r0, [pc, #20]	; (ce8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cd2:	e005      	b.n	ce0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     cd4:	28ff      	cmp	r0, #255	; 0xff
     cd6:	d005      	beq.n	ce4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     cd8:	3840      	subs	r0, #64	; 0x40
     cda:	b2c1      	uxtb	r1, r0
     cdc:	4802      	ldr	r0, [pc, #8]	; (ce8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cde:	3008      	adds	r0, #8
     ce0:	f00b bce2 	b.w	c6a8 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     ce4:	2001      	movs	r0, #1
     ce6:	4770      	bx	lr
     ce8:	2000003c 	.word	0x2000003c

00000cec <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     cec:	1e40      	subs	r0, r0, #1
     cee:	b2c1      	uxtb	r1, r0
     cf0:	4801      	ldr	r0, [pc, #4]	; (cf8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     cf2:	f00b bcd9 	b.w	c6a8 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     cf6:	0000      	.short	0x0000
     cf8:	2000004c 	.word	0x2000004c

00000cfc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     cfc:	b510      	push	{r4, lr}
     cfe:	4a07      	ldr	r2, [pc, #28]	; (d1c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d00:	6801      	ldr	r1, [r0, #0]
     d02:	4b06      	ldr	r3, [pc, #24]	; (d1c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d04:	6191      	str	r1, [r2, #24]
     d06:	6840      	ldr	r0, [r0, #4]
     d08:	61d0      	str	r0, [r2, #28]
     d0a:	681c      	ldr	r4, [r3, #0]
     d0c:	3218      	adds	r2, #24
     d0e:	43a1      	bics	r1, r4
     d10:	6011      	str	r1, [r2, #0]
     d12:	6859      	ldr	r1, [r3, #4]
     d14:	4388      	bics	r0, r1
     d16:	6050      	str	r0, [r2, #4]
     d18:	bd10      	pop	{r4, pc}
     d1a:	0000      	.short	0x0000
     d1c:	20000034 	.word	0x20000034

00000d20 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d20:	4a06      	ldr	r2, [pc, #24]	; (d3c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d22:	6801      	ldr	r1, [r0, #0]
     d24:	6091      	str	r1, [r2, #8]
     d26:	6840      	ldr	r0, [r0, #4]
     d28:	60d0      	str	r0, [r2, #12]
     d2a:	3208      	adds	r2, #8
     d2c:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     d30:	6011      	str	r1, [r2, #0]
     d32:	4903      	ldr	r1, [pc, #12]	; (d40 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     d34:	4308      	orrs	r0, r1
     d36:	6050      	str	r0, [r2, #4]
     d38:	4770      	bx	lr
     d3a:	0000      	.short	0x0000
     d3c:	20000034 	.word	0x20000034
     d40:	024007f8 	.word	0x024007f8

00000d44 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     d44:	4902      	ldr	r1, [pc, #8]	; (d50 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     d46:	6802      	ldr	r2, [r0, #0]
     d48:	610a      	str	r2, [r1, #16]
     d4a:	6840      	ldr	r0, [r0, #4]
     d4c:	6148      	str	r0, [r1, #20]
     d4e:	4770      	bx	lr
     d50:	20000034 	.word	0x20000034

00000d54 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d54:	4807      	ldr	r0, [pc, #28]	; (d74 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d56:	f04f 31ff 	mov.w	r1, #4294967295
     d5a:	2200      	movs	r2, #0
     d5c:	6001      	str	r1, [r0, #0]
     d5e:	0cc9      	lsrs	r1, r1, #19
     d60:	6041      	str	r1, [r0, #4]
     d62:	f100 0108 	add.w	r1, r0, #8
     d66:	201f      	movs	r0, #31
     d68:	600a      	str	r2, [r1, #0]
     d6a:	604a      	str	r2, [r1, #4]
     d6c:	3108      	adds	r1, #8
     d6e:	e9c1 0200 	strd	r0, r2, [r1]
     d72:	4770      	bx	lr
     d74:	2000003c 	.word	0x2000003c

00000d78 <sdc_hci_cmd_cb_reset>:
     d78:	b510      	push	{r4, lr}
     d7a:	f7ff ffeb 	bl	d54 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d7e:	f00e fe02 	bl	f986 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d82:	4604      	mov	r4, r0
     d84:	4802      	ldr	r0, [pc, #8]	; (d90 <sdc_hci_cmd_cb_reset+0x18>)
     d86:	6800      	ldr	r0, [r0, #0]
     d88:	b100      	cbz	r0, d8c <sdc_hci_cmd_cb_reset+0x14>
     d8a:	4780      	blx	r0
     d8c:	4620      	mov	r0, r4
     d8e:	bd10      	pop	{r4, pc}
     d90:	20000054 	.word	0x20000054

00000d94 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     d94:	4901      	ldr	r1, [pc, #4]	; (d9c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     d96:	6008      	str	r0, [r1, #0]
     d98:	4770      	bx	lr
     d9a:	0000      	.short	0x0000
     d9c:	20000054 	.word	0x20000054

00000da0 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     da0:	2102      	movs	r1, #2
     da2:	8001      	strh	r1, [r0, #0]
     da4:	8041      	strh	r1, [r0, #2]
     da6:	2100      	movs	r1, #0
     da8:	7101      	strb	r1, [r0, #4]
     daa:	21d8      	movs	r1, #216	; 0xd8
     dac:	7141      	strb	r1, [r0, #5]
     dae:	f642 510c 	movw	r1, #11532	; 0x2d0c
     db2:	80c1      	strh	r1, [r0, #6]
     db4:	4901      	ldr	r1, [pc, #4]	; (dbc <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     db6:	6081      	str	r1, [r0, #8]
     db8:	2000      	movs	r0, #0
     dba:	4770      	bx	lr
     dbc:	e2ae362f 	.word	0xe2ae362f

00000dc0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
     dc0:	b510      	push	{r4, lr}
     dc2:	2802      	cmp	r0, #2
     dc4:	d304      	bcc.n	dd0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
     dc6:	f240 2103 	movw	r1, #515	; 0x203
     dca:	2017      	movs	r0, #23
     dcc:	f7ff fe04 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     dd0:	4901      	ldr	r1, [pc, #4]	; (dd8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
     dd2:	5c08      	ldrb	r0, [r1, r0]
     dd4:	bd10      	pop	{r4, pc}
     dd6:	0000      	.short	0x0000
     dd8:	20000b7c 	.word	0x20000b7c

00000ddc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dde:	0005      	movs	r5, r0
     de0:	9500      	str	r5, [sp, #0]
     de2:	d00d      	beq.n	e00 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
     de4:	2600      	movs	r6, #0
     de6:	7808      	ldrb	r0, [r1, #0]
     de8:	7849      	ldrb	r1, [r1, #1]
     dea:	4604      	mov	r4, r0
     dec:	42a1      	cmp	r1, r4
     dee:	d900      	bls.n	df2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
     df0:	460c      	mov	r4, r1
     df2:	07aa      	lsls	r2, r5, #30
     df4:	d006      	beq.n	e04 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     df6:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     dfa:	2017      	movs	r0, #23
     dfc:	f7ff fdec 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e00:	2601      	movs	r6, #1
     e02:	e7f0      	b.n	de6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
     e04:	4f12      	ldr	r7, [pc, #72]	; (e50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
     e06:	7038      	strb	r0, [r7, #0]
     e08:	7079      	strb	r1, [r7, #1]
     e0a:	4631      	mov	r1, r6
     e0c:	4668      	mov	r0, sp
     e0e:	f000 f8d3 	bl	fb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
     e12:	2100      	movs	r1, #0
     e14:	460b      	mov	r3, r1
     e16:	9800      	ldr	r0, [sp, #0]
     e18:	1cc0      	adds	r0, r0, #3
     e1a:	f020 0003 	bic.w	r0, r0, #3
     e1e:	9000      	str	r0, [sp, #0]
     e20:	b966      	cbnz	r6, e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e22:	eb07 0281 	add.w	r2, r7, r1, lsl #2
     e26:	60d0      	str	r0, [r2, #12]
     e28:	2000      	movs	r0, #0
     e2a:	e005      	b.n	e38 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
     e2c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
     e30:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
     e34:	1c40      	adds	r0, r0, #1
     e36:	b2c0      	uxtb	r0, r0
     e38:	42a0      	cmp	r0, r4
     e3a:	d3f7      	bcc.n	e2c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
     e3c:	9800      	ldr	r0, [sp, #0]
     e3e:	1c49      	adds	r1, r1, #1
     e40:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     e44:	b2c9      	uxtb	r1, r1
     e46:	9000      	str	r0, [sp, #0]
     e48:	2902      	cmp	r1, #2
     e4a:	d3e4      	bcc.n	e16 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
     e4c:	1b40      	subs	r0, r0, r5
     e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e50:	20000b7c 	.word	0x20000b7c

00000e54 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     e54:	b570      	push	{r4, r5, r6, lr}
     e56:	4604      	mov	r4, r0
     e58:	7985      	ldrb	r5, [r0, #6]
     e5a:	f000 f8e9 	bl	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
     e5e:	4a0c      	ldr	r2, [pc, #48]	; (e90 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     e60:	79e1      	ldrb	r1, [r4, #7]
     e62:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     e66:	e00e      	b.n	e86 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     e68:	68d3      	ldr	r3, [r2, #12]
     e6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     e6e:	b143      	cbz	r3, e82 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     e70:	1c48      	adds	r0, r1, #1
     e72:	71e0      	strb	r0, [r4, #7]
     e74:	80a1      	strh	r1, [r4, #4]
     e76:	68d0      	ldr	r0, [r2, #12]
     e78:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     e7c:	6020      	str	r0, [r4, #0]
     e7e:	2000      	movs	r0, #0
     e80:	bd70      	pop	{r4, r5, r6, pc}
     e82:	1c49      	adds	r1, r1, #1
     e84:	b2c9      	uxtb	r1, r1
     e86:	4281      	cmp	r1, r0
     e88:	d3ee      	bcc.n	e68 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     e8a:	71e1      	strb	r1, [r4, #7]
     e8c:	2005      	movs	r0, #5
     e8e:	bd70      	pop	{r4, r5, r6, pc}
     e90:	20000b7c 	.word	0x20000b7c

00000e94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     e94:	b4f0      	push	{r4, r5, r6, r7}
     e96:	b121      	cbz	r1, ea2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
     e98:	2901      	cmp	r1, #1
     e9a:	d002      	beq.n	ea2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
     e9c:	bcf0      	pop	{r4, r5, r6, r7}
     e9e:	2000      	movs	r0, #0
     ea0:	4770      	bx	lr
     ea2:	4a0f      	ldr	r2, [pc, #60]	; (ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
     ea4:	2500      	movs	r5, #0
     ea6:	462b      	mov	r3, r5
     ea8:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eac:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     eb0:	5c57      	ldrb	r7, [r2, r1]
     eb2:	e00a      	b.n	eca <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
     eb4:	195a      	adds	r2, r3, r5
     eb6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
     eba:	b292      	uxth	r2, r2
     ebc:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     ec0:	f1bc 0f00 	cmp.w	ip, #0
     ec4:	d004      	beq.n	ed0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
     ec6:	1c5b      	adds	r3, r3, #1
     ec8:	b29b      	uxth	r3, r3
     eca:	429f      	cmp	r7, r3
     ecc:	d8f2      	bhi.n	eb4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
     ece:	4622      	mov	r2, r4
     ed0:	8002      	strh	r2, [r0, #0]
     ed2:	4610      	mov	r0, r2
     ed4:	42a2      	cmp	r2, r4
     ed6:	d0e1      	beq.n	e9c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
     ed8:	bcf0      	pop	{r4, r5, r6, r7}
     eda:	f000 b835 	b.w	f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
     ede:	0000      	.short	0x0000
     ee0:	20000b7c 	.word	0x20000b7c

00000ee4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ee8:	4606      	mov	r6, r0
     eea:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     eee:	460c      	mov	r4, r1
     ef0:	f243 0702 	movw	r7, #12290	; 0x3002
     ef4:	38ff      	subs	r0, #255	; 0xff
     ef6:	d020      	beq.n	f3a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
     ef8:	2c02      	cmp	r4, #2
     efa:	d302      	bcc.n	f02 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
     efc:	2007      	movs	r0, #7
     efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f02:	4630      	mov	r0, r6
     f04:	f000 f848 	bl	f98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
     f08:	0005      	movs	r5, r0
     f0a:	d016      	beq.n	f3a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
     f0c:	480c      	ldr	r0, [pc, #48]	; (f40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
     f0e:	4629      	mov	r1, r5
     f10:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
     f14:	4630      	mov	r0, r6
     f16:	4790      	blx	r2
     f18:	480a      	ldr	r0, [pc, #40]	; (f44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
     f1a:	2100      	movs	r1, #0
     f1c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
     f20:	68f8      	ldr	r0, [r7, #12]
     f22:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
     f26:	4620      	mov	r0, r4
     f28:	f000 f878 	bl	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     f2c:	4602      	mov	r2, r0
     f2e:	4629      	mov	r1, r5
     f30:	6878      	ldr	r0, [r7, #4]
     f32:	f00b ff50 	bl	cdd6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f36:	2000      	movs	r0, #0
     f38:	e7e1      	b.n	efe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
     f3a:	4638      	mov	r0, r7
     f3c:	e7df      	b.n	efe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
     f3e:	0000      	.short	0x0000
     f40:	00001048 	.word	0x00001048
     f44:	20000b7c 	.word	0x20000b7c
     f48:	b570      	push	{r4, r5, r6, lr}
     f4a:	460e      	mov	r6, r1
     f4c:	4605      	mov	r5, r0
     f4e:	f00b ff7c 	bl	ce4a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
     f52:	b158      	cbz	r0, f6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
     f54:	480f      	ldr	r0, [pc, #60]	; (f94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
     f56:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     f5a:	68e0      	ldr	r0, [r4, #12]
     f5c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     f60:	b138      	cbz	r0, f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
     f62:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     f66:	2017      	movs	r0, #23
     f68:	f7ff fd36 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f6c:	f240 1189 	movw	r1, #393	; 0x189
     f70:	e7f9      	b.n	f66 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
     f72:	6860      	ldr	r0, [r4, #4]
     f74:	2800      	cmp	r0, #0
     f76:	d00b      	beq.n	f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
     f78:	4630      	mov	r0, r6
     f7a:	f000 f84f 	bl	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     f7e:	4601      	mov	r1, r0
     f80:	6860      	ldr	r0, [r4, #4]
     f82:	f00b fed0 	bl	cd26 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     f86:	2800      	cmp	r0, #0
     f88:	d002      	beq.n	f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
     f8a:	68e1      	ldr	r1, [r4, #12]
     f8c:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     f90:	bd70      	pop	{r4, r5, r6, pc}
     f92:	0000      	.short	0x0000
     f94:	20000b7c 	.word	0x20000b7c
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	460c      	mov	r4, r1
     f9c:	4605      	mov	r5, r0
     f9e:	f00b ff54 	bl	ce4a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
     fa2:	2800      	cmp	r0, #0
     fa4:	d005      	beq.n	fb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
     fa6:	4803      	ldr	r0, [pc, #12]	; (fb4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
     fa8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fac:	68c0      	ldr	r0, [r0, #12]
     fae:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fb2:	bd70      	pop	{r4, r5, r6, pc}
     fb4:	20000b7c 	.word	0x20000b7c
     fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fbc:	4e16      	ldr	r6, [pc, #88]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     fbe:	4688      	mov	r8, r1
     fc0:	4605      	mov	r5, r0
     fc2:	2400      	movs	r4, #0
     fc4:	6828      	ldr	r0, [r5, #0]
     fc6:	1cc0      	adds	r0, r0, #3
     fc8:	f020 0003 	bic.w	r0, r0, #3
     fcc:	6028      	str	r0, [r5, #0]
     fce:	4620      	mov	r0, r4
     fd0:	f000 f824 	bl	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     fd4:	5d31      	ldrb	r1, [r6, r4]
     fd6:	4348      	muls	r0, r1
     fd8:	f1b8 0f00 	cmp.w	r8, #0
     fdc:	d001      	beq.n	fe2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
     fde:	2200      	movs	r2, #0
     fe0:	e000      	b.n	fe4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
     fe2:	682a      	ldr	r2, [r5, #0]
     fe4:	4601      	mov	r1, r0
     fe6:	9200      	str	r2, [sp, #0]
     fe8:	b132      	cbz	r2, ff8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
     fea:	2700      	movs	r7, #0
     fec:	ea4f 000d 	mov.w	r0, sp
     ff0:	f00b feca 	bl	cd88 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     ff4:	b11f      	cbz	r7, ffe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
     ff6:	e006      	b.n	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
     ff8:	2701      	movs	r7, #1
     ffa:	2000      	movs	r0, #0
     ffc:	e7f8      	b.n	ff0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
     ffe:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1002:	9a00      	ldr	r2, [sp, #0]
    1004:	604a      	str	r2, [r1, #4]
    1006:	6829      	ldr	r1, [r5, #0]
    1008:	1c64      	adds	r4, r4, #1
    100a:	4408      	add	r0, r1
    100c:	b2e4      	uxtb	r4, r4
    100e:	6028      	str	r0, [r5, #0]
    1010:	2c02      	cmp	r4, #2
    1012:	d3d7      	bcc.n	fc4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    1014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1018:	20000b7c 	.word	0x20000b7c
    101c:	4903      	ldr	r1, [pc, #12]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    101e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    1022:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    1026:	1cc0      	adds	r0, r0, #3
    1028:	4008      	ands	r0, r1
    102a:	4770      	bx	lr
    102c:	00001044 	.word	0x00001044
    1030:	4903      	ldr	r1, [pc, #12]	; (1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
    1032:	7808      	ldrb	r0, [r1, #0]
    1034:	7849      	ldrb	r1, [r1, #1]
    1036:	4288      	cmp	r0, r1
    1038:	d200      	bcs.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    103a:	4608      	mov	r0, r1
    103c:	4770      	bx	lr
    103e:	0000      	.short	0x0000
    1040:	20000b7c 	.word	0x20000b7c
    1044:	011802f8 	.word	0x011802f8
    1048:	0000eb29 	.word	0x0000eb29
    104c:	0000e0d3 	.word	0x0000e0d3

00001050 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1050:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1054:	4c24      	ldr	r4, [pc, #144]	; (10e8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1056:	4606      	mov	r6, r0
    1058:	b081      	sub	sp, #4
    105a:	6820      	ldr	r0, [r4, #0]
    105c:	469a      	mov	sl, r3
    105e:	4693      	mov	fp, r2
    1060:	b158      	cbz	r0, 107a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    1062:	7a01      	ldrb	r1, [r0, #8]
    1064:	42b1      	cmp	r1, r6
    1066:	d903      	bls.n	1070 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1068:	6840      	ldr	r0, [r0, #4]
    106a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    106e:	b140      	cbz	r0, 1082 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1070:	f243 0002 	movw	r0, #12290	; 0x3002
    1074:	b005      	add	sp, #20
    1076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    107a:	21a5      	movs	r1, #165	; 0xa5
    107c:	2018      	movs	r0, #24
    107e:	f7ff fcab 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1082:	4619      	mov	r1, r3
    1084:	9802      	ldr	r0, [sp, #8]
    1086:	f00b ff03 	bl	ce90 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    108a:	4680      	mov	r8, r0
    108c:	4658      	mov	r0, fp
    108e:	990e      	ldr	r1, [sp, #56]	; 0x38
    1090:	f00b fef4 	bl	ce7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    1094:	4605      	mov	r5, r0
    1096:	eb08 0005 	add.w	r0, r8, r5
    109a:	1d00      	adds	r0, r0, #4
    109c:	b287      	uxth	r7, r0
    109e:	6820      	ldr	r0, [r4, #0]
    10a0:	46a1      	mov	r9, r4
    10a2:	4639      	mov	r1, r7
    10a4:	6800      	ldr	r0, [r0, #0]
    10a6:	f00b fe3e 	bl	cd26 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10aa:	0004      	movs	r4, r0
    10ac:	d01a      	beq.n	10e4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10ae:	8067      	strh	r7, [r4, #2]
    10b0:	8025      	strh	r5, [r4, #0]
    10b2:	4629      	mov	r1, r5
    10b4:	1d20      	adds	r0, r4, #4
    10b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10b8:	4607      	mov	r7, r0
    10ba:	465a      	mov	r2, fp
    10bc:	2309      	movs	r3, #9
    10be:	9500      	str	r5, [sp, #0]
    10c0:	f00b fdab 	bl	cc1a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10c4:	8820      	ldrh	r0, [r4, #0]
    10c6:	4641      	mov	r1, r8
    10c8:	4438      	add	r0, r7
    10ca:	230a      	movs	r3, #10
    10cc:	9a02      	ldr	r2, [sp, #8]
    10ce:	f8cd a000 	str.w	sl, [sp]
    10d2:	f00b fda2 	bl	cc1a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10d6:	f8d9 0000 	ldr.w	r0, [r9]
    10da:	6840      	ldr	r0, [r0, #4]
    10dc:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    10e0:	2000      	movs	r0, #0
    10e2:	e7c7      	b.n	1074 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    10e4:	2004      	movs	r0, #4
    10e6:	e7c5      	b.n	1074 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    10e8:	20000058 	.word	0x20000058

000010ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    10ec:	b570      	push	{r4, r5, r6, lr}
    10ee:	4c14      	ldr	r4, [pc, #80]	; (1140 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    10f0:	6823      	ldr	r3, [r4, #0]
    10f2:	b18b      	cbz	r3, 1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    10f4:	7a19      	ldrb	r1, [r3, #8]
    10f6:	4281      	cmp	r1, r0
    10f8:	d912      	bls.n	1120 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    10fa:	685a      	ldr	r2, [r3, #4]
    10fc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1100:	b171      	cbz	r1, 1120 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1102:	2500      	movs	r5, #0
    1104:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1108:	884a      	ldrh	r2, [r1, #2]
    110a:	6818      	ldr	r0, [r3, #0]
    110c:	f00b fe63 	bl	cdd6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1110:	6821      	ldr	r1, [r4, #0]
    1112:	2000      	movs	r0, #0
    1114:	7a0a      	ldrb	r2, [r1, #8]
    1116:	e00c      	b.n	1132 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1118:	21c6      	movs	r1, #198	; 0xc6
    111a:	2018      	movs	r0, #24
    111c:	f7ff fc5c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1120:	f243 0002 	movw	r0, #12290	; 0x3002
    1124:	bd70      	pop	{r4, r5, r6, pc}
    1126:	684b      	ldr	r3, [r1, #4]
    1128:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    112c:	b933      	cbnz	r3, 113c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    112e:	1c40      	adds	r0, r0, #1
    1130:	b2c0      	uxtb	r0, r0
    1132:	4282      	cmp	r2, r0
    1134:	d8f7      	bhi.n	1126 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1136:	6808      	ldr	r0, [r1, #0]
    1138:	f00b fe42 	bl	cdc0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    113c:	2000      	movs	r0, #0
    113e:	bd70      	pop	{r4, r5, r6, pc}
    1140:	20000058 	.word	0x20000058

00001144 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1148:	460d      	mov	r5, r1
    114a:	0004      	movs	r4, r0
    114c:	4690      	mov	r8, r2
    114e:	f04f 0600 	mov.w	r6, #0
    1152:	d006      	beq.n	1162 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1154:	2700      	movs	r7, #0
    1156:	07a0      	lsls	r0, r4, #30
    1158:	d005      	beq.n	1166 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    115a:	2186      	movs	r1, #134	; 0x86
    115c:	2018      	movs	r0, #24
    115e:	f7ff fc3b 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1162:	2701      	movs	r7, #1
    1164:	e7f7      	b.n	1156 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1166:	b1cd      	cbz	r5, 119c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1168:	4611      	mov	r1, r2
    116a:	2000      	movs	r0, #0
    116c:	f00b fe0c 	bl	cd88 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1170:	300c      	adds	r0, #12
    1172:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1176:	b98f      	cbnz	r7, 119c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1178:	4f0a      	ldr	r7, [pc, #40]	; (11a4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    117a:	f104 000c 	add.w	r0, r4, #12
    117e:	00aa      	lsls	r2, r5, #2
    1180:	603c      	str	r4, [r7, #0]
    1182:	7225      	strb	r5, [r4, #8]
    1184:	6060      	str	r0, [r4, #4]
    1186:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    118a:	6020      	str	r0, [r4, #0]
    118c:	2100      	movs	r1, #0
    118e:	6860      	ldr	r0, [r4, #4]
    1190:	f00f f99c 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1194:	4641      	mov	r1, r8
    1196:	6838      	ldr	r0, [r7, #0]
    1198:	f00b fdf6 	bl	cd88 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    119c:	4630      	mov	r0, r6
    119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11a2:	0000      	.short	0x0000
    11a4:	20000058 	.word	0x20000058

000011a8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	4d08      	ldr	r5, [pc, #32]	; (11cc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11ac:	6828      	ldr	r0, [r5, #0]
    11ae:	2800      	cmp	r0, #0
    11b0:	d00a      	beq.n	11c8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11b2:	2400      	movs	r4, #0
    11b4:	e004      	b.n	11c0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11b6:	4620      	mov	r0, r4
    11b8:	f7ff ff98 	bl	10ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    11bc:	1c64      	adds	r4, r4, #1
    11be:	b2e4      	uxtb	r4, r4
    11c0:	6828      	ldr	r0, [r5, #0]
    11c2:	7a00      	ldrb	r0, [r0, #8]
    11c4:	42a0      	cmp	r0, r4
    11c6:	d8f6      	bhi.n	11b6 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    11c8:	bd70      	pop	{r4, r5, r6, pc}
    11ca:	0000      	.short	0x0000
    11cc:	20000058 	.word	0x20000058

000011d0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    11d0:	4909      	ldr	r1, [pc, #36]	; (11f8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    11d2:	b510      	push	{r4, lr}
    11d4:	4602      	mov	r2, r0
    11d6:	6809      	ldr	r1, [r1, #0]
    11d8:	2000      	movs	r0, #0
    11da:	b149      	cbz	r1, 11f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    11dc:	7a0b      	ldrb	r3, [r1, #8]
    11de:	4293      	cmp	r3, r2
    11e0:	d905      	bls.n	11ee <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    11e2:	6849      	ldr	r1, [r1, #4]
    11e4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    11e8:	2900      	cmp	r1, #0
    11ea:	d000      	beq.n	11ee <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    11ec:	1d08      	adds	r0, r1, #4
    11ee:	bd10      	pop	{r4, pc}
    11f0:	21ec      	movs	r1, #236	; 0xec
    11f2:	2018      	movs	r0, #24
    11f4:	f7ff fbf0 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11f8:	20000058 	.word	0x20000058

000011fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    11fc:	490a      	ldr	r1, [pc, #40]	; (1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    11fe:	b510      	push	{r4, lr}
    1200:	4602      	mov	r2, r0
    1202:	6809      	ldr	r1, [r1, #0]
    1204:	2000      	movs	r0, #0
    1206:	b159      	cbz	r1, 1220 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1208:	7a0b      	ldrb	r3, [r1, #8]
    120a:	4293      	cmp	r3, r2
    120c:	d907      	bls.n	121e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    120e:	6849      	ldr	r1, [r1, #4]
    1210:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1214:	2900      	cmp	r1, #0
    1216:	d002      	beq.n	121e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1218:	f831 0b04 	ldrh.w	r0, [r1], #4
    121c:	4408      	add	r0, r1
    121e:	bd10      	pop	{r4, pc}
    1220:	21fa      	movs	r1, #250	; 0xfa
    1222:	2018      	movs	r0, #24
    1224:	f7ff fbd8 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1228:	20000058 	.word	0x20000058
    122c:	b570      	push	{r4, r5, r6, lr}
    122e:	4b1e      	ldr	r3, [pc, #120]	; (12a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1230:	6845      	ldr	r5, [r0, #4]
    1232:	4604      	mov	r4, r0
    1234:	2200      	movs	r2, #0
    1236:	b1a1      	cbz	r1, 1262 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1238:	2001      	movs	r0, #1
    123a:	7060      	strb	r0, [r4, #1]
    123c:	8858      	ldrh	r0, [r3, #2]
    123e:	0881      	lsrs	r1, r0, #2
    1240:	f05f 0000 	movs.w	r0, #0
    1244:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1248:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    124c:	831a      	strh	r2, [r3, #24]
    124e:	8419      	strh	r1, [r3, #32]
    1250:	fb00 5301 	mla	r3, r0, r1, r5
    1254:	6073      	str	r3, [r6, #4]
    1256:	1823      	adds	r3, r4, r0
    1258:	1c40      	adds	r0, r0, #1
    125a:	751a      	strb	r2, [r3, #20]
    125c:	2804      	cmp	r0, #4
    125e:	d3f1      	bcc.n	1244 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1260:	bd70      	pop	{r4, r5, r6, pc}
    1262:	7062      	strb	r2, [r4, #1]
    1264:	f05f 0000 	movs.w	r0, #0
    1268:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    126c:	830a      	strh	r2, [r1, #24]
    126e:	840a      	strh	r2, [r1, #32]
    1270:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1274:	604a      	str	r2, [r1, #4]
    1276:	1821      	adds	r1, r4, r0
    1278:	1c40      	adds	r0, r0, #1
    127a:	750a      	strb	r2, [r1, #20]
    127c:	2804      	cmp	r0, #4
    127e:	d3f3      	bcc.n	1268 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1280:	8858      	ldrh	r0, [r3, #2]
    1282:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1286:	d201      	bcs.n	128c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1288:	0846      	lsrs	r6, r0, #1
    128a:	e000      	b.n	128e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    128c:	26ff      	movs	r6, #255	; 0xff
    128e:	f00b fe73 	bl	cf78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1292:	6065      	str	r5, [r4, #4]
    1294:	8420      	strh	r0, [r4, #32]
    1296:	1829      	adds	r1, r5, r0
    1298:	60a1      	str	r1, [r4, #8]
    129a:	8466      	strh	r6, [r4, #34]	; 0x22
    129c:	60e5      	str	r5, [r4, #12]
    129e:	84a0      	strh	r0, [r4, #36]	; 0x24
    12a0:	6121      	str	r1, [r4, #16]
    12a2:	84e6      	strh	r6, [r4, #38]	; 0x26
    12a4:	bd70      	pop	{r4, r5, r6, pc}
    12a6:	0000      	.short	0x0000
    12a8:	2000005c 	.word	0x2000005c

000012ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    12ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12b0:	b158      	cbz	r0, 12ca <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    12b2:	2500      	movs	r5, #0
    12b4:	4411      	add	r1, r2
    12b6:	4e24      	ldr	r6, [pc, #144]	; (1348 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    12b8:	b2cc      	uxtb	r4, r1
    12ba:	2700      	movs	r7, #0
    12bc:	7034      	strb	r4, [r6, #0]
    12be:	0781      	lsls	r1, r0, #30
    12c0:	d005      	beq.n	12ce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    12c2:	214e      	movs	r1, #78	; 0x4e
    12c4:	2009      	movs	r0, #9
    12c6:	f7ff fb87 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12ca:	2501      	movs	r5, #1
    12cc:	e7f2      	b.n	12b4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    12ce:	2b1f      	cmp	r3, #31
    12d0:	d804      	bhi.n	12dc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    12d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    12d6:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    12da:	e009      	b.n	12f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    12dc:	0059      	lsls	r1, r3, #1
    12de:	2bff      	cmp	r3, #255	; 0xff
    12e0:	d90c      	bls.n	12fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    12e2:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    12e6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    12ea:	d200      	bcs.n	12ee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    12ec:	4611      	mov	r1, r2
    12ee:	b289      	uxth	r1, r1
    12f0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    12f4:	1cc9      	adds	r1, r1, #3
    12f6:	4011      	ands	r1, r2
    12f8:	b135      	cbz	r5, 1308 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    12fa:	e007      	b.n	130c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    12fc:	227c      	movs	r2, #124	; 0x7c
    12fe:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1302:	d3f4      	bcc.n	12ee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1304:	217c      	movs	r1, #124	; 0x7c
    1306:	e7f2      	b.n	12ee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1308:	6070      	str	r0, [r6, #4]
    130a:	8071      	strh	r1, [r6, #2]
    130c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1310:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1314:	2200      	movs	r2, #0
    1316:	6876      	ldr	r6, [r6, #4]
    1318:	f04f 0c01 	mov.w	ip, #1
    131c:	e00d      	b.n	133a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    131e:	b94d      	cbnz	r5, 1334 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1320:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1324:	eb00 0e03 	add.w	lr, r0, r3
    1328:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    132c:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1330:	f8c7 e004 	str.w	lr, [r7, #4]
    1334:	1c52      	adds	r2, r2, #1
    1336:	440b      	add	r3, r1
    1338:	b2d2      	uxtb	r2, r2
    133a:	42a2      	cmp	r2, r4
    133c:	d3ef      	bcc.n	131e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    133e:	1ddb      	adds	r3, r3, #7
    1340:	f023 0007 	bic.w	r0, r3, #7
    1344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1348:	2000005c 	.word	0x2000005c

0000134c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    134c:	b570      	push	{r4, r5, r6, lr}
    134e:	4a10      	ldr	r2, [pc, #64]	; (1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>)
    1350:	2000      	movs	r0, #0
    1352:	6851      	ldr	r1, [r2, #4]
    1354:	7812      	ldrb	r2, [r2, #0]
    1356:	e014      	b.n	1382 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1358:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    135c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1360:	b16b      	cbz	r3, 137e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1366:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    136a:	d00c      	beq.n	1386 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    136c:	2500      	movs	r5, #0
    136e:	70a5      	strb	r5, [r4, #2]
    1370:	2101      	movs	r1, #1
    1372:	4620      	mov	r0, r4
    1374:	f7ff ff5a 	bl	122c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1378:	7025      	strb	r5, [r4, #0]
    137a:	4620      	mov	r0, r4
    137c:	bd70      	pop	{r4, r5, r6, pc}
    137e:	1c40      	adds	r0, r0, #1
    1380:	b2c0      	uxtb	r0, r0
    1382:	4290      	cmp	r0, r2
    1384:	d3e8      	bcc.n	1358 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1386:	21a9      	movs	r1, #169	; 0xa9
    1388:	2009      	movs	r0, #9
    138a:	f7ff fb25 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    138e:	0000      	.short	0x0000
    1390:	2000005c 	.word	0x2000005c

00001394 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1394:	4804      	ldr	r0, [pc, #16]	; (13a8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1396:	b510      	push	{r4, lr}
    1398:	8840      	ldrh	r0, [r0, #2]
    139a:	0884      	lsrs	r4, r0, #2
    139c:	f00b fdec 	bl	cf78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    13a0:	4284      	cmp	r4, r0
    13a2:	d300      	bcc.n	13a6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    13a4:	4620      	mov	r0, r4
    13a6:	bd10      	pop	{r4, pc}
    13a8:	2000005c 	.word	0x2000005c
    13ac:	b530      	push	{r4, r5, lr}
    13ae:	490d      	ldr	r1, [pc, #52]	; (13e4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    13b0:	2001      	movs	r0, #1
    13b2:	6048      	str	r0, [r1, #4]
    13b4:	1e82      	subs	r2, r0, #2
    13b6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13ba:	490b      	ldr	r1, [pc, #44]	; (13e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    13bc:	6088      	str	r0, [r1, #8]
    13be:	2300      	movs	r3, #0
    13c0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    13c4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13c8:	4c08      	ldr	r4, [pc, #32]	; (13ec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    13ca:	6023      	str	r3, [r4, #0]
    13cc:	1d25      	adds	r5, r4, #4
    13ce:	6028      	str	r0, [r5, #0]
    13d0:	6088      	str	r0, [r1, #8]
    13d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13d6:	6023      	str	r3, [r4, #0]
    13d8:	6028      	str	r0, [r5, #0]
    13da:	4906      	ldr	r1, [pc, #24]	; (13f4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    13dc:	4804      	ldr	r0, [pc, #16]	; (13f0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    13de:	6008      	str	r0, [r1, #0]
    13e0:	bd30      	pop	{r4, r5, pc}
    13e2:	0000      	.short	0x0000
    13e4:	4000e000 	.word	0x4000e000
    13e8:	4000f000 	.word	0x4000f000
    13ec:	4000f500 	.word	0x4000f500
    13f0:	3ff60000 	.word	0x3ff60000
    13f4:	4001f508 	.word	0x4001f508

000013f8 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    13f8:	b510      	push	{r4, lr}
    13fa:	f7ff ffd7 	bl	13ac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    13fe:	f00b fe92 	bl	d126 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1402:	4903      	ldr	r1, [pc, #12]	; (1410 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1404:	4801      	ldr	r0, [pc, #4]	; (140c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1406:	6008      	str	r0, [r1, #0]
    1408:	bd10      	pop	{r4, pc}
    140a:	0000      	.short	0x0000
    140c:	3ff60000 	.word	0x3ff60000
    1410:	4001f508 	.word	0x4001f508

00001414 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1414:	b510      	push	{r4, lr}
    1416:	f7ff ffc9 	bl	13ac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    141a:	f00b fe84 	bl	d126 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    141e:	f000 f887 	bl	1530 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1422:	4905      	ldr	r1, [pc, #20]	; (1438 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1424:	4803      	ldr	r0, [pc, #12]	; (1434 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1426:	6008      	str	r0, [r1, #0]
    1428:	f000 f8b8 	bl	159c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    142c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1430:	f000 b8dc 	b.w	15ec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1434:	3ff60000 	.word	0x3ff60000
    1438:	4001f508 	.word	0x4001f508
    143c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1440:	4682      	mov	sl, r0
    1442:	4838      	ldr	r0, [pc, #224]	; (1524 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1444:	f00e fee6 	bl	10214 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1448:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1524 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    144c:	b128      	cbz	r0, 145a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    144e:	2601      	movs	r6, #1
    1450:	f10b 0001 	add.w	r0, fp, #1
    1454:	21ff      	movs	r1, #255	; 0xff
    1456:	7001      	strb	r1, [r0, #0]
    1458:	e000      	b.n	145c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    145a:	2600      	movs	r6, #0
    145c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1460:	4c31      	ldr	r4, [pc, #196]	; (1528 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    1462:	f04f 0800 	mov.w	r8, #0
    1466:	1d2f      	adds	r7, r5, #4
    1468:	2101      	movs	r1, #1
    146a:	6061      	str	r1, [r4, #4]
    146c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1470:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1474:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1478:	6021      	str	r1, [r4, #0]
    147a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 152c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    147e:	e01c      	b.n	14ba <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1480:	f8d9 0000 	ldr.w	r0, [r9]
    1484:	06c0      	lsls	r0, r0, #27
    1486:	d518      	bpl.n	14ba <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1488:	200e      	movs	r0, #14
    148a:	f00b fe5b 	bl	d144 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    148e:	f3ef 8010 	mrs	r0, PRIMASK
    1492:	9000      	str	r0, [sp, #0]
    1494:	b672      	cpsid	i
    1496:	2103      	movs	r1, #3
    1498:	4620      	mov	r0, r4
    149a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    149e:	4629      	mov	r1, r5
    14a0:	f00b fe5d 	bl	d15e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    14a4:	b930      	cbnz	r0, 14b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    14a6:	4639      	mov	r1, r7
    14a8:	4620      	mov	r0, r4
    14aa:	f00b fe58 	bl	d15e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    14ae:	b908      	cbnz	r0, 14b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    14b0:	f00e ff47 	bl	10342 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    14b4:	9800      	ldr	r0, [sp, #0]
    14b6:	b900      	cbnz	r0, 14ba <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    14b8:	b662      	cpsie	i
    14ba:	4629      	mov	r1, r5
    14bc:	4620      	mov	r0, r4
    14be:	f00b fe4e 	bl	d15e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    14c2:	b928      	cbnz	r0, 14d0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    14c4:	4639      	mov	r1, r7
    14c6:	4620      	mov	r0, r4
    14c8:	f00b fe49 	bl	d15e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    14cc:	2800      	cmp	r0, #0
    14ce:	d0d7      	beq.n	1480 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    14d0:	4639      	mov	r1, r7
    14d2:	4620      	mov	r0, r4
    14d4:	f00b fe43 	bl	d15e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    14d8:	2800      	cmp	r0, #0
    14da:	d1c5      	bne.n	1468 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    14dc:	bb06      	cbnz	r6, 1520 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    14de:	f89b 1001 	ldrb.w	r1, [fp, #1]
    14e2:	f88d 1000 	strb.w	r1, [sp]
    14e6:	9900      	ldr	r1, [sp, #0]
    14e8:	9100      	str	r1, [sp, #0]
    14ea:	f89d 1000 	ldrb.w	r1, [sp]
    14ee:	b109      	cbz	r1, 14f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    14f0:	2501      	movs	r5, #1
    14f2:	e000      	b.n	14f6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    14f4:	2500      	movs	r5, #0
    14f6:	f10b 0001 	add.w	r0, fp, #1
    14fa:	f880 8000 	strb.w	r8, [r0]
    14fe:	2003      	movs	r0, #3
    1500:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1504:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1508:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    150c:	200e      	movs	r0, #14
    150e:	f00b fe19 	bl	d144 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1512:	4804      	ldr	r0, [pc, #16]	; (1524 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1514:	f00e fe95 	bl	10242 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1518:	b115      	cbz	r5, 1520 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    151a:	2011      	movs	r0, #17
    151c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1520:	2000      	movs	r0, #0
    1522:	e7fb      	b.n	151c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1524:	2000035c 	.word	0x2000035c
    1528:	4000e000 	.word	0x4000e000
    152c:	e000ed10 	.word	0xe000ed10

00001530 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1530:	b510      	push	{r4, lr}
    1532:	4806      	ldr	r0, [pc, #24]	; (154c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1534:	f00e fe81 	bl	1023a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1538:	b118      	cbz	r0, 1542 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    153a:	2127      	movs	r1, #39	; 0x27
    153c:	201d      	movs	r0, #29
    153e:	f7ff fa4b 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1542:	4802      	ldr	r0, [pc, #8]	; (154c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1544:	2100      	movs	r1, #0
    1546:	7041      	strb	r1, [r0, #1]
    1548:	bd10      	pop	{r4, pc}
    154a:	0000      	.short	0x0000
    154c:	2000035c 	.word	0x2000035c

00001550 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1550:	b570      	push	{r4, r5, r6, lr}
    1552:	4911      	ldr	r1, [pc, #68]	; (1598 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1554:	680a      	ldr	r2, [r1, #0]
    1556:	b1ea      	cbz	r2, 1594 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1558:	2300      	movs	r3, #0
    155a:	461d      	mov	r5, r3
    155c:	2401      	movs	r4, #1
    155e:	684a      	ldr	r2, [r1, #4]
    1560:	1c52      	adds	r2, r2, #1
    1562:	604a      	str	r2, [r1, #4]
    1564:	2a09      	cmp	r2, #9
    1566:	d300      	bcc.n	156a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1568:	604d      	str	r5, [r1, #4]
    156a:	790e      	ldrb	r6, [r1, #4]
    156c:	fa04 f206 	lsl.w	r2, r4, r6
    1570:	680e      	ldr	r6, [r1, #0]
    1572:	4216      	tst	r6, r2
    1574:	d00b      	beq.n	158e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1576:	f3ef 8310 	mrs	r3, PRIMASK
    157a:	b672      	cpsid	i
    157c:	680c      	ldr	r4, [r1, #0]
    157e:	4394      	bics	r4, r2
    1580:	600c      	str	r4, [r1, #0]
    1582:	b903      	cbnz	r3, 1586 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1584:	b662      	cpsie	i
    1586:	6849      	ldr	r1, [r1, #4]
    1588:	6001      	str	r1, [r0, #0]
    158a:	2000      	movs	r0, #0
    158c:	bd70      	pop	{r4, r5, r6, pc}
    158e:	1c5b      	adds	r3, r3, #1
    1590:	2b09      	cmp	r3, #9
    1592:	d3e4      	bcc.n	155e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1594:	2005      	movs	r0, #5
    1596:	bd70      	pop	{r4, r5, r6, pc}
    1598:	20000064 	.word	0x20000064

0000159c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    159c:	4802      	ldr	r0, [pc, #8]	; (15a8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    159e:	2100      	movs	r1, #0
    15a0:	6001      	str	r1, [r0, #0]
    15a2:	6041      	str	r1, [r0, #4]
    15a4:	4770      	bx	lr
    15a6:	0000      	.short	0x0000
    15a8:	20000064 	.word	0x20000064

000015ac <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    15ac:	b510      	push	{r4, lr}
    15ae:	4c04      	ldr	r4, [pc, #16]	; (15c0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    15b0:	7820      	ldrb	r0, [r4, #0]
    15b2:	28ff      	cmp	r0, #255	; 0xff
    15b4:	d003      	beq.n	15be <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    15b6:	f00a fb7d 	bl	bcb4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    15ba:	20ff      	movs	r0, #255	; 0xff
    15bc:	7020      	strb	r0, [r4, #0]
    15be:	bd10      	pop	{r4, pc}
    15c0:	20000000 	.word	0x20000000

000015c4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    15c4:	b510      	push	{r4, lr}
    15c6:	4c08      	ldr	r4, [pc, #32]	; (15e8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    15c8:	7861      	ldrb	r1, [r4, #1]
    15ca:	b109      	cbz	r1, 15d0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    15cc:	200f      	movs	r0, #15
    15ce:	bd10      	pop	{r4, pc}
    15d0:	f00a fb36 	bl	bc40 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    15d4:	7020      	strb	r0, [r4, #0]
    15d6:	28ff      	cmp	r0, #255	; 0xff
    15d8:	d001      	beq.n	15de <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    15da:	2000      	movs	r0, #0
    15dc:	bd10      	pop	{r4, pc}
    15de:	2173      	movs	r1, #115	; 0x73
    15e0:	201f      	movs	r0, #31
    15e2:	f7ff f9f9 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    15e6:	0000      	.short	0x0000
    15e8:	20000000 	.word	0x20000000

000015ec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    15ec:	4901      	ldr	r1, [pc, #4]	; (15f4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    15ee:	2000      	movs	r0, #0
    15f0:	7048      	strb	r0, [r1, #1]
    15f2:	4770      	bx	lr
    15f4:	20000000 	.word	0x20000000

000015f8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    15f8:	4806      	ldr	r0, [pc, #24]	; (1614 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    15fa:	4a07      	ldr	r2, [pc, #28]	; (1618 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    15fc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    15fe:	8852      	ldrh	r2, [r2, #2]
    1600:	4291      	cmp	r1, r2
    1602:	d104      	bne.n	160e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1604:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1608:	b108      	cbz	r0, 160e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    160a:	2000      	movs	r0, #0
    160c:	4770      	bx	lr
    160e:	2001      	movs	r0, #1
    1610:	4770      	bx	lr
    1612:	0000      	.short	0x0000
    1614:	200010a0 	.word	0x200010a0
    1618:	20000348 	.word	0x20000348

0000161c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    161c:	4901      	ldr	r1, [pc, #4]	; (1624 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    161e:	8048      	strh	r0, [r1, #2]
    1620:	4770      	bx	lr
    1622:	0000      	.short	0x0000
    1624:	20000348 	.word	0x20000348

00001628 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1628:	4808      	ldr	r0, [pc, #32]	; (164c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    162a:	4a09      	ldr	r2, [pc, #36]	; (1650 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    162c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    162e:	8852      	ldrh	r2, [r2, #2]
    1630:	4291      	cmp	r1, r2
    1632:	d109      	bne.n	1648 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1634:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1638:	8481      	strh	r1, [r0, #36]	; 0x24
    163a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    163e:	b119      	cbz	r1, 1648 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1640:	2100      	movs	r1, #0
    1642:	7001      	strb	r1, [r0, #0]
    1644:	2001      	movs	r0, #1
    1646:	4770      	bx	lr
    1648:	2000      	movs	r0, #0
    164a:	4770      	bx	lr
    164c:	200010a0 	.word	0x200010a0
    1650:	20000348 	.word	0x20000348

00001654 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1654:	4807      	ldr	r0, [pc, #28]	; (1674 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1656:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    165a:	2901      	cmp	r1, #1
    165c:	d007      	beq.n	166e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    165e:	2101      	movs	r1, #1
    1660:	7001      	strb	r1, [r0, #0]
    1662:	4805      	ldr	r0, [pc, #20]	; (1678 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1664:	4903      	ldr	r1, [pc, #12]	; (1674 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1666:	8800      	ldrh	r0, [r0, #0]
    1668:	8488      	strh	r0, [r1, #36]	; 0x24
    166a:	2001      	movs	r0, #1
    166c:	4770      	bx	lr
    166e:	2000      	movs	r0, #0
    1670:	4770      	bx	lr
    1672:	0000      	.short	0x0000
    1674:	200010a0 	.word	0x200010a0
    1678:	20000348 	.word	0x20000348

0000167c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    167c:	4906      	ldr	r1, [pc, #24]	; (1698 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    167e:	4b07      	ldr	r3, [pc, #28]	; (169c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1680:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1682:	885b      	ldrh	r3, [r3, #2]
    1684:	429a      	cmp	r2, r3
    1686:	d105      	bne.n	1694 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1688:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    168c:	b112      	cbz	r2, 1694 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    168e:	6001      	str	r1, [r0, #0]
    1690:	2001      	movs	r0, #1
    1692:	4770      	bx	lr
    1694:	2000      	movs	r0, #0
    1696:	4770      	bx	lr
    1698:	200010a0 	.word	0x200010a0
    169c:	20000348 	.word	0x20000348

000016a0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    16a0:	4909      	ldr	r1, [pc, #36]	; (16c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    16a2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    16a4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    16a8:	3bff      	subs	r3, #255	; 0xff
    16aa:	d002      	beq.n	16b2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    16ac:	2100      	movs	r1, #0
    16ae:	6001      	str	r1, [r0, #0]
    16b0:	e007      	b.n	16c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    16b2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    16b6:	4904      	ldr	r1, [pc, #16]	; (16c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    16b8:	2a01      	cmp	r2, #1
    16ba:	d002      	beq.n	16c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    16bc:	6001      	str	r1, [r0, #0]
    16be:	2001      	movs	r0, #1
    16c0:	4770      	bx	lr
    16c2:	2000      	movs	r0, #0
    16c4:	4770      	bx	lr
    16c6:	0000      	.short	0x0000
    16c8:	200010a0 	.word	0x200010a0

000016cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    16cc:	4901      	ldr	r1, [pc, #4]	; (16d4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    16ce:	8008      	strh	r0, [r1, #0]
    16d0:	4770      	bx	lr
    16d2:	0000      	.short	0x0000
    16d4:	20000348 	.word	0x20000348

000016d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    16d8:	4905      	ldr	r1, [pc, #20]	; (16f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    16da:	2000      	movs	r0, #0
    16dc:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    16e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    16e4:	8488      	strh	r0, [r1, #36]	; 0x24
    16e6:	4903      	ldr	r1, [pc, #12]	; (16f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    16e8:	8008      	strh	r0, [r1, #0]
    16ea:	8048      	strh	r0, [r1, #2]
    16ec:	4770      	bx	lr
    16ee:	0000      	.short	0x0000
    16f0:	200010a0 	.word	0x200010a0
    16f4:	20000348 	.word	0x20000348
    16f8:	4905      	ldr	r1, [pc, #20]	; (1710 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    16fa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    16fc:	4282      	cmp	r2, r0
    16fe:	d105      	bne.n	170c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1700:	2000      	movs	r0, #0
    1702:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1706:	f64f 70ff 	movw	r0, #65535	; 0xffff
    170a:	8488      	strh	r0, [r1, #36]	; 0x24
    170c:	4770      	bx	lr
    170e:	0000      	.short	0x0000
    1710:	200010a0 	.word	0x200010a0

00001714 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1714:	4a0a      	ldr	r2, [pc, #40]	; (1740 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1716:	b110      	cbz	r0, 171e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1718:	2801      	cmp	r0, #1
    171a:	d007      	beq.n	172c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    171c:	e00e      	b.n	173c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    171e:	7850      	ldrb	r0, [r2, #1]
    1720:	b160      	cbz	r0, 173c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1722:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1726:	6008      	str	r0, [r1, #0]
    1728:	88d0      	ldrh	r0, [r2, #6]
    172a:	e004      	b.n	1736 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    172c:	7810      	ldrb	r0, [r2, #0]
    172e:	b128      	cbz	r0, 173c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1730:	6890      	ldr	r0, [r2, #8]
    1732:	6008      	str	r0, [r1, #0]
    1734:	8990      	ldrh	r0, [r2, #12]
    1736:	8088      	strh	r0, [r1, #4]
    1738:	2001      	movs	r0, #1
    173a:	4770      	bx	lr
    173c:	2000      	movs	r0, #0
    173e:	4770      	bx	lr
    1740:	2000035e 	.word	0x2000035e

00001744 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1744:	4a08      	ldr	r2, [pc, #32]	; (1768 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1746:	2301      	movs	r3, #1
    1748:	b138      	cbz	r0, 175a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    174a:	2801      	cmp	r0, #1
    174c:	d104      	bne.n	1758 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    174e:	7013      	strb	r3, [r2, #0]
    1750:	6808      	ldr	r0, [r1, #0]
    1752:	6090      	str	r0, [r2, #8]
    1754:	8888      	ldrh	r0, [r1, #4]
    1756:	8190      	strh	r0, [r2, #12]
    1758:	4770      	bx	lr
    175a:	7053      	strb	r3, [r2, #1]
    175c:	6808      	ldr	r0, [r1, #0]
    175e:	f8c2 0002 	str.w	r0, [r2, #2]
    1762:	8888      	ldrh	r0, [r1, #4]
    1764:	80d0      	strh	r0, [r2, #6]
    1766:	4770      	bx	lr
    1768:	2000035e 	.word	0x2000035e

0000176c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    176c:	4906      	ldr	r1, [pc, #24]	; (1788 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    176e:	b110      	cbz	r0, 1776 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1770:	2801      	cmp	r0, #1
    1772:	d002      	beq.n	177a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1774:	e005      	b.n	1782 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1776:	7848      	ldrb	r0, [r1, #1]
    1778:	e000      	b.n	177c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    177a:	7808      	ldrb	r0, [r1, #0]
    177c:	b108      	cbz	r0, 1782 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    177e:	2001      	movs	r0, #1
    1780:	4770      	bx	lr
    1782:	2000      	movs	r0, #0
    1784:	4770      	bx	lr
    1786:	0000      	.short	0x0000
    1788:	2000035e 	.word	0x2000035e

0000178c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    178c:	4901      	ldr	r1, [pc, #4]	; (1794 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    178e:	7708      	strb	r0, [r1, #28]
    1790:	4770      	bx	lr
    1792:	0000      	.short	0x0000
    1794:	200009e2 	.word	0x200009e2

00001798 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    1798:	4801      	ldr	r0, [pc, #4]	; (17a0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    179a:	7880      	ldrb	r0, [r0, #2]
    179c:	4770      	bx	lr
    179e:	0000      	.short	0x0000
    17a0:	2000006c 	.word	0x2000006c

000017a4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    17a4:	4801      	ldr	r0, [pc, #4]	; (17ac <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    17a6:	78c0      	ldrb	r0, [r0, #3]
    17a8:	4770      	bx	lr
    17aa:	0000      	.short	0x0000
    17ac:	2000006c 	.word	0x2000006c

000017b0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    17b0:	b570      	push	{r4, r5, r6, lr}
    17b2:	460c      	mov	r4, r1
    17b4:	4605      	mov	r5, r0
    17b6:	f000 f91f 	bl	19f8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    17ba:	b118      	cbz	r0, 17c4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    17bc:	21d0      	movs	r1, #208	; 0xd0
    17be:	2027      	movs	r0, #39	; 0x27
    17c0:	f7ff f90a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17c4:	4803      	ldr	r0, [pc, #12]	; (17d4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    17c6:	2101      	movs	r1, #1
    17c8:	f00c f8f3 	bl	d9b2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    17cc:	4802      	ldr	r0, [pc, #8]	; (17d8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    17ce:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    17d2:	bd70      	pop	{r4, r5, r6, pc}
    17d4:	200009c0 	.word	0x200009c0
    17d8:	2000006c 	.word	0x2000006c

000017dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    17dc:	4901      	ldr	r1, [pc, #4]	; (17e4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    17de:	2001      	movs	r0, #1
    17e0:	7148      	strb	r0, [r1, #5]
    17e2:	4770      	bx	lr
    17e4:	2000006c 	.word	0x2000006c

000017e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    17e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17ec:	4d5b      	ldr	r5, [pc, #364]	; (195c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>)
    17ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    17f0:	782e      	ldrb	r6, [r5, #0]
    17f2:	2e00      	cmp	r6, #0
    17f4:	d16b      	bne.n	18ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    17f6:	2a00      	cmp	r2, #0
    17f8:	d069      	beq.n	18ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    17fa:	2b00      	cmp	r3, #0
    17fc:	d067      	beq.n	18ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    17fe:	2c00      	cmp	r4, #0
    1800:	d065      	beq.n	18ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    1802:	f105 0614 	add.w	r6, r5, #20
    1806:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    180a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    180e:	2700      	movs	r7, #0
    1810:	716f      	strb	r7, [r5, #5]
    1812:	712f      	strb	r7, [r5, #4]
    1814:	70af      	strb	r7, [r5, #2]
    1816:	706f      	strb	r7, [r5, #1]
    1818:	70ef      	strb	r7, [r5, #3]
    181a:	81af      	strh	r7, [r5, #12]
    181c:	81ef      	strh	r7, [r5, #14]
    181e:	f000 f93d 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1822:	4606      	mov	r6, r0
    1824:	f000 f934 	bl	1a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    1828:	4604      	mov	r4, r0
    182a:	f005 ffa7 	bl	777c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    182e:	f005 fcff 	bl	7230 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1832:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1836:	f006 f825 	bl	7884 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    183a:	69e0      	ldr	r0, [r4, #28]
    183c:	f006 f908 	bl	7a50 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1840:	6960      	ldr	r0, [r4, #20]
    1842:	f006 f8fb 	bl	7a3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1846:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    184a:	f006 f931 	bl	7ab0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    184e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1852:	6840      	ldr	r0, [r0, #4]
    1854:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    1858:	b108      	cbz	r0, 185e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    185a:	f005 ff0f 	bl	767c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    185e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1862:	2001      	movs	r0, #1
    1864:	f005 fe4e 	bl	7504 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    1868:	2800      	cmp	r0, #0
    186a:	d070      	beq.n	194e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x166>
    186c:	483c      	ldr	r0, [pc, #240]	; (1960 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>)
    186e:	f005 feb5 	bl	75dc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1872:	8820      	ldrh	r0, [r4, #0]
    1874:	f7ff fcc2 	bl	11fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1878:	6368      	str	r0, [r5, #52]	; 0x34
    187a:	8820      	ldrh	r0, [r4, #0]
    187c:	f7ff fca8 	bl	11d0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1880:	f106 0288 	add.w	r2, r6, #136	; 0x88
    1884:	63a8      	str	r0, [r5, #56]	; 0x38
    1886:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    188a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1964 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    188e:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    1892:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    1896:	f8c9 2019 	str.w	r2, [r9, #25]
    189a:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    189e:	f8c9 101d 	str.w	r1, [r9, #29]
    18a2:	f000 f933 	bl	1b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf8>
    18a6:	4601      	mov	r1, r0
    18a8:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    18aa:	46ba      	mov	sl, r7
    18ac:	f00b fdde 	bl	d46c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    18b0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    18b2:	4281      	cmp	r1, r0
    18b4:	d200      	bcs.n	18b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    18b6:	4608      	mov	r0, r1
    18b8:	71a8      	strb	r0, [r5, #6]
    18ba:	46a8      	mov	r8, r5
    18bc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    18c0:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    18c2:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    18c6:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    18c8:	2908      	cmp	r1, #8
    18ca:	d104      	bne.n	18d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    18cc:	e002      	b.n	18d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    18ce:	f240 1145 	movw	r1, #325	; 0x145
    18d2:	e040      	b.n	1956 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    18d4:	2104      	movs	r1, #4
    18d6:	f00b fdc9 	bl	d46c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    18da:	b90f      	cbnz	r7, 18e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    18dc:	1d00      	adds	r0, r0, #4
    18de:	b280      	uxth	r0, r0
    18e0:	4285      	cmp	r5, r0
    18e2:	d200      	bcs.n	18e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    18e4:	4628      	mov	r0, r5
    18e6:	b2c5      	uxtb	r5, r0
    18e8:	f888 5007 	strb.w	r5, [r8, #7]
    18ec:	f888 5008 	strb.w	r5, [r8, #8]
    18f0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    18f4:	46d0      	mov	r8, sl
    18f6:	b190      	cbz	r0, 191e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    18f8:	2701      	movs	r7, #1
    18fa:	f889 7018 	strb.w	r7, [r9, #24]
    18fe:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    1902:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1906:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    190a:	f00b fcb4 	bl	d276 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    190e:	4603      	mov	r3, r0
    1910:	462a      	mov	r2, r5
    1912:	4914      	ldr	r1, [pc, #80]	; (1964 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    1914:	4638      	mov	r0, r7
    1916:	f8cd 8000 	str.w	r8, [sp]
    191a:	f005 fbf5 	bl	7108 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    191e:	2001      	movs	r0, #1
    1920:	f000 fb54 	bl	1fcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>
    1924:	4810      	ldr	r0, [pc, #64]	; (1968 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    1926:	6800      	ldr	r0, [r0, #0]
    1928:	2803      	cmp	r0, #3
    192a:	d012      	beq.n	1952 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    192c:	280b      	cmp	r0, #11
    192e:	d010      	beq.n	1952 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    1930:	480c      	ldr	r0, [pc, #48]	; (1964 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    1932:	220e      	movs	r2, #14
    1934:	2100      	movs	r1, #0
    1936:	304a      	adds	r0, #74	; 0x4a
    1938:	f00e fdc8 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    193c:	4809      	ldr	r0, [pc, #36]	; (1964 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    193e:	8ab1      	ldrh	r1, [r6, #20]
    1940:	304a      	adds	r0, #74	; 0x4a
    1942:	8041      	strh	r1, [r0, #2]
    1944:	8821      	ldrh	r1, [r4, #0]
    1946:	8001      	strh	r1, [r0, #0]
    1948:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    194c:	7101      	strb	r1, [r0, #4]
    194e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1952:	f240 2102 	movw	r1, #514	; 0x202
    1956:	2027      	movs	r0, #39	; 0x27
    1958:	f7ff f83e 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    195c:	2000006c 	.word	0x2000006c
    1960:	000021d0 	.word	0x000021d0
    1964:	20000998 	.word	0x20000998
    1968:	40001550 	.word	0x40001550

0000196c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    196c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1970:	4688      	mov	r8, r1
    1972:	4607      	mov	r7, r0
    1974:	f000 f892 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1978:	4c1a      	ldr	r4, [pc, #104]	; (19e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    197a:	4605      	mov	r5, r0
    197c:	07b8      	lsls	r0, r7, #30
    197e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1980:	784e      	ldrb	r6, [r1, #1]
    1982:	d516      	bpl.n	19b2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    1984:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1986:	b330      	cbz	r0, 19d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    1988:	8962      	ldrh	r2, [r4, #10]
    198a:	1cd2      	adds	r2, r2, #3
    198c:	f00e fd24 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1990:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1992:	6260      	str	r0, [r4, #36]	; 0x24
    1994:	4669      	mov	r1, sp
    1996:	aa01      	add	r2, sp, #4
    1998:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    199a:	f00b f8bb 	bl	cb14 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    199e:	9800      	ldr	r0, [sp, #0]
    19a0:	f00b f86e 	bl	ca80 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    19a4:	f8c8 0000 	str.w	r0, [r8]
    19a8:	4631      	mov	r1, r6
    19aa:	2201      	movs	r2, #1
    19ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    19ae:	f00b f81e 	bl	c9ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    19b2:	07f8      	lsls	r0, r7, #31
    19b4:	d00d      	beq.n	19d2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    19b6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    19ba:	3518      	adds	r5, #24
    19bc:	1c40      	adds	r0, r0, #1
    19be:	f141 0100 	adc.w	r1, r1, #0
    19c2:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    19c6:	f815 0918 	ldrb.w	r0, [r5], #-24
    19ca:	2801      	cmp	r0, #1
    19cc:	d008      	beq.n	19e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    19ce:	2001      	movs	r0, #1
    19d0:	7628      	strb	r0, [r5, #24]
    19d2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    19d6:	f240 4166 	movw	r1, #1126	; 0x466
    19da:	2027      	movs	r0, #39	; 0x27
    19dc:	f7fe fffc 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    19e0:	2000      	movs	r0, #0
    19e2:	e7f5      	b.n	19d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    19e4:	2000006c 	.word	0x2000006c

000019e8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    19e8:	4802      	ldr	r0, [pc, #8]	; (19f4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    19ea:	89c0      	ldrh	r0, [r0, #14]
    19ec:	f3c0 2080 	ubfx	r0, r0, #10, #1
    19f0:	4770      	bx	lr
    19f2:	0000      	.short	0x0000
    19f4:	2000006c 	.word	0x2000006c

000019f8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    19f8:	4804      	ldr	r0, [pc, #16]	; (1a0c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    19fa:	7800      	ldrb	r0, [r0, #0]
    19fc:	b108      	cbz	r0, 1a02 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    19fe:	200c      	movs	r0, #12
    1a00:	4770      	bx	lr
    1a02:	4903      	ldr	r1, [pc, #12]	; (1a10 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1a04:	2000      	movs	r0, #0
    1a06:	7708      	strb	r0, [r1, #28]
    1a08:	4770      	bx	lr
    1a0a:	0000      	.short	0x0000
    1a0c:	2000006c 	.word	0x2000006c
    1a10:	200009e2 	.word	0x200009e2

00001a14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1a14:	480c      	ldr	r0, [pc, #48]	; (1a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    1a16:	b510      	push	{r4, lr}
    1a18:	7801      	ldrb	r1, [r0, #0]
    1a1a:	b149      	cbz	r1, 1a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    1a1c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    1a20:	7800      	ldrb	r0, [r0, #0]
    1a22:	2802      	cmp	r0, #2
    1a24:	d008      	beq.n	1a38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    1a26:	f240 211e 	movw	r1, #542	; 0x21e
    1a2a:	2027      	movs	r0, #39	; 0x27
    1a2c:	f7fe ffd4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a34:	f000 b9d8 	b.w	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1a38:	6848      	ldr	r0, [r1, #4]
    1a3a:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    1a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a42:	f005 bdd3 	b.w	75ec <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    1a46:	0000      	.short	0x0000
    1a48:	2000006c 	.word	0x2000006c
    1a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a4e:	2600      	movs	r6, #0
    1a50:	4605      	mov	r5, r0
    1a52:	704e      	strb	r6, [r1, #1]
    1a54:	201d      	movs	r0, #29
    1a56:	4f09      	ldr	r7, [pc, #36]	; (1a7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    1a58:	460c      	mov	r4, r1
    1a5a:	7008      	strb	r0, [r1, #0]
    1a5c:	722e      	strb	r6, [r5, #8]
    1a5e:	220e      	movs	r2, #14
    1a60:	4639      	mov	r1, r7
    1a62:	1d20      	adds	r0, r4, #4
    1a64:	f00e fcb8 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a68:	7a28      	ldrb	r0, [r5, #8]
    1a6a:	f88d 0000 	strb.w	r0, [sp]
    1a6e:	9800      	ldr	r0, [sp, #0]
    1a70:	9000      	str	r0, [sp, #0]
    1a72:	f89d 0000 	ldrb.w	r0, [sp]
    1a76:	2800      	cmp	r0, #0
    1a78:	d1f0      	bne.n	1a5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    1a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a7c:	200009f0 	.word	0x200009f0
    1a80:	4a02      	ldr	r2, [pc, #8]	; (1a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>)
    1a82:	8993      	ldrh	r3, [r2, #12]
    1a84:	4303      	orrs	r3, r0
    1a86:	8193      	strh	r3, [r2, #12]
    1a88:	6952      	ldr	r2, [r2, #20]
    1a8a:	4710      	bx	r2
    1a8c:	2000006c 	.word	0x2000006c
    1a90:	4801      	ldr	r0, [pc, #4]	; (1a98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>)
    1a92:	6840      	ldr	r0, [r0, #4]
    1a94:	4770      	bx	lr
    1a96:	0000      	.short	0x0000
    1a98:	200000a8 	.word	0x200000a8
    1a9c:	4801      	ldr	r0, [pc, #4]	; (1aa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    1a9e:	6840      	ldr	r0, [r0, #4]
    1aa0:	3080      	adds	r0, #128	; 0x80
    1aa2:	4770      	bx	lr
    1aa4:	200000a8 	.word	0x200000a8
    1aa8:	4a01      	ldr	r2, [pc, #4]	; (1ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    1aaa:	2100      	movs	r1, #0
    1aac:	6952      	ldr	r2, [r2, #20]
    1aae:	4710      	bx	r2
    1ab0:	2000006c 	.word	0x2000006c
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	4605      	mov	r5, r0
    1ab8:	2901      	cmp	r1, #1
    1aba:	d818      	bhi.n	1aee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    1abc:	4c12      	ldr	r4, [pc, #72]	; (1b08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>)
    1abe:	69a1      	ldr	r1, [r4, #24]
    1ac0:	4788      	blx	r1
    1ac2:	b1a0      	cbz	r0, 1aee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    1ac4:	7920      	ldrb	r0, [r4, #4]
    1ac6:	b990      	cbnz	r0, 1aee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    1ac8:	b9e5      	cbnz	r5, 1b04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    1aca:	f104 0010 	add.w	r0, r4, #16
    1ace:	7801      	ldrb	r1, [r0, #0]
    1ad0:	06c8      	lsls	r0, r1, #27
    1ad2:	d405      	bmi.n	1ae0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    1ad4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1ad6:	7800      	ldrb	r0, [r0, #0]
    1ad8:	06c0      	lsls	r0, r0, #27
    1ada:	d401      	bmi.n	1ae0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    1adc:	2001      	movs	r0, #1
    1ade:	e000      	b.n	1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xce>
    1ae0:	2000      	movs	r0, #0
    1ae2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ae4:	b92a      	cbnz	r2, 1af2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    1ae6:	8962      	ldrh	r2, [r4, #10]
    1ae8:	b11a      	cbz	r2, 1af2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    1aea:	06c9      	lsls	r1, r1, #27
    1aec:	d401      	bmi.n	1af2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    1aee:	2001      	movs	r0, #1
    1af0:	bd70      	pop	{r4, r5, r6, pc}
    1af2:	89a1      	ldrh	r1, [r4, #12]
    1af4:	078a      	lsls	r2, r1, #30
    1af6:	d503      	bpl.n	1b00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    1af8:	6a22      	ldr	r2, [r4, #32]
    1afa:	78d2      	ldrb	r2, [r2, #3]
    1afc:	2a02      	cmp	r2, #2
    1afe:	d001      	beq.n	1b04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    1b00:	4308      	orrs	r0, r1
    1b02:	d1f4      	bne.n	1aee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    1b04:	2000      	movs	r0, #0
    1b06:	bd70      	pop	{r4, r5, r6, pc}
    1b08:	2000006c 	.word	0x2000006c
    1b0c:	b510      	push	{r4, lr}
    1b0e:	f7ff ffbf 	bl	1a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    1b12:	4604      	mov	r4, r0
    1b14:	f7ff ffc2 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1b18:	4602      	mov	r2, r0
    1b1a:	7f41      	ldrb	r1, [r0, #29]
    1b1c:	4816      	ldr	r0, [pc, #88]	; (1b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>)
    1b1e:	2925      	cmp	r1, #37	; 0x25
    1b20:	d010      	beq.n	1b44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    1b22:	2926      	cmp	r1, #38	; 0x26
    1b24:	d00e      	beq.n	1b44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    1b26:	7f92      	ldrb	r2, [r2, #30]
    1b28:	2a25      	cmp	r2, #37	; 0x25
    1b2a:	d00b      	beq.n	1b44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    1b2c:	2920      	cmp	r1, #32
    1b2e:	d00d      	beq.n	1b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    1b30:	2921      	cmp	r1, #33	; 0x21
    1b32:	d00b      	beq.n	1b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    1b34:	2a23      	cmp	r2, #35	; 0x23
    1b36:	d00f      	beq.n	1b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    1b38:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1b3c:	2804      	cmp	r0, #4
    1b3e:	d100      	bne.n	1b42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    1b40:	2008      	movs	r0, #8
    1b42:	bd10      	pop	{r4, pc}
    1b44:	6840      	ldr	r0, [r0, #4]
    1b46:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    1b4a:	e00e      	b.n	1b6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x156>
    1b4c:	2a23      	cmp	r2, #35	; 0x23
    1b4e:	d003      	beq.n	1b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    1b50:	6840      	ldr	r0, [r0, #4]
    1b52:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    1b56:	e005      	b.n	1b64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    1b58:	6841      	ldr	r1, [r0, #4]
    1b5a:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    1b5e:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    1b62:	4008      	ands	r0, r1
    1b64:	f00b fb7d 	bl	d262 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b68:	4601      	mov	r1, r0
    1b6a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b72:	f00b bb8e 	b.w	d292 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1b76:	0000      	.short	0x0000
    1b78:	200000a8 	.word	0x200000a8
    1b7c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1b80:	468b      	mov	fp, r1
    1b82:	4681      	mov	r9, r0
    1b84:	f7ff ff8a 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1b88:	2600      	movs	r6, #0
    1b8a:	4c66      	ldr	r4, [pc, #408]	; (1d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    1b8c:	4607      	mov	r7, r0
    1b8e:	f88d 6008 	strb.w	r6, [sp, #8]
    1b92:	9603      	str	r6, [sp, #12]
    1b94:	9601      	str	r6, [sp, #4]
    1b96:	7820      	ldrb	r0, [r4, #0]
    1b98:	4635      	mov	r5, r6
    1b9a:	2802      	cmp	r0, #2
    1b9c:	d004      	beq.n	1ba8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    1b9e:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1ba2:	2027      	movs	r0, #39	; 0x27
    1ba4:	f7fe ff18 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ba8:	7ba0      	ldrb	r0, [r4, #14]
    1baa:	0640      	lsls	r0, r0, #25
    1bac:	d406      	bmi.n	1bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    1bae:	2040      	movs	r0, #64	; 0x40
    1bb0:	f7ff ff7a 	bl	1aa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1bb4:	89e0      	ldrh	r0, [r4, #14]
    1bb6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1bba:	81e0      	strh	r0, [r4, #14]
    1bbc:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    1bc0:	f1b9 0f00 	cmp.w	r9, #0
    1bc4:	d03a      	beq.n	1c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    1bc6:	b180      	cbz	r0, 1bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    1bc8:	f005 fb6c 	bl	72a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1bcc:	f005 fb46 	bl	725c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1bd0:	b958      	cbnz	r0, 1bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    1bd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bd4:	7841      	ldrb	r1, [r0, #1]
    1bd6:	b141      	cbz	r1, 1bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    1bd8:	7800      	ldrb	r0, [r0, #0]
    1bda:	7e39      	ldrb	r1, [r7, #24]
    1bdc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1be0:	4288      	cmp	r0, r1
    1be2:	d102      	bne.n	1bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    1be4:	2001      	movs	r0, #1
    1be6:	7060      	strb	r0, [r4, #1]
    1be8:	e097      	b.n	1d1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    1bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bec:	7841      	ldrb	r1, [r0, #1]
    1bee:	8161      	strh	r1, [r4, #10]
    1bf0:	b121      	cbz	r1, 1bfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e8>
    1bf2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1bf4:	f00b f864 	bl	ccc0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1bf8:	62a0      	str	r0, [r4, #40]	; 0x28
    1bfa:	e000      	b.n	1bfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    1bfc:	62a5      	str	r5, [r4, #40]	; 0x28
    1bfe:	89e0      	ldrh	r0, [r4, #14]
    1c00:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1c04:	81e0      	strh	r0, [r4, #14]
    1c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1c08:	7df9      	ldrb	r1, [r7, #23]
    1c0a:	7800      	ldrb	r0, [r0, #0]
    1c0c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1c10:	4288      	cmp	r0, r1
    1c12:	d007      	beq.n	1c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1c14:	a803      	add	r0, sp, #12
    1c16:	f000 f98b 	bl	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1c1a:	89e0      	ldrh	r0, [r4, #14]
    1c1c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1c20:	81e0      	strh	r0, [r4, #14]
    1c22:	e000      	b.n	1c26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x212>
    1c24:	2601      	movs	r6, #1
    1c26:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1c28:	7e39      	ldrb	r1, [r7, #24]
    1c2a:	7800      	ldrb	r0, [r0, #0]
    1c2c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1c30:	4288      	cmp	r0, r1
    1c32:	d10d      	bne.n	1c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    1c34:	a802      	add	r0, sp, #8
    1c36:	f000 f931 	bl	1e9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>
    1c3a:	e009      	b.n	1c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    1c3c:	b108      	cbz	r0, 1c42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22e>
    1c3e:	f005 fb2b 	bl	7298 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1c42:	78a0      	ldrb	r0, [r4, #2]
    1c44:	1c40      	adds	r0, r0, #1
    1c46:	70a0      	strb	r0, [r4, #2]
    1c48:	89e0      	ldrh	r0, [r4, #14]
    1c4a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1c4e:	81e0      	strh	r0, [r4, #14]
    1c50:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>
    1c54:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    1c58:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1c5c:	b190      	cbz	r0, 1c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    1c5e:	f7ff ff17 	bl	1a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    1c62:	4931      	ldr	r1, [pc, #196]	; (1d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    1c64:	760d      	strb	r5, [r1, #24]
    1c66:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1c6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c6e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1c72:	f00b fb00 	bl	d276 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    1c76:	4603      	mov	r3, r0
    1c78:	22fb      	movs	r2, #251	; 0xfb
    1c7a:	492b      	ldr	r1, [pc, #172]	; (1d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    1c7c:	4628      	mov	r0, r5
    1c7e:	9500      	str	r5, [sp, #0]
    1c80:	f005 fa42 	bl	7108 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1c84:	f04f 0800 	mov.w	r8, #0
    1c88:	f1bb 0f00 	cmp.w	fp, #0
    1c8c:	d104      	bne.n	1c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    1c8e:	78a1      	ldrb	r1, [r4, #2]
    1c90:	2001      	movs	r0, #1
    1c92:	f7ff ff0f 	bl	1ab4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c96:	b120      	cbz	r0, 1ca2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    1c98:	f005 febc 	bl	7a14 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1c9c:	f04f 0801 	mov.w	r8, #1
    1ca0:	e002      	b.n	1ca8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x294>
    1ca2:	2000      	movs	r0, #0
    1ca4:	f000 f9d0 	bl	2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    1ca8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1cac:	b118      	cbz	r0, 1cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    1cae:	a901      	add	r1, sp, #4
    1cb0:	2002      	movs	r0, #2
    1cb2:	f7ff fe5b 	bl	196c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1cb6:	481c      	ldr	r0, [pc, #112]	; (1d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    1cb8:	8aba      	ldrh	r2, [r7, #20]
    1cba:	304a      	adds	r0, #74	; 0x4a
    1cbc:	b13e      	cbz	r6, 1cce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    1cbe:	b91a      	cbnz	r2, 1cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    1cc0:	88c2      	ldrh	r2, [r0, #6]
    1cc2:	b90a      	cbnz	r2, 1cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    1cc4:	8902      	ldrh	r2, [r0, #8]
    1cc6:	b112      	cbz	r2, 1cce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    1cc8:	8942      	ldrh	r2, [r0, #10]
    1cca:	1c52      	adds	r2, r2, #1
    1ccc:	8142      	strh	r2, [r0, #10]
    1cce:	f1b9 0f00 	cmp.w	r9, #0
    1cd2:	d008      	beq.n	1ce6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    1cd4:	88c1      	ldrh	r1, [r0, #6]
    1cd6:	1c49      	adds	r1, r1, #1
    1cd8:	80c1      	strh	r1, [r0, #6]
    1cda:	4812      	ldr	r0, [pc, #72]	; (1d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    1cdc:	70a5      	strb	r5, [r4, #2]
    1cde:	303c      	adds	r0, #60	; 0x3c
    1ce0:	f001 f960 	bl	2fa4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1ce4:	e002      	b.n	1cec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    1ce6:	8901      	ldrh	r1, [r0, #8]
    1ce8:	1c49      	adds	r1, r1, #1
    1cea:	8101      	strh	r1, [r0, #8]
    1cec:	9803      	ldr	r0, [sp, #12]
    1cee:	b140      	cbz	r0, 1d02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ee>
    1cf0:	f00a fec6 	bl	ca80 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1cf4:	f8da 1004 	ldr.w	r1, [sl, #4]
    1cf8:	1c40      	adds	r0, r0, #1
    1cfa:	7205      	strb	r5, [r0, #8]
    1cfc:	220e      	movs	r2, #14
    1cfe:	f00b fed6 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1d02:	9801      	ldr	r0, [sp, #4]
    1d04:	b130      	cbz	r0, 1d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x300>
    1d06:	f8da 1004 	ldr.w	r1, [sl, #4]
    1d0a:	7205      	strb	r5, [r0, #8]
    1d0c:	222a      	movs	r2, #42	; 0x2a
    1d0e:	9801      	ldr	r0, [sp, #4]
    1d10:	f00b fecd 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1d14:	f1b8 0f00 	cmp.w	r8, #0
    1d18:	d001      	beq.n	1d1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x30a>
    1d1a:	f000 f865 	bl	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1d1e:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d22:	0000      	.short	0x0000
    1d24:	2000006c 	.word	0x2000006c
    1d28:	20000998 	.word	0x20000998
    1d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d30:	4688      	mov	r8, r1
    1d32:	4681      	mov	r9, r0
    1d34:	f7ff feb2 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1d38:	4d29      	ldr	r5, [pc, #164]	; (1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>)
    1d3a:	4604      	mov	r4, r0
    1d3c:	7828      	ldrb	r0, [r5, #0]
    1d3e:	2801      	cmp	r0, #1
    1d40:	d004      	beq.n	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1d42:	f240 4175 	movw	r1, #1141	; 0x475
    1d46:	2027      	movs	r0, #39	; 0x27
    1d48:	f7fe fe46 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d4c:	7c20      	ldrb	r0, [r4, #16]
    1d4e:	2700      	movs	r7, #0
    1d50:	2601      	movs	r6, #1
    1d52:	b128      	cbz	r0, 1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1d54:	7427      	strb	r7, [r4, #16]
    1d56:	2100      	movs	r1, #0
    1d58:	2004      	movs	r0, #4
    1d5a:	f7ff fe91 	bl	1a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    1d5e:	74a6      	strb	r6, [r4, #18]
    1d60:	6a29      	ldr	r1, [r5, #32]
    1d62:	7808      	ldrb	r0, [r1, #0]
    1d64:	43c0      	mvns	r0, r0
    1d66:	0780      	lsls	r0, r0, #30
    1d68:	d109      	bne.n	1d7e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32>
    1d6a:	7da0      	ldrb	r0, [r4, #22]
    1d6c:	bb88      	cbnz	r0, 1dd2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1d6e:	2002      	movs	r0, #2
    1d70:	f7ff fe86 	bl	1a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    1d74:	6a28      	ldr	r0, [r5, #32]
    1d76:	7800      	ldrb	r0, [r0, #0]
    1d78:	43c0      	mvns	r0, r0
    1d7a:	0780      	lsls	r0, r0, #30
    1d7c:	d029      	beq.n	1dd2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1d7e:	6a28      	ldr	r0, [r5, #32]
    1d80:	7840      	ldrb	r0, [r0, #1]
    1d82:	b110      	cbz	r0, 1d8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e>
    1d84:	2002      	movs	r0, #2
    1d86:	75a0      	strb	r0, [r4, #22]
    1d88:	e000      	b.n	1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d8a:	75a6      	strb	r6, [r4, #22]
    1d8c:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1d90:	b198      	cbz	r0, 1dba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6e>
    1d92:	f7ff fe7d 	bl	1a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    1d96:	4913      	ldr	r1, [pc, #76]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1d98:	7a2d      	ldrb	r5, [r5, #8]
    1d9a:	760e      	strb	r6, [r1, #24]
    1d9c:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1da0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1da4:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1da8:	f00b fa65 	bl	d276 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    1dac:	4603      	mov	r3, r0
    1dae:	462a      	mov	r2, r5
    1db0:	490c      	ldr	r1, [pc, #48]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1db2:	4630      	mov	r0, r6
    1db4:	9700      	str	r7, [sp, #0]
    1db6:	f005 f9a7 	bl	7108 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1dba:	ea38 0009 	bics.w	r0, r8, r9
    1dbe:	d004      	beq.n	1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1dc0:	2100      	movs	r1, #0
    1dc2:	4608      	mov	r0, r1
    1dc4:	f7ff fe76 	bl	1ab4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1dc8:	b128      	cbz	r0, 1dd6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8a>
    1dca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1dce:	f000 b80b 	b.w	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1dd2:	2003      	movs	r0, #3
    1dd4:	e7d7      	b.n	1d86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a>
    1dd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1dda:	2000      	movs	r0, #0
    1ddc:	f000 b8f6 	b.w	1fcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>
    1de0:	2000006c 	.word	0x2000006c
    1de4:	20000998 	.word	0x20000998
    1de8:	b510      	push	{r4, lr}
    1dea:	f005 fb01 	bl	73f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1dee:	f005 fa1f 	bl	7230 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1df2:	4c0d      	ldr	r4, [pc, #52]	; (1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>)
    1df4:	89e0      	ldrh	r0, [r4, #14]
    1df6:	f7ff fe57 	bl	1aa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1dfa:	480c      	ldr	r0, [pc, #48]	; (1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>)
    1dfc:	7f00      	ldrb	r0, [r0, #28]
    1dfe:	b158      	cbz	r0, 1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1e00:	490a      	ldr	r1, [pc, #40]	; (1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>)
    1e02:	220e      	movs	r2, #14
    1e04:	f101 000e 	add.w	r0, r1, #14
    1e08:	f00e fae6 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1e0c:	4807      	ldr	r0, [pc, #28]	; (1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>)
    1e0e:	2224      	movs	r2, #36	; 0x24
    1e10:	4907      	ldr	r1, [pc, #28]	; (1e30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe4>)
    1e12:	301d      	adds	r0, #29
    1e14:	f00b fe5f 	bl	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1e18:	69e2      	ldr	r2, [r4, #28]
    1e1a:	7921      	ldrb	r1, [r4, #4]
    1e1c:	7860      	ldrb	r0, [r4, #1]
    1e1e:	4790      	blx	r2
    1e20:	2000      	movs	r0, #0
    1e22:	7020      	strb	r0, [r4, #0]
    1e24:	bd10      	pop	{r4, pc}
    1e26:	0000      	.short	0x0000
    1e28:	2000006c 	.word	0x2000006c
    1e2c:	200009e2 	.word	0x200009e2
    1e30:	00001a4d 	.word	0x00001a4d
    1e34:	4808      	ldr	r0, [pc, #32]	; (1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>)
    1e36:	b510      	push	{r4, lr}
    1e38:	7800      	ldrb	r0, [r0, #0]
    1e3a:	2802      	cmp	r0, #2
    1e3c:	d004      	beq.n	1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1e3e:	f240 214d 	movw	r1, #589	; 0x24d
    1e42:	2027      	movs	r0, #39	; 0x27
    1e44:	f7fe fdc8 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e48:	4904      	ldr	r1, [pc, #16]	; (1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1e4a:	2001      	movs	r0, #1
    1e4c:	7308      	strb	r0, [r1, #12]
    1e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e52:	f7ff bfc9 	b.w	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1e56:	0000      	.short	0x0000
    1e58:	2000006c 	.word	0x2000006c
    1e5c:	200009e2 	.word	0x200009e2
    1e60:	b430      	push	{r4, r5}
    1e62:	4604      	mov	r4, r0
    1e64:	480c      	ldr	r0, [pc, #48]	; (1e98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>)
    1e66:	7a00      	ldrb	r0, [r0, #8]
    1e68:	b10b      	cbz	r3, 1e6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x122>
    1e6a:	1d00      	adds	r0, r0, #4
    1e6c:	b2c0      	uxtb	r0, r0
    1e6e:	b93a      	cbnz	r2, 1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>
    1e70:	28ff      	cmp	r0, #255	; 0xff
    1e72:	d105      	bne.n	1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>
    1e74:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1e78:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1e7c:	429a      	cmp	r2, r3
    1e7e:	d009      	beq.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e80:	b121      	cbz	r1, 1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e82:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1e86:	bc30      	pop	{r4, r5}
    1e88:	f005 bde8 	b.w	7a5c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1e8c:	20ff      	movs	r0, #255	; 0xff
    1e8e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1e92:	e7f8      	b.n	1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e94:	bc30      	pop	{r4, r5}
    1e96:	4770      	bx	lr
    1e98:	2000006c 	.word	0x2000006c
    1e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ea0:	4607      	mov	r7, r0
    1ea2:	f7ff fdfb 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1ea6:	4c21      	ldr	r4, [pc, #132]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1ea8:	4605      	mov	r5, r0
    1eaa:	2601      	movs	r6, #1
    1eac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1eae:	7808      	ldrb	r0, [r1, #0]
    1eb0:	f000 0003 	and.w	r0, r0, #3
    1eb4:	2801      	cmp	r0, #1
    1eb6:	d00c      	beq.n	1ed2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x186>
    1eb8:	2802      	cmp	r0, #2
    1eba:	d00a      	beq.n	1ed2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x186>
    1ebc:	2803      	cmp	r0, #3
    1ebe:	d11b      	bne.n	1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1ec0:	742e      	strb	r6, [r5, #16]
    1ec2:	89e0      	ldrh	r0, [r4, #14]
    1ec4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1ec8:	81e0      	strh	r0, [r4, #14]
    1eca:	2001      	movs	r0, #1
    1ecc:	f7ff fdd8 	bl	1a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    1ed0:	e012      	b.n	1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1ed2:	7848      	ldrb	r0, [r1, #1]
    1ed4:	b180      	cbz	r0, 1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1ed6:	89e1      	ldrh	r1, [r4, #14]
    1ed8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1edc:	81e1      	strh	r1, [r4, #14]
    1ede:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1ee0:	2900      	cmp	r1, #0
    1ee2:	d018      	beq.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1ee4:	28fb      	cmp	r0, #251	; 0xfb
    1ee6:	d818      	bhi.n	1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1ee8:	7960      	ldrb	r0, [r4, #5]
    1eea:	b120      	cbz	r0, 1ef6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1aa>
    1eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ef0:	2020      	movs	r0, #32
    1ef2:	f7ff bdd9 	b.w	1aa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1ef6:	703e      	strb	r6, [r7, #0]
    1ef8:	7e28      	ldrb	r0, [r5, #24]
    1efa:	2801      	cmp	r0, #1
    1efc:	d012      	beq.n	1f24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d8>
    1efe:	762e      	strb	r6, [r5, #24]
    1f00:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1f02:	7840      	ldrb	r0, [r0, #1]
    1f04:	2800      	cmp	r0, #0
    1f06:	d006      	beq.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1f08:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1f0c:	1c40      	adds	r0, r0, #1
    1f0e:	f141 0100 	adc.w	r1, r1, #0
    1f12:	e9c5 0100 	strd	r0, r1, [r5]
    1f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f1a:	7920      	ldrb	r0, [r4, #4]
    1f1c:	f040 0010 	orr.w	r0, r0, #16
    1f20:	7120      	strb	r0, [r4, #4]
    1f22:	e7f8      	b.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1f24:	2000      	movs	r0, #0
    1f26:	7628      	strb	r0, [r5, #24]
    1f28:	e7ea      	b.n	1f00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b4>
    1f2a:	0000      	.short	0x0000
    1f2c:	2000006c 	.word	0x2000006c
    1f30:	b570      	push	{r4, r5, r6, lr}
    1f32:	4605      	mov	r5, r0
    1f34:	f7ff fdb2 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1f38:	4604      	mov	r4, r0
    1f3a:	7d80      	ldrb	r0, [r0, #22]
    1f3c:	2800      	cmp	r0, #0
    1f3e:	d02d      	beq.n	1f9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x250>
    1f40:	2802      	cmp	r0, #2
    1f42:	d10c      	bne.n	1f5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x212>
    1f44:	481b      	ldr	r0, [pc, #108]	; (1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>)
    1f46:	4629      	mov	r1, r5
    1f48:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1f4a:	f00a fd28 	bl	c99e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1f4e:	b330      	cbz	r0, 1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f50:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1f54:	1c40      	adds	r0, r0, #1
    1f56:	f141 0100 	adc.w	r1, r1, #0
    1f5a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1f5e:	2500      	movs	r5, #0
    1f60:	75a5      	strb	r5, [r4, #22]
    1f62:	7ca0      	ldrb	r0, [r4, #18]
    1f64:	b120      	cbz	r0, 1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1f66:	74a5      	strb	r5, [r4, #18]
    1f68:	2100      	movs	r1, #0
    1f6a:	2010      	movs	r0, #16
    1f6c:	f7ff fd88 	bl	1a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    1f70:	7c60      	ldrb	r0, [r4, #17]
    1f72:	b170      	cbz	r0, 1f92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x246>
    1f74:	7465      	strb	r5, [r4, #17]
    1f76:	f7ff fb57 	bl	1628 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1f7a:	b198      	cbz	r0, 1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>
    1f7c:	2100      	movs	r1, #0
    1f7e:	2008      	movs	r0, #8
    1f80:	f7ff fd7e 	bl	1a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    1f84:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1f88:	1c40      	adds	r0, r0, #1
    1f8a:	f141 0100 	adc.w	r1, r1, #0
    1f8e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1f92:	7de0      	ldrb	r0, [r4, #23]
    1f94:	2801      	cmp	r0, #1
    1f96:	d00a      	beq.n	1fae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x262>
    1f98:	2001      	movs	r0, #1
    1f9a:	75e0      	strb	r0, [r4, #23]
    1f9c:	bd70      	pop	{r4, r5, r6, pc}
    1f9e:	f240 31e3 	movw	r1, #995	; 0x3e3
    1fa2:	e001      	b.n	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    1fa4:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1fa8:	2027      	movs	r0, #39	; 0x27
    1faa:	f7fe fd15 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fae:	75e5      	strb	r5, [r4, #23]
    1fb0:	bd70      	pop	{r4, r5, r6, pc}
    1fb2:	0000      	.short	0x0000
    1fb4:	2000006c 	.word	0x2000006c
    1fb8:	4803      	ldr	r0, [pc, #12]	; (1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>)
    1fba:	7800      	ldrb	r0, [r0, #0]
    1fbc:	2800      	cmp	r0, #0
    1fbe:	d001      	beq.n	1fc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x278>
    1fc0:	f7ff bf12 	b.w	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1fc4:	4770      	bx	lr
    1fc6:	0000      	.short	0x0000
    1fc8:	2000006c 	.word	0x2000006c
    1fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fd0:	4606      	mov	r6, r0
    1fd2:	f7ff fd5d 	bl	1a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    1fd6:	4680      	mov	r8, r0
    1fd8:	f7ff fd60 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    1fdc:	4c18      	ldr	r4, [pc, #96]	; (2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>)
    1fde:	4605      	mov	r5, r0
    1fe0:	4632      	mov	r2, r6
    1fe2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1fe4:	6260      	str	r0, [r4, #36]	; 0x24
    1fe6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1fea:	2101      	movs	r1, #1
    1fec:	4640      	mov	r0, r8
    1fee:	f7ff ff37 	bl	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1ff2:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1ff6:	2700      	movs	r7, #0
    1ff8:	b170      	cbz	r0, 2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1ffa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ffc:	f005 fc64 	bl	78c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2000:	4810      	ldr	r0, [pc, #64]	; (2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>)
    2002:	2101      	movs	r1, #1
    2004:	7601      	strb	r1, [r0, #24]
    2006:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    200a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    200e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2010:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2012:	f005 f8cb 	bl	71ac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2016:	e004      	b.n	2022 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d6>
    2018:	6a60      	ldr	r0, [r4, #36]	; 0x24
    201a:	f005 fc55 	bl	78c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    201e:	f005 f907 	bl	7230 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2022:	b916      	cbnz	r6, 202a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2de>
    2024:	4638      	mov	r0, r7
    2026:	f005 fb05 	bl	7634 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    202a:	2100      	movs	r1, #0
    202c:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2030:	4608      	mov	r0, r1
    2032:	f005 fcd1 	bl	79d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2036:	2002      	movs	r0, #2
    2038:	7020      	strb	r0, [r4, #0]
    203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    203e:	0000      	.short	0x0000
    2040:	2000006c 	.word	0x2000006c
    2044:	20000998 	.word	0x20000998
    2048:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    204c:	4604      	mov	r4, r0
    204e:	f7ff fd25 	bl	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2052:	4605      	mov	r5, r0
    2054:	f7ff fd1c 	bl	1a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2058:	2700      	movs	r7, #0
    205a:	f88d 7000 	strb.w	r7, [sp]
    205e:	4606      	mov	r6, r0
    2060:	f8df 9164 	ldr.w	r9, [pc, #356]	; 21c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x47c>
    2064:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2068:	4622      	mov	r2, r4
    206a:	4639      	mov	r1, r7
    206c:	f7ff fef8 	bl	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    2070:	7da8      	ldrb	r0, [r5, #22]
    2072:	f04f 0801 	mov.w	r8, #1
    2076:	f1a9 0420 	sub.w	r4, r9, #32
    207a:	b140      	cbz	r0, 208e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x342>
    207c:	2801      	cmp	r0, #1
    207e:	d020      	beq.n	20c2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x376>
    2080:	2802      	cmp	r0, #2
    2082:	d02f      	beq.n	20e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x398>
    2084:	2803      	cmp	r0, #3
    2086:	d03b      	beq.n	2100 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b4>
    2088:	f240 21ff 	movw	r1, #767	; 0x2ff
    208c:	e057      	b.n	213e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f2>
    208e:	79a0      	ldrb	r0, [r4, #6]
    2090:	2150      	movs	r1, #80	; 0x50
    2092:	f8ad 0004 	strh.w	r0, [sp, #4]
    2096:	5388      	strh	r0, [r1, r6]
    2098:	4648      	mov	r0, r9
    209a:	f7ff faef 	bl	167c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    209e:	b130      	cbz	r0, 20ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x362>
    20a0:	2080      	movs	r0, #128	; 0x80
    20a2:	6a21      	ldr	r1, [r4, #32]
    20a4:	f7ff fcec 	bl	1a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    20a8:	f885 8011 	strb.w	r8, [r5, #17]
    20ac:	e02c      	b.n	2108 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3bc>
    20ae:	466a      	mov	r2, sp
    20b0:	a901      	add	r1, sp, #4
    20b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    20b4:	f00b f8f7 	bl	d2a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    20b8:	6220      	str	r0, [r4, #32]
    20ba:	b110      	cbz	r0, 20c2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x376>
    20bc:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    20c0:	b111      	cbz	r1, 20c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x37c>
    20c2:	4842      	ldr	r0, [pc, #264]	; (21cc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x480>)
    20c4:	6220      	str	r0, [r4, #32]
    20c6:	e01f      	b.n	2108 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3bc>
    20c8:	f89d 1000 	ldrb.w	r1, [sp]
    20cc:	b921      	cbnz	r1, 20d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38c>
    20ce:	8007      	strh	r7, [r0, #0]
    20d0:	7087      	strb	r7, [r0, #2]
    20d2:	2101      	movs	r1, #1
    20d4:	f00b fc6d 	bl	d9b2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    20d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    20dc:	6a20      	ldr	r0, [r4, #32]
    20de:	f00b fbf0 	bl	d8c2 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    20e2:	e011      	b.n	2108 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3bc>
    20e4:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    20e8:	f8ad 0004 	strh.w	r0, [sp, #4]
    20ec:	466a      	mov	r2, sp
    20ee:	a901      	add	r1, sp, #4
    20f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    20f2:	f00b f8d8 	bl	d2a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    20f6:	6220      	str	r0, [r4, #32]
    20f8:	b930      	cbnz	r0, 2108 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3bc>
    20fa:	f240 21e9 	movw	r1, #745	; 0x2e9
    20fe:	e01e      	b.n	213e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f2>
    2100:	4648      	mov	r0, r9
    2102:	f7ff fabb 	bl	167c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2106:	b1c0      	cbz	r0, 213a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ee>
    2108:	6a20      	ldr	r0, [r4, #32]
    210a:	2308      	movs	r3, #8
    210c:	7801      	ldrb	r1, [r0, #0]
    210e:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2112:	7001      	strb	r1, [r0, #0]
    2114:	7dea      	ldrb	r2, [r5, #23]
    2116:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    211a:	4311      	orrs	r1, r2
    211c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2120:	7001      	strb	r1, [r0, #0]
    2122:	7e2a      	ldrb	r2, [r5, #24]
    2124:	2304      	movs	r3, #4
    2126:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    212a:	4311      	orrs	r1, r2
    212c:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2130:	7001      	strb	r1, [r0, #0]
    2132:	43c9      	mvns	r1, r1
    2134:	0789      	lsls	r1, r1, #30
    2136:	d005      	beq.n	2144 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f8>
    2138:	e007      	b.n	214a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fe>
    213a:	f240 21f2 	movw	r1, #754	; 0x2f2
    213e:	2027      	movs	r0, #39	; 0x27
    2140:	f7fe fc4a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2144:	78c0      	ldrb	r0, [r0, #3]
    2146:	2802      	cmp	r0, #2
    2148:	d00f      	beq.n	216a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41e>
    214a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    214c:	f00a fd25 	bl	cb9a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2150:	b108      	cbz	r0, 2156 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40a>
    2152:	2101      	movs	r1, #1
    2154:	e00a      	b.n	216c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x420>
    2156:	6a20      	ldr	r0, [r4, #32]
    2158:	7800      	ldrb	r0, [r0, #0]
    215a:	43c0      	mvns	r0, r0
    215c:	0780      	lsls	r0, r0, #30
    215e:	d004      	beq.n	216a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41e>
    2160:	f7ff fa4a 	bl	15f8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2164:	f080 0101 	eor.w	r1, r0, #1
    2168:	e000      	b.n	216c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x420>
    216a:	2100      	movs	r1, #0
    216c:	6a20      	ldr	r0, [r4, #32]
    216e:	7802      	ldrb	r2, [r0, #0]
    2170:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2174:	7001      	strb	r1, [r0, #0]
    2176:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    217a:	b181      	cbz	r1, 219e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x452>
    217c:	7841      	ldrb	r1, [r0, #1]
    217e:	b171      	cbz	r1, 219e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x452>
    2180:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2182:	f005 fba1 	bl	78c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2186:	4811      	ldr	r0, [pc, #68]	; (21cc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x480>)
    2188:	3828      	subs	r0, #40	; 0x28
    218a:	7607      	strb	r7, [r0, #24]
    218c:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2190:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2194:	6a21      	ldr	r1, [r4, #32]
    2196:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2198:	f005 f808 	bl	71ac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    219c:	e003      	b.n	21a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x45a>
    219e:	f005 fb93 	bl	78c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    21a2:	f005 f845 	bl	7230 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    21a6:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    21aa:	2101      	movs	r1, #1
    21ac:	2000      	movs	r0, #0
    21ae:	f005 fc13 	bl	79d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    21b2:	f884 8003 	strb.w	r8, [r4, #3]
    21b6:	6a21      	ldr	r1, [r4, #32]
    21b8:	880a      	ldrh	r2, [r1, #0]
    21ba:	8222      	strh	r2, [r4, #16]
    21bc:	7889      	ldrb	r1, [r1, #2]
    21be:	74a1      	strb	r1, [r4, #18]
    21c0:	f884 8000 	strb.w	r8, [r4]
    21c4:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    21c8:	2000008c 	.word	0x2000008c
    21cc:	200009c0 	.word	0x200009c0
    21d0:	00001e35 	.word	0x00001e35
    21d4:	00001b7d 	.word	0x00001b7d
    21d8:	00001d2d 	.word	0x00001d2d
    21dc:	00001fb9 	.word	0x00001fb9

000021e0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    21e0:	4800      	ldr	r0, [pc, #0]	; (21e4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    21e2:	4770      	bx	lr
    21e4:	20001299 	.word	0x20001299

000021e8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    21e8:	4904      	ldr	r1, [pc, #16]	; (21fc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    21ea:	788a      	ldrb	r2, [r1, #2]
    21ec:	4282      	cmp	r2, r0
    21ee:	d903      	bls.n	21f8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    21f0:	4408      	add	r0, r1
    21f2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    21f6:	4770      	bx	lr
    21f8:	2000      	movs	r0, #0
    21fa:	4770      	bx	lr
    21fc:	200010c6 	.word	0x200010c6

00002200 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2200:	4904      	ldr	r1, [pc, #16]	; (2214 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2202:	788a      	ldrb	r2, [r1, #2]
    2204:	4282      	cmp	r2, r0
    2206:	d903      	bls.n	2210 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2208:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    220c:	3083      	adds	r0, #131	; 0x83
    220e:	4770      	bx	lr
    2210:	2000      	movs	r0, #0
    2212:	4770      	bx	lr
    2214:	200010c6 	.word	0x200010c6

00002218 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2218:	4a05      	ldr	r2, [pc, #20]	; (2230 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    221a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    221e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2222:	6802      	ldr	r2, [r0, #0]
    2224:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    2228:	8880      	ldrh	r0, [r0, #4]
    222a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    222e:	4770      	bx	lr
    2230:	200010c6 	.word	0x200010c6

00002234 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2234:	4904      	ldr	r1, [pc, #16]	; (2248 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2236:	788a      	ldrb	r2, [r1, #2]
    2238:	4282      	cmp	r2, r0
    223a:	d903      	bls.n	2244 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    223c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2240:	1cc0      	adds	r0, r0, #3
    2242:	4770      	bx	lr
    2244:	2000      	movs	r0, #0
    2246:	4770      	bx	lr
    2248:	200010c6 	.word	0x200010c6

0000224c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    224c:	b510      	push	{r4, lr}
    224e:	f240 12d3 	movw	r2, #467	; 0x1d3
    2252:	2100      	movs	r1, #0
    2254:	4808      	ldr	r0, [pc, #32]	; (2278 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    2256:	f00e f939 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    225a:	2208      	movs	r2, #8
    225c:	21ff      	movs	r1, #255	; 0xff
    225e:	4807      	ldr	r0, [pc, #28]	; (227c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2260:	f00e f934 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2264:	4805      	ldr	r0, [pc, #20]	; (227c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2266:	2100      	movs	r1, #0
    2268:	1f00      	subs	r0, r0, #4
    226a:	7001      	strb	r1, [r0, #0]
    226c:	7041      	strb	r1, [r0, #1]
    226e:	f44f 7161 	mov.w	r1, #900	; 0x384
    2272:	8041      	strh	r1, [r0, #2]
    2274:	bd10      	pop	{r4, pc}
    2276:	0000      	.short	0x0000
    2278:	200010c6 	.word	0x200010c6
    227c:	20000350 	.word	0x20000350

00002280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2280:	4b0b      	ldr	r3, [pc, #44]	; (22b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2282:	b510      	push	{r4, lr}
    2284:	789c      	ldrb	r4, [r3, #2]
    2286:	4284      	cmp	r4, r0
    2288:	d90f      	bls.n	22aa <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    228a:	4418      	add	r0, r3
    228c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2290:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2294:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2298:	700b      	strb	r3, [r1, #0]
    229a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    229e:	6011      	str	r1, [r2, #0]
    22a0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    22a4:	8090      	strh	r0, [r2, #4]
    22a6:	2001      	movs	r0, #1
    22a8:	bd10      	pop	{r4, pc}
    22aa:	2000      	movs	r0, #0
    22ac:	bd10      	pop	{r4, pc}
    22ae:	0000      	.short	0x0000
    22b0:	200010c6 	.word	0x200010c6

000022b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    22b4:	4907      	ldr	r1, [pc, #28]	; (22d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    22b6:	788a      	ldrb	r2, [r1, #2]
    22b8:	4282      	cmp	r2, r0
    22ba:	d909      	bls.n	22d0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    22bc:	4408      	add	r0, r1
    22be:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    22c2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    22c6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    22ca:	f000 0001 	and.w	r0, r0, #1
    22ce:	4770      	bx	lr
    22d0:	2000      	movs	r0, #0
    22d2:	4770      	bx	lr
    22d4:	200010c6 	.word	0x200010c6

000022d8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    22d8:	4801      	ldr	r0, [pc, #4]	; (22e0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    22da:	8840      	ldrh	r0, [r0, #2]
    22dc:	4770      	bx	lr
    22de:	0000      	.short	0x0000
    22e0:	2000034c 	.word	0x2000034c

000022e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    22e4:	4905      	ldr	r1, [pc, #20]	; (22fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    22e6:	788a      	ldrb	r2, [r1, #2]
    22e8:	4282      	cmp	r2, r0
    22ea:	d903      	bls.n	22f4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    22ec:	4408      	add	r0, r1
    22ee:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    22f2:	b108      	cbz	r0, 22f8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    22f4:	2000      	movs	r0, #0
    22f6:	4770      	bx	lr
    22f8:	2001      	movs	r0, #1
    22fa:	4770      	bx	lr
    22fc:	200010c6 	.word	0x200010c6

00002300 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2300:	b570      	push	{r4, r5, r6, lr}
    2302:	460d      	mov	r5, r1
    2304:	4606      	mov	r6, r0
    2306:	f000 f8c1 	bl	248c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    230a:	4c10      	ldr	r4, [pc, #64]	; (234c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    230c:	2810      	cmp	r0, #16
    230e:	d007      	beq.n	2320 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2310:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2314:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2318:	07c9      	lsls	r1, r1, #31
    231a:	d001      	beq.n	2320 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    231c:	2001      	movs	r0, #1
    231e:	bd70      	pop	{r4, r5, r6, pc}
    2320:	7861      	ldrb	r1, [r4, #1]
    2322:	2908      	cmp	r1, #8
    2324:	d210      	bcs.n	2348 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2326:	2810      	cmp	r0, #16
    2328:	d008      	beq.n	233c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    232a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    232e:	2101      	movs	r1, #1
    2330:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2334:	7860      	ldrb	r0, [r4, #1]
    2336:	1c40      	adds	r0, r0, #1
    2338:	7060      	strb	r0, [r4, #1]
    233a:	e7ef      	b.n	231c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    233c:	2201      	movs	r2, #1
    233e:	4629      	mov	r1, r5
    2340:	4630      	mov	r0, r6
    2342:	f000 f887 	bl	2454 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2346:	e7f5      	b.n	2334 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2348:	2000      	movs	r0, #0
    234a:	bd70      	pop	{r4, r5, r6, pc}
    234c:	200010c6 	.word	0x200010c6

00002350 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	4d0b      	ldr	r5, [pc, #44]	; (2380 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2354:	7828      	ldrb	r0, [r5, #0]
    2356:	1e40      	subs	r0, r0, #1
    2358:	b244      	sxtb	r4, r0
    235a:	e00a      	b.n	2372 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    235c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2360:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2364:	07c0      	lsls	r0, r0, #31
    2366:	d002      	beq.n	236e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2368:	b2e0      	uxtb	r0, r4
    236a:	f000 f8ed 	bl	2548 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    236e:	1e64      	subs	r4, r4, #1
    2370:	b264      	sxtb	r4, r4
    2372:	2c00      	cmp	r4, #0
    2374:	daf2      	bge.n	235c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2376:	4903      	ldr	r1, [pc, #12]	; (2384 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2378:	2000      	movs	r0, #0
    237a:	7048      	strb	r0, [r1, #1]
    237c:	bd70      	pop	{r4, r5, r6, pc}
    237e:	0000      	.short	0x0000
    2380:	200010c6 	.word	0x200010c6
    2384:	2000034c 	.word	0x2000034c

00002388 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    2388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    238c:	2400      	movs	r4, #0
    238e:	4625      	mov	r5, r4
    2390:	4e18      	ldr	r6, [pc, #96]	; (23f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2392:	e029      	b.n	23e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2394:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    2398:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    239c:	07c0      	lsls	r0, r0, #31
    239e:	d021      	beq.n	23e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23a0:	4628      	mov	r0, r5
    23a2:	f000 f843 	bl	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    23a6:	4603      	mov	r3, r0
    23a8:	f7ff ff44 	bl	2234 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23ac:	4601      	mov	r1, r0
    23ae:	2000      	movs	r0, #0
    23b0:	2b10      	cmp	r3, #16
    23b2:	d009      	beq.n	23c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23b4:	18f2      	adds	r2, r6, r3
    23b6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    23ba:	f1bc 0f01 	cmp.w	ip, #1
    23be:	d002      	beq.n	23c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    23c0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    23c4:	b102      	cbz	r2, 23c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23c6:	2001      	movs	r0, #1
    23c8:	1e40      	subs	r0, r0, #1
    23ca:	4201      	tst	r1, r0
    23cc:	d10a      	bne.n	23e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23ce:	480a      	ldr	r0, [pc, #40]	; (23f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    23d0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    23d4:	5503      	strb	r3, [r0, r4]
    23d6:	4620      	mov	r0, r4
    23d8:	1c64      	adds	r4, r4, #1
    23da:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    23de:	b2e4      	uxtb	r4, r4
    23e0:	f005 fc20 	bl	7c24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    23e4:	1c6d      	adds	r5, r5, #1
    23e6:	b2ed      	uxtb	r5, r5
    23e8:	7830      	ldrb	r0, [r6, #0]
    23ea:	42a8      	cmp	r0, r5
    23ec:	d8d2      	bhi.n	2394 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    23ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23f2:	0000      	.short	0x0000
    23f4:	200010c6 	.word	0x200010c6
    23f8:	20000350 	.word	0x20000350
    23fc:	4602      	mov	r2, r0
    23fe:	4809      	ldr	r0, [pc, #36]	; (2424 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2400:	b510      	push	{r4, lr}
    2402:	7800      	ldrb	r0, [r0, #0]
    2404:	460b      	mov	r3, r1
    2406:	b158      	cbz	r0, 2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2408:	4807      	ldr	r0, [pc, #28]	; (2428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    240a:	7881      	ldrb	r1, [r0, #2]
    240c:	b141      	cbz	r1, 2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    240e:	b10b      	cbz	r3, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2410:	1cc0      	adds	r0, r0, #3
    2412:	e001      	b.n	2418 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2414:	4804      	ldr	r0, [pc, #16]	; (2428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2416:	3083      	adds	r0, #131	; 0x83
    2418:	f004 fdd0 	bl	6fbc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    241c:	2001      	movs	r0, #1
    241e:	bd10      	pop	{r4, pc}
    2420:	2000      	movs	r0, #0
    2422:	bd10      	pop	{r4, pc}
    2424:	2000034c 	.word	0x2000034c
    2428:	200010c6 	.word	0x200010c6
    242c:	4908      	ldr	r1, [pc, #32]	; (2450 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    242e:	b510      	push	{r4, lr}
    2430:	4603      	mov	r3, r0
    2432:	2000      	movs	r0, #0
    2434:	788a      	ldrb	r2, [r1, #2]
    2436:	e006      	b.n	2446 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2438:	180c      	adds	r4, r1, r0
    243a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    243e:	429c      	cmp	r4, r3
    2440:	d004      	beq.n	244c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2442:	1c40      	adds	r0, r0, #1
    2444:	b2c0      	uxtb	r0, r0
    2446:	4282      	cmp	r2, r0
    2448:	d8f6      	bhi.n	2438 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    244a:	2010      	movs	r0, #16
    244c:	bd10      	pop	{r4, pc}
    244e:	0000      	.short	0x0000
    2450:	200010c6 	.word	0x200010c6
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	4b0c      	ldr	r3, [pc, #48]	; (2488 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    2458:	4604      	mov	r4, r0
    245a:	7818      	ldrb	r0, [r3, #0]
    245c:	1c45      	adds	r5, r0, #1
    245e:	701d      	strb	r5, [r3, #0]
    2460:	2810      	cmp	r0, #16
    2462:	d303      	bcc.n	246c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2464:	2146      	movs	r1, #70	; 0x46
    2466:	2028      	movs	r0, #40	; 0x28
    2468:	f7fe fab6 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    246c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2470:	680d      	ldr	r5, [r1, #0]
    2472:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2476:	8889      	ldrh	r1, [r1, #4]
    2478:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    247c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2480:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2484:	bd70      	pop	{r4, r5, r6, pc}
    2486:	0000      	.short	0x0000
    2488:	200010c6 	.word	0x200010c6
    248c:	b5f0      	push	{r4, r5, r6, r7, lr}
    248e:	4c1a      	ldr	r4, [pc, #104]	; (24f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2490:	4603      	mov	r3, r0
    2492:	2000      	movs	r0, #0
    2494:	7825      	ldrb	r5, [r4, #0]
    2496:	e02a      	b.n	24ee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    2498:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    249c:	780f      	ldrb	r7, [r1, #0]
    249e:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    24a2:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    24a6:	ea87 070c 	eor.w	r7, r7, ip
    24aa:	405e      	eors	r6, r3
    24ac:	443e      	add	r6, r7
    24ae:	784f      	ldrb	r7, [r1, #1]
    24b0:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    24b4:	ea87 070c 	eor.w	r7, r7, ip
    24b8:	443e      	add	r6, r7
    24ba:	788f      	ldrb	r7, [r1, #2]
    24bc:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    24c0:	ea87 070c 	eor.w	r7, r7, ip
    24c4:	443e      	add	r6, r7
    24c6:	78cf      	ldrb	r7, [r1, #3]
    24c8:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24cc:	ea87 070c 	eor.w	r7, r7, ip
    24d0:	443e      	add	r6, r7
    24d2:	790f      	ldrb	r7, [r1, #4]
    24d4:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    24d8:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    24dc:	ea87 070c 	eor.w	r7, r7, ip
    24e0:	443e      	add	r6, r7
    24e2:	794f      	ldrb	r7, [r1, #5]
    24e4:	4057      	eors	r7, r2
    24e6:	42f7      	cmn	r7, r6
    24e8:	d004      	beq.n	24f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    24ea:	1c40      	adds	r0, r0, #1
    24ec:	b2c0      	uxtb	r0, r0
    24ee:	4285      	cmp	r5, r0
    24f0:	d8d2      	bhi.n	2498 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    24f2:	2010      	movs	r0, #16
    24f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24f6:	0000      	.short	0x0000
    24f8:	200010c6 	.word	0x200010c6
    24fc:	b570      	push	{r4, r5, r6, lr}
    24fe:	4605      	mov	r5, r0
    2500:	f7ff ff94 	bl	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2504:	2810      	cmp	r0, #16
    2506:	d11c      	bne.n	2542 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2508:	4c0e      	ldr	r4, [pc, #56]	; (2544 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    250a:	7820      	ldrb	r0, [r4, #0]
    250c:	1e40      	subs	r0, r0, #1
    250e:	b2c0      	uxtb	r0, r0
    2510:	7020      	strb	r0, [r4, #0]
    2512:	42a8      	cmp	r0, r5
    2514:	d015      	beq.n	2542 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2516:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    251a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    251e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2522:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2526:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    252a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    252e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2532:	7820      	ldrb	r0, [r4, #0]
    2534:	f7ff ff7a 	bl	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2538:	2810      	cmp	r0, #16
    253a:	d002      	beq.n	2542 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    253c:	4420      	add	r0, r4
    253e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2542:	bd70      	pop	{r4, r5, r6, pc}
    2544:	200010c6 	.word	0x200010c6
    2548:	4905      	ldr	r1, [pc, #20]	; (2560 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    254a:	784a      	ldrb	r2, [r1, #1]
    254c:	1e52      	subs	r2, r2, #1
    254e:	704a      	strb	r2, [r1, #1]
    2550:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2554:	2200      	movs	r2, #0
    2556:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    255a:	f7ff bfcf 	b.w	24fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    255e:	0000      	.short	0x0000
    2560:	200010c6 	.word	0x200010c6

00002564 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2568:	4604      	mov	r4, r0
    256a:	f100 0580 	add.w	r5, r0, #128	; 0x80
    256e:	f04f 0901 	mov.w	r9, #1
    2572:	b171      	cbz	r1, 2592 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2574:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2578:	1e7e      	subs	r6, r7, #1
    257a:	2901      	cmp	r1, #1
    257c:	d025      	beq.n	25ca <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x66>
    257e:	2902      	cmp	r1, #2
    2580:	d04a      	beq.n	2618 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb4>
    2582:	2903      	cmp	r1, #3
    2584:	d11f      	bne.n	25c6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2586:	4639      	mov	r1, r7
    2588:	4630      	mov	r0, r6
    258a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    258e:	f00b b8bd 	b.w	d70c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2592:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2596:	2100      	movs	r1, #0
    2598:	f00d ff98 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    259c:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    25a0:	4822      	ldr	r0, [pc, #136]	; (262c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>)
    25a2:	66e8      	str	r0, [r5, #108]	; 0x6c
    25a4:	2007      	movs	r0, #7
    25a6:	6728      	str	r0, [r5, #112]	; 0x70
    25a8:	f814 0fec 	ldrb.w	r0, [r4, #236]!
    25ac:	f020 0004 	bic.w	r0, r0, #4
    25b0:	7020      	strb	r0, [r4, #0]
    25b2:	20fe      	movs	r0, #254	; 0xfe
    25b4:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    25b8:	207f      	movs	r0, #127	; 0x7f
    25ba:	7668      	strb	r0, [r5, #25]
    25bc:	481c      	ldr	r0, [pc, #112]	; (2630 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>)
    25be:	60a8      	str	r0, [r5, #8]
    25c0:	2000      	movs	r0, #0
    25c2:	e9c5 0000 	strd	r0, r0, [r5]
    25c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25ca:	f04f 0800 	mov.w	r8, #0
    25ce:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    25d2:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    25d6:	6921      	ldr	r1, [r4, #16]
    25d8:	4816      	ldr	r0, [pc, #88]	; (2634 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    25da:	460a      	mov	r2, r1
    25dc:	4408      	add	r0, r1
    25de:	fbb0 f0f1 	udiv	r0, r0, r1
    25e2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    25e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
    25ea:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    25ee:	8b63      	ldrh	r3, [r4, #26]
    25f0:	4628      	mov	r0, r5
    25f2:	f000 f821 	bl	2638 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    25f6:	4639      	mov	r1, r7
    25f8:	4630      	mov	r0, r6
    25fa:	f00b f887 	bl	d70c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    25fe:	f00d fe7c 	bl	102fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2602:	b118      	cbz	r0, 260c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa8>
    2604:	6960      	ldr	r0, [r4, #20]
    2606:	f000 fb53 	bl	2cb0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    260a:	b110      	cbz	r0, 2612 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xae>
    260c:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    2610:	e7d9      	b.n	25c6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2612:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2616:	e7d6      	b.n	25c6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2618:	6901      	ldr	r1, [r0, #16]
    261a:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    261e:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    2622:	4628      	mov	r0, r5
    2624:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2628:	f000 b806 	b.w	2638 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    262c:	3404492f 	.word	0x3404492f
    2630:	fffce000 	.word	0xfffce000
    2634:	01c9c37f 	.word	0x01c9c37f
    2638:	b510      	push	{r4, lr}
    263a:	2400      	movs	r4, #0
    263c:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    2640:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    2644:	434c      	muls	r4, r1
    2646:	fbb4 f4f2 	udiv	r4, r4, r2
    264a:	f820 4910 	strh.w	r4, [r0], #-16
    264e:	f240 2471 	movw	r4, #625	; 0x271
    2652:	4363      	muls	r3, r4
    2654:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2658:	1e5b      	subs	r3, r3, #1
    265a:	fbb3 f3f2 	udiv	r3, r3, r2
    265e:	81c3      	strh	r3, [r0, #14]
    2660:	4b09      	ldr	r3, [pc, #36]	; (2688 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    2662:	fbb3 f3f2 	udiv	r3, r3, r2
    2666:	1c5b      	adds	r3, r3, #1
    2668:	8283      	strh	r3, [r0, #20]
    266a:	8903      	ldrh	r3, [r0, #8]
    266c:	4363      	muls	r3, r4
    266e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2672:	1e5b      	subs	r3, r3, #1
    2674:	fbb3 f3f2 	udiv	r3, r3, r2
    2678:	6043      	str	r3, [r0, #4]
    267a:	6803      	ldr	r3, [r0, #0]
    267c:	434b      	muls	r3, r1
    267e:	fbb3 f1f2 	udiv	r1, r3, r2
    2682:	6001      	str	r1, [r0, #0]
    2684:	bd10      	pop	{r4, pc}
    2686:	0000      	.short	0x0000
    2688:	02625a00 	.word	0x02625a00

0000268c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    268c:	4902      	ldr	r1, [pc, #8]	; (2698 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    268e:	f991 1000 	ldrsb.w	r1, [r1]
    2692:	f00a bfec 	b.w	d66e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    2696:	0000      	.short	0x0000
    2698:	2000036c 	.word	0x2000036c

0000269c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    269c:	b508      	push	{r3, lr}
    269e:	207f      	movs	r0, #127	; 0x7f
    26a0:	f88d 0000 	strb.w	r0, [sp]
    26a4:	4668      	mov	r0, sp
    26a6:	f005 f9bd 	bl	7a24 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    26aa:	b140      	cbz	r0, 26be <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    26ac:	4805      	ldr	r0, [pc, #20]	; (26c4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    26ae:	7840      	ldrb	r0, [r0, #1]
    26b0:	4240      	negs	r0, r0
    26b2:	b241      	sxtb	r1, r0
    26b4:	f99d 0000 	ldrsb.w	r0, [sp]
    26b8:	f00a ffd9 	bl	d66e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    26bc:	bd08      	pop	{r3, pc}
    26be:	f99d 0000 	ldrsb.w	r0, [sp]
    26c2:	bd08      	pop	{r3, pc}
    26c4:	2000036c 	.word	0x2000036c
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    26ce:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    26d2:	2401      	movs	r4, #1
    26d4:	fb03 2101 	mla	r1, r3, r1, r2
    26d8:	2225      	movs	r2, #37	; 0x25
    26da:	fbb1 f3f2 	udiv	r3, r1, r2
    26de:	fb02 1113 	mls	r1, r2, r3, r1
    26e2:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    26e6:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    26ea:	f001 0307 	and.w	r3, r1, #7
    26ee:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    26f2:	fa04 f303 	lsl.w	r3, r4, r3
    26f6:	421a      	tst	r2, r3
    26f8:	d004      	beq.n	2704 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x68>
    26fa:	bf00      	nop
    26fc:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2700:	2000      	movs	r0, #0
    2702:	bd70      	pop	{r4, r5, r6, pc}
    2704:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2708:	fbb1 f3f2 	udiv	r3, r1, r2
    270c:	fb02 1113 	mls	r1, r2, r3, r1
    2710:	1c49      	adds	r1, r1, #1
    2712:	b2c9      	uxtb	r1, r1
    2714:	2300      	movs	r3, #0
    2716:	18c5      	adds	r5, r0, r3
    2718:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    271c:	428a      	cmp	r2, r1
    271e:	d312      	bcc.n	2746 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xaa>
    2720:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2724:	2200      	movs	r2, #0
    2726:	bf00      	nop
    2728:	fa04 f602 	lsl.w	r6, r4, r2
    272c:	4235      	tst	r5, r6
    272e:	d001      	beq.n	2734 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x98>
    2730:	1e49      	subs	r1, r1, #1
    2732:	b2c9      	uxtb	r1, r1
    2734:	b121      	cbz	r1, 2740 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xa4>
    2736:	1c52      	adds	r2, r2, #1
    2738:	b2d2      	uxtb	r2, r2
    273a:	2a08      	cmp	r2, #8
    273c:	d3f4      	bcc.n	2728 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x8c>
    273e:	e004      	b.n	274a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xae>
    2740:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2744:	e7da      	b.n	26fc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x60>
    2746:	1a89      	subs	r1, r1, r2
    2748:	b2c9      	uxtb	r1, r1
    274a:	1c5b      	adds	r3, r3, #1
    274c:	b2db      	uxtb	r3, r3
    274e:	2b05      	cmp	r3, #5
    2750:	d3e1      	bcc.n	2716 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x7a>
    2752:	201f      	movs	r0, #31
    2754:	bd70      	pop	{r4, r5, r6, pc}
    2756:	0000      	movs	r0, r0
    2758:	b570      	push	{r4, r5, r6, lr}
    275a:	1c49      	adds	r1, r1, #1
    275c:	2300      	movs	r3, #0
    275e:	b2c9      	uxtb	r1, r1
    2760:	2401      	movs	r4, #1
    2762:	18c5      	adds	r5, r0, r3
    2764:	79aa      	ldrb	r2, [r5, #6]
    2766:	428a      	cmp	r2, r1
    2768:	d312      	bcc.n	2790 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf4>
    276a:	f895 5001 	ldrb.w	r5, [r5, #1]
    276e:	2200      	movs	r2, #0
    2770:	fa04 f602 	lsl.w	r6, r4, r2
    2774:	4235      	tst	r5, r6
    2776:	d001      	beq.n	277c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xe0>
    2778:	1e49      	subs	r1, r1, #1
    277a:	b2c9      	uxtb	r1, r1
    277c:	b121      	cbz	r1, 2788 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xec>
    277e:	1c52      	adds	r2, r2, #1
    2780:	b2d2      	uxtb	r2, r2
    2782:	2a08      	cmp	r2, #8
    2784:	d3f4      	bcc.n	2770 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xd4>
    2786:	e005      	b.n	2794 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf8>
    2788:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    278c:	b2c0      	uxtb	r0, r0
    278e:	bd70      	pop	{r4, r5, r6, pc}
    2790:	1a89      	subs	r1, r1, r2
    2792:	b2c9      	uxtb	r1, r1
    2794:	1c5b      	adds	r3, r3, #1
    2796:	b2db      	uxtb	r3, r3
    2798:	2b05      	cmp	r3, #5
    279a:	d3e2      	bcc.n	2762 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xc6>
    279c:	219d      	movs	r1, #157	; 0x9d
    279e:	2046      	movs	r0, #70	; 0x46
    27a0:	f7fe f91a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000027a4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    27a4:	7841      	ldrb	r1, [r0, #1]
    27a6:	b141      	cbz	r1, 27ba <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27a8:	78c0      	ldrb	r0, [r0, #3]
    27aa:	282b      	cmp	r0, #43	; 0x2b
    27ac:	d203      	bcs.n	27b6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    27ae:	4a04      	ldr	r2, [pc, #16]	; (27c0 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    27b0:	5c10      	ldrb	r0, [r2, r0]
    27b2:	4288      	cmp	r0, r1
    27b4:	d101      	bne.n	27ba <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27b6:	2001      	movs	r0, #1
    27b8:	4770      	bx	lr
    27ba:	2000      	movs	r0, #0
    27bc:	4770      	bx	lr
    27be:	0000      	.short	0x0000
    27c0:	00010616 	.word	0x00010616

000027c4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    27c4:	b510      	push	{r4, lr}
    27c6:	2201      	movs	r2, #1
    27c8:	70c1      	strb	r1, [r0, #3]
    27ca:	292b      	cmp	r1, #43	; 0x2b
    27cc:	d202      	bcs.n	27d4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    27ce:	4a06      	ldr	r2, [pc, #24]	; (27e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    27d0:	5c52      	ldrb	r2, [r2, r1]
    27d2:	e006      	b.n	27e2 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27d4:	29ff      	cmp	r1, #255	; 0xff
    27d6:	d004      	beq.n	27e2 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27d8:	f240 4175 	movw	r1, #1141	; 0x475
    27dc:	202a      	movs	r0, #42	; 0x2a
    27de:	f7fe f8fb 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27e2:	7042      	strb	r2, [r0, #1]
    27e4:	bd10      	pop	{r4, pc}
    27e6:	0000      	.short	0x0000
    27e8:	00010616 	.word	0x00010616

000027ec <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    27ec:	4904      	ldr	r1, [pc, #16]	; (2800 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    27ee:	7c89      	ldrb	r1, [r1, #18]
    27f0:	0749      	lsls	r1, r1, #29
    27f2:	d400      	bmi.n	27f6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    27f4:	b108      	cbz	r0, 27fa <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    27f6:	2000      	movs	r0, #0
    27f8:	4770      	bx	lr
    27fa:	2001      	movs	r0, #1
    27fc:	4770      	bx	lr
    27fe:	0000      	.short	0x0000
    2800:	20000b90 	.word	0x20000b90

00002804 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2804:	4803      	ldr	r0, [pc, #12]	; (2814 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    2806:	7c80      	ldrb	r0, [r0, #18]
    2808:	0780      	lsls	r0, r0, #30
    280a:	d401      	bmi.n	2810 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    280c:	2001      	movs	r0, #1
    280e:	4770      	bx	lr
    2810:	2000      	movs	r0, #0
    2812:	4770      	bx	lr
    2814:	20000b90 	.word	0x20000b90

00002818 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2818:	4803      	ldr	r0, [pc, #12]	; (2828 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    281a:	7c80      	ldrb	r0, [r0, #18]
    281c:	07c0      	lsls	r0, r0, #31
    281e:	d001      	beq.n	2824 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2820:	2000      	movs	r0, #0
    2822:	4770      	bx	lr
    2824:	2001      	movs	r0, #1
    2826:	4770      	bx	lr
    2828:	20000b90 	.word	0x20000b90
    282c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2830:	4688      	mov	r8, r1
    2832:	4699      	mov	r9, r3
    2834:	4615      	mov	r5, r2
    2836:	4604      	mov	r4, r0
    2838:	4669      	mov	r1, sp
    283a:	f00a fd77 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    283e:	bbe0      	cbnz	r0, 28ba <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2840:	9e01      	ldr	r6, [sp, #4]
    2842:	2700      	movs	r7, #0
    2844:	3680      	adds	r6, #128	; 0x80
    2846:	b17d      	cbz	r5, 2868 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2848:	4620      	mov	r0, r4
    284a:	f7fe fcd7 	bl	11fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    284e:	0004      	movs	r4, r0
    2850:	d00e      	beq.n	2870 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    2852:	4629      	mov	r1, r5
    2854:	f00a f973 	bl	cb3e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2858:	b118      	cbz	r0, 2862 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    285a:	491b      	ldr	r1, [pc, #108]	; (28c8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    285c:	8849      	ldrh	r1, [r1, #2]
    285e:	42a9      	cmp	r1, r5
    2860:	d208      	bcs.n	2874 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    2862:	2000      	movs	r0, #0
    2864:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2868:	2001      	movs	r0, #1
    286a:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    286e:	e024      	b.n	28ba <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2870:	2167      	movs	r1, #103	; 0x67
    2872:	e025      	b.n	28c0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2874:	4601      	mov	r1, r0
    2876:	aa02      	add	r2, sp, #8
    2878:	4620      	mov	r0, r4
    287a:	f00a f959 	bl	cb30 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    287e:	9802      	ldr	r0, [sp, #8]
    2880:	8007      	strh	r7, [r0, #0]
    2882:	7087      	strb	r7, [r0, #2]
    2884:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2888:	b109      	cbz	r1, 288e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    288a:	f04f 0802 	mov.w	r8, #2
    288e:	4641      	mov	r1, r8
    2890:	f00b f88f 	bl	d9b2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2894:	9802      	ldr	r0, [sp, #8]
    2896:	462a      	mov	r2, r5
    2898:	4649      	mov	r1, r9
    289a:	1cc0      	adds	r0, r0, #3
    289c:	f00d fd9c 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28a0:	4620      	mov	r0, r4
    28a2:	4629      	mov	r1, r5
    28a4:	f00a f902 	bl	caac <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    28a8:	b148      	cbz	r0, 28be <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    28aa:	4668      	mov	r0, sp
    28ac:	f00b f8dc 	bl	da68 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    28b0:	9801      	ldr	r0, [sp, #4]
    28b2:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    28b6:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    28ba:	2001      	movs	r0, #1
    28bc:	e7d2      	b.n	2864 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    28be:	217c      	movs	r1, #124	; 0x7c
    28c0:	202b      	movs	r0, #43	; 0x2b
    28c2:	f7fe f889 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28c6:	0000      	.short	0x0000
    28c8:	20000b90 	.word	0x20000b90

000028cc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    28cc:	4809      	ldr	r0, [pc, #36]	; (28f4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    28ce:	b082      	sub	sp, #8
    28d0:	7a00      	ldrb	r0, [r0, #8]
    28d2:	f88d 0000 	strb.w	r0, [sp]
    28d6:	9800      	ldr	r0, [sp, #0]
    28d8:	9000      	str	r0, [sp, #0]
    28da:	f89d 0000 	ldrb.w	r0, [sp]
    28de:	2800      	cmp	r0, #0
    28e0:	d105      	bne.n	28ee <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    28e2:	2202      	movs	r2, #2
    28e4:	4904      	ldr	r1, [pc, #16]	; (28f8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    28e6:	4803      	ldr	r0, [pc, #12]	; (28f4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    28e8:	b002      	add	sp, #8
    28ea:	f00b b8e0 	b.w	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    28ee:	b002      	add	sp, #8
    28f0:	4770      	bx	lr
    28f2:	0000      	.short	0x0000
    28f4:	20000ba8 	.word	0x20000ba8
    28f8:	0000daf5 	.word	0x0000daf5

000028fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    28fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2900:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2a9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a0>
    2904:	f8df a198 	ldr.w	sl, [pc, #408]	; 2aa0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2908:	4683      	mov	fp, r0
    290a:	f04f 0901 	mov.w	r9, #1
    290e:	2600      	movs	r6, #0
    2910:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2914:	7a00      	ldrb	r0, [r0, #8]
    2916:	f88d 0000 	strb.w	r0, [sp]
    291a:	9800      	ldr	r0, [sp, #0]
    291c:	9000      	str	r0, [sp, #0]
    291e:	f89d 1000 	ldrb.w	r1, [sp]
    2922:	292a      	cmp	r1, #42	; 0x2a
    2924:	d106      	bne.n	2934 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2926:	f89a 1013 	ldrb.w	r1, [sl, #19]
    292a:	b119      	cbz	r1, 2934 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    292c:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2930:	2800      	cmp	r0, #0
    2932:	d07d      	beq.n	2a30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    2934:	2700      	movs	r7, #0
    2936:	f88d 6000 	strb.w	r6, [sp]
    293a:	4668      	mov	r0, sp
    293c:	f000 f912 	bl	2b64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>
    2940:	f89d 1000 	ldrb.w	r1, [sp]
    2944:	2900      	cmp	r1, #0
    2946:	d1f8      	bne.n	293a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    2948:	2800      	cmp	r0, #0
    294a:	d071      	beq.n	2a30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    294c:	4604      	mov	r4, r0
    294e:	7a00      	ldrb	r0, [r0, #8]
    2950:	f88d 0000 	strb.w	r0, [sp]
    2954:	9800      	ldr	r0, [sp, #0]
    2956:	9000      	str	r0, [sp, #0]
    2958:	f89d 5000 	ldrb.w	r5, [sp]
    295c:	1ea8      	subs	r0, r5, #2
    295e:	2830      	cmp	r0, #48	; 0x30
    2960:	d267      	bcs.n	2a32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    2962:	e8df f000 	tbb	[pc, r0]
    2966:	2718      	.short	0x2718
    2968:	85852185 	.word	0x85852185
    296c:	6f696f27 	.word	0x6f696f27
    2970:	6f2d6f6f 	.word	0x6f2d6f6f
    2974:	85852185 	.word	0x85852185
    2978:	85216f6f 	.word	0x85216f6f
    297c:	6f858585 	.word	0x6f858585
    2980:	6f858545 	.word	0x6f858545
    2984:	856f6f21 	.word	0x856f6f21
    2988:	8585216f 	.word	0x8585216f
    298c:	8575554f 	.word	0x8575554f
    2990:	85858585 	.word	0x85858585
    2994:	4f85      	.short	0x4f85
    2996:	6862      	ldr	r2, [r4, #4]
    2998:	b912      	cbnz	r2, 29a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    299a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    299e:	e064      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    29a0:	4659      	mov	r1, fp
    29a2:	4620      	mov	r0, r4
    29a4:	4790      	blx	r2
    29a6:	e03c      	b.n	2a22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    29a8:	6862      	ldr	r2, [r4, #4]
    29aa:	2a00      	cmp	r2, #0
    29ac:	d1f8      	bne.n	29a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29ae:	f240 11bb 	movw	r1, #443	; 0x1bb
    29b2:	e05a      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    29b4:	6862      	ldr	r2, [r4, #4]
    29b6:	2a00      	cmp	r2, #0
    29b8:	d1f2      	bne.n	29a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29ba:	f240 214b 	movw	r1, #587	; 0x24b
    29be:	e054      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    29c0:	6860      	ldr	r0, [r4, #4]
    29c2:	465d      	mov	r5, fp
    29c4:	b180      	cbz	r0, 29e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xec>
    29c6:	8804      	ldrh	r4, [r0, #0]
    29c8:	4620      	mov	r0, r4
    29ca:	f7fe fc17 	bl	11fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    29ce:	b168      	cbz	r0, 29ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    29d0:	706e      	strb	r6, [r5, #1]
    29d2:	220d      	movs	r2, #13
    29d4:	702a      	strb	r2, [r5, #0]
    29d6:	80ec      	strh	r4, [r5, #6]
    29d8:	f8a5 9008 	strh.w	r9, [r5, #8]
    29dc:	4631      	mov	r1, r6
    29de:	f885 9004 	strb.w	r9, [r5, #4]
    29e2:	f00a f943 	bl	cc6c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    29e6:	e057      	b.n	2a98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    29e8:	21ce      	movs	r1, #206	; 0xce
    29ea:	e03e      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    29ec:	21ae      	movs	r1, #174	; 0xae
    29ee:	e03c      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    29f0:	6862      	ldr	r2, [r4, #4]
    29f2:	b122      	cbz	r2, 29fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x102>
    29f4:	4659      	mov	r1, fp
    29f6:	4620      	mov	r0, r4
    29f8:	4790      	blx	r2
    29fa:	2701      	movs	r7, #1
    29fc:	e011      	b.n	2a22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    29fe:	f240 2163 	movw	r1, #611	; 0x263
    2a02:	e032      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    2a04:	6862      	ldr	r2, [r4, #4]
    2a06:	2a00      	cmp	r2, #0
    2a08:	d1ca      	bne.n	29a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a0a:	f240 216f 	movw	r1, #623	; 0x26f
    2a0e:	e02c      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    2a10:	f88b 6001 	strb.w	r6, [fp, #1]
    2a14:	2116      	movs	r1, #22
    2a16:	f88b 1000 	strb.w	r1, [fp]
    2a1a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a1e:	f8cb 1004 	str.w	r1, [fp, #4]
    2a22:	7226      	strb	r6, [r4, #8]
    2a24:	2d21      	cmp	r5, #33	; 0x21
    2a26:	d026      	beq.n	2a76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    2a28:	2d14      	cmp	r5, #20
    2a2a:	d027      	beq.n	2a7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    2a2c:	2d22      	cmp	r5, #34	; 0x22
    2a2e:	e001      	b.n	2a34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    2a30:	e017      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    2a32:	e01d      	b.n	2a70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    2a34:	d029      	beq.n	2a8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    2a36:	e02d      	b.n	2a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2a38:	6862      	ldr	r2, [r4, #4]
    2a3a:	2a00      	cmp	r2, #0
    2a3c:	d1b0      	bne.n	29a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a3e:	f240 2181 	movw	r1, #641	; 0x281
    2a42:	e012      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    2a44:	6862      	ldr	r2, [r4, #4]
    2a46:	2a00      	cmp	r2, #0
    2a48:	d1aa      	bne.n	29a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a4a:	f240 2196 	movw	r1, #662	; 0x296
    2a4e:	e00c      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    2a50:	4814      	ldr	r0, [pc, #80]	; (2aa4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a8>)
    2a52:	6802      	ldr	r2, [r0, #0]
    2a54:	b122      	cbz	r2, 2a60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2a56:	6860      	ldr	r0, [r4, #4]
    2a58:	b128      	cbz	r0, 2a66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2a5a:	8800      	ldrh	r0, [r0, #0]
    2a5c:	4659      	mov	r1, fp
    2a5e:	4790      	blx	r2
    2a60:	2002      	movs	r0, #2
    2a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a66:	f240 219f 	movw	r1, #671	; 0x29f
    2a6a:	2010      	movs	r0, #16
    2a6c:	f7fd ffb4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a70:	f240 21bd 	movw	r1, #701	; 0x2bd
    2a74:	e7f9      	b.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    2a76:	f7ff fec5 	bl	2804 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2a7a:	e008      	b.n	2a8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a7c:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2a80:	f000 0001 	and.w	r0, r0, #1
    2a84:	f7ff feb2 	bl	27ec <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2a88:	e001      	b.n	2a8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a8a:	f7ff fec5 	bl	2818 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2a8e:	2800      	cmp	r0, #0
    2a90:	f47f af3e 	bne.w	2910 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2a94:	2f00      	cmp	r7, #0
    2a96:	d1fb      	bne.n	2a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x194>
    2a98:	2004      	movs	r0, #4
    2a9a:	e7e2      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    2a9c:	20000bbc 	.word	0x20000bbc
    2aa0:	20000b90 	.word	0x20000b90
    2aa4:	200000b0 	.word	0x200000b0

00002aa8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2aa8:	4901      	ldr	r1, [pc, #4]	; (2ab0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2aaa:	7008      	strb	r0, [r1, #0]
    2aac:	f000 b8b0 	b.w	2c10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    2ab0:	2000036e 	.word	0x2000036e

00002ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    2ab4:	4902      	ldr	r1, [pc, #8]	; (2ac0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    2ab6:	4801      	ldr	r0, [pc, #4]	; (2abc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    2ab8:	6008      	str	r0, [r1, #0]
    2aba:	4770      	bx	lr
    2abc:	00002ac5 	.word	0x00002ac5
    2ac0:	200000b0 	.word	0x200000b0
    2ac4:	b538      	push	{r3, r4, r5, lr}
    2ac6:	000d      	movs	r5, r1
    2ac8:	d014      	beq.n	2af4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    2aca:	80a8      	strh	r0, [r5, #4]
    2acc:	2100      	movs	r1, #0
    2ace:	7269      	strb	r1, [r5, #9]
    2ad0:	f7fe fb7e 	bl	11d0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2ad4:	4604      	mov	r4, r0
    2ad6:	f00a f80d 	bl	caf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2ada:	b168      	cbz	r0, 2af8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x44>
    2adc:	4601      	mov	r1, r0
    2ade:	466a      	mov	r2, sp
    2ae0:	4620      	mov	r0, r4
    2ae2:	f00a f825 	bl	cb30 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2ae6:	80e8      	strh	r0, [r5, #6]
    2ae8:	b148      	cbz	r0, 2afe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4a>
    2aea:	28fb      	cmp	r0, #251	; 0xfb
    2aec:	d90a      	bls.n	2b04 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x50>
    2aee:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2af2:	e032      	b.n	2b5a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    2af4:	21fc      	movs	r1, #252	; 0xfc
    2af6:	e030      	b.n	2b5a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    2af8:	f240 1105 	movw	r1, #261	; 0x105
    2afc:	e02d      	b.n	2b5a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    2afe:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2b02:	e02a      	b.n	2b5a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    2b04:	9800      	ldr	r0, [sp, #0]
    2b06:	f00a ff00 	bl	d90a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2b0a:	2801      	cmp	r0, #1
    2b0c:	d004      	beq.n	2b18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    2b0e:	2802      	cmp	r0, #2
    2b10:	d002      	beq.n	2b18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    2b12:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2b16:	e020      	b.n	2b5a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    2b18:	7228      	strb	r0, [r5, #8]
    2b1a:	6828      	ldr	r0, [r5, #0]
    2b1c:	b1a8      	cbz	r0, 2b4a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    2b1e:	9900      	ldr	r1, [sp, #0]
    2b20:	88ea      	ldrh	r2, [r5, #6]
    2b22:	1cc9      	adds	r1, r1, #3
    2b24:	f00d fc58 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b28:	4620      	mov	r0, r4
    2b2a:	f009 ffab 	bl	ca84 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2b2e:	b178      	cbz	r0, 2b50 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>
    2b30:	4620      	mov	r0, r4
    2b32:	2100      	movs	r1, #0
    2b34:	f00a f89a 	bl	cc6c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2b38:	b168      	cbz	r0, 2b56 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa2>
    2b3a:	4809      	ldr	r0, [pc, #36]	; (2b60 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xac>)
    2b3c:	7cc1      	ldrb	r1, [r0, #19]
    2b3e:	2900      	cmp	r1, #0
    2b40:	d002      	beq.n	2b48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x94>
    2b42:	8a81      	ldrh	r1, [r0, #20]
    2b44:	1e49      	subs	r1, r1, #1
    2b46:	8281      	strh	r1, [r0, #20]
    2b48:	bd38      	pop	{r3, r4, r5, pc}
    2b4a:	f240 1123 	movw	r1, #291	; 0x123
    2b4e:	e004      	b.n	2b5a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    2b50:	f44f 7194 	mov.w	r1, #296	; 0x128
    2b54:	e001      	b.n	2b5a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    2b56:	f240 112d 	movw	r1, #301	; 0x12d
    2b5a:	2010      	movs	r0, #16
    2b5c:	f7fd ff3c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b60:	20000b90 	.word	0x20000b90
    2b64:	b538      	push	{r3, r4, r5, lr}
    2b66:	4602      	mov	r2, r0
    2b68:	4b11      	ldr	r3, [pc, #68]	; (2bb0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>)
    2b6a:	2000      	movs	r0, #0
    2b6c:	7010      	strb	r0, [r2, #0]
    2b6e:	6858      	ldr	r0, [r3, #4]
    2b70:	7a01      	ldrb	r1, [r0, #8]
    2b72:	f88d 1000 	strb.w	r1, [sp]
    2b76:	9900      	ldr	r1, [sp, #0]
    2b78:	9100      	str	r1, [sp, #0]
    2b7a:	f89d 5000 	ldrb.w	r5, [sp]
    2b7e:	2401      	movs	r4, #1
    2b80:	2d01      	cmp	r5, #1
    2b82:	d006      	beq.n	2b92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xde>
    2b84:	f3ef 8110 	mrs	r1, PRIMASK
    2b88:	b672      	cpsid	i
    2b8a:	6805      	ldr	r5, [r0, #0]
    2b8c:	605d      	str	r5, [r3, #4]
    2b8e:	b111      	cbz	r1, 2b96 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe2>
    2b90:	e002      	b.n	2b98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe4>
    2b92:	2000      	movs	r0, #0
    2b94:	bd38      	pop	{r3, r4, r5, pc}
    2b96:	b662      	cpsie	i
    2b98:	7a01      	ldrb	r1, [r0, #8]
    2b9a:	f88d 1000 	strb.w	r1, [sp]
    2b9e:	9900      	ldr	r1, [sp, #0]
    2ba0:	9100      	str	r1, [sp, #0]
    2ba2:	f89d 3000 	ldrb.w	r3, [sp]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d1f4      	bne.n	2b94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe0>
    2baa:	7014      	strb	r4, [r2, #0]
    2bac:	bd38      	pop	{r3, r4, r5, pc}
    2bae:	0000      	.short	0x0000
    2bb0:	20000bbc 	.word	0x20000bbc
    2bb4:	b538      	push	{r3, r4, r5, lr}
    2bb6:	b1d0      	cbz	r0, 2bee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13a>
    2bb8:	6041      	str	r1, [r0, #4]
    2bba:	f100 0108 	add.w	r1, r0, #8
    2bbe:	700a      	strb	r2, [r1, #0]
    2bc0:	f3ef 8310 	mrs	r3, PRIMASK
    2bc4:	b672      	cpsid	i
    2bc6:	4c10      	ldr	r4, [pc, #64]	; (2c08 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x154>)
    2bc8:	6004      	str	r4, [r0, #0]
    2bca:	1f21      	subs	r1, r4, #4
    2bcc:	684a      	ldr	r2, [r1, #4]
    2bce:	b14a      	cbz	r2, 2be4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    2bd0:	7a12      	ldrb	r2, [r2, #8]
    2bd2:	f88d 2000 	strb.w	r2, [sp]
    2bd6:	9a00      	ldr	r2, [sp, #0]
    2bd8:	9200      	str	r2, [sp, #0]
    2bda:	f89d 5000 	ldrb.w	r5, [sp]
    2bde:	2d01      	cmp	r5, #1
    2be0:	d100      	bne.n	2be4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    2be2:	600c      	str	r4, [r1, #0]
    2be4:	680a      	ldr	r2, [r1, #0]
    2be6:	6010      	str	r0, [r2, #0]
    2be8:	6008      	str	r0, [r1, #0]
    2bea:	b12b      	cbz	r3, 2bf8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    2bec:	e005      	b.n	2bfa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x146>
    2bee:	f240 21e2 	movw	r1, #738	; 0x2e2
    2bf2:	2010      	movs	r0, #16
    2bf4:	f7fd fef0 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bf8:	b662      	cpsie	i
    2bfa:	4804      	ldr	r0, [pc, #16]	; (2c0c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    2bfc:	7800      	ldrb	r0, [r0, #0]
    2bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c02:	f009 b83b 	b.w	bc7c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c06:	0000      	.short	0x0000
    2c08:	20000bc0 	.word	0x20000bc0
    2c0c:	2000036e 	.word	0x2000036e
    2c10:	4808      	ldr	r0, [pc, #32]	; (2c34 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    2c12:	b510      	push	{r4, lr}
    2c14:	2100      	movs	r1, #0
    2c16:	6141      	str	r1, [r0, #20]
    2c18:	6181      	str	r1, [r0, #24]
    2c1a:	61c1      	str	r1, [r0, #28]
    2c1c:	6201      	str	r1, [r0, #32]
    2c1e:	2212      	movs	r2, #18
    2c20:	f00d fc54 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c24:	4803      	ldr	r0, [pc, #12]	; (2c34 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    2c26:	3014      	adds	r0, #20
    2c28:	2101      	movs	r1, #1
    2c2a:	7301      	strb	r1, [r0, #12]
    2c2c:	1d01      	adds	r1, r0, #4
    2c2e:	6041      	str	r1, [r0, #4]
    2c30:	6001      	str	r1, [r0, #0]
    2c32:	bd10      	pop	{r4, pc}
    2c34:	20000ba8 	.word	0x20000ba8

00002c38 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2c38:	b4f0      	push	{r4, r5, r6, r7}
    2c3a:	8150      	strh	r0, [r2, #10]
    2c3c:	890c      	ldrh	r4, [r1, #8]
    2c3e:	4613      	mov	r3, r2
    2c40:	8194      	strh	r4, [r2, #12]
    2c42:	898a      	ldrh	r2, [r1, #12]
    2c44:	81da      	strh	r2, [r3, #14]
    2c46:	8948      	ldrh	r0, [r1, #10]
    2c48:	8218      	strh	r0, [r3, #16]
    2c4a:	89cd      	ldrh	r5, [r1, #14]
    2c4c:	825d      	strh	r5, [r3, #18]
    2c4e:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2c50:	42ae      	cmp	r6, r5
    2c52:	d108      	bne.n	2c66 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c54:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2c56:	4285      	cmp	r5, r0
    2c58:	d105      	bne.n	2c66 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c5a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2c5c:	4295      	cmp	r5, r2
    2c5e:	d102      	bne.n	2c66 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c60:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2c62:	42a2      	cmp	r2, r4
    2c64:	d001      	beq.n	2c6a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2c66:	2201      	movs	r2, #1
    2c68:	e000      	b.n	2c6c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2c6a:	2200      	movs	r2, #0
    2c6c:	751a      	strb	r2, [r3, #20]
    2c6e:	8548      	strh	r0, [r1, #42]	; 0x2a
    2c70:	8a58      	ldrh	r0, [r3, #18]
    2c72:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2c74:	8998      	ldrh	r0, [r3, #12]
    2c76:	8588      	strh	r0, [r1, #44]	; 0x2c
    2c78:	89d8      	ldrh	r0, [r3, #14]
    2c7a:	8608      	strh	r0, [r1, #48]	; 0x30
    2c7c:	bcf0      	pop	{r4, r5, r6, r7}
    2c7e:	2214      	movs	r2, #20
    2c80:	4901      	ldr	r1, [pc, #4]	; (2c88 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2c82:	4618      	mov	r0, r3
    2c84:	f00a bf27 	b.w	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2c88:	0000dcb3 	.word	0x0000dcb3

00002c8c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2c8c:	8150      	strh	r0, [r2, #10]
    2c8e:	8a88      	ldrh	r0, [r1, #20]
    2c90:	8190      	strh	r0, [r2, #12]
    2c92:	8ac8      	ldrh	r0, [r1, #22]
    2c94:	81d0      	strh	r0, [r2, #14]
    2c96:	8b08      	ldrh	r0, [r1, #24]
    2c98:	8210      	strh	r0, [r2, #16]
    2c9a:	8b48      	ldrh	r0, [r1, #26]
    2c9c:	4613      	mov	r3, r2
    2c9e:	8250      	strh	r0, [r2, #18]
    2ca0:	2221      	movs	r2, #33	; 0x21
    2ca2:	4902      	ldr	r1, [pc, #8]	; (2cac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2ca4:	4618      	mov	r0, r3
    2ca6:	f00a bf02 	b.w	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2caa:	0000      	.short	0x0000
    2cac:	0000dce9 	.word	0x0000dce9

00002cb0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb2:	f06f 021f 	mvn.w	r2, #31
    2cb6:	0c01      	lsrs	r1, r0, #16
    2cb8:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2cbc:	251f      	movs	r5, #31
    2cbe:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2cc2:	3854      	subs	r0, #84	; 0x54
    2cc4:	d00d      	beq.n	2ce2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2cc6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2cca:	3855      	subs	r0, #85	; 0x55
    2ccc:	d009      	beq.n	2ce2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2cce:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2cd2:	38aa      	subs	r0, #170	; 0xaa
    2cd4:	d005      	beq.n	2ce2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2cd6:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2cda:	38aa      	subs	r0, #170	; 0xaa
    2cdc:	d001      	beq.n	2ce2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2cde:	2001      	movs	r0, #1
    2ce0:	e000      	b.n	2ce4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2ce2:	2000      	movs	r0, #0
    2ce4:	2200      	movs	r2, #0
    2ce6:	4613      	mov	r3, r2
    2ce8:	ea4f 0402 	mov.w	r4, r2
    2cec:	ea82 0701 	eor.w	r7, r2, r1
    2cf0:	43ff      	mvns	r7, r7
    2cf2:	431f      	orrs	r7, r3
    2cf4:	1c7f      	adds	r7, r7, #1
    2cf6:	d00f      	beq.n	2d18 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2cf8:	f006 0701 	and.w	r7, r6, #1
    2cfc:	0852      	lsrs	r2, r2, #1
    2cfe:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d02:	f005 0701 	and.w	r7, r5, #1
    2d06:	085b      	lsrs	r3, r3, #1
    2d08:	0876      	lsrs	r6, r6, #1
    2d0a:	086d      	lsrs	r5, r5, #1
    2d0c:	1c64      	adds	r4, r4, #1
    2d0e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d12:	2c16      	cmp	r4, #22
    2d14:	d3ea      	bcc.n	2cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d18:	2000      	movs	r0, #0
    2d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d1c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2d1c:	b510      	push	{r4, lr}
    2d1e:	4804      	ldr	r0, [pc, #16]	; (2d30 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2d20:	f00b f846 	bl	ddb0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    2d24:	4802      	ldr	r0, [pc, #8]	; (2d30 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d2a:	3008      	adds	r0, #8
    2d2c:	f00b b840 	b.w	ddb0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    2d30:	200000b4 	.word	0x200000b4

00002d34 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    2d34:	4801      	ldr	r0, [pc, #4]	; (2d3c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    2d36:	f000 b809 	b.w	2d4c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2d3a:	0000      	.short	0x0000
    2d3c:	200000b4 	.word	0x200000b4

00002d40 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2d40:	4801      	ldr	r0, [pc, #4]	; (2d48 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2d42:	f000 b803 	b.w	2d4c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2d46:	0000      	.short	0x0000
    2d48:	200000bc 	.word	0x200000bc
    2d4c:	b510      	push	{r4, lr}
    2d4e:	e9d0 2100 	ldrd	r2, r1, [r0]
    2d52:	4b09      	ldr	r3, [pc, #36]	; (2d78 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2d54:	4c09      	ldr	r4, [pc, #36]	; (2d7c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2d56:	4353      	muls	r3, r2
    2d58:	4354      	muls	r4, r2
    2d5a:	4051      	eors	r1, r2
    2d5c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2d60:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2d64:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2d68:	e9c0 2100 	strd	r2, r1, [r0]
    2d6c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2d70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2d74:	4618      	mov	r0, r3
    2d76:	bd10      	pop	{r4, pc}
    2d78:	c6ef3760 	.word	0xc6ef3760
    2d7c:	9e3779bb 	.word	0x9e3779bb

00002d80 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2d80:	b510      	push	{r4, lr}
    2d82:	6840      	ldr	r0, [r0, #4]
    2d84:	2200      	movs	r2, #0
    2d86:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2d8a:	3080      	adds	r0, #128	; 0x80
    2d8c:	1d09      	adds	r1, r1, #4
    2d8e:	07db      	lsls	r3, r3, #31
    2d90:	d001      	beq.n	2d96 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    2d92:	2001      	movs	r0, #1
    2d94:	bd10      	pop	{r4, pc}
    2d96:	790c      	ldrb	r4, [r1, #4]
    2d98:	680b      	ldr	r3, [r1, #0]
    2d9a:	4909      	ldr	r1, [pc, #36]	; (2dc0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    2d9c:	400b      	ands	r3, r1
    2d9e:	f004 0107 	and.w	r1, r4, #7
    2da2:	66c3      	str	r3, [r0, #108]	; 0x6c
    2da4:	6701      	str	r1, [r0, #112]	; 0x70
    2da6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    2daa:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
    2dae:	1c49      	adds	r1, r1, #1
    2db0:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    2db4:	68c1      	ldr	r1, [r0, #12]
    2db6:	f041 0101 	orr.w	r1, r1, #1
    2dba:	60c1      	str	r1, [r0, #12]
    2dbc:	2000      	movs	r0, #0
    2dbe:	bd10      	pop	{r4, pc}
    2dc0:	3704492f 	.word	0x3704492f

00002dc4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2dc4:	b510      	push	{r4, lr}
    2dc6:	1d04      	adds	r4, r0, #4
    2dc8:	f004 f8c8 	bl	6f5c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2dcc:	4a03      	ldr	r2, [pc, #12]	; (2ddc <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2dce:	f001 0107 	and.w	r1, r1, #7
    2dd2:	4010      	ands	r0, r2
    2dd4:	6020      	str	r0, [r4, #0]
    2dd6:	6061      	str	r1, [r4, #4]
    2dd8:	bd10      	pop	{r4, pc}
    2dda:	0000      	.short	0x0000
    2ddc:	3704492f 	.word	0x3704492f

00002de0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2de4:	7803      	ldrb	r3, [r0, #0]
    2de6:	6840      	ldr	r0, [r0, #4]
    2de8:	1d0f      	adds	r7, r1, #4
    2dea:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2dee:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    2df2:	4606      	mov	r6, r0
    2df4:	f04f 0800 	mov.w	r8, #0
    2df8:	7f6a      	ldrb	r2, [r5, #29]
    2dfa:	2107      	movs	r1, #7
    2dfc:	4628      	mov	r0, r5
    2dfe:	f00a fabf 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e02:	b1b0      	cbz	r0, 2e32 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x52>
    2e04:	6838      	ldr	r0, [r7, #0]
    2e06:	4a15      	ldr	r2, [pc, #84]	; (2e5c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7c>)
    2e08:	7939      	ldrb	r1, [r7, #4]
    2e0a:	4010      	ands	r0, r2
    2e0c:	f001 0107 	and.w	r1, r1, #7
    2e10:	66e8      	str	r0, [r5, #108]	; 0x6c
    2e12:	6729      	str	r1, [r5, #112]	; 0x70
    2e14:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    2e18:	f885 801d 	strb.w	r8, [r5, #29]
    2e1c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2e20:	4640      	mov	r0, r8
    2e22:	f88d 1000 	strb.w	r1, [sp]
    2e26:	9900      	ldr	r1, [sp, #0]
    2e28:	9100      	str	r1, [sp, #0]
    2e2a:	f89d 1000 	ldrb.w	r1, [sp]
    2e2e:	b991      	cbnz	r1, 2e56 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x76>
    2e30:	e002      	b.n	2e38 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    2e32:	2001      	movs	r0, #1
    2e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e38:	8831      	ldrh	r1, [r6, #0]
    2e3a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2e3e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2e42:	6839      	ldr	r1, [r7, #0]
    2e44:	66e1      	str	r1, [r4, #108]	; 0x6c
    2e46:	6879      	ldr	r1, [r7, #4]
    2e48:	6721      	str	r1, [r4, #112]	; 0x70
    2e4a:	2208      	movs	r2, #8
    2e4c:	4904      	ldr	r1, [pc, #16]	; (2e60 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x80>)
    2e4e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2e52:	f00a fe2c 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2e56:	2000      	movs	r0, #0
    2e58:	e7ec      	b.n	2e34 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x54>
    2e5a:	0000      	.short	0x0000
    2e5c:	3704492f 	.word	0x3704492f
    2e60:	0000df1d 	.word	0x0000df1d

00002e64 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2e64:	b570      	push	{r4, r5, r6, lr}
    2e66:	1d0d      	adds	r5, r1, #4
    2e68:	6844      	ldr	r4, [r0, #4]
    2e6a:	f004 f877 	bl	6f5c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e6e:	4a06      	ldr	r2, [pc, #24]	; (2e88 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2e70:	4010      	ands	r0, r2
    2e72:	f001 0207 	and.w	r2, r1, #7
    2e76:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    2e7a:	4001      	ands	r1, r0
    2e7c:	f361 0007 	bfi	r0, r1, #0, #8
    2e80:	6028      	str	r0, [r5, #0]
    2e82:	606a      	str	r2, [r5, #4]
    2e84:	bd70      	pop	{r4, r5, r6, pc}
    2e86:	0000      	.short	0x0000
    2e88:	3704492f 	.word	0x3704492f

00002e8c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    2e8c:	6841      	ldr	r1, [r0, #4]
    2e8e:	b082      	sub	sp, #8
    2e90:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    2e94:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    2e98:	f88d 2000 	strb.w	r2, [sp]
    2e9c:	9a00      	ldr	r2, [sp, #0]
    2e9e:	9200      	str	r2, [sp, #0]
    2ea0:	f89d 2000 	ldrb.w	r2, [sp]
    2ea4:	2a00      	cmp	r2, #0
    2ea6:	d10b      	bne.n	2ec0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    2ea8:	8809      	ldrh	r1, [r1, #0]
    2eaa:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    2eae:	211a      	movs	r1, #26
    2eb0:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    2eb4:	2208      	movs	r2, #8
    2eb6:	4903      	ldr	r1, [pc, #12]	; (2ec4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    2eb8:	3060      	adds	r0, #96	; 0x60
    2eba:	b002      	add	sp, #8
    2ebc:	f00a bdf7 	b.w	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ec0:	b002      	add	sp, #8
    2ec2:	4770      	bx	lr
    2ec4:	0000df1d 	.word	0x0000df1d

00002ec8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2ec8:	b570      	push	{r4, r5, r6, lr}
    2eca:	6844      	ldr	r4, [r0, #4]
    2ecc:	460d      	mov	r5, r1
    2ece:	7803      	ldrb	r3, [r0, #0]
    2ed0:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    2ed4:	3480      	adds	r4, #128	; 0x80
    2ed6:	2600      	movs	r6, #0
    2ed8:	2108      	movs	r1, #8
    2eda:	4620      	mov	r0, r4
    2edc:	f00a fa50 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2ee0:	b920      	cbnz	r0, 2eec <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    2ee2:	7b20      	ldrb	r0, [r4, #12]
    2ee4:	0780      	lsls	r0, r0, #30
    2ee6:	d501      	bpl.n	2eec <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    2ee8:	2001      	movs	r0, #1
    2eea:	bd70      	pop	{r4, r5, r6, pc}
    2eec:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2ef0:	0780      	lsls	r0, r0, #30
    2ef2:	d419      	bmi.n	2f28 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    2ef4:	4628      	mov	r0, r5
    2ef6:	f00a fd76 	bl	d9e6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2efa:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    2efe:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f02:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    2f06:	8868      	ldrh	r0, [r5, #2]
    2f08:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f0c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2f10:	f040 0002 	orr.w	r0, r0, #2
    2f14:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    2f18:	07c0      	lsls	r0, r0, #31
    2f1a:	d009      	beq.n	2f30 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    2f1c:	2203      	movs	r2, #3
    2f1e:	4911      	ldr	r1, [pc, #68]	; (2f64 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    2f20:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    2f24:	f00a fdd7 	bl	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2f28:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2f2c:	07c0      	lsls	r0, r0, #31
    2f2e:	d110      	bne.n	2f52 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    2f30:	68e0      	ldr	r0, [r4, #12]
    2f32:	0781      	lsls	r1, r0, #30
    2f34:	d503      	bpl.n	2f3e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2f36:	214f      	movs	r1, #79	; 0x4f
    2f38:	2040      	movs	r0, #64	; 0x40
    2f3a:	f7fd fd4d 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f3e:	f040 0002 	orr.w	r0, r0, #2
    2f42:	60e0      	str	r0, [r4, #12]
    2f44:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    2f48:	1c40      	adds	r0, r0, #1
    2f4a:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    2f4e:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    2f52:	7f60      	ldrb	r0, [r4, #29]
    2f54:	2801      	cmp	r0, #1
    2f56:	d102      	bne.n	2f5e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    2f58:	7766      	strb	r6, [r4, #29]
    2f5a:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    2f5e:	2000      	movs	r0, #0
    2f60:	bd70      	pop	{r4, r5, r6, pc}
    2f62:	0000      	.short	0x0000
    2f64:	0000df4b 	.word	0x0000df4b

00002f68 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    2f68:	4907      	ldr	r1, [pc, #28]	; (2f88 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    2f6a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    2f6e:	1300      	asrs	r0, r0, #12
    2f70:	7809      	ldrb	r1, [r1, #0]
    2f72:	b240      	sxtb	r0, r0
    2f74:	4249      	negs	r1, r1
    2f76:	b249      	sxtb	r1, r1
    2f78:	4408      	add	r0, r1
    2f7a:	f300 0007 	ssat	r0, #8, r0
    2f7e:	2800      	cmp	r0, #0
    2f80:	dc00      	bgt.n	2f84 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    2f82:	2000      	movs	r0, #0
    2f84:	b2c0      	uxtb	r0, r0
    2f86:	4770      	bx	lr
    2f88:	200000c4 	.word	0x200000c4

00002f8c <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    2f8c:	4a04      	ldr	r2, [pc, #16]	; (2fa0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    2f8e:	6892      	ldr	r2, [r2, #8]
    2f90:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    2f94:	434b      	muls	r3, r1
    2f96:	4342      	muls	r2, r0
    2f98:	eb03 3022 	add.w	r0, r3, r2, asr #12
    2f9c:	4770      	bx	lr
    2f9e:	0000      	.short	0x0000
    2fa0:	200000c4 	.word	0x200000c4

00002fa4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    2fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fa6:	6844      	ldr	r4, [r0, #4]
    2fa8:	4606      	mov	r6, r0
    2faa:	f104 0580 	add.w	r5, r4, #128	; 0x80
    2fae:	f000 f87f 	bl	30b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    2fb2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    2fb6:	2901      	cmp	r1, #1
    2fb8:	d11a      	bne.n	2ff0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    2fba:	2800      	cmp	r0, #0
    2fbc:	d018      	beq.n	2ff0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    2fbe:	6870      	ldr	r0, [r6, #4]
    2fc0:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    2fc4:	f88d 1000 	strb.w	r1, [sp]
    2fc8:	9900      	ldr	r1, [sp, #0]
    2fca:	9100      	str	r1, [sp, #0]
    2fcc:	f89d 1000 	ldrb.w	r1, [sp]
    2fd0:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    2fd4:	2900      	cmp	r1, #0
    2fd6:	d10b      	bne.n	2ff0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    2fd8:	8821      	ldrh	r1, [r4, #0]
    2fda:	8141      	strh	r1, [r0, #10]
    2fdc:	7e69      	ldrb	r1, [r5, #25]
    2fde:	7301      	strb	r1, [r0, #12]
    2fe0:	7ea9      	ldrb	r1, [r5, #26]
    2fe2:	7341      	strb	r1, [r0, #13]
    2fe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2fe8:	221f      	movs	r2, #31
    2fea:	4902      	ldr	r1, [pc, #8]	; (2ff4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    2fec:	f00a bd5f 	b.w	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ff2:	0000      	.short	0x0000
    2ff4:	0000dfed 	.word	0x0000dfed
    2ff8:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    2ffc:	4a0d      	ldr	r2, [pc, #52]	; (3034 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    2ffe:	b510      	push	{r4, lr}
    3000:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3004:	1309      	asrs	r1, r1, #12
    3006:	1300      	asrs	r0, r0, #12
    3008:	b24b      	sxtb	r3, r1
    300a:	f992 4000 	ldrsb.w	r4, [r2]
    300e:	4240      	negs	r0, r0
    3010:	2100      	movs	r1, #0
    3012:	b240      	sxtb	r0, r0
    3014:	42a3      	cmp	r3, r4
    3016:	da02      	bge.n	301e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3018:	f992 1002 	ldrsb.w	r1, [r2, #2]
    301c:	e005      	b.n	302a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    301e:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3022:	42a3      	cmp	r3, r4
    3024:	dd04      	ble.n	3030 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    3026:	f992 1003 	ldrsb.w	r1, [r2, #3]
    302a:	4408      	add	r0, r1
    302c:	f300 0107 	ssat	r1, #8, r0
    3030:	4608      	mov	r0, r1
    3032:	bd10      	pop	{r4, pc}
    3034:	200000c4 	.word	0x200000c4
    3038:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    303c:	2200      	movs	r2, #0
    303e:	704a      	strb	r2, [r1, #1]
    3040:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3044:	700a      	strb	r2, [r1, #0]
    3046:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    304a:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    304e:	f00b ffe8 	bl	f022 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3052:	4606      	mov	r6, r0
    3054:	68a0      	ldr	r0, [r4, #8]
    3056:	f7ff ffcf 	bl	2ff8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    305a:	0007      	movs	r7, r0
    305c:	d021      	beq.n	30a2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    305e:	4620      	mov	r0, r4
    3060:	f00a ffcc 	bl	dffc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3064:	2800      	cmp	r0, #0
    3066:	d01c      	beq.n	30a2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3068:	8828      	ldrh	r0, [r5, #0]
    306a:	4669      	mov	r1, sp
    306c:	f00a f95e 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3070:	b118      	cbz	r0, 307a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3072:	2189      	movs	r1, #137	; 0x89
    3074:	207a      	movs	r0, #122	; 0x7a
    3076:	f7fd fcaf 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    307a:	1c76      	adds	r6, r6, #1
    307c:	b2f1      	uxtb	r1, r6
    307e:	2302      	movs	r3, #2
    3080:	463a      	mov	r2, r7
    3082:	4668      	mov	r0, sp
    3084:	f00b ffec 	bl	f060 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    3088:	2800      	cmp	r0, #0
    308a:	d10a      	bne.n	30a2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    308c:	4806      	ldr	r0, [pc, #24]	; (30a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    308e:	4907      	ldr	r1, [pc, #28]	; (30ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    3090:	7900      	ldrb	r0, [r0, #4]
    3092:	fba0 6501 	umull	r6, r5, r0, r1
    3096:	f007 fbe3 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    309a:	1980      	adds	r0, r0, r6
    309c:	4169      	adcs	r1, r5
    309e:	e9c4 0100 	strd	r0, r1, [r4]
    30a2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    30a6:	0000      	.short	0x0000
    30a8:	200000c4 	.word	0x200000c4
    30ac:	000f4240 	.word	0x000f4240
    30b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30b4:	4607      	mov	r7, r0
    30b6:	f7ff faf1 	bl	269c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    30ba:	687c      	ldr	r4, [r7, #4]
    30bc:	4605      	mov	r5, r0
    30be:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    30c2:	3480      	adds	r4, #128	; 0x80
    30c4:	287f      	cmp	r0, #127	; 0x7f
    30c6:	d03c      	beq.n	3142 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    30c8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    30cc:	687e      	ldr	r6, [r7, #4]
    30ce:	76a0      	strb	r0, [r4, #26]
    30d0:	4629      	mov	r1, r5
    30d2:	68a0      	ldr	r0, [r4, #8]
    30d4:	f7ff ff5a 	bl	2f8c <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    30d8:	60a0      	str	r0, [r4, #8]
    30da:	481b      	ldr	r0, [pc, #108]	; (3148 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    30dc:	7940      	ldrb	r0, [r0, #5]
    30de:	b190      	cbz	r0, 3106 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    30e0:	6878      	ldr	r0, [r7, #4]
    30e2:	f100 0880 	add.w	r8, r0, #128	; 0x80
    30e6:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    30ea:	f7ff ff85 	bl	2ff8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    30ee:	b150      	cbz	r0, 3106 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    30f0:	4640      	mov	r0, r8
    30f2:	f00a ff83 	bl	dffc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    30f6:	b130      	cbz	r0, 3106 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    30f8:	6878      	ldr	r0, [r7, #4]
    30fa:	2231      	movs	r2, #49	; 0x31
    30fc:	4913      	ldr	r1, [pc, #76]	; (314c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    30fe:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    3102:	f00a fce8 	bl	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3106:	f994 001b 	ldrsb.w	r0, [r4, #27]
    310a:	2100      	movs	r1, #0
    310c:	1a28      	subs	r0, r5, r0
    310e:	d500      	bpl.n	3112 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3110:	4240      	negs	r0, r0
    3112:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    3116:	4282      	cmp	r2, r0
    3118:	dc10      	bgt.n	313c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    311a:	2aff      	cmp	r2, #255	; 0xff
    311c:	d00e      	beq.n	313c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    311e:	7f20      	ldrb	r0, [r4, #28]
    3120:	1c40      	adds	r0, r0, #1
    3122:	b2c0      	uxtb	r0, r0
    3124:	7720      	strb	r0, [r4, #28]
    3126:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    312a:	4290      	cmp	r0, r2
    312c:	d802      	bhi.n	3134 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    312e:	7ee0      	ldrb	r0, [r4, #27]
    3130:	287f      	cmp	r0, #127	; 0x7f
    3132:	d103      	bne.n	313c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3134:	2000      	movs	r0, #0
    3136:	76e5      	strb	r5, [r4, #27]
    3138:	7720      	strb	r0, [r4, #28]
    313a:	2101      	movs	r1, #1
    313c:	4608      	mov	r0, r1
    313e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3142:	2000      	movs	r0, #0
    3144:	e7fb      	b.n	313e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    3146:	0000      	.short	0x0000
    3148:	200000c4 	.word	0x200000c4
    314c:	00003039 	.word	0x00003039

00003150 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3150:	b570      	push	{r4, r5, r6, lr}
    3152:	4604      	mov	r4, r0
    3154:	7c00      	ldrb	r0, [r0, #16]
    3156:	b300      	cbz	r0, 319a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3158:	2802      	cmp	r0, #2
    315a:	d01e      	beq.n	319a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    315c:	f05f 0001 	movs.w	r0, #1
    3160:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3164:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3168:	460d      	mov	r5, r1
    316a:	b1c0      	cbz	r0, 319e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    316c:	7de0      	ldrb	r0, [r4, #23]
    316e:	b1f0      	cbz	r0, 31ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3170:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3174:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3178:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    317c:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3180:	7c20      	ldrb	r0, [r4, #16]
    3182:	f00a ff64 	bl	e04e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    3186:	7620      	strb	r0, [r4, #24]
    3188:	2008      	movs	r0, #8
    318a:	7660      	strb	r0, [r4, #25]
    318c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3190:	4629      	mov	r1, r5
    3192:	f00a ff48 	bl	e026 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    3196:	b9a8      	cbnz	r0, 31c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    3198:	e00e      	b.n	31b8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    319a:	2000      	movs	r0, #0
    319c:	e7e0      	b.n	3160 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    319e:	2000      	movs	r0, #0
    31a0:	f7fe fab8 	bl	1714 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    31a4:	2800      	cmp	r0, #0
    31a6:	d1eb      	bne.n	3180 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    31a8:	f240 41b9 	movw	r1, #1209	; 0x4b9
    31ac:	e001      	b.n	31b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    31ae:	f240 41bd 	movw	r1, #1213	; 0x4bd
    31b2:	202d      	movs	r0, #45	; 0x2d
    31b4:	f7fd fc10 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31b8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    31bc:	4629      	mov	r1, r5
    31be:	f00a ff3b 	bl	e038 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    31c2:	b100      	cbz	r0, 31c6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    31c4:	2001      	movs	r0, #1
    31c6:	76a0      	strb	r0, [r4, #26]
    31c8:	7e20      	ldrb	r0, [r4, #24]
    31ca:	b130      	cbz	r0, 31da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    31cc:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    31d0:	f104 0158 	add.w	r1, r4, #88	; 0x58
    31d4:	f00a f876 	bl	d2c4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    31d8:	7660      	strb	r0, [r4, #25]
    31da:	f7ff f87d 	bl	22d8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    31de:	490c      	ldr	r1, [pc, #48]	; (3210 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    31e0:	fba0 2301 	umull	r2, r3, r0, r1
    31e4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    31e8:	f00b f8b6 	bl	e358 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    31ec:	2100      	movs	r1, #0
    31ee:	4620      	mov	r0, r4
    31f0:	f00b f86b 	bl	e2ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    31f4:	2000      	movs	r0, #0
    31f6:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    31fa:	78a0      	ldrb	r0, [r4, #2]
    31fc:	0740      	lsls	r0, r0, #29
    31fe:	d505      	bpl.n	320c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3200:	4620      	mov	r0, r4
    3202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3206:	2100      	movs	r1, #0
    3208:	f000 bdd0 	b.w	3dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    320c:	bd70      	pop	{r4, r5, r6, pc}
    320e:	0000      	.short	0x0000
    3210:	000f4240 	.word	0x000f4240

00003214 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3214:	b530      	push	{r4, r5, lr}
    3216:	460c      	mov	r4, r1
    3218:	b08d      	sub	sp, #52	; 0x34
    321a:	4605      	mov	r5, r0
    321c:	4601      	mov	r1, r0
    321e:	2224      	movs	r2, #36	; 0x24
    3220:	a802      	add	r0, sp, #8
    3222:	f00d f8d9 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3226:	a80b      	add	r0, sp, #44	; 0x2c
    3228:	f00b f8f3 	bl	e412 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    322c:	7aa0      	ldrb	r0, [r4, #10]
    322e:	f88d 0018 	strb.w	r0, [sp, #24]
    3232:	7820      	ldrb	r0, [r4, #0]
    3234:	f88d 0008 	strb.w	r0, [sp, #8]
    3238:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    323c:	f8ad 0000 	strh.w	r0, [sp]
    3240:	f89d 0000 	ldrb.w	r0, [sp]
    3244:	f000 0101 	and.w	r1, r0, #1
    3248:	f3c0 0240 	ubfx	r2, r0, #1, #1
    324c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3250:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3254:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3258:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    325c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3260:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3264:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3268:	f3c0 1240 	ubfx	r2, r0, #5, #1
    326c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3270:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3274:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3278:	f8ad 000a 	strh.w	r0, [sp, #10]
    327c:	7d20      	ldrb	r0, [r4, #20]
    327e:	2801      	cmp	r0, #1
    3280:	d006      	beq.n	3290 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3282:	2802      	cmp	r0, #2
    3284:	d004      	beq.n	3290 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3286:	f240 21ea 	movw	r1, #746	; 0x2ea
    328a:	2006      	movs	r0, #6
    328c:	f7fd fba4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3290:	f88d 000c 	strb.w	r0, [sp, #12]
    3294:	7a61      	ldrb	r1, [r4, #9]
    3296:	a80b      	add	r0, sp, #44	; 0x2c
    3298:	f00b f8a2 	bl	e3e0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    329c:	7d20      	ldrb	r0, [r4, #20]
    329e:	2101      	movs	r1, #1
    32a0:	2802      	cmp	r0, #2
    32a2:	d102      	bne.n	32aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    32a4:	7d60      	ldrb	r0, [r4, #21]
    32a6:	1c40      	adds	r0, r0, #1
    32a8:	b2c1      	uxtb	r1, r0
    32aa:	7ea0      	ldrb	r0, [r4, #26]
    32ac:	1c40      	adds	r0, r0, #1
    32ae:	b2c2      	uxtb	r2, r0
    32b0:	a80b      	add	r0, sp, #44	; 0x2c
    32b2:	f00b f85c 	bl	e36e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    32b6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    32ba:	0700      	lsls	r0, r0, #28
    32bc:	d501      	bpl.n	32c2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    32be:	2000      	movs	r0, #0
    32c0:	e020      	b.n	3304 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    32c2:	a80b      	add	r0, sp, #44	; 0x2c
    32c4:	f00b f865 	bl	e392 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    32c8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    32cc:	2228      	movs	r2, #40	; 0x28
    32ce:	f000 fe11 	bl	3ef4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    32d2:	f240 2171 	movw	r1, #625	; 0x271
    32d6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    32da:	fbb0 f0f1 	udiv	r0, r0, r1
    32de:	4348      	muls	r0, r1
    32e0:	f8d4 1002 	ldr.w	r1, [r4, #2]
    32e4:	f240 2371 	movw	r3, #625	; 0x271
    32e8:	0a0a      	lsrs	r2, r1, #8
    32ea:	f240 2171 	movw	r1, #625	; 0x271
    32ee:	434a      	muls	r2, r1
    32f0:	f8d4 1005 	ldr.w	r1, [r4, #5]
    32f4:	0a09      	lsrs	r1, r1, #8
    32f6:	4359      	muls	r1, r3
    32f8:	4290      	cmp	r0, r2
    32fa:	d801      	bhi.n	3300 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    32fc:	9204      	str	r2, [sp, #16]
    32fe:	e004      	b.n	330a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3300:	4288      	cmp	r0, r1
    3302:	d801      	bhi.n	3308 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3304:	9004      	str	r0, [sp, #16]
    3306:	e000      	b.n	330a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3308:	9104      	str	r1, [sp, #16]
    330a:	7ca0      	ldrb	r0, [r4, #18]
    330c:	f88d 0017 	strb.w	r0, [sp, #23]
    3310:	7e20      	ldrb	r0, [r4, #24]
    3312:	2801      	cmp	r0, #1
    3314:	d000      	beq.n	3318 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    3316:	2000      	movs	r0, #0
    3318:	f88d 0014 	strb.w	r0, [sp, #20]
    331c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    331e:	f009 fe39 	bl	cf94 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3322:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3324:	f009 fede 	bl	d0e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3328:	2224      	movs	r2, #36	; 0x24
    332a:	a902      	add	r1, sp, #8
    332c:	4628      	mov	r0, r5
    332e:	f00d f853 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3332:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3334:	62a8      	str	r0, [r5, #40]	; 0x28
    3336:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    333a:	85a8      	strh	r0, [r5, #44]	; 0x2c
    333c:	7ae0      	ldrb	r0, [r4, #11]
    333e:	b168      	cbz	r0, 335c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3340:	2802      	cmp	r0, #2
    3342:	d00b      	beq.n	335c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3344:	f05f 0001 	movs.w	r0, #1
    3348:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    334c:	68e0      	ldr	r0, [r4, #12]
    334e:	65a8      	str	r0, [r5, #88]	; 0x58
    3350:	8a20      	ldrh	r0, [r4, #16]
    3352:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3356:	b00d      	add	sp, #52	; 0x34
    3358:	2000      	movs	r0, #0
    335a:	bd30      	pop	{r4, r5, pc}
    335c:	2000      	movs	r0, #0
    335e:	e7f3      	b.n	3348 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003360 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3360:	4a0a      	ldr	r2, [pc, #40]	; (338c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3362:	b510      	push	{r4, lr}
    3364:	2100      	movs	r1, #0
    3366:	7011      	strb	r1, [r2, #0]
    3368:	4c09      	ldr	r4, [pc, #36]	; (3390 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    336a:	6060      	str	r0, [r4, #4]
    336c:	f000 f822 	bl	33b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3370:	b110      	cbz	r0, 3378 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3372:	f240 312d 	movw	r1, #813	; 0x32d
    3376:	e004      	b.n	3382 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3378:	68a0      	ldr	r0, [r4, #8]
    337a:	2800      	cmp	r0, #0
    337c:	d104      	bne.n	3388 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    337e:	f44f 714c 	mov.w	r1, #816	; 0x330
    3382:	202d      	movs	r0, #45	; 0x2d
    3384:	f7fd fb28 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3388:	bd10      	pop	{r4, pc}
    338a:	0000      	.short	0x0000
    338c:	20000bcc 	.word	0x20000bcc
    3390:	200000d0 	.word	0x200000d0

00003394 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3394:	4902      	ldr	r1, [pc, #8]	; (33a0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3396:	4801      	ldr	r0, [pc, #4]	; (339c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3398:	6088      	str	r0, [r1, #8]
    339a:	4770      	bx	lr
    339c:	00003edc 	.word	0x00003edc
    33a0:	200000d0 	.word	0x200000d0

000033a4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    33a4:	4902      	ldr	r1, [pc, #8]	; (33b0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    33a6:	6008      	str	r0, [r1, #0]
    33a8:	6889      	ldr	r1, [r1, #8]
    33aa:	6809      	ldr	r1, [r1, #0]
    33ac:	4708      	bx	r1
    33ae:	0000      	.short	0x0000
    33b0:	200000d0 	.word	0x200000d0

000033b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    33b4:	4808      	ldr	r0, [pc, #32]	; (33d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    33b6:	b510      	push	{r4, lr}
    33b8:	7800      	ldrb	r0, [r0, #0]
    33ba:	b110      	cbz	r0, 33c2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    33bc:	240c      	movs	r4, #12
    33be:	4620      	mov	r0, r4
    33c0:	bd10      	pop	{r4, pc}
    33c2:	2400      	movs	r4, #0
    33c4:	2218      	movs	r2, #24
    33c6:	4621      	mov	r1, r4
    33c8:	4803      	ldr	r0, [pc, #12]	; (33d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    33ca:	f00d f87f 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    33ce:	f003 ffe7 	bl	73a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    33d2:	f003 fe0b 	bl	6fec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    33d6:	e7f2      	b.n	33be <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    33d8:	20000bcc 	.word	0x20000bcc

000033dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    33dc:	4904      	ldr	r1, [pc, #16]	; (33f0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    33de:	b510      	push	{r4, lr}
    33e0:	7809      	ldrb	r1, [r1, #0]
    33e2:	2901      	cmp	r1, #1
    33e4:	d101      	bne.n	33ea <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    33e6:	f000 fbb5 	bl	3b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    33ea:	2000      	movs	r0, #0
    33ec:	bd10      	pop	{r4, pc}
    33ee:	0000      	.short	0x0000
    33f0:	20000bcc 	.word	0x20000bcc

000033f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    33f4:	4902      	ldr	r1, [pc, #8]	; (3400 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    33f6:	4801      	ldr	r0, [pc, #4]	; (33fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    33f8:	6008      	str	r0, [r1, #0]
    33fa:	4770      	bx	lr
    33fc:	00003c81 	.word	0x00003c81
    3400:	200000dc 	.word	0x200000dc

00003404 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3404:	b510      	push	{r4, lr}
    3406:	4604      	mov	r4, r0
    3408:	7880      	ldrb	r0, [r0, #2]
    340a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    340e:	b158      	cbz	r0, 3428 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3410:	233c      	movs	r3, #60	; 0x3c
    3412:	22ff      	movs	r2, #255	; 0xff
    3414:	4620      	mov	r0, r4
    3416:	69e1      	ldr	r1, [r4, #28]
    3418:	f000 fbc2 	bl	3ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    341c:	2211      	movs	r2, #17
    341e:	4904      	ldr	r1, [pc, #16]	; (3430 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3420:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3424:	f00a fb43 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3428:	2001      	movs	r0, #1
    342a:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    342e:	bd10      	pop	{r4, pc}
    3430:	0000e263 	.word	0x0000e263
    3434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3438:	000f      	movs	r7, r1
    343a:	4604      	mov	r4, r0
    343c:	d023      	beq.n	3486 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    343e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3442:	4605      	mov	r5, r0
    3444:	f00a ffce 	bl	e3e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3448:	b9b0      	cbnz	r0, 3478 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    344a:	78a0      	ldrb	r0, [r4, #2]
    344c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3450:	b350      	cbz	r0, 34a8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3452:	4628      	mov	r0, r5
    3454:	f00a ff9d 	bl	e392 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3458:	4606      	mov	r6, r0
    345a:	4628      	mov	r0, r5
    345c:	f00a ffc2 	bl	e3e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3460:	1a30      	subs	r0, r6, r0
    3462:	b2c0      	uxtb	r0, r0
    3464:	f00b f813 	bl	e48e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3468:	4601      	mov	r1, r0
    346a:	4835      	ldr	r0, [pc, #212]	; (3540 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    346c:	6842      	ldr	r2, [r0, #4]
    346e:	4411      	add	r1, r2
    3470:	6041      	str	r1, [r0, #4]
    3472:	4628      	mov	r0, r5
    3474:	f00a ffd4 	bl	e420 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3478:	4628      	mov	r0, r5
    347a:	f00a ff96 	bl	e3aa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    347e:	4601      	mov	r1, r0
    3480:	4620      	mov	r0, r4
    3482:	f00a ff5e 	bl	e342 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    3486:	4d2f      	ldr	r5, [pc, #188]	; (3544 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3488:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    348c:	2100      	movs	r1, #0
    348e:	6868      	ldr	r0, [r5, #4]
    3490:	8001      	strh	r1, [r0, #0]
    3492:	f00a febc 	bl	e20e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3496:	8860      	ldrh	r0, [r4, #2]
    3498:	2813      	cmp	r0, #19
    349a:	d013      	beq.n	34c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    349c:	dc09      	bgt.n	34b2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    349e:	2810      	cmp	r0, #16
    34a0:	d036      	beq.n	3510 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    34a2:	2812      	cmp	r0, #18
    34a4:	d109      	bne.n	34ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    34a6:	e031      	b.n	350c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    34a8:	4620      	mov	r0, r4
    34aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    34ae:	f000 bb51 	b.w	3b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    34b2:	2815      	cmp	r0, #21
    34b4:	d00f      	beq.n	34d6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    34b6:	281d      	cmp	r0, #29
    34b8:	d00d      	beq.n	34d6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    34ba:	f240 6172 	movw	r1, #1650	; 0x672
    34be:	202d      	movs	r0, #45	; 0x2d
    34c0:	f7fd fa8a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34c4:	2100      	movs	r1, #0
    34c6:	6868      	ldr	r0, [r5, #4]
    34c8:	f00a f978 	bl	d7bc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    34cc:	2101      	movs	r1, #1
    34ce:	6868      	ldr	r0, [r5, #4]
    34d0:	f00a fe9d 	bl	e20e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    34d4:	e020      	b.n	3518 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    34d6:	2101      	movs	r1, #1
    34d8:	6868      	ldr	r0, [r5, #4]
    34da:	f00a f96f 	bl	d7bc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    34de:	2101      	movs	r1, #1
    34e0:	6868      	ldr	r0, [r5, #4]
    34e2:	f00a fe94 	bl	e20e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    34e6:	b136      	cbz	r6, 34f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    34e8:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    34ec:	6868      	ldr	r0, [r5, #4]
    34ee:	f00a f980 	bl	d7f2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    34f2:	2101      	movs	r1, #1
    34f4:	e006      	b.n	3504 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    34f6:	f104 0158 	add.w	r1, r4, #88	; 0x58
    34fa:	6868      	ldr	r0, [r5, #4]
    34fc:	f00a f979 	bl	d7f2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3500:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3504:	6868      	ldr	r0, [r5, #4]
    3506:	f00a f97a 	bl	d7fe <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    350a:	e005      	b.n	3518 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    350c:	2106      	movs	r1, #6
    350e:	e000      	b.n	3512 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3510:	2102      	movs	r1, #2
    3512:	6868      	ldr	r0, [r5, #4]
    3514:	f00a f952 	bl	d7bc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3518:	4620      	mov	r0, r4
    351a:	f000 fcbd 	bl	3e98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    351e:	8860      	ldrh	r0, [r4, #2]
    3520:	281d      	cmp	r0, #29
    3522:	d007      	beq.n	3534 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3524:	2815      	cmp	r0, #21
    3526:	d005      	beq.n	3534 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3528:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    352c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    352e:	6868      	ldr	r0, [r5, #4]
    3530:	f00a f934 	bl	d79c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3534:	4639      	mov	r1, r7
    3536:	4620      	mov	r0, r4
    3538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    353c:	f000 b9f6 	b.w	392c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    3540:	20000bcc 	.word	0x20000bcc
    3544:	200000d0 	.word	0x200000d0
    3548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    354c:	4d2f      	ldr	r5, [pc, #188]	; (360c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    354e:	4680      	mov	r8, r0
    3550:	7828      	ldrb	r0, [r5, #0]
    3552:	2802      	cmp	r0, #2
    3554:	d005      	beq.n	3562 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3556:	7828      	ldrb	r0, [r5, #0]
    3558:	2803      	cmp	r0, #3
    355a:	d002      	beq.n	3562 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    355c:	f640 512d 	movw	r1, #3373	; 0xd2d
    3560:	e02b      	b.n	35ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3562:	4c2b      	ldr	r4, [pc, #172]	; (3610 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3564:	6826      	ldr	r6, [r4, #0]
    3566:	7b30      	ldrb	r0, [r6, #12]
    3568:	b118      	cbz	r0, 3572 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    356a:	f7ff f897 	bl	269c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    356e:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3572:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3576:	2700      	movs	r7, #0
    3578:	f1b8 0f00 	cmp.w	r8, #0
    357c:	f89c 0000 	ldrb.w	r0, [ip]
    3580:	f000 060f 	and.w	r6, r0, #15
    3584:	d027      	beq.n	35d6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3586:	6821      	ldr	r1, [r4, #0]
    3588:	09c0      	lsrs	r0, r0, #7
    358a:	f101 0351 	add.w	r3, r1, #81	; 0x51
    358e:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3592:	f10c 0109 	add.w	r1, ip, #9
    3596:	f009 fdfd 	bl	d194 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    359a:	b1e0      	cbz	r0, 35d6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    359c:	4639      	mov	r1, r7
    359e:	6860      	ldr	r0, [r4, #4]
    35a0:	f00a f8ec 	bl	d77c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    35a4:	b1b8      	cbz	r0, 35d6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    35a6:	782a      	ldrb	r2, [r5, #0]
    35a8:	6820      	ldr	r0, [r4, #0]
    35aa:	4631      	mov	r1, r6
    35ac:	2a02      	cmp	r2, #2
    35ae:	d007      	beq.n	35c0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    35b0:	782a      	ldrb	r2, [r5, #0]
    35b2:	2a03      	cmp	r2, #3
    35b4:	d004      	beq.n	35c0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    35b6:	f640 5106 	movw	r1, #3334	; 0xd06
    35ba:	202d      	movs	r0, #45	; 0x2d
    35bc:	f7fd fa0c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    35c0:	68a2      	ldr	r2, [r4, #8]
    35c2:	782b      	ldrb	r3, [r5, #0]
    35c4:	6952      	ldr	r2, [r2, #20]
    35c6:	f06f 0607 	mvn.w	r6, #7
    35ca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    35ce:	58d2      	ldr	r2, [r2, r3]
    35d0:	4790      	blx	r2
    35d2:	4606      	mov	r6, r0
    35d4:	e000      	b.n	35d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    35d6:	2601      	movs	r6, #1
    35d8:	7ba8      	ldrb	r0, [r5, #14]
    35da:	b118      	cbz	r0, 35e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    35dc:	f003 fee0 	bl	73a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    35e0:	f003 fd04 	bl	6fec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    35e4:	2e00      	cmp	r6, #0
    35e6:	d00f      	beq.n	3608 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    35e8:	6820      	ldr	r0, [r4, #0]
    35ea:	f00a ff66 	bl	e4ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    35ee:	b130      	cbz	r0, 35fe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    35f0:	f003 fefe 	bl	73f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    35f4:	68a0      	ldr	r0, [r4, #8]
    35f6:	6880      	ldr	r0, [r0, #8]
    35f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    35fc:	4700      	bx	r0
    35fe:	6820      	ldr	r0, [r4, #0]
    3600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3604:	f000 baa6 	b.w	3b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    360c:	20000bcc 	.word	0x20000bcc
    3610:	200000d0 	.word	0x200000d0
    3614:	b510      	push	{r4, lr}
    3616:	2903      	cmp	r1, #3
    3618:	d002      	beq.n	3620 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    361a:	2905      	cmp	r1, #5
    361c:	d10a      	bne.n	3634 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    361e:	e002      	b.n	3626 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3620:	f000 fb92 	bl	3d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x608>
    3624:	e003      	b.n	362e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3626:	4904      	ldr	r1, [pc, #16]	; (3638 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    3628:	6809      	ldr	r1, [r1, #0]
    362a:	b109      	cbz	r1, 3630 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    362c:	4788      	blx	r1
    362e:	b108      	cbz	r0, 3634 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3630:	2000      	movs	r0, #0
    3632:	bd10      	pop	{r4, pc}
    3634:	2001      	movs	r0, #1
    3636:	bd10      	pop	{r4, pc}
    3638:	200000dc 	.word	0x200000dc
    363c:	4a09      	ldr	r2, [pc, #36]	; (3664 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    363e:	0003      	movs	r3, r0
    3640:	6810      	ldr	r0, [r2, #0]
    3642:	d001      	beq.n	3648 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3644:	f000 ba86 	b.w	3b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3648:	2900      	cmp	r1, #0
    364a:	d009      	beq.n	3660 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    364c:	6891      	ldr	r1, [r2, #8]
    364e:	4a06      	ldr	r2, [pc, #24]	; (3668 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3650:	6909      	ldr	r1, [r1, #16]
    3652:	7812      	ldrb	r2, [r2, #0]
    3654:	f06f 030f 	mvn.w	r3, #15
    3658:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    365c:	5889      	ldr	r1, [r1, r2]
    365e:	4708      	bx	r1
    3660:	4770      	bx	lr
    3662:	0000      	.short	0x0000
    3664:	200000d0 	.word	0x200000d0
    3668:	20000bcc 	.word	0x20000bcc
    366c:	b570      	push	{r4, r5, r6, lr}
    366e:	4604      	mov	r4, r0
    3670:	8840      	ldrh	r0, [r0, #2]
    3672:	2810      	cmp	r0, #16
    3674:	d019      	beq.n	36aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    3676:	4d10      	ldr	r5, [pc, #64]	; (36b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    3678:	7ba8      	ldrb	r0, [r5, #14]
    367a:	b120      	cbz	r0, 3686 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    367c:	f003 fcd6 	bl	702c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3680:	2040      	movs	r0, #64	; 0x40
    3682:	f003 fe9b 	bl	73bc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3686:	480d      	ldr	r0, [pc, #52]	; (36bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    3688:	6840      	ldr	r0, [r0, #4]
    368a:	f004 f91d 	bl	78c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    368e:	78a0      	ldrb	r0, [r4, #2]
    3690:	0740      	lsls	r0, r0, #29
    3692:	d404      	bmi.n	369e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3694:	2100      	movs	r1, #0
    3696:	7922      	ldrb	r2, [r4, #4]
    3698:	4608      	mov	r0, r1
    369a:	f004 f99d 	bl	79d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    369e:	2000      	movs	r0, #0
    36a0:	f003 ffc8 	bl	7634 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    36a4:	2002      	movs	r0, #2
    36a6:	7028      	strb	r0, [r5, #0]
    36a8:	bd70      	pop	{r4, r5, r6, pc}
    36aa:	4620      	mov	r0, r4
    36ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36b0:	2101      	movs	r1, #1
    36b2:	f7ff bebf 	b.w	3434 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    36b6:	0000      	.short	0x0000
    36b8:	20000bcc 	.word	0x20000bcc
    36bc:	200000d0 	.word	0x200000d0
    36c0:	b510      	push	{r4, lr}
    36c2:	4c12      	ldr	r4, [pc, #72]	; (370c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x308>)
    36c4:	6820      	ldr	r0, [r4, #0]
    36c6:	f000 f825 	bl	3714 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    36ca:	6820      	ldr	r0, [r4, #0]
    36cc:	f00a fef5 	bl	e4ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    36d0:	2800      	cmp	r0, #0
    36d2:	6820      	ldr	r0, [r4, #0]
    36d4:	d00b      	beq.n	36ee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ea>
    36d6:	490e      	ldr	r1, [pc, #56]	; (3710 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30c>)
    36d8:	780a      	ldrb	r2, [r1, #0]
    36da:	2a02      	cmp	r2, #2
    36dc:	d00b      	beq.n	36f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    36de:	780a      	ldrb	r2, [r1, #0]
    36e0:	2a03      	cmp	r2, #3
    36e2:	d008      	beq.n	36f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    36e4:	f640 4137 	movw	r1, #3127	; 0xc37
    36e8:	202d      	movs	r0, #45	; 0x2d
    36ea:	f7fd f975 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36f2:	f000 ba2f 	b.w	3b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    36f6:	68a2      	ldr	r2, [r4, #8]
    36f8:	7809      	ldrb	r1, [r1, #0]
    36fa:	68d2      	ldr	r2, [r2, #12]
    36fc:	f06f 0307 	mvn.w	r3, #7
    3700:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3704:	5851      	ldr	r1, [r2, r1]
    3706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    370a:	4708      	bx	r1
    370c:	200000d0 	.word	0x200000d0
    3710:	20000bcc 	.word	0x20000bcc
    3714:	b510      	push	{r4, lr}
    3716:	7b01      	ldrb	r1, [r0, #12]
    3718:	b121      	cbz	r1, 3724 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x320>
    371a:	4604      	mov	r4, r0
    371c:	f7fe ffbe 	bl	269c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3720:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3724:	4805      	ldr	r0, [pc, #20]	; (373c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x338>)
    3726:	7b80      	ldrb	r0, [r0, #14]
    3728:	2800      	cmp	r0, #0
    372a:	d005      	beq.n	3738 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x334>
    372c:	f003 fe38 	bl	73a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3734:	f003 bc5a 	b.w	6fec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3738:	bd10      	pop	{r4, pc}
    373a:	0000      	.short	0x0000
    373c:	20000bcc 	.word	0x20000bcc

00003740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    3740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3744:	4d5d      	ldr	r5, [pc, #372]	; (38bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    3746:	4604      	mov	r4, r0
    3748:	b086      	sub	sp, #24
    374a:	7828      	ldrb	r0, [r5, #0]
    374c:	2800      	cmp	r0, #0
    374e:	d14e      	bne.n	37ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3750:	7820      	ldrb	r0, [r4, #0]
    3752:	28ff      	cmp	r0, #255	; 0xff
    3754:	d04b      	beq.n	37ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3756:	f04f 0800 	mov.w	r8, #0
    375a:	f8a5 800c 	strh.w	r8, [r5, #12]
    375e:	f8c5 8004 	str.w	r8, [r5, #4]
    3762:	f885 8001 	strb.w	r8, [r5, #1]
    3766:	f885 8002 	strb.w	r8, [r5, #2]
    376a:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    376e:	4b54      	ldr	r3, [pc, #336]	; (38c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    3770:	4e54      	ldr	r6, [pc, #336]	; (38c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    3772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3774:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    3778:	68b0      	ldr	r0, [r6, #8]
    377a:	6840      	ldr	r0, [r0, #4]
    377c:	9003      	str	r0, [sp, #12]
    377e:	4668      	mov	r0, sp
    3780:	f003 ff2c 	bl	75dc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    3784:	f003 fffa 	bl	777c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    3788:	f004 fa7c 	bl	7c84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    378c:	f003 fe08 	bl	73a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3790:	f003 fc2c 	bl	6fec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3794:	484c      	ldr	r0, [pc, #304]	; (38c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    3796:	f004 f951 	bl	7a3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    379a:	484c      	ldr	r0, [pc, #304]	; (38cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    379c:	f004 f958 	bl	7a50 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    37a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    37a4:	4607      	mov	r7, r0
    37a6:	f00a fe3b 	bl	e420 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    37aa:	4638      	mov	r0, r7
    37ac:	f00a fdfd 	bl	e3aa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    37b0:	4601      	mov	r1, r0
    37b2:	4620      	mov	r0, r4
    37b4:	f00a fdc5 	bl	e342 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    37b8:	f994 000e 	ldrsb.w	r0, [r4, #14]
    37bc:	f004 f862 	bl	7884 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    37c0:	7921      	ldrb	r1, [r4, #4]
    37c2:	2000      	movs	r0, #0
    37c4:	f003 fe9e 	bl	7504 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    37c8:	2101      	movs	r1, #1
    37ca:	60a8      	str	r0, [r5, #8]
    37cc:	b198      	cbz	r0, 37f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    37ce:	f104 0138 	add.w	r1, r4, #56	; 0x38
    37d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    37d4:	f009 fc4d 	bl	d072 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    37d8:	4607      	mov	r7, r0
    37da:	f104 0140 	add.w	r1, r4, #64	; 0x40
    37de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    37e0:	f009 fc4a 	bl	d078 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    37e4:	b14f      	cbz	r7, 37fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    37e6:	f894 1020 	ldrb.w	r1, [r4, #32]
    37ea:	b951      	cbnz	r1, 3802 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    37ec:	e005      	b.n	37fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    37ee:	200c      	movs	r0, #12
    37f0:	b006      	add	sp, #24
    37f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37f6:	7029      	strb	r1, [r5, #0]
    37f8:	e05e      	b.n	38b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    37fa:	b120      	cbz	r0, 3806 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    37fc:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3800:	b108      	cbz	r0, 3806 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    3802:	2701      	movs	r7, #1
    3804:	e000      	b.n	3808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    3806:	2700      	movs	r7, #0
    3808:	7ea0      	ldrb	r0, [r4, #26]
    380a:	b920      	cbnz	r0, 3816 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    380c:	7e20      	ldrb	r0, [r4, #24]
    380e:	b910      	cbnz	r0, 3816 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    3810:	78a0      	ldrb	r0, [r4, #2]
    3812:	0740      	lsls	r0, r0, #29
    3814:	d523      	bpl.n	385e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    3816:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    381a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    381e:	4050      	eors	r0, r2
    3820:	ea70 0101 	orns	r1, r0, r1
    3824:	d006      	beq.n	3834 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    3826:	f007 f81b 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    382a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    382e:	1a80      	subs	r0, r0, r2
    3830:	4199      	sbcs	r1, r3
    3832:	d200      	bcs.n	3836 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    3834:	b19f      	cbz	r7, 385e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    3836:	f7fe fd4f 	bl	22d8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    383a:	4925      	ldr	r1, [pc, #148]	; (38d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    383c:	fba0 2301 	umull	r2, r3, r0, r1
    3840:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3844:	f00a fd88 	bl	e358 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    3848:	2101      	movs	r1, #1
    384a:	4620      	mov	r0, r4
    384c:	f00a fd3d 	bl	e2ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    3850:	78a0      	ldrb	r0, [r4, #2]
    3852:	0740      	lsls	r0, r0, #29
    3854:	d503      	bpl.n	385e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    3856:	2101      	movs	r1, #1
    3858:	4620      	mov	r0, r4
    385a:	f000 faa7 	bl	3dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    385e:	f7fe fd93 	bl	2388 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    3862:	6870      	ldr	r0, [r6, #4]
    3864:	1cc0      	adds	r0, r0, #3
    3866:	f009 fd20 	bl	d2aa <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    386a:	73a8      	strb	r0, [r5, #14]
    386c:	78a0      	ldrb	r0, [r4, #2]
    386e:	07c0      	lsls	r0, r0, #31
    3870:	d022      	beq.n	38b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    3872:	f8cd 8010 	str.w	r8, [sp, #16]
    3876:	20ff      	movs	r0, #255	; 0xff
    3878:	f8cd 8014 	str.w	r8, [sp, #20]
    387c:	73e8      	strb	r0, [r5, #15]
    387e:	69e6      	ldr	r6, [r4, #28]
    3880:	f106 070a 	add.w	r7, r6, #10
    3884:	e013      	b.n	38ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    3886:	9c04      	ldr	r4, [sp, #16]
    3888:	42b4      	cmp	r4, r6
    388a:	d010      	beq.n	38ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    388c:	7a72      	ldrb	r2, [r6, #9]
    388e:	7a60      	ldrb	r0, [r4, #9]
    3890:	463b      	mov	r3, r7
    3892:	f104 010a 	add.w	r1, r4, #10
    3896:	f009 fc7d 	bl	d194 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    389a:	b140      	cbz	r0, 38ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    389c:	78a0      	ldrb	r0, [r4, #2]
    389e:	73e8      	strb	r0, [r5, #15]
    38a0:	f8d4 0003 	ldr.w	r0, [r4, #3]
    38a4:	6128      	str	r0, [r5, #16]
    38a6:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    38aa:	82a8      	strh	r0, [r5, #20]
    38ac:	e004      	b.n	38b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    38ae:	a804      	add	r0, sp, #16
    38b0:	f7fd fad0 	bl	e54 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    38b4:	2800      	cmp	r0, #0
    38b6:	d0e6      	beq.n	3886 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    38b8:	2000      	movs	r0, #0
    38ba:	e799      	b.n	37f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    38bc:	20000bcc 	.word	0x20000bcc
    38c0:	00003ebc 	.word	0x00003ebc
    38c4:	200000d0 	.word	0x200000d0
    38c8:	8e89bed6 	.word	0x8e89bed6
    38cc:	00555555 	.word	0x00555555
    38d0:	000f4240 	.word	0x000f4240
    38d4:	b510      	push	{r4, lr}
    38d6:	4604      	mov	r4, r0
    38d8:	f7ff ff32 	bl	3740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    38dc:	2800      	cmp	r0, #0
    38de:	d108      	bne.n	38f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    38e0:	4804      	ldr	r0, [pc, #16]	; (38f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    38e2:	7800      	ldrb	r0, [r0, #0]
    38e4:	2801      	cmp	r0, #1
    38e6:	d003      	beq.n	38f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    38e8:	2100      	movs	r1, #0
    38ea:	4620      	mov	r0, r4
    38ec:	f7ff fda2 	bl	3434 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    38f0:	2000      	movs	r0, #0
    38f2:	bd10      	pop	{r4, pc}
    38f4:	20000bcc 	.word	0x20000bcc
    38f8:	480a      	ldr	r0, [pc, #40]	; (3924 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    38fa:	b510      	push	{r4, lr}
    38fc:	490a      	ldr	r1, [pc, #40]	; (3928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    38fe:	6804      	ldr	r4, [r0, #0]
    3900:	7808      	ldrb	r0, [r1, #0]
    3902:	2800      	cmp	r0, #0
    3904:	d00d      	beq.n	3922 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    3906:	7808      	ldrb	r0, [r1, #0]
    3908:	2802      	cmp	r0, #2
    390a:	d002      	beq.n	3912 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    390c:	7808      	ldrb	r0, [r1, #0]
    390e:	2803      	cmp	r0, #3
    3910:	d102      	bne.n	3918 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    3912:	4620      	mov	r0, r4
    3914:	f7ff fefe 	bl	3714 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    3918:	4620      	mov	r0, r4
    391a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    391e:	f000 b919 	b.w	3b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3922:	bd10      	pop	{r4, pc}
    3924:	200000d0 	.word	0x200000d0
    3928:	20000bcc 	.word	0x20000bcc
    392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3930:	4604      	mov	r4, r0
    3932:	4829      	ldr	r0, [pc, #164]	; (39d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    3934:	460d      	mov	r5, r1
    3936:	6840      	ldr	r0, [r0, #4]
    3938:	f003 ffc6 	bl	78c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    393c:	4e27      	ldr	r6, [pc, #156]	; (39dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    393e:	2004      	movs	r0, #4
    3940:	7030      	strb	r0, [r6, #0]
    3942:	b355      	cbz	r5, 399a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    3944:	8860      	ldrh	r0, [r4, #2]
    3946:	2810      	cmp	r0, #16
    3948:	d023      	beq.n	3992 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    394a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    394e:	4680      	mov	r8, r0
    3950:	68b5      	ldr	r5, [r6, #8]
    3952:	f00a fd1e 	bl	e392 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3956:	4607      	mov	r7, r0
    3958:	4640      	mov	r0, r8
    395a:	f00a fd43 	bl	e3e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    395e:	1a38      	subs	r0, r7, r0
    3960:	1e40      	subs	r0, r0, #1
    3962:	b2c0      	uxtb	r0, r0
    3964:	8861      	ldrh	r1, [r4, #2]
    3966:	2228      	movs	r2, #40	; 0x28
    3968:	f000 fae4 	bl	3f34 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    396c:	4405      	add	r5, r0
    396e:	78a0      	ldrb	r0, [r4, #2]
    3970:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3974:	b130      	cbz	r0, 3984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    3976:	6870      	ldr	r0, [r6, #4]
    3978:	4405      	add	r5, r0
    397a:	f00a fd8c 	bl	e496 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    397e:	4428      	add	r0, r5
    3980:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    3984:	7922      	ldrb	r2, [r4, #4]
    3986:	4629      	mov	r1, r5
    3988:	2000      	movs	r0, #0
    398a:	f003 ffb3 	bl	78f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    398e:	b920      	cbnz	r0, 399a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    3990:	e00c      	b.n	39ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26c>
    3992:	7921      	ldrb	r1, [r4, #4]
    3994:	2000      	movs	r0, #0
    3996:	f003 fd7b 	bl	7490 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    399a:	8860      	ldrh	r0, [r4, #2]
    399c:	2813      	cmp	r0, #19
    399e:	d011      	beq.n	39c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    39a0:	dc07      	bgt.n	39b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    39a2:	2810      	cmp	r0, #16
    39a4:	d015      	beq.n	39d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x292>
    39a6:	2812      	cmp	r0, #18
    39a8:	d107      	bne.n	39ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    39aa:	e00b      	b.n	39c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    39ac:	f640 51a8 	movw	r1, #3496	; 0xda8
    39b0:	e005      	b.n	39be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27e>
    39b2:	2815      	cmp	r0, #21
    39b4:	d006      	beq.n	39c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    39b6:	281d      	cmp	r0, #29
    39b8:	d004      	beq.n	39c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    39ba:	f640 51bc 	movw	r1, #3516	; 0xdbc
    39be:	202d      	movs	r0, #45	; 0x2d
    39c0:	f7fd f80a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39c4:	7922      	ldrb	r2, [r4, #4]
    39c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39ca:	2101      	movs	r1, #1
    39cc:	2000      	movs	r0, #0
    39ce:	f004 b803 	b.w	79d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    39d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39d6:	0000      	.short	0x0000
    39d8:	200000d0 	.word	0x200000d0
    39dc:	20000bcc 	.word	0x20000bcc
    39e0:	b538      	push	{r3, r4, r5, lr}
    39e2:	4604      	mov	r4, r0
    39e4:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    39e8:	460b      	mov	r3, r1
    39ea:	f88d 0000 	strb.w	r0, [sp]
    39ee:	9800      	ldr	r0, [sp, #0]
    39f0:	9000      	str	r0, [sp, #0]
    39f2:	f89d 0000 	ldrb.w	r0, [sp]
    39f6:	2800      	cmp	r0, #0
    39f8:	d13a      	bne.n	3a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    39fa:	7820      	ldrb	r0, [r4, #0]
    39fc:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    3a00:	2bff      	cmp	r3, #255	; 0xff
    3a02:	d010      	beq.n	3a26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e6>
    3a04:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    3a08:	1e51      	subs	r1, r2, #1
    3a0a:	4618      	mov	r0, r3
    3a0c:	f7fe fc38 	bl	2280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3a10:	b130      	cbz	r0, 3a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e0>
    3a12:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    3a16:	f040 0002 	orr.w	r0, r0, #2
    3a1a:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3a1e:	e011      	b.n	3a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    3a20:	f241 0108 	movw	r1, #4104	; 0x1008
    3a24:	e021      	b.n	3a6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    3a26:	4813      	ldr	r0, [pc, #76]	; (3a74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    3a28:	6840      	ldr	r0, [r0, #4]
    3a2a:	7801      	ldrb	r1, [r0, #0]
    3a2c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3a30:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    3a34:	f8d0 1003 	ldr.w	r1, [r0, #3]
    3a38:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    3a3c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3a40:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    3a44:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    3a48:	287f      	cmp	r0, #127	; 0x7f
    3a4a:	d00c      	beq.n	3a66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    3a4c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    3a50:	207f      	movs	r0, #127	; 0x7f
    3a52:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3a56:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    3a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3a5e:	2220      	movs	r2, #32
    3a60:	4905      	ldr	r1, [pc, #20]	; (3a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>)
    3a62:	f00a b824 	b.w	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3a66:	f640 616c 	movw	r1, #3692	; 0xe6c
    3a6a:	202d      	movs	r0, #45	; 0x2d
    3a6c:	f7fc ffb4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a70:	bd38      	pop	{r3, r4, r5, pc}
    3a72:	0000      	.short	0x0000
    3a74:	200000d0 	.word	0x200000d0
    3a78:	0000e2b3 	.word	0x0000e2b3
    3a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a80:	4690      	mov	r8, r2
    3a82:	460e      	mov	r6, r1
    3a84:	4604      	mov	r4, r0
    3a86:	2903      	cmp	r1, #3
    3a88:	d004      	beq.n	3a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    3a8a:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3a8e:	b108      	cbz	r0, 3a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    3a90:	2001      	movs	r0, #1
    3a92:	e000      	b.n	3a96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    3a94:	2000      	movs	r0, #0
    3a96:	4681      	mov	r9, r0
    3a98:	f003 fc9c 	bl	73d4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    3a9c:	4605      	mov	r5, r0
    3a9e:	2e03      	cmp	r6, #3
    3aa0:	d003      	beq.n	3aaa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36a>
    3aa2:	2701      	movs	r7, #1
    3aa4:	2e05      	cmp	r6, #5
    3aa6:	d005      	beq.n	3ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x374>
    3aa8:	e008      	b.n	3abc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37c>
    3aaa:	78a0      	ldrb	r0, [r4, #2]
    3aac:	2702      	movs	r7, #2
    3aae:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3ab2:	e001      	b.n	3ab8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    3ab4:	78a0      	ldrb	r0, [r4, #2]
    3ab6:	07c0      	lsls	r0, r0, #31
    3ab8:	2800      	cmp	r0, #0
    3aba:	d042      	beq.n	3b42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    3abc:	f1b9 0f00 	cmp.w	r9, #0
    3ac0:	d13e      	bne.n	3b40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    3ac2:	4822      	ldr	r0, [pc, #136]	; (3b4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>)
    3ac4:	7b80      	ldrb	r0, [r0, #14]
    3ac6:	b140      	cbz	r0, 3ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    3ac8:	f009 fbf2 	bl	d2b0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3acc:	f888 0000 	strb.w	r0, [r8]
    3ad0:	28ff      	cmp	r0, #255	; 0xff
    3ad2:	d002      	beq.n	3ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    3ad4:	f7fe fbee 	bl	22b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    3ad8:	4305      	orrs	r5, r0
    3ada:	4e1d      	ldr	r6, [pc, #116]	; (3b50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>)
    3adc:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    3ae0:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3ae4:	6871      	ldr	r1, [r6, #4]
    3ae6:	f811 0b03 	ldrb.w	r0, [r1], #3
    3aea:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3aee:	f009 fb51 	bl	d194 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3af2:	f898 1000 	ldrb.w	r1, [r8]
    3af6:	29ff      	cmp	r1, #255	; 0xff
    3af8:	d004      	beq.n	3b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    3afa:	b990      	cbnz	r0, 3b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    3afc:	7e60      	ldrb	r0, [r4, #25]
    3afe:	4288      	cmp	r0, r1
    3b00:	d00f      	beq.n	3b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    3b02:	e008      	b.n	3b16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    3b04:	b138      	cbz	r0, 3b16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    3b06:	6871      	ldr	r1, [r6, #4]
    3b08:	f811 0b03 	ldrb.w	r0, [r1], #3
    3b0c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3b10:	f00a fb86 	bl	e220 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    3b14:	b128      	cbz	r0, 3b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    3b16:	2000      	movs	r0, #0
    3b18:	78a1      	ldrb	r1, [r4, #2]
    3b1a:	0749      	lsls	r1, r1, #29
    3b1c:	d503      	bpl.n	3b26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e6>
    3b1e:	b990      	cbnz	r0, 3b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3b20:	e00e      	b.n	3b40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    3b22:	2001      	movs	r0, #1
    3b24:	e7f8      	b.n	3b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    3b26:	b975      	cbnz	r5, 3b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3b28:	7be0      	ldrb	r0, [r4, #15]
    3b2a:	b108      	cbz	r0, 3b30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    3b2c:	42b8      	cmp	r0, r7
    3b2e:	d107      	bne.n	3b40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    3b30:	6871      	ldr	r1, [r6, #4]
    3b32:	f811 0b03 	ldrb.w	r0, [r1], #3
    3b36:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3b3a:	f00a fb71 	bl	e220 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    3b3e:	b110      	cbz	r0, 3b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3b40:	2000      	movs	r0, #0
    3b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b46:	2001      	movs	r0, #1
    3b48:	e7fb      	b.n	3b42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    3b4a:	0000      	.short	0x0000
    3b4c:	20000bcc 	.word	0x20000bcc
    3b50:	200000d0 	.word	0x200000d0
    3b54:	b570      	push	{r4, r5, r6, lr}
    3b56:	4604      	mov	r4, r0
    3b58:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    3b5a:	4d10      	ldr	r5, [pc, #64]	; (3b9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>)
    3b5c:	1c40      	adds	r0, r0, #1
    3b5e:	8620      	strh	r0, [r4, #48]	; 0x30
    3b60:	7ba8      	ldrb	r0, [r5, #14]
    3b62:	2600      	movs	r6, #0
    3b64:	b120      	cbz	r0, 3b70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    3b66:	f003 fc1b 	bl	73a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3b6a:	f003 fa3f 	bl	6fec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3b6e:	73ae      	strb	r6, [r5, #14]
    3b70:	702e      	strb	r6, [r5, #0]
    3b72:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    3b76:	b108      	cbz	r0, 3b7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    3b78:	2101      	movs	r1, #1
    3b7a:	e00a      	b.n	3b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x452>
    3b7c:	7b60      	ldrb	r0, [r4, #13]
    3b7e:	b138      	cbz	r0, 3b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    3b80:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    3b82:	4288      	cmp	r0, r1
    3b84:	d804      	bhi.n	3b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    3b86:	2101      	movs	r1, #1
    3b88:	4620      	mov	r0, r4
    3b8a:	f00a fca8 	bl	e4de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3b8e:	bd70      	pop	{r4, r5, r6, pc}
    3b90:	2100      	movs	r1, #0
    3b92:	4620      	mov	r0, r4
    3b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3b98:	f00a bca1 	b.w	e4de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3b9c:	20000bcc 	.word	0x20000bcc
    3ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ba4:	4604      	mov	r4, r0
    3ba6:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    3baa:	8808      	ldrh	r0, [r1, #0]
    3bac:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    3bb0:	20ff      	movs	r0, #255	; 0xff
    3bb2:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    3bb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3bba:	4616      	mov	r6, r2
    3bbc:	460d      	mov	r5, r1
    3bbe:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d14b      	bne.n	3c5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    3bc6:	6928      	ldr	r0, [r5, #16]
    3bc8:	f009 fbc1 	bl	d34e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3bcc:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    3bd0:	8b28      	ldrh	r0, [r5, #24]
    3bd2:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    3bd6:	8b68      	ldrh	r0, [r5, #26]
    3bd8:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    3bdc:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    3be0:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    3be4:	7e20      	ldrb	r0, [r4, #24]
    3be6:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3bea:	460f      	mov	r7, r1
    3bec:	2500      	movs	r5, #0
    3bee:	b120      	cbz	r0, 3bfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    3bf0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3bf4:	f00a fa20 	bl	e038 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    3bf8:	b940      	cbnz	r0, 3c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    3bfa:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    3bfe:	b170      	cbz	r0, 3c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    3c00:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3c04:	4639      	mov	r1, r7
    3c06:	f00a fa0e 	bl	e026 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    3c0a:	b140      	cbz	r0, 3c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    3c0c:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    3c10:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    3c14:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    3c18:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    3c1c:	e003      	b.n	3c26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e6>
    3c1e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    3c22:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    3c26:	4815      	ldr	r0, [pc, #84]	; (3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x53c>)
    3c28:	2eff      	cmp	r6, #255	; 0xff
    3c2a:	6840      	ldr	r0, [r0, #4]
    3c2c:	7801      	ldrb	r1, [r0, #0]
    3c2e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3c32:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    3c36:	f850 1f03 	ldr.w	r1, [r0, #3]!
    3c3a:	d017      	beq.n	3c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    3c3c:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    3c40:	8880      	ldrh	r0, [r0, #4]
    3c42:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    3c46:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    3c4a:	1e51      	subs	r1, r2, #1
    3c4c:	4630      	mov	r0, r6
    3c4e:	f7fe fb17 	bl	2280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3c52:	b130      	cbz	r0, 3c62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x522>
    3c54:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    3c58:	f040 0002 	orr.w	r0, r0, #2
    3c5c:	7020      	strb	r0, [r4, #0]
    3c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c62:	f640 418b 	movw	r1, #3211	; 0xc8b
    3c66:	202d      	movs	r0, #45	; 0x2d
    3c68:	f7fc feb6 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c6c:	f844 1f7a 	str.w	r1, [r4, #122]!
    3c70:	8880      	ldrh	r0, [r0, #4]
    3c72:	80a0      	strh	r0, [r4, #4]
    3c74:	60e5      	str	r5, [r4, #12]
    3c76:	8225      	strh	r5, [r4, #16]
    3c78:	e7f1      	b.n	3c5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    3c7a:	0000      	.short	0x0000
    3c7c:	200000d0 	.word	0x200000d0
    3c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c82:	4604      	mov	r4, r0
    3c84:	20ff      	movs	r0, #255	; 0xff
    3c86:	f88d 0000 	strb.w	r0, [sp]
    3c8a:	2601      	movs	r6, #1
    3c8c:	466a      	mov	r2, sp
    3c8e:	2105      	movs	r1, #5
    3c90:	4620      	mov	r0, r4
    3c92:	f7ff fef3 	bl	3a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    3c96:	b160      	cbz	r0, 3cb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x572>
    3c98:	4d28      	ldr	r5, [pc, #160]	; (3d3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    3c9a:	4f27      	ldr	r7, [pc, #156]	; (3d38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    3c9c:	6869      	ldr	r1, [r5, #4]
    3c9e:	7bfa      	ldrb	r2, [r7, #15]
    3ca0:	f107 0310 	add.w	r3, r7, #16
    3ca4:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ca8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3cac:	f009 fa72 	bl	d194 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3cb0:	b110      	cbz	r0, 3cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    3cb2:	2600      	movs	r6, #0
    3cb4:	4630      	mov	r0, r6
    3cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cb8:	686a      	ldr	r2, [r5, #4]
    3cba:	69e0      	ldr	r0, [r4, #28]
    3cbc:	7812      	ldrb	r2, [r2, #0]
    3cbe:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    3cc2:	f3c2 1240 	ubfx	r2, r2, #5, #1
    3cc6:	4011      	ands	r1, r2
    3cc8:	7001      	strb	r1, [r0, #0]
    3cca:	2201      	movs	r2, #1
    3ccc:	4620      	mov	r0, r4
    3cce:	69e1      	ldr	r1, [r4, #28]
    3cd0:	f000 f89a 	bl	3e08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c8>
    3cd4:	2300      	movs	r3, #0
    3cd6:	f89d 2000 	ldrb.w	r2, [sp]
    3cda:	4620      	mov	r0, r4
    3cdc:	69e1      	ldr	r1, [r4, #28]
    3cde:	f7ff ff5f 	bl	3ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    3ce2:	2211      	movs	r2, #17
    3ce4:	4916      	ldr	r1, [pc, #88]	; (3d40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>)
    3ce6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3cea:	f009 fee0 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3cee:	69e0      	ldr	r0, [r4, #28]
    3cf0:	2205      	movs	r2, #5
    3cf2:	8801      	ldrh	r1, [r0, #0]
    3cf4:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    3cf8:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    3cfc:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    3d00:	4910      	ldr	r1, [pc, #64]	; (3d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x604>)
    3d02:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    3d06:	f009 fed2 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3d0a:	2100      	movs	r1, #0
    3d0c:	69e0      	ldr	r0, [r4, #28]
    3d0e:	7039      	strb	r1, [r7, #0]
    3d10:	460a      	mov	r2, r1
    3d12:	4621      	mov	r1, r4
    3d14:	f000 fa86 	bl	4224 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    3d18:	6868      	ldr	r0, [r5, #4]
    3d1a:	69e1      	ldr	r1, [r4, #28]
    3d1c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    3d20:	f841 2f03 	str.w	r2, [r1, #3]!
    3d24:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    3d28:	808a      	strh	r2, [r1, #4]
    3d2a:	7800      	ldrb	r0, [r0, #0]
    3d2c:	69e1      	ldr	r1, [r4, #28]
    3d2e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3d32:	7088      	strb	r0, [r1, #2]
    3d34:	e7be      	b.n	3cb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    3d36:	0000      	.short	0x0000
    3d38:	20000bcc 	.word	0x20000bcc
    3d3c:	200000d0 	.word	0x200000d0
    3d40:	0000e263 	.word	0x0000e263
    3d44:	0000e253 	.word	0x0000e253
    3d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d4a:	4604      	mov	r4, r0
    3d4c:	20ff      	movs	r0, #255	; 0xff
    3d4e:	f88d 0000 	strb.w	r0, [sp]
    3d52:	2501      	movs	r5, #1
    3d54:	466a      	mov	r2, sp
    3d56:	2103      	movs	r1, #3
    3d58:	4620      	mov	r0, r4
    3d5a:	f7ff fe8f 	bl	3a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    3d5e:	b1e8      	cbz	r0, 3d9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    3d60:	7b20      	ldrb	r0, [r4, #12]
    3d62:	b120      	cbz	r0, 3d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62e>
    3d64:	f89d 1000 	ldrb.w	r1, [sp]
    3d68:	4620      	mov	r0, r4
    3d6a:	f7ff fe39 	bl	39e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    3d6e:	4e0d      	ldr	r6, [pc, #52]	; (3da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x664>)
    3d70:	2100      	movs	r1, #0
    3d72:	6870      	ldr	r0, [r6, #4]
    3d74:	8001      	strh	r1, [r0, #0]
    3d76:	2104      	movs	r1, #4
    3d78:	f009 fd20 	bl	d7bc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3d7c:	4620      	mov	r0, r4
    3d7e:	f000 f88b 	bl	3e98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    3d82:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    3d86:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3d88:	6870      	ldr	r0, [r6, #4]
    3d8a:	f009 fd4e 	bl	d82a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    3d8e:	4906      	ldr	r1, [pc, #24]	; (3da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x668>)
    3d90:	2005      	movs	r0, #5
    3d92:	7008      	strb	r0, [r1, #0]
    3d94:	6870      	ldr	r0, [r6, #4]
    3d96:	f003 fd97 	bl	78c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3d9a:	e000      	b.n	3d9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65e>
    3d9c:	2500      	movs	r5, #0
    3d9e:	4628      	mov	r0, r5
    3da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3da2:	0000      	.short	0x0000
    3da4:	200000d0 	.word	0x200000d0
    3da8:	20000bcc 	.word	0x20000bcc
    3dac:	b570      	push	{r4, r5, r6, lr}
    3dae:	4604      	mov	r4, r0
    3db0:	460e      	mov	r6, r1
    3db2:	7e40      	ldrb	r0, [r0, #25]
    3db4:	f7fe fa3e 	bl	2234 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3db8:	0005      	movs	r5, r0
    3dba:	d019      	beq.n	3df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    3dbc:	2110      	movs	r1, #16
    3dbe:	f009 fc47 	bl	d650 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3dc2:	2800      	cmp	r0, #0
    3dc4:	d114      	bne.n	3df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    3dc6:	2001      	movs	r0, #1
    3dc8:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3dcc:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3dd0:	4632      	mov	r2, r6
    3dd2:	460c      	mov	r4, r1
    3dd4:	4628      	mov	r0, r5
    3dd6:	f009 fa0d 	bl	d1f4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3dda:	4621      	mov	r1, r4
    3ddc:	4c05      	ldr	r4, [pc, #20]	; (3df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    3dde:	6860      	ldr	r0, [r4, #4]
    3de0:	f009 fd07 	bl	d7f2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3de4:	6860      	ldr	r0, [r4, #4]
    3de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3dea:	2101      	movs	r1, #1
    3dec:	f009 bd07 	b.w	d7fe <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3df0:	bd70      	pop	{r4, r5, r6, pc}
    3df2:	0000      	.short	0x0000
    3df4:	200000d0 	.word	0x200000d0
    3df8:	4802      	ldr	r0, [pc, #8]	; (3e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>)
    3dfa:	2101      	movs	r1, #1
    3dfc:	6800      	ldr	r0, [r0, #0]
    3dfe:	f7ff bb19 	b.w	3434 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3e02:	0000      	.short	0x0000
    3e04:	200000d0 	.word	0x200000d0
    3e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e0c:	4e21      	ldr	r6, [pc, #132]	; (3e94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x754>)
    3e0e:	4680      	mov	r8, r0
    3e10:	460c      	mov	r4, r1
    3e12:	6870      	ldr	r0, [r6, #4]
    3e14:	4615      	mov	r5, r2
    3e16:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    3e1a:	6161      	str	r1, [r4, #20]
    3e1c:	6841      	ldr	r1, [r0, #4]
    3e1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3e22:	61e1      	str	r1, [r4, #28]
    3e24:	8940      	ldrh	r0, [r0, #10]
    3e26:	f009 fa8e 	bl	d346 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    3e2a:	4607      	mov	r7, r0
    3e2c:	6120      	str	r0, [r4, #16]
    3e2e:	6870      	ldr	r0, [r6, #4]
    3e30:	4639      	mov	r1, r7
    3e32:	7d80      	ldrb	r0, [r0, #22]
    3e34:	f009 fc03 	bl	d63e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    3e38:	84a0      	strh	r0, [r4, #36]	; 0x24
    3e3a:	6870      	ldr	r0, [r6, #4]
    3e3c:	4639      	mov	r1, r7
    3e3e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    3e42:	f009 fbf8 	bl	d636 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    3e46:	6220      	str	r0, [r4, #32]
    3e48:	6870      	ldr	r0, [r6, #4]
    3e4a:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    3e4e:	8321      	strh	r1, [r4, #24]
    3e50:	8841      	ldrh	r1, [r0, #2]
    3e52:	8361      	strh	r1, [r4, #26]
    3e54:	6841      	ldr	r1, [r0, #4]
    3e56:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    3e5a:	7a01      	ldrb	r1, [r0, #8]
    3e5c:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    3e60:	7a41      	ldrb	r1, [r0, #9]
    3e62:	f001 011f 	and.w	r1, r1, #31
    3e66:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    3e6a:	7a40      	ldrb	r0, [r0, #9]
    3e6c:	0940      	lsrs	r0, r0, #5
    3e6e:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    3e72:	f104 0062 	add.w	r0, r4, #98	; 0x62
    3e76:	7205      	strb	r5, [r0, #8]
    3e78:	7245      	strb	r5, [r0, #9]
    3e7a:	21ff      	movs	r1, #255	; 0xff
    3e7c:	7281      	strb	r1, [r0, #10]
    3e7e:	2100      	movs	r1, #0
    3e80:	3836      	subs	r0, #54	; 0x36
    3e82:	f009 fec3 	bl	dc0c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    3e86:	f898 000e 	ldrb.w	r0, [r8, #14]
    3e8a:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    3e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e92:	0000      	.short	0x0000
    3e94:	200000d0 	.word	0x200000d0
    3e98:	b570      	push	{r4, r5, r6, lr}
    3e9a:	4d07      	ldr	r5, [pc, #28]	; (3eb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x778>)
    3e9c:	4604      	mov	r4, r0
    3e9e:	f100 0151 	add.w	r1, r0, #81	; 0x51
    3ea2:	6868      	ldr	r0, [r5, #4]
    3ea4:	f009 fcb2 	bl	d80c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3ea8:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    3eac:	6868      	ldr	r0, [r5, #4]
    3eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3eb2:	f009 bcb1 	b.w	d818 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3eb6:	0000      	.short	0x0000
    3eb8:	200000d0 	.word	0x200000d0
    3ebc:	000036c1 	.word	0x000036c1
    3ec0:	00003549 	.word	0x00003549
    3ec4:	0000363d 	.word	0x0000363d
    3ec8:	00000000 	.word	0x00000000
    3ecc:	00003615 	.word	0x00003615
    3ed0:	0000366d 	.word	0x0000366d
    3ed4:	0000e247 	.word	0x0000e247
    3ed8:	0000e24d 	.word	0x0000e24d
    3edc:	000038d5 	.word	0x000038d5
    3ee0:	000038f9 	.word	0x000038f9
    3ee4:	00003df9 	.word	0x00003df9
    3ee8:	00003ed8 	.word	0x00003ed8
    3eec:	00003ed0 	.word	0x00003ed0
    3ef0:	00003ecc 	.word	0x00003ecc

00003ef4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    3ef4:	b510      	push	{r4, lr}
    3ef6:	1e42      	subs	r2, r0, #1
    3ef8:	2a02      	cmp	r2, #2
    3efa:	d901      	bls.n	3f00 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    3efc:	21ca      	movs	r1, #202	; 0xca
    3efe:	e009      	b.n	3f14 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    3f00:	1e40      	subs	r0, r0, #1
    3f02:	2910      	cmp	r1, #16
    3f04:	d009      	beq.n	3f1a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    3f06:	2912      	cmp	r1, #18
    3f08:	d00c      	beq.n	3f24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    3f0a:	2913      	cmp	r1, #19
    3f0c:	d00a      	beq.n	3f24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    3f0e:	2915      	cmp	r1, #21
    3f10:	d005      	beq.n	3f1e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    3f12:	21d8      	movs	r1, #216	; 0xd8
    3f14:	202f      	movs	r0, #47	; 0x2f
    3f16:	f7fc fd5f 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f1a:	4905      	ldr	r1, [pc, #20]	; (3f30 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    3f1c:	e004      	b.n	3f28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    3f1e:	4904      	ldr	r1, [pc, #16]	; (3f30 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    3f20:	1d89      	adds	r1, r1, #6
    3f22:	e001      	b.n	3f28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    3f24:	4902      	ldr	r1, [pc, #8]	; (3f30 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    3f26:	1f89      	subs	r1, r1, #6
    3f28:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3f2c:	bd10      	pop	{r4, pc}
    3f2e:	0000      	.short	0x0000
    3f30:	0000e4ae 	.word	0x0000e4ae

00003f34 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    3f34:	1e42      	subs	r2, r0, #1
    3f36:	b510      	push	{r4, lr}
    3f38:	b2d2      	uxtb	r2, r2
    3f3a:	2a01      	cmp	r2, #1
    3f3c:	d903      	bls.n	3f46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    3f3e:	291d      	cmp	r1, #29
    3f40:	d001      	beq.n	3f46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    3f42:	21ee      	movs	r1, #238	; 0xee
    3f44:	e00d      	b.n	3f62 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    3f46:	2913      	cmp	r1, #19
    3f48:	d013      	beq.n	3f72 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    3f4a:	dc04      	bgt.n	3f56 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    3f4c:	2910      	cmp	r1, #16
    3f4e:	d00b      	beq.n	3f68 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    3f50:	2912      	cmp	r1, #18
    3f52:	d104      	bne.n	3f5e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    3f54:	e00d      	b.n	3f72 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    3f56:	2915      	cmp	r1, #21
    3f58:	d008      	beq.n	3f6c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    3f5a:	291d      	cmp	r1, #29
    3f5c:	d00e      	beq.n	3f7c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    3f5e:	f44f 7181 	mov.w	r1, #258	; 0x102
    3f62:	202f      	movs	r0, #47	; 0x2f
    3f64:	f7fc fd38 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f68:	4807      	ldr	r0, [pc, #28]	; (3f88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    3f6a:	e004      	b.n	3f76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    3f6c:	4806      	ldr	r0, [pc, #24]	; (3f88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    3f6e:	3008      	adds	r0, #8
    3f70:	e001      	b.n	3f76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    3f72:	4805      	ldr	r0, [pc, #20]	; (3f88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    3f74:	1d00      	adds	r0, r0, #4
    3f76:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    3f7a:	bd10      	pop	{r4, pc}
    3f7c:	f240 315a 	movw	r1, #858	; 0x35a
    3f80:	fb10 f001 	smulbb	r0, r0, r1
    3f84:	bd10      	pop	{r4, pc}
    3f86:	0000      	.short	0x0000
    3f88:	0000e49c 	.word	0x0000e49c

00003f8c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    3f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f90:	4604      	mov	r4, r0
    3f92:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    3f96:	4616      	mov	r6, r2
    3f98:	460f      	mov	r7, r1
    3f9a:	2800      	cmp	r0, #0
    3f9c:	d15e      	bne.n	405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>
    3f9e:	4621      	mov	r1, r4
    3fa0:	484d      	ldr	r0, [pc, #308]	; (40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>)
    3fa2:	f006 fa4d 	bl	a440 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    3fa6:	4605      	mov	r5, r0
    3fa8:	2820      	cmp	r0, #32
    3faa:	d057      	beq.n	405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>
    3fac:	2250      	movs	r2, #80	; 0x50
    3fae:	2100      	movs	r1, #0
    3fb0:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    3fb4:	f00c fa8a 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3fb8:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    3fbc:	2501      	movs	r5, #1
    3fbe:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    3fc2:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    3fc6:	b137      	cbz	r7, 3fd6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    3fc8:	f7fe feba 	bl	2d40 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    3fcc:	f000 0007 	and.w	r0, r0, #7
    3fd0:	1c40      	adds	r0, r0, #1
    3fd2:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    3fd6:	4620      	mov	r0, r4
    3fd8:	f00a fc1e 	bl	e818 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    3fdc:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    3fe0:	2002      	movs	r0, #2
    3fe2:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    3fe6:	46a8      	mov	r8, r5
    3fe8:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    3fec:	2500      	movs	r5, #0
    3fee:	f804 5fe8 	strb.w	r5, [r4, #232]!
    3ff2:	f007 fbb1 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    3ff6:	4607      	mov	r7, r0
    3ff8:	f00c f864 	bl	100c4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    3ffc:	8921      	ldrh	r1, [r4, #8]
    3ffe:	3ce8      	subs	r4, #232	; 0xe8
    4000:	4288      	cmp	r0, r1
    4002:	d800      	bhi.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
    4004:	4608      	mov	r0, r1
    4006:	4438      	add	r0, r7
    4008:	30cc      	adds	r0, #204	; 0xcc
    400a:	b287      	uxth	r7, r0
    400c:	4620      	mov	r0, r4
    400e:	f00a f8c6 	bl	e19e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    4012:	b330      	cbz	r0, 4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    4014:	f00b ff5c 	bl	fed0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4018:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    401c:	b281      	uxth	r1, r0
    401e:	4630      	mov	r0, r6
    4020:	f007 fcba 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4024:	4430      	add	r0, r6
    4026:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    402a:	3490      	adds	r4, #144	; 0x90
    402c:	f006 fc18 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4030:	19c0      	adds	r0, r0, r7
    4032:	4169      	adcs	r1, r5
    4034:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    4038:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    403c:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4040:	2001      	movs	r0, #1
    4042:	f00a fa24 	bl	e48e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    4046:	f500 7088 	add.w	r0, r0, #272	; 0x110
    404a:	1a30      	subs	r0, r6, r0
    404c:	6460      	str	r0, [r4, #68]	; 0x44
    404e:	f04f 30ff 	mov.w	r0, #4294967295
    4052:	0841      	lsrs	r1, r0, #1
    4054:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    4058:	3c90      	subs	r4, #144	; 0x90
    405a:	e025      	b.n	40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>
    405c:	200c      	movs	r0, #12
    405e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4062:	2100      	movs	r1, #0
    4064:	4620      	mov	r0, r4
    4066:	f00a fb29 	bl	e6bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    406a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    406e:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4072:	2000      	movs	r0, #0
    4074:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4078:	b149      	cbz	r1, 408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
    407a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    407c:	b139      	cbz	r1, 408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
    407e:	f7fe fe5f 	bl	2d40 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4082:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4086:	fbb0 f2f1 	udiv	r2, r0, r1
    408a:	fb01 0012 	mls	r0, r1, r2, r0
    408e:	4407      	add	r7, r0
    4090:	f006 fbe6 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4094:	19c0      	adds	r0, r0, r7
    4096:	4169      	adcs	r1, r5
    4098:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    409c:	b19e      	cbz	r6, 40c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc6>
    409e:	1980      	adds	r0, r0, r6
    40a0:	eb51 0105 	adcs.w	r1, r1, r5
    40a4:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    40a8:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    40ac:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    40b0:	f00a fbb0 	bl	e814 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    40b4:	b158      	cbz	r0, 40ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xce>
    40b6:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    40ba:	2100      	movs	r1, #0
    40bc:	4620      	mov	r0, r4
    40be:	f00a f89e 	bl	e1fe <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    40c2:	2000      	movs	r0, #0
    40c4:	e7cb      	b.n	405e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5e>
    40c6:	f04f 30ff 	mov.w	r0, #4294967295
    40ca:	0841      	lsrs	r1, r0, #1
    40cc:	e7ea      	b.n	40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>
    40ce:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
    40d2:	2030      	movs	r0, #48	; 0x30
    40d4:	f7fc fc80 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40d8:	0000e991 	.word	0x0000e991
    40dc:	200000e0 	.word	0x200000e0

000040e0 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    40e0:	4901      	ldr	r1, [pc, #4]	; (40e8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    40e2:	8088      	strh	r0, [r1, #4]
    40e4:	4770      	bx	lr
    40e6:	0000      	.short	0x0000
    40e8:	200000e0 	.word	0x200000e0

000040ec <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    40ec:	4805      	ldr	r0, [pc, #20]	; (4104 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    40ee:	2100      	movs	r1, #0
    40f0:	7001      	strb	r1, [r0, #0]
    40f2:	2201      	movs	r2, #1
    40f4:	7082      	strb	r2, [r0, #2]
    40f6:	7041      	strb	r1, [r0, #1]
    40f8:	f242 7110 	movw	r1, #10000	; 0x2710
    40fc:	8081      	strh	r1, [r0, #4]
    40fe:	f000 b803 	b.w	4108 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4102:	0000      	.short	0x0000
    4104:	200000e0 	.word	0x200000e0

00004108 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4108:	b51c      	push	{r2, r3, r4, lr}
    410a:	4909      	ldr	r1, [pc, #36]	; (4130 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    410c:	e9d1 0100 	ldrd	r0, r1, [r1]
    4110:	e9cd 0100 	strd	r0, r1, [sp]
    4114:	e002      	b.n	411c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4116:	9800      	ldr	r0, [sp, #0]
    4118:	f00a f9f5 	bl	e506 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    411c:	4668      	mov	r0, sp
    411e:	f7fc fe99 	bl	e54 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4122:	2800      	cmp	r0, #0
    4124:	d0f7      	beq.n	4116 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4126:	f000 f8a9 	bl	427c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    412a:	2000      	movs	r0, #0
    412c:	bd1c      	pop	{r2, r3, r4, pc}
    412e:	0000      	.short	0x0000
    4130:	000049dc 	.word	0x000049dc

00004134 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4134:	4901      	ldr	r1, [pc, #4]	; (413c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4136:	7008      	strb	r0, [r1, #0]
    4138:	4770      	bx	lr
    413a:	0000      	.short	0x0000
    413c:	200000e0 	.word	0x200000e0

00004140 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4140:	4908      	ldr	r1, [pc, #32]	; (4164 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4146:	fbb1 f1f2 	udiv	r1, r1, r2
    414a:	b510      	push	{r4, lr}
    414c:	f501 7125 	add.w	r1, r1, #660	; 0x294
    4150:	f009 fd75 	bl	dc3e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4154:	f640 0148 	movw	r1, #2120	; 0x848
    4158:	4288      	cmp	r0, r1
    415a:	d300      	bcc.n	415e <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    415c:	4608      	mov	r0, r1
    415e:	b280      	uxth	r0, r0
    4160:	bd10      	pop	{r4, pc}
    4162:	0000      	.short	0x0000
    4164:	0001527d 	.word	0x0001527d

00004168 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    416c:	4c0f      	ldr	r4, [pc, #60]	; (41ac <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x44>)
    416e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    4172:	f003 fac3 	bl	76fc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4176:	4605      	mov	r5, r0
    4178:	4602      	mov	r2, r0
    417a:	4639      	mov	r1, r7
    417c:	4630      	mov	r0, r6
    417e:	f009 f8ec 	bl	d35a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    4182:	4606      	mov	r6, r0
    4184:	68a0      	ldr	r0, [r4, #8]
    4186:	4286      	cmp	r6, r0
    4188:	d005      	beq.n	4196 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2e>
    418a:	6921      	ldr	r1, [r4, #16]
    418c:	1a30      	subs	r0, r6, r0
    418e:	4408      	add	r0, r1
    4190:	6120      	str	r0, [r4, #16]
    4192:	f006 fa97 	bl	a6c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4196:	60a6      	str	r6, [r4, #8]
    4198:	42b5      	cmp	r5, r6
    419a:	d801      	bhi.n	41a0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x38>
    419c:	7860      	ldrb	r0, [r4, #1]
    419e:	b110      	cbz	r0, 41a6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    41a0:	2000      	movs	r0, #0
    41a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41a6:	2001      	movs	r0, #1
    41a8:	e7fb      	b.n	41a2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    41aa:	0000      	.short	0x0000
    41ac:	200000e0 	.word	0x200000e0

000041b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    41b0:	b510      	push	{r4, lr}
    41b2:	4604      	mov	r4, r0
    41b4:	2906      	cmp	r1, #6
    41b6:	d22e      	bcs.n	4216 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    41b8:	e8df f001 	tbb	[pc, r1]
    41bc:	14031105 	.word	0x14031105
    41c0:	2815      	.short	0x2815
    41c2:	2100      	movs	r1, #0
    41c4:	e006      	b.n	41d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    41c6:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    41ca:	b110      	cbz	r0, 41d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    41cc:	4620      	mov	r0, r4
    41ce:	f00a fab4 	bl	e73a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    41d2:	2101      	movs	r1, #1
    41d4:	4620      	mov	r0, r4
    41d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41da:	f000 b8f7 	b.w	43cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    41de:	2003      	movs	r0, #3
    41e0:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    41e4:	bd10      	pop	{r4, pc}
    41e6:	f003 fa8f 	bl	7708 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    41ea:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    41ee:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    41f2:	f003 fb4d 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    41f6:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    41fa:	1a09      	subs	r1, r1, r0
    41fc:	4808      	ldr	r0, [pc, #32]	; (4220 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    41fe:	6882      	ldr	r2, [r0, #8]
    4200:	440a      	add	r2, r1
    4202:	6082      	str	r2, [r0, #8]
    4204:	68c2      	ldr	r2, [r0, #12]
    4206:	4411      	add	r1, r2
    4208:	60c1      	str	r1, [r0, #12]
    420a:	bd10      	pop	{r4, pc}
    420c:	4620      	mov	r0, r4
    420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4212:	f00a ba7d 	b.w	e710 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4216:	f44f 61e8 	mov.w	r1, #1856	; 0x740
    421a:	2030      	movs	r0, #48	; 0x30
    421c:	f7fc fbdc 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4220:	200000e0 	.word	0x200000e0

00004224 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4224:	b570      	push	{r4, r5, r6, lr}
    4226:	460c      	mov	r4, r1
    4228:	4605      	mov	r5, r0
    422a:	b112      	cbz	r2, 4232 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    422c:	f240 716a 	movw	r1, #1898	; 0x76a
    4230:	e010      	b.n	4254 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    4232:	f003 fa63 	bl	76fc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4236:	4601      	mov	r1, r0
    4238:	2200      	movs	r2, #0
    423a:	4620      	mov	r0, r4
    423c:	f00a fb5c 	bl	e8f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    4240:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4244:	462a      	mov	r2, r5
    4246:	4905      	ldr	r1, [pc, #20]	; (425c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    4248:	f005 ffb0 	bl	a1ac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    424c:	2800      	cmp	r0, #0
    424e:	d104      	bne.n	425a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    4250:	f240 7153 	movw	r1, #1875	; 0x753
    4254:	2030      	movs	r0, #48	; 0x30
    4256:	f7fc fbbf 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    425a:	bd70      	pop	{r4, r5, r6, pc}
    425c:	0000ea33 	.word	0x0000ea33
    4260:	b510      	push	{r4, lr}
    4262:	280c      	cmp	r0, #12
    4264:	d304      	bcc.n	4270 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    4266:	f240 318b 	movw	r1, #907	; 0x38b
    426a:	2006      	movs	r0, #6
    426c:	f7fc fbb4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4270:	4901      	ldr	r1, [pc, #4]	; (4278 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    4272:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4276:	bd10      	pop	{r4, pc}
    4278:	000049f8 	.word	0x000049f8
    427c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4280:	4d15      	ldr	r5, [pc, #84]	; (42d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    4282:	2001      	movs	r0, #1
    4284:	7068      	strb	r0, [r5, #1]
    4286:	2400      	movs	r4, #0
    4288:	f64f 76ff 	movw	r6, #65535	; 0xffff
    428c:	e00b      	b.n	42a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    428e:	2100      	movs	r1, #0
    4290:	f008 fdd1 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4294:	0007      	movs	r7, r0
    4296:	d009      	beq.n	42ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    4298:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    429c:	f005 ffb8 	bl	a210 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    42a0:	4638      	mov	r0, r7
    42a2:	f00a fb1c 	bl	e8de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    42a6:	9400      	str	r4, [sp, #0]
    42a8:	9401      	str	r4, [sp, #4]
    42aa:	e00d      	b.n	42c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    42ac:	f44f 7190 	mov.w	r1, #288	; 0x120
    42b0:	2030      	movs	r0, #48	; 0x30
    42b2:	f7fc fb91 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42b6:	9800      	ldr	r0, [sp, #0]
    42b8:	b130      	cbz	r0, 42c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    42ba:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    42be:	b119      	cbz	r1, 42c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    42c0:	8800      	ldrh	r0, [r0, #0]
    42c2:	42b0      	cmp	r0, r6
    42c4:	d1e3      	bne.n	428e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    42c6:	e004      	b.n	42d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    42c8:	4668      	mov	r0, sp
    42ca:	f7fc fdc3 	bl	e54 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    42ce:	2800      	cmp	r0, #0
    42d0:	d0f1      	beq.n	42b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    42d2:	706c      	strb	r4, [r5, #1]
    42d4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    42d8:	200000e0 	.word	0x200000e0
    42dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42e0:	4604      	mov	r4, r0
    42e2:	4839      	ldr	r0, [pc, #228]	; (43c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    42e4:	461e      	mov	r6, r3
    42e6:	4690      	mov	r8, r2
    42e8:	7880      	ldrb	r0, [r0, #2]
    42ea:	4689      	mov	r9, r1
    42ec:	2500      	movs	r5, #0
    42ee:	2800      	cmp	r0, #0
    42f0:	d063      	beq.n	43ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    42f2:	f007 fb07 	bl	b904 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    42f6:	b3e0      	cbz	r0, 4372 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    42f8:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    42fc:	2802      	cmp	r0, #2
    42fe:	d35c      	bcc.n	43ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4300:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4304:	2802      	cmp	r0, #2
    4306:	d058      	beq.n	43ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4308:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    430c:	bb88      	cbnz	r0, 4372 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    430e:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4312:	f7ff ffa5 	bl	4260 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4316:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    431a:	b281      	uxth	r1, r0
    431c:	8031      	strh	r1, [r6, #0]
    431e:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4322:	2700      	movs	r7, #0
    4324:	2801      	cmp	r0, #1
    4326:	d00d      	beq.n	4344 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    4328:	6920      	ldr	r0, [r4, #16]
    432a:	f007 fb35 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    432e:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4332:	4442      	add	r2, r8
    4334:	eba2 0109 	sub.w	r1, r2, r9
    4338:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    433c:	1a82      	subs	r2, r0, r2
    433e:	fb01 7502 	mla	r5, r1, r2, r7
    4342:	e035      	b.n	43b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    4344:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4348:	2803      	cmp	r0, #3
    434a:	d039      	beq.n	43c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    434c:	2101      	movs	r1, #1
    434e:	2000      	movs	r0, #0
    4350:	f009 f8ce 	bl	d4f0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4354:	6a21      	ldr	r1, [r4, #32]
    4356:	1847      	adds	r7, r0, r1
    4358:	8831      	ldrh	r1, [r6, #0]
    435a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    435e:	f007 fb1b 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4362:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4366:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    436a:	1a82      	subs	r2, r0, r2
    436c:	fb01 5502 	mla	r5, r1, r2, r5
    4370:	e000      	b.n	4374 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    4372:	e022      	b.n	43ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4374:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4378:	8831      	ldrh	r1, [r6, #0]
    437a:	4638      	mov	r0, r7
    437c:	f007 fb0c 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4380:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4384:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4388:	1a41      	subs	r1, r0, r1
    438a:	440d      	add	r5, r1
    438c:	8831      	ldrh	r1, [r6, #0]
    438e:	6920      	ldr	r0, [r4, #16]
    4390:	f007 fb02 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4394:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4398:	4442      	add	r2, r8
    439a:	eba2 0109 	sub.w	r1, r2, r9
    439e:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    43a2:	1a89      	subs	r1, r1, r2
    43a4:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    43a8:	1a82      	subs	r2, r0, r2
    43aa:	1e49      	subs	r1, r1, #1
    43ac:	fb01 5502 	mla	r5, r1, r2, r5
    43b0:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    43b4:	2001      	movs	r0, #1
    43b6:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    43ba:	4628      	mov	r0, r5
    43bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43c0:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    43c4:	e7c6      	b.n	4354 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    43c6:	0000      	.short	0x0000
    43c8:	200000e0 	.word	0x200000e0
    43cc:	b538      	push	{r3, r4, r5, lr}
    43ce:	2500      	movs	r5, #0
    43d0:	4604      	mov	r4, r0
    43d2:	2901      	cmp	r1, #1
    43d4:	d102      	bne.n	43dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    43d6:	4810      	ldr	r0, [pc, #64]	; (4418 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    43d8:	7840      	ldrb	r0, [r0, #1]
    43da:	b170      	cbz	r0, 43fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    43dc:	2004      	movs	r0, #4
    43de:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    43e2:	bf00      	nop
    43e4:	f00a f9a2 	bl	e72c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    43e8:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    43ec:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    43f0:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    43f4:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    43f8:	bd38      	pop	{r3, r4, r5, pc}
    43fa:	9500      	str	r5, [sp, #0]
    43fc:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4400:	2301      	movs	r3, #1
    4402:	2200      	movs	r2, #0
    4404:	4620      	mov	r0, r4
    4406:	f000 f809 	bl	441c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    440a:	2800      	cmp	r0, #0
    440c:	d0ea      	beq.n	43e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    440e:	f240 61b5 	movw	r1, #1717	; 0x6b5
    4412:	2030      	movs	r0, #48	; 0x30
    4414:	f7fc fae0 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4418:	200000e0 	.word	0x200000e0
    441c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4420:	b08b      	sub	sp, #44	; 0x2c
    4422:	4604      	mov	r4, r0
    4424:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4428:	4699      	mov	r9, r3
    442a:	460f      	mov	r7, r1
    442c:	9307      	str	r3, [sp, #28]
    442e:	9005      	str	r0, [sp, #20]
    4430:	f00b fd4e 	bl	fed0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4434:	4605      	mov	r5, r0
    4436:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    443a:	f7ff ff11 	bl	4260 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    443e:	4428      	add	r0, r5
    4440:	f8ad 0004 	strh.w	r0, [sp, #4]
    4444:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4448:	280d      	cmp	r0, #13
    444a:	d004      	beq.n	4456 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    444c:	2000      	movs	r0, #0
    444e:	9008      	str	r0, [sp, #32]
    4450:	980d      	ldr	r0, [sp, #52]	; 0x34
    4452:	b110      	cbz	r0, 445a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4454:	e02e      	b.n	44b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4456:	2001      	movs	r0, #1
    4458:	e7f9      	b.n	444e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    445a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    445e:	2803      	cmp	r0, #3
    4460:	d128      	bne.n	44b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4462:	9808      	ldr	r0, [sp, #32]
    4464:	b330      	cbz	r0, 44b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4466:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    446a:	42b8      	cmp	r0, r7
    446c:	d122      	bne.n	44b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    446e:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4472:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4476:	6920      	ldr	r0, [r4, #16]
    4478:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    447c:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4480:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4484:	4408      	add	r0, r1
    4486:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    448a:	4620      	mov	r0, r4
    448c:	f000 fac0 	bl	4a10 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4490:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4494:	6220      	str	r0, [r4, #32]
    4496:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    449a:	84a0      	strh	r0, [r4, #36]	; 0x24
    449c:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    44a0:	6120      	str	r0, [r4, #16]
    44a2:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    44a6:	8320      	strh	r0, [r4, #24]
    44a8:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    44ac:	8360      	strh	r0, [r4, #26]
    44ae:	2002      	movs	r0, #2
    44b0:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    44b4:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    44b8:	f504 751e 	add.w	r5, r4, #632	; 0x278
    44bc:	1a38      	subs	r0, r7, r0
    44be:	fa0f fa80 	sxth.w	sl, r0
    44c2:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    44c6:	1a38      	subs	r0, r7, r0
    44c8:	fa0f f880 	sxth.w	r8, r0
    44cc:	f1b8 0f00 	cmp.w	r8, #0
    44d0:	da08      	bge.n	44e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    44d2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    44d6:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    44da:	46d0      	mov	r8, sl
    44dc:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    44e0:	2001      	movs	r0, #1
    44e2:	9007      	str	r0, [sp, #28]
    44e4:	ab01      	add	r3, sp, #4
    44e6:	4652      	mov	r2, sl
    44e8:	4641      	mov	r1, r8
    44ea:	4620      	mov	r0, r4
    44ec:	f7ff fef6 	bl	42dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    44f0:	9004      	str	r0, [sp, #16]
    44f2:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    44f6:	f8df b334 	ldr.w	fp, [pc, #820]	; 482c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    44fa:	b140      	cbz	r0, 450e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    44fc:	2801      	cmp	r0, #1
    44fe:	d07d      	beq.n	45fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    4500:	2802      	cmp	r0, #2
    4502:	d051      	beq.n	45a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    4504:	2803      	cmp	r0, #3
    4506:	d07a      	beq.n	45fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    4508:	f240 5143 	movw	r1, #1347	; 0x543
    450c:	e18a      	b.n	4824 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    450e:	2101      	movs	r1, #1
    4510:	2000      	movs	r0, #0
    4512:	f008 ffed 	bl	d4f0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4516:	4606      	mov	r6, r0
    4518:	6a20      	ldr	r0, [r4, #32]
    451a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    451e:	4430      	add	r0, r6
    4520:	f007 fa3a 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4524:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4528:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    452c:	6920      	ldr	r0, [r4, #16]
    452e:	f007 fa33 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4532:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4536:	a907      	add	r1, sp, #28
    4538:	a806      	add	r0, sp, #24
    453a:	f003 f847 	bl	75cc <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    453e:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4546:	f006 f99d 	bl	a884 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    454a:	4682      	mov	sl, r0
    454c:	4620      	mov	r0, r4
    454e:	f00a f8df 	bl	e710 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4552:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4556:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    455a:	f003 f9c5 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    455e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4562:	4401      	add	r1, r0
    4564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4568:	fbb1 f0f0 	udiv	r0, r1, r0
    456c:	6a21      	ldr	r1, [r4, #32]
    456e:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4572:	4431      	add	r1, r6
    4574:	1a08      	subs	r0, r1, r0
    4576:	1a81      	subs	r1, r0, r2
    4578:	4441      	add	r1, r8
    457a:	3920      	subs	r1, #32
    457c:	eba1 060a 	sub.w	r6, r1, sl
    4580:	0050      	lsls	r0, r2, #1
    4582:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4584:	3060      	adds	r0, #96	; 0x60
    4586:	4401      	add	r1, r0
    4588:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    458c:	f00a f930 	bl	e7f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4590:	3022      	adds	r0, #34	; 0x22
    4592:	f8cb 0014 	str.w	r0, [fp, #20]
    4596:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    459a:	1a30      	subs	r0, r6, r0
    459c:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    45a0:	d258      	bcs.n	4654 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    45a2:	f240 41dc 	movw	r1, #1244	; 0x4dc
    45a6:	e13d      	b.n	4824 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    45a8:	6a21      	ldr	r1, [r4, #32]
    45aa:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    45ae:	4408      	add	r0, r1
    45b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    45b4:	f007 f9f0 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    45b8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    45bc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    45c0:	6920      	ldr	r0, [r4, #16]
    45c2:	f007 f9e9 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    45c6:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    45ca:	4620      	mov	r0, r4
    45cc:	f00a f8a0 	bl	e710 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    45d0:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    45d4:	bb10      	cbnz	r0, 461c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    45d6:	f1b9 0f00 	cmp.w	r9, #0
    45da:	d01f      	beq.n	461c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    45dc:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    45e0:	4640      	mov	r0, r8
    45e2:	f003 f981 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    45e6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    45ea:	4401      	add	r1, r0
    45ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    45f0:	fbb1 f0f0 	udiv	r0, r1, r0
    45f4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    45f8:	4408      	add	r0, r1
    45fa:	e001      	b.n	4600 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    45fc:	e02b      	b.n	4656 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    45fe:	e047      	b.n	4690 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    4600:	6a22      	ldr	r2, [r4, #32]
    4602:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4606:	4411      	add	r1, r2
    4608:	1a0e      	subs	r6, r1, r0
    460a:	4640      	mov	r0, r8
    460c:	f003 f940 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4610:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4614:	1a08      	subs	r0, r1, r0
    4616:	4406      	add	r6, r0
    4618:	3e20      	subs	r6, #32
    461a:	e006      	b.n	462a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    461c:	6a21      	ldr	r1, [r4, #32]
    461e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4622:	4408      	add	r0, r1
    4624:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4628:	1a46      	subs	r6, r0, r1
    462a:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    462e:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4632:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4636:	fb01 0002 	mla	r0, r1, r2, r0
    463a:	0040      	lsls	r0, r0, #1
    463c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    463e:	3060      	adds	r0, #96	; 0x60
    4640:	4401      	add	r1, r0
    4642:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4646:	f00a f8d3 	bl	e7f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    464a:	f8cb 0014 	str.w	r0, [fp, #20]
    464e:	2001      	movs	r0, #1
    4650:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4654:	e061      	b.n	471a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    4656:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    465a:	6920      	ldr	r0, [r4, #16]
    465c:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4660:	1a86      	subs	r6, r0, r2
    4662:	eb01 000a 	add.w	r0, r1, sl
    4666:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    466a:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    466e:	1a40      	subs	r0, r0, r1
    4670:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    4674:	1e40      	subs	r0, r0, #1
    4676:	fb0c 3101 	mla	r1, ip, r1, r3
    467a:	fb00 1002 	mla	r0, r0, r2, r1
    467e:	0040      	lsls	r0, r0, #1
    4680:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4682:	3060      	adds	r0, #96	; 0x60
    4684:	4401      	add	r1, r0
    4686:	fb06 f608 	mul.w	r6, r6, r8
    468a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    468e:	e040      	b.n	4712 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    4690:	6920      	ldr	r0, [r4, #16]
    4692:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4696:	fb00 f008 	mul.w	r0, r0, r8
    469a:	fb08 0611 	mls	r6, r8, r1, r0
    469e:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    46a2:	2825      	cmp	r0, #37	; 0x25
    46a4:	d003      	beq.n	46ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    46a6:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    46aa:	2825      	cmp	r0, #37	; 0x25
    46ac:	d109      	bne.n	46c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    46ae:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    46b2:	1a38      	subs	r0, r7, r0
    46b4:	b200      	sxth	r0, r0
    46b6:	2800      	cmp	r0, #0
    46b8:	db03      	blt.n	46c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    46ba:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    46be:	b100      	cbz	r0, 46c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    46c0:	9005      	str	r0, [sp, #20]
    46c2:	9807      	ldr	r0, [sp, #28]
    46c4:	b1d8      	cbz	r0, 46fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    46c6:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    46ca:	b9c0      	cbnz	r0, 46fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    46cc:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    46d0:	2800      	cmp	r0, #0
    46d2:	d07d      	beq.n	47d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    46d4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    46d8:	f003 f906 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    46dc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    46e0:	4401      	add	r1, r0
    46e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    46e6:	fbb1 f0f0 	udiv	r0, r1, r0
    46ea:	1a36      	subs	r6, r6, r0
    46ec:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    46f0:	f003 f8ce 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    46f4:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    46f8:	1a08      	subs	r0, r1, r0
    46fa:	4406      	add	r6, r0
    46fc:	3e20      	subs	r6, #32
    46fe:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4702:	eb01 000a 	add.w	r0, r1, sl
    4706:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    470a:	4348      	muls	r0, r1
    470c:	0041      	lsls	r1, r0, #1
    470e:	3160      	adds	r1, #96	; 0x60
    4710:	9805      	ldr	r0, [sp, #20]
    4712:	f00a f86d 	bl	e7f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4716:	f8cb 0014 	str.w	r0, [fp, #20]
    471a:	9804      	ldr	r0, [sp, #16]
    471c:	f8db 2014 	ldr.w	r2, [fp, #20]
    4720:	1a31      	subs	r1, r6, r0
    4722:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    4726:	6920      	ldr	r0, [r4, #16]
    4728:	1b80      	subs	r0, r0, r6
    472a:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    472e:	f8cb 0018 	str.w	r0, [fp, #24]
    4732:	4282      	cmp	r2, r0
    4734:	d800      	bhi.n	4738 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    4736:	4610      	mov	r0, r2
    4738:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    473c:	2600      	movs	r6, #0
    473e:	702e      	strb	r6, [r5, #0]
    4740:	2064      	movs	r0, #100	; 0x64
    4742:	8128      	strh	r0, [r5, #8]
    4744:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    4748:	1851      	adds	r1, r2, r1
    474a:	4170      	adcs	r0, r6
    474c:	e9c5 1004 	strd	r1, r0, [r5, #16]
    4750:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4754:	f009 fa44 	bl	dbe0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    4758:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    475c:	4408      	add	r0, r1
    475e:	6068      	str	r0, [r5, #4]
    4760:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    4764:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4768:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    476c:	72ae      	strb	r6, [r5, #10]
    476e:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    4772:	1bc0      	subs	r0, r0, r7
    4774:	b200      	sxth	r0, r0
    4776:	2800      	cmp	r0, #0
    4778:	dd01      	ble.n	477e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    477a:	2002      	movs	r0, #2
    477c:	72a8      	strb	r0, [r5, #10]
    477e:	9808      	ldr	r0, [sp, #32]
    4780:	b338      	cbz	r0, 47d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    4782:	f1b9 0f00 	cmp.w	r9, #0
    4786:	d01c      	beq.n	47c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4788:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    478c:	b3f1      	cbz	r1, 480c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5e8>
    478e:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4792:	bf00      	nop
    4794:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4798:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    479c:	1c40      	adds	r0, r0, #1
    479e:	4342      	muls	r2, r0
    47a0:	428a      	cmp	r2, r1
    47a2:	d20e      	bcs.n	47c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    47a4:	7aa8      	ldrb	r0, [r5, #10]
    47a6:	b160      	cbz	r0, 47c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    47a8:	72ae      	strb	r6, [r5, #10]
    47aa:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    47ae:	1c40      	adds	r0, r0, #1
    47b0:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    47b4:	f7fe fabe 	bl	2d34 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    47b8:	f000 0007 	and.w	r0, r0, #7
    47bc:	1c40      	adds	r0, r0, #1
    47be:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    47c2:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    47c6:	4629      	mov	r1, r5
    47c8:	f00a f824 	bl	e814 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    47cc:	b340      	cbz	r0, 4820 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    47ce:	e001      	b.n	47d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    47d0:	e009      	b.n	47e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    47d2:	e00b      	b.n	47ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    47d4:	980d      	ldr	r0, [sp, #52]	; 0x34
    47d6:	f080 0001 	eor.w	r0, r0, #1
    47da:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    47de:	2000      	movs	r0, #0
    47e0:	b00f      	add	sp, #60	; 0x3c
    47e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47e6:	f240 512e 	movw	r1, #1326	; 0x52e
    47ea:	e01b      	b.n	4824 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    47ec:	f1b9 0f00 	cmp.w	r9, #0
    47f0:	d1ca      	bne.n	4788 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    47f2:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    47f6:	2800      	cmp	r0, #0
    47f8:	d0e3      	beq.n	47c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    47fa:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    47fe:	6920      	ldr	r0, [r4, #16]
    4800:	1a41      	subs	r1, r0, r1
    4802:	4628      	mov	r0, r5
    4804:	f008 fe86 	bl	d514 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4808:	0400      	lsls	r0, r0, #16
    480a:	e000      	b.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ea>
    480c:	e006      	b.n	481c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    480e:	0c00      	lsrs	r0, r0, #16
    4810:	d0d7      	beq.n	47c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4812:	9918      	ldr	r1, [sp, #96]	; 0x60
    4814:	b101      	cbz	r1, 4818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    4816:	8008      	strh	r0, [r1, #0]
    4818:	2001      	movs	r0, #1
    481a:	e7e1      	b.n	47e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5bc>
    481c:	2000      	movs	r0, #0
    481e:	e7b9      	b.n	4794 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    4820:	f240 518c 	movw	r1, #1420	; 0x58c
    4824:	2030      	movs	r0, #48	; 0x30
    4826:	f7fc f8d7 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    482a:	0000      	.short	0x0000
    482c:	200000e0 	.word	0x200000e0
    4830:	b570      	push	{r4, r5, r6, lr}
    4832:	4604      	mov	r4, r0
    4834:	f00b fc46 	bl	100c4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4838:	2864      	cmp	r0, #100	; 0x64
    483a:	d901      	bls.n	4840 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    483c:	4605      	mov	r5, r0
    483e:	e000      	b.n	4842 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61e>
    4840:	2564      	movs	r5, #100	; 0x64
    4842:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4846:	2128      	movs	r1, #40	; 0x28
    4848:	f009 fef0 	bl	e62c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    484c:	4428      	add	r0, r5
    484e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4852:	f500 7010 	add.w	r0, r0, #576	; 0x240
    4856:	180e      	adds	r6, r1, r0
    4858:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    485c:	2128      	movs	r1, #40	; 0x28
    485e:	f009 fee5 	bl	e62c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    4862:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    4866:	4620      	mov	r0, r4
    4868:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    486a:	f009 f958 	bl	db1e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    486e:	4605      	mov	r5, r0
    4870:	4632      	mov	r2, r6
    4872:	4620      	mov	r0, r4
    4874:	6921      	ldr	r1, [r4, #16]
    4876:	f009 f952 	bl	db1e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    487a:	4909      	ldr	r1, [pc, #36]	; (48a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    487c:	4285      	cmp	r5, r0
    487e:	60c8      	str	r0, [r1, #12]
    4880:	d200      	bcs.n	4884 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x660>
    4882:	4628      	mov	r0, r5
    4884:	6088      	str	r0, [r1, #8]
    4886:	780a      	ldrb	r2, [r1, #0]
    4888:	b902      	cbnz	r2, 488c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    488a:	60c8      	str	r0, [r1, #12]
    488c:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    4890:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    4894:	6108      	str	r0, [r1, #16]
    4896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    489a:	f005 bf13 	b.w	a6c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    489e:	0000      	.short	0x0000
    48a0:	200000e0 	.word	0x200000e0
    48a4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    48a6:	4604      	mov	r4, r0
    48a8:	f005 ffda 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    48ac:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    48b0:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    48b4:	1ac0      	subs	r0, r0, r3
    48b6:	eb61 0102 	sbc.w	r1, r1, r2
    48ba:	2200      	movs	r2, #0
    48bc:	4613      	mov	r3, r2
    48be:	1a12      	subs	r2, r2, r0
    48c0:	418b      	sbcs	r3, r1
    48c2:	db02      	blt.n	48ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a6>
    48c4:	f240 6109 	movw	r1, #1545	; 0x609
    48c8:	e04d      	b.n	4966 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    48ca:	1c42      	adds	r2, r0, #1
    48cc:	f171 0100 	sbcs.w	r1, r1, #0
    48d0:	db02      	blt.n	48d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b4>
    48d2:	f240 610a 	movw	r1, #1546	; 0x60a
    48d6:	e046      	b.n	4966 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    48d8:	6922      	ldr	r2, [r4, #16]
    48da:	2100      	movs	r1, #0
    48dc:	b10a      	cbz	r2, 48e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6be>
    48de:	fbb0 f1f2 	udiv	r1, r0, r2
    48e2:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    48e6:	280d      	cmp	r0, #13
    48e8:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    48ec:	d01b      	beq.n	4926 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x702>
    48ee:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    48f2:	1853      	adds	r3, r2, r1
    48f4:	1ac3      	subs	r3, r0, r3
    48f6:	b21b      	sxth	r3, r3
    48f8:	2b00      	cmp	r3, #0
    48fa:	db01      	blt.n	4900 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6dc>
    48fc:	1c40      	adds	r0, r0, #1
    48fe:	e001      	b.n	4904 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e0>
    4900:	1c49      	adds	r1, r1, #1
    4902:	1850      	adds	r0, r2, r1
    4904:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4908:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    490c:	f88d 0000 	strb.w	r0, [sp]
    4910:	9800      	ldr	r0, [sp, #0]
    4912:	9000      	str	r0, [sp, #0]
    4914:	f89d 0000 	ldrb.w	r0, [sp]
    4918:	b940      	cbnz	r0, 492c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    491a:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    491e:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4922:	4288      	cmp	r0, r1
    4924:	d102      	bne.n	492c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    4926:	1c40      	adds	r0, r0, #1
    4928:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    492c:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4930:	1c40      	adds	r0, r0, #1
    4932:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    4936:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    493a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    493e:	1a40      	subs	r0, r0, r1
    4940:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    4944:	1e40      	subs	r0, r0, #1
    4946:	4408      	add	r0, r1
    4948:	b285      	uxth	r5, r0
    494a:	e026      	b.n	499a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    494c:	a801      	add	r0, sp, #4
    494e:	2300      	movs	r3, #0
    4950:	9000      	str	r0, [sp, #0]
    4952:	461a      	mov	r2, r3
    4954:	4620      	mov	r0, r4
    4956:	f7ff fd61 	bl	441c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    495a:	2800      	cmp	r0, #0
    495c:	d03a      	beq.n	49d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b0>
    495e:	2801      	cmp	r0, #1
    4960:	d004      	beq.n	496c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x748>
    4962:	f240 6149 	movw	r1, #1609	; 0x649
    4966:	2030      	movs	r0, #48	; 0x30
    4968:	f7fc f836 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    496c:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4970:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    4974:	1a42      	subs	r2, r0, r1
    4976:	b212      	sxth	r2, r2
    4978:	2a00      	cmp	r2, #0
    497a:	da09      	bge.n	4990 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    497c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4980:	4402      	add	r2, r0
    4982:	1aaa      	subs	r2, r5, r2
    4984:	b212      	sxth	r2, r2
    4986:	2a00      	cmp	r2, #0
    4988:	da02      	bge.n	4990 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    498a:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    498e:	e004      	b.n	499a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    4990:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4994:	4408      	add	r0, r1
    4996:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    499a:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    499e:	1a68      	subs	r0, r5, r1
    49a0:	b200      	sxth	r0, r0
    49a2:	2800      	cmp	r0, #0
    49a4:	dad2      	bge.n	494c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x728>
    49a6:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    49aa:	b188      	cbz	r0, 49d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ac>
    49ac:	f05f 0008 	movs.w	r0, #8
    49b0:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    49b4:	220b      	movs	r2, #11
    49b6:	4908      	ldr	r1, [pc, #32]	; (49d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>)
    49b8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    49bc:	f009 f877 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    49c0:	4620      	mov	r0, r4
    49c2:	f00a f8b7 	bl	eb34 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    49c6:	4620      	mov	r0, r4
    49c8:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    49cc:	f009 bf87 	b.w	e8de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    49d0:	203e      	movs	r0, #62	; 0x3e
    49d2:	e7ed      	b.n	49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78c>
    49d4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    49d6:	0000      	.short	0x0000
    49d8:	0000dded 	.word	0x0000dded
    49dc:	00000000 	.word	0x00000000
    49e0:	00010000 	.word	0x00010000
    49e4:	00000000 	.word	0x00000000
    49e8:	00010000 	.word	0x00010000
    49ec:	00000000 	.word	0x00000000
    49f0:	00001e14 	.word	0x00001e14
    49f4:	00001130 	.word	0x00001130
    49f8:	00fa01f4 	.word	0x00fa01f4
    49fc:	00640096 	.word	0x00640096
    4a00:	0032004b 	.word	0x0032004b
    4a04:	0014001e 	.word	0x0014001e
    4a08:	0005000a 	.word	0x0005000a
    4a0c:	00010002 	.word	0x00010002

00004a10 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    4a10:	b510      	push	{r4, lr}
    4a12:	4604      	mov	r4, r0
    4a14:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    4a18:	6921      	ldr	r1, [r4, #16]
    4a1a:	4288      	cmp	r0, r1
    4a1c:	d109      	bne.n	4a32 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4a1e:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    4a22:	8b22      	ldrh	r2, [r4, #24]
    4a24:	4291      	cmp	r1, r2
    4a26:	d104      	bne.n	4a32 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4a28:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    4a2c:	8b62      	ldrh	r2, [r4, #26]
    4a2e:	4291      	cmp	r1, r2
    4a30:	d014      	beq.n	4a5c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    4a32:	8821      	ldrh	r1, [r4, #0]
    4a34:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    4a38:	f008 fc89 	bl	d34e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4a3c:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    4a40:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4a44:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    4a48:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4a4c:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    4a50:	2209      	movs	r2, #9
    4a52:	4907      	ldr	r1, [pc, #28]	; (4a70 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    4a54:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    4a58:	f009 f83d 	bl	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    4a5c:	2102      	movs	r1, #2
    4a5e:	4620      	mov	r0, r4
    4a60:	f7fd fd80 	bl	2564 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4a64:	2000      	movs	r0, #0
    4a66:	f804 0f9e 	strb.w	r0, [r4, #158]!
    4a6a:	2003      	movs	r0, #3
    4a6c:	70e0      	strb	r0, [r4, #3]
    4a6e:	bd10      	pop	{r4, pc}
    4a70:	0000de31 	.word	0x0000de31

00004a74 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    4a74:	4806      	ldr	r0, [pc, #24]	; (4a90 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    4a76:	4905      	ldr	r1, [pc, #20]	; (4a8c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    4a78:	6501      	str	r1, [r0, #80]	; 0x50
    4a7a:	4906      	ldr	r1, [pc, #24]	; (4a94 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    4a7c:	6541      	str	r1, [r0, #84]	; 0x54
    4a7e:	4807      	ldr	r0, [pc, #28]	; (4a9c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    4a80:	4905      	ldr	r1, [pc, #20]	; (4a98 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    4a82:	6501      	str	r1, [r0, #80]	; 0x50
    4a84:	4906      	ldr	r1, [pc, #24]	; (4aa0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    4a86:	6541      	str	r1, [r0, #84]	; 0x54
    4a88:	4770      	bx	lr
    4a8a:	0000      	.short	0x0000
    4a8c:	00005df5 	.word	0x00005df5
    4a90:	20000114 	.word	0x20000114
    4a94:	00005ed9 	.word	0x00005ed9
    4a98:	0000ed55 	.word	0x0000ed55
    4a9c:	200001c0 	.word	0x200001c0
    4aa0:	0000ed7f 	.word	0x0000ed7f

00004aa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    4aa4:	481e      	ldr	r0, [pc, #120]	; (4b20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    4aa6:	491d      	ldr	r1, [pc, #116]	; (4b1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    4aa8:	6081      	str	r1, [r0, #8]
    4aaa:	491e      	ldr	r1, [pc, #120]	; (4b24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    4aac:	6041      	str	r1, [r0, #4]
    4aae:	491e      	ldr	r1, [pc, #120]	; (4b28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    4ab0:	6001      	str	r1, [r0, #0]
    4ab2:	491e      	ldr	r1, [pc, #120]	; (4b2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    4ab4:	6281      	str	r1, [r0, #40]	; 0x28
    4ab6:	491e      	ldr	r1, [pc, #120]	; (4b30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    4ab8:	62c1      	str	r1, [r0, #44]	; 0x2c
    4aba:	491e      	ldr	r1, [pc, #120]	; (4b34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    4abc:	60c1      	str	r1, [r0, #12]
    4abe:	491e      	ldr	r1, [pc, #120]	; (4b38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    4ac0:	6181      	str	r1, [r0, #24]
    4ac2:	491e      	ldr	r1, [pc, #120]	; (4b3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    4ac4:	6301      	str	r1, [r0, #48]	; 0x30
    4ac6:	491e      	ldr	r1, [pc, #120]	; (4b40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    4ac8:	6201      	str	r1, [r0, #32]
    4aca:	491e      	ldr	r1, [pc, #120]	; (4b44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    4acc:	64c1      	str	r1, [r0, #76]	; 0x4c
    4ace:	491e      	ldr	r1, [pc, #120]	; (4b48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    4ad0:	6481      	str	r1, [r0, #72]	; 0x48
    4ad2:	491e      	ldr	r1, [pc, #120]	; (4b4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    4ad4:	6441      	str	r1, [r0, #68]	; 0x44
    4ad6:	491e      	ldr	r1, [pc, #120]	; (4b50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    4ad8:	6341      	str	r1, [r0, #52]	; 0x34
    4ada:	491e      	ldr	r1, [pc, #120]	; (4b54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    4adc:	61c1      	str	r1, [r0, #28]
    4ade:	491e      	ldr	r1, [pc, #120]	; (4b58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    4ae0:	6241      	str	r1, [r0, #36]	; 0x24
    4ae2:	481f      	ldr	r0, [pc, #124]	; (4b60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    4ae4:	491d      	ldr	r1, [pc, #116]	; (4b5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    4ae6:	6081      	str	r1, [r0, #8]
    4ae8:	491e      	ldr	r1, [pc, #120]	; (4b64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    4aea:	61c1      	str	r1, [r0, #28]
    4aec:	491e      	ldr	r1, [pc, #120]	; (4b68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    4aee:	6241      	str	r1, [r0, #36]	; 0x24
    4af0:	491e      	ldr	r1, [pc, #120]	; (4b6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    4af2:	62c1      	str	r1, [r0, #44]	; 0x2c
    4af4:	491e      	ldr	r1, [pc, #120]	; (4b70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    4af6:	6101      	str	r1, [r0, #16]
    4af8:	491e      	ldr	r1, [pc, #120]	; (4b74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    4afa:	6141      	str	r1, [r0, #20]
    4afc:	491e      	ldr	r1, [pc, #120]	; (4b78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    4afe:	6441      	str	r1, [r0, #68]	; 0x44
    4b00:	491e      	ldr	r1, [pc, #120]	; (4b7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    4b02:	6341      	str	r1, [r0, #52]	; 0x34
    4b04:	491e      	ldr	r1, [pc, #120]	; (4b80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    4b06:	6181      	str	r1, [r0, #24]
    4b08:	491e      	ldr	r1, [pc, #120]	; (4b84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    4b0a:	6301      	str	r1, [r0, #48]	; 0x30
    4b0c:	491e      	ldr	r1, [pc, #120]	; (4b88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    4b0e:	6481      	str	r1, [r0, #72]	; 0x48
    4b10:	491e      	ldr	r1, [pc, #120]	; (4b8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    4b12:	64c1      	str	r1, [r0, #76]	; 0x4c
    4b14:	491e      	ldr	r1, [pc, #120]	; (4b90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    4b16:	6381      	str	r1, [r0, #56]	; 0x38
    4b18:	4770      	bx	lr
    4b1a:	0000      	.short	0x0000
    4b1c:	00006219 	.word	0x00006219
    4b20:	20000114 	.word	0x20000114
    4b24:	00005be5 	.word	0x00005be5
    4b28:	00005c51 	.word	0x00005c51
    4b2c:	0000ec17 	.word	0x0000ec17
    4b30:	0000ec61 	.word	0x0000ec61
    4b34:	00005d11 	.word	0x00005d11
    4b38:	0000ec79 	.word	0x0000ec79
    4b3c:	000062dd 	.word	0x000062dd
    4b40:	00005dad 	.word	0x00005dad
    4b44:	0000ebe9 	.word	0x0000ebe9
    4b48:	0000ebc3 	.word	0x0000ebc3
    4b4c:	00006191 	.word	0x00006191
    4b50:	000061c5 	.word	0x000061c5
    4b54:	00006251 	.word	0x00006251
    4b58:	00005db9 	.word	0x00005db9
    4b5c:	0000eec9 	.word	0x0000eec9
    4b60:	200001c0 	.word	0x200001c0
    4b64:	000063b9 	.word	0x000063b9
    4b68:	0000ed51 	.word	0x0000ed51
    4b6c:	0000ede9 	.word	0x0000ede9
    4b70:	0000ed2b 	.word	0x0000ed2b
    4b74:	0000eeab 	.word	0x0000eeab
    4b78:	0000ee59 	.word	0x0000ee59
    4b7c:	0000ee89 	.word	0x0000ee89
    4b80:	00006345 	.word	0x00006345
    4b84:	0000eeeb 	.word	0x0000eeeb
    4b88:	0000edaf 	.word	0x0000edaf
    4b8c:	0000edd9 	.word	0x0000edd9
    4b90:	0000eea7 	.word	0x0000eea7

00004b94 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    4b94:	4806      	ldr	r0, [pc, #24]	; (4bb0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    4b96:	4905      	ldr	r1, [pc, #20]	; (4bac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    4b98:	6581      	str	r1, [r0, #88]	; 0x58
    4b9a:	4906      	ldr	r1, [pc, #24]	; (4bb4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    4b9c:	6601      	str	r1, [r0, #96]	; 0x60
    4b9e:	4807      	ldr	r0, [pc, #28]	; (4bbc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    4ba0:	4905      	ldr	r1, [pc, #20]	; (4bb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    4ba2:	6581      	str	r1, [r0, #88]	; 0x58
    4ba4:	4906      	ldr	r1, [pc, #24]	; (4bc0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    4ba6:	65c1      	str	r1, [r0, #92]	; 0x5c
    4ba8:	4770      	bx	lr
    4baa:	0000      	.short	0x0000
    4bac:	00005f59 	.word	0x00005f59
    4bb0:	20000114 	.word	0x20000114
    4bb4:	0000603d 	.word	0x0000603d
    4bb8:	0000ee0f 	.word	0x0000ee0f
    4bbc:	200001c0 	.word	0x200001c0
    4bc0:	0000ee39 	.word	0x0000ee39

00004bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    4bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bc6:	4c7c      	ldr	r4, [pc, #496]	; (4db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    4bc8:	2101      	movs	r1, #1
    4bca:	f1a4 0610 	sub.w	r6, r4, #16
    4bce:	7021      	strb	r1, [r4, #0]
    4bd0:	2500      	movs	r5, #0
    4bd2:	6060      	str	r0, [r4, #4]
    4bd4:	8075      	strh	r5, [r6, #2]
    4bd6:	7075      	strb	r5, [r6, #1]
    4bd8:	7035      	strb	r5, [r6, #0]
    4bda:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    4bde:	8800      	ldrh	r0, [r0, #0]
    4be0:	f7fc fb0c 	bl	11fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4be4:	b180      	cbz	r0, 4c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    4be6:	6860      	ldr	r0, [r4, #4]
    4be8:	8800      	ldrh	r0, [r0, #0]
    4bea:	f7fc fd6f 	bl	16cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    4bee:	6860      	ldr	r0, [r4, #4]
    4bf0:	8800      	ldrh	r0, [r0, #0]
    4bf2:	f7fc fd13 	bl	161c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    4bf6:	6860      	ldr	r0, [r4, #4]
    4bf8:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    4bfc:	b1c9      	cbz	r1, 4c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4bfe:	3080      	adds	r0, #128	; 0x80
    4c00:	f009 ffa7 	bl	eb52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    4c04:	b118      	cbz	r0, 4c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    4c06:	e014      	b.n	4c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4c08:	f640 5159 	movw	r1, #3417	; 0xd59
    4c0c:	e06c      	b.n	4ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    4c0e:	6860      	ldr	r0, [r4, #4]
    4c10:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    4c14:	f88d 1000 	strb.w	r1, [sp]
    4c18:	9900      	ldr	r1, [sp, #0]
    4c1a:	9100      	str	r1, [sp, #0]
    4c1c:	f89d 1000 	ldrb.w	r1, [sp]
    4c20:	b139      	cbz	r1, 4c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4c22:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    4c26:	2301      	movs	r3, #1
    4c28:	4619      	mov	r1, r3
    4c2a:	3080      	adds	r0, #128	; 0x80
    4c2c:	f008 fba8 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    4c30:	b180      	cbz	r0, 4c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    4c32:	6860      	ldr	r0, [r4, #4]
    4c34:	3080      	adds	r0, #128	; 0x80
    4c36:	f009 ff8c 	bl	eb52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    4c3a:	b128      	cbz	r0, 4c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    4c3c:	6860      	ldr	r0, [r4, #4]
    4c3e:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    4c42:	bf00      	nop
    4c44:	f000 fbb4 	bl	53b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>
    4c48:	6860      	ldr	r0, [r4, #4]
    4c4a:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    4c4e:	b189      	cbz	r1, 4c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    4c50:	80b5      	strh	r5, [r6, #4]
    4c52:	e01e      	b.n	4c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    4c54:	6860      	ldr	r0, [r4, #4]
    4c56:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    4c5a:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    4c5e:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    4c62:	2100      	movs	r1, #0
    4c64:	2002      	movs	r0, #2
    4c66:	f000 fe63 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    4c6a:	6860      	ldr	r0, [r4, #4]
    4c6c:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    4c70:	2002      	movs	r0, #2
    4c72:	e7e7      	b.n	4c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    4c74:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    4c78:	f88d 1000 	strb.w	r1, [sp]
    4c7c:	9900      	ldr	r1, [sp, #0]
    4c7e:	9100      	str	r1, [sp, #0]
    4c80:	f89d 1000 	ldrb.w	r1, [sp]
    4c84:	b919      	cbnz	r1, 4c8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    4c86:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    4c88:	8b02      	ldrh	r2, [r0, #24]
    4c8a:	4291      	cmp	r1, r2
    4c8c:	d800      	bhi.n	4c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    4c8e:	8b01      	ldrh	r1, [r0, #24]
    4c90:	80b1      	strh	r1, [r6, #4]
    4c92:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    4c96:	1e49      	subs	r1, r1, #1
    4c98:	b28f      	uxth	r7, r1
    4c9a:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    4c9e:	4439      	add	r1, r7
    4ca0:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    4ca4:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    4ca8:	4439      	add	r1, r7
    4caa:	8001      	strh	r1, [r0, #0]
    4cac:	f001 fbb2 	bl	6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    4cb0:	b120      	cbz	r0, 4cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    4cb2:	6860      	ldr	r0, [r4, #4]
    4cb4:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    4cb8:	4439      	add	r1, r7
    4cba:	6001      	str	r1, [r0, #0]
    4cbc:	6861      	ldr	r1, [r4, #4]
    4cbe:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    4cc2:	2801      	cmp	r0, #1
    4cc4:	d802      	bhi.n	4ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    4cc6:	1c40      	adds	r0, r0, #1
    4cc8:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    4ccc:	b10f      	cbz	r7, 4cd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    4cce:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    4cd2:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    4cd6:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    4cda:	f101 0080 	add.w	r0, r1, #128	; 0x80
    4cde:	f008 fcf3 	bl	d6c8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    4ce2:	b120      	cbz	r0, 4cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    4ce4:	f44f 615a 	mov.w	r1, #3488	; 0xda0
    4ce8:	2031      	movs	r0, #49	; 0x31
    4cea:	f7fb fe75 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cee:	6860      	ldr	r0, [r4, #4]
    4cf0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    4cf4:	290a      	cmp	r1, #10
    4cf6:	d001      	beq.n	4cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    4cf8:	290b      	cmp	r1, #11
    4cfa:	d119      	bne.n	4d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    4cfc:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    4d00:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    4d04:	1ad2      	subs	r2, r2, r3
    4d06:	b212      	sxth	r2, r2
    4d08:	2a00      	cmp	r2, #0
    4d0a:	db11      	blt.n	4d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    4d0c:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    4d10:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    4d14:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    4d18:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    4d1c:	2103      	movs	r1, #3
    4d1e:	f7fd fc21 	bl	2564 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4d22:	6860      	ldr	r0, [r4, #4]
    4d24:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    4d28:	21ff      	movs	r1, #255	; 0xff
    4d2a:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    4d2e:	e026      	b.n	4d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4d30:	2925      	cmp	r1, #37	; 0x25
    4d32:	d111      	bne.n	4d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    4d34:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    4d38:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    4d3c:	1a89      	subs	r1, r1, r2
    4d3e:	b209      	sxth	r1, r1
    4d40:	2900      	cmp	r1, #0
    4d42:	db09      	blt.n	4d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    4d44:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    4d48:	f000 feac 	bl	5aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    4d4c:	2800      	cmp	r0, #0
    4d4e:	6860      	ldr	r0, [r4, #4]
    4d50:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    4d54:	d029      	beq.n	4daa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    4d56:	e012      	b.n	4d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4d58:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    4d5c:	2925      	cmp	r1, #37	; 0x25
    4d5e:	d001      	beq.n	4d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    4d60:	2927      	cmp	r1, #39	; 0x27
    4d62:	d10c      	bne.n	4d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4d64:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    4d68:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    4d6c:	1a89      	subs	r1, r1, r2
    4d6e:	b209      	sxth	r1, r1
    4d70:	2900      	cmp	r1, #0
    4d72:	db04      	blt.n	4d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4d74:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    4d78:	f000 fe94 	bl	5aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    4d7c:	b1a8      	cbz	r0, 4daa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    4d7e:	480f      	ldr	r0, [pc, #60]	; (4dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    4d80:	9000      	str	r0, [sp, #0]
    4d82:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    4d86:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    4d88:	4a0e      	ldr	r2, [pc, #56]	; (4dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    4d8a:	f7fc fd2d 	bl	17e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    4d8e:	6860      	ldr	r0, [r4, #4]
    4d90:	2301      	movs	r3, #1
    4d92:	2105      	movs	r1, #5
    4d94:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    4d98:	3080      	adds	r0, #128	; 0x80
    4d9a:	f008 faf1 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    4d9e:	2800      	cmp	r0, #0
    4da0:	d009      	beq.n	4db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    4da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4da6:	f7fc bd19 	b.w	17dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    4daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4dae:	2100      	movs	r1, #0
    4db0:	4608      	mov	r0, r1
    4db2:	f000 bbc9 	b.w	5548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    4db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4db8:	2000010c 	.word	0x2000010c
    4dbc:	00005549 	.word	0x00005549
    4dc0:	00005085 	.word	0x00005085
    4dc4:	000059f1 	.word	0x000059f1
    4dc8:	4804      	ldr	r0, [pc, #16]	; (4ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    4dca:	2100      	movs	r1, #0
    4dcc:	6840      	ldr	r0, [r0, #4]
    4dce:	f820 1fd8 	strh.w	r1, [r0, #216]!
    4dd2:	7881      	ldrb	r1, [r0, #2]
    4dd4:	1c49      	adds	r1, r1, #1
    4dd6:	7081      	strb	r1, [r0, #2]
    4dd8:	4770      	bx	lr
    4dda:	0000      	.short	0x0000
    4ddc:	2000010c 	.word	0x2000010c
    4de0:	4807      	ldr	r0, [pc, #28]	; (4e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    4de2:	b510      	push	{r4, lr}
    4de4:	6841      	ldr	r1, [r0, #4]
    4de6:	f811 0fda 	ldrb.w	r0, [r1, #218]!
    4dea:	1e40      	subs	r0, r0, #1
    4dec:	b240      	sxtb	r0, r0
    4dee:	7008      	strb	r0, [r1, #0]
    4df0:	2800      	cmp	r0, #0
    4df2:	da04      	bge.n	4dfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    4df4:	f240 2101 	movw	r1, #513	; 0x201
    4df8:	2031      	movs	r0, #49	; 0x31
    4dfa:	f7fb fded 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dfe:	bd10      	pop	{r4, pc}
    4e00:	2000010c 	.word	0x2000010c
    4e04:	491d      	ldr	r1, [pc, #116]	; (4e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    4e06:	b508      	push	{r3, lr}
    4e08:	6849      	ldr	r1, [r1, #4]
    4e0a:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    4e0e:	b1c0      	cbz	r0, 4e42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    4e10:	2a11      	cmp	r2, #17
    4e12:	d006      	beq.n	4e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    4e14:	2a15      	cmp	r2, #21
    4e16:	d007      	beq.n	4e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    4e18:	2a16      	cmp	r2, #22
    4e1a:	d009      	beq.n	4e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    4e1c:	2a1c      	cmp	r2, #28
    4e1e:	d128      	bne.n	4e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    4e20:	e009      	b.n	4e36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    4e22:	2101      	movs	r1, #1
    4e24:	200b      	movs	r0, #11
    4e26:	e008      	b.n	4e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    4e28:	4814      	ldr	r0, [pc, #80]	; (4e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    4e2a:	f009 ff36 	bl	ec9a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x166>
    4e2e:	e006      	b.n	4e3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    4e30:	f000 fd9c 	bl	596c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda8>
    4e34:	e003      	b.n	4e3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    4e36:	2101      	movs	r1, #1
    4e38:	2006      	movs	r0, #6
    4e3a:	f000 fd79 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    4e3e:	2001      	movs	r0, #1
    4e40:	bd08      	pop	{r3, pc}
    4e42:	2a22      	cmp	r2, #34	; 0x22
    4e44:	d004      	beq.n	4e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    4e46:	2a2f      	cmp	r2, #47	; 0x2f
    4e48:	d113      	bne.n	4e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    4e4a:	2101      	movs	r1, #1
    4e4c:	2011      	movs	r0, #17
    4e4e:	e7f4      	b.n	4e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    4e50:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    4e54:	2802      	cmp	r0, #2
    4e56:	d00e      	beq.n	4e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    4e58:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    4e5c:	2801      	cmp	r0, #1
    4e5e:	d108      	bne.n	4e72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    4e60:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    4e64:	f88d 0000 	strb.w	r0, [sp]
    4e68:	9800      	ldr	r0, [sp, #0]
    4e6a:	9000      	str	r0, [sp, #0]
    4e6c:	f89d 0000 	ldrb.w	r0, [sp]
    4e70:	b108      	cbz	r0, 4e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    4e72:	2000      	movs	r0, #0
    4e74:	bd08      	pop	{r3, pc}
    4e76:	2101      	movs	r1, #1
    4e78:	2017      	movs	r0, #23
    4e7a:	e7de      	b.n	4e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    4e7c:	2000010c 	.word	0x2000010c
    4e80:	b538      	push	{r3, r4, r5, lr}
    4e82:	2800      	cmp	r0, #0
    4e84:	d176      	bne.n	4f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    4e86:	4c3c      	ldr	r4, [pc, #240]	; (4f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>)
    4e88:	6860      	ldr	r0, [r4, #4]
    4e8a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    4e8e:	07ca      	lsls	r2, r1, #31
    4e90:	d002      	beq.n	4e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    4e92:	2101      	movs	r1, #1
    4e94:	2009      	movs	r0, #9
    4e96:	e069      	b.n	4f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    4e98:	078a      	lsls	r2, r1, #30
    4e9a:	d50a      	bpl.n	4eb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    4e9c:	2101      	movs	r1, #1
    4e9e:	200c      	movs	r0, #12
    4ea0:	f000 fd46 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    4ea4:	6860      	ldr	r0, [r4, #4]
    4ea6:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    4eaa:	f041 0101 	orr.w	r1, r1, #1
    4eae:	7001      	strb	r1, [r0, #0]
    4eb0:	e05e      	b.n	4f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>
    4eb2:	074a      	lsls	r2, r1, #29
    4eb4:	d502      	bpl.n	4ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    4eb6:	2101      	movs	r1, #1
    4eb8:	2013      	movs	r0, #19
    4eba:	e057      	b.n	4f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    4ebc:	070a      	lsls	r2, r1, #28
    4ebe:	d506      	bpl.n	4ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    4ec0:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    4ec4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    4ec8:	2101      	movs	r1, #1
    4eca:	2007      	movs	r0, #7
    4ecc:	e04e      	b.n	4f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    4ece:	f011 0f30 	tst.w	r1, #48	; 0x30
    4ed2:	d047      	beq.n	4f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    4ed4:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    4ed8:	f88d 1000 	strb.w	r1, [sp]
    4edc:	9900      	ldr	r1, [sp, #0]
    4ede:	9100      	str	r1, [sp, #0]
    4ee0:	f89d 1000 	ldrb.w	r1, [sp]
    4ee4:	bbd9      	cbnz	r1, 4f5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    4ee6:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    4eea:	2500      	movs	r5, #0
    4eec:	f88d 1000 	strb.w	r1, [sp]
    4ef0:	9900      	ldr	r1, [sp, #0]
    4ef2:	9100      	str	r1, [sp, #0]
    4ef4:	f89d 1000 	ldrb.w	r1, [sp]
    4ef8:	b1c1      	cbz	r1, 4f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    4efa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    4efe:	2925      	cmp	r1, #37	; 0x25
    4f00:	d02e      	beq.n	4f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    4f02:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    4f06:	2925      	cmp	r1, #37	; 0x25
    4f08:	d02a      	beq.n	4f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    4f0a:	2300      	movs	r3, #0
    4f0c:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    4f10:	f500 7199 	add.w	r1, r0, #306	; 0x132
    4f14:	f008 fdf5 	bl	db02 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    4f18:	6860      	ldr	r0, [r4, #4]
    4f1a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    4f1e:	f021 0120 	bic.w	r1, r1, #32
    4f22:	f041 0110 	orr.w	r1, r1, #16
    4f26:	6001      	str	r1, [r0, #0]
    4f28:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    4f2c:	6860      	ldr	r0, [r4, #4]
    4f2e:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    4f32:	06c9      	lsls	r1, r1, #27
    4f34:	d51e      	bpl.n	4f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    4f36:	f008 fdff 	bl	db38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    4f3a:	2105      	movs	r1, #5
    4f3c:	6860      	ldr	r0, [r4, #4]
    4f3e:	f7ff f937 	bl	41b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    4f42:	f000 f925 	bl	5190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    4f46:	6861      	ldr	r1, [r4, #4]
    4f48:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    4f4c:	8bc2      	ldrh	r2, [r0, #30]
    4f4e:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    4f52:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    4f54:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    4f58:	2101      	movs	r1, #1
    4f5a:	2015      	movs	r0, #21
    4f5c:	e006      	b.n	4f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    4f5e:	e009      	b.n	4f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    4f60:	2301      	movs	r3, #1
    4f62:	e7d3      	b.n	4f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    4f64:	0648      	lsls	r0, r1, #25
    4f66:	d505      	bpl.n	4f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    4f68:	2101      	movs	r1, #1
    4f6a:	2024      	movs	r0, #36	; 0x24
    4f6c:	f000 fce0 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    4f70:	2001      	movs	r0, #1
    4f72:	bd38      	pop	{r3, r4, r5, pc}
    4f74:	2000      	movs	r0, #0
    4f76:	bd38      	pop	{r3, r4, r5, pc}
    4f78:	2000010c 	.word	0x2000010c
    4f7c:	b570      	push	{r4, r5, r6, lr}
    4f7e:	460d      	mov	r5, r1
    4f80:	4606      	mov	r6, r0
    4f82:	f008 fcfc 	bl	d97e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    4f86:	4604      	mov	r4, r0
    4f88:	4630      	mov	r0, r6
    4f8a:	f008 fcfa 	bl	d982 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    4f8e:	4629      	mov	r1, r5
    4f90:	f000 f81e 	bl	4fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    4f94:	b1b8      	cbz	r0, 4fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    4f96:	4620      	mov	r0, r4
    4f98:	f008 fa9c 	bl	d4d4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    4f9c:	0001      	movs	r1, r0
    4f9e:	d00d      	beq.n	4fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    4fa0:	480a      	ldr	r0, [pc, #40]	; (4fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x408>)
    4fa2:	6840      	ldr	r0, [r0, #4]
    4fa4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    4fa8:	428a      	cmp	r2, r1
    4faa:	d007      	beq.n	4fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    4fac:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    4fb0:	2901      	cmp	r1, #1
    4fb2:	d005      	beq.n	4fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    4fb4:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    4fb8:	4220      	tst	r0, r4
    4fba:	d004      	beq.n	4fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    4fbc:	2001      	movs	r0, #1
    4fbe:	bd70      	pop	{r4, r5, r6, pc}
    4fc0:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    4fc4:	e7f8      	b.n	4fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    4fc6:	2000      	movs	r0, #0
    4fc8:	bd70      	pop	{r4, r5, r6, pc}
    4fca:	0000      	.short	0x0000
    4fcc:	2000010c 	.word	0x2000010c
    4fd0:	b570      	push	{r4, r5, r6, lr}
    4fd2:	460d      	mov	r5, r1
    4fd4:	4604      	mov	r4, r0
    4fd6:	f008 fa7d 	bl	d4d4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    4fda:	b350      	cbz	r0, 5032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    4fdc:	4916      	ldr	r1, [pc, #88]	; (5038 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>)
    4fde:	6849      	ldr	r1, [r1, #4]
    4fe0:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    4fe4:	4282      	cmp	r2, r0
    4fe6:	d024      	beq.n	5032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    4fe8:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    4fec:	2b01      	cmp	r3, #1
    4fee:	d005      	beq.n	4ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    4ff0:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    4ff4:	4223      	tst	r3, r4
    4ff6:	d013      	beq.n	5020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    4ff8:	b11d      	cbz	r5, 5002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    4ffa:	e01a      	b.n	5032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    4ffc:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    5000:	e7f8      	b.n	4ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    5002:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5006:	4221      	tst	r1, r4
    5008:	d113      	bne.n	5032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    500a:	b15a      	cbz	r2, 5024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    500c:	2a04      	cmp	r2, #4
    500e:	d00e      	beq.n	502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5010:	2804      	cmp	r0, #4
    5012:	d00c      	beq.n	502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5014:	2a08      	cmp	r2, #8
    5016:	d00a      	beq.n	502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5018:	2808      	cmp	r0, #8
    501a:	d008      	beq.n	502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    501c:	4282      	cmp	r2, r0
    501e:	d908      	bls.n	5032 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5020:	2000      	movs	r0, #0
    5022:	bd70      	pop	{r4, r5, r6, pc}
    5024:	f240 11a3 	movw	r1, #419	; 0x1a3
    5028:	2006      	movs	r0, #6
    502a:	f7fb fcd5 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    502e:	4282      	cmp	r2, r0
    5030:	d3f6      	bcc.n	5020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    5032:	2001      	movs	r0, #1
    5034:	bd70      	pop	{r4, r5, r6, pc}
    5036:	0000      	.short	0x0000
    5038:	2000010c 	.word	0x2000010c
    503c:	b510      	push	{r4, lr}
    503e:	4c10      	ldr	r4, [pc, #64]	; (5080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>)
    5040:	2301      	movs	r3, #1
    5042:	2100      	movs	r1, #0
    5044:	6860      	ldr	r0, [r4, #4]
    5046:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    504a:	3080      	adds	r0, #128	; 0x80
    504c:	f008 f998 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5050:	b140      	cbz	r0, 5064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a0>
    5052:	6860      	ldr	r0, [r4, #4]
    5054:	2301      	movs	r3, #1
    5056:	2104      	movs	r1, #4
    5058:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    505c:	3080      	adds	r0, #128	; 0x80
    505e:	f008 f98f 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5062:	b108      	cbz	r0, 5068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>
    5064:	2000      	movs	r0, #0
    5066:	bd10      	pop	{r4, pc}
    5068:	6860      	ldr	r0, [r4, #4]
    506a:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    506e:	2800      	cmp	r0, #0
    5070:	d0f9      	beq.n	5066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5072:	2100      	movs	r1, #0
    5074:	2012      	movs	r0, #18
    5076:	f000 fc5b 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    507a:	2001      	movs	r0, #1
    507c:	bd10      	pop	{r4, pc}
    507e:	0000      	.short	0x0000
    5080:	2000010c 	.word	0x2000010c
    5084:	490d      	ldr	r1, [pc, #52]	; (50bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f8>)
    5086:	4602      	mov	r2, r0
    5088:	7848      	ldrb	r0, [r1, #1]
    508a:	b9a0      	cbnz	r0, 50b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    508c:	f101 0010 	add.w	r0, r1, #16
    5090:	6840      	ldr	r0, [r0, #4]
    5092:	b142      	cbz	r2, 50a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    5094:	7889      	ldrb	r1, [r1, #2]
    5096:	0709      	lsls	r1, r1, #28
    5098:	d503      	bpl.n	50a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4de>
    509a:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    509e:	2807      	cmp	r0, #7
    50a0:	d009      	beq.n	50b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    50a2:	2001      	movs	r0, #1
    50a4:	4770      	bx	lr
    50a6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    50aa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    50ac:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    50ae:	428a      	cmp	r2, r1
    50b0:	d801      	bhi.n	50b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    50b2:	f7ff b859 	b.w	4168 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    50b6:	2000      	movs	r0, #0
    50b8:	4770      	bx	lr
    50ba:	0000      	.short	0x0000
    50bc:	200000fc 	.word	0x200000fc
    50c0:	b538      	push	{r3, r4, r5, lr}
    50c2:	4c32      	ldr	r4, [pc, #200]	; (518c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c8>)
    50c4:	4605      	mov	r5, r0
    50c6:	6860      	ldr	r0, [r4, #4]
    50c8:	3080      	adds	r0, #128	; 0x80
    50ca:	f009 fd42 	bl	eb52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    50ce:	2800      	cmp	r0, #0
    50d0:	d15b      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    50d2:	2d00      	cmp	r5, #0
    50d4:	d159      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    50d6:	6860      	ldr	r0, [r4, #4]
    50d8:	2301      	movs	r3, #1
    50da:	4619      	mov	r1, r3
    50dc:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    50e0:	3080      	adds	r0, #128	; 0x80
    50e2:	f008 f94d 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    50e6:	2800      	cmp	r0, #0
    50e8:	d14f      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    50ea:	6860      	ldr	r0, [r4, #4]
    50ec:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    50f0:	f88d 1000 	strb.w	r1, [sp]
    50f4:	9900      	ldr	r1, [sp, #0]
    50f6:	9100      	str	r1, [sp, #0]
    50f8:	f89d 2000 	ldrb.w	r2, [sp]
    50fc:	2100      	movs	r1, #0
    50fe:	b142      	cbz	r2, 5112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x54e>
    5100:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5104:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5108:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    510c:	2100      	movs	r1, #0
    510e:	2002      	movs	r0, #2
    5110:	e030      	b.n	5174 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5112:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5116:	2301      	movs	r3, #1
    5118:	2104      	movs	r1, #4
    511a:	3080      	adds	r0, #128	; 0x80
    511c:	f008 f930 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5120:	4605      	mov	r5, r0
    5122:	f7ff fead 	bl	4e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    5126:	2800      	cmp	r0, #0
    5128:	d12f      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    512a:	4628      	mov	r0, r5
    512c:	f7ff fe6a 	bl	4e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    5130:	2800      	cmp	r0, #0
    5132:	d12a      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5134:	f7ff ff82 	bl	503c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x478>
    5138:	2800      	cmp	r0, #0
    513a:	d126      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    513c:	6860      	ldr	r0, [r4, #4]
    513e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5142:	2909      	cmp	r1, #9
    5144:	d01a      	beq.n	517c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5146:	2d00      	cmp	r5, #0
    5148:	d11f      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    514a:	f000 fb1d 	bl	5788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    514e:	2800      	cmp	r0, #0
    5150:	d11b      	bne.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5152:	6860      	ldr	r0, [r4, #4]
    5154:	2301      	movs	r3, #1
    5156:	2100      	movs	r1, #0
    5158:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    515c:	3080      	adds	r0, #128	; 0x80
    515e:	f008 f90f 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5162:	2800      	cmp	r0, #0
    5164:	d011      	beq.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5166:	6860      	ldr	r0, [r4, #4]
    5168:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    516c:	2800      	cmp	r0, #0
    516e:	d00c      	beq.n	518a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5170:	2100      	movs	r1, #0
    5172:	20ff      	movs	r0, #255	; 0xff
    5174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5178:	f000 bbda 	b.w	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    517c:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5180:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5184:	2100      	movs	r1, #0
    5186:	2007      	movs	r0, #7
    5188:	e7f4      	b.n	5174 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    518a:	bd38      	pop	{r3, r4, r5, pc}
    518c:	2000010c 	.word	0x2000010c
    5190:	4808      	ldr	r0, [pc, #32]	; (51b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f0>)
    5192:	6843      	ldr	r3, [r0, #4]
    5194:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5198:	2801      	cmp	r0, #1
    519a:	d006      	beq.n	51aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e6>
    519c:	f503 72b1 	add.w	r2, r3, #354	; 0x162
    51a0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    51a4:	8818      	ldrh	r0, [r3, #0]
    51a6:	f7fd bd47 	b.w	2c38 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    51aa:	2002      	movs	r0, #2
    51ac:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    51b0:	4770      	bx	lr
    51b2:	0000      	.short	0x0000
    51b4:	2000010c 	.word	0x2000010c
    51b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ba:	4d2b      	ldr	r5, [pc, #172]	; (5268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    51bc:	0006      	movs	r6, r0
    51be:	f105 0410 	add.w	r4, r5, #16
    51c2:	d133      	bne.n	522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    51c4:	f000 f8aa 	bl	531c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    51c8:	f000 f852 	bl	5270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    51cc:	0006      	movs	r6, r0
    51ce:	d12d      	bne.n	522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    51d0:	8869      	ldrh	r1, [r5, #2]
    51d2:	0748      	lsls	r0, r1, #29
    51d4:	d506      	bpl.n	51e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    51d6:	6860      	ldr	r0, [r4, #4]
    51d8:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    51dc:	2806      	cmp	r0, #6
    51de:	d101      	bne.n	51e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    51e0:	2001      	movs	r0, #1
    51e2:	7028      	strb	r0, [r5, #0]
    51e4:	0788      	lsls	r0, r1, #30
    51e6:	d516      	bpl.n	5216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    51e8:	68a8      	ldr	r0, [r5, #8]
    51ea:	78c0      	ldrb	r0, [r0, #3]
    51ec:	282b      	cmp	r0, #43	; 0x2b
    51ee:	d207      	bcs.n	5200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    51f0:	491e      	ldr	r1, [pc, #120]	; (526c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    51f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    51f6:	b119      	cbz	r1, 5200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    51f8:	481b      	ldr	r0, [pc, #108]	; (5268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    51fa:	3010      	adds	r0, #16
    51fc:	4788      	blx	r1
    51fe:	e00a      	b.n	5216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5200:	28ff      	cmp	r0, #255	; 0xff
    5202:	d004      	beq.n	520e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    5204:	f640 1102 	movw	r1, #2306	; 0x902
    5208:	2031      	movs	r0, #49	; 0x31
    520a:	f7fb fbe5 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    520e:	4816      	ldr	r0, [pc, #88]	; (5268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5210:	3010      	adds	r0, #16
    5212:	f009 fd81 	bl	ed18 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    5216:	78a8      	ldrb	r0, [r5, #2]
    5218:	06c0      	lsls	r0, r0, #27
    521a:	d507      	bpl.n	522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    521c:	6860      	ldr	r0, [r4, #4]
    521e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5222:	290a      	cmp	r1, #10
    5224:	d102      	bne.n	522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5226:	210b      	movs	r1, #11
    5228:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    522c:	7868      	ldrb	r0, [r5, #1]
    522e:	0700      	lsls	r0, r0, #28
    5230:	d518      	bpl.n	5264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5232:	6860      	ldr	r0, [r4, #4]
    5234:	2301      	movs	r3, #1
    5236:	2105      	movs	r1, #5
    5238:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    523c:	3080      	adds	r0, #128	; 0x80
    523e:	f008 f89f 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5242:	b108      	cbz	r0, 5248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x684>
    5244:	2608      	movs	r6, #8
    5246:	e00d      	b.n	5264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5248:	2500      	movs	r5, #0
    524a:	4669      	mov	r1, sp
    524c:	2003      	movs	r0, #3
    524e:	9500      	str	r5, [sp, #0]
    5250:	f7fc fb8c 	bl	196c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5254:	9800      	ldr	r0, [sp, #0]
    5256:	b128      	cbz	r0, 5264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5258:	7205      	strb	r5, [r0, #8]
    525a:	222a      	movs	r2, #42	; 0x2a
    525c:	6861      	ldr	r1, [r4, #4]
    525e:	9800      	ldr	r0, [sp, #0]
    5260:	f008 fc25 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5264:	4630      	mov	r0, r6
    5266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5268:	200000fc 	.word	0x200000fc
    526c:	200001c0 	.word	0x200001c0
    5270:	b570      	push	{r4, r5, r6, lr}
    5272:	4d28      	ldr	r5, [pc, #160]	; (5314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5274:	2000      	movs	r0, #0
    5276:	78a9      	ldrb	r1, [r5, #2]
    5278:	07c9      	lsls	r1, r1, #31
    527a:	d017      	beq.n	52ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>
    527c:	68e8      	ldr	r0, [r5, #12]
    527e:	f105 0410 	add.w	r4, r5, #16
    5282:	2301      	movs	r3, #1
    5284:	78c6      	ldrb	r6, [r0, #3]
    5286:	6860      	ldr	r0, [r4, #4]
    5288:	2105      	movs	r1, #5
    528a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    528e:	3080      	adds	r0, #128	; 0x80
    5290:	f008 f876 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5294:	b158      	cbz	r0, 52ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ea>
    5296:	1eb6      	subs	r6, r6, #2
    5298:	2e0a      	cmp	r6, #10
    529a:	d206      	bcs.n	52aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    529c:	e8df f006 	tbb	[pc, r6]
    52a0:	05050707 	.word	0x05050707
    52a4:	05050707 	.word	0x05050707
    52a8:	0707      	.short	0x0707
    52aa:	2008      	movs	r0, #8
    52ac:	bd70      	pop	{r4, r5, r6, pc}
    52ae:	68e8      	ldr	r0, [r5, #12]
    52b0:	f7fd fa78 	bl	27a4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    52b4:	b338      	cbz	r0, 5306 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    52b6:	68e8      	ldr	r0, [r5, #12]
    52b8:	78c5      	ldrb	r5, [r0, #3]
    52ba:	b11d      	cbz	r5, 52c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    52bc:	2d01      	cmp	r5, #1
    52be:	d001      	beq.n	52c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    52c0:	2d16      	cmp	r5, #22
    52c2:	d113      	bne.n	52ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    52c4:	6860      	ldr	r0, [r4, #4]
    52c6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    52ca:	f008 f8b1 	bl	d430 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    52ce:	b168      	cbz	r0, 52ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    52d0:	6861      	ldr	r1, [r4, #4]
    52d2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    52d6:	2820      	cmp	r0, #32
    52d8:	d008      	beq.n	52ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    52da:	2821      	cmp	r0, #33	; 0x21
    52dc:	d003      	beq.n	52e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    52de:	2d16      	cmp	r5, #22
    52e0:	d00f      	beq.n	5302 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    52e2:	2002      	movs	r0, #2
    52e4:	bd70      	pop	{r4, r5, r6, pc}
    52e6:	202e      	movs	r0, #46	; 0x2e
    52e8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    52ec:	2d2b      	cmp	r5, #43	; 0x2b
    52ee:	d20a      	bcs.n	5306 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    52f0:	4809      	ldr	r0, [pc, #36]	; (5318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    52f2:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    52f6:	b131      	cbz	r1, 5306 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    52f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52fc:	4805      	ldr	r0, [pc, #20]	; (5314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    52fe:	3010      	adds	r0, #16
    5300:	4708      	bx	r1
    5302:	2020      	movs	r0, #32
    5304:	bd70      	pop	{r4, r5, r6, pc}
    5306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    530a:	4802      	ldr	r0, [pc, #8]	; (5314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    530c:	3010      	adds	r0, #16
    530e:	f000 bd59 	b.w	5dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5312:	0000      	.short	0x0000
    5314:	200000fc 	.word	0x200000fc
    5318:	20000114 	.word	0x20000114
    531c:	b570      	push	{r4, r5, r6, lr}
    531e:	4e23      	ldr	r6, [pc, #140]	; (53ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>)
    5320:	78b0      	ldrb	r0, [r6, #2]
    5322:	0700      	lsls	r0, r0, #28
    5324:	d540      	bpl.n	53a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5326:	f106 0410 	add.w	r4, r6, #16
    532a:	6860      	ldr	r0, [r4, #4]
    532c:	3080      	adds	r0, #128	; 0x80
    532e:	f009 fc10 	bl	eb52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5332:	b148      	cbz	r0, 5348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    5334:	6860      	ldr	r0, [r4, #4]
    5336:	21fe      	movs	r1, #254	; 0xfe
    5338:	2500      	movs	r5, #0
    533a:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    533e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5342:	291a      	cmp	r1, #26
    5344:	d10c      	bne.n	5360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79c>
    5346:	e004      	b.n	5352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78e>
    5348:	f640 110e 	movw	r1, #2318	; 0x90e
    534c:	2031      	movs	r0, #49	; 0x31
    534e:	f7fb fb43 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5352:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5356:	f7ff fd43 	bl	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    535a:	6860      	ldr	r0, [r4, #4]
    535c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5360:	6860      	ldr	r0, [r4, #4]
    5362:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5366:	2920      	cmp	r1, #32
    5368:	d002      	beq.n	5370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    536a:	2931      	cmp	r1, #49	; 0x31
    536c:	d113      	bne.n	5396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    536e:	e00b      	b.n	5388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c4>
    5370:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5374:	f008 f85c 	bl	d430 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5378:	b108      	cbz	r0, 537e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ba>
    537a:	202e      	movs	r0, #46	; 0x2e
    537c:	e000      	b.n	5380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    537e:	2021      	movs	r0, #33	; 0x21
    5380:	6861      	ldr	r1, [r4, #4]
    5382:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5386:	e006      	b.n	5396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5388:	2101      	movs	r1, #1
    538a:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    538e:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5392:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5396:	6860      	ldr	r0, [r4, #4]
    5398:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    539c:	2907      	cmp	r1, #7
    539e:	d103      	bne.n	53a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    53a0:	2102      	movs	r1, #2
    53a2:	7031      	strb	r1, [r6, #0]
    53a4:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    53a8:	bd70      	pop	{r4, r5, r6, pc}
    53aa:	0000      	.short	0x0000
    53ac:	200000fc 	.word	0x200000fc
    53b0:	b538      	push	{r3, r4, r5, lr}
    53b2:	4605      	mov	r5, r0
    53b4:	4668      	mov	r0, sp
    53b6:	f7fc f973 	bl	16a0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    53ba:	b308      	cbz	r0, 5400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    53bc:	2222      	movs	r2, #34	; 0x22
    53be:	2100      	movs	r1, #0
    53c0:	9800      	ldr	r0, [sp, #0]
    53c2:	f00b f883 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    53c6:	2103      	movs	r1, #3
    53c8:	9800      	ldr	r0, [sp, #0]
    53ca:	f008 faf2 	bl	d9b2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    53ce:	9800      	ldr	r0, [sp, #0]
    53d0:	7801      	ldrb	r1, [r0, #0]
    53d2:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    53d6:	7001      	strb	r1, [r0, #0]
    53d8:	4629      	mov	r1, r5
    53da:	f7fd f9f3 	bl	27c4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    53de:	4c59      	ldr	r4, [pc, #356]	; (5544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    53e0:	2d11      	cmp	r5, #17
    53e2:	d02d      	beq.n	5440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87c>
    53e4:	dc0f      	bgt.n	5406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    53e6:	f1a5 0502 	sub.w	r5, r5, #2
    53ea:	2d0d      	cmp	r5, #13
    53ec:	d21f      	bcs.n	542e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    53ee:	e8df f005 	tbb	[pc, r5]
    53f2:	1e21      	.short	0x1e21
    53f4:	219e9e51 	.word	0x219e9e51
    53f8:	9e1e5e1e 	.word	0x9e1e5e1e
    53fc:	008c343a 	.word	0x008c343a
    5400:	f640 31b5 	movw	r1, #2997	; 0xbb5
    5404:	e099      	b.n	553a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5406:	2d17      	cmp	r5, #23
    5408:	d070      	beq.n	54ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    540a:	dc08      	bgt.n	541e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    540c:	f1a5 0512 	sub.w	r5, r5, #18
    5410:	2d05      	cmp	r5, #5
    5412:	d20c      	bcs.n	542e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5414:	e8df f005 	tbb	[pc, r5]
    5418:	50508b8b 	.word	0x50508b8b
    541c:	0033      	.short	0x0033
    541e:	2d23      	cmp	r5, #35	; 0x23
    5420:	d077      	beq.n	5512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5422:	2d24      	cmp	r5, #36	; 0x24
    5424:	d075      	beq.n	5512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5426:	2d25      	cmp	r5, #37	; 0x25
    5428:	d073      	beq.n	5512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    542a:	2dff      	cmp	r5, #255	; 0xff
    542c:	d077      	beq.n	551e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    542e:	f640 4161 	movw	r1, #3169	; 0xc61
    5432:	e082      	b.n	553a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5434:	6860      	ldr	r0, [r4, #4]
    5436:	9900      	ldr	r1, [sp, #0]
    5438:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    543c:	7108      	strb	r0, [r1, #4]
    543e:	e076      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5440:	6860      	ldr	r0, [r4, #4]
    5442:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5446:	9800      	ldr	r0, [sp, #0]
    5448:	f008 fa9f 	bl	d98a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    544c:	6860      	ldr	r0, [r4, #4]
    544e:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5452:	9800      	ldr	r0, [sp, #0]
    5454:	f008 fa9d 	bl	d992 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5458:	e069      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    545a:	6861      	ldr	r1, [r4, #4]
    545c:	9800      	ldr	r0, [sp, #0]
    545e:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5462:	7101      	strb	r1, [r0, #4]
    5464:	e063      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5466:	9800      	ldr	r0, [sp, #0]
    5468:	210c      	movs	r1, #12
    546a:	7101      	strb	r1, [r0, #4]
    546c:	2159      	movs	r1, #89	; 0x59
    546e:	7141      	strb	r1, [r0, #5]
    5470:	2100      	movs	r1, #0
    5472:	7181      	strb	r1, [r0, #6]
    5474:	214b      	movs	r1, #75	; 0x4b
    5476:	71c1      	strb	r1, [r0, #7]
    5478:	2112      	movs	r1, #18
    547a:	7201      	strb	r1, [r0, #8]
    547c:	e057      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    547e:	9800      	ldr	r0, [sp, #0]
    5480:	f8d4 1004 	ldr.w	r1, [r4, #4]
    5484:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5488:	7101      	strb	r1, [r0, #4]
    548a:	6861      	ldr	r1, [r4, #4]
    548c:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5490:	7141      	strb	r1, [r0, #5]
    5492:	e04c      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5494:	6861      	ldr	r1, [r4, #4]
    5496:	9800      	ldr	r0, [sp, #0]
    5498:	f501 7110 	add.w	r1, r1, #576	; 0x240
    549c:	f008 fa30 	bl	d900 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    54a0:	6861      	ldr	r1, [r4, #4]
    54a2:	9800      	ldr	r0, [sp, #0]
    54a4:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    54a8:	f008 fa27 	bl	d8fa <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    54ac:	e03f      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    54ae:	4825      	ldr	r0, [pc, #148]	; (5544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    54b0:	9900      	ldr	r1, [sp, #0]
    54b2:	f7fd fcd7 	bl	2e64 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    54b6:	e03a      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    54b8:	6860      	ldr	r0, [r4, #4]
    54ba:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    54be:	9800      	ldr	r0, [sp, #0]
    54c0:	f008 fa7f 	bl	d9c2 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    54c4:	6860      	ldr	r0, [r4, #4]
    54c6:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    54ca:	9800      	ldr	r0, [sp, #0]
    54cc:	f008 fa7d 	bl	d9ca <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    54d0:	6860      	ldr	r0, [r4, #4]
    54d2:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    54d6:	9800      	ldr	r0, [sp, #0]
    54d8:	f008 fa7b 	bl	d9d2 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    54dc:	6860      	ldr	r0, [r4, #4]
    54de:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    54e2:	9800      	ldr	r0, [sp, #0]
    54e4:	f008 fa79 	bl	d9da <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    54e8:	e021      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    54ea:	e7ff      	b.n	54ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    54ec:	6861      	ldr	r1, [r4, #4]
    54ee:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    54f2:	2801      	cmp	r0, #1
    54f4:	9800      	ldr	r0, [sp, #0]
    54f6:	d0c5      	beq.n	5484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c0>
    54f8:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    54fc:	7101      	strb	r1, [r0, #4]
    54fe:	6861      	ldr	r1, [r4, #4]
    5500:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5504:	e7c4      	b.n	5490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8cc>
    5506:	e004      	b.n	5512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5508:	e009      	b.n	551e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    550a:	9800      	ldr	r0, [sp, #0]
    550c:	f7fd fc5a 	bl	2dc4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5510:	e00d      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5512:	4a0c      	ldr	r2, [pc, #48]	; (5544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5514:	4628      	mov	r0, r5
    5516:	9900      	ldr	r1, [sp, #0]
    5518:	f009 fd3b 	bl	ef92 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    551c:	e007      	b.n	552e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    551e:	6860      	ldr	r0, [r4, #4]
    5520:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5524:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5528:	9800      	ldr	r0, [sp, #0]
    552a:	f008 fa34 	bl	d996 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    552e:	f7fc f891 	bl	1654 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5532:	2800      	cmp	r0, #0
    5534:	d104      	bne.n	5540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97c>
    5536:	f640 4165 	movw	r1, #3173	; 0xc65
    553a:	2031      	movs	r0, #49	; 0x31
    553c:	f7fb fa4c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5540:	bd38      	pop	{r3, r4, r5, pc}
    5542:	0000      	.short	0x0000
    5544:	2000010c 	.word	0x2000010c
    5548:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    554c:	4e8c      	ldr	r6, [pc, #560]	; (5780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>)
    554e:	468a      	mov	sl, r1
    5550:	6870      	ldr	r0, [r6, #4]
    5552:	8800      	ldrh	r0, [r0, #0]
    5554:	f7fb fe52 	bl	11fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5558:	0007      	movs	r7, r0
    555a:	d00c      	beq.n	5576 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    555c:	f1a6 0510 	sub.w	r5, r6, #16
    5560:	f04f 0400 	mov.w	r4, #0
    5564:	8868      	ldrh	r0, [r5, #2]
    5566:	05c0      	lsls	r0, r0, #23
    5568:	d50a      	bpl.n	5580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9bc>
    556a:	6870      	ldr	r0, [r6, #4]
    556c:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5570:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5574:	e009      	b.n	558a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c6>
    5576:	f640 7145 	movw	r1, #3909	; 0xf45
    557a:	2031      	movs	r0, #49	; 0x31
    557c:	f7fb fa2c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5580:	6871      	ldr	r1, [r6, #4]
    5582:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5586:	1c40      	adds	r0, r0, #1
    5588:	8008      	strh	r0, [r1, #0]
    558a:	f000 ff43 	bl	6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    558e:	f04f 0901 	mov.w	r9, #1
    5592:	b340      	cbz	r0, 55e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5594:	8868      	ldrh	r0, [r5, #2]
    5596:	0500      	lsls	r0, r0, #20
    5598:	d506      	bpl.n	55a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    559a:	6870      	ldr	r0, [r6, #4]
    559c:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    55a0:	b111      	cbz	r1, 55a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    55a2:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    55a6:	e01e      	b.n	55e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    55a8:	6870      	ldr	r0, [r6, #4]
    55aa:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    55ae:	1c49      	adds	r1, r1, #1
    55b0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    55b4:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    55b8:	428a      	cmp	r2, r1
    55ba:	d301      	bcc.n	55c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    55bc:	1a53      	subs	r3, r2, r1
    55be:	e000      	b.n	55c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fe>
    55c0:	2300      	movs	r3, #0
    55c2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    55c6:	f10c 0c05 	add.w	ip, ip, #5
    55ca:	4563      	cmp	r3, ip
    55cc:	d801      	bhi.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    55ce:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    55d2:	4291      	cmp	r1, r2
    55d4:	d307      	bcc.n	55e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    55d6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    55da:	220f      	movs	r2, #15
    55dc:	4969      	ldr	r1, [pc, #420]	; (5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    55de:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    55e2:	f008 fa78 	bl	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    55e6:	8868      	ldrh	r0, [r5, #2]
    55e8:	f04f 0b02 	mov.w	fp, #2
    55ec:	f410 7f40 	tst.w	r0, #768	; 0x300
    55f0:	d00e      	beq.n	5610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    55f2:	6870      	ldr	r0, [r6, #4]
    55f4:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    55f8:	b111      	cbz	r1, 5600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa3c>
    55fa:	2903      	cmp	r1, #3
    55fc:	d108      	bne.n	5610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    55fe:	e002      	b.n	5606 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa42>
    5600:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5604:	e001      	b.n	560a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa46>
    5606:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    560a:	2101      	movs	r1, #1
    560c:	f7fe fdd0 	bl	41b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5610:	6870      	ldr	r0, [r6, #4]
    5612:	46b0      	mov	r8, r6
    5614:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5618:	2901      	cmp	r1, #1
    561a:	d104      	bne.n	5626 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    561c:	8869      	ldrh	r1, [r5, #2]
    561e:	0549      	lsls	r1, r1, #21
    5620:	d501      	bpl.n	5626 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    5622:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5626:	9900      	ldr	r1, [sp, #0]
    5628:	2900      	cmp	r1, #0
    562a:	d179      	bne.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    562c:	78a9      	ldrb	r1, [r5, #2]
    562e:	0649      	lsls	r1, r1, #25
    5630:	d502      	bpl.n	5638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa74>
    5632:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5636:	e004      	b.n	5642 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    5638:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    563c:	1c49      	adds	r1, r1, #1
    563e:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5642:	4650      	mov	r0, sl
    5644:	f7ff fdb8 	bl	51b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    5648:	ea40 000a 	orr.w	r0, r0, sl
    564c:	4682      	mov	sl, r0
    564e:	f7ff fd37 	bl	50c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>
    5652:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5656:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    565a:	1c40      	adds	r0, r0, #1
    565c:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    5660:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    5664:	b128      	cbz	r0, 5672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaae>
    5666:	f7fc f9bf 	bl	19e8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    566a:	b1b0      	cbz	r0, 569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    566c:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5670:	e013      	b.n	569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    5672:	f7fc f897 	bl	17a4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    5676:	b108      	cbz	r0, 567c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    5678:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    567c:	f7fc f88c 	bl	1798 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    5680:	b158      	cbz	r0, 569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    5682:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    5686:	1c40      	adds	r0, r0, #1
    5688:	b2c0      	uxtb	r0, r0
    568a:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    568e:	2802      	cmp	r0, #2
    5690:	d903      	bls.n	569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    5692:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5696:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    569a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    569e:	4646      	mov	r6, r8
    56a0:	2301      	movs	r3, #1
    56a2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    56a6:	2100      	movs	r1, #0
    56a8:	3080      	adds	r0, #128	; 0x80
    56aa:	f007 fe69 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56ae:	b920      	cbnz	r0, 56ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf6>
    56b0:	6870      	ldr	r0, [r6, #4]
    56b2:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    56b6:	280b      	cmp	r0, #11
    56b8:	d15f      	bne.n	577a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    56ba:	6870      	ldr	r0, [r6, #4]
    56bc:	2301      	movs	r3, #1
    56be:	2100      	movs	r1, #0
    56c0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    56c4:	3080      	adds	r0, #128	; 0x80
    56c6:	f007 fe5b 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56ca:	b350      	cbz	r0, 5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    56cc:	6870      	ldr	r0, [r6, #4]
    56ce:	2301      	movs	r3, #1
    56d0:	2100      	movs	r1, #0
    56d2:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    56d6:	3080      	adds	r0, #128	; 0x80
    56d8:	f007 fe52 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56dc:	b308      	cbz	r0, 5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    56de:	6870      	ldr	r0, [r6, #4]
    56e0:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    56e4:	2902      	cmp	r1, #2
    56e6:	d148      	bne.n	577a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    56e8:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    56ec:	b9c8      	cbnz	r0, 5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    56ee:	4638      	mov	r0, r7
    56f0:	f007 f94d 	bl	c98e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    56f4:	b1a8      	cbz	r0, 5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    56f6:	6870      	ldr	r0, [r6, #4]
    56f8:	3080      	adds	r0, #128	; 0x80
    56fa:	f009 fa2a 	bl	eb52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    56fe:	b980      	cbnz	r0, 5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    5700:	6871      	ldr	r1, [r6, #4]
    5702:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    5706:	2801      	cmp	r0, #1
    5708:	d937      	bls.n	577a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    570a:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    570e:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    5712:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    5716:	1e93      	subs	r3, r2, #2
    5718:	4298      	cmp	r0, r3
    571a:	db03      	blt.n	5724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    571c:	2001      	movs	r0, #1
    571e:	e004      	b.n	572a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    5720:	e01c      	b.n	575c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    5722:	e02a      	b.n	577a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    5724:	1a10      	subs	r0, r2, r0
    5726:	1e40      	subs	r0, r0, #1
    5728:	b280      	uxth	r0, r0
    572a:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    572e:	88aa      	ldrh	r2, [r5, #4]
    5730:	4293      	cmp	r3, r2
    5732:	d301      	bcc.n	5738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    5734:	2201      	movs	r2, #1
    5736:	e002      	b.n	573e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    5738:	1ad2      	subs	r2, r2, r3
    573a:	1c52      	adds	r2, r2, #1
    573c:	b292      	uxth	r2, r2
    573e:	4290      	cmp	r0, r2
    5740:	d900      	bls.n	5744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    5742:	4610      	mov	r0, r2
    5744:	2801      	cmp	r0, #1
    5746:	d101      	bne.n	574c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    5748:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    574c:	6871      	ldr	r1, [r6, #4]
    574e:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    5752:	4410      	add	r0, r2
    5754:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    5758:	f000 ff28 	bl	65ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e8>
    575c:	78a8      	ldrb	r0, [r5, #2]
    575e:	4652      	mov	r2, sl
    5760:	f3c0 1180 	ubfx	r1, r0, #6, #1
    5764:	9800      	ldr	r0, [sp, #0]
    5766:	f000 fe69 	bl	643c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1878>
    576a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    576e:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    5772:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5776:	f7fb bf57 	b.w	1628 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    577a:	2001      	movs	r0, #1
    577c:	6871      	ldr	r1, [r6, #4]
    577e:	e7e3      	b.n	5748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    5780:	2000010c 	.word	0x2000010c
    5784:	0000df39 	.word	0x0000df39
    5788:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    578a:	4c68      	ldr	r4, [pc, #416]	; (592c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    578c:	2301      	movs	r3, #1
    578e:	2100      	movs	r1, #0
    5790:	6860      	ldr	r0, [r4, #4]
    5792:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5796:	3080      	adds	r0, #128	; 0x80
    5798:	f007 fdf2 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    579c:	2800      	cmp	r0, #0
    579e:	d07a      	beq.n	5896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd2>
    57a0:	6860      	ldr	r0, [r4, #4]
    57a2:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    57a6:	2500      	movs	r5, #0
    57a8:	b139      	cbz	r1, 57ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    57aa:	2100      	movs	r1, #0
    57ac:	200e      	movs	r0, #14
    57ae:	f000 f8bf 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    57b2:	6860      	ldr	r0, [r4, #4]
    57b4:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    57b8:	e0b5      	b.n	5926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    57ba:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    57be:	b119      	cbz	r1, 57c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    57c0:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    57c4:	0789      	lsls	r1, r1, #30
    57c6:	d016      	beq.n	57f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    57c8:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    57cc:	f88d 1004 	strb.w	r1, [sp, #4]
    57d0:	9901      	ldr	r1, [sp, #4]
    57d2:	9101      	str	r1, [sp, #4]
    57d4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    57d8:	b141      	cbz	r1, 57ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    57da:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    57de:	f88d 1000 	strb.w	r1, [sp]
    57e2:	9900      	ldr	r1, [sp, #0]
    57e4:	9100      	str	r1, [sp, #0]
    57e6:	f89d 1000 	ldrb.w	r1, [sp]
    57ea:	b189      	cbz	r1, 5810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    57ec:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    57f0:	2901      	cmp	r1, #1
    57f2:	d030      	beq.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc92>
    57f4:	e040      	b.n	5878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    57f6:	2100      	movs	r1, #0
    57f8:	200c      	movs	r0, #12
    57fa:	f000 f899 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    57fe:	6860      	ldr	r0, [r4, #4]
    5800:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    5804:	f041 0101 	orr.w	r1, r1, #1
    5808:	7001      	strb	r1, [r0, #0]
    580a:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    580e:	e08a      	b.n	5926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    5810:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5814:	2925      	cmp	r1, #37	; 0x25
    5816:	d01c      	beq.n	5852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    5818:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    581c:	2925      	cmp	r1, #37	; 0x25
    581e:	d018      	beq.n	5852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    5820:	f05f 0300 	movs.w	r3, #0
    5824:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5828:	f500 7199 	add.w	r1, r0, #306	; 0x132
    582c:	f008 f969 	bl	db02 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5830:	6860      	ldr	r0, [r4, #4]
    5832:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    5836:	2100      	movs	r1, #0
    5838:	2014      	movs	r0, #20
    583a:	f000 f879 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    583e:	6861      	ldr	r1, [r4, #4]
    5840:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5844:	8bc2      	ldrh	r2, [r0, #30]
    5846:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    584a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    584c:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5850:	e069      	b.n	5926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    5852:	2301      	movs	r3, #1
    5854:	e7e6      	b.n	5824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5856:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    585a:	f88d 1000 	strb.w	r1, [sp]
    585e:	9900      	ldr	r1, [sp, #0]
    5860:	9100      	str	r1, [sp, #0]
    5862:	f89d 1000 	ldrb.w	r1, [sp]
    5866:	b939      	cbnz	r1, 5878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    5868:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    586c:	2301      	movs	r3, #1
    586e:	210b      	movs	r1, #11
    5870:	3080      	adds	r0, #128	; 0x80
    5872:	f007 fd85 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5876:	b178      	cbz	r0, 5898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    5878:	6860      	ldr	r0, [r4, #4]
    587a:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    587e:	f88d 1000 	strb.w	r1, [sp]
    5882:	9900      	ldr	r1, [sp, #0]
    5884:	9100      	str	r1, [sp, #0]
    5886:	f89d 1000 	ldrb.w	r1, [sp]
    588a:	b3b9      	cbz	r1, 58fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    588c:	2100      	movs	r1, #0
    588e:	2023      	movs	r0, #35	; 0x23
    5890:	f000 f84e 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5894:	e047      	b.n	5926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    5896:	e030      	b.n	58fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    5898:	6860      	ldr	r0, [r4, #4]
    589a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    589e:	f009 f960 	bl	eb62 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    58a2:	4605      	mov	r5, r0
    58a4:	6860      	ldr	r0, [r4, #4]
    58a6:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    58aa:	f009 f95a 	bl	eb62 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    58ae:	4606      	mov	r6, r0
    58b0:	6860      	ldr	r0, [r4, #4]
    58b2:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    58b6:	4628      	mov	r0, r5
    58b8:	f009 f95e 	bl	eb78 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    58bc:	b150      	cbz	r0, 58d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    58be:	6860      	ldr	r0, [r4, #4]
    58c0:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    58c4:	4630      	mov	r0, r6
    58c6:	f009 f957 	bl	eb78 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    58ca:	b118      	cbz	r0, 58d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    58cc:	2000      	movs	r0, #0
    58ce:	f000 f941 	bl	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    58d2:	e011      	b.n	58f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    58d4:	6860      	ldr	r0, [r4, #4]
    58d6:	2301      	movs	r3, #1
    58d8:	2103      	movs	r1, #3
    58da:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    58de:	3080      	adds	r0, #128	; 0x80
    58e0:	f007 fd4e 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58e4:	b940      	cbnz	r0, 58f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    58e6:	6860      	ldr	r0, [r4, #4]
    58e8:	2301      	movs	r3, #1
    58ea:	2102      	movs	r1, #2
    58ec:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    58f0:	3080      	adds	r0, #128	; 0x80
    58f2:	f007 fd45 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58f6:	b110      	cbz	r0, 58fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    58f8:	2000      	movs	r0, #0
    58fa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    58fc:	e002      	b.n	5904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    58fe:	2100      	movs	r1, #0
    5900:	2016      	movs	r0, #22
    5902:	e7c5      	b.n	5890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xccc>
    5904:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    5908:	f88d 0000 	strb.w	r0, [sp]
    590c:	9800      	ldr	r0, [sp, #0]
    590e:	9000      	str	r0, [sp, #0]
    5910:	f89d 0000 	ldrb.w	r0, [sp]
    5914:	2800      	cmp	r0, #0
    5916:	d0f0      	beq.n	58fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    5918:	2100      	movs	r1, #0
    591a:	2025      	movs	r0, #37	; 0x25
    591c:	f000 f808 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5920:	6860      	ldr	r0, [r4, #4]
    5922:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    5926:	2001      	movs	r0, #1
    5928:	e7e7      	b.n	58fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    592a:	0000      	.short	0x0000
    592c:	2000010c 	.word	0x2000010c
    5930:	b570      	push	{r4, r5, r6, lr}
    5932:	4c0d      	ldr	r4, [pc, #52]	; (5968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda4>)
    5934:	4606      	mov	r6, r0
    5936:	460d      	mov	r5, r1
    5938:	6860      	ldr	r0, [r4, #4]
    593a:	3080      	adds	r0, #128	; 0x80
    593c:	f009 f909 	bl	eb52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5940:	b120      	cbz	r0, 594c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    5942:	f640 416a 	movw	r1, #3178	; 0xc6a
    5946:	2031      	movs	r0, #49	; 0x31
    5948:	f7fb f846 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    594c:	6862      	ldr	r2, [r4, #4]
    594e:	2000      	movs	r0, #0
    5950:	2d01      	cmp	r5, #1
    5952:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    5956:	d004      	beq.n	5962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9e>
    5958:	f822 0fd2 	strh.w	r0, [r2, #210]!
    595c:	2001      	movs	r0, #1
    595e:	7110      	strb	r0, [r2, #4]
    5960:	bd70      	pop	{r4, r5, r6, pc}
    5962:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    5966:	bd70      	pop	{r4, r5, r6, pc}
    5968:	2000010c 	.word	0x2000010c
    596c:	b538      	push	{r3, r4, r5, lr}
    596e:	4c1f      	ldr	r4, [pc, #124]	; (59ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>)
    5970:	2500      	movs	r5, #0
    5972:	6860      	ldr	r0, [r4, #4]
    5974:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    5978:	2901      	cmp	r1, #1
    597a:	d00c      	beq.n	5996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd2>
    597c:	2902      	cmp	r1, #2
    597e:	d133      	bne.n	59e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    5980:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    5984:	2900      	cmp	r1, #0
    5986:	f04f 0106 	mov.w	r1, #6
    598a:	d01a      	beq.n	59c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfe>
    598c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5990:	2101      	movs	r1, #1
    5992:	2002      	movs	r0, #2
    5994:	e023      	b.n	59de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    5996:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    599a:	f88d 1000 	strb.w	r1, [sp]
    599e:	9900      	ldr	r1, [sp, #0]
    59a0:	9100      	str	r1, [sp, #0]
    59a2:	f89d 1000 	ldrb.w	r1, [sp]
    59a6:	2900      	cmp	r1, #0
    59a8:	d11e      	bne.n	59e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    59aa:	f500 7384 	add.w	r3, r0, #264	; 0x108
    59ae:	f500 710e 	add.w	r1, r0, #568	; 0x238
    59b2:	2200      	movs	r2, #0
    59b4:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    59b8:	f007 fc9a 	bl	d2f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    59bc:	2101      	movs	r1, #1
    59be:	2005      	movs	r0, #5
    59c0:	e00d      	b.n	59de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    59c2:	2003      	movs	r0, #3
    59c4:	f000 fcb4 	bl	6330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    59c8:	6860      	ldr	r0, [r4, #4]
    59ca:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    59ce:	0880      	lsrs	r0, r0, #2
    59d0:	f010 0f01 	tst.w	r0, #1
    59d4:	d001      	beq.n	59da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    59d6:	2011      	movs	r0, #17
    59d8:	e000      	b.n	59dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    59da:	200d      	movs	r0, #13
    59dc:	2101      	movs	r1, #1
    59de:	f7ff ffa7 	bl	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    59e2:	6860      	ldr	r0, [r4, #4]
    59e4:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    59e8:	bd38      	pop	{r3, r4, r5, pc}
    59ea:	0000      	.short	0x0000
    59ec:	2000010c 	.word	0x2000010c
    59f0:	b570      	push	{r4, r5, r6, lr}
    59f2:	4b2b      	ldr	r3, [pc, #172]	; (5aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xedc>)
    59f4:	4602      	mov	r2, r0
    59f6:	8858      	ldrh	r0, [r3, #2]
    59f8:	4310      	orrs	r0, r2
    59fa:	8058      	strh	r0, [r3, #2]
    59fc:	f103 0010 	add.w	r0, r3, #16
    5a00:	2a40      	cmp	r2, #64	; 0x40
    5a02:	6840      	ldr	r0, [r0, #4]
    5a04:	d00d      	beq.n	5a22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    5a06:	0796      	lsls	r6, r2, #30
    5a08:	f04f 0500 	mov.w	r5, #0
    5a0c:	f04f 0401 	mov.w	r4, #1
    5a10:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    5a14:	d50c      	bpl.n	5a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    5a16:	b14e      	cbz	r6, 5a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>
    5a18:	f640 61b2 	movw	r1, #3762	; 0xeb2
    5a1c:	2031      	movs	r0, #49	; 0x31
    5a1e:	f7fa ffdb 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a26:	2104      	movs	r1, #4
    5a28:	f7fe bbc2 	b.w	41b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5a2c:	6099      	str	r1, [r3, #8]
    5a2e:	e01c      	b.n	5a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    5a30:	b1c6      	cbz	r6, 5a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5a32:	60d9      	str	r1, [r3, #12]
    5a34:	78c9      	ldrb	r1, [r1, #3]
    5a36:	2906      	cmp	r1, #6
    5a38:	d002      	beq.n	5a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    5a3a:	290b      	cmp	r1, #11
    5a3c:	d112      	bne.n	5a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5a3e:	e009      	b.n	5a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>
    5a40:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5a44:	2918      	cmp	r1, #24
    5a46:	d10d      	bne.n	5a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5a48:	2100      	movs	r1, #0
    5a4a:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    5a4e:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    5a52:	e007      	b.n	5a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5a54:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5a58:	2912      	cmp	r1, #18
    5a5a:	d103      	bne.n	5a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5a5c:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    5a60:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    5a64:	0791      	lsls	r1, r2, #30
    5a66:	d516      	bpl.n	5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    5a68:	6899      	ldr	r1, [r3, #8]
    5a6a:	78c9      	ldrb	r1, [r1, #3]
    5a6c:	2905      	cmp	r1, #5
    5a6e:	d002      	beq.n	5a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    5a70:	290b      	cmp	r1, #11
    5a72:	d110      	bne.n	5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    5a74:	e009      	b.n	5a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec6>
    5a76:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5a7a:	2916      	cmp	r1, #22
    5a7c:	d10b      	bne.n	5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    5a7e:	2100      	movs	r1, #0
    5a80:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    5a84:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    5a88:	e005      	b.n	5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    5a8a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5a8e:	2911      	cmp	r1, #17
    5a90:	d101      	bne.n	5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    5a92:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    5a96:	0690      	lsls	r0, r2, #26
    5a98:	d501      	bpl.n	5a9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    5a9a:	2008      	movs	r0, #8
    5a9c:	7058      	strb	r0, [r3, #1]
    5a9e:	bd70      	pop	{r4, r5, r6, pc}
    5aa0:	200000fc 	.word	0x200000fc
    5aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aa8:	4c29      	ldr	r4, [pc, #164]	; (5b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    5aaa:	2501      	movs	r5, #1
    5aac:	6863      	ldr	r3, [r4, #4]
    5aae:	f893 12ce 	ldrb.w	r1, [r3, #718]	; 0x2ce
    5ab2:	b109      	cbz	r1, 5ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    5ab4:	2701      	movs	r7, #1
    5ab6:	e000      	b.n	5aba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef6>
    5ab8:	2700      	movs	r7, #0
    5aba:	f893 02cf 	ldrb.w	r0, [r3, #719]	; 0x2cf
    5abe:	b108      	cbz	r0, 5ac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    5ac0:	2601      	movs	r6, #1
    5ac2:	e000      	b.n	5ac6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    5ac4:	2600      	movs	r6, #0
    5ac6:	b90f      	cbnz	r7, 5acc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    5ac8:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    5acc:	b90e      	cbnz	r6, 5ad2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    5ace:	f893 006b 	ldrb.w	r0, [r3, #107]	; 0x6b
    5ad2:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    5ad6:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
    5ada:	f103 0262 	add.w	r2, r3, #98	; 0x62
    5ade:	20ff      	movs	r0, #255	; 0xff
    5ae0:	7290      	strb	r0, [r2, #10]
    5ae2:	4618      	mov	r0, r3
    5ae4:	f009 fb17 	bl	f116 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    5ae8:	6860      	ldr	r0, [r4, #4]
    5aea:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    5aee:	2801      	cmp	r0, #1
    5af0:	d001      	beq.n	5af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    5af2:	b907      	cbnz	r7, 5af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    5af4:	b116      	cbz	r6, 5afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    5af6:	2000      	movs	r0, #0
    5af8:	f000 f82c 	bl	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    5afc:	6860      	ldr	r0, [r4, #4]
    5afe:	302c      	adds	r0, #44	; 0x2c
    5b00:	f008 f86e 	bl	dbe0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    5b04:	4606      	mov	r6, r0
    5b06:	6860      	ldr	r0, [r4, #4]
    5b08:	f008 f816 	bl	db38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5b0c:	b130      	cbz	r0, 5b1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf58>
    5b0e:	6861      	ldr	r1, [r4, #4]
    5b10:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    5b14:	f831 0b2c 	ldrh.w	r0, [r1], #44
    5b18:	f7fd f88e 	bl	2c38 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b1c:	2105      	movs	r1, #5
    5b1e:	6860      	ldr	r0, [r4, #4]
    5b20:	f7fe fb46 	bl	41b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5b24:	6860      	ldr	r0, [r4, #4]
    5b26:	302c      	adds	r0, #44	; 0x2c
    5b28:	f008 f85a 	bl	dbe0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    5b2c:	4604      	mov	r4, r0
    5b2e:	42a6      	cmp	r6, r4
    5b30:	d20a      	bcs.n	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    5b32:	f003 fdf5 	bl	9720 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    5b36:	4601      	mov	r1, r0
    5b38:	1ba0      	subs	r0, r4, r6
    5b3a:	2865      	cmp	r0, #101	; 0x65
    5b3c:	d200      	bcs.n	5b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>
    5b3e:	2065      	movs	r0, #101	; 0x65
    5b40:	f003 fd10 	bl	9564 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5b44:	b100      	cbz	r0, 5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    5b46:	2500      	movs	r5, #0
    5b48:	4628      	mov	r0, r5
    5b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b4e:	0000      	.short	0x0000
    5b50:	2000010c 	.word	0x2000010c
    5b54:	b510      	push	{r4, lr}
    5b56:	4c10      	ldr	r4, [pc, #64]	; (5b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>)
    5b58:	6861      	ldr	r1, [r4, #4]
    5b5a:	880a      	ldrh	r2, [r1, #0]
    5b5c:	f8a1 21a6 	strh.w	r2, [r1, #422]	; 0x1a6
    5b60:	f881 01a4 	strb.w	r0, [r1, #420]	; 0x1a4
    5b64:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    5b68:	f008 fffb 	bl	eb62 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5b6c:	6861      	ldr	r1, [r4, #4]
    5b6e:	f881 01a8 	strb.w	r0, [r1, #424]	; 0x1a8
    5b72:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    5b76:	f008 fff4 	bl	eb62 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5b7a:	6863      	ldr	r3, [r4, #4]
    5b7c:	2215      	movs	r2, #21
    5b7e:	4907      	ldr	r1, [pc, #28]	; (5b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    5b80:	f883 01a9 	strb.w	r0, [r3, #425]	; 0x1a9
    5b84:	f503 70cd 	add.w	r0, r3, #410	; 0x19a
    5b88:	f007 ffa5 	bl	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5b8c:	6861      	ldr	r1, [r4, #4]
    5b8e:	2000      	movs	r0, #0
    5b90:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
    5b94:	bd10      	pop	{r4, pc}
    5b96:	0000      	.short	0x0000
    5b98:	2000010c 	.word	0x2000010c
    5b9c:	0000ff05 	.word	0x0000ff05
    5ba0:	b570      	push	{r4, r5, r6, lr}
    5ba2:	4d0f      	ldr	r5, [pc, #60]	; (5be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    5ba4:	686c      	ldr	r4, [r5, #4]
    5ba6:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    5baa:	2921      	cmp	r1, #33	; 0x21
    5bac:	d002      	beq.n	5bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    5bae:	292e      	cmp	r1, #46	; 0x2e
    5bb0:	d003      	beq.n	5bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    5bb2:	e011      	b.n	5bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    5bb4:	f7ff ffce 	bl	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    5bb8:	e008      	b.n	5bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    5bba:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    5bbe:	f104 0080 	add.w	r0, r4, #128	; 0x80
    5bc2:	2301      	movs	r3, #1
    5bc4:	210b      	movs	r1, #11
    5bc6:	f007 fbdb 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bca:	b138      	cbz	r0, 5bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    5bcc:	6869      	ldr	r1, [r5, #4]
    5bce:	2000      	movs	r0, #0
    5bd0:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5bd4:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    5bd8:	2000      	movs	r0, #0
    5bda:	bd70      	pop	{r4, r5, r6, pc}
    5bdc:	202a      	movs	r0, #42	; 0x2a
    5bde:	e7e9      	b.n	5bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    5be0:	2000010c 	.word	0x2000010c
    5be4:	b570      	push	{r4, r5, r6, lr}
    5be6:	4604      	mov	r4, r0
    5be8:	6840      	ldr	r0, [r0, #4]
    5bea:	2301      	movs	r3, #1
    5bec:	2100      	movs	r1, #0
    5bee:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5bf2:	3080      	adds	r0, #128	; 0x80
    5bf4:	f007 fbc4 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bf8:	b1b8      	cbz	r0, 5c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    5bfa:	4d13      	ldr	r5, [pc, #76]	; (5c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    5bfc:	68e8      	ldr	r0, [r5, #12]
    5bfe:	f007 fe2a 	bl	d856 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    5c02:	6861      	ldr	r1, [r4, #4]
    5c04:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    5c08:	6861      	ldr	r1, [r4, #4]
    5c0a:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    5c0e:	f008 ffc1 	bl	eb94 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    5c12:	b160      	cbz	r0, 5c2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    5c14:	6861      	ldr	r1, [r4, #4]
    5c16:	2028      	movs	r0, #40	; 0x28
    5c18:	220b      	movs	r2, #11
    5c1a:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    5c1e:	6860      	ldr	r0, [r4, #4]
    5c20:	490a      	ldr	r1, [pc, #40]	; (5c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1088>)
    5c22:	30b4      	adds	r0, #180	; 0xb4
    5c24:	f007 ff43 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5c28:	e00b      	b.n	5c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    5c2a:	2001      	movs	r0, #1
    5c2c:	bd70      	pop	{r4, r5, r6, pc}
    5c2e:	6861      	ldr	r1, [r4, #4]
    5c30:	68e8      	ldr	r0, [r5, #12]
    5c32:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    5c36:	f007 fe09 	bl	d84c <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    5c3a:	6861      	ldr	r1, [r4, #4]
    5c3c:	200a      	movs	r0, #10
    5c3e:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5c42:	2000      	movs	r0, #0
    5c44:	bd70      	pop	{r4, r5, r6, pc}
    5c46:	0000      	.short	0x0000
    5c48:	200000fc 	.word	0x200000fc
    5c4c:	0000dded 	.word	0x0000dded
    5c50:	b570      	push	{r4, r5, r6, lr}
    5c52:	4604      	mov	r4, r0
    5c54:	6840      	ldr	r0, [r0, #4]
    5c56:	2301      	movs	r3, #1
    5c58:	2100      	movs	r1, #0
    5c5a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c5e:	3080      	adds	r0, #128	; 0x80
    5c60:	f007 fb8e 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c64:	b1e0      	cbz	r0, 5ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    5c66:	4d28      	ldr	r5, [pc, #160]	; (5d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1144>)
    5c68:	2100      	movs	r1, #0
    5c6a:	68e8      	ldr	r0, [r5, #12]
    5c6c:	f007 fdf6 	bl	d85c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    5c70:	b1c0      	cbz	r0, 5ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e0>
    5c72:	68e8      	ldr	r0, [r5, #12]
    5c74:	6861      	ldr	r1, [r4, #4]
    5c76:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    5c7a:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    5c7e:	6861      	ldr	r1, [r4, #4]
    5c80:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    5c84:	f008 ff86 	bl	eb94 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    5c88:	b188      	cbz	r0, 5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ea>
    5c8a:	6861      	ldr	r1, [r4, #4]
    5c8c:	2028      	movs	r0, #40	; 0x28
    5c8e:	220b      	movs	r2, #11
    5c90:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    5c94:	6860      	ldr	r0, [r4, #4]
    5c96:	491d      	ldr	r1, [pc, #116]	; (5d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>)
    5c98:	30b4      	adds	r0, #180	; 0xb4
    5c9a:	f007 ff08 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5c9e:	e030      	b.n	5d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113e>
    5ca0:	2001      	movs	r0, #1
    5ca2:	bd70      	pop	{r4, r5, r6, pc}
    5ca4:	4620      	mov	r0, r4
    5ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5caa:	f000 b88b 	b.w	5dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5cae:	68e8      	ldr	r0, [r5, #12]
    5cb0:	f007 fdfe 	bl	d8b0 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    5cb4:	f007 fb47 	bl	d346 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    5cb8:	4606      	mov	r6, r0
    5cba:	6860      	ldr	r0, [r4, #4]
    5cbc:	4631      	mov	r1, r6
    5cbe:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    5cc2:	68e8      	ldr	r0, [r5, #12]
    5cc4:	7900      	ldrb	r0, [r0, #4]
    5cc6:	f007 fcba 	bl	d63e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    5cca:	6861      	ldr	r1, [r4, #4]
    5ccc:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    5cd0:	68e8      	ldr	r0, [r5, #12]
    5cd2:	4631      	mov	r1, r6
    5cd4:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    5cd8:	f007 fcad 	bl	d636 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    5cdc:	6861      	ldr	r1, [r4, #4]
    5cde:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    5ce2:	68e8      	ldr	r0, [r5, #12]
    5ce4:	f007 fde7 	bl	d8b6 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    5ce8:	6861      	ldr	r1, [r4, #4]
    5cea:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    5cee:	68e8      	ldr	r0, [r5, #12]
    5cf0:	f007 fde4 	bl	d8bc <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    5cf4:	6861      	ldr	r1, [r4, #4]
    5cf6:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    5cfa:	6861      	ldr	r1, [r4, #4]
    5cfc:	200d      	movs	r0, #13
    5cfe:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5d02:	2000      	movs	r0, #0
    5d04:	bd70      	pop	{r4, r5, r6, pc}
    5d06:	0000      	.short	0x0000
    5d08:	200000fc 	.word	0x200000fc
    5d0c:	0000dded 	.word	0x0000dded
    5d10:	b570      	push	{r4, r5, r6, lr}
    5d12:	4604      	mov	r4, r0
    5d14:	6840      	ldr	r0, [r0, #4]
    5d16:	2301      	movs	r3, #1
    5d18:	2100      	movs	r1, #0
    5d1a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d1e:	3080      	adds	r0, #128	; 0x80
    5d20:	f007 fb2e 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d24:	b970      	cbnz	r0, 5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    5d26:	6860      	ldr	r0, [r4, #4]
    5d28:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d2c:	2a13      	cmp	r2, #19
    5d2e:	d009      	beq.n	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    5d30:	2301      	movs	r3, #1
    5d32:	2105      	movs	r1, #5
    5d34:	3080      	adds	r0, #128	; 0x80
    5d36:	f007 fb23 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d3a:	b108      	cbz	r0, 5d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>
    5d3c:	2008      	movs	r0, #8
    5d3e:	bd70      	pop	{r4, r5, r6, pc}
    5d40:	2001      	movs	r0, #1
    5d42:	bd70      	pop	{r4, r5, r6, pc}
    5d44:	6860      	ldr	r0, [r4, #4]
    5d46:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    5d4a:	b908      	cbnz	r0, 5d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118c>
    5d4c:	f7ff f83c 	bl	4dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5d50:	4d14      	ldr	r5, [pc, #80]	; (5da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e0>)
    5d52:	6861      	ldr	r1, [r4, #4]
    5d54:	f501 710e 	add.w	r1, r1, #568	; 0x238
    5d58:	68e8      	ldr	r0, [r5, #12]
    5d5a:	f007 fdc8 	bl	d8ee <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    5d5e:	6861      	ldr	r1, [r4, #4]
    5d60:	68e8      	ldr	r0, [r5, #12]
    5d62:	f501 718c 	add.w	r1, r1, #280	; 0x118
    5d66:	f007 fdb9 	bl	d8dc <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    5d6a:	6860      	ldr	r0, [r4, #4]
    5d6c:	8801      	ldrh	r1, [r0, #0]
    5d6e:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    5d72:	6861      	ldr	r1, [r4, #4]
    5d74:	68e8      	ldr	r0, [r5, #12]
    5d76:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    5d7a:	f007 fdb3 	bl	d8e4 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    5d7e:	6861      	ldr	r1, [r4, #4]
    5d80:	68e8      	ldr	r0, [r5, #12]
    5d82:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    5d86:	f007 fda6 	bl	d8d6 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    5d8a:	6860      	ldr	r0, [r4, #4]
    5d8c:	220a      	movs	r2, #10
    5d8e:	4906      	ldr	r1, [pc, #24]	; (5da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>)
    5d90:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    5d94:	f007 fe8b 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d98:	6861      	ldr	r1, [r4, #4]
    5d9a:	2015      	movs	r0, #21
    5d9c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5da0:	2000      	movs	r0, #0
    5da2:	bd70      	pop	{r4, r5, r6, pc}
    5da4:	200000fc 	.word	0x200000fc
    5da8:	0000dea3 	.word	0x0000dea3
    5dac:	4901      	ldr	r1, [pc, #4]	; (5db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f0>)
    5dae:	68c9      	ldr	r1, [r1, #12]
    5db0:	f7fc bfe6 	b.w	2d80 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    5db4:	200000fc 	.word	0x200000fc
    5db8:	4901      	ldr	r1, [pc, #4]	; (5dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fc>)
    5dba:	68c9      	ldr	r1, [r1, #12]
    5dbc:	f7fd b810 	b.w	2de0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    5dc0:	200000fc 	.word	0x200000fc
    5dc4:	b510      	push	{r4, lr}
    5dc6:	6842      	ldr	r2, [r0, #4]
    5dc8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    5dcc:	070b      	lsls	r3, r1, #28
    5dce:	d501      	bpl.n	5dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    5dd0:	2001      	movs	r0, #1
    5dd2:	bd10      	pop	{r4, pc}
    5dd4:	f041 0108 	orr.w	r1, r1, #8
    5dd8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    5ddc:	4904      	ldr	r1, [pc, #16]	; (5df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122c>)
    5dde:	6840      	ldr	r0, [r0, #4]
    5de0:	68c9      	ldr	r1, [r1, #12]
    5de2:	78c9      	ldrb	r1, [r1, #3]
    5de4:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    5de8:	f7fe ffee 	bl	4dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5dec:	2000      	movs	r0, #0
    5dee:	bd10      	pop	{r4, pc}
    5df0:	200000fc 	.word	0x200000fc
    5df4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    5df8:	4605      	mov	r5, r0
    5dfa:	6840      	ldr	r0, [r0, #4]
    5dfc:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    5e00:	f010 0f30 	tst.w	r0, #48	; 0x30
    5e04:	d002      	beq.n	5e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1248>
    5e06:	2001      	movs	r0, #1
    5e08:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    5e0c:	4c31      	ldr	r4, [pc, #196]	; (5ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    5e0e:	68e0      	ldr	r0, [r4, #12]
    5e10:	f007 fd87 	bl	d922 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    5e14:	b330      	cbz	r0, 5e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a0>
    5e16:	68e0      	ldr	r0, [r4, #12]
    5e18:	f007 fd7d 	bl	d916 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    5e1c:	4680      	mov	r8, r0
    5e1e:	68e0      	ldr	r0, [r4, #12]
    5e20:	f007 fd7d 	bl	d91e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    5e24:	4607      	mov	r7, r0
    5e26:	68e0      	ldr	r0, [r4, #12]
    5e28:	f007 fd73 	bl	d912 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    5e2c:	4606      	mov	r6, r0
    5e2e:	68e0      	ldr	r0, [r4, #12]
    5e30:	f007 fd73 	bl	d91a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    5e34:	4601      	mov	r1, r0
    5e36:	f8cd 8000 	str.w	r8, [sp]
    5e3a:	6868      	ldr	r0, [r5, #4]
    5e3c:	463b      	mov	r3, r7
    5e3e:	4632      	mov	r2, r6
    5e40:	302c      	adds	r0, #44	; 0x2c
    5e42:	f007 ff07 	bl	dc54 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    5e46:	78a0      	ldrb	r0, [r4, #2]
    5e48:	0781      	lsls	r1, r0, #30
    5e4a:	f04f 0001 	mov.w	r0, #1
    5e4e:	d503      	bpl.n	5e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    5e50:	68a1      	ldr	r1, [r4, #8]
    5e52:	78c9      	ldrb	r1, [r1, #3]
    5e54:	2914      	cmp	r1, #20
    5e56:	d00a      	beq.n	5e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    5e58:	6869      	ldr	r1, [r5, #4]
    5e5a:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    5e5e:	291d      	cmp	r1, #29
    5e60:	d005      	beq.n	5e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    5e62:	e007      	b.n	5e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    5e64:	4628      	mov	r0, r5
    5e66:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    5e6a:	f7ff bfab 	b.w	5dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5e6e:	6869      	ldr	r1, [r5, #4]
    5e70:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    5e74:	6868      	ldr	r0, [r5, #4]
    5e76:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    5e7a:	2901      	cmp	r1, #1
    5e7c:	d011      	beq.n	5ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    5e7e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5e82:	f88d 1004 	strb.w	r1, [sp, #4]
    5e86:	9901      	ldr	r1, [sp, #4]
    5e88:	9101      	str	r1, [sp, #4]
    5e8a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5e8e:	b941      	cbnz	r1, 5ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    5e90:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5e94:	f88d 1000 	strb.w	r1, [sp]
    5e98:	9900      	ldr	r1, [sp, #0]
    5e9a:	9100      	str	r1, [sp, #0]
    5e9c:	f89d 1000 	ldrb.w	r1, [sp]
    5ea0:	b141      	cbz	r1, 5eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>
    5ea2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    5ea6:	f041 0110 	orr.w	r1, r1, #16
    5eaa:	6001      	str	r1, [r0, #0]
    5eac:	f7fe ff8c 	bl	4dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5eb0:	2000      	movs	r0, #0
    5eb2:	e7a9      	b.n	5e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1244>
    5eb4:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    5eb8:	f041 0120 	orr.w	r1, r1, #32
    5ebc:	6001      	str	r1, [r0, #0]
    5ebe:	4805      	ldr	r0, [pc, #20]	; (5ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    5ec0:	3010      	adds	r0, #16
    5ec2:	6843      	ldr	r3, [r0, #4]
    5ec4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5ec8:	8818      	ldrh	r0, [r3, #0]
    5eca:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    5ece:	f7fc fedd 	bl	2c8c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    5ed2:	e7eb      	b.n	5eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    5ed4:	200000fc 	.word	0x200000fc
    5ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5edc:	4604      	mov	r4, r0
    5ede:	6840      	ldr	r0, [r0, #4]
    5ee0:	2301      	movs	r3, #1
    5ee2:	210a      	movs	r1, #10
    5ee4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5ee8:	3080      	adds	r0, #128	; 0x80
    5eea:	f007 fa49 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5eee:	b370      	cbz	r0, 5f4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138a>
    5ef0:	4d18      	ldr	r5, [pc, #96]	; (5f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>)
    5ef2:	68e8      	ldr	r0, [r5, #12]
    5ef4:	f007 fd15 	bl	d922 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    5ef8:	b1e8      	cbz	r0, 5f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    5efa:	68e8      	ldr	r0, [r5, #12]
    5efc:	f007 fd0b 	bl	d916 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    5f00:	4607      	mov	r7, r0
    5f02:	68e8      	ldr	r0, [r5, #12]
    5f04:	f007 fd0b 	bl	d91e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    5f08:	4680      	mov	r8, r0
    5f0a:	68e8      	ldr	r0, [r5, #12]
    5f0c:	f007 fd01 	bl	d912 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    5f10:	4606      	mov	r6, r0
    5f12:	68e8      	ldr	r0, [r5, #12]
    5f14:	f007 fd01 	bl	d91a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    5f18:	4601      	mov	r1, r0
    5f1a:	9700      	str	r7, [sp, #0]
    5f1c:	6860      	ldr	r0, [r4, #4]
    5f1e:	4643      	mov	r3, r8
    5f20:	4632      	mov	r2, r6
    5f22:	302c      	adds	r0, #44	; 0x2c
    5f24:	f007 fe96 	bl	dc54 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    5f28:	6860      	ldr	r0, [r4, #4]
    5f2a:	f007 fe05 	bl	db38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5f2e:	2105      	movs	r1, #5
    5f30:	6860      	ldr	r0, [r4, #4]
    5f32:	f7fe f93d 	bl	41b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5f36:	6861      	ldr	r1, [r4, #4]
    5f38:	2000      	movs	r0, #0
    5f3a:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    5f3e:	6861      	ldr	r1, [r4, #4]
    5f40:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5f44:	f7ff f924 	bl	5190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    5f48:	2000      	movs	r0, #0
    5f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5f4e:	e7ff      	b.n	5f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    5f50:	2001      	movs	r0, #1
    5f52:	e7fa      	b.n	5f4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1386>
    5f54:	200000fc 	.word	0x200000fc
    5f58:	b538      	push	{r3, r4, r5, lr}
    5f5a:	4604      	mov	r4, r0
    5f5c:	6840      	ldr	r0, [r0, #4]
    5f5e:	2301      	movs	r3, #1
    5f60:	210b      	movs	r1, #11
    5f62:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5f66:	3080      	adds	r0, #128	; 0x80
    5f68:	f007 fa0a 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f6c:	bb60      	cbnz	r0, 5fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    5f6e:	6860      	ldr	r0, [r4, #4]
    5f70:	2301      	movs	r3, #1
    5f72:	2100      	movs	r1, #0
    5f74:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5f78:	3080      	adds	r0, #128	; 0x80
    5f7a:	f007 fa01 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f7e:	b308      	cbz	r0, 5fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    5f80:	6860      	ldr	r0, [r4, #4]
    5f82:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5f86:	2825      	cmp	r0, #37	; 0x25
    5f88:	d01e      	beq.n	5fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    5f8a:	4d2a      	ldr	r5, [pc, #168]	; (6034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    5f8c:	68e8      	ldr	r0, [r5, #12]
    5f8e:	f007 fcda 	bl	d946 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    5f92:	b1d8      	cbz	r0, 5fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1408>
    5f94:	68e8      	ldr	r0, [r5, #12]
    5f96:	6862      	ldr	r2, [r4, #4]
    5f98:	7941      	ldrb	r1, [r0, #5]
    5f9a:	f001 0107 	and.w	r1, r1, #7
    5f9e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    5fa2:	7900      	ldrb	r0, [r0, #4]
    5fa4:	f000 0107 	and.w	r1, r0, #7
    5fa8:	6860      	ldr	r0, [r4, #4]
    5faa:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    5fae:	6860      	ldr	r0, [r4, #4]
    5fb0:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
    5fb4:	f88d 2000 	strb.w	r2, [sp]
    5fb8:	9a00      	ldr	r2, [sp, #0]
    5fba:	9200      	str	r2, [sp, #0]
    5fbc:	f89d 2000 	ldrb.w	r2, [sp]
    5fc0:	bb7a      	cbnz	r2, 6022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    5fc2:	e008      	b.n	5fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1412>
    5fc4:	2001      	movs	r0, #1
    5fc6:	bd38      	pop	{r3, r4, r5, pc}
    5fc8:	2020      	movs	r0, #32
    5fca:	bd38      	pop	{r3, r4, r5, pc}
    5fcc:	4620      	mov	r0, r4
    5fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5fd2:	f7ff bef7 	b.w	5dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5fd6:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    5fda:	2a01      	cmp	r2, #1
    5fdc:	d021      	beq.n	6022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    5fde:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    5fe2:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    5fe6:	7855      	ldrb	r5, [r2, #1]
    5fe8:	428d      	cmp	r5, r1
    5fea:	d106      	bne.n	5ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    5fec:	7811      	ldrb	r1, [r2, #0]
    5fee:	4299      	cmp	r1, r3
    5ff0:	d103      	bne.n	5ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    5ff2:	2102      	movs	r1, #2
    5ff4:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    5ff8:	e013      	b.n	6022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    5ffa:	480e      	ldr	r0, [pc, #56]	; (6034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    5ffc:	3010      	adds	r0, #16
    5ffe:	6841      	ldr	r1, [r0, #4]
    6000:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    6004:	880a      	ldrh	r2, [r1, #0]
    6006:	f820 2b02 	strh.w	r2, [r0], #2
    600a:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    600e:	f800 2b01 	strb.w	r2, [r0], #1
    6012:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6016:	f800 190d 	strb.w	r1, [r0], #-13
    601a:	2222      	movs	r2, #34	; 0x22
    601c:	4906      	ldr	r1, [pc, #24]	; (6038 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1474>)
    601e:	f007 fd46 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6022:	6861      	ldr	r1, [r4, #4]
    6024:	2022      	movs	r0, #34	; 0x22
    6026:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    602a:	f7fe fecd 	bl	4dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    602e:	2000      	movs	r0, #0
    6030:	bd38      	pop	{r3, r4, r5, pc}
    6032:	0000      	.short	0x0000
    6034:	200000fc 	.word	0x200000fc
    6038:	0000ff2f 	.word	0x0000ff2f
    603c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6040:	6845      	ldr	r5, [r0, #4]
    6042:	4604      	mov	r4, r0
    6044:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    6048:	2821      	cmp	r0, #33	; 0x21
    604a:	d008      	beq.n	605e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149a>
    604c:	f05f 0600 	movs.w	r6, #0
    6050:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6054:	2823      	cmp	r0, #35	; 0x23
    6056:	d004      	beq.n	6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    6058:	b38e      	cbz	r6, 60be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fa>
    605a:	359d      	adds	r5, #157	; 0x9d
    605c:	e002      	b.n	6064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    605e:	2601      	movs	r6, #1
    6060:	e7f6      	b.n	6050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148c>
    6062:	359e      	adds	r5, #158	; 0x9e
    6064:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    6068:	f8d8 000c 	ldr.w	r0, [r8, #12]
    606c:	f007 fc77 	bl	d95e <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6070:	2700      	movs	r7, #0
    6072:	b340      	cbz	r0, 60c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6074:	4631      	mov	r1, r6
    6076:	f8d8 000c 	ldr.w	r0, [r8, #12]
    607a:	f7fe ff7f 	bl	4f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    607e:	b310      	cbz	r0, 60c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6080:	466a      	mov	r2, sp
    6082:	4646      	mov	r6, r8
    6084:	6860      	ldr	r0, [r4, #4]
    6086:	f8d8 100c 	ldr.w	r1, [r8, #12]
    608a:	f007 fa8e 	bl	d5aa <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    608e:	b3c0      	cbz	r0, 6102 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153e>
    6090:	68f0      	ldr	r0, [r6, #12]
    6092:	f007 fc62 	bl	d95a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6096:	6861      	ldr	r1, [r4, #4]
    6098:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    609c:	6861      	ldr	r1, [r4, #4]
    609e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    60a2:	f008 fd77 	bl	eb94 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    60a6:	b368      	cbz	r0, 6104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>
    60a8:	6861      	ldr	r1, [r4, #4]
    60aa:	2028      	movs	r0, #40	; 0x28
    60ac:	220b      	movs	r2, #11
    60ae:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    60b2:	6860      	ldr	r0, [r4, #4]
    60b4:	4935      	ldr	r1, [pc, #212]	; (618c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    60b6:	30b4      	adds	r0, #180	; 0xb4
    60b8:	f007 fcf9 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    60bc:	e058      	b.n	6170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    60be:	e7ff      	b.n	60c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fc>
    60c0:	2002      	movs	r0, #2
    60c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    60c6:	6860      	ldr	r0, [r4, #4]
    60c8:	f04f 0900 	mov.w	r9, #0
    60cc:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    60d0:	2901      	cmp	r1, #1
    60d2:	d018      	beq.n	6106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    60d4:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    60d8:	b30e      	cbz	r6, 611e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155a>
    60da:	f8d8 000c 	ldr.w	r0, [r8, #12]
    60de:	6861      	ldr	r1, [r4, #4]
    60e0:	2201      	movs	r2, #1
    60e2:	78c0      	ldrb	r0, [r0, #3]
    60e4:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    60e8:	4082      	lsls	r2, r0
    60ea:	6861      	ldr	r1, [r4, #4]
    60ec:	f3c2 6000 	ubfx	r0, r2, #24, #1
    60f0:	b168      	cbz	r0, 610e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    60f2:	2009      	movs	r0, #9
    60f4:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    60f8:	6860      	ldr	r0, [r4, #4]
    60fa:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    60fe:	b9a8      	cbnz	r0, 612c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1568>
    6100:	e008      	b.n	6114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1550>
    6102:	e015      	b.n	6130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    6104:	e028      	b.n	6158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1594>
    6106:	201e      	movs	r0, #30
    6108:	f7ff fd24 	bl	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    610c:	e7e4      	b.n	60d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1514>
    610e:	f240 4183 	movw	r1, #1155	; 0x483
    6112:	e001      	b.n	6118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    6114:	f240 418b 	movw	r1, #1163	; 0x48b
    6118:	2031      	movs	r0, #49	; 0x31
    611a:	f7fa fc5d 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    611e:	702f      	strb	r7, [r5, #0]
    6120:	f7fe fe5e 	bl	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6124:	4620      	mov	r0, r4
    6126:	f7ff fe4d 	bl	5dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    612a:	4681      	mov	r9, r0
    612c:	4648      	mov	r0, r9
    612e:	e7c8      	b.n	60c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6130:	6860      	ldr	r0, [r4, #4]
    6132:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6136:	2901      	cmp	r1, #1
    6138:	d009      	beq.n	614e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158a>
    613a:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    613e:	6860      	ldr	r0, [r4, #4]
    6140:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6144:	42a9      	cmp	r1, r5
    6146:	d113      	bne.n	6170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6148:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    614c:	e010      	b.n	6170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    614e:	2000      	movs	r0, #0
    6150:	f7ff fd00 	bl	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6154:	702f      	strb	r7, [r5, #0]
    6156:	e7f2      	b.n	613e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157a>
    6158:	6861      	ldr	r1, [r4, #4]
    615a:	f89d 0000 	ldrb.w	r0, [sp]
    615e:	f881 02ce 	strb.w	r0, [r1, #718]	; 0x2ce
    6162:	6861      	ldr	r1, [r4, #4]
    6164:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6168:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    616c:	2025      	movs	r0, #37	; 0x25
    616e:	7028      	strb	r0, [r5, #0]
    6170:	6860      	ldr	r0, [r4, #4]
    6172:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6176:	42a9      	cmp	r1, r5
    6178:	d102      	bne.n	6180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    617a:	f7fe fe31 	bl	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    617e:	e001      	b.n	6184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    6180:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6184:	2000      	movs	r0, #0
    6186:	e79c      	b.n	60c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6188:	200000fc 	.word	0x200000fc
    618c:	0000dded 	.word	0x0000dded
    6190:	b570      	push	{r4, r5, r6, lr}
    6192:	4604      	mov	r4, r0
    6194:	6840      	ldr	r0, [r0, #4]
    6196:	4d0a      	ldr	r5, [pc, #40]	; (61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6198:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    619c:	f041 0104 	orr.w	r1, r1, #4
    61a0:	7001      	strb	r1, [r0, #0]
    61a2:	68e8      	ldr	r0, [r5, #12]
    61a4:	f007 fbef 	bl	d986 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    61a8:	4606      	mov	r6, r0
    61aa:	68e8      	ldr	r0, [r5, #12]
    61ac:	f007 fbef 	bl	d98e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    61b0:	4601      	mov	r1, r0
    61b2:	4622      	mov	r2, r4
    61b4:	4630      	mov	r0, r6
    61b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61ba:	f000 b895 	b.w	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    61be:	0000      	.short	0x0000
    61c0:	200000fc 	.word	0x200000fc
    61c4:	4602      	mov	r2, r0
    61c6:	4813      	ldr	r0, [pc, #76]	; (6214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    61c8:	68c0      	ldr	r0, [r0, #12]
    61ca:	7901      	ldrb	r1, [r0, #4]
    61cc:	4811      	ldr	r0, [pc, #68]	; (6214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    61ce:	3010      	adds	r0, #16
    61d0:	6843      	ldr	r3, [r0, #4]
    61d2:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    61d6:	2821      	cmp	r0, #33	; 0x21
    61d8:	d010      	beq.n	61fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    61da:	282e      	cmp	r0, #46	; 0x2e
    61dc:	d00e      	beq.n	61fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    61de:	2828      	cmp	r0, #40	; 0x28
    61e0:	d00e      	beq.n	6200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163c>
    61e2:	2804      	cmp	r0, #4
    61e4:	d00e      	beq.n	6204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1640>
    61e6:	280f      	cmp	r0, #15
    61e8:	d00e      	beq.n	6208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    61ea:	281d      	cmp	r0, #29
    61ec:	d00e      	beq.n	620c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1648>
    61ee:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    61f2:	2823      	cmp	r0, #35	; 0x23
    61f4:	d00c      	beq.n	6210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164c>
    61f6:	20fe      	movs	r0, #254	; 0xfe
    61f8:	f000 b876 	b.w	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    61fc:	2016      	movs	r0, #22
    61fe:	e7fb      	b.n	61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6200:	2023      	movs	r0, #35	; 0x23
    6202:	e7f9      	b.n	61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6204:	200e      	movs	r0, #14
    6206:	e7f7      	b.n	61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6208:	2012      	movs	r0, #18
    620a:	e7f5      	b.n	61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    620c:	2014      	movs	r0, #20
    620e:	e7f3      	b.n	61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6210:	2017      	movs	r0, #23
    6212:	e7f1      	b.n	61f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6214:	200000fc 	.word	0x200000fc
    6218:	b510      	push	{r4, lr}
    621a:	4604      	mov	r4, r0
    621c:	6840      	ldr	r0, [r0, #4]
    621e:	2301      	movs	r3, #1
    6220:	4619      	mov	r1, r3
    6222:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6226:	3080      	adds	r0, #128	; 0x80
    6228:	f007 f8aa 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    622c:	b108      	cbz	r0, 6232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166e>
    622e:	2000      	movs	r0, #0
    6230:	bd10      	pop	{r4, pc}
    6232:	4806      	ldr	r0, [pc, #24]	; (624c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6234:	68c0      	ldr	r0, [r0, #12]
    6236:	f007 fbd4 	bl	d9e2 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    623a:	6861      	ldr	r1, [r4, #4]
    623c:	f881 00a0 	strb.w	r0, [r1, #160]	; 0xa0
    6240:	6861      	ldr	r1, [r4, #4]
    6242:	2006      	movs	r0, #6
    6244:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    6248:	e7f1      	b.n	622e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    624a:	0000      	.short	0x0000
    624c:	200000fc 	.word	0x200000fc
    6250:	b570      	push	{r4, r5, r6, lr}
    6252:	4604      	mov	r4, r0
    6254:	481f      	ldr	r0, [pc, #124]	; (62d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>)
    6256:	2500      	movs	r5, #0
    6258:	68c0      	ldr	r0, [r0, #12]
    625a:	7903      	ldrb	r3, [r0, #4]
    625c:	6860      	ldr	r0, [r4, #4]
    625e:	2b16      	cmp	r3, #22
    6260:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6264:	d013      	beq.n	628e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    6266:	dc06      	bgt.n	6276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    6268:	2b0e      	cmp	r3, #14
    626a:	d009      	beq.n	6280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    626c:	2b12      	cmp	r3, #18
    626e:	d007      	beq.n	6280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6270:	2b14      	cmp	r3, #20
    6272:	d12c      	bne.n	62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6274:	e004      	b.n	6280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6276:	2b17      	cmp	r3, #23
    6278:	d002      	beq.n	6280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    627a:	2b23      	cmp	r3, #35	; 0x23
    627c:	d127      	bne.n	62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    627e:	e01f      	b.n	62c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6280:	4622      	mov	r2, r4
    6282:	2101      	movs	r1, #1
    6284:	4618      	mov	r0, r3
    6286:	f008 fe32 	bl	eeee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    628a:	4605      	mov	r5, r0
    628c:	e01f      	b.n	62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    628e:	2821      	cmp	r0, #33	; 0x21
    6290:	d001      	beq.n	6296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    6292:	282e      	cmp	r0, #46	; 0x2e
    6294:	d11b      	bne.n	62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6296:	4620      	mov	r0, r4
    6298:	f008 fc88 	bl	ebac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    629c:	6860      	ldr	r0, [r4, #4]
    629e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    62a2:	2922      	cmp	r1, #34	; 0x22
    62a4:	d013      	beq.n	62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    62a6:	2108      	movs	r1, #8
    62a8:	30ec      	adds	r0, #236	; 0xec
    62aa:	f008 fc33 	bl	eb14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    62ae:	6860      	ldr	r0, [r4, #4]
    62b0:	210b      	movs	r1, #11
    62b2:	30ec      	adds	r0, #236	; 0xec
    62b4:	f008 fc2e 	bl	eb14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    62b8:	201a      	movs	r0, #26
    62ba:	f7ff fc4b 	bl	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    62be:	e006      	b.n	62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    62c0:	2828      	cmp	r0, #40	; 0x28
    62c2:	d104      	bne.n	62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    62c4:	4804      	ldr	r0, [pc, #16]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>)
    62c6:	6801      	ldr	r1, [r0, #0]
    62c8:	b109      	cbz	r1, 62ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    62ca:	4620      	mov	r0, r4
    62cc:	4788      	blx	r1
    62ce:	4628      	mov	r0, r5
    62d0:	bd70      	pop	{r4, r5, r6, pc}
    62d2:	0000      	.short	0x0000
    62d4:	200000fc 	.word	0x200000fc
    62d8:	20000270 	.word	0x20000270
    62dc:	4901      	ldr	r1, [pc, #4]	; (62e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1720>)
    62de:	68c9      	ldr	r1, [r1, #12]
    62e0:	f7fc bdf2 	b.w	2ec8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    62e4:	200000fc 	.word	0x200000fc
    62e8:	4603      	mov	r3, r0
    62ea:	2000      	movs	r0, #0
    62ec:	2b17      	cmp	r3, #23
    62ee:	d017      	beq.n	6320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    62f0:	dc0a      	bgt.n	6308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    62f2:	2b0e      	cmp	r3, #14
    62f4:	d014      	beq.n	6320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    62f6:	2b12      	cmp	r3, #18
    62f8:	d012      	beq.n	6320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    62fa:	2b14      	cmp	r3, #20
    62fc:	d010      	beq.n	6320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    62fe:	2b16      	cmp	r3, #22
    6300:	d112      	bne.n	6328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6302:	4608      	mov	r0, r1
    6304:	f7ff bc4c 	b.w	5ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    6308:	2b23      	cmp	r3, #35	; 0x23
    630a:	d003      	beq.n	6314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    630c:	2b24      	cmp	r3, #36	; 0x24
    630e:	d001      	beq.n	6314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6310:	2b25      	cmp	r3, #37	; 0x25
    6312:	d109      	bne.n	6328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6314:	4a05      	ldr	r2, [pc, #20]	; (632c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>)
    6316:	6812      	ldr	r2, [r2, #0]
    6318:	2a00      	cmp	r2, #0
    631a:	d005      	beq.n	6328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    631c:	4618      	mov	r0, r3
    631e:	4710      	bx	r2
    6320:	2100      	movs	r1, #0
    6322:	4618      	mov	r0, r3
    6324:	f008 bde3 	b.w	eeee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6328:	4770      	bx	lr
    632a:	0000      	.short	0x0000
    632c:	2000026c 	.word	0x2000026c
    6330:	4a03      	ldr	r2, [pc, #12]	; (6340 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177c>)
    6332:	6852      	ldr	r2, [r2, #4]
    6334:	f882 0123 	strb.w	r0, [r2, #291]	; 0x123
    6338:	f882 1122 	strb.w	r1, [r2, #290]	; 0x122
    633c:	4770      	bx	lr
    633e:	0000      	.short	0x0000
    6340:	2000010c 	.word	0x2000010c
    6344:	b570      	push	{r4, r5, r6, lr}
    6346:	4604      	mov	r4, r0
    6348:	6840      	ldr	r0, [r0, #4]
    634a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    634e:	291c      	cmp	r1, #28
    6350:	d004      	beq.n	635c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6352:	f640 014e 	movw	r1, #2126	; 0x84e
    6356:	2031      	movs	r0, #49	; 0x31
    6358:	f7fa fb3e 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    635c:	2500      	movs	r5, #0
    635e:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6362:	6860      	ldr	r0, [r4, #4]
    6364:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6368:	b161      	cbz	r1, 6384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    636a:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    636e:	6860      	ldr	r0, [r4, #4]
    6370:	220d      	movs	r2, #13
    6372:	8801      	ldrh	r1, [r0, #0]
    6374:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6378:	6860      	ldr	r0, [r4, #4]
    637a:	490d      	ldr	r1, [pc, #52]	; (63b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ec>)
    637c:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6380:	6860      	ldr	r0, [r4, #4]
    6382:	e00c      	b.n	639e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17da>
    6384:	8801      	ldrh	r1, [r0, #0]
    6386:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    638a:	6860      	ldr	r0, [r4, #4]
    638c:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6390:	6861      	ldr	r1, [r4, #4]
    6392:	2001      	movs	r0, #1
    6394:	220c      	movs	r2, #12
    6396:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    639a:	4906      	ldr	r1, [pc, #24]	; (63b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f0>)
    639c:	6860      	ldr	r0, [r4, #4]
    639e:	f200 200a 	addw	r0, r0, #522	; 0x20a
    63a2:	f007 fb84 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    63a6:	6860      	ldr	r0, [r4, #4]
    63a8:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    63ac:	bd70      	pop	{r4, r5, r6, pc}
    63ae:	0000      	.short	0x0000
    63b0:	0000de8d 	.word	0x0000de8d
    63b4:	0000de6f 	.word	0x0000de6f
    63b8:	4915      	ldr	r1, [pc, #84]	; (6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>)
    63ba:	b510      	push	{r4, lr}
    63bc:	6889      	ldr	r1, [r1, #8]
    63be:	790a      	ldrb	r2, [r1, #4]
    63c0:	6841      	ldr	r1, [r0, #4]
    63c2:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    63c6:	2b09      	cmp	r3, #9
    63c8:	d10a      	bne.n	63e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    63ca:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    63ce:	4293      	cmp	r3, r2
    63d0:	d106      	bne.n	63e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    63d2:	2200      	movs	r2, #0
    63d4:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    63d8:	6840      	ldr	r0, [r0, #4]
    63da:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    63de:	bd10      	pop	{r4, pc}
    63e0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    63e4:	071c      	lsls	r4, r3, #28
    63e6:	d507      	bpl.n	63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    63e8:	f023 0008 	bic.w	r0, r3, #8
    63ec:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    63f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    63f4:	f7fe bcf4 	b.w	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    63f8:	2aff      	cmp	r2, #255	; 0xff
    63fa:	d004      	beq.n	6406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1842>
    63fc:	f240 71ea 	movw	r1, #2026	; 0x7ea
    6400:	2031      	movs	r0, #49	; 0x31
    6402:	f7fa fae9 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    640a:	f008 bc85 	b.w	ed18 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    640e:	0000      	.short	0x0000
    6410:	200000fc 	.word	0x200000fc
    6414:	4808      	ldr	r0, [pc, #32]	; (6438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1874>)
    6416:	b510      	push	{r4, lr}
    6418:	6840      	ldr	r0, [r0, #4]
    641a:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    641e:	b941      	cbnz	r1, 6432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186e>
    6420:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6424:	2301      	movs	r3, #1
    6426:	2106      	movs	r1, #6
    6428:	3080      	adds	r0, #128	; 0x80
    642a:	f006 ffa9 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    642e:	2800      	cmp	r0, #0
    6430:	d000      	beq.n	6434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    6432:	2001      	movs	r0, #1
    6434:	bd10      	pop	{r4, pc}
    6436:	0000      	.short	0x0000
    6438:	2000010c 	.word	0x2000010c
    643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    643e:	4c59      	ldr	r4, [pc, #356]	; (65a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6440:	4606      	mov	r6, r0
    6442:	4615      	mov	r5, r2
    6444:	6860      	ldr	r0, [r4, #4]
    6446:	2200      	movs	r2, #0
    6448:	b111      	cbz	r1, 6450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    644a:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    644e:	e006      	b.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189a>
    6450:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6454:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6458:	4411      	add	r1, r2
    645a:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    645e:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6462:	f88d 1000 	strb.w	r1, [sp]
    6466:	9900      	ldr	r1, [sp, #0]
    6468:	9100      	str	r1, [sp, #0]
    646a:	f89d 1000 	ldrb.w	r1, [sp]
    646e:	b939      	cbnz	r1, 6480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6470:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6474:	2301      	movs	r3, #1
    6476:	4619      	mov	r1, r3
    6478:	3080      	adds	r0, #128	; 0x80
    647a:	f006 ff81 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    647e:	b130      	cbz	r0, 648e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    6480:	6860      	ldr	r0, [r4, #4]
    6482:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6486:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    648a:	4411      	add	r1, r2
    648c:	8001      	strh	r1, [r0, #0]
    648e:	6860      	ldr	r0, [r4, #4]
    6490:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6494:	b132      	cbz	r2, 64a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e0>
    6496:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    649a:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    649e:	4419      	add	r1, r3
    64a0:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    64a4:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    64a8:	2b00      	cmp	r3, #0
    64aa:	dd06      	ble.n	64ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f6>
    64ac:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    64b0:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    64b4:	4439      	add	r1, r7
    64b6:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    64ba:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    64be:	bb09      	cbnz	r1, 6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    64c0:	b9be      	cbnz	r6, 64f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192e>
    64c2:	4938      	ldr	r1, [pc, #224]	; (65a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    64c4:	3910      	subs	r1, #16
    64c6:	7809      	ldrb	r1, [r1, #0]
    64c8:	2902      	cmp	r1, #2
    64ca:	d006      	beq.n	64da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    64cc:	2901      	cmp	r1, #1
    64ce:	d00a      	beq.n	64e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1922>
    64d0:	b1f5      	cbz	r5, 6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    64d2:	06e9      	lsls	r1, r5, #27
    64d4:	d50b      	bpl.n	64ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192a>
    64d6:	211e      	movs	r1, #30
    64d8:	e042      	b.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    64da:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    64de:	2906      	cmp	r1, #6
    64e0:	d03e      	beq.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    64e2:	2116      	movs	r1, #22
    64e4:	e03c      	b.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    64e6:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    64ea:	b959      	cbnz	r1, 6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    64ec:	e054      	b.n	6598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    64ee:	0729      	lsls	r1, r5, #28
    64f0:	d501      	bpl.n	64f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1932>
    64f2:	213d      	movs	r1, #61	; 0x3d
    64f4:	e034      	b.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    64f6:	06a9      	lsls	r1, r5, #26
    64f8:	d501      	bpl.n	64fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193a>
    64fa:	2123      	movs	r1, #35	; 0x23
    64fc:	e030      	b.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    64fe:	07a9      	lsls	r1, r5, #30
    6500:	d001      	beq.n	6506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    6502:	212a      	movs	r1, #42	; 0x2a
    6504:	e02c      	b.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6506:	f640 615e 	movw	r1, #3678	; 0xe5e
    650a:	2031      	movs	r0, #49	; 0x31
    650c:	f7fa fa64 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6510:	b12a      	cbz	r2, 651e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    6512:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6516:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    651a:	4291      	cmp	r1, r2
    651c:	d216      	bcs.n	654c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    651e:	2b00      	cmp	r3, #0
    6520:	dd05      	ble.n	652e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196a>
    6522:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6526:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    652a:	4291      	cmp	r1, r2
    652c:	d20e      	bcs.n	654c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    652e:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6532:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6536:	428a      	cmp	r2, r1
    6538:	d30a      	bcc.n	6550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    653a:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    653e:	f88d 2000 	strb.w	r2, [sp]
    6542:	9a00      	ldr	r2, [sp, #0]
    6544:	9200      	str	r2, [sp, #0]
    6546:	f89d 2000 	ldrb.w	r2, [sp]
    654a:	b10a      	cbz	r2, 6550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    654c:	2122      	movs	r1, #34	; 0x22
    654e:	e007      	b.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6550:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6554:	b172      	cbz	r2, 6574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6556:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    655a:	428a      	cmp	r2, r1
    655c:	d31c      	bcc.n	6598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    655e:	2108      	movs	r1, #8
    6560:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6564:	f88d 2000 	strb.w	r2, [sp]
    6568:	9a00      	ldr	r2, [sp, #0]
    656a:	9200      	str	r2, [sp, #0]
    656c:	f89d 2000 	ldrb.w	r2, [sp]
    6570:	b96a      	cbnz	r2, 658e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    6572:	e005      	b.n	6580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>
    6574:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6578:	2906      	cmp	r1, #6
    657a:	d30d      	bcc.n	6598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    657c:	213e      	movs	r1, #62	; 0x3e
    657e:	e7ef      	b.n	6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6580:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6584:	220b      	movs	r2, #11
    6586:	4908      	ldr	r1, [pc, #32]	; (65a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>)
    6588:	30b4      	adds	r0, #180	; 0xb4
    658a:	f007 fa90 	bl	daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    658e:	6860      	ldr	r0, [r4, #4]
    6590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6594:	f008 bace 	b.w	eb34 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    659c:	2100      	movs	r1, #0
    659e:	f7fd be07 	b.w	41b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    65a2:	0000      	.short	0x0000
    65a4:	2000010c 	.word	0x2000010c
    65a8:	0000dded 	.word	0x0000dded
    65ac:	b570      	push	{r4, r5, r6, lr}
    65ae:	4d2e      	ldr	r5, [pc, #184]	; (6668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa4>)
    65b0:	6868      	ldr	r0, [r5, #4]
    65b2:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    65b6:	b151      	cbz	r1, 65ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    65b8:	2901      	cmp	r1, #1
    65ba:	d008      	beq.n	65ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    65bc:	2902      	cmp	r1, #2
    65be:	d009      	beq.n	65d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    65c0:	2903      	cmp	r1, #3
    65c2:	d007      	beq.n	65d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    65c4:	f640 41d7 	movw	r1, #3287	; 0xcd7
    65c8:	2031      	movs	r0, #49	; 0x31
    65ca:	f7fa fa05 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65ce:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    65d2:	e037      	b.n	6644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a80>
    65d4:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    65d8:	2907      	cmp	r1, #7
    65da:	d036      	beq.n	664a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a86>
    65dc:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    65e0:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    65e4:	2400      	movs	r4, #0
    65e6:	1c93      	adds	r3, r2, #2
    65e8:	4299      	cmp	r1, r3
    65ea:	d306      	bcc.n	65fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    65ec:	1a89      	subs	r1, r1, r2
    65ee:	1e89      	subs	r1, r1, #2
    65f0:	040c      	lsls	r4, r1, #16
    65f2:	0c24      	lsrs	r4, r4, #16
    65f4:	d001      	beq.n	65fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    65f6:	1e64      	subs	r4, r4, #1
    65f8:	b2a4      	uxth	r4, r4
    65fa:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    65fe:	b139      	cbz	r1, 6610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>
    6600:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6604:	2301      	movs	r3, #1
    6606:	2109      	movs	r1, #9
    6608:	3080      	adds	r0, #128	; 0x80
    660a:	f006 feb9 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    660e:	b340      	cbz	r0, 6662 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    6610:	f7ff ff00 	bl	6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    6614:	b178      	cbz	r0, 6636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6616:	686a      	ldr	r2, [r5, #4]
    6618:	2000      	movs	r0, #0
    661a:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    661e:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6622:	1c93      	adds	r3, r2, #2
    6624:	4299      	cmp	r1, r3
    6626:	d303      	bcc.n	6630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    6628:	1a88      	subs	r0, r1, r2
    662a:	1e80      	subs	r0, r0, #2
    662c:	d000      	beq.n	6630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    662e:	1e40      	subs	r0, r0, #1
    6630:	42a0      	cmp	r0, r4
    6632:	d200      	bcs.n	6636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6634:	b284      	uxth	r4, r0
    6636:	b10c      	cbz	r4, 663c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    6638:	1e64      	subs	r4, r4, #1
    663a:	b2a4      	uxth	r4, r4
    663c:	6868      	ldr	r0, [r5, #4]
    663e:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6642:	4421      	add	r1, r4
    6644:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    6648:	bd70      	pop	{r4, r5, r6, pc}
    664a:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    664e:	2903      	cmp	r1, #3
    6650:	d3bd      	bcc.n	65ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6652:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    6656:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    6658:	4411      	add	r1, r2
    665a:	1c49      	adds	r1, r1, #1
    665c:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    6660:	bd70      	pop	{r4, r5, r6, pc}
    6662:	2400      	movs	r4, #0
    6664:	e7ea      	b.n	663c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    6666:	0000      	.short	0x0000
    6668:	2000010c 	.word	0x2000010c

0000666c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    666c:	b570      	push	{r4, r5, r6, lr}
    666e:	6844      	ldr	r4, [r0, #4]
    6670:	220d      	movs	r2, #13
    6672:	f504 7598 	add.w	r5, r4, #304	; 0x130
    6676:	2100      	movs	r1, #0
    6678:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    667c:	f009 ff26 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6680:	f44f 70a3 	mov.w	r0, #326	; 0x146
    6684:	2100      	movs	r1, #0
    6686:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    668a:	5501      	strb	r1, [r0, r4]
    668c:	f8a5 1017 	strh.w	r1, [r5, #23]
    6690:	7669      	strb	r1, [r5, #25]
    6692:	4608      	mov	r0, r1
    6694:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6698:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    669c:	1c40      	adds	r0, r0, #1
    669e:	b2c0      	uxtb	r0, r0
    66a0:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    66a4:	2802      	cmp	r0, #2
    66a6:	d3f7      	bcc.n	6698 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    66a8:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    66ac:	4620      	mov	r0, r4
    66ae:	f008 fd0c 	bl	f0ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    66b2:	2000      	movs	r0, #0
    66b4:	21ff      	movs	r1, #255	; 0xff
    66b6:	1822      	adds	r2, r4, r0
    66b8:	1c40      	adds	r0, r0, #1
    66ba:	b2c0      	uxtb	r0, r0
    66bc:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    66c0:	2802      	cmp	r0, #2
    66c2:	d3f8      	bcc.n	66b6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    66c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000066c8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    66c8:	4903      	ldr	r1, [pc, #12]	; (66d8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    66ca:	884a      	ldrh	r2, [r1, #2]
    66cc:	8002      	strh	r2, [r0, #0]
    66ce:	7809      	ldrb	r1, [r1, #0]
    66d0:	7081      	strb	r1, [r0, #2]
    66d2:	2000      	movs	r0, #0
    66d4:	4770      	bx	lr
    66d6:	0000      	.short	0x0000
    66d8:	20000b90 	.word	0x20000b90

000066dc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    66dc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    66de:	460c      	mov	r4, r1
    66e0:	4605      	mov	r5, r0
    66e2:	8800      	ldrh	r0, [r0, #0]
    66e4:	4669      	mov	r1, sp
    66e6:	f006 fe21 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    66ea:	2200      	movs	r2, #0
    66ec:	b128      	cbz	r0, 66fa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    66ee:	f8c4 2002 	str.w	r2, [r4, #2]
    66f2:	71a2      	strb	r2, [r4, #6]
    66f4:	8022      	strh	r2, [r4, #0]
    66f6:	2002      	movs	r0, #2
    66f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    66fa:	9901      	ldr	r1, [sp, #4]
    66fc:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    6700:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    6704:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    6708:	f8c4 0002 	str.w	r0, [r4, #2]
    670c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    6710:	71a0      	strb	r0, [r4, #6]
    6712:	8828      	ldrh	r0, [r5, #0]
    6714:	8020      	strh	r0, [r4, #0]
    6716:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    671a:	f88d 0008 	strb.w	r0, [sp, #8]
    671e:	9802      	ldr	r0, [sp, #8]
    6720:	9002      	str	r0, [sp, #8]
    6722:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6726:	2800      	cmp	r0, #0
    6728:	d1ea      	bne.n	6700 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    672a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000672c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    672c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    672e:	460d      	mov	r5, r1
    6730:	4606      	mov	r6, r0
    6732:	8800      	ldrh	r0, [r0, #0]
    6734:	4669      	mov	r1, sp
    6736:	f006 fdf9 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    673a:	2800      	cmp	r0, #0
    673c:	d11a      	bne.n	6774 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    673e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    6742:	2700      	movs	r7, #0
    6744:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    6748:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    674c:	f009 f9c9 	bl	fae2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6750:	70a8      	strb	r0, [r5, #2]
    6752:	7860      	ldrb	r0, [r4, #1]
    6754:	f009 f9c5 	bl	fae2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6758:	70e8      	strb	r0, [r5, #3]
    675a:	78a0      	ldrb	r0, [r4, #2]
    675c:	f88d 0008 	strb.w	r0, [sp, #8]
    6760:	9802      	ldr	r0, [sp, #8]
    6762:	9002      	str	r0, [sp, #8]
    6764:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6768:	3c6a      	subs	r4, #106	; 0x6a
    676a:	2800      	cmp	r0, #0
    676c:	d1ea      	bne.n	6744 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    676e:	8830      	ldrh	r0, [r6, #0]
    6770:	8028      	strh	r0, [r5, #0]
    6772:	2000      	movs	r0, #0
    6774:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006778 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    6778:	4903      	ldr	r1, [pc, #12]	; (6788 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    677a:	888a      	ldrh	r2, [r1, #4]
    677c:	8002      	strh	r2, [r0, #0]
    677e:	88c9      	ldrh	r1, [r1, #6]
    6780:	8041      	strh	r1, [r0, #2]
    6782:	2000      	movs	r0, #0
    6784:	4770      	bx	lr
    6786:	0000      	.short	0x0000
    6788:	2000027c 	.word	0x2000027c

0000678c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    678c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    678e:	2400      	movs	r4, #0
    6790:	a902      	add	r1, sp, #8
    6792:	f88d 4004 	strb.w	r4, [sp, #4]
    6796:	f88d 4008 	strb.w	r4, [sp, #8]
    679a:	9100      	str	r1, [sp, #0]
    679c:	7882      	ldrb	r2, [r0, #2]
    679e:	7841      	ldrb	r1, [r0, #1]
    67a0:	7800      	ldrb	r0, [r0, #0]
    67a2:	ab01      	add	r3, sp, #4
    67a4:	f009 fb11 	bl	fdca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    67a8:	2800      	cmp	r0, #0
    67aa:	d112      	bne.n	67d2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    67ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    67b0:	f009 fa4b 	bl	fc4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    67b4:	b170      	cbz	r0, 67d4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    67b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    67ba:	f009 fa46 	bl	fc4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    67be:	b148      	cbz	r0, 67d4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    67c0:	4805      	ldr	r0, [pc, #20]	; (67d8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    67c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    67c6:	7381      	strb	r1, [r0, #14]
    67c8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    67cc:	73c1      	strb	r1, [r0, #15]
    67ce:	8204      	strh	r4, [r0, #16]
    67d0:	2000      	movs	r0, #0
    67d2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    67d4:	2011      	movs	r0, #17
    67d6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    67d8:	20000b90 	.word	0x20000b90

000067dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    67dc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67e0:	460f      	mov	r7, r1
    67e2:	4605      	mov	r5, r0
    67e4:	7806      	ldrb	r6, [r0, #0]
    67e6:	f009 f9e3 	bl	fbb0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    67ea:	2800      	cmp	r0, #0
    67ec:	d10a      	bne.n	6804 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    67ee:	4628      	mov	r0, r5
    67f0:	f009 f9b8 	bl	fb64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    67f4:	2800      	cmp	r0, #0
    67f6:	d105      	bne.n	6804 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    67f8:	2001      	movs	r0, #1
    67fa:	f7fa fae1 	bl	dc0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    67fe:	4286      	cmp	r6, r0
    6800:	d302      	bcc.n	6808 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    6802:	2007      	movs	r0, #7
    6804:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6808:	2101      	movs	r1, #1
    680a:	4630      	mov	r0, r6
    680c:	f006 fb13 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6810:	0004      	movs	r4, r0
    6812:	d004      	beq.n	681e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    6814:	f007 fea0 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6818:	b168      	cbz	r0, 6836 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    681a:	200c      	movs	r0, #12
    681c:	e7f2      	b.n	6804 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    681e:	2101      	movs	r1, #1
    6820:	4630      	mov	r0, r6
    6822:	f006 fafe 	bl	ce22 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6826:	0004      	movs	r4, r0
    6828:	d013      	beq.n	6852 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    682a:	4817      	ldr	r0, [pc, #92]	; (6888 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    682c:	f990 1000 	ldrsb.w	r1, [r0]
    6830:	4620      	mov	r0, r4
    6832:	f007 fc53 	bl	e0dc <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6836:	4620      	mov	r0, r4
    6838:	f007 fcbb 	bl	e1b2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    683c:	7038      	strb	r0, [r7, #0]
    683e:	74e8      	strb	r0, [r5, #19]
    6840:	4629      	mov	r1, r5
    6842:	4620      	mov	r0, r4
    6844:	f7fc fce6 	bl	3214 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6848:	4606      	mov	r6, r0
    684a:	7e68      	ldrb	r0, [r5, #25]
    684c:	b1d0      	cbz	r0, 6884 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    684e:	b12e      	cbz	r6, 685c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    6850:	e018      	b.n	6884 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    6852:	f241 31e8 	movw	r1, #5096	; 0x13e8
    6856:	2039      	movs	r0, #57	; 0x39
    6858:	f7fa f8be 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    685c:	2200      	movs	r2, #0
    685e:	4668      	mov	r0, sp
    6860:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6862:	f006 fb9a 	bl	cf9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6866:	2200      	movs	r2, #0
    6868:	2101      	movs	r1, #1
    686a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    686c:	f006 fc0f 	bl	d08e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6870:	2204      	movs	r2, #4
    6872:	4668      	mov	r0, sp
    6874:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6876:	f006 fb90 	bl	cf9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    687a:	2200      	movs	r2, #0
    687c:	4611      	mov	r1, r2
    687e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6880:	f006 fc05 	bl	d08e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6884:	4630      	mov	r0, r6
    6886:	e7bd      	b.n	6804 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6888:	20000274 	.word	0x20000274

0000688c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    688c:	7801      	ldrb	r1, [r0, #0]
    688e:	b171      	cbz	r1, 68ae <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6890:	7841      	ldrb	r1, [r0, #1]
    6892:	b161      	cbz	r1, 68ae <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6894:	8841      	ldrh	r1, [r0, #2]
    6896:	291b      	cmp	r1, #27
    6898:	d309      	bcc.n	68ae <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    689a:	8881      	ldrh	r1, [r0, #4]
    689c:	291b      	cmp	r1, #27
    689e:	d306      	bcc.n	68ae <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    68a0:	4904      	ldr	r1, [pc, #16]	; (68b4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    68a2:	6802      	ldr	r2, [r0, #0]
    68a4:	600a      	str	r2, [r1, #0]
    68a6:	8880      	ldrh	r0, [r0, #4]
    68a8:	8088      	strh	r0, [r1, #4]
    68aa:	2000      	movs	r0, #0
    68ac:	4770      	bx	lr
    68ae:	2012      	movs	r0, #18
    68b0:	4770      	bx	lr
    68b2:	0000      	.short	0x0000
    68b4:	20000b90 	.word	0x20000b90

000068b8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    68b8:	6800      	ldr	r0, [r0, #0]
    68ba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    68be:	4288      	cmp	r0, r1
    68c0:	d303      	bcc.n	68ca <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    68c2:	4903      	ldr	r1, [pc, #12]	; (68d0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    68c4:	6088      	str	r0, [r1, #8]
    68c6:	2000      	movs	r0, #0
    68c8:	4770      	bx	lr
    68ca:	2012      	movs	r0, #18
    68cc:	4770      	bx	lr
    68ce:	0000      	.short	0x0000
    68d0:	20000b90 	.word	0x20000b90

000068d4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    68d4:	4a03      	ldr	r2, [pc, #12]	; (68e4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    68d6:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    68da:	6001      	str	r1, [r0, #0]
    68dc:	6042      	str	r2, [r0, #4]
    68de:	2000      	movs	r0, #0
    68e0:	4770      	bx	lr
    68e2:	0000      	.short	0x0000
    68e4:	00006e20 	.word	0x00006e20

000068e8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    68e8:	b50e      	push	{r1, r2, r3, lr}
    68ea:	8800      	ldrh	r0, [r0, #0]
    68ec:	4669      	mov	r1, sp
    68ee:	f006 fd1d 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    68f2:	b960      	cbnz	r0, 690e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    68f4:	9801      	ldr	r0, [sp, #4]
    68f6:	f009 fa24 	bl	fd42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    68fa:	b140      	cbz	r0, 690e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    68fc:	9801      	ldr	r0, [sp, #4]
    68fe:	4601      	mov	r1, r0
    6900:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    6904:	3080      	adds	r0, #128	; 0x80
    6906:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    690a:	b962      	cbnz	r2, 6926 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    690c:	e001      	b.n	6912 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    690e:	2002      	movs	r0, #2
    6910:	bd0e      	pop	{r1, r2, r3, pc}
    6912:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    6916:	f88d 2008 	strb.w	r2, [sp, #8]
    691a:	9a02      	ldr	r2, [sp, #8]
    691c:	9202      	str	r2, [sp, #8]
    691e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6922:	2201      	movs	r2, #1
    6924:	b10b      	cbz	r3, 692a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    6926:	203a      	movs	r0, #58	; 0x3a
    6928:	bd0e      	pop	{r1, r2, r3, pc}
    692a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    692e:	079b      	lsls	r3, r3, #30
    6930:	d006      	beq.n	6940 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    6932:	2203      	movs	r2, #3
    6934:	4905      	ldr	r1, [pc, #20]	; (694c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    6936:	305e      	adds	r0, #94	; 0x5e
    6938:	f007 f8cd 	bl	dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    693c:	2000      	movs	r0, #0
    693e:	bd0e      	pop	{r1, r2, r3, pc}
    6940:	700a      	strb	r2, [r1, #0]
    6942:	4668      	mov	r0, sp
    6944:	f007 f890 	bl	da68 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6948:	e7f8      	b.n	693c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    694a:	0000      	.short	0x0000
    694c:	0000df4b 	.word	0x0000df4b

00006950 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    6950:	b510      	push	{r4, lr}
    6952:	2005      	movs	r0, #5
    6954:	f000 faf6 	bl	6f44 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    6958:	f7fe f88c 	bl	4a74 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    695c:	4902      	ldr	r1, [pc, #8]	; (6968 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    695e:	4801      	ldr	r0, [pc, #4]	; (6964 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    6960:	6048      	str	r0, [r1, #4]
    6962:	bd10      	pop	{r4, pc}
    6964:	00006999 	.word	0x00006999
    6968:	20000274 	.word	0x20000274
    696c:	b51c      	push	{r2, r3, r4, lr}
    696e:	4909      	ldr	r1, [pc, #36]	; (6994 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    6970:	e9d1 0100 	ldrd	r0, r1, [r1]
    6974:	e9cd 0100 	strd	r0, r1, [sp]
    6978:	e005      	b.n	6986 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    697a:	9800      	ldr	r0, [sp, #0]
    697c:	f007 fdec 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6980:	b108      	cbz	r0, 6986 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    6982:	2001      	movs	r0, #1
    6984:	bd1c      	pop	{r2, r3, r4, pc}
    6986:	4668      	mov	r0, sp
    6988:	f7fa fa64 	bl	e54 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    698c:	2800      	cmp	r0, #0
    698e:	d0f4      	beq.n	697a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    6990:	2000      	movs	r0, #0
    6992:	bd1c      	pop	{r2, r3, r4, pc}
    6994:	00006e20 	.word	0x00006e20
    6998:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    699c:	4613      	mov	r3, r2
    699e:	4a33      	ldr	r2, [pc, #204]	; (6a6c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    69a0:	460f      	mov	r7, r1
    69a2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    69a6:	8814      	ldrh	r4, [r2, #0]
    69a8:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    69ac:	428c      	cmp	r4, r1
    69ae:	d200      	bcs.n	69b2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    69b0:	4621      	mov	r1, r4
    69b2:	4688      	mov	r8, r1
    69b4:	8891      	ldrh	r1, [r2, #4]
    69b6:	42b1      	cmp	r1, r6
    69b8:	d200      	bcs.n	69bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    69ba:	460e      	mov	r6, r1
    69bc:	8851      	ldrh	r1, [r2, #2]
    69be:	f640 0448 	movw	r4, #2120	; 0x848
    69c2:	42a1      	cmp	r1, r4
    69c4:	d300      	bcc.n	69c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    69c6:	4621      	mov	r1, r4
    69c8:	88d5      	ldrh	r5, [r2, #6]
    69ca:	42a5      	cmp	r5, r4
    69cc:	d300      	bcc.n	69d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    69ce:	4625      	mov	r5, r4
    69d0:	42a1      	cmp	r1, r4
    69d2:	d200      	bcs.n	69d6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    69d4:	460c      	mov	r4, r1
    69d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    69da:	2e1b      	cmp	r6, #27
    69dc:	d001      	beq.n	69e2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    69de:	4295      	cmp	r5, r2
    69e0:	d104      	bne.n	69ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    69e2:	f1b8 0f1b 	cmp.w	r8, #27
    69e6:	d03e      	beq.n	6a66 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    69e8:	4294      	cmp	r4, r2
    69ea:	d03c      	beq.n	6a66 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    69ec:	466a      	mov	r2, sp
    69ee:	4619      	mov	r1, r3
    69f0:	f009 f94e 	bl	fc90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    69f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    69f8:	4641      	mov	r1, r8
    69fa:	4540      	cmp	r0, r8
    69fc:	d900      	bls.n	6a00 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    69fe:	4608      	mov	r0, r1
    6a00:	80f8      	strh	r0, [r7, #6]
    6a02:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    6a06:	42a1      	cmp	r1, r4
    6a08:	d800      	bhi.n	6a0c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    6a0a:	460c      	mov	r4, r1
    6a0c:	813c      	strh	r4, [r7, #8]
    6a0e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6a12:	42b1      	cmp	r1, r6
    6a14:	d800      	bhi.n	6a18 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    6a16:	460e      	mov	r6, r1
    6a18:	807e      	strh	r6, [r7, #2]
    6a1a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6a1e:	42a9      	cmp	r1, r5
    6a20:	d800      	bhi.n	6a24 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    6a22:	460d      	mov	r5, r1
    6a24:	80bd      	strh	r5, [r7, #4]
    6a26:	21ff      	movs	r1, #255	; 0xff
    6a28:	7039      	strb	r1, [r7, #0]
    6a2a:	381b      	subs	r0, #27
    6a2c:	28e0      	cmp	r0, #224	; 0xe0
    6a2e:	d902      	bls.n	6a36 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    6a30:	f640 516e 	movw	r1, #3438	; 0xd6e
    6a34:	e014      	b.n	6a60 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    6a36:	3e1b      	subs	r6, #27
    6a38:	2ee0      	cmp	r6, #224	; 0xe0
    6a3a:	d902      	bls.n	6a42 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    6a3c:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    6a40:	e00e      	b.n	6a60 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    6a42:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    6a46:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    6a4a:	4284      	cmp	r4, r0
    6a4c:	d902      	bls.n	6a54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    6a4e:	f640 5172 	movw	r1, #3442	; 0xd72
    6a52:	e005      	b.n	6a60 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    6a54:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    6a58:	4285      	cmp	r5, r0
    6a5a:	d904      	bls.n	6a66 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    6a5c:	f640 5174 	movw	r1, #3444	; 0xd74
    6a60:	2039      	movs	r0, #57	; 0x39
    6a62:	f7f9 ffb9 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a66:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6a6a:	0000      	.short	0x0000
    6a6c:	2000027c 	.word	0x2000027c
    6a70:	b510      	push	{r4, lr}
    6a72:	480d      	ldr	r0, [pc, #52]	; (6aa8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    6a74:	2100      	movs	r1, #0
    6a76:	4b0d      	ldr	r3, [pc, #52]	; (6aac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    6a78:	74c1      	strb	r1, [r0, #19]
    6a7a:	8281      	strh	r1, [r0, #20]
    6a7c:	221b      	movs	r2, #27
    6a7e:	801a      	strh	r2, [r3, #0]
    6a80:	f44f 74a4 	mov.w	r4, #328	; 0x148
    6a84:	805c      	strh	r4, [r3, #2]
    6a86:	809a      	strh	r2, [r3, #4]
    6a88:	80dc      	strh	r4, [r3, #6]
    6a8a:	7381      	strb	r1, [r0, #14]
    6a8c:	73c1      	strb	r1, [r0, #15]
    6a8e:	2303      	movs	r3, #3
    6a90:	7003      	strb	r3, [r0, #0]
    6a92:	2302      	movs	r3, #2
    6a94:	7043      	strb	r3, [r0, #1]
    6a96:	8042      	strh	r2, [r0, #2]
    6a98:	8082      	strh	r2, [r0, #4]
    6a9a:	f640 62a6 	movw	r2, #3750	; 0xea6
    6a9e:	6082      	str	r2, [r0, #8]
    6aa0:	7481      	strb	r1, [r0, #18]
    6aa2:	7301      	strb	r1, [r0, #12]
    6aa4:	bd10      	pop	{r4, pc}
    6aa6:	0000      	.short	0x0000
    6aa8:	20000b90 	.word	0x20000b90
    6aac:	2000027c 	.word	0x2000027c
    6ab0:	b510      	push	{r4, lr}
    6ab2:	2101      	movs	r1, #1
    6ab4:	2000      	movs	r0, #0
    6ab6:	f006 f9be 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6aba:	0004      	movs	r4, r0
    6abc:	d10a      	bne.n	6ad4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    6abe:	2101      	movs	r1, #1
    6ac0:	f006 f9af 	bl	ce22 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6ac4:	0004      	movs	r4, r0
    6ac6:	d007      	beq.n	6ad8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    6ac8:	4806      	ldr	r0, [pc, #24]	; (6ae4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    6aca:	f990 1000 	ldrsb.w	r1, [r0]
    6ace:	4620      	mov	r0, r4
    6ad0:	f007 fb04 	bl	e0dc <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6ad4:	4620      	mov	r0, r4
    6ad6:	bd10      	pop	{r4, pc}
    6ad8:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    6adc:	2039      	movs	r0, #57	; 0x39
    6ade:	f7f9 ff7b 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ae2:	0000      	.short	0x0000
    6ae4:	20000274 	.word	0x20000274

00006ae8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    6ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6aec:	b087      	sub	sp, #28
    6aee:	460c      	mov	r4, r1
    6af0:	4680      	mov	r8, r0
    6af2:	4605      	mov	r5, r0
    6af4:	f007 fb60 	bl	e1b8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    6af8:	b198      	cbz	r0, 6b22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6afa:	4628      	mov	r0, r5
    6afc:	f007 fb4f 	bl	e19e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6b00:	b130      	cbz	r0, 6b10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    6b02:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    6b06:	2012      	movs	r0, #18
    6b08:	2900      	cmp	r1, #0
    6b0a:	d00b      	beq.n	6b24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6b0c:	2980      	cmp	r1, #128	; 0x80
    6b0e:	d809      	bhi.n	6b24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6b10:	4628      	mov	r0, r5
    6b12:	f007 fb35 	bl	e180 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    6b16:	b140      	cbz	r0, 6b2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6b18:	4640      	mov	r0, r8
    6b1a:	f007 faa0 	bl	e05e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    6b1e:	b130      	cbz	r0, 6b2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    6b20:	e009      	b.n	6b36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    6b22:	2042      	movs	r0, #66	; 0x42
    6b24:	b007      	add	sp, #28
    6b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6b2a:	200c      	movs	r0, #12
    6b2c:	e7fa      	b.n	6b24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6b2e:	4640      	mov	r0, r8
    6b30:	f007 fb2f 	bl	e192 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    6b34:	b3c8      	cbz	r0, 6baa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    6b36:	4640      	mov	r0, r8
    6b38:	f007 fd0e 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6b3c:	2800      	cmp	r0, #0
    6b3e:	d1f4      	bne.n	6b2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6b40:	4640      	mov	r0, r8
    6b42:	f007 faa7 	bl	e094 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    6b46:	2800      	cmp	r0, #0
    6b48:	d1ef      	bne.n	6b2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6b4a:	4640      	mov	r0, r8
    6b4c:	f7fc fb00 	bl	3150 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    6b50:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6b54:	f242 7110 	movw	r1, #10000	; 0x2710
    6b58:	fb00 f901 	mul.w	r9, r0, r1
    6b5c:	78e1      	ldrb	r1, [r4, #3]
    6b5e:	4640      	mov	r0, r8
    6b60:	f007 fb05 	bl	e16e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    6b64:	4640      	mov	r0, r8
    6b66:	f007 fb16 	bl	e196 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    6b6a:	b308      	cbz	r0, 6bb0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    6b6c:	2100      	movs	r1, #0
    6b6e:	a801      	add	r0, sp, #4
    6b70:	f7fa f990 	bl	e94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    6b74:	0004      	movs	r4, r0
    6b76:	d07b      	beq.n	6c70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    6b78:	2100      	movs	r1, #0
    6b7a:	f7fb fcf3 	bl	2564 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    6b7e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6b82:	8020      	strh	r0, [r4, #0]
    6b84:	4621      	mov	r1, r4
    6b86:	4640      	mov	r0, r8
    6b88:	f007 fb2d 	bl	e1e6 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    6b8c:	f000 f9e6 	bl	6f5c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6b90:	0940      	lsrs	r0, r0, #5
    6b92:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6b96:	07c0      	lsls	r0, r0, #31
    6b98:	4d41      	ldr	r5, [pc, #260]	; (6ca0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    6b9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6b9e:	d011      	beq.n	6bc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    6ba0:	8869      	ldrh	r1, [r5, #2]
    6ba2:	88aa      	ldrh	r2, [r5, #4]
    6ba4:	84c1      	strh	r1, [r0, #38]	; 0x26
    6ba6:	8502      	strh	r2, [r0, #40]	; 0x28
    6ba8:	e00f      	b.n	6bca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    6baa:	e7ff      	b.n	6bac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    6bac:	2012      	movs	r0, #18
    6bae:	e7b9      	b.n	6b24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6bb0:	464a      	mov	r2, r9
    6bb2:	2100      	movs	r1, #0
    6bb4:	4640      	mov	r0, r8
    6bb6:	f7fd f9e9 	bl	3f8c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6bba:	2800      	cmp	r0, #0
    6bbc:	d0b2      	beq.n	6b24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6bbe:	f241 6122 	movw	r1, #5666	; 0x1622
    6bc2:	e05f      	b.n	6c84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6bc4:	221b      	movs	r2, #27
    6bc6:	84c2      	strh	r2, [r0, #38]	; 0x26
    6bc8:	8502      	strh	r2, [r0, #40]	; 0x28
    6bca:	f000 f9c7 	bl	6f5c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6bce:	0788      	lsls	r0, r1, #30
    6bd0:	f04f 0601 	mov.w	r6, #1
    6bd4:	d505      	bpl.n	6be2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    6bd6:	f88d 6008 	strb.w	r6, [sp, #8]
    6bda:	a802      	add	r0, sp, #8
    6bdc:	9403      	str	r4, [sp, #12]
    6bde:	f7ff fd45 	bl	666c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6be2:	68a8      	ldr	r0, [r5, #8]
    6be4:	62e0      	str	r0, [r4, #44]	; 0x2c
    6be6:	f641 574c 	movw	r7, #7500	; 0x1d4c
    6bea:	4640      	mov	r0, r8
    6bec:	f007 fadb 	bl	e1a6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    6bf0:	b910      	cbnz	r0, 6bf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    6bf2:	4640      	mov	r0, r8
    6bf4:	f007 faf5 	bl	e1e2 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6bf8:	6127      	str	r7, [r4, #16]
    6bfa:	8821      	ldrh	r1, [r4, #0]
    6bfc:	f8ad 1008 	strh.w	r1, [sp, #8]
    6c00:	7ba9      	ldrb	r1, [r5, #14]
    6c02:	f88d 100a 	strb.w	r1, [sp, #10]
    6c06:	7be9      	ldrb	r1, [r5, #15]
    6c08:	f88d 100b 	strb.w	r1, [sp, #11]
    6c0c:	8a29      	ldrh	r1, [r5, #16]
    6c0e:	f8ad 100c 	strh.w	r1, [sp, #12]
    6c12:	a905      	add	r1, sp, #20
    6c14:	9100      	str	r1, [sp, #0]
    6c16:	4630      	mov	r0, r6
    6c18:	ab04      	add	r3, sp, #16
    6c1a:	aa02      	add	r2, sp, #8
    6c1c:	4621      	mov	r1, r4
    6c1e:	f009 f86d 	bl	fcfc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    6c22:	b140      	cbz	r0, 6c36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    6c24:	2100      	movs	r1, #0
    6c26:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6c2a:	f7fa f95b 	bl	ee4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6c2e:	b1f0      	cbz	r0, 6c6e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    6c30:	f241 617c 	movw	r1, #5756	; 0x167c
    6c34:	e026      	b.n	6c84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6c36:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6c3a:	f88d 0018 	strb.w	r0, [sp, #24]
    6c3e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    6c42:	f88d 0019 	strb.w	r0, [sp, #25]
    6c46:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    6c4a:	f8ad 001a 	strh.w	r0, [sp, #26]
    6c4e:	a906      	add	r1, sp, #24
    6c50:	4620      	mov	r0, r4
    6c52:	f006 fc3b 	bl	d4cc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6c56:	7868      	ldrb	r0, [r5, #1]
    6c58:	9000      	str	r0, [sp, #0]
    6c5a:	782b      	ldrb	r3, [r5, #0]
    6c5c:	88aa      	ldrh	r2, [r5, #4]
    6c5e:	8869      	ldrh	r1, [r5, #2]
    6c60:	8820      	ldrh	r0, [r4, #0]
    6c62:	f7fa f9f5 	bl	1050 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6c66:	b128      	cbz	r0, 6c74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    6c68:	f241 6187 	movw	r1, #5767	; 0x1687
    6c6c:	e00a      	b.n	6c84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6c6e:	e7ff      	b.n	6c70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    6c70:	2009      	movs	r0, #9
    6c72:	e757      	b.n	6b24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6c74:	464a      	mov	r2, r9
    6c76:	4621      	mov	r1, r4
    6c78:	4640      	mov	r0, r8
    6c7a:	f7fd f987 	bl	3f8c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6c7e:	b120      	cbz	r0, 6c8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    6c80:	f241 6189 	movw	r1, #5769	; 0x1689
    6c84:	2039      	movs	r0, #57	; 0x39
    6c86:	f7f9 fea7 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c8a:	4806      	ldr	r0, [pc, #24]	; (6ca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    6c8c:	6843      	ldr	r3, [r0, #4]
    6c8e:	b123      	cbz	r3, 6c9a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    6c90:	2200      	movs	r2, #0
    6c92:	f504 7199 	add.w	r1, r4, #306	; 0x132
    6c96:	4620      	mov	r0, r4
    6c98:	4798      	blx	r3
    6c9a:	2000      	movs	r0, #0
    6c9c:	e742      	b.n	6b24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6c9e:	0000      	.short	0x0000
    6ca0:	20000b90 	.word	0x20000b90
    6ca4:	20000274 	.word	0x20000274
    6ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cac:	b088      	sub	sp, #32
    6cae:	4604      	mov	r4, r0
    6cb0:	8800      	ldrh	r0, [r0, #0]
    6cb2:	a906      	add	r1, sp, #24
    6cb4:	f006 fb3a 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6cb8:	2800      	cmp	r0, #0
    6cba:	d147      	bne.n	6d4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6cbc:	9807      	ldr	r0, [sp, #28]
    6cbe:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    6cc2:	f88d 1008 	strb.w	r1, [sp, #8]
    6cc6:	9902      	ldr	r1, [sp, #8]
    6cc8:	9102      	str	r1, [sp, #8]
    6cca:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6cce:	3080      	adds	r0, #128	; 0x80
    6cd0:	b101      	cbz	r1, 6cd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    6cd2:	2101      	movs	r1, #1
    6cd4:	f88d 100c 	strb.w	r1, [sp, #12]
    6cd8:	7b01      	ldrb	r1, [r0, #12]
    6cda:	f04f 0800 	mov.w	r8, #0
    6cde:	0689      	lsls	r1, r1, #26
    6ce0:	d502      	bpl.n	6ce8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    6ce2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6ce6:	b149      	cbz	r1, 6cfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    6ce8:	f05f 0100 	movs.w	r1, #0
    6cec:	f88d 1004 	strb.w	r1, [sp, #4]
    6cf0:	2105      	movs	r1, #5
    6cf2:	306c      	adds	r0, #108	; 0x6c
    6cf4:	f008 fa59 	bl	f1aa <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    6cf8:	b110      	cbz	r0, 6d00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    6cfa:	e004      	b.n	6d06 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    6cfc:	2101      	movs	r1, #1
    6cfe:	e7f5      	b.n	6cec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    6d00:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6d04:	b308      	cbz	r0, 6d4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    6d06:	8921      	ldrh	r1, [r4, #8]
    6d08:	88e0      	ldrh	r0, [r4, #6]
    6d0a:	f008 ffb3 	bl	fc74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    6d0e:	2800      	cmp	r0, #0
    6d10:	d11c      	bne.n	6d4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6d12:	88a1      	ldrh	r1, [r4, #4]
    6d14:	8860      	ldrh	r0, [r4, #2]
    6d16:	f008 ffad 	bl	fc74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    6d1a:	2800      	cmp	r0, #0
    6d1c:	d116      	bne.n	6d4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6d1e:	8921      	ldrh	r1, [r4, #8]
    6d20:	88e0      	ldrh	r0, [r4, #6]
    6d22:	f008 ff9d 	bl	fc60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    6d26:	2800      	cmp	r0, #0
    6d28:	d110      	bne.n	6d4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6d2a:	88a1      	ldrh	r1, [r4, #4]
    6d2c:	8860      	ldrh	r0, [r4, #2]
    6d2e:	f008 ff97 	bl	fc60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    6d32:	0006      	movs	r6, r0
    6d34:	d10a      	bne.n	6d4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6d36:	9807      	ldr	r0, [sp, #28]
    6d38:	f500 7599 	add.w	r5, r0, #306	; 0x132
    6d3c:	27ff      	movs	r7, #255	; 0xff
    6d3e:	706f      	strb	r7, [r5, #1]
    6d40:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6d44:	b129      	cbz	r1, 6d52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    6d46:	263a      	movs	r6, #58	; 0x3a
    6d48:	e02e      	b.n	6da8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    6d4a:	201a      	movs	r0, #26
    6d4c:	b008      	add	sp, #32
    6d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d52:	4641      	mov	r1, r8
    6d54:	aa03      	add	r2, sp, #12
    6d56:	f008 ff9b 	bl	fc90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    6d5a:	8861      	ldrh	r1, [r4, #2]
    6d5c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6d60:	4281      	cmp	r1, r0
    6d62:	d200      	bcs.n	6d66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    6d64:	4608      	mov	r0, r1
    6d66:	80e8      	strh	r0, [r5, #6]
    6d68:	88a1      	ldrh	r1, [r4, #4]
    6d6a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6d6e:	4281      	cmp	r1, r0
    6d70:	d200      	bcs.n	6d74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    6d72:	4608      	mov	r0, r1
    6d74:	8128      	strh	r0, [r5, #8]
    6d76:	88e2      	ldrh	r2, [r4, #6]
    6d78:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    6d7c:	428a      	cmp	r2, r1
    6d7e:	d200      	bcs.n	6d82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    6d80:	4611      	mov	r1, r2
    6d82:	8069      	strh	r1, [r5, #2]
    6d84:	8922      	ldrh	r2, [r4, #8]
    6d86:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6d8a:	428a      	cmp	r2, r1
    6d8c:	d200      	bcs.n	6d90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    6d8e:	4611      	mov	r1, r2
    6d90:	f640 0248 	movw	r2, #2120	; 0x848
    6d94:	80a9      	strh	r1, [r5, #4]
    6d96:	4291      	cmp	r1, r2
    6d98:	d300      	bcc.n	6d9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    6d9a:	4611      	mov	r1, r2
    6d9c:	80a9      	strh	r1, [r5, #4]
    6d9e:	4290      	cmp	r0, r2
    6da0:	d200      	bcs.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    6da2:	4602      	mov	r2, r0
    6da4:	812a      	strh	r2, [r5, #8]
    6da6:	702f      	strb	r7, [r5, #0]
    6da8:	f885 8001 	strb.w	r8, [r5, #1]
    6dac:	4630      	mov	r0, r6
    6dae:	e7cd      	b.n	6d4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6db0:	b51c      	push	{r2, r3, r4, lr}
    6db2:	490c      	ldr	r1, [pc, #48]	; (6de4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    6db4:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    6db8:	e9cd 0100 	strd	r0, r1, [sp]
    6dbc:	e00a      	b.n	6dd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    6dbe:	9c00      	ldr	r4, [sp, #0]
    6dc0:	4620      	mov	r0, r4
    6dc2:	f007 fbc9 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6dc6:	b128      	cbz	r0, 6dd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    6dc8:	4620      	mov	r0, r4
    6dca:	f007 fa1b 	bl	e204 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    6dce:	b108      	cbz	r0, 6dd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    6dd0:	2001      	movs	r0, #1
    6dd2:	bd1c      	pop	{r2, r3, r4, pc}
    6dd4:	4668      	mov	r0, sp
    6dd6:	f7fa f83d 	bl	e54 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6dda:	2800      	cmp	r0, #0
    6ddc:	d0ef      	beq.n	6dbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    6dde:	2000      	movs	r0, #0
    6de0:	bd1c      	pop	{r2, r3, r4, pc}
    6de2:	0000      	.short	0x0000
    6de4:	00006e20 	.word	0x00006e20
    6de8:	b510      	push	{r4, lr}
    6dea:	4604      	mov	r4, r0
    6dec:	88c1      	ldrh	r1, [r0, #6]
    6dee:	8880      	ldrh	r0, [r0, #4]
    6df0:	f008 ff40 	bl	fc74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    6df4:	2800      	cmp	r0, #0
    6df6:	d10f      	bne.n	6e18 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    6df8:	8861      	ldrh	r1, [r4, #2]
    6dfa:	8820      	ldrh	r0, [r4, #0]
    6dfc:	f008 ff3a 	bl	fc74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    6e00:	2800      	cmp	r0, #0
    6e02:	d109      	bne.n	6e18 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    6e04:	4805      	ldr	r0, [pc, #20]	; (6e1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    6e06:	88a1      	ldrh	r1, [r4, #4]
    6e08:	8081      	strh	r1, [r0, #4]
    6e0a:	8821      	ldrh	r1, [r4, #0]
    6e0c:	8001      	strh	r1, [r0, #0]
    6e0e:	88e1      	ldrh	r1, [r4, #6]
    6e10:	80c1      	strh	r1, [r0, #6]
    6e12:	8861      	ldrh	r1, [r4, #2]
    6e14:	8041      	strh	r1, [r0, #2]
    6e16:	2000      	movs	r0, #0
    6e18:	bd10      	pop	{r4, pc}
    6e1a:	0000      	.short	0x0000
    6e1c:	2000027c 	.word	0x2000027c
    6e20:	00000000 	.word	0x00000000
    6e24:	00010000 	.word	0x00010000
    6e28:	00000000 	.word	0x00000000
    6e2c:	00010000 	.word	0x00010000
    6e30:	0c124b0c 	.word	0x0c124b0c
    6e34:	124b0059 	.word	0x124b0059
    6e38:	00000000 	.word	0x00000000
    6e3c:	00010000 	.word	0x00010000
    6e40:	00000000 	.word	0x00000000
    6e44:	00010000 	.word	0x00010000

00006e48 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    6e48:	b510      	push	{r4, lr}
    6e4a:	f7fb fe2d 	bl	2aa8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    6e4e:	4c05      	ldr	r4, [pc, #20]	; (6e64 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    6e50:	6860      	ldr	r0, [r4, #4]
    6e52:	f009 f816 	bl	fe82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    6e56:	f008 fdbb 	bl	f9d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    6e5a:	f7fb ff5f 	bl	2d1c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    6e5e:	2001      	movs	r0, #1
    6e60:	7020      	strb	r0, [r4, #0]
    6e62:	bd10      	pop	{r4, pc}
    6e64:	20000284 	.word	0x20000284

00006e68 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    6e68:	4801      	ldr	r0, [pc, #4]	; (6e70 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    6e6a:	7800      	ldrb	r0, [r0, #0]
    6e6c:	4770      	bx	lr
    6e6e:	0000      	.short	0x0000
    6e70:	20000284 	.word	0x20000284

00006e74 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    6e74:	b510      	push	{r4, lr}
    6e76:	4c06      	ldr	r4, [pc, #24]	; (6e90 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    6e78:	68a0      	ldr	r0, [r4, #8]
    6e7a:	f009 f802 	bl	fe82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    6e7e:	68e0      	ldr	r0, [r4, #12]
    6e80:	f008 ffff 	bl	fe82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    6e84:	f008 fe09 	bl	fa9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    6e88:	2000      	movs	r0, #0
    6e8a:	7020      	strb	r0, [r4, #0]
    6e8c:	bd10      	pop	{r4, pc}
    6e8e:	0000      	.short	0x0000
    6e90:	20000284 	.word	0x20000284

00006e94 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    6e94:	b510      	push	{r4, lr}
    6e96:	4905      	ldr	r1, [pc, #20]	; (6eac <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    6e98:	4805      	ldr	r0, [pc, #20]	; (6eb0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    6e9a:	f008 ffe5 	bl	fe68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    6e9e:	4804      	ldr	r0, [pc, #16]	; (6eb0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    6ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ea4:	4903      	ldr	r1, [pc, #12]	; (6eb4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    6ea6:	1d00      	adds	r0, r0, #4
    6ea8:	f008 bfde 	b.w	fe68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    6eac:	20000294 	.word	0x20000294
    6eb0:	20000288 	.word	0x20000288
    6eb4:	2000029c 	.word	0x2000029c

00006eb8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    6eb8:	b510      	push	{r4, lr}
    6eba:	4908      	ldr	r1, [pc, #32]	; (6edc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    6ebc:	4808      	ldr	r0, [pc, #32]	; (6ee0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    6ebe:	f008 ffd3 	bl	fe68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    6ec2:	4807      	ldr	r0, [pc, #28]	; (6ee0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    6ec4:	4907      	ldr	r1, [pc, #28]	; (6ee4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    6ec6:	1d00      	adds	r0, r0, #4
    6ec8:	f008 ffce 	bl	fe68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    6ecc:	4804      	ldr	r0, [pc, #16]	; (6ee0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    6ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ed2:	4905      	ldr	r1, [pc, #20]	; (6ee8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    6ed4:	3008      	adds	r0, #8
    6ed6:	f008 bfc7 	b.w	fe68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    6eda:	0000      	.short	0x0000
    6edc:	200002ac 	.word	0x200002ac
    6ee0:	20000288 	.word	0x20000288
    6ee4:	200002b4 	.word	0x200002b4
    6ee8:	200002a4 	.word	0x200002a4

00006eec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    6eec:	4801      	ldr	r0, [pc, #4]	; (6ef4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    6eee:	7840      	ldrb	r0, [r0, #1]
    6ef0:	4770      	bx	lr
    6ef2:	0000      	.short	0x0000
    6ef4:	20000284 	.word	0x20000284
    6ef8:	b510      	push	{r4, lr}
    6efa:	f7fc fa4b 	bl	3394 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    6efe:	f7fd f8f5 	bl	40ec <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    6f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6f06:	4801      	ldr	r0, [pc, #4]	; (6f0c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    6f08:	f7fc ba2a 	b.w	3360 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    6f0c:	200012a9 	.word	0x200012a9
    6f10:	490a      	ldr	r1, [pc, #40]	; (6f3c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    6f12:	b510      	push	{r4, lr}
    6f14:	2001      	movs	r0, #1
    6f16:	7048      	strb	r0, [r1, #1]
    6f18:	f7fc fa6c 	bl	33f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    6f1c:	f7fd fdc2 	bl	4aa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    6f20:	f006 f936 	bl	d190 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    6f24:	4906      	ldr	r1, [pc, #24]	; (6f40 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    6f26:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    6f2a:	f7fa fc41 	bl	17b0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    6f2e:	2000      	movs	r0, #0
    6f30:	f005 ff5e 	bl	cdf0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    6f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6f38:	f7fb bdbc 	b.w	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    6f3c:	20000284 	.word	0x20000284
    6f40:	200013ab 	.word	0x200013ab

00006f44 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    6f44:	4a04      	ldr	r2, [pc, #16]	; (6f58 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    6f46:	08c1      	lsrs	r1, r0, #3
    6f48:	f000 0307 	and.w	r3, r0, #7
    6f4c:	2001      	movs	r0, #1
    6f4e:	4098      	lsls	r0, r3
    6f50:	5c53      	ldrb	r3, [r2, r1]
    6f52:	4303      	orrs	r3, r0
    6f54:	5453      	strb	r3, [r2, r1]
    6f56:	4770      	bx	lr
    6f58:	20000020 	.word	0x20000020

00006f5c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    6f5c:	4901      	ldr	r1, [pc, #4]	; (6f64 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    6f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
    6f62:	4770      	bx	lr
    6f64:	20000020 	.word	0x20000020

00006f68 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    6f68:	4806      	ldr	r0, [pc, #24]	; (6f84 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    6f6a:	8801      	ldrh	r1, [r0, #0]
    6f6c:	7900      	ldrb	r0, [r0, #4]
    6f6e:	0602      	lsls	r2, r0, #24
    6f70:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    6f74:	f000 0001 	and.w	r0, r0, #1
    6f78:	1800      	adds	r0, r0, r0
    6f7a:	b2c0      	uxtb	r0, r0
    6f7c:	f040 0001 	orr.w	r0, r0, #1
    6f80:	4770      	bx	lr
    6f82:	0000      	.short	0x0000
    6f84:	20000020 	.word	0x20000020

00006f88 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    6f88:	b510      	push	{r4, lr}
    6f8a:	f004 fc97 	bl	b8bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    6f8e:	2200      	movs	r2, #0
    6f90:	4b08      	ldr	r3, [pc, #32]	; (6fb4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    6f92:	4611      	mov	r1, r2
    6f94:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    6f98:	4284      	cmp	r4, r0
    6f9a:	d303      	bcc.n	6fa4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    6f9c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6fa0:	7882      	ldrb	r2, [r0, #2]
    6fa2:	e003      	b.n	6fac <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    6fa4:	1c49      	adds	r1, r1, #1
    6fa6:	b2c9      	uxtb	r1, r1
    6fa8:	290c      	cmp	r1, #12
    6faa:	d3f3      	bcc.n	6f94 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    6fac:	4802      	ldr	r0, [pc, #8]	; (6fb8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    6fae:	7002      	strb	r2, [r0, #0]
    6fb0:	bd10      	pop	{r4, pc}
    6fb2:	0000      	.short	0x0000
    6fb4:	0000fed4 	.word	0x0000fed4
    6fb8:	2000036f 	.word	0x2000036f

00006fbc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    6fbc:	b570      	push	{r4, r5, r6, lr}
    6fbe:	4605      	mov	r5, r0
    6fc0:	4616      	mov	r6, r2
    6fc2:	460c      	mov	r4, r1
    6fc4:	2002      	movs	r0, #2
    6fc6:	f000 f9b7 	bl	7338 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    6fca:	4906      	ldr	r1, [pc, #24]	; (6fe4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    6fcc:	2001      	movs	r0, #1
    6fce:	1ef6      	subs	r6, r6, #3
    6fd0:	7008      	strb	r0, [r1, #0]
    6fd2:	4805      	ldr	r0, [pc, #20]	; (6fe8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    6fd4:	6006      	str	r6, [r0, #0]
    6fd6:	4804      	ldr	r0, [pc, #16]	; (6fe8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    6fd8:	3808      	subs	r0, #8
    6fda:	6005      	str	r5, [r0, #0]
    6fdc:	1f00      	subs	r0, r0, #4
    6fde:	6004      	str	r4, [r0, #0]
    6fe0:	bd70      	pop	{r4, r5, r6, pc}
    6fe2:	0000      	.short	0x0000
    6fe4:	20000370 	.word	0x20000370
    6fe8:	4000f510 	.word	0x4000f510

00006fec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    6fec:	b510      	push	{r4, lr}
    6fee:	4c0c      	ldr	r4, [pc, #48]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    6ff0:	7820      	ldrb	r0, [r4, #0]
    6ff2:	b180      	cbz	r0, 7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    6ff4:	490b      	ldr	r1, [pc, #44]	; (7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    6ff6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6ffa:	6008      	str	r0, [r1, #0]
    6ffc:	f000 f86a 	bl	70d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7000:	2100      	movs	r1, #0
    7002:	b120      	cbz	r0, 700e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7004:	2001      	movs	r0, #1
    7006:	7060      	strb	r0, [r4, #1]
    7008:	4807      	ldr	r0, [pc, #28]	; (7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    700a:	6800      	ldr	r0, [r0, #0]
    700c:	e001      	b.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    700e:	7061      	strb	r1, [r4, #1]
    7010:	2010      	movs	r0, #16
    7012:	70a0      	strb	r0, [r4, #2]
    7014:	7021      	strb	r1, [r4, #0]
    7016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    701a:	2000      	movs	r0, #0
    701c:	f000 b98c 	b.w	7338 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7020:	20000370 	.word	0x20000370
    7024:	4001f508 	.word	0x4001f508
    7028:	4000f400 	.word	0x4000f400

0000702c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    702c:	b510      	push	{r4, lr}
    702e:	2002      	movs	r0, #2
    7030:	f000 f982 	bl	7338 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7034:	4904      	ldr	r1, [pc, #16]	; (7048 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7036:	2001      	movs	r0, #1
    7038:	7008      	strb	r0, [r1, #0]
    703a:	f000 f859 	bl	70f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    703e:	4903      	ldr	r1, [pc, #12]	; (704c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7040:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7044:	6008      	str	r0, [r1, #0]
    7046:	bd10      	pop	{r4, pc}
    7048:	20000370 	.word	0x20000370
    704c:	4001f504 	.word	0x4001f504

00007050 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7050:	4803      	ldr	r0, [pc, #12]	; (7060 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7052:	2100      	movs	r1, #0
    7054:	7001      	strb	r1, [r0, #0]
    7056:	7041      	strb	r1, [r0, #1]
    7058:	2110      	movs	r1, #16
    705a:	7081      	strb	r1, [r0, #2]
    705c:	4770      	bx	lr
    705e:	0000      	.short	0x0000
    7060:	20000370 	.word	0x20000370

00007064 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7064:	4807      	ldr	r0, [pc, #28]	; (7084 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7066:	b510      	push	{r4, lr}
    7068:	7801      	ldrb	r1, [r0, #0]
    706a:	b141      	cbz	r1, 707e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    706c:	f000 f832 	bl	70d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7070:	b118      	cbz	r0, 707a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7072:	4805      	ldr	r0, [pc, #20]	; (7088 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7074:	6800      	ldr	r0, [r0, #0]
    7076:	b2c0      	uxtb	r0, r0
    7078:	bd10      	pop	{r4, pc}
    707a:	2010      	movs	r0, #16
    707c:	bd10      	pop	{r4, pc}
    707e:	7880      	ldrb	r0, [r0, #2]
    7080:	bd10      	pop	{r4, pc}
    7082:	0000      	.short	0x0000
    7084:	20000370 	.word	0x20000370
    7088:	4000f400 	.word	0x4000f400

0000708c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    708c:	4808      	ldr	r0, [pc, #32]	; (70b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    708e:	b510      	push	{r4, lr}
    7090:	7801      	ldrb	r1, [r0, #0]
    7092:	b159      	cbz	r1, 70ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7094:	4807      	ldr	r0, [pc, #28]	; (70b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7096:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    709a:	b128      	cbz	r0, 70a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    709c:	f000 f80c 	bl	70b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    70a0:	2800      	cmp	r0, #0
    70a2:	d000      	beq.n	70a6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    70a4:	2001      	movs	r0, #1
    70a6:	bd10      	pop	{r4, pc}
    70a8:	2002      	movs	r0, #2
    70aa:	bd10      	pop	{r4, pc}
    70ac:	7840      	ldrb	r0, [r0, #1]
    70ae:	bd10      	pop	{r4, pc}
    70b0:	20000370 	.word	0x20000370
    70b4:	4000f000 	.word	0x4000f000
    70b8:	4805      	ldr	r0, [pc, #20]	; (70d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    70ba:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    70be:	b111      	cbz	r1, 70c6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    70c0:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    70c4:	b108      	cbz	r0, 70ca <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    70c6:	2000      	movs	r0, #0
    70c8:	4770      	bx	lr
    70ca:	2001      	movs	r0, #1
    70cc:	4770      	bx	lr
    70ce:	0000      	.short	0x0000
    70d0:	4000f000 	.word	0x4000f000
    70d4:	4805      	ldr	r0, [pc, #20]	; (70ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    70d6:	b510      	push	{r4, lr}
    70d8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    70dc:	b120      	cbz	r0, 70e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    70de:	f7ff ffeb 	bl	70b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    70e2:	b108      	cbz	r0, 70e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    70e4:	2001      	movs	r0, #1
    70e6:	bd10      	pop	{r4, pc}
    70e8:	2000      	movs	r0, #0
    70ea:	bd10      	pop	{r4, pc}
    70ec:	4000f000 	.word	0x4000f000
    70f0:	4804      	ldr	r0, [pc, #16]	; (7104 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    70f2:	2100      	movs	r1, #0
    70f4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    70f8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    70fc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7100:	4770      	bx	lr
    7102:	0000      	.short	0x0000
    7104:	4000f000 	.word	0x4000f000

00007108 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    710c:	4604      	mov	r4, r0
    710e:	461e      	mov	r6, r3
    7110:	4690      	mov	r8, r2
    7112:	460f      	mov	r7, r1
    7114:	2001      	movs	r0, #1
    7116:	f000 f90f 	bl	7338 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    711a:	4d1e      	ldr	r5, [pc, #120]	; (7194 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    711c:	481e      	ldr	r0, [pc, #120]	; (7198 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    711e:	f004 0103 	and.w	r1, r4, #3
    7122:	712e      	strb	r6, [r5, #4]
    7124:	6800      	ldr	r0, [r0, #0]
    7126:	0432      	lsls	r2, r6, #16
    7128:	f361 0007 	bfi	r0, r1, #0, #8
    712c:	f366 200f 	bfi	r0, r6, #8, #8
    7130:	0c00      	lsrs	r0, r0, #16
    7132:	4e1a      	ldr	r6, [pc, #104]	; (719c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7134:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7138:	4308      	orrs	r0, r1
    713a:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    713e:	4818      	ldr	r0, [pc, #96]	; (71a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7140:	6007      	str	r7, [r0, #0]
    7142:	f009 f8be 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7146:	b938      	cbnz	r0, 7158 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7148:	4815      	ldr	r0, [pc, #84]	; (71a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    714a:	3010      	adds	r0, #16
    714c:	6801      	ldr	r1, [r0, #0]
    714e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7152:	ea41 0108 	orr.w	r1, r1, r8
    7156:	6001      	str	r1, [r0, #0]
    7158:	f000 f8e4 	bl	7324 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    715c:	b10c      	cbz	r4, 7162 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    715e:	2c04      	cmp	r4, #4
    7160:	d107      	bne.n	7172 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7162:	4811      	ldr	r0, [pc, #68]	; (71a8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7164:	490d      	ldr	r1, [pc, #52]	; (719c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7166:	4a0f      	ldr	r2, [pc, #60]	; (71a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7168:	1d09      	adds	r1, r1, #4
    716a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    716e:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7172:	2001      	movs	r0, #1
    7174:	7068      	strb	r0, [r5, #1]
    7176:	70ec      	strb	r4, [r5, #3]
    7178:	b11c      	cbz	r4, 7182 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    717a:	2c01      	cmp	r4, #1
    717c:	d001      	beq.n	7182 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    717e:	2c02      	cmp	r4, #2
    7180:	d106      	bne.n	7190 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7182:	7028      	strb	r0, [r5, #0]
    7184:	2100      	movs	r1, #0
    7186:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    718a:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    718e:	6030      	str	r0, [r6, #0]
    7190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7194:	20000373 	.word	0x20000373
    7198:	00007334 	.word	0x00007334
    719c:	4000f000 	.word	0x4000f000
    71a0:	4000f508 	.word	0x4000f508
    71a4:	4000f100 	.word	0x4000f100
    71a8:	4001f088 	.word	0x4001f088

000071ac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    71ac:	b570      	push	{r4, r5, r6, lr}
    71ae:	4a1c      	ldr	r2, [pc, #112]	; (7220 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    71b0:	7853      	ldrb	r3, [r2, #1]
    71b2:	b1a3      	cbz	r3, 71de <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    71b4:	4b1b      	ldr	r3, [pc, #108]	; (7224 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    71b6:	6019      	str	r1, [r3, #0]
    71b8:	1d19      	adds	r1, r3, #4
    71ba:	6008      	str	r0, [r1, #0]
    71bc:	2501      	movs	r5, #1
    71be:	7095      	strb	r5, [r2, #2]
    71c0:	4610      	mov	r0, r2
    71c2:	78d6      	ldrb	r6, [r2, #3]
    71c4:	4b18      	ldr	r3, [pc, #96]	; (7228 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    71c6:	7800      	ldrb	r0, [r0, #0]
    71c8:	4c18      	ldr	r4, [pc, #96]	; (722c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    71ca:	2100      	movs	r1, #0
    71cc:	b156      	cbz	r6, 71e4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    71ce:	2e04      	cmp	r6, #4
    71d0:	d01b      	beq.n	720a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    71d2:	b308      	cbz	r0, 7218 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    71d4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    71d8:	0668      	lsls	r0, r5, #25
    71da:	6018      	str	r0, [r3, #0]
    71dc:	bd70      	pop	{r4, r5, r6, pc}
    71de:	f240 11bd 	movw	r1, #445	; 0x1bd
    71e2:	e01a      	b.n	721a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    71e4:	b178      	cbz	r0, 7206 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    71e6:	4620      	mov	r0, r4
    71e8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    71ec:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    71f0:	601e      	str	r6, [r3, #0]
    71f2:	1271      	asrs	r1, r6, #9
    71f4:	f008 fee6 	bl	ffc4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    71f8:	2800      	cmp	r0, #0
    71fa:	d0ef      	beq.n	71dc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    71fc:	6065      	str	r5, [r4, #4]
    71fe:	480a      	ldr	r0, [pc, #40]	; (7228 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7200:	1d00      	adds	r0, r0, #4
    7202:	6006      	str	r6, [r0, #0]
    7204:	bd70      	pop	{r4, r5, r6, pc}
    7206:	21b3      	movs	r1, #179	; 0xb3
    7208:	e007      	b.n	721a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    720a:	7015      	strb	r5, [r2, #0]
    720c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7210:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7214:	6025      	str	r5, [r4, #0]
    7216:	bd70      	pop	{r4, r5, r6, pc}
    7218:	21c6      	movs	r1, #198	; 0xc6
    721a:	203c      	movs	r0, #60	; 0x3c
    721c:	f7f9 fbdc 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7220:	20000373 	.word	0x20000373
    7224:	4000f50c 	.word	0x4000f50c
    7228:	4001f504 	.word	0x4001f504
    722c:	4000f000 	.word	0x4000f000

00007230 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7230:	b570      	push	{r4, r5, r6, lr}
    7232:	4d05      	ldr	r5, [pc, #20]	; (7248 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7234:	2400      	movs	r4, #0
    7236:	7828      	ldrb	r0, [r5, #0]
    7238:	b110      	cbz	r0, 7240 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    723a:	f000 f873 	bl	7324 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    723e:	702c      	strb	r4, [r5, #0]
    7240:	706c      	strb	r4, [r5, #1]
    7242:	70ac      	strb	r4, [r5, #2]
    7244:	bd70      	pop	{r4, r5, r6, pc}
    7246:	0000      	.short	0x0000
    7248:	20000373 	.word	0x20000373

0000724c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    724c:	4802      	ldr	r0, [pc, #8]	; (7258 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    724e:	2100      	movs	r1, #0
    7250:	7001      	strb	r1, [r0, #0]
    7252:	7041      	strb	r1, [r0, #1]
    7254:	7081      	strb	r1, [r0, #2]
    7256:	4770      	bx	lr
    7258:	20000373 	.word	0x20000373

0000725c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    725c:	480b      	ldr	r0, [pc, #44]	; (728c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    725e:	b510      	push	{r4, lr}
    7260:	7800      	ldrb	r0, [r0, #0]
    7262:	b158      	cbz	r0, 727c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7264:	f44f 7182 	mov.w	r1, #260	; 0x104
    7268:	4809      	ldr	r0, [pc, #36]	; (7290 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    726a:	f008 feab 	bl	ffc4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    726e:	b140      	cbz	r0, 7282 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7270:	4808      	ldr	r0, [pc, #32]	; (7294 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7272:	6800      	ldr	r0, [r0, #0]
    7274:	2800      	cmp	r0, #0
    7276:	d000      	beq.n	727a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7278:	2001      	movs	r0, #1
    727a:	bd10      	pop	{r4, pc}
    727c:	f240 2123 	movw	r1, #547	; 0x223
    7280:	e001      	b.n	7286 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7282:	f44f 7109 	mov.w	r1, #548	; 0x224
    7286:	203c      	movs	r0, #60	; 0x3c
    7288:	f7f9 fba6 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    728c:	20000373 	.word	0x20000373
    7290:	4000f000 	.word	0x4000f000
    7294:	4000f400 	.word	0x4000f400

00007298 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7298:	4801      	ldr	r0, [pc, #4]	; (72a0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    729a:	2101      	movs	r1, #1
    729c:	6081      	str	r1, [r0, #8]
    729e:	4770      	bx	lr
    72a0:	4000f000 	.word	0x4000f000

000072a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    72a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72a8:	481b      	ldr	r0, [pc, #108]	; (7318 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    72aa:	7800      	ldrb	r0, [r0, #0]
    72ac:	b1d8      	cbz	r0, 72e6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    72ae:	f8df 806c 	ldr.w	r8, [pc, #108]	; 731c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    72b2:	f44f 7682 	mov.w	r6, #260	; 0x104
    72b6:	4631      	mov	r1, r6
    72b8:	4640      	mov	r0, r8
    72ba:	f008 fe83 	bl	ffc4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    72be:	2800      	cmp	r0, #0
    72c0:	d128      	bne.n	7314 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    72c2:	2002      	movs	r0, #2
    72c4:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    72c8:	4c15      	ldr	r4, [pc, #84]	; (7320 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    72ca:	6820      	ldr	r0, [r4, #0]
    72cc:	43c0      	mvns	r0, r0
    72ce:	f340 1500 	sbfx	r5, r0, #4, #1
    72d2:	6820      	ldr	r0, [r4, #0]
    72d4:	f040 0010 	orr.w	r0, r0, #16
    72d8:	6020      	str	r0, [r4, #0]
    72da:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    72de:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    72e2:	1c6d      	adds	r5, r5, #1
    72e4:	e008      	b.n	72f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    72e6:	f240 212f 	movw	r1, #559	; 0x22f
    72ea:	203c      	movs	r0, #60	; 0x3c
    72ec:	f7f9 fb74 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72f0:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    72f4:	f009 f825 	bl	10342 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    72f8:	4631      	mov	r1, r6
    72fa:	4640      	mov	r0, r8
    72fc:	f008 fe62 	bl	ffc4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7300:	2800      	cmp	r0, #0
    7302:	d0f5      	beq.n	72f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7304:	b91d      	cbnz	r5, 730e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7306:	6820      	ldr	r0, [r4, #0]
    7308:	f020 0010 	bic.w	r0, r0, #16
    730c:	6020      	str	r0, [r4, #0]
    730e:	2002      	movs	r0, #2
    7310:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7318:	20000373 	.word	0x20000373
    731c:	4000f000 	.word	0x4000f000
    7320:	e000ed10 	.word	0xe000ed10
    7324:	4902      	ldr	r1, [pc, #8]	; (7330 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7326:	4801      	ldr	r0, [pc, #4]	; (732c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7328:	6008      	str	r0, [r1, #0]
    732a:	4770      	bx	lr
    732c:	02020000 	.word	0x02020000
    7330:	4001f508 	.word	0x4001f508
    7334:	00010000 	.word	0x00010000

00007338 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7338:	b510      	push	{r4, lr}
    733a:	4604      	mov	r4, r0
    733c:	f000 f820 	bl	7380 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7340:	2c00      	cmp	r4, #0
    7342:	d00e      	beq.n	7362 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7344:	4a0b      	ldr	r2, [pc, #44]	; (7374 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7346:	480b      	ldr	r0, [pc, #44]	; (7374 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7348:	490b      	ldr	r1, [pc, #44]	; (7378 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    734a:	3214      	adds	r2, #20
    734c:	2c01      	cmp	r4, #1
    734e:	d005      	beq.n	735c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7350:	2c02      	cmp	r4, #2
    7352:	d007      	beq.n	7364 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7354:	2182      	movs	r1, #130	; 0x82
    7356:	203d      	movs	r0, #61	; 0x3d
    7358:	f7f9 fb3e 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    735c:	2302      	movs	r3, #2
    735e:	6003      	str	r3, [r0, #0]
    7360:	6011      	str	r1, [r2, #0]
    7362:	bd10      	pop	{r4, pc}
    7364:	2303      	movs	r3, #3
    7366:	6003      	str	r3, [r0, #0]
    7368:	6011      	str	r1, [r2, #0]
    736a:	4904      	ldr	r1, [pc, #16]	; (737c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    736c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7370:	6008      	str	r0, [r1, #0]
    7372:	bd10      	pop	{r4, pc}
    7374:	4000f500 	.word	0x4000f500
    7378:	200014ad 	.word	0x200014ad
    737c:	4001f504 	.word	0x4001f504
    7380:	4805      	ldr	r0, [pc, #20]	; (7398 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7382:	b510      	push	{r4, lr}
    7384:	2100      	movs	r1, #0
    7386:	6001      	str	r1, [r0, #0]
    7388:	6001      	str	r1, [r0, #0]
    738a:	f7ff ff51 	bl	7230 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    738e:	4903      	ldr	r1, [pc, #12]	; (739c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7390:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7394:	6008      	str	r0, [r1, #0]
    7396:	bd10      	pop	{r4, pc}
    7398:	4000f500 	.word	0x4000f500
    739c:	4001f508 	.word	0x4001f508

000073a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    73a0:	4805      	ldr	r0, [pc, #20]	; (73b8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    73a2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    73a6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    73aa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    73ae:	2100      	movs	r1, #0
    73b0:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    73b4:	4770      	bx	lr
    73b6:	0000      	.short	0x0000
    73b8:	40001000 	.word	0x40001000

000073bc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    73bc:	4904      	ldr	r1, [pc, #16]	; (73d0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    73be:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    73c2:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    73c6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    73ca:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    73ce:	4770      	bx	lr
    73d0:	40001000 	.word	0x40001000

000073d4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    73d4:	4801      	ldr	r0, [pc, #4]	; (73dc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    73d6:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    73da:	4770      	bx	lr
    73dc:	20000bf4 	.word	0x20000bf4

000073e0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    73e0:	4902      	ldr	r1, [pc, #8]	; (73ec <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    73e2:	5c08      	ldrb	r0, [r1, r0]
    73e4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    73e8:	4770      	bx	lr
    73ea:	0000      	.short	0x0000
    73ec:	00008136 	.word	0x00008136

000073f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    73f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73f2:	4c24      	ldr	r4, [pc, #144]	; (7484 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    73f4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    73f8:	f010 0f10 	tst.w	r0, #16
    73fc:	d001      	beq.n	7402 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    73fe:	2701      	movs	r7, #1
    7400:	e000      	b.n	7404 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7402:	2700      	movs	r7, #0
    7404:	2010      	movs	r0, #16
    7406:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    740a:	2002      	movs	r0, #2
    740c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7410:	481d      	ldr	r0, [pc, #116]	; (7488 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7412:	2500      	movs	r5, #0
    7414:	491d      	ldr	r1, [pc, #116]	; (748c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7416:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    741a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    741e:	6008      	str	r0, [r1, #0]
    7420:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7424:	f44f 7688 	mov.w	r6, #272	; 0x110
    7428:	f010 0fff 	tst.w	r0, #255	; 0xff
    742c:	d019      	beq.n	7462 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    742e:	20ff      	movs	r0, #255	; 0xff
    7430:	f88d 0000 	strb.w	r0, [sp]
    7434:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7438:	2001      	movs	r0, #1
    743a:	6120      	str	r0, [r4, #16]
    743c:	e005      	b.n	744a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    743e:	bf00      	nop
    7440:	f89d 0000 	ldrb.w	r0, [sp]
    7444:	1e40      	subs	r0, r0, #1
    7446:	f88d 0000 	strb.w	r0, [sp]
    744a:	f89d 0000 	ldrb.w	r0, [sp]
    744e:	b128      	cbz	r0, 745c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7450:	4631      	mov	r1, r6
    7452:	4620      	mov	r0, r4
    7454:	f008 fde5 	bl	10022 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7458:	2800      	cmp	r0, #0
    745a:	d0f1      	beq.n	7440 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    745c:	f89d 0000 	ldrb.w	r0, [sp]
    7460:	b158      	cbz	r0, 747a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7462:	f000 fc57 	bl	7d14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7466:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    746a:	f000 fde5 	bl	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    746e:	2f00      	cmp	r7, #0
    7470:	d002      	beq.n	7478 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7472:	2010      	movs	r0, #16
    7474:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    747a:	f640 01aa 	movw	r1, #2218	; 0x8aa
    747e:	203e      	movs	r0, #62	; 0x3e
    7480:	f7f9 faaa 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7484:	40001000 	.word	0x40001000
    7488:	20000bf4 	.word	0x20000bf4
    748c:	4001f508 	.word	0x4001f508

00007490 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7494:	4d18      	ldr	r5, [pc, #96]	; (74f8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7496:	4607      	mov	r7, r0
    7498:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    749c:	07c2      	lsls	r2, r0, #31
    749e:	d00f      	beq.n	74c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    74a0:	4c16      	ldr	r4, [pc, #88]	; (74fc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    74a2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    74a6:	f042 0201 	orr.w	r2, r2, #1
    74aa:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    74ae:	f040 0002 	orr.w	r0, r0, #2
    74b2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    74b6:	2601      	movs	r6, #1
    74b8:	b13f      	cbz	r7, 74ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    74ba:	2f01      	cmp	r7, #1
    74bc:	d00b      	beq.n	74d6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    74be:	e010      	b.n	74e2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    74c0:	f240 7185 	movw	r1, #1925	; 0x785
    74c4:	203e      	movs	r0, #62	; 0x3e
    74c6:	f7f9 fa87 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ca:	4608      	mov	r0, r1
    74cc:	f000 fe0e 	bl	80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>
    74d0:	726e      	strb	r6, [r5, #9]
    74d2:	6026      	str	r6, [r4, #0]
    74d4:	e005      	b.n	74e2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    74d6:	4608      	mov	r0, r1
    74d8:	f000 fdee 	bl	80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>
    74dc:	2002      	movs	r0, #2
    74de:	7268      	strb	r0, [r5, #9]
    74e0:	6066      	str	r6, [r4, #4]
    74e2:	4807      	ldr	r0, [pc, #28]	; (7500 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    74e4:	64c6      	str	r6, [r0, #76]	; 0x4c
    74e6:	4806      	ldr	r0, [pc, #24]	; (7500 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    74e8:	300c      	adds	r0, #12
    74ea:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    74ee:	4638      	mov	r0, r7
    74f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    74f4:	f000 bd72 	b.w	7fdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    74f8:	20000bf4 	.word	0x20000bf4
    74fc:	40001000 	.word	0x40001000
    7500:	40008000 	.word	0x40008000

00007504 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7508:	4c2c      	ldr	r4, [pc, #176]	; (75bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    750a:	0006      	movs	r6, r0
    750c:	4d2c      	ldr	r5, [pc, #176]	; (75c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    750e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7512:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 75c4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7516:	f040 0002 	orr.w	r0, r0, #2
    751a:	4689      	mov	r9, r1
    751c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7520:	f04f 0700 	mov.w	r7, #0
    7524:	d002      	beq.n	752c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7526:	2e01      	cmp	r6, #1
    7528:	d020      	beq.n	756c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    752a:	e036      	b.n	759a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    752c:	4608      	mov	r0, r1
    752e:	f000 fddd 	bl	80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>
    7532:	2001      	movs	r0, #1
    7534:	7260      	strb	r0, [r4, #9]
    7536:	79e0      	ldrb	r0, [r4, #7]
    7538:	2801      	cmp	r0, #1
    753a:	d105      	bne.n	7548 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    753c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7540:	f040 0008 	orr.w	r0, r0, #8
    7544:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    754a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    754e:	62a0      	str	r0, [r4, #40]	; 0x28
    7550:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7554:	f8c8 0000 	str.w	r0, [r8]
    7558:	491b      	ldr	r1, [pc, #108]	; (75c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    755a:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    755e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7562:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7566:	fbb0 f7f1 	udiv	r7, r0, r1
    756a:	e016      	b.n	759a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    756c:	4608      	mov	r0, r1
    756e:	f000 fda3 	bl	80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>
    7572:	2002      	movs	r0, #2
    7574:	7260      	strb	r0, [r4, #9]
    7576:	79e0      	ldrb	r0, [r4, #7]
    7578:	2801      	cmp	r0, #1
    757a:	d105      	bne.n	7588 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    757c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7580:	f040 0004 	orr.w	r0, r0, #4
    7584:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7588:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    758a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    758e:	62a0      	str	r0, [r4, #40]	; 0x28
    7590:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7594:	f8c8 0000 	str.w	r0, [r8]
    7598:	2729      	movs	r7, #41	; 0x29
    759a:	f000 fc27 	bl	7dec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    759e:	f008 fd88 	bl	100b2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    75a2:	b120      	cbz	r0, 75ae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    75a4:	f7ff ff24 	bl	73f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    75a8:	2000      	movs	r0, #0
    75aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75ae:	2100      	movs	r1, #0
    75b0:	4630      	mov	r0, r6
    75b2:	f000 fd13 	bl	7fdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    75b6:	4638      	mov	r0, r7
    75b8:	e7f7      	b.n	75aa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    75ba:	0000      	.short	0x0000
    75bc:	20000bf4 	.word	0x20000bf4
    75c0:	40001000 	.word	0x40001000
    75c4:	4001f504 	.word	0x4001f504
    75c8:	00008130 	.word	0x00008130

000075cc <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    75cc:	4a02      	ldr	r2, [pc, #8]	; (75d8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    75ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
    75d0:	6003      	str	r3, [r0, #0]
    75d2:	6b50      	ldr	r0, [r2, #52]	; 0x34
    75d4:	6008      	str	r0, [r1, #0]
    75d6:	4770      	bx	lr
    75d8:	20000bf4 	.word	0x20000bf4

000075dc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    75dc:	b510      	push	{r4, lr}
    75de:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    75e0:	4901      	ldr	r1, [pc, #4]	; (75e8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    75e2:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    75e6:	bd10      	pop	{r4, pc}
    75e8:	20000be4 	.word	0x20000be4

000075ec <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    75ec:	490f      	ldr	r1, [pc, #60]	; (762c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    75ee:	b510      	push	{r4, lr}
    75f0:	69ca      	ldr	r2, [r1, #28]
    75f2:	4282      	cmp	r2, r0
    75f4:	d302      	bcc.n	75fc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    75f6:	f640 113a 	movw	r1, #2362	; 0x93a
    75fa:	e00b      	b.n	7614 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    75fc:	2201      	movs	r2, #1
    75fe:	730a      	strb	r2, [r1, #12]
    7600:	6108      	str	r0, [r1, #16]
    7602:	490b      	ldr	r1, [pc, #44]	; (7630 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7604:	644a      	str	r2, [r1, #68]	; 0x44
    7606:	1d0a      	adds	r2, r1, #4
    7608:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    760c:	4283      	cmp	r3, r0
    760e:	d304      	bcc.n	761a <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    7610:	f640 1143 	movw	r1, #2371	; 0x943
    7614:	203e      	movs	r0, #62	; 0x3e
    7616:	f7f9 f9df 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    761a:	2300      	movs	r3, #0
    761c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    7620:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7628:	f000 bcac 	b.w	7f84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    762c:	20000bf4 	.word	0x20000bf4
    7630:	40008000 	.word	0x40008000

00007634 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7634:	b570      	push	{r4, r5, r6, lr}
    7636:	4c0f      	ldr	r4, [pc, #60]	; (7674 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7638:	4603      	mov	r3, r0
    763a:	2002      	movs	r0, #2
    763c:	7320      	strb	r0, [r4, #12]
    763e:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7642:	2096      	movs	r0, #150	; 0x96
    7644:	f894 1020 	ldrb.w	r1, [r4, #32]
    7648:	7d22      	ldrb	r2, [r4, #20]
    764a:	2d01      	cmp	r5, #1
    764c:	d00e      	beq.n	766c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    764e:	f000 fdab 	bl	81a8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7652:	6120      	str	r0, [r4, #16]
    7654:	4808      	ldr	r0, [pc, #32]	; (7678 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7656:	2100      	movs	r1, #0
    7658:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    765c:	6921      	ldr	r1, [r4, #16]
    765e:	69e0      	ldr	r0, [r4, #28]
    7660:	4408      	add	r0, r1
    7662:	4905      	ldr	r1, [pc, #20]	; (7678 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7664:	1d09      	adds	r1, r1, #4
    7666:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    766a:	bd70      	pop	{r4, r5, r6, pc}
    766c:	f000 fdba 	bl	81e4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7670:	e7ef      	b.n	7652 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7672:	0000      	.short	0x0000
    7674:	20000bf4 	.word	0x20000bf4
    7678:	40008000 	.word	0x40008000

0000767c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    767c:	b510      	push	{r4, lr}
    767e:	f008 fe3c 	bl	102fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7682:	2800      	cmp	r0, #0
    7684:	d006      	beq.n	7694 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    7686:	4804      	ldr	r0, [pc, #16]	; (7698 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    7688:	6801      	ldr	r1, [r0, #0]
    768a:	f021 0101 	bic.w	r1, r1, #1
    768e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    7692:	6001      	str	r1, [r0, #0]
    7694:	bd10      	pop	{r4, pc}
    7696:	0000      	.short	0x0000
    7698:	40001774 	.word	0x40001774

0000769c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76a0:	2238      	movs	r2, #56	; 0x38
    76a2:	2100      	movs	r1, #0
    76a4:	4813      	ldr	r0, [pc, #76]	; (76f4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    76a6:	f008 ff11 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    76aa:	f000 fcc5 	bl	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    76ae:	f008 fddd 	bl	1026c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    76b2:	4d11      	ldr	r5, [pc, #68]	; (76f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    76b4:	4e10      	ldr	r6, [pc, #64]	; (76f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    76b6:	2400      	movs	r4, #0
    76b8:	4f0f      	ldr	r7, [pc, #60]	; (76f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    76ba:	3508      	adds	r5, #8
    76bc:	3610      	adds	r6, #16
    76be:	b928      	cbnz	r0, 76cc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    76c0:	f008 fdeb 	bl	1029a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    76c4:	b910      	cbnz	r0, 76cc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    76c6:	f008 fdf2 	bl	102ae <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    76ca:	b108      	cbz	r0, 76d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    76cc:	2224      	movs	r2, #36	; 0x24
    76ce:	e006      	b.n	76de <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    76d0:	f008 fe2d 	bl	1032e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    76d4:	b910      	cbnz	r0, 76dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    76d6:	f008 fe20 	bl	1031a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    76da:	b140      	cbz	r0, 76ee <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    76dc:	2240      	movs	r2, #64	; 0x40
    76de:	21ff      	movs	r1, #255	; 0xff
    76e0:	4638      	mov	r0, r7
    76e2:	f008 fef3 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    76e6:	602c      	str	r4, [r5, #0]
    76e8:	6034      	str	r4, [r6, #0]
    76ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76ee:	2238      	movs	r2, #56	; 0x38
    76f0:	e7f5      	b.n	76de <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    76f2:	0000      	.short	0x0000
    76f4:	20000bf4 	.word	0x20000bf4
    76f8:	40000e00 	.word	0x40000e00

000076fc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    76fc:	4801      	ldr	r0, [pc, #4]	; (7704 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    76fe:	69c0      	ldr	r0, [r0, #28]
    7700:	4770      	bx	lr
    7702:	0000      	.short	0x0000
    7704:	20000bf4 	.word	0x20000bf4

00007708 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    7708:	4801      	ldr	r0, [pc, #4]	; (7710 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    770a:	6980      	ldr	r0, [r0, #24]
    770c:	4770      	bx	lr
    770e:	0000      	.short	0x0000
    7710:	20000bf4 	.word	0x20000bf4

00007714 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7714:	b510      	push	{r4, lr}
    7716:	f000 fc43 	bl	7fa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    771a:	f7ff fe69 	bl	73f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    771e:	f004 fb69 	bl	bdf4 <mpsl_fem_disable>
    7722:	b130      	cbz	r0, 7732 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7724:	1c40      	adds	r0, r0, #1
    7726:	d004      	beq.n	7732 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7728:	f240 516d 	movw	r1, #1389	; 0x56d
    772c:	203e      	movs	r0, #62	; 0x3e
    772e:	f7f9 f953 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7732:	480f      	ldr	r0, [pc, #60]	; (7770 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7734:	4a0f      	ldr	r2, [pc, #60]	; (7774 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7736:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7738:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    773c:	6011      	str	r1, [r2, #0]
    773e:	2400      	movs	r4, #0
    7740:	6284      	str	r4, [r0, #40]	; 0x28
    7742:	7304      	strb	r4, [r0, #12]
    7744:	61c4      	str	r4, [r0, #28]
    7746:	6184      	str	r4, [r0, #24]
    7748:	f000 fc2a 	bl	7fa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    774c:	480a      	ldr	r0, [pc, #40]	; (7778 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    774e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7752:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7756:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    775a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    775e:	2001      	movs	r0, #1
    7760:	f008 fc4e 	bl	10000 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7768:	2001      	movs	r0, #1
    776a:	f008 bc3c 	b.w	ffe6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    776e:	0000      	.short	0x0000
    7770:	20000bf4 	.word	0x20000bf4
    7774:	4001f508 	.word	0x4001f508
    7778:	40008000 	.word	0x40008000

0000777c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    777c:	b570      	push	{r4, r5, r6, lr}
    777e:	2001      	movs	r0, #1
    7780:	f008 fc3e 	bl	10000 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7784:	4c37      	ldr	r4, [pc, #220]	; (7864 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    7786:	2000      	movs	r0, #0
    7788:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    778c:	2001      	movs	r0, #1
    778e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7792:	f008 fda2 	bl	102da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7796:	4d34      	ldr	r5, [pc, #208]	; (7868 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7798:	b118      	cbz	r0, 77a2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    779a:	6828      	ldr	r0, [r5, #0]
    779c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    77a0:	6028      	str	r0, [r5, #0]
    77a2:	f008 fd8e 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    77a6:	b128      	cbz	r0, 77b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    77a8:	6828      	ldr	r0, [r5, #0]
    77aa:	4930      	ldr	r1, [pc, #192]	; (786c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    77ac:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    77b0:	4308      	orrs	r0, r1
    77b2:	6028      	str	r0, [r5, #0]
    77b4:	f008 fda1 	bl	102fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    77b8:	b138      	cbz	r0, 77ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    77ba:	482b      	ldr	r0, [pc, #172]	; (7868 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    77bc:	1d00      	adds	r0, r0, #4
    77be:	6801      	ldr	r1, [r0, #0]
    77c0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    77c4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    77c8:	6001      	str	r1, [r0, #0]
    77ca:	4927      	ldr	r1, [pc, #156]	; (7868 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    77cc:	4828      	ldr	r0, [pc, #160]	; (7870 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    77ce:	313c      	adds	r1, #60	; 0x3c
    77d0:	6008      	str	r0, [r1, #0]
    77d2:	f004 fb49 	bl	be68 <mpsl_fem_device_config_254_apply_get>
    77d6:	b140      	cbz	r0, 77ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    77d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    77dc:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    77e0:	1c41      	adds	r1, r0, #1
    77e2:	d002      	beq.n	77ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    77e4:	4920      	ldr	r1, [pc, #128]	; (7868 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    77e6:	3110      	adds	r1, #16
    77e8:	6008      	str	r0, [r1, #0]
    77ea:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    77ee:	6e00      	ldr	r0, [r0, #96]	; 0x60
    77f0:	1c41      	adds	r1, r0, #1
    77f2:	d004      	beq.n	77fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    77f4:	491f      	ldr	r1, [pc, #124]	; (7874 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    77f6:	680a      	ldr	r2, [r1, #0]
    77f8:	f360 4217 	bfi	r2, r0, #16, #8
    77fc:	600a      	str	r2, [r1, #0]
    77fe:	f240 1103 	movw	r1, #259	; 0x103
    7802:	f240 605b 	movw	r0, #1627	; 0x65b
    7806:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    780a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    780e:	2001      	movs	r0, #1
    7810:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    7814:	f000 f842 	bl	789c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7818:	f240 2001 	movw	r0, #513	; 0x201
    781c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7820:	2002      	movs	r0, #2
    7822:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7826:	4914      	ldr	r1, [pc, #80]	; (7878 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7828:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    782c:	6008      	str	r0, [r1, #0]
    782e:	4913      	ldr	r1, [pc, #76]	; (787c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7830:	2000      	movs	r0, #0
    7832:	4d13      	ldr	r5, [pc, #76]	; (7880 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7834:	8608      	strh	r0, [r1, #48]	; 0x30
    7836:	3110      	adds	r1, #16
    7838:	61c8      	str	r0, [r1, #28]
    783a:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    783e:	7028      	strb	r0, [r5, #0]
    7840:	2001      	movs	r0, #1
    7842:	f008 fbd0 	bl	ffe6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7846:	2010      	movs	r0, #16
    7848:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    784c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7850:	2002      	movs	r0, #2
    7852:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7856:	6868      	ldr	r0, [r5, #4]
    7858:	2800      	cmp	r0, #0
    785a:	d002      	beq.n	7862 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    785c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7860:	4700      	bx	r0
    7862:	bd70      	pop	{r4, r5, r6, pc}
    7864:	40001000 	.word	0x40001000
    7868:	4000173c 	.word	0x4000173c
    786c:	80000096 	.word	0x80000096
    7870:	8900002c 	.word	0x8900002c
    7874:	4000158c 	.word	0x4000158c
    7878:	4001f504 	.word	0x4001f504
    787c:	20000be4 	.word	0x20000be4
    7880:	200002bc 	.word	0x200002bc

00007884 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7884:	4901      	ldr	r1, [pc, #4]	; (788c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7886:	7548      	strb	r0, [r1, #21]
    7888:	4770      	bx	lr
    788a:	0000      	.short	0x0000
    788c:	20000bf4 	.word	0x20000bf4

00007890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    7890:	4901      	ldr	r1, [pc, #4]	; (7898 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    7892:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7896:	4770      	bx	lr
    7898:	00008184 	.word	0x00008184

0000789c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    789c:	4908      	ldr	r1, [pc, #32]	; (78c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    789e:	b510      	push	{r4, lr}
    78a0:	7508      	strb	r0, [r1, #20]
    78a2:	4908      	ldr	r1, [pc, #32]	; (78c4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    78a4:	2801      	cmp	r0, #1
    78a6:	d006      	beq.n	78b6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    78a8:	2802      	cmp	r0, #2
    78aa:	d006      	beq.n	78ba <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    78ac:	f640 5186 	movw	r1, #3462	; 0xd86
    78b0:	203e      	movs	r0, #62	; 0x3e
    78b2:	f7f9 f891 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78b6:	2003      	movs	r0, #3
    78b8:	e000      	b.n	78bc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    78ba:	2004      	movs	r0, #4
    78bc:	6008      	str	r0, [r1, #0]
    78be:	bd10      	pop	{r4, pc}
    78c0:	20000bf4 	.word	0x20000bf4
    78c4:	40001510 	.word	0x40001510

000078c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    78c8:	4905      	ldr	r1, [pc, #20]	; (78e0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    78ca:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    78ce:	4805      	ldr	r0, [pc, #20]	; (78e4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    78d0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    78d4:	f041 0101 	orr.w	r1, r1, #1
    78d8:	7001      	strb	r1, [r0, #0]
    78da:	f000 ba4d 	b.w	7d78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    78de:	0000      	.short	0x0000
    78e0:	40001000 	.word	0x40001000
    78e4:	20000bf4 	.word	0x20000bf4

000078e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    78e8:	4901      	ldr	r1, [pc, #4]	; (78f0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    78ea:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    78ee:	4770      	bx	lr
    78f0:	00008190 	.word	0x00008190

000078f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    78f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78f8:	4e30      	ldr	r6, [pc, #192]	; (79bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    78fa:	4c31      	ldr	r4, [pc, #196]	; (79c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    78fc:	4688      	mov	r8, r1
    78fe:	0007      	movs	r7, r0
    7900:	4615      	mov	r5, r2
    7902:	f04f 0901 	mov.w	r9, #1
    7906:	d006      	beq.n	7916 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    7908:	2f01      	cmp	r7, #1
    790a:	d012      	beq.n	7932 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    790c:	f640 012d 	movw	r1, #2093	; 0x82d
    7910:	203e      	movs	r0, #62	; 0x3e
    7912:	f7f9 f861 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7916:	4610      	mov	r0, r2
    7918:	f000 fbe8 	bl	80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>
    791c:	4829      	ldr	r0, [pc, #164]	; (79c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    791e:	f884 9009 	strb.w	r9, [r4, #9]
    7922:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    7926:	4640      	mov	r0, r8
    7928:	f000 fb8e 	bl	8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
    792c:	4605      	mov	r5, r0
    792e:	4630      	mov	r0, r6
    7930:	e00c      	b.n	794c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    7932:	4610      	mov	r0, r2
    7934:	f000 fbc0 	bl	80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>
    7938:	2002      	movs	r0, #2
    793a:	7260      	strb	r0, [r4, #9]
    793c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    7940:	4640      	mov	r0, r8
    7942:	f000 fb81 	bl	8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
    7946:	4605      	mov	r5, r0
    7948:	481c      	ldr	r0, [pc, #112]	; (79bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    794a:	1d00      	adds	r0, r0, #4
    794c:	f000 fb3a 	bl	7fc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    7950:	f8df 8074 	ldr.w	r8, [pc, #116]	; 79c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    7954:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    7958:	f8df a074 	ldr.w	sl, [pc, #116]	; 79d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    795c:	481b      	ldr	r0, [pc, #108]	; (79cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    795e:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    7962:	2010      	movs	r0, #16
    7964:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    7968:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    796a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    796e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    7972:	62a0      	str	r0, [r4, #40]	; 0x28
    7974:	4817      	ldr	r0, [pc, #92]	; (79d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7976:	6006      	str	r6, [r0, #0]
    7978:	f000 fa38 	bl	7dec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    797c:	4641      	mov	r1, r8
    797e:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    7982:	4811      	ldr	r0, [pc, #68]	; (79c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    7984:	300c      	adds	r0, #12
    7986:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    798a:	42a8      	cmp	r0, r5
    798c:	d310      	bcc.n	79b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    798e:	2000      	movs	r0, #0
    7990:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7994:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    7998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    799a:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    799e:	62a0      	str	r0, [r4, #40]	; 0x28
    79a0:	480c      	ldr	r0, [pc, #48]	; (79d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    79a2:	1d00      	adds	r0, r0, #4
    79a4:	6006      	str	r6, [r0, #0]
    79a6:	f7ff fd23 	bl	73f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    79aa:	2000      	movs	r0, #0
    79ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79b0:	4629      	mov	r1, r5
    79b2:	4638      	mov	r0, r7
    79b4:	f000 fb12 	bl	7fdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    79b8:	2001      	movs	r0, #1
    79ba:	e7f7      	b.n	79ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    79bc:	40001000 	.word	0x40001000
    79c0:	20000bf4 	.word	0x20000bf4
    79c4:	00008130 	.word	0x00008130
    79c8:	40008000 	.word	0x40008000
    79cc:	40008140 	.word	0x40008140
    79d0:	4001f098 	.word	0x4001f098
    79d4:	4001f504 	.word	0x4001f504

000079d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    79d8:	4b0d      	ldr	r3, [pc, #52]	; (7a10 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    79da:	b510      	push	{r4, lr}
    79dc:	71d8      	strb	r0, [r3, #7]
    79de:	729a      	strb	r2, [r3, #10]
    79e0:	b151      	cbz	r1, 79f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    79e2:	2002      	movs	r0, #2
    79e4:	7218      	strb	r0, [r3, #8]
    79e6:	2801      	cmp	r0, #1
    79e8:	d008      	beq.n	79fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    79ea:	2802      	cmp	r0, #2
    79ec:	d00f      	beq.n	7a0e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    79ee:	f640 2163 	movw	r1, #2659	; 0xa63
    79f2:	203e      	movs	r0, #62	; 0x3e
    79f4:	f7f8 fff0 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79f8:	2001      	movs	r0, #1
    79fa:	e7f3      	b.n	79e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    79fc:	7a58      	ldrb	r0, [r3, #9]
    79fe:	2802      	cmp	r0, #2
    7a00:	d105      	bne.n	7a0e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7a02:	f000 f97d 	bl	7d00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    7a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a0a:	f000 bab1 	b.w	7f70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    7a0e:	bd10      	pop	{r4, pc}
    7a10:	20000bf4 	.word	0x20000bf4

00007a14 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    7a14:	4902      	ldr	r1, [pc, #8]	; (7a20 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    7a16:	2000      	movs	r0, #0
    7a18:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7a1c:	4770      	bx	lr
    7a1e:	0000      	.short	0x0000
    7a20:	40008000 	.word	0x40008000

00007a24 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    7a24:	4904      	ldr	r1, [pc, #16]	; (7a38 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    7a26:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    7a2a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7a2e:	4249      	negs	r1, r1
    7a30:	7001      	strb	r1, [r0, #0]
    7a32:	2001      	movs	r0, #1
    7a34:	4770      	bx	lr
    7a36:	0000      	.short	0x0000
    7a38:	40001000 	.word	0x40001000

00007a3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    7a3c:	4903      	ldr	r1, [pc, #12]	; (7a4c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    7a3e:	0e02      	lsrs	r2, r0, #24
    7a40:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    7a44:	0200      	lsls	r0, r0, #8
    7a46:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    7a4a:	4770      	bx	lr
    7a4c:	40001000 	.word	0x40001000

00007a50 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    7a50:	4901      	ldr	r1, [pc, #4]	; (7a58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    7a52:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    7a56:	4770      	bx	lr
    7a58:	40001000 	.word	0x40001000

00007a5c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    7a5c:	b510      	push	{r4, lr}
    7a5e:	2200      	movs	r2, #0
    7a60:	2901      	cmp	r1, #1
    7a62:	d006      	beq.n	7a72 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    7a64:	2902      	cmp	r1, #2
    7a66:	d002      	beq.n	7a6e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    7a68:	f240 21d9 	movw	r1, #729	; 0x2d9
    7a6c:	e014      	b.n	7a98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    7a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7a72:	490b      	ldr	r1, [pc, #44]	; (7aa0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    7a74:	430a      	orrs	r2, r1
    7a76:	490b      	ldr	r1, [pc, #44]	; (7aa4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7a78:	600a      	str	r2, [r1, #0]
    7a7a:	490b      	ldr	r1, [pc, #44]	; (7aa8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    7a7c:	4308      	orrs	r0, r1
    7a7e:	4909      	ldr	r1, [pc, #36]	; (7aa4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7a80:	1d09      	adds	r1, r1, #4
    7a82:	6008      	str	r0, [r1, #0]
    7a84:	4809      	ldr	r0, [pc, #36]	; (7aac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    7a86:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    7a8a:	b2c0      	uxtb	r0, r0
    7a8c:	2803      	cmp	r0, #3
    7a8e:	d001      	beq.n	7a94 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    7a90:	280b      	cmp	r0, #11
    7a92:	d104      	bne.n	7a9e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    7a94:	f240 21f1 	movw	r1, #753	; 0x2f1
    7a98:	203e      	movs	r0, #62	; 0x3e
    7a9a:	f7f8 ff9d 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a9e:	bd10      	pop	{r4, pc}
    7aa0:	00100108 	.word	0x00100108
    7aa4:	40001514 	.word	0x40001514
    7aa8:	02030000 	.word	0x02030000
    7aac:	40001000 	.word	0x40001000

00007ab0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    7ab0:	4901      	ldr	r1, [pc, #4]	; (7ab8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    7ab2:	7588      	strb	r0, [r1, #22]
    7ab4:	4770      	bx	lr
    7ab6:	0000      	.short	0x0000
    7ab8:	20000bf4 	.word	0x20000bf4

00007abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    7abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ac0:	4853      	ldr	r0, [pc, #332]	; (7c10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7ac2:	f04f 0a01 	mov.w	sl, #1
    7ac6:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    7aca:	4851      	ldr	r0, [pc, #324]	; (7c10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7acc:	300c      	adds	r0, #12
    7ace:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    7ad2:	f008 faec 	bl	100ae <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    7ad6:	4c4f      	ldr	r4, [pc, #316]	; (7c14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    7ad8:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    7adc:	f000 f91a 	bl	7d14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7ae0:	494d      	ldr	r1, [pc, #308]	; (7c18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    7ae2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7ae4:	6008      	str	r0, [r1, #0]
    7ae6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 7c1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    7aea:	2000      	movs	r0, #0
    7aec:	62a0      	str	r0, [r4, #40]	; 0x28
    7aee:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    7af2:	f240 131d 	movw	r3, #285	; 0x11d
    7af6:	439a      	bics	r2, r3
    7af8:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    7afc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7b00:	f000 f988 	bl	7e14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    7b04:	4605      	mov	r5, r0
    7b06:	4842      	ldr	r0, [pc, #264]	; (7c10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7b08:	3008      	adds	r0, #8
    7b0a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7b0e:	4e40      	ldr	r6, [pc, #256]	; (7c10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7b10:	61e0      	str	r0, [r4, #28]
    7b12:	1d36      	adds	r6, r6, #4
    7b14:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    7b18:	61a0      	str	r0, [r4, #24]
    7b1a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7b1e:	7d21      	ldrb	r1, [r4, #20]
    7b20:	f884 1020 	strb.w	r1, [r4, #32]
    7b24:	7a61      	ldrb	r1, [r4, #9]
    7b26:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    7b2a:	46a1      	mov	r9, r4
    7b2c:	2400      	movs	r4, #0
    7b2e:	4639      	mov	r1, r7
    7b30:	4628      	mov	r0, r5
    7b32:	f000 f9e3 	bl	7efc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    7b36:	b910      	cbnz	r0, 7b3e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    7b38:	f8c8 a010 	str.w	sl, [r8, #16]
    7b3c:	2401      	movs	r4, #1
    7b3e:	4f35      	ldr	r7, [pc, #212]	; (7c14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    7b40:	07e8      	lsls	r0, r5, #31
    7b42:	f1a7 0710 	sub.w	r7, r7, #16
    7b46:	d002      	beq.n	7b4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    7b48:	6838      	ldr	r0, [r7, #0]
    7b4a:	4780      	blx	r0
    7b4c:	e034      	b.n	7bb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    7b4e:	07a8      	lsls	r0, r5, #30
    7b50:	d529      	bpl.n	7ba6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    7b52:	0768      	lsls	r0, r5, #29
    7b54:	d421      	bmi.n	7b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    7b56:	f008 fbd0 	bl	102fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7b5a:	b9f0      	cbnz	r0, 7b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    7b5c:	f008 fbbd 	bl	102da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7b60:	b9d8      	cbnz	r0, 7b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    7b62:	482f      	ldr	r0, [pc, #188]	; (7c20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    7b64:	6800      	ldr	r0, [r0, #0]
    7b66:	f3c0 5242 	ubfx	r2, r0, #21, #3
    7b6a:	f3c0 6100 	ubfx	r1, r0, #24, #1
    7b6e:	f000 0c0f 	and.w	ip, r0, #15
    7b72:	f3c0 1303 	ubfx	r3, r0, #4, #4
    7b76:	f3c0 2803 	ubfx	r8, r0, #8, #4
    7b7a:	b171      	cbz	r1, 7b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    7b7c:	f1bc 0f00 	cmp.w	ip, #0
    7b80:	d003      	beq.n	7b8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    7b82:	b113      	cbz	r3, 7b8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    7b84:	f1b8 0f00 	cmp.w	r8, #0
    7b88:	d107      	bne.n	7b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    7b8a:	f3c0 4004 	ubfx	r0, r0, #16, #5
    7b8e:	2801      	cmp	r0, #1
    7b90:	d103      	bne.n	7b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    7b92:	2a03      	cmp	r2, #3
    7b94:	d201      	bcs.n	7b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    7b96:	f045 0504 	orr.w	r5, r5, #4
    7b9a:	f345 0080 	sbfx	r0, r5, #2, #1
    7b9e:	4621      	mov	r1, r4
    7ba0:	1c40      	adds	r0, r0, #1
    7ba2:	687a      	ldr	r2, [r7, #4]
    7ba4:	e007      	b.n	7bb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    7ba6:	f015 0f28 	tst.w	r5, #40	; 0x28
    7baa:	d005      	beq.n	7bb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    7bac:	f345 1140 	sbfx	r1, r5, #5, #1
    7bb0:	68ba      	ldr	r2, [r7, #8]
    7bb2:	4620      	mov	r0, r4
    7bb4:	1c49      	adds	r1, r1, #1
    7bb6:	4790      	blx	r2
    7bb8:	06e8      	lsls	r0, r5, #27
    7bba:	d501      	bpl.n	7bc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    7bbc:	68f8      	ldr	r0, [r7, #12]
    7bbe:	4780      	blx	r0
    7bc0:	f899 1009 	ldrb.w	r1, [r9, #9]
    7bc4:	4648      	mov	r0, r9
    7bc6:	2902      	cmp	r1, #2
    7bc8:	d120      	bne.n	7c0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    7bca:	7b01      	ldrb	r1, [r0, #12]
    7bcc:	2900      	cmp	r1, #0
    7bce:	d01d      	beq.n	7c0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    7bd0:	2902      	cmp	r1, #2
    7bd2:	d004      	beq.n	7bde <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    7bd4:	2901      	cmp	r1, #1
    7bd6:	d009      	beq.n	7bec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    7bd8:	f640 4166 	movw	r1, #3174	; 0xc66
    7bdc:	e00d      	b.n	7bfa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    7bde:	69c1      	ldr	r1, [r0, #28]
    7be0:	f8d9 0010 	ldr.w	r0, [r9, #16]
    7be4:	4408      	add	r0, r1
    7be6:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    7bea:	e00b      	b.n	7c04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    7bec:	6901      	ldr	r1, [r0, #16]
    7bee:	f8d9 001c 	ldr.w	r0, [r9, #28]
    7bf2:	4281      	cmp	r1, r0
    7bf4:	d804      	bhi.n	7c00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    7bf6:	f640 4167 	movw	r1, #3175	; 0xc67
    7bfa:	203e      	movs	r0, #62	; 0x3e
    7bfc:	f7f8 feec 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c00:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    7c04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c08:	f000 b9bc 	b.w	7f84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    7c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c10:	40008000 	.word	0x40008000
    7c14:	20000bf4 	.word	0x20000bf4
    7c18:	4001f508 	.word	0x4001f508
    7c1c:	40001000 	.word	0x40001000
    7c20:	40001450 	.word	0x40001450

00007c24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    7c24:	b570      	push	{r4, r5, r6, lr}
    7c26:	4b16      	ldr	r3, [pc, #88]	; (7c80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    7c28:	888c      	ldrh	r4, [r1, #4]
    7c2a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    7c2e:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    7c32:	780c      	ldrb	r4, [r1, #0]
    7c34:	f8d1 1001 	ldr.w	r1, [r1, #1]
    7c38:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    7c3c:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    7c40:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    7c44:	2401      	movs	r4, #1
    7c46:	4084      	lsls	r4, r0
    7c48:	b2c9      	uxtb	r1, r1
    7c4a:	b2e5      	uxtb	r5, r4
    7c4c:	4329      	orrs	r1, r5
    7c4e:	b132      	cbz	r2, 7c5e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    7c50:	2a01      	cmp	r2, #1
    7c52:	d00a      	beq.n	7c6a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    7c54:	f240 51d4 	movw	r1, #1492	; 0x5d4
    7c58:	203e      	movs	r0, #62	; 0x3e
    7c5a:	f7f8 febd 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c5e:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    7c62:	f3c0 2007 	ubfx	r0, r0, #8, #8
    7c66:	43a0      	bics	r0, r4
    7c68:	e004      	b.n	7c74 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    7c6a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    7c6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    7c72:	4328      	orrs	r0, r5
    7c74:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    7c78:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    7c7c:	bd70      	pop	{r4, r5, r6, pc}
    7c7e:	0000      	.short	0x0000
    7c80:	40001000 	.word	0x40001000

00007c84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    7c84:	4901      	ldr	r1, [pc, #4]	; (7c8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    7c86:	2001      	movs	r0, #1
    7c88:	7008      	strb	r0, [r1, #0]
    7c8a:	4770      	bx	lr
    7c8c:	200002bc 	.word	0x200002bc
    7c90:	480b      	ldr	r0, [pc, #44]	; (7cc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    7c92:	7d81      	ldrb	r1, [r0, #22]
    7c94:	480b      	ldr	r0, [pc, #44]	; (7cc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    7c96:	5c40      	ldrb	r0, [r0, r1]
    7c98:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7c9c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    7ca0:	d204      	bcs.n	7cac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    7ca2:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    7ca6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7caa:	e001      	b.n	7cb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    7cac:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    7cb0:	4a05      	ldr	r2, [pc, #20]	; (7cc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    7cb2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    7cb6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    7cba:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    7cbe:	4770      	bx	lr
    7cc0:	20000bf4 	.word	0x20000bf4
    7cc4:	00008136 	.word	0x00008136
    7cc8:	40001000 	.word	0x40001000
    7ccc:	b508      	push	{r3, lr}
    7cce:	490b      	ldr	r1, [pc, #44]	; (7cfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    7cd0:	466b      	mov	r3, sp
    7cd2:	f991 2015 	ldrsb.w	r2, [r1, #21]
    7cd6:	7d89      	ldrb	r1, [r1, #22]
    7cd8:	f000 fad0 	bl	827c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    7cdc:	f99d 0000 	ldrsb.w	r0, [sp]
    7ce0:	f000 faa0 	bl	8224 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    7ce4:	f10d 0001 	add.w	r0, sp, #1
    7ce8:	f004 f8a8 	bl	be3c <mpsl_fem_pa_gain_set>
    7cec:	2800      	cmp	r0, #0
    7cee:	d004      	beq.n	7cfa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    7cf0:	f240 6115 	movw	r1, #1557	; 0x615
    7cf4:	203e      	movs	r0, #62	; 0x3e
    7cf6:	f7f8 fe6f 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cfa:	bd08      	pop	{r3, pc}
    7cfc:	20000bf4 	.word	0x20000bf4
    7d00:	4803      	ldr	r0, [pc, #12]	; (7d10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    7d02:	7a01      	ldrb	r1, [r0, #8]
    7d04:	2901      	cmp	r1, #1
    7d06:	d102      	bne.n	7d0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    7d08:	7a80      	ldrb	r0, [r0, #10]
    7d0a:	f7ff bfdf 	b.w	7ccc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    7d0e:	4770      	bx	lr
    7d10:	20000bf4 	.word	0x20000bf4
    7d14:	480d      	ldr	r0, [pc, #52]	; (7d4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    7d16:	b510      	push	{r4, lr}
    7d18:	7a40      	ldrb	r0, [r0, #9]
    7d1a:	2801      	cmp	r0, #1
    7d1c:	d00c      	beq.n	7d38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    7d1e:	2802      	cmp	r0, #2
    7d20:	d113      	bne.n	7d4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7d22:	f004 f86d 	bl	be00 <mpsl_fem_lna_configuration_clear>
    7d26:	2800      	cmp	r0, #0
    7d28:	d00f      	beq.n	7d4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7d2a:	1c40      	adds	r0, r0, #1
    7d2c:	d00d      	beq.n	7d4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7d2e:	f640 01c1 	movw	r1, #2241	; 0x8c1
    7d32:	203e      	movs	r0, #62	; 0x3e
    7d34:	f7f8 fe50 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d38:	f004 f874 	bl	be24 <mpsl_fem_pa_configuration_clear>
    7d3c:	2800      	cmp	r0, #0
    7d3e:	d004      	beq.n	7d4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7d40:	1c40      	adds	r0, r0, #1
    7d42:	d002      	beq.n	7d4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7d44:	f640 01bb 	movw	r1, #2235	; 0x8bb
    7d48:	e7f3      	b.n	7d32 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    7d4a:	bd10      	pop	{r4, pc}
    7d4c:	20000bf4 	.word	0x20000bf4
    7d50:	4808      	ldr	r0, [pc, #32]	; (7d74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    7d52:	2100      	movs	r1, #0
    7d54:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7d58:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    7d5c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    7d60:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7d64:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    7d68:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    7d6c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7d70:	4770      	bx	lr
    7d72:	0000      	.short	0x0000
    7d74:	40001000 	.word	0x40001000
    7d78:	4818      	ldr	r0, [pc, #96]	; (7ddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    7d7a:	b510      	push	{r4, lr}
    7d7c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    7d80:	07c1      	lsls	r1, r0, #31
    7d82:	d029      	beq.n	7dd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7d84:	0781      	lsls	r1, r0, #30
    7d86:	d514      	bpl.n	7db2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    7d88:	4815      	ldr	r0, [pc, #84]	; (7de0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    7d8a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7d8e:	f041 0101 	orr.w	r1, r1, #1
    7d92:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7d96:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    7d9a:	b2c0      	uxtb	r0, r0
    7d9c:	280b      	cmp	r0, #11
    7d9e:	d005      	beq.n	7dac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7da0:	280a      	cmp	r0, #10
    7da2:	d003      	beq.n	7dac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7da4:	2803      	cmp	r0, #3
    7da6:	d001      	beq.n	7dac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7da8:	2802      	cmp	r0, #2
    7daa:	d115      	bne.n	7dd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7dac:	f240 613e 	movw	r1, #1598	; 0x63e
    7db0:	e00f      	b.n	7dd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    7db2:	0740      	lsls	r0, r0, #29
    7db4:	d510      	bpl.n	7dd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7db6:	480a      	ldr	r0, [pc, #40]	; (7de0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    7db8:	490a      	ldr	r1, [pc, #40]	; (7de4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    7dba:	3008      	adds	r0, #8
    7dbc:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    7dc0:	f44f 71a0 	mov.w	r1, #320	; 0x140
    7dc4:	4808      	ldr	r0, [pc, #32]	; (7de8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    7dc6:	f008 f931 	bl	1002c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    7dca:	2800      	cmp	r0, #0
    7dcc:	d004      	beq.n	7dd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7dce:	f240 6146 	movw	r1, #1606	; 0x646
    7dd2:	203e      	movs	r0, #62	; 0x3e
    7dd4:	f7f8 fe00 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dd8:	bd10      	pop	{r4, pc}
    7dda:	0000      	.short	0x0000
    7ddc:	20000bf4 	.word	0x20000bf4
    7de0:	40001000 	.word	0x40001000
    7de4:	4001f098 	.word	0x4001f098
    7de8:	40008000 	.word	0x40008000
    7dec:	4808      	ldr	r0, [pc, #32]	; (7e10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    7dee:	4601      	mov	r1, r0
    7df0:	79c2      	ldrb	r2, [r0, #7]
    7df2:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    7df6:	b112      	cbz	r2, 7dfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    7df8:	2a01      	cmp	r2, #1
    7dfa:	d003      	beq.n	7e04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    7dfc:	e006      	b.n	7e0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    7dfe:	f041 0102 	orr.w	r1, r1, #2
    7e02:	e001      	b.n	7e08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    7e04:	f041 0104 	orr.w	r1, r1, #4
    7e08:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    7e0c:	f7ff bfb4 	b.w	7d78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    7e10:	20000bf4 	.word	0x20000bf4
    7e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e18:	4d34      	ldr	r5, [pc, #208]	; (7eec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    7e1a:	2400      	movs	r4, #0
    7e1c:	7b28      	ldrb	r0, [r5, #12]
    7e1e:	b138      	cbz	r0, 7e30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    7e20:	f44f 71a2 	mov.w	r1, #324	; 0x144
    7e24:	4832      	ldr	r0, [pc, #200]	; (7ef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    7e26:	f008 f901 	bl	1002c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    7e2a:	b108      	cbz	r0, 7e30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    7e2c:	2601      	movs	r6, #1
    7e2e:	e000      	b.n	7e32 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    7e30:	2600      	movs	r6, #0
    7e32:	7a68      	ldrb	r0, [r5, #9]
    7e34:	4f2f      	ldr	r7, [pc, #188]	; (7ef4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    7e36:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7e3a:	2801      	cmp	r0, #1
    7e3c:	d002      	beq.n	7e44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    7e3e:	2802      	cmp	r0, #2
    7e40:	d006      	beq.n	7e50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    7e42:	e016      	b.n	7e72 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7e44:	4638      	mov	r0, r7
    7e46:	f008 f8ec 	bl	10022 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7e4a:	b190      	cbz	r0, 7e72 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7e4c:	2408      	movs	r4, #8
    7e4e:	e010      	b.n	7e72 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7e50:	4638      	mov	r0, r7
    7e52:	f008 f8e6 	bl	10022 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7e56:	b100      	cbz	r0, 7e5a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    7e58:	2402      	movs	r4, #2
    7e5a:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    7e5e:	43c0      	mvns	r0, r0
    7e60:	f340 0000 	sbfx	r0, r0, #0, #1
    7e64:	1c40      	adds	r0, r0, #1
    7e66:	d101      	bne.n	7e6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    7e68:	f044 0404 	orr.w	r4, r4, #4
    7e6c:	b10e      	cbz	r6, 7e72 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7e6e:	f044 0401 	orr.w	r4, r4, #1
    7e72:	f014 0f0b 	tst.w	r4, #11
    7e76:	d107      	bne.n	7e88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7e78:	f44f 7188 	mov.w	r1, #272	; 0x110
    7e7c:	4638      	mov	r0, r7
    7e7e:	f008 f8d0 	bl	10022 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7e82:	b108      	cbz	r0, 7e88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7e84:	f044 0410 	orr.w	r4, r4, #16
    7e88:	481b      	ldr	r0, [pc, #108]	; (7ef8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    7e8a:	7800      	ldrb	r0, [r0, #0]
    7e8c:	b1f8      	cbz	r0, 7ece <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    7e8e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    7e92:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    7e96:	d007      	beq.n	7ea8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    7e98:	f44f 718a 	mov.w	r1, #276	; 0x114
    7e9c:	4638      	mov	r0, r7
    7e9e:	f008 f8c0 	bl	10022 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7ea2:	b108      	cbz	r0, 7ea8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    7ea4:	2001      	movs	r0, #1
    7ea6:	e000      	b.n	7eaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    7ea8:	2000      	movs	r0, #0
    7eaa:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    7eae:	b13e      	cbz	r6, 7ec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    7eb0:	f44f 718c 	mov.w	r1, #280	; 0x118
    7eb4:	4638      	mov	r0, r7
    7eb6:	f008 f8b4 	bl	10022 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7eba:	b108      	cbz	r0, 7ec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    7ebc:	2001      	movs	r0, #1
    7ebe:	e000      	b.n	7ec2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    7ec0:	2000      	movs	r0, #0
    7ec2:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    7ec6:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    7eca:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    7ece:	f7ff ff3f 	bl	7d50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    7ed2:	06e0      	lsls	r0, r4, #27
    7ed4:	d506      	bpl.n	7ee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7ed6:	0720      	lsls	r0, r4, #28
    7ed8:	d404      	bmi.n	7ee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7eda:	7a68      	ldrb	r0, [r5, #9]
    7edc:	2801      	cmp	r0, #1
    7ede:	d101      	bne.n	7ee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7ee0:	f044 0420 	orr.w	r4, r4, #32
    7ee4:	4620      	mov	r0, r4
    7ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7eea:	0000      	.short	0x0000
    7eec:	20000bf4 	.word	0x20000bf4
    7ef0:	40008000 	.word	0x40008000
    7ef4:	40001000 	.word	0x40001000
    7ef8:	200002bc 	.word	0x200002bc
    7efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f00:	4c1a      	ldr	r4, [pc, #104]	; (7f6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    7f02:	460d      	mov	r5, r1
    7f04:	7a21      	ldrb	r1, [r4, #8]
    7f06:	b129      	cbz	r1, 7f14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    7f08:	f010 0f11 	tst.w	r0, #17
    7f0c:	d007      	beq.n	7f1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    7f0e:	f7ff fa6f 	bl	73f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f12:	e024      	b.n	7f5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    7f14:	f000 f890 	bl	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    7f18:	2000      	movs	r0, #0
    7f1a:	7320      	strb	r0, [r4, #12]
    7f1c:	e01f      	b.n	7f5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    7f1e:	2901      	cmp	r1, #1
    7f20:	d001      	beq.n	7f26 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    7f22:	2601      	movs	r6, #1
    7f24:	e000      	b.n	7f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    7f26:	2600      	movs	r6, #0
    7f28:	79e0      	ldrb	r0, [r4, #7]
    7f2a:	2801      	cmp	r0, #1
    7f2c:	d00e      	beq.n	7f4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    7f2e:	2700      	movs	r7, #0
    7f30:	f000 f882 	bl	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    7f34:	2196      	movs	r1, #150	; 0x96
    7f36:	4630      	mov	r0, r6
    7f38:	f000 f894 	bl	8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>
    7f3c:	4601      	mov	r1, r0
    7f3e:	b14f      	cbz	r7, 7f54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    7f40:	353b      	adds	r5, #59	; 0x3b
    7f42:	428d      	cmp	r5, r1
    7f44:	d904      	bls.n	7f50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    7f46:	2000      	movs	r0, #0
    7f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f4c:	2701      	movs	r7, #1
    7f4e:	e7ef      	b.n	7f30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    7f50:	2001      	movs	r0, #1
    7f52:	71e0      	strb	r0, [r4, #7]
    7f54:	7aa2      	ldrb	r2, [r4, #10]
    7f56:	4630      	mov	r0, r6
    7f58:	f7ff fccc 	bl	78f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7f5c:	b108      	cbz	r0, 7f62 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    7f5e:	2001      	movs	r0, #1
    7f60:	e7f2      	b.n	7f48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    7f62:	f640 21c4 	movw	r1, #2756	; 0xac4
    7f66:	203e      	movs	r0, #62	; 0x3e
    7f68:	f7f8 fd36 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f6c:	20000bf4 	.word	0x20000bf4
    7f70:	4803      	ldr	r0, [pc, #12]	; (7f80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    7f72:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7f76:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    7f7a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7f7e:	4770      	bx	lr
    7f80:	40001000 	.word	0x40001000
    7f84:	4804      	ldr	r0, [pc, #16]	; (7f98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    7f86:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7f88:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    7f8c:	6281      	str	r1, [r0, #40]	; 0x28
    7f8e:	4903      	ldr	r1, [pc, #12]	; (7f9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    7f90:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7f94:	6008      	str	r0, [r1, #0]
    7f96:	4770      	bx	lr
    7f98:	20000bf4 	.word	0x20000bf4
    7f9c:	4001f504 	.word	0x4001f504
    7fa0:	4a07      	ldr	r2, [pc, #28]	; (7fc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    7fa2:	2000      	movs	r0, #0
    7fa4:	3208      	adds	r2, #8
    7fa6:	4906      	ldr	r1, [pc, #24]	; (7fc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    7fa8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7fac:	1d0a      	adds	r2, r1, #4
    7fae:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7fb2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7fb6:	4902      	ldr	r1, [pc, #8]	; (7fc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    7fb8:	310c      	adds	r1, #12
    7fba:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7fbe:	4770      	bx	lr
    7fc0:	40008000 	.word	0x40008000
    7fc4:	4903      	ldr	r1, [pc, #12]	; (7fd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    7fc6:	79c9      	ldrb	r1, [r1, #7]
    7fc8:	2900      	cmp	r1, #0
    7fca:	d102      	bne.n	7fd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    7fcc:	4902      	ldr	r1, [pc, #8]	; (7fd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    7fce:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    7fd2:	4770      	bx	lr
    7fd4:	20000bf4 	.word	0x20000bf4
    7fd8:	4001f098 	.word	0x4001f098
    7fdc:	b510      	push	{r4, lr}
    7fde:	4a14      	ldr	r2, [pc, #80]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fe0:	b120      	cbz	r0, 7fec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    7fe2:	2801      	cmp	r0, #1
    7fe4:	d011      	beq.n	800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>
    7fe6:	f240 7169 	movw	r1, #1897	; 0x769
    7fea:	e01c      	b.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    7fec:	f101 0028 	add.w	r0, r1, #40	; 0x28
    7ff0:	e9c2 1002 	strd	r1, r0, [r2, #8]
    7ff4:	490f      	ldr	r1, [pc, #60]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7ff6:	480e      	ldr	r0, [pc, #56]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7ff8:	f003 ff1a 	bl	be30 <mpsl_fem_pa_configuration_set>
    7ffc:	2800      	cmp	r0, #0
    7ffe:	d015      	beq.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    8000:	1c40      	adds	r0, r0, #1
    8002:	d013      	beq.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    8004:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8008:	e00d      	b.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    800a:	f101 0029 	add.w	r0, r1, #41	; 0x29
    800e:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8012:	4908      	ldr	r1, [pc, #32]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    8014:	4806      	ldr	r0, [pc, #24]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    8016:	f003 fef9 	bl	be0c <mpsl_fem_lna_configuration_set>
    801a:	2800      	cmp	r0, #0
    801c:	d006      	beq.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    801e:	1c40      	adds	r0, r0, #1
    8020:	d004      	beq.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    8022:	f240 7165 	movw	r1, #1893	; 0x765
    8026:	203e      	movs	r0, #62	; 0x3e
    8028:	f7f8 fcd6 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    802c:	bd10      	pop	{r4, pc}
    802e:	0000      	.short	0x0000
    8030:	200002c4 	.word	0x200002c4
    8034:	00008160 	.word	0x00008160
    8038:	4802      	ldr	r0, [pc, #8]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    803a:	2100      	movs	r1, #0
    803c:	71c1      	strb	r1, [r0, #7]
    803e:	7201      	strb	r1, [r0, #8]
    8040:	7241      	strb	r1, [r0, #9]
    8042:	4770      	bx	lr
    8044:	20000bf4 	.word	0x20000bf4
    8048:	4a05      	ldr	r2, [pc, #20]	; (8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>)
    804a:	79d2      	ldrb	r2, [r2, #7]
    804c:	2a01      	cmp	r2, #1
    804e:	d006      	beq.n	805e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e>
    8050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8054:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8058:	fbb1 f1f2 	udiv	r1, r1, r2
    805c:	1a40      	subs	r0, r0, r1
    805e:	4770      	bx	lr
    8060:	20000bf4 	.word	0x20000bf4
    8064:	b570      	push	{r4, r5, r6, lr}
    8066:	4c13      	ldr	r4, [pc, #76]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
    8068:	4603      	mov	r3, r0
    806a:	460d      	mov	r5, r1
    806c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8070:	2000      	movs	r0, #0
    8072:	b15a      	cbz	r2, 808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>
    8074:	4621      	mov	r1, r4
    8076:	f891 1020 	ldrb.w	r1, [r1, #32]
    807a:	b163      	cbz	r3, 8096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96>
    807c:	2b01      	cmp	r3, #1
    807e:	d111      	bne.n	80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    8080:	2a01      	cmp	r2, #1
    8082:	4628      	mov	r0, r5
    8084:	d012      	beq.n	80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>
    8086:	f007 ffd6 	bl	10036 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    808a:	e009      	b.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    808c:	f640 016e 	movw	r1, #2158	; 0x86e
    8090:	203e      	movs	r0, #62	; 0x3e
    8092:	f7f8 fca1 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8096:	2a01      	cmp	r2, #1
    8098:	4628      	mov	r0, r5
    809a:	d004      	beq.n	80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
    809c:	f007 ffd9 	bl	10052 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    80a0:	69e1      	ldr	r1, [r4, #28]
    80a2:	4408      	add	r0, r1
    80a4:	bd70      	pop	{r4, r5, r6, pc}
    80a6:	f000 f8d1 	bl	824c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    80aa:	e7f9      	b.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    80ac:	f000 f8c0 	bl	8230 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    80b0:	e7f6      	b.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    80b2:	0000      	.short	0x0000
    80b4:	20000bf4 	.word	0x20000bf4
    80b8:	b510      	push	{r4, lr}
    80ba:	f7ff fbef 	bl	789c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    80be:	f7ff fde7 	bl	7c90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    80c2:	f7ff fe1d 	bl	7d00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    80c6:	f7ff ff53 	bl	7f70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    80ca:	f008 f916 	bl	102fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    80ce:	2800      	cmp	r0, #0
    80d0:	d108      	bne.n	80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>
    80d2:	f008 f902 	bl	102da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    80d6:	2800      	cmp	r0, #0
    80d8:	d104      	bne.n	80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>
    80da:	4803      	ldr	r0, [pc, #12]	; (80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>)
    80dc:	6801      	ldr	r1, [r0, #0]
    80de:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    80e2:	6001      	str	r1, [r0, #0]
    80e4:	bd10      	pop	{r4, pc}
    80e6:	0000      	.short	0x0000
    80e8:	40001568 	.word	0x40001568
    80ec:	b510      	push	{r4, lr}
    80ee:	4604      	mov	r4, r0
    80f0:	f7ff fbd4 	bl	789c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    80f4:	f7ff fdcc 	bl	7c90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    80f8:	4620      	mov	r0, r4
    80fa:	f7ff fde7 	bl	7ccc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    80fe:	f008 f8fc 	bl	102fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8102:	2800      	cmp	r0, #0
    8104:	d00d      	beq.n	8122 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x122>
    8106:	4a09      	ldr	r2, [pc, #36]	; (812c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c>)
    8108:	6811      	ldr	r1, [r2, #0]
    810a:	0650      	lsls	r0, r2, #25
    810c:	2c02      	cmp	r4, #2
    810e:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8112:	d007      	beq.n	8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>
    8114:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8118:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    811c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8120:	6010      	str	r0, [r2, #0]
    8122:	bd10      	pop	{r4, pc}
    8124:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8128:	e7f6      	b.n	8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>
    812a:	0000      	.short	0x0000
    812c:	40001588 	.word	0x40001588
    8130:	a62c0000 	.word	0xa62c0000
    8134:	0604a1e0 	.word	0x0604a1e0
    8138:	0e0c0a08 	.word	0x0e0c0a08
    813c:	16141210 	.word	0x16141210
    8140:	201e1c18 	.word	0x201e1c18
    8144:	28262422 	.word	0x28262422
    8148:	302e2c2a 	.word	0x302e2c2a
    814c:	38363432 	.word	0x38363432
    8150:	403e3c3a 	.word	0x403e3c3a
    8154:	48464442 	.word	0x48464442
    8158:	024e4c4a 	.word	0x024e4c4a
    815c:	0000501a 	.word	0x0000501a
    8160:	00000001 	.word	0x00000001
    8164:	40001110 	.word	0x40001110
	...
    817c:	00001e14 	.word	0x00001e14
    8180:	00001130 	.word	0x00001130
    8184:	00000000 	.word	0x00000000
    8188:	00000028 	.word	0x00000028
    818c:	00000018 	.word	0x00000018
    8190:	00000000 	.word	0x00000000
    8194:	00001e14 	.word	0x00001e14
    8198:	00001130 	.word	0x00001130
    819c:	00000000 	.word	0x00000000
    81a0:	00001770 	.word	0x00001770
    81a4:	00000fa0 	.word	0x00000fa0

000081a8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    81a8:	b570      	push	{r4, r5, r6, lr}
    81aa:	4605      	mov	r5, r0
    81ac:	4614      	mov	r4, r2
    81ae:	4608      	mov	r0, r1
    81b0:	f7ff fb9a 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    81b4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    81b8:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    81bc:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    81c0:	4807      	ldr	r0, [pc, #28]	; (81e0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    81c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    81c6:	4408      	add	r0, r1
    81c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    81cc:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    81d0:	fbb0 f5f1 	udiv	r5, r0, r1
    81d4:	4620      	mov	r0, r4
    81d6:	f7ff fb5b 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    81da:	4428      	add	r0, r5
    81dc:	1d40      	adds	r0, r0, #5
    81de:	bd70      	pop	{r4, r5, r6, pc}
    81e0:	00008270 	.word	0x00008270

000081e4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    81e4:	b570      	push	{r4, r5, r6, lr}
    81e6:	4d0e      	ldr	r5, [pc, #56]	; (8220 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    81e8:	461c      	mov	r4, r3
    81ea:	3d08      	subs	r5, #8
    81ec:	4b0c      	ldr	r3, [pc, #48]	; (8220 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    81ee:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    81f2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    81f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81fa:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    81fe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8202:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8206:	4418      	add	r0, r3
    8208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    820c:	fbb0 f5f1 	udiv	r5, r0, r1
    8210:	4610      	mov	r0, r2
    8212:	f7ff fb3d 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8216:	4428      	add	r0, r5
    8218:	4420      	add	r0, r4
    821a:	1d40      	adds	r0, r0, #5
    821c:	bd70      	pop	{r4, r5, r6, pc}
    821e:	0000      	.short	0x0000
    8220:	00008270 	.word	0x00008270

00008224 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8224:	4901      	ldr	r1, [pc, #4]	; (822c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8226:	b2c0      	uxtb	r0, r0
    8228:	6008      	str	r0, [r1, #0]
    822a:	4770      	bx	lr
    822c:	4000150c 	.word	0x4000150c

00008230 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8230:	4a05      	ldr	r2, [pc, #20]	; (8248 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8232:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8236:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    823a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    823e:	fbb1 f1f2 	udiv	r1, r1, r2
    8242:	4408      	add	r0, r1
    8244:	1e80      	subs	r0, r0, #2
    8246:	4770      	bx	lr
    8248:	00008268 	.word	0x00008268

0000824c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    824c:	4a05      	ldr	r2, [pc, #20]	; (8264 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    824e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8256:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    825a:	fbb1 f1f2 	udiv	r1, r1, r2
    825e:	4408      	add	r0, r1
    8260:	4770      	bx	lr
    8262:	0000      	.short	0x0000
    8264:	00008268 	.word	0x00008268
    8268:	05dc0000 	.word	0x05dc0000
    826c:	000003e8 	.word	0x000003e8
    8270:	00000000 	.word	0x00000000
    8274:	00001e14 	.word	0x00001e14
    8278:	00001130 	.word	0x00001130

0000827c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    827c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8280:	461e      	mov	r6, r3
    8282:	4617      	mov	r7, r2
    8284:	460c      	mov	r4, r1
    8286:	4605      	mov	r5, r0
    8288:	f000 f856 	bl	8338 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    828c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8334 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8290:	4680      	mov	r8, r0
    8292:	f899 0000 	ldrb.w	r0, [r9]
    8296:	42a8      	cmp	r0, r5
    8298:	d110      	bne.n	82bc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    829a:	f899 1001 	ldrb.w	r1, [r9, #1]
    829e:	4648      	mov	r0, r9
    82a0:	42a1      	cmp	r1, r4
    82a2:	d10b      	bne.n	82bc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    82a4:	f990 1002 	ldrsb.w	r1, [r0, #2]
    82a8:	42b9      	cmp	r1, r7
    82aa:	d107      	bne.n	82bc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    82ac:	78c2      	ldrb	r2, [r0, #3]
    82ae:	4542      	cmp	r2, r8
    82b0:	d104      	bne.n	82bc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    82b2:	8881      	ldrh	r1, [r0, #4]
    82b4:	8031      	strh	r1, [r6, #0]
    82b6:	7980      	ldrb	r0, [r0, #6]
    82b8:	70b0      	strb	r0, [r6, #2]
    82ba:	e037      	b.n	832c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    82bc:	463a      	mov	r2, r7
    82be:	4621      	mov	r1, r4
    82c0:	2d01      	cmp	r5, #1
    82c2:	d009      	beq.n	82d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    82c4:	2d02      	cmp	r5, #2
    82c6:	d009      	beq.n	82dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    82c8:	2d04      	cmp	r5, #4
    82ca:	d009      	beq.n	82e0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    82cc:	2d08      	cmp	r5, #8
    82ce:	d009      	beq.n	82e4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    82d0:	f240 4162 	movw	r1, #1122	; 0x462
    82d4:	2006      	movs	r0, #6
    82d6:	e00c      	b.n	82f2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    82d8:	2000      	movs	r0, #0
    82da:	e004      	b.n	82e6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    82dc:	2001      	movs	r0, #1
    82de:	e002      	b.n	82e6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    82e0:	2003      	movs	r0, #3
    82e2:	e000      	b.n	82e6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    82e4:	2002      	movs	r0, #2
    82e6:	466b      	mov	r3, sp
    82e8:	f000 f89e 	bl	8428 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    82ec:	b118      	cbz	r0, 82f6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    82ee:	213d      	movs	r1, #61	; 0x3d
    82f0:	2075      	movs	r0, #117	; 0x75
    82f2:	f7f8 fb71 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82f6:	4620      	mov	r0, r4
    82f8:	f7ff f872 	bl	73e0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    82fc:	4602      	mov	r2, r0
    82fe:	2300      	movs	r3, #0
    8300:	4631      	mov	r1, r6
    8302:	f99d 0000 	ldrsb.w	r0, [sp]
    8306:	f003 fda5 	bl	be54 <mpsl_fem_tx_power_split>
    830a:	4601      	mov	r1, r0
    830c:	f889 1007 	strb.w	r1, [r9, #7]
    8310:	8831      	ldrh	r1, [r6, #0]
    8312:	f8a9 1004 	strh.w	r1, [r9, #4]
    8316:	78b1      	ldrb	r1, [r6, #2]
    8318:	f889 1006 	strb.w	r1, [r9, #6]
    831c:	f889 5000 	strb.w	r5, [r9]
    8320:	f889 4001 	strb.w	r4, [r9, #1]
    8324:	f889 7002 	strb.w	r7, [r9, #2]
    8328:	f889 8003 	strb.w	r8, [r9, #3]
    832c:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8334:	20000378 	.word	0x20000378

00008338 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8338:	4801      	ldr	r0, [pc, #4]	; (8340 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    833a:	7800      	ldrb	r0, [r0, #0]
    833c:	4770      	bx	lr
    833e:	0000      	.short	0x0000
    8340:	200002dc 	.word	0x200002dc

00008344 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8344:	b570      	push	{r4, r5, r6, lr}
    8346:	4c17      	ldr	r4, [pc, #92]	; (83a4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8348:	7860      	ldrb	r0, [r4, #1]
    834a:	2800      	cmp	r0, #0
    834c:	d123      	bne.n	8396 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    834e:	2001      	movs	r0, #1
    8350:	7060      	strb	r0, [r4, #1]
    8352:	f007 ffac 	bl	102ae <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8356:	f06f 0527 	mvn.w	r5, #39	; 0x27
    835a:	b928      	cbnz	r0, 8368 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    835c:	f007 ffdd 	bl	1031a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8360:	b910      	cbnz	r0, 8368 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8362:	f007 ffe4 	bl	1032e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8366:	b120      	cbz	r0, 8372 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8368:	480f      	ldr	r0, [pc, #60]	; (83a8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    836a:	6060      	str	r0, [r4, #4]
    836c:	70a5      	strb	r5, [r4, #2]
    836e:	2008      	movs	r0, #8
    8370:	e010      	b.n	8394 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8372:	f007 ff71 	bl	10258 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8376:	b940      	cbnz	r0, 838a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8378:	f007 ff78 	bl	1026c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    837c:	b928      	cbnz	r0, 838a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    837e:	f007 ff8c 	bl	1029a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8382:	b910      	cbnz	r0, 838a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8384:	f007 ff9d 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8388:	b130      	cbz	r0, 8398 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    838a:	4807      	ldr	r0, [pc, #28]	; (83a8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    838c:	3031      	adds	r0, #49	; 0x31
    838e:	6060      	str	r0, [r4, #4]
    8390:	70a5      	strb	r5, [r4, #2]
    8392:	2004      	movs	r0, #4
    8394:	70e0      	strb	r0, [r4, #3]
    8396:	bd70      	pop	{r4, r5, r6, pc}
    8398:	f240 113f 	movw	r1, #319	; 0x13f
    839c:	2074      	movs	r0, #116	; 0x74
    839e:	f003 fb99 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    83a2:	0000      	.short	0x0000
    83a4:	200002dc 	.word	0x200002dc
    83a8:	0001064f 	.word	0x0001064f

000083ac <mpsl_tx_power_radio_supported_power_adjust>:
    83ac:	4a06      	ldr	r2, [pc, #24]	; (83c8 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    83ae:	b500      	push	{lr}
    83b0:	f992 2003 	ldrsb.w	r2, [r2, #3]
    83b4:	4290      	cmp	r0, r2
    83b6:	db01      	blt.n	83bc <mpsl_tx_power_radio_supported_power_adjust+0x10>
    83b8:	4610      	mov	r0, r2
    83ba:	bd00      	pop	{pc}
    83bc:	f000 f808 	bl	83d0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    83c0:	4902      	ldr	r1, [pc, #8]	; (83cc <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    83c2:	5608      	ldrsb	r0, [r1, r0]
    83c4:	bd00      	pop	{pc}
    83c6:	0000      	.short	0x0000
    83c8:	200002dc 	.word	0x200002dc
    83cc:	00010641 	.word	0x00010641

000083d0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    83d0:	4602      	mov	r2, r0
    83d2:	4813      	ldr	r0, [pc, #76]	; (8420 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    83d4:	b510      	push	{r4, lr}
    83d6:	f990 3003 	ldrsb.w	r3, [r0, #3]
    83da:	429a      	cmp	r2, r3
    83dc:	db01      	blt.n	83e2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    83de:	200d      	movs	r0, #13
    83e0:	bd10      	pop	{r4, pc}
    83e2:	f990 3002 	ldrsb.w	r3, [r0, #2]
    83e6:	429a      	cmp	r2, r3
    83e8:	dc01      	bgt.n	83ee <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    83ea:	2000      	movs	r0, #0
    83ec:	bd10      	pop	{r4, pc}
    83ee:	b101      	cbz	r1, 83f2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    83f0:	2101      	movs	r1, #1
    83f2:	1ad4      	subs	r4, r2, r3
    83f4:	6843      	ldr	r3, [r0, #4]
    83f6:	5d18      	ldrb	r0, [r3, r4]
    83f8:	4c0a      	ldr	r4, [pc, #40]	; (8424 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    83fa:	5624      	ldrsb	r4, [r4, r0]
    83fc:	4294      	cmp	r4, r2
    83fe:	d0f5      	beq.n	83ec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8400:	4c08      	ldr	r4, [pc, #32]	; (8424 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8402:	4408      	add	r0, r1
    8404:	343f      	adds	r4, #63	; 0x3f
    8406:	b2c0      	uxtb	r0, r0
    8408:	b2d2      	uxtb	r2, r2
    840a:	42a3      	cmp	r3, r4
    840c:	d1ee      	bne.n	83ec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    840e:	2900      	cmp	r1, #0
    8410:	d0ec      	beq.n	83ec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8412:	2a01      	cmp	r2, #1
    8414:	d001      	beq.n	841a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8416:	2a02      	cmp	r2, #2
    8418:	d1e8      	bne.n	83ec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    841a:	1c40      	adds	r0, r0, #1
    841c:	b2c0      	uxtb	r0, r0
    841e:	bd10      	pop	{r4, pc}
    8420:	200002dc 	.word	0x200002dc
    8424:	00010641 	.word	0x00010641

00008428 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    842c:	461c      	mov	r4, r3
    842e:	4690      	mov	r8, r2
    8430:	460d      	mov	r5, r1
    8432:	4606      	mov	r6, r0
    8434:	f06f 0715 	mvn.w	r7, #21
    8438:	2804      	cmp	r0, #4
    843a:	d804      	bhi.n	8446 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    843c:	b11c      	cbz	r4, 8446 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    843e:	f007 fe13 	bl	10068 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8442:	42a8      	cmp	r0, r5
    8444:	d802      	bhi.n	844c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8446:	4638      	mov	r0, r7
    8448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    844c:	4805      	ldr	r0, [pc, #20]	; (8464 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    844e:	4642      	mov	r2, r8
    8450:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8454:	b118      	cbz	r0, 845e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8456:	5740      	ldrsb	r0, [r0, r5]
    8458:	4282      	cmp	r2, r0
    845a:	dd00      	ble.n	845e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    845c:	4602      	mov	r2, r0
    845e:	7022      	strb	r2, [r4, #0]
    8460:	2000      	movs	r0, #0
    8462:	e7f1      	b.n	8448 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8464:	20000c2c 	.word	0x20000c2c

00008468 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8468:	4801      	ldr	r0, [pc, #4]	; (8470 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    846a:	7800      	ldrb	r0, [r0, #0]
    846c:	4770      	bx	lr
    846e:	0000      	.short	0x0000
    8470:	200002e4 	.word	0x200002e4

00008474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8474:	4905      	ldr	r1, [pc, #20]	; (848c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8476:	780a      	ldrb	r2, [r1, #0]
    8478:	4290      	cmp	r0, r2
    847a:	d301      	bcc.n	8480 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    847c:	2000      	movs	r0, #0
    847e:	4770      	bx	lr
    8480:	6849      	ldr	r1, [r1, #4]
    8482:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8486:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    848a:	4770      	bx	lr
    848c:	200002e4 	.word	0x200002e4

00008490 <MPSL_IRQ_RADIO_Handler>:
    8490:	490e      	ldr	r1, [pc, #56]	; (84cc <MPSL_IRQ_RADIO_Handler+0x3c>)
    8492:	b510      	push	{r4, lr}
    8494:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8498:	2820      	cmp	r0, #32
    849a:	d012      	beq.n	84c2 <MPSL_IRQ_RADIO_Handler+0x32>
    849c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    84a0:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    84a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    84a8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    84ac:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    84b0:	6840      	ldr	r0, [r0, #4]
    84b2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    84b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    84ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    84be:	2104      	movs	r1, #4
    84c0:	4710      	bx	r2
    84c2:	f640 01bc 	movw	r1, #2236	; 0x8bc
    84c6:	2070      	movs	r0, #112	; 0x70
    84c8:	f003 fb04 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    84cc:	20001040 	.word	0x20001040
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	4605      	mov	r5, r0
    84d4:	2a20      	cmp	r2, #32
    84d6:	d028      	beq.n	852a <MPSL_IRQ_RADIO_Handler+0x9a>
    84d8:	4819      	ldr	r0, [pc, #100]	; (8540 <MPSL_IRQ_RADIO_Handler+0xb0>)
    84da:	4c1a      	ldr	r4, [pc, #104]	; (8544 <MPSL_IRQ_RADIO_Handler+0xb4>)
    84dc:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    84e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    84e4:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    84e8:	4423      	add	r3, r4
    84ea:	2920      	cmp	r1, #32
    84ec:	d022      	beq.n	8534 <MPSL_IRQ_RADIO_Handler+0xa4>
    84ee:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    84f2:	7840      	ldrb	r0, [r0, #1]
    84f4:	784c      	ldrb	r4, [r1, #1]
    84f6:	7048      	strb	r0, [r1, #1]
    84f8:	4620      	mov	r0, r4
    84fa:	4601      	mov	r1, r0
    84fc:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8500:	4291      	cmp	r1, r2
    8502:	7005      	strb	r5, [r0, #0]
    8504:	7840      	ldrb	r0, [r0, #1]
    8506:	d1f8      	bne.n	84fa <MPSL_IRQ_RADIO_Handler+0x6a>
    8508:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    850c:	2a20      	cmp	r2, #32
    850e:	bf1a      	itte	ne
    8510:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8514:	7054      	strbne	r4, [r2, #1]
    8516:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    851a:	2220      	movs	r2, #32
    851c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8520:	f88c 2001 	strb.w	r2, [ip, #1]
    8524:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8528:	bd70      	pop	{r4, r5, r6, pc}
    852a:	f44f 7126 	mov.w	r1, #664	; 0x298
    852e:	2070      	movs	r0, #112	; 0x70
    8530:	f003 fad0 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8534:	f893 4020 	ldrb.w	r4, [r3, #32]
    8538:	7840      	ldrb	r0, [r0, #1]
    853a:	f883 0020 	strb.w	r0, [r3, #32]
    853e:	e7db      	b.n	84f8 <MPSL_IRQ_RADIO_Handler+0x68>
    8540:	20000fc0 	.word	0x20000fc0
    8544:	20001040 	.word	0x20001040
    8548:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    854c:	b08d      	sub	sp, #52	; 0x34
    854e:	4615      	mov	r5, r2
    8550:	460c      	mov	r4, r1
    8552:	f002 f9e9 	bl	a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8556:	4428      	add	r0, r5
    8558:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    855c:	9008      	str	r0, [sp, #32]
    855e:	6821      	ldr	r1, [r4, #0]
    8560:	1a08      	subs	r0, r1, r0
    8562:	0200      	lsls	r0, r0, #8
    8564:	17c1      	asrs	r1, r0, #31
    8566:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    856a:	1200      	asrs	r0, r0, #8
    856c:	2800      	cmp	r0, #0
    856e:	f300 80f0 	bgt.w	8752 <MPSL_IRQ_RADIO_Handler+0x2c2>
    8572:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8576:	48cd      	ldr	r0, [pc, #820]	; (88ac <MPSL_IRQ_RADIO_Handler+0x41c>)
    8578:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    857c:	4408      	add	r0, r1
    857e:	9009      	str	r0, [sp, #36]	; 0x24
    8580:	f890 5020 	ldrb.w	r5, [r0, #32]
    8584:	2020      	movs	r0, #32
    8586:	4eca      	ldr	r6, [pc, #808]	; (88b0 <MPSL_IRQ_RADIO_Handler+0x420>)
    8588:	f10d 0a18 	add.w	sl, sp, #24
    858c:	f10d 091c 	add.w	r9, sp, #28
    8590:	f88d 0018 	strb.w	r0, [sp, #24]
    8594:	2d20      	cmp	r5, #32
    8596:	bf1c      	itt	ne
    8598:	48c6      	ldrne	r0, [pc, #792]	; (88b4 <MPSL_IRQ_RADIO_Handler+0x424>)
    859a:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    859e:	d038      	beq.n	8612 <MPSL_IRQ_RADIO_Handler+0x182>
    85a0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    85a4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    85a8:	f100 0108 	add.w	r1, r0, #8
    85ac:	68c0      	ldr	r0, [r0, #12]
    85ae:	6827      	ldr	r7, [r4, #0]
    85b0:	1a38      	subs	r0, r7, r0
    85b2:	0200      	lsls	r0, r0, #8
    85b4:	17c2      	asrs	r2, r0, #31
    85b6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    85ba:	1200      	asrs	r0, r0, #8
    85bc:	d429      	bmi.n	8612 <MPSL_IRQ_RADIO_Handler+0x182>
    85be:	89e0      	ldrh	r0, [r4, #14]
    85c0:	b300      	cbz	r0, 8604 <MPSL_IRQ_RADIO_Handler+0x174>
    85c2:	89c8      	ldrh	r0, [r1, #14]
    85c4:	b9f0      	cbnz	r0, 8604 <MPSL_IRQ_RADIO_Handler+0x174>
    85c6:	6808      	ldr	r0, [r1, #0]
    85c8:	9003      	str	r0, [sp, #12]
    85ca:	f003 f8c5 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    85ce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    85d2:	bf08      	it	eq
    85d4:	200d      	moveq	r0, #13
    85d6:	d00b      	beq.n	85f0 <MPSL_IRQ_RADIO_Handler+0x160>
    85d8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    85dc:	3856      	subs	r0, #86	; 0x56
    85de:	bf08      	it	eq
    85e0:	201c      	moveq	r0, #28
    85e2:	d005      	beq.n	85f0 <MPSL_IRQ_RADIO_Handler+0x160>
    85e4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    85e8:	389f      	subs	r0, #159	; 0x9f
    85ea:	bf14      	ite	ne
    85ec:	2000      	movne	r0, #0
    85ee:	2032      	moveq	r0, #50	; 0x32
    85f0:	1c41      	adds	r1, r0, #1
    85f2:	9803      	ldr	r0, [sp, #12]
    85f4:	1a38      	subs	r0, r7, r0
    85f6:	0200      	lsls	r0, r0, #8
    85f8:	17c2      	asrs	r2, r0, #31
    85fa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    85fe:	1200      	asrs	r0, r0, #8
    8600:	4288      	cmp	r0, r1
    8602:	db06      	blt.n	8612 <MPSL_IRQ_RADIO_Handler+0x182>
    8604:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8608:	f88a 5000 	strb.w	r5, [sl]
    860c:	7845      	ldrb	r5, [r0, #1]
    860e:	2d20      	cmp	r5, #32
    8610:	d1c6      	bne.n	85a0 <MPSL_IRQ_RADIO_Handler+0x110>
    8612:	f89a 0000 	ldrb.w	r0, [sl]
    8616:	f889 0000 	strb.w	r0, [r9]
    861a:	2d20      	cmp	r5, #32
    861c:	bf1c      	itt	ne
    861e:	48a5      	ldrne	r0, [pc, #660]	; (88b4 <MPSL_IRQ_RADIO_Handler+0x424>)
    8620:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8624:	f000 813e 	beq.w	88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    8628:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    862c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8630:	6861      	ldr	r1, [r4, #4]
    8632:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8636:	f107 0008 	add.w	r0, r7, #8
    863a:	eba8 0101 	sub.w	r1, r8, r1
    863e:	0209      	lsls	r1, r1, #8
    8640:	17ca      	asrs	r2, r1, #31
    8642:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    8646:	1209      	asrs	r1, r1, #8
    8648:	d427      	bmi.n	869a <MPSL_IRQ_RADIO_Handler+0x20a>
    864a:	89c0      	ldrh	r0, [r0, #14]
    864c:	2800      	cmp	r0, #0
    864e:	f000 8129 	beq.w	88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    8652:	89e0      	ldrh	r0, [r4, #14]
    8654:	2800      	cmp	r0, #0
    8656:	f040 8125 	bne.w	88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    865a:	f8d4 a000 	ldr.w	sl, [r4]
    865e:	f003 f87b 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8662:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8666:	bf08      	it	eq
    8668:	200d      	moveq	r0, #13
    866a:	d00b      	beq.n	8684 <MPSL_IRQ_RADIO_Handler+0x1f4>
    866c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8670:	3856      	subs	r0, #86	; 0x56
    8672:	bf08      	it	eq
    8674:	201c      	moveq	r0, #28
    8676:	d005      	beq.n	8684 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8678:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    867c:	389f      	subs	r0, #159	; 0x9f
    867e:	bf14      	ite	ne
    8680:	2000      	movne	r0, #0
    8682:	2032      	moveq	r0, #50	; 0x32
    8684:	1c41      	adds	r1, r0, #1
    8686:	eba8 000a 	sub.w	r0, r8, sl
    868a:	0200      	lsls	r0, r0, #8
    868c:	17c2      	asrs	r2, r0, #31
    868e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8692:	1200      	asrs	r0, r0, #8
    8694:	4288      	cmp	r0, r1
    8696:	f280 8105 	bge.w	88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    869a:	f889 5000 	strb.w	r5, [r9]
    869e:	7e38      	ldrb	r0, [r7, #24]
    86a0:	7c21      	ldrb	r1, [r4, #16]
    86a2:	4288      	cmp	r0, r1
    86a4:	d906      	bls.n	86b4 <MPSL_IRQ_RADIO_Handler+0x224>
    86a6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    86aa:	7845      	ldrb	r5, [r0, #1]
    86ac:	2d20      	cmp	r5, #32
    86ae:	d1bb      	bne.n	8628 <MPSL_IRQ_RADIO_Handler+0x198>
    86b0:	f000 b8f8 	b.w	88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    86b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    86b8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    86bc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    86c0:	8ac1      	ldrh	r1, [r0, #22]
    86c2:	68c5      	ldr	r5, [r0, #12]
    86c4:	bbe1      	cbnz	r1, 8740 <MPSL_IRQ_RADIO_Handler+0x2b0>
    86c6:	89e1      	ldrh	r1, [r4, #14]
    86c8:	b3d1      	cbz	r1, 8740 <MPSL_IRQ_RADIO_Handler+0x2b0>
    86ca:	6887      	ldr	r7, [r0, #8]
    86cc:	f003 f844 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    86d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    86d4:	bf08      	it	eq
    86d6:	200d      	moveq	r0, #13
    86d8:	d00b      	beq.n	86f2 <MPSL_IRQ_RADIO_Handler+0x262>
    86da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    86de:	3856      	subs	r0, #86	; 0x56
    86e0:	bf08      	it	eq
    86e2:	201c      	moveq	r0, #28
    86e4:	d005      	beq.n	86f2 <MPSL_IRQ_RADIO_Handler+0x262>
    86e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    86ea:	389f      	subs	r0, #159	; 0x9f
    86ec:	bf14      	ite	ne
    86ee:	2000      	movne	r0, #0
    86f0:	2032      	moveq	r0, #50	; 0x32
    86f2:	1c41      	adds	r1, r0, #1
    86f4:	1be8      	subs	r0, r5, r7
    86f6:	0200      	lsls	r0, r0, #8
    86f8:	17c2      	asrs	r2, r0, #31
    86fa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    86fe:	1200      	asrs	r0, r0, #8
    8700:	4288      	cmp	r0, r1
    8702:	da1d      	bge.n	8740 <MPSL_IRQ_RADIO_Handler+0x2b0>
    8704:	f003 f828 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8708:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    870c:	bf08      	it	eq
    870e:	200d      	moveq	r0, #13
    8710:	d00b      	beq.n	872a <MPSL_IRQ_RADIO_Handler+0x29a>
    8712:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8716:	3856      	subs	r0, #86	; 0x56
    8718:	bf08      	it	eq
    871a:	201c      	moveq	r0, #28
    871c:	d005      	beq.n	872a <MPSL_IRQ_RADIO_Handler+0x29a>
    871e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8722:	389f      	subs	r0, #159	; 0x9f
    8724:	bf14      	ite	ne
    8726:	2000      	movne	r0, #0
    8728:	2032      	moveq	r0, #50	; 0x32
    872a:	f89d 101c 	ldrb.w	r1, [sp, #28]
    872e:	1c40      	adds	r0, r0, #1
    8730:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8734:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8738:	6889      	ldr	r1, [r1, #8]
    873a:	4408      	add	r0, r1
    873c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    8740:	9808      	ldr	r0, [sp, #32]
    8742:	1a28      	subs	r0, r5, r0
    8744:	0200      	lsls	r0, r0, #8
    8746:	17c1      	asrs	r1, r0, #31
    8748:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    874c:	1200      	asrs	r0, r0, #8
    874e:	2800      	cmp	r0, #0
    8750:	dd03      	ble.n	875a <MPSL_IRQ_RADIO_Handler+0x2ca>
    8752:	b011      	add	sp, #68	; 0x44
    8754:	2000      	movs	r0, #0
    8756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    875a:	6820      	ldr	r0, [r4, #0]
    875c:	42a8      	cmp	r0, r5
    875e:	d902      	bls.n	8766 <MPSL_IRQ_RADIO_Handler+0x2d6>
    8760:	68a1      	ldr	r1, [r4, #8]
    8762:	1c49      	adds	r1, r1, #1
    8764:	60a1      	str	r1, [r4, #8]
    8766:	6861      	ldr	r1, [r4, #4]
    8768:	f10d 0a18 	add.w	sl, sp, #24
    876c:	1a08      	subs	r0, r1, r0
    876e:	4428      	add	r0, r5
    8770:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    8774:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8778:	e9c4 1000 	strd	r1, r0, [r4]
    877c:	9810      	ldr	r0, [sp, #64]	; 0x40
    877e:	900b      	str	r0, [sp, #44]	; 0x2c
    8780:	9809      	ldr	r0, [sp, #36]	; 0x24
    8782:	f10d 081c 	add.w	r8, sp, #28
    8786:	f890 5020 	ldrb.w	r5, [r0, #32]
    878a:	2020      	movs	r0, #32
    878c:	f88d 0018 	strb.w	r0, [sp, #24]
    8790:	2d20      	cmp	r5, #32
    8792:	d03c      	beq.n	880e <MPSL_IRQ_RADIO_Handler+0x37e>
    8794:	4947      	ldr	r1, [pc, #284]	; (88b4 <MPSL_IRQ_RADIO_Handler+0x424>)
    8796:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8798:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    879c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    87a0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    87a4:	f100 0108 	add.w	r1, r0, #8
    87a8:	68c0      	ldr	r0, [r0, #12]
    87aa:	6827      	ldr	r7, [r4, #0]
    87ac:	1a38      	subs	r0, r7, r0
    87ae:	0200      	lsls	r0, r0, #8
    87b0:	17c2      	asrs	r2, r0, #31
    87b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    87b6:	1200      	asrs	r0, r0, #8
    87b8:	d429      	bmi.n	880e <MPSL_IRQ_RADIO_Handler+0x37e>
    87ba:	89e0      	ldrh	r0, [r4, #14]
    87bc:	b300      	cbz	r0, 8800 <MPSL_IRQ_RADIO_Handler+0x370>
    87be:	89c8      	ldrh	r0, [r1, #14]
    87c0:	b9f0      	cbnz	r0, 8800 <MPSL_IRQ_RADIO_Handler+0x370>
    87c2:	f8d1 9000 	ldr.w	r9, [r1]
    87c6:	f002 ffc7 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    87ca:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    87ce:	bf08      	it	eq
    87d0:	200d      	moveq	r0, #13
    87d2:	d00b      	beq.n	87ec <MPSL_IRQ_RADIO_Handler+0x35c>
    87d4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    87d8:	3856      	subs	r0, #86	; 0x56
    87da:	bf08      	it	eq
    87dc:	201c      	moveq	r0, #28
    87de:	d005      	beq.n	87ec <MPSL_IRQ_RADIO_Handler+0x35c>
    87e0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    87e4:	389f      	subs	r0, #159	; 0x9f
    87e6:	bf14      	ite	ne
    87e8:	2000      	movne	r0, #0
    87ea:	2032      	moveq	r0, #50	; 0x32
    87ec:	1c41      	adds	r1, r0, #1
    87ee:	eba7 0009 	sub.w	r0, r7, r9
    87f2:	0200      	lsls	r0, r0, #8
    87f4:	17c2      	asrs	r2, r0, #31
    87f6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    87fa:	1200      	asrs	r0, r0, #8
    87fc:	4288      	cmp	r0, r1
    87fe:	db06      	blt.n	880e <MPSL_IRQ_RADIO_Handler+0x37e>
    8800:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8804:	f88a 5000 	strb.w	r5, [sl]
    8808:	7845      	ldrb	r5, [r0, #1]
    880a:	2d20      	cmp	r5, #32
    880c:	d1c6      	bne.n	879c <MPSL_IRQ_RADIO_Handler+0x30c>
    880e:	f89a 0000 	ldrb.w	r0, [sl]
    8812:	f888 0000 	strb.w	r0, [r8]
    8816:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8818:	2d20      	cmp	r5, #32
    881a:	bf1c      	itt	ne
    881c:	4925      	ldrne	r1, [pc, #148]	; (88b4 <MPSL_IRQ_RADIO_Handler+0x424>)
    881e:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    8822:	d03f      	beq.n	88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    8824:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8828:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    882c:	6860      	ldr	r0, [r4, #4]
    882e:	f8d7 9008 	ldr.w	r9, [r7, #8]
    8832:	f107 0108 	add.w	r1, r7, #8
    8836:	eba9 0000 	sub.w	r0, r9, r0
    883a:	0200      	lsls	r0, r0, #8
    883c:	17c2      	asrs	r2, r0, #31
    883e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8842:	1200      	asrs	r0, r0, #8
    8844:	d422      	bmi.n	888c <MPSL_IRQ_RADIO_Handler+0x3fc>
    8846:	89c8      	ldrh	r0, [r1, #14]
    8848:	b360      	cbz	r0, 88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    884a:	89e0      	ldrh	r0, [r4, #14]
    884c:	bb50      	cbnz	r0, 88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    884e:	f8d4 a000 	ldr.w	sl, [r4]
    8852:	f002 ff81 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8856:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    885a:	bf08      	it	eq
    885c:	200d      	moveq	r0, #13
    885e:	d00b      	beq.n	8878 <MPSL_IRQ_RADIO_Handler+0x3e8>
    8860:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8864:	3856      	subs	r0, #86	; 0x56
    8866:	bf08      	it	eq
    8868:	201c      	moveq	r0, #28
    886a:	d005      	beq.n	8878 <MPSL_IRQ_RADIO_Handler+0x3e8>
    886c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8870:	389f      	subs	r0, #159	; 0x9f
    8872:	bf14      	ite	ne
    8874:	2000      	movne	r0, #0
    8876:	2032      	moveq	r0, #50	; 0x32
    8878:	1c41      	adds	r1, r0, #1
    887a:	eba9 000a 	sub.w	r0, r9, sl
    887e:	0200      	lsls	r0, r0, #8
    8880:	17c2      	asrs	r2, r0, #31
    8882:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8886:	1200      	asrs	r0, r0, #8
    8888:	4288      	cmp	r0, r1
    888a:	da0b      	bge.n	88a4 <MPSL_IRQ_RADIO_Handler+0x414>
    888c:	f888 5000 	strb.w	r5, [r8]
    8890:	7e38      	ldrb	r0, [r7, #24]
    8892:	7c21      	ldrb	r1, [r4, #16]
    8894:	4288      	cmp	r0, r1
    8896:	f67f af0d 	bls.w	86b4 <MPSL_IRQ_RADIO_Handler+0x224>
    889a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    889e:	7845      	ldrb	r5, [r0, #1]
    88a0:	2d20      	cmp	r5, #32
    88a2:	d1bf      	bne.n	8824 <MPSL_IRQ_RADIO_Handler+0x394>
    88a4:	b011      	add	sp, #68	; 0x44
    88a6:	2001      	movs	r0, #1
    88a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88ac:	20001040 	.word	0x20001040
    88b0:	20000c40 	.word	0x20000c40
    88b4:	20000fc0 	.word	0x20000fc0
    88b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88bc:	460f      	mov	r7, r1
    88be:	4606      	mov	r6, r0
    88c0:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    88c4:	494b      	ldr	r1, [pc, #300]	; (89f4 <MPSL_IRQ_RADIO_Handler+0x564>)
    88c6:	4699      	mov	r9, r3
    88c8:	4408      	add	r0, r1
    88ca:	4692      	mov	sl, r2
    88cc:	f890 4020 	ldrb.w	r4, [r0, #32]
    88d0:	2020      	movs	r0, #32
    88d2:	7010      	strb	r0, [r2, #0]
    88d4:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    88d8:	2c20      	cmp	r4, #32
    88da:	bf1c      	itt	ne
    88dc:	4846      	ldrne	r0, [pc, #280]	; (89f8 <MPSL_IRQ_RADIO_Handler+0x568>)
    88de:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    88e2:	d038      	beq.n	8956 <MPSL_IRQ_RADIO_Handler+0x4c6>
    88e4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    88e8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    88ec:	f100 0108 	add.w	r1, r0, #8
    88f0:	68c0      	ldr	r0, [r0, #12]
    88f2:	6835      	ldr	r5, [r6, #0]
    88f4:	1a28      	subs	r0, r5, r0
    88f6:	0200      	lsls	r0, r0, #8
    88f8:	17c2      	asrs	r2, r0, #31
    88fa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    88fe:	1200      	asrs	r0, r0, #8
    8900:	d429      	bmi.n	8956 <MPSL_IRQ_RADIO_Handler+0x4c6>
    8902:	89f0      	ldrh	r0, [r6, #14]
    8904:	b300      	cbz	r0, 8948 <MPSL_IRQ_RADIO_Handler+0x4b8>
    8906:	89c8      	ldrh	r0, [r1, #14]
    8908:	b9f0      	cbnz	r0, 8948 <MPSL_IRQ_RADIO_Handler+0x4b8>
    890a:	6808      	ldr	r0, [r1, #0]
    890c:	9000      	str	r0, [sp, #0]
    890e:	f002 ff23 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8912:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8916:	bf08      	it	eq
    8918:	200d      	moveq	r0, #13
    891a:	d00b      	beq.n	8934 <MPSL_IRQ_RADIO_Handler+0x4a4>
    891c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8920:	3856      	subs	r0, #86	; 0x56
    8922:	bf08      	it	eq
    8924:	201c      	moveq	r0, #28
    8926:	d005      	beq.n	8934 <MPSL_IRQ_RADIO_Handler+0x4a4>
    8928:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    892c:	389f      	subs	r0, #159	; 0x9f
    892e:	bf14      	ite	ne
    8930:	2000      	movne	r0, #0
    8932:	2032      	moveq	r0, #50	; 0x32
    8934:	1c41      	adds	r1, r0, #1
    8936:	9800      	ldr	r0, [sp, #0]
    8938:	1a28      	subs	r0, r5, r0
    893a:	0200      	lsls	r0, r0, #8
    893c:	17c2      	asrs	r2, r0, #31
    893e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8942:	1200      	asrs	r0, r0, #8
    8944:	4288      	cmp	r0, r1
    8946:	db06      	blt.n	8956 <MPSL_IRQ_RADIO_Handler+0x4c6>
    8948:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    894c:	f88a 4000 	strb.w	r4, [sl]
    8950:	7844      	ldrb	r4, [r0, #1]
    8952:	2c20      	cmp	r4, #32
    8954:	d1c6      	bne.n	88e4 <MPSL_IRQ_RADIO_Handler+0x454>
    8956:	f89a 0000 	ldrb.w	r0, [sl]
    895a:	f889 0000 	strb.w	r0, [r9]
    895e:	2c20      	cmp	r4, #32
    8960:	bf1c      	itt	ne
    8962:	4825      	ldrne	r0, [pc, #148]	; (89f8 <MPSL_IRQ_RADIO_Handler+0x568>)
    8964:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    8968:	d040      	beq.n	89ec <MPSL_IRQ_RADIO_Handler+0x55c>
    896a:	bf00      	nop
    896c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    8970:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    8974:	6870      	ldr	r0, [r6, #4]
    8976:	68bd      	ldr	r5, [r7, #8]
    8978:	f107 0108 	add.w	r1, r7, #8
    897c:	1a28      	subs	r0, r5, r0
    897e:	0200      	lsls	r0, r0, #8
    8980:	17c2      	asrs	r2, r0, #31
    8982:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8986:	1200      	asrs	r0, r0, #8
    8988:	d422      	bmi.n	89d0 <MPSL_IRQ_RADIO_Handler+0x540>
    898a:	89c8      	ldrh	r0, [r1, #14]
    898c:	b370      	cbz	r0, 89ec <MPSL_IRQ_RADIO_Handler+0x55c>
    898e:	89f0      	ldrh	r0, [r6, #14]
    8990:	bb60      	cbnz	r0, 89ec <MPSL_IRQ_RADIO_Handler+0x55c>
    8992:	f8d6 b000 	ldr.w	fp, [r6]
    8996:	f002 fedf 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    899a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    899e:	bf08      	it	eq
    89a0:	200d      	moveq	r0, #13
    89a2:	d00b      	beq.n	89bc <MPSL_IRQ_RADIO_Handler+0x52c>
    89a4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    89a8:	3856      	subs	r0, #86	; 0x56
    89aa:	bf08      	it	eq
    89ac:	201c      	moveq	r0, #28
    89ae:	d005      	beq.n	89bc <MPSL_IRQ_RADIO_Handler+0x52c>
    89b0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    89b4:	389f      	subs	r0, #159	; 0x9f
    89b6:	bf14      	ite	ne
    89b8:	2000      	movne	r0, #0
    89ba:	2032      	moveq	r0, #50	; 0x32
    89bc:	1c41      	adds	r1, r0, #1
    89be:	eba5 000b 	sub.w	r0, r5, fp
    89c2:	0200      	lsls	r0, r0, #8
    89c4:	17c2      	asrs	r2, r0, #31
    89c6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    89ca:	1200      	asrs	r0, r0, #8
    89cc:	4288      	cmp	r0, r1
    89ce:	da0d      	bge.n	89ec <MPSL_IRQ_RADIO_Handler+0x55c>
    89d0:	f889 4000 	strb.w	r4, [r9]
    89d4:	7e38      	ldrb	r0, [r7, #24]
    89d6:	7c31      	ldrb	r1, [r6, #16]
    89d8:	4288      	cmp	r0, r1
    89da:	d802      	bhi.n	89e2 <MPSL_IRQ_RADIO_Handler+0x552>
    89dc:	2000      	movs	r0, #0
    89de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89e2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    89e6:	7844      	ldrb	r4, [r0, #1]
    89e8:	2c20      	cmp	r4, #32
    89ea:	d1bf      	bne.n	896c <MPSL_IRQ_RADIO_Handler+0x4dc>
    89ec:	2001      	movs	r0, #1
    89ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89f2:	0000      	.short	0x0000
    89f4:	20001040 	.word	0x20001040
    89f8:	20000fc0 	.word	0x20000fc0
    89fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a00:	b098      	sub	sp, #96	; 0x60
    8a02:	4615      	mov	r5, r2
    8a04:	f002 fa52 	bl	aeac <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    8a08:	4604      	mov	r4, r0
    8a0a:	f002 fccd 	bl	b3a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8a0e:	4606      	mov	r6, r0
    8a10:	9819      	ldr	r0, [sp, #100]	; 0x64
    8a12:	2801      	cmp	r0, #1
    8a14:	bf18      	it	ne
    8a16:	2802      	cmpne	r0, #2
    8a18:	d005      	beq.n	8a26 <MPSL_IRQ_RADIO_Handler+0x596>
    8a1a:	f640 1192 	movw	r1, #2450	; 0x992
    8a1e:	f04f 0070 	mov.w	r0, #112	; 0x70
    8a22:	f003 f857 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8a26:	49f9      	ldr	r1, [pc, #996]	; (8e0c <MPSL_IRQ_RADIO_Handler+0x97c>)
    8a28:	2001      	movs	r0, #1
    8a2a:	6008      	str	r0, [r1, #0]
    8a2c:	49f8      	ldr	r1, [pc, #992]	; (8e10 <MPSL_IRQ_RADIO_Handler+0x980>)
    8a2e:	6889      	ldr	r1, [r1, #8]
    8a30:	6008      	str	r0, [r1, #0]
    8a32:	2000      	movs	r0, #0
    8a34:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    8a38:	900a      	str	r0, [sp, #40]	; 0x28
    8a3a:	1e40      	subs	r0, r0, #1
    8a3c:	900b      	str	r0, [sp, #44]	; 0x2c
    8a3e:	49f5      	ldr	r1, [pc, #980]	; (8e14 <MPSL_IRQ_RADIO_Handler+0x984>)
    8a40:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8a44:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    8a48:	f101 0008 	add.w	r0, r1, #8
    8a4c:	6989      	ldr	r1, [r1, #24]
    8a4e:	e890 100d 	ldmia.w	r0, {r0, r2, r3, ip}
    8a52:	af0c      	add	r7, sp, #48	; 0x30
    8a54:	9110      	str	r1, [sp, #64]	; 0x40
    8a56:	e887 100d 	stmia.w	r7, {r0, r2, r3, ip}
    8a5a:	f007 fb3c 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8a5e:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    8a62:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    8a66:	4602      	mov	r2, r0
    8a68:	4441      	add	r1, r8
    8a6a:	1c49      	adds	r1, r1, #1
    8a6c:	4bea      	ldr	r3, [pc, #936]	; (8e18 <MPSL_IRQ_RADIO_Handler+0x988>)
    8a6e:	4408      	add	r0, r1
    8a70:	429a      	cmp	r2, r3
    8a72:	d854      	bhi.n	8b1e <MPSL_IRQ_RADIO_Handler+0x68e>
    8a74:	4de9      	ldr	r5, [pc, #932]	; (8e1c <MPSL_IRQ_RADIO_Handler+0x98c>)
    8a76:	42a9      	cmp	r1, r5
    8a78:	dc58      	bgt.n	8b2c <MPSL_IRQ_RADIO_Handler+0x69c>
    8a7a:	426a      	negs	r2, r5
    8a7c:	4291      	cmp	r1, r2
    8a7e:	db5d      	blt.n	8b3c <MPSL_IRQ_RADIO_Handler+0x6ac>
    8a80:	1c59      	adds	r1, r3, #1
    8a82:	4281      	cmp	r1, r0
    8a84:	bfdc      	itt	le
    8a86:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8a8a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8a8e:	dd05      	ble.n	8a9c <MPSL_IRQ_RADIO_Handler+0x60c>
    8a90:	2800      	cmp	r0, #0
    8a92:	bfbc      	itt	lt
    8a94:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8a98:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8a9c:	9014      	str	r0, [sp, #80]	; 0x50
    8a9e:	48e0      	ldr	r0, [pc, #896]	; (8e20 <MPSL_IRQ_RADIO_Handler+0x990>)
    8aa0:	f1b8 0f00 	cmp.w	r8, #0
    8aa4:	8b80      	ldrh	r0, [r0, #28]
    8aa6:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    8aaa:	bf14      	ite	ne
    8aac:	f04f 0a01 	movne.w	sl, #1
    8ab0:	f04f 0a00 	moveq.w	sl, #0
    8ab4:	f002 ff96 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8ab8:	9016      	str	r0, [sp, #88]	; 0x58
    8aba:	f1ba 0f00 	cmp.w	sl, #0
    8abe:	d008      	beq.n	8ad2 <MPSL_IRQ_RADIO_Handler+0x642>
    8ac0:	48d7      	ldr	r0, [pc, #860]	; (8e20 <MPSL_IRQ_RADIO_Handler+0x990>)
    8ac2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8ac4:	f1b0 3fff 	cmp.w	r0, #4294967295
    8ac8:	bf02      	ittt	eq
    8aca:	9816      	ldreq	r0, [sp, #88]	; 0x58
    8acc:	2800      	cmpeq	r0, #0
    8ace:	2701      	moveq	r7, #1
    8ad0:	d001      	beq.n	8ad6 <MPSL_IRQ_RADIO_Handler+0x646>
    8ad2:	f04f 0700 	mov.w	r7, #0
    8ad6:	f002 fe3f 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ada:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ade:	bf08      	it	eq
    8ae0:	200d      	moveq	r0, #13
    8ae2:	d00b      	beq.n	8afc <MPSL_IRQ_RADIO_Handler+0x66c>
    8ae4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8ae8:	3856      	subs	r0, #86	; 0x56
    8aea:	bf08      	it	eq
    8aec:	201c      	moveq	r0, #28
    8aee:	d005      	beq.n	8afc <MPSL_IRQ_RADIO_Handler+0x66c>
    8af0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8af4:	389f      	subs	r0, #159	; 0x9f
    8af6:	bf14      	ite	ne
    8af8:	2000      	movne	r0, #0
    8afa:	2032      	moveq	r0, #50	; 0x32
    8afc:	f04f 0900 	mov.w	r9, #0
    8b00:	46cb      	mov	fp, r9
    8b02:	9013      	str	r0, [sp, #76]	; 0x4c
    8b04:	4546      	cmp	r6, r8
    8b06:	d936      	bls.n	8b76 <MPSL_IRQ_RADIO_Handler+0x6e6>
    8b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8b0a:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8e18 <MPSL_IRQ_RADIO_Handler+0x988>
    8b0e:	ea6f 0c06 	mvn.w	ip, r6
    8b12:	4669      	mov	r1, sp
    8b14:	aa17      	add	r2, sp, #92	; 0x5c
    8b16:	eb03 000c 	add.w	r0, r3, ip
    8b1a:	454b      	cmp	r3, r9
    8b1c:	d904      	bls.n	8b28 <MPSL_IRQ_RADIO_Handler+0x698>
    8b1e:	f240 519e 	movw	r1, #1438	; 0x59e
    8b22:	2070      	movs	r0, #112	; 0x70
    8b24:	f002 ffd6 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8b28:	45ac      	cmp	ip, r5
    8b2a:	dd04      	ble.n	8b36 <MPSL_IRQ_RADIO_Handler+0x6a6>
    8b2c:	f240 519f 	movw	r1, #1439	; 0x59f
    8b30:	2070      	movs	r0, #112	; 0x70
    8b32:	f002 ffcf 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8b36:	4bbb      	ldr	r3, [pc, #748]	; (8e24 <MPSL_IRQ_RADIO_Handler+0x994>)
    8b38:	459c      	cmp	ip, r3
    8b3a:	da04      	bge.n	8b46 <MPSL_IRQ_RADIO_Handler+0x6b6>
    8b3c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    8b40:	2070      	movs	r0, #112	; 0x70
    8b42:	f002 ffc7 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8b46:	4bb8      	ldr	r3, [pc, #736]	; (8e28 <MPSL_IRQ_RADIO_Handler+0x998>)
    8b48:	4283      	cmp	r3, r0
    8b4a:	bfdc      	itt	le
    8b4c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8b50:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8b54:	dd05      	ble.n	8b62 <MPSL_IRQ_RADIO_Handler+0x6d2>
    8b56:	2800      	cmp	r0, #0
    8b58:	bfbc      	itt	lt
    8b5a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8b5e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8b62:	f001 fefd 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	990c      	ldr	r1, [sp, #48]	; 0x30
    8b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8b6e:	9000      	str	r0, [sp, #0]
    8b70:	1a08      	subs	r0, r1, r0
    8b72:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    8b76:	2f00      	cmp	r7, #0
    8b78:	bf18      	it	ne
    8b7a:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    8b7e:	d105      	bne.n	8b8c <MPSL_IRQ_RADIO_Handler+0x6fc>
    8b80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    8b84:	2800      	cmp	r0, #0
    8b86:	bf18      	it	ne
    8b88:	f04f 0b02 	movne.w	fp, #2
    8b8c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    8b90:	d008      	beq.n	8ba4 <MPSL_IRQ_RADIO_Handler+0x714>
    8b92:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b94:	1b00      	subs	r0, r0, r4
    8b96:	0200      	lsls	r0, r0, #8
    8b98:	17c1      	asrs	r1, r0, #31
    8b9a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8b9e:	1200      	asrs	r0, r0, #8
    8ba0:	2801      	cmp	r0, #1
    8ba2:	da02      	bge.n	8baa <MPSL_IRQ_RADIO_Handler+0x71a>
    8ba4:	2003      	movs	r0, #3
    8ba6:	9d18      	ldr	r5, [sp, #96]	; 0x60
    8ba8:	e00d      	b.n	8bc6 <MPSL_IRQ_RADIO_Handler+0x736>
    8baa:	b157      	cbz	r7, 8bc2 <MPSL_IRQ_RADIO_Handler+0x732>
    8bac:	489c      	ldr	r0, [pc, #624]	; (8e20 <MPSL_IRQ_RADIO_Handler+0x990>)
    8bae:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    8bb2:	b130      	cbz	r0, 8bc2 <MPSL_IRQ_RADIO_Handler+0x732>
    8bb4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    8bb8:	f110 0b00 	adds.w	fp, r0, #0
    8bbc:	bf18      	it	ne
    8bbe:	f04f 0b02 	movne.w	fp, #2
    8bc2:	4625      	mov	r5, r4
    8bc4:	2000      	movs	r0, #0
    8bc6:	4483      	add	fp, r0
    8bc8:	980c      	ldr	r0, [sp, #48]	; 0x30
    8bca:	eba0 0009 	sub.w	r0, r0, r9
    8bce:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    8bd2:	1e48      	subs	r0, r1, #1
    8bd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8bd8:	1b42      	subs	r2, r0, r5
    8bda:	0212      	lsls	r2, r2, #8
    8bdc:	17d3      	asrs	r3, r2, #31
    8bde:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    8be2:	1212      	asrs	r2, r2, #8
    8be4:	455a      	cmp	r2, fp
    8be6:	db04      	blt.n	8bf2 <MPSL_IRQ_RADIO_Handler+0x762>
    8be8:	f1b9 0f00 	cmp.w	r9, #0
    8bec:	bf18      	it	ne
    8bee:	910c      	strne	r1, [sp, #48]	; 0x30
    8bf0:	e02d      	b.n	8c4e <MPSL_IRQ_RADIO_Handler+0x7be>
    8bf2:	f1b9 0f00 	cmp.w	r9, #0
    8bf6:	d005      	beq.n	8c04 <MPSL_IRQ_RADIO_Handler+0x774>
    8bf8:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    8bfc:	b920      	cbnz	r0, 8c08 <MPSL_IRQ_RADIO_Handler+0x778>
    8bfe:	f002 fbc9 	bl	b394 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    8c02:	b108      	cbz	r0, 8c08 <MPSL_IRQ_RADIO_Handler+0x778>
    8c04:	b9af      	cbnz	r7, 8c32 <MPSL_IRQ_RADIO_Handler+0x7a2>
    8c06:	e00c      	b.n	8c22 <MPSL_IRQ_RADIO_Handler+0x792>
    8c08:	b92f      	cbnz	r7, 8c16 <MPSL_IRQ_RADIO_Handler+0x786>
    8c0a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    8c0e:	2800      	cmp	r0, #0
    8c10:	bf18      	it	ne
    8c12:	f1ab 0b02 	subne.w	fp, fp, #2
    8c16:	f04f 0900 	mov.w	r9, #0
    8c1a:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    8c1e:	464e      	mov	r6, r9
    8c20:	e007      	b.n	8c32 <MPSL_IRQ_RADIO_Handler+0x7a2>
    8c22:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    8c26:	b120      	cbz	r0, 8c32 <MPSL_IRQ_RADIO_Handler+0x7a2>
    8c28:	2000      	movs	r0, #0
    8c2a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    8c2e:	f1ab 0b02 	sub.w	fp, fp, #2
    8c32:	980c      	ldr	r0, [sp, #48]	; 0x30
    8c34:	eba0 0109 	sub.w	r1, r0, r9
    8c38:	1e48      	subs	r0, r1, #1
    8c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8c3e:	1b42      	subs	r2, r0, r5
    8c40:	0212      	lsls	r2, r2, #8
    8c42:	17d3      	asrs	r3, r2, #31
    8c44:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    8c48:	1212      	asrs	r2, r2, #8
    8c4a:	455a      	cmp	r2, fp
    8c4c:	db7e      	blt.n	8d4c <MPSL_IRQ_RADIO_Handler+0x8bc>
    8c4e:	4a74      	ldr	r2, [pc, #464]	; (8e20 <MPSL_IRQ_RADIO_Handler+0x990>)
    8c50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    8c52:	1a89      	subs	r1, r1, r2
    8c54:	0209      	lsls	r1, r1, #8
    8c56:	17cb      	asrs	r3, r1, #31
    8c58:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    8c5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8c5e:	1209      	asrs	r1, r1, #8
    8c60:	b93b      	cbnz	r3, 8c72 <MPSL_IRQ_RADIO_Handler+0x7e2>
    8c62:	f1b2 3fff 	cmp.w	r2, #4294967295
    8c66:	bf1c      	itt	ne
    8c68:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    8c6a:	4291      	cmpne	r1, r2
    8c6c:	bfb8      	it	lt
    8c6e:	2100      	movlt	r1, #0
    8c70:	db00      	blt.n	8c74 <MPSL_IRQ_RADIO_Handler+0x7e4>
    8c72:	2101      	movs	r1, #1
    8c74:	ea3a 0101 	bics.w	r1, sl, r1
    8c78:	d168      	bne.n	8d4c <MPSL_IRQ_RADIO_Handler+0x8bc>
    8c7a:	9919      	ldr	r1, [sp, #100]	; 0x64
    8c7c:	4605      	mov	r5, r0
    8c7e:	f04f 0900 	mov.w	r9, #0
    8c82:	9105      	str	r1, [sp, #20]
    8c84:	f001 ffd6 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    8c88:	1a28      	subs	r0, r5, r0
    8c8a:	0200      	lsls	r0, r0, #8
    8c8c:	17c1      	asrs	r1, r0, #31
    8c8e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8c92:	ea4f 2b20 	mov.w	fp, r0, asr #8
    8c96:	f002 fd5f 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8c9a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8c9e:	bf08      	it	eq
    8ca0:	200d      	moveq	r0, #13
    8ca2:	d00b      	beq.n	8cbc <MPSL_IRQ_RADIO_Handler+0x82c>
    8ca4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8ca8:	3856      	subs	r0, #86	; 0x56
    8caa:	bf08      	it	eq
    8cac:	201c      	moveq	r0, #28
    8cae:	d005      	beq.n	8cbc <MPSL_IRQ_RADIO_Handler+0x82c>
    8cb0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8cb4:	389f      	subs	r0, #159	; 0x9f
    8cb6:	bf14      	ite	ne
    8cb8:	2000      	movne	r0, #0
    8cba:	2032      	moveq	r0, #50	; 0x32
    8cbc:	300b      	adds	r0, #11
    8cbe:	4558      	cmp	r0, fp
    8cc0:	dd1f      	ble.n	8d02 <MPSL_IRQ_RADIO_Handler+0x872>
    8cc2:	9805      	ldr	r0, [sp, #20]
    8cc4:	2801      	cmp	r0, #1
    8cc6:	d001      	beq.n	8ccc <MPSL_IRQ_RADIO_Handler+0x83c>
    8cc8:	b147      	cbz	r7, 8cdc <MPSL_IRQ_RADIO_Handler+0x84c>
    8cca:	e012      	b.n	8cf2 <MPSL_IRQ_RADIO_Handler+0x862>
    8ccc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    8cd0:	d11c      	bne.n	8d0c <MPSL_IRQ_RADIO_Handler+0x87c>
    8cd2:	f640 1113 	movw	r1, #2323	; 0x913
    8cd6:	2070      	movs	r0, #112	; 0x70
    8cd8:	f002 fefc 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8cdc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    8ce0:	d007      	beq.n	8cf2 <MPSL_IRQ_RADIO_Handler+0x862>
    8ce2:	1b60      	subs	r0, r4, r5
    8ce4:	0200      	lsls	r0, r0, #8
    8ce6:	17c1      	asrs	r1, r0, #31
    8ce8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8cec:	1200      	asrs	r0, r0, #8
    8cee:	2804      	cmp	r0, #4
    8cf0:	dd04      	ble.n	8cfc <MPSL_IRQ_RADIO_Handler+0x86c>
    8cf2:	462c      	mov	r4, r5
    8cf4:	4620      	mov	r0, r4
    8cf6:	f001 ffc3 	bl	ac80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    8cfa:	e007      	b.n	8d0c <MPSL_IRQ_RADIO_Handler+0x87c>
    8cfc:	2800      	cmp	r0, #0
    8cfe:	dc62      	bgt.n	8dc6 <MPSL_IRQ_RADIO_Handler+0x936>
    8d00:	e004      	b.n	8d0c <MPSL_IRQ_RADIO_Handler+0x87c>
    8d02:	462c      	mov	r4, r5
    8d04:	4620      	mov	r0, r4
    8d06:	f001 ffbb 	bl	ac80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    8d0a:	46d1      	mov	r9, sl
    8d0c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    8d10:	d054      	beq.n	8dbc <MPSL_IRQ_RADIO_Handler+0x92c>
    8d12:	980c      	ldr	r0, [sp, #48]	; 0x30
    8d14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8d16:	1b00      	subs	r0, r0, r4
    8d18:	1b12      	subs	r2, r2, r4
    8d1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d1e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    8d22:	2801      	cmp	r0, #1
    8d24:	d34f      	bcc.n	8dc6 <MPSL_IRQ_RADIO_Handler+0x936>
    8d26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8d2a:	bf98      	it	ls
    8d2c:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    8d30:	d849      	bhi.n	8dc6 <MPSL_IRQ_RADIO_Handler+0x936>
    8d32:	4620      	mov	r0, r4
    8d34:	f007 f9cf 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8d38:	9914      	ldr	r1, [sp, #80]	; 0x50
    8d3a:	4a38      	ldr	r2, [pc, #224]	; (8e1c <MPSL_IRQ_RADIO_Handler+0x98c>)
    8d3c:	1a0d      	subs	r5, r1, r0
    8d3e:	f04f 0b00 	mov.w	fp, #0
    8d42:	1aaa      	subs	r2, r5, r2
    8d44:	f17b 0200 	sbcs.w	r2, fp, #0
    8d48:	d318      	bcc.n	8d7c <MPSL_IRQ_RADIO_Handler+0x8ec>
    8d4a:	e000      	b.n	8d4e <MPSL_IRQ_RADIO_Handler+0x8be>
    8d4c:	e03b      	b.n	8dc6 <MPSL_IRQ_RADIO_Handler+0x936>
    8d4e:	4b33      	ldr	r3, [pc, #204]	; (8e1c <MPSL_IRQ_RADIO_Handler+0x98c>)
    8d50:	1a42      	subs	r2, r0, r1
    8d52:	1ad3      	subs	r3, r2, r3
    8d54:	f17b 0300 	sbcs.w	r3, fp, #0
    8d58:	d310      	bcc.n	8d7c <MPSL_IRQ_RADIO_Handler+0x8ec>
    8d5a:	4b2f      	ldr	r3, [pc, #188]	; (8e18 <MPSL_IRQ_RADIO_Handler+0x988>)
    8d5c:	42ab      	cmp	r3, r5
    8d5e:	bf3e      	ittt	cc
    8d60:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    8d64:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    8d68:	1845      	addcc	r5, r0, r1
    8d6a:	d307      	bcc.n	8d7c <MPSL_IRQ_RADIO_Handler+0x8ec>
    8d6c:	4293      	cmp	r3, r2
    8d6e:	d22e      	bcs.n	8dce <MPSL_IRQ_RADIO_Handler+0x93e>
    8d70:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    8d74:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    8d78:	4408      	add	r0, r1
    8d7a:	4245      	negs	r5, r0
    8d7c:	4f28      	ldr	r7, [pc, #160]	; (8e20 <MPSL_IRQ_RADIO_Handler+0x990>)
    8d7e:	7fb8      	ldrb	r0, [r7, #30]
    8d80:	b350      	cbz	r0, 8dd8 <MPSL_IRQ_RADIO_Handler+0x948>
    8d82:	9819      	ldr	r0, [sp, #100]	; 0x64
    8d84:	2801      	cmp	r0, #1
    8d86:	d005      	beq.n	8d94 <MPSL_IRQ_RADIO_Handler+0x904>
    8d88:	2002      	movs	r0, #2
    8d8a:	f002 f9c9 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8d8e:	2001      	movs	r0, #1
    8d90:	f002 f9c6 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8d94:	45b0      	cmp	r8, r6
    8d96:	d22b      	bcs.n	8df0 <MPSL_IRQ_RADIO_Handler+0x960>
    8d98:	eba5 0106 	sub.w	r1, r5, r6
    8d9c:	f04f 0002 	mov.w	r0, #2
    8da0:	f002 f908 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    8da4:	b388      	cbz	r0, 8e0a <MPSL_IRQ_RADIO_Handler+0x97a>
    8da6:	f1b8 0f00 	cmp.w	r8, #0
    8daa:	bf1c      	itt	ne
    8dac:	eba5 0108 	subne.w	r1, r5, r8
    8db0:	2001      	movne	r0, #1
    8db2:	d043      	beq.n	8e3c <MPSL_IRQ_RADIO_Handler+0x9ac>
    8db4:	f002 f8fe 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    8db8:	b338      	cbz	r0, 8e0a <MPSL_IRQ_RADIO_Handler+0x97a>
    8dba:	e03f      	b.n	8e3c <MPSL_IRQ_RADIO_Handler+0x9ac>
    8dbc:	f640 2131 	movw	r1, #2609	; 0xa31
    8dc0:	2070      	movs	r0, #112	; 0x70
    8dc2:	f002 fe87 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8dc6:	b01b      	add	sp, #108	; 0x6c
    8dc8:	2000      	movs	r0, #0
    8dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8dce:	f640 3105 	movw	r1, #2821	; 0xb05
    8dd2:	2070      	movs	r0, #112	; 0x70
    8dd4:	f002 fe7e 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8dd8:	45b0      	cmp	r8, r6
    8dda:	bf34      	ite	cc
    8ddc:	4630      	movcc	r0, r6
    8dde:	4640      	movcs	r0, r8
    8de0:	301e      	adds	r0, #30
    8de2:	42a8      	cmp	r0, r5
    8de4:	dbcd      	blt.n	8d82 <MPSL_IRQ_RADIO_Handler+0x8f2>
    8de6:	f640 2145 	movw	r1, #2629	; 0xa45
    8dea:	2070      	movs	r0, #112	; 0x70
    8dec:	f002 fe72 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8df0:	d91c      	bls.n	8e2c <MPSL_IRQ_RADIO_Handler+0x99c>
    8df2:	eba5 0108 	sub.w	r1, r5, r8
    8df6:	2001      	movs	r0, #1
    8df8:	f002 f8dc 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    8dfc:	b128      	cbz	r0, 8e0a <MPSL_IRQ_RADIO_Handler+0x97a>
    8dfe:	2e00      	cmp	r6, #0
    8e00:	bf1c      	itt	ne
    8e02:	1ba9      	subne	r1, r5, r6
    8e04:	2002      	movne	r0, #2
    8e06:	d019      	beq.n	8e3c <MPSL_IRQ_RADIO_Handler+0x9ac>
    8e08:	e7d4      	b.n	8db4 <MPSL_IRQ_RADIO_Handler+0x924>
    8e0a:	e042      	b.n	8e92 <MPSL_IRQ_RADIO_Handler+0xa02>
    8e0c:	40000508 	.word	0x40000508
    8e10:	200002ec 	.word	0x200002ec
    8e14:	20000c40 	.word	0x20000c40
    8e18:	1e847fff 	.word	0x1e847fff
    8e1c:	0f424000 	.word	0x0f424000
    8e20:	20001040 	.word	0x20001040
    8e24:	f0bdc000 	.word	0xf0bdc000
    8e28:	1e848000 	.word	0x1e848000
    8e2c:	ea56 0008 	orrs.w	r0, r6, r8
    8e30:	d004      	beq.n	8e3c <MPSL_IRQ_RADIO_Handler+0x9ac>
    8e32:	f640 1176 	movw	r1, #2422	; 0x976
    8e36:	2070      	movs	r0, #112	; 0x70
    8e38:	f002 fe4c 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e3c:	4629      	mov	r1, r5
    8e3e:	2000      	movs	r0, #0
    8e40:	f002 f8b8 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    8e44:	b328      	cbz	r0, 8e92 <MPSL_IRQ_RADIO_Handler+0xa02>
    8e46:	2601      	movs	r6, #1
    8e48:	f1ba 0f00 	cmp.w	sl, #0
    8e4c:	bf04      	itt	eq
    8e4e:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    8e52:	2800      	cmpeq	r0, #0
    8e54:	d002      	beq.n	8e5c <MPSL_IRQ_RADIO_Handler+0x9cc>
    8e56:	f1b9 0f00 	cmp.w	r9, #0
    8e5a:	d024      	beq.n	8ea6 <MPSL_IRQ_RADIO_Handler+0xa16>
    8e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8e5e:	f1b0 3fff 	cmp.w	r0, #4294967295
    8e62:	d004      	beq.n	8e6e <MPSL_IRQ_RADIO_Handler+0x9de>
    8e64:	f002 fc7e 	bl	b764 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    8e68:	f04f 30ff 	mov.w	r0, #4294967295
    8e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    8e6e:	f1b9 0f00 	cmp.w	r9, #0
    8e72:	d01c      	beq.n	8eae <MPSL_IRQ_RADIO_Handler+0xa1e>
    8e74:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8e76:	1a20      	subs	r0, r4, r0
    8e78:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    8e7c:	2005      	movs	r0, #5
    8e7e:	f002 f899 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    8e82:	b360      	cbz	r0, 8ede <MPSL_IRQ_RADIO_Handler+0xa4e>
    8e84:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    8e88:	2800      	cmp	r0, #0
    8e8a:	bf08      	it	eq
    8e8c:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    8e90:	e015      	b.n	8ebe <MPSL_IRQ_RADIO_Handler+0xa2e>
    8e92:	2002      	movs	r0, #2
    8e94:	f002 f944 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8e98:	2001      	movs	r0, #1
    8e9a:	f002 f941 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8e9e:	b01b      	add	sp, #108	; 0x6c
    8ea0:	2000      	movs	r0, #0
    8ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8ea8:	f1b0 3fff 	cmp.w	r0, #4294967295
    8eac:	d012      	beq.n	8ed4 <MPSL_IRQ_RADIO_Handler+0xa44>
    8eae:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    8eb2:	b120      	cbz	r0, 8ebe <MPSL_IRQ_RADIO_Handler+0xa2e>
    8eb4:	2005      	movs	r0, #5
    8eb6:	f002 f933 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8eba:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    8ebe:	eba5 0008 	sub.w	r0, r5, r8
    8ec2:	f1a0 0119 	sub.w	r1, r0, #25
    8ec6:	2900      	cmp	r1, #0
    8ec8:	dc0e      	bgt.n	8ee8 <MPSL_IRQ_RADIO_Handler+0xa58>
    8eca:	f640 216e 	movw	r1, #2670	; 0xa6e
    8ece:	2070      	movs	r0, #112	; 0x70
    8ed0:	f002 fe00 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8ed4:	f002 fc62 	bl	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    8ed8:	f001 feac 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    8edc:	e7c6      	b.n	8e6c <MPSL_IRQ_RADIO_Handler+0x9dc>
    8ede:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    8ee2:	2070      	movs	r0, #112	; 0x70
    8ee4:	f002 fdf6 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8ee8:	2003      	movs	r0, #3
    8eea:	f002 f863 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    8eee:	b1b8      	cbz	r0, 8f20 <MPSL_IRQ_RADIO_Handler+0xa90>
    8ef0:	480e      	ldr	r0, [pc, #56]	; (8f2c <MPSL_IRQ_RADIO_Handler+0xa9c>)
    8ef2:	6880      	ldr	r0, [r0, #8]
    8ef4:	f8c0 b000 	str.w	fp, [r0]
    8ef8:	480d      	ldr	r0, [pc, #52]	; (8f30 <MPSL_IRQ_RADIO_Handler+0xaa0>)
    8efa:	f8c0 b000 	str.w	fp, [r0]
    8efe:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    8f02:	e898 107f 	ldmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, ip}
    8f06:	6038      	str	r0, [r7, #0]
    8f08:	6079      	str	r1, [r7, #4]
    8f0a:	60ba      	str	r2, [r7, #8]
    8f0c:	60fb      	str	r3, [r7, #12]
    8f0e:	613c      	str	r4, [r7, #16]
    8f10:	617d      	str	r5, [r7, #20]
    8f12:	61be      	str	r6, [r7, #24]
    8f14:	f8c7 c01c 	str.w	ip, [r7, #28]
    8f18:	b01b      	add	sp, #108	; 0x6c
    8f1a:	2001      	movs	r0, #1
    8f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f20:	f640 2176 	movw	r1, #2678	; 0xa76
    8f24:	2070      	movs	r0, #112	; 0x70
    8f26:	f002 fdd5 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f2a:	0000      	.short	0x0000
    8f2c:	200002ec 	.word	0x200002ec
    8f30:	40000508 	.word	0x40000508
    8f34:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f38:	460d      	mov	r5, r1
    8f3a:	4614      	mov	r4, r2
    8f3c:	4606      	mov	r6, r0
    8f3e:	f04f 0a00 	mov.w	sl, #0
    8f42:	892a      	ldrh	r2, [r5, #8]
    8f44:	6841      	ldr	r1, [r0, #4]
    8f46:	4650      	mov	r0, sl
    8f48:	f362 401f 	bfi	r0, r2, #16, #16
    8f4c:	7aaa      	ldrb	r2, [r5, #10]
    8f4e:	46d1      	mov	r9, sl
    8f50:	f362 0907 	bfi	r9, r2, #0, #8
    8f54:	7aea      	ldrb	r2, [r5, #11]
    8f56:	b083      	sub	sp, #12
    8f58:	f362 290f 	bfi	r9, r2, #8, #8
    8f5c:	782a      	ldrb	r2, [r5, #0]
    8f5e:	f8c4 a000 	str.w	sl, [r4]
    8f62:	f362 4917 	bfi	r9, r2, #16, #8
    8f66:	f8c4 a004 	str.w	sl, [r4, #4]
    8f6a:	f8c4 9010 	str.w	r9, [r4, #16]
    8f6e:	e9c4 1002 	strd	r1, r0, [r4, #8]
    8f72:	4f9d      	ldr	r7, [pc, #628]	; (91e8 <MPSL_IRQ_RADIO_Handler+0xd58>)
    8f74:	6870      	ldr	r0, [r6, #4]
    8f76:	fba0 8907 	umull	r8, r9, r0, r7
    8f7a:	6830      	ldr	r0, [r6, #0]
    8f7c:	f007 f8ab 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8f80:	eb10 0108 	adds.w	r1, r0, r8
    8f84:	eb4a 0209 	adc.w	r2, sl, r9
    8f88:	7828      	ldrb	r0, [r5, #0]
    8f8a:	ea4f 0967 	mov.w	r9, r7, asr #1
    8f8e:	f1c9 0b00 	rsb	fp, r9, #0
    8f92:	b170      	cbz	r0, 8fb2 <MPSL_IRQ_RADIO_Handler+0xb22>
    8f94:	89e0      	ldrh	r0, [r4, #14]
    8f96:	f894 8011 	ldrb.w	r8, [r4, #17]
    8f9a:	43c0      	mvns	r0, r0
    8f9c:	f8d5 a004 	ldr.w	sl, [r5, #4]
    8fa0:	f104 020c 	add.w	r2, r4, #12
    8fa4:	4548      	cmp	r0, r9
    8fa6:	dd7c      	ble.n	90a2 <MPSL_IRQ_RADIO_Handler+0xc12>
    8fa8:	f240 519f 	movw	r1, #1439	; 0x59f
    8fac:	2070      	movs	r0, #112	; 0x70
    8fae:	f002 fd91 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8fb2:	f8df c238 	ldr.w	ip, [pc, #568]	; 91ec <MPSL_IRQ_RADIO_Handler+0xd5c>
    8fb6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    8fba:	eb11 0a0c 	adds.w	sl, r1, ip
    8fbe:	f142 0c00 	adc.w	ip, r2, #0
    8fc2:	ebb0 0a0a 	subs.w	sl, r0, sl
    8fc6:	eb73 0c0c 	sbcs.w	ip, r3, ip
    8fca:	d272      	bcs.n	90b2 <MPSL_IRQ_RADIO_Handler+0xc22>
    8fcc:	1a41      	subs	r1, r0, r1
    8fce:	eb73 0102 	sbcs.w	r1, r3, r2
    8fd2:	d36e      	bcc.n	90b2 <MPSL_IRQ_RADIO_Handler+0xc22>
    8fd4:	ebb0 0608 	subs.w	r6, r0, r8
    8fd8:	42b7      	cmp	r7, r6
    8fda:	d82b      	bhi.n	9034 <MPSL_IRQ_RADIO_Handler+0xba4>
    8fdc:	89e0      	ldrh	r0, [r4, #14]
    8fde:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    8fe2:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    8fe6:	43c1      	mvns	r1, r0
    8fe8:	4a81      	ldr	r2, [pc, #516]	; (91f0 <MPSL_IRQ_RADIO_Handler+0xd60>)
    8fea:	eb08 0001 	add.w	r0, r8, r1
    8fee:	4542      	cmp	r2, r8
    8ff0:	d32b      	bcc.n	904a <MPSL_IRQ_RADIO_Handler+0xbba>
    8ff2:	4549      	cmp	r1, r9
    8ff4:	dcd8      	bgt.n	8fa8 <MPSL_IRQ_RADIO_Handler+0xb18>
    8ff6:	4559      	cmp	r1, fp
    8ff8:	db66      	blt.n	90c8 <MPSL_IRQ_RADIO_Handler+0xc38>
    8ffa:	4287      	cmp	r7, r0
    8ffc:	bfdc      	itt	le
    8ffe:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9002:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9006:	dd05      	ble.n	9014 <MPSL_IRQ_RADIO_Handler+0xb84>
    9008:	2800      	cmp	r0, #0
    900a:	bfbc      	itt	lt
    900c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9010:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9014:	466a      	mov	r2, sp
    9016:	a901      	add	r1, sp, #4
    9018:	f001 fca2 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    901c:	89e0      	ldrh	r0, [r4, #14]
    901e:	f89d 1000 	ldrb.w	r1, [sp]
    9022:	1a30      	subs	r0, r6, r0
    9024:	1a40      	subs	r0, r0, r1
    9026:	1e40      	subs	r0, r0, #1
    9028:	42b8      	cmp	r0, r7
    902a:	d302      	bcc.n	9032 <MPSL_IRQ_RADIO_Handler+0xba2>
    902c:	68a0      	ldr	r0, [r4, #8]
    902e:	1c40      	adds	r0, r0, #1
    9030:	60a0      	str	r0, [r4, #8]
    9032:	4646      	mov	r6, r8
    9034:	89e0      	ldrh	r0, [r4, #14]
    9036:	4b6e      	ldr	r3, [pc, #440]	; (91f0 <MPSL_IRQ_RADIO_Handler+0xd60>)
    9038:	43c1      	mvns	r1, r0
    903a:	686d      	ldr	r5, [r5, #4]
    903c:	f894 8011 	ldrb.w	r8, [r4, #17]
    9040:	1870      	adds	r0, r6, r1
    9042:	f104 020c 	add.w	r2, r4, #12
    9046:	429e      	cmp	r6, r3
    9048:	d904      	bls.n	9054 <MPSL_IRQ_RADIO_Handler+0xbc4>
    904a:	f240 519e 	movw	r1, #1438	; 0x59e
    904e:	2070      	movs	r0, #112	; 0x70
    9050:	f002 fd40 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9054:	4549      	cmp	r1, r9
    9056:	dca7      	bgt.n	8fa8 <MPSL_IRQ_RADIO_Handler+0xb18>
    9058:	4559      	cmp	r1, fp
    905a:	db35      	blt.n	90c8 <MPSL_IRQ_RADIO_Handler+0xc38>
    905c:	4287      	cmp	r7, r0
    905e:	bfdc      	itt	le
    9060:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9064:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9068:	dd05      	ble.n	9076 <MPSL_IRQ_RADIO_Handler+0xbe6>
    906a:	2800      	cmp	r0, #0
    906c:	bfbc      	itt	lt
    906e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9072:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9076:	4621      	mov	r1, r4
    9078:	f001 fc72 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    907c:	6820      	ldr	r0, [r4, #0]
    907e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9082:	1970      	adds	r0, r6, r5
    9084:	1c40      	adds	r0, r0, #1
    9086:	6021      	str	r1, [r4, #0]
    9088:	f1b8 0f00 	cmp.w	r8, #0
    908c:	bf08      	it	eq
    908e:	307a      	addeq	r0, #122	; 0x7a
    9090:	d004      	beq.n	909c <MPSL_IRQ_RADIO_Handler+0xc0c>
    9092:	f1b8 0f01 	cmp.w	r8, #1
    9096:	bf08      	it	eq
    9098:	3048      	addeq	r0, #72	; 0x48
    909a:	d13a      	bne.n	9112 <MPSL_IRQ_RADIO_Handler+0xc82>
    909c:	f001 fc44 	bl	a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    90a0:	e001      	b.n	90a6 <MPSL_IRQ_RADIO_Handler+0xc16>
    90a2:	e00e      	b.n	90c2 <MPSL_IRQ_RADIO_Handler+0xc32>
    90a4:	e005      	b.n	90b2 <MPSL_IRQ_RADIO_Handler+0xc22>
    90a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    90aa:	6060      	str	r0, [r4, #4]
    90ac:	b007      	add	sp, #28
    90ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90b2:	6830      	ldr	r0, [r6, #0]
    90b4:	1e40      	subs	r0, r0, #1
    90b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    90ba:	6020      	str	r0, [r4, #0]
    90bc:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    90c0:	e7f3      	b.n	90aa <MPSL_IRQ_RADIO_Handler+0xc1a>
    90c2:	4601      	mov	r1, r0
    90c4:	4558      	cmp	r0, fp
    90c6:	da04      	bge.n	90d2 <MPSL_IRQ_RADIO_Handler+0xc42>
    90c8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    90cc:	2070      	movs	r0, #112	; 0x70
    90ce:	f002 fd01 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    90d2:	4287      	cmp	r7, r0
    90d4:	bfdc      	itt	le
    90d6:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    90da:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    90de:	dd05      	ble.n	90ec <MPSL_IRQ_RADIO_Handler+0xc5c>
    90e0:	2800      	cmp	r0, #0
    90e2:	bfbc      	itt	lt
    90e4:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    90e8:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    90ec:	4621      	mov	r1, r4
    90ee:	f001 fc37 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    90f2:	6820      	ldr	r0, [r4, #0]
    90f4:	f1b8 0f00 	cmp.w	r8, #0
    90f8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    90fc:	f10a 0001 	add.w	r0, sl, #1
    9100:	6021      	str	r1, [r4, #0]
    9102:	bf08      	it	eq
    9104:	307a      	addeq	r0, #122	; 0x7a
    9106:	d009      	beq.n	911c <MPSL_IRQ_RADIO_Handler+0xc8c>
    9108:	f1b8 0f01 	cmp.w	r8, #1
    910c:	bf08      	it	eq
    910e:	3048      	addeq	r0, #72	; 0x48
    9110:	d004      	beq.n	911c <MPSL_IRQ_RADIO_Handler+0xc8c>
    9112:	f240 6139 	movw	r1, #1593	; 0x639
    9116:	2070      	movs	r0, #112	; 0x70
    9118:	f002 fcdc 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    911c:	f001 fc04 	bl	a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9120:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9124:	6061      	str	r1, [r4, #4]
    9126:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    912a:	aa01      	add	r2, sp, #4
    912c:	4669      	mov	r1, sp
    912e:	4648      	mov	r0, r9
    9130:	6837      	ldr	r7, [r6, #0]
    9132:	f001 fc15 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9136:	f002 f937 	bl	b3a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    913a:	f001 fbf5 	bl	a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    913e:	4680      	mov	r8, r0
    9140:	482c      	ldr	r0, [pc, #176]	; (91f4 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9142:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9146:	2920      	cmp	r1, #32
    9148:	d02a      	beq.n	91a0 <MPSL_IRQ_RADIO_Handler+0xd10>
    914a:	68c0      	ldr	r0, [r0, #12]
    914c:	1d40      	adds	r0, r0, #5
    914e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9152:	bf00      	nop
    9154:	e9d4 2100 	ldrd	r2, r1, [r4]
    9158:	1a89      	subs	r1, r1, r2
    915a:	4401      	add	r1, r0
    915c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9160:	e9c4 0100 	strd	r0, r1, [r4]
    9164:	6831      	ldr	r1, [r6, #0]
    9166:	4281      	cmp	r1, r0
    9168:	d902      	bls.n	9170 <MPSL_IRQ_RADIO_Handler+0xce0>
    916a:	68a0      	ldr	r0, [r4, #8]
    916c:	1c40      	adds	r0, r0, #1
    916e:	60a0      	str	r0, [r4, #8]
    9170:	6832      	ldr	r2, [r6, #0]
    9172:	6928      	ldr	r0, [r5, #16]
    9174:	4621      	mov	r1, r4
    9176:	9b06      	ldr	r3, [sp, #24]
    9178:	f7ff f9e6 	bl	8548 <MPSL_IRQ_RADIO_Handler+0xb8>
    917c:	2800      	cmp	r0, #0
    917e:	bf1c      	itt	ne
    9180:	b007      	addne	sp, #28
    9182:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9186:	e9d4 1000 	ldrd	r1, r0, [r4]
    918a:	1a40      	subs	r0, r0, r1
    918c:	6831      	ldr	r1, [r6, #0]
    918e:	6021      	str	r1, [r4, #0]
    9190:	6831      	ldr	r1, [r6, #0]
    9192:	4408      	add	r0, r1
    9194:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9198:	6060      	str	r0, [r4, #4]
    919a:	b007      	add	sp, #28
    919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91a0:	3709      	adds	r7, #9
    91a2:	f1b9 0f00 	cmp.w	r9, #0
    91a6:	d016      	beq.n	91d6 <MPSL_IRQ_RADIO_Handler+0xd46>
    91a8:	f002 fc1c 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    91ac:	b998      	cbnz	r0, 91d6 <MPSL_IRQ_RADIO_Handler+0xd46>
    91ae:	f002 fad3 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91b2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91b6:	bf08      	it	eq
    91b8:	200d      	moveq	r0, #13
    91ba:	d00b      	beq.n	91d4 <MPSL_IRQ_RADIO_Handler+0xd44>
    91bc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91c0:	3856      	subs	r0, #86	; 0x56
    91c2:	bf08      	it	eq
    91c4:	201c      	moveq	r0, #28
    91c6:	d005      	beq.n	91d4 <MPSL_IRQ_RADIO_Handler+0xd44>
    91c8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91cc:	389f      	subs	r0, #159	; 0x9f
    91ce:	bf14      	ite	ne
    91d0:	2000      	movne	r0, #0
    91d2:	2032      	moveq	r0, #50	; 0x32
    91d4:	4407      	add	r7, r0
    91d6:	9800      	ldr	r0, [sp, #0]
    91d8:	4580      	cmp	r8, r0
    91da:	bf84      	itt	hi
    91dc:	eba8 0000 	subhi.w	r0, r8, r0
    91e0:	4407      	addhi	r7, r0
    91e2:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    91e6:	e7b5      	b.n	9154 <MPSL_IRQ_RADIO_Handler+0xcc4>
    91e8:	1e848000 	.word	0x1e848000
    91ec:	0f424000 	.word	0x0f424000
    91f0:	1e847fff 	.word	0x1e847fff
    91f4:	20001040 	.word	0x20001040
    91f8:	b570      	push	{r4, r5, r6, lr}
    91fa:	4d1e      	ldr	r5, [pc, #120]	; (9274 <MPSL_IRQ_RADIO_Handler+0xde4>)
    91fc:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9200:	2820      	cmp	r0, #32
    9202:	bf18      	it	ne
    9204:	bd70      	popne	{r4, r5, r6, pc}
    9206:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    920a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    920e:	4428      	add	r0, r5
    9210:	f890 4020 	ldrb.w	r4, [r0, #32]
    9214:	2c20      	cmp	r4, #32
    9216:	d027      	beq.n	9268 <MPSL_IRQ_RADIO_Handler+0xdd8>
    9218:	4b17      	ldr	r3, [pc, #92]	; (9278 <MPSL_IRQ_RADIO_Handler+0xde8>)
    921a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    921e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9222:	7849      	ldrb	r1, [r1, #1]
    9224:	f880 1020 	strb.w	r1, [r0, #32]
    9228:	20ff      	movs	r0, #255	; 0xff
    922a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    922e:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9232:	4621      	mov	r1, r4
    9234:	2002      	movs	r0, #2
    9236:	f000 f891 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    923a:	2000      	movs	r0, #0
    923c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9240:	77a8      	strb	r0, [r5, #30]
    9242:	490e      	ldr	r1, [pc, #56]	; (927c <MPSL_IRQ_RADIO_Handler+0xdec>)
    9244:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9248:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    924c:	7e00      	ldrb	r0, [r0, #24]
    924e:	2800      	cmp	r0, #0
    9250:	bf08      	it	eq
    9252:	f002 fda9 	bleq	bda8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9256:	2000      	movs	r0, #0
    9258:	4909      	ldr	r1, [pc, #36]	; (9280 <MPSL_IRQ_RADIO_Handler+0xdf0>)
    925a:	6849      	ldr	r1, [r1, #4]
    925c:	2900      	cmp	r1, #0
    925e:	bf08      	it	eq
    9260:	bd70      	popeq	{r4, r5, r6, pc}
    9262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9266:	4708      	bx	r1
    9268:	f240 3132 	movw	r1, #818	; 0x332
    926c:	2070      	movs	r0, #112	; 0x70
    926e:	f002 fc31 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9272:	0000      	.short	0x0000
    9274:	20001040 	.word	0x20001040
    9278:	20000fc0 	.word	0x20000fc0
    927c:	20000c40 	.word	0x20000c40
    9280:	200002ec 	.word	0x200002ec
    9284:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9288:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 934c <MPSL_IRQ_RADIO_Handler+0xebc>
    928c:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9290:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9294:	4440      	add	r0, r8
    9296:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    929a:	2c20      	cmp	r4, #32
    929c:	bf08      	it	eq
    929e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    92a2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9350 <MPSL_IRQ_RADIO_Handler+0xec0>
    92a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9354 <MPSL_IRQ_RADIO_Handler+0xec4>
    92aa:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    92ae:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    92b2:	2607      	movs	r6, #7
    92b4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    92b8:	2801      	cmp	r0, #1
    92ba:	d00e      	beq.n	92da <MPSL_IRQ_RADIO_Handler+0xe4a>
    92bc:	2804      	cmp	r0, #4
    92be:	bf08      	it	eq
    92c0:	2602      	moveq	r6, #2
    92c2:	d00a      	beq.n	92da <MPSL_IRQ_RADIO_Handler+0xe4a>
    92c4:	2805      	cmp	r0, #5
    92c6:	bf0c      	ite	eq
    92c8:	2603      	moveq	r6, #3
    92ca:	2806      	cmpne	r0, #6
    92cc:	d005      	beq.n	92da <MPSL_IRQ_RADIO_Handler+0xe4a>
    92ce:	f640 01dd 	movw	r1, #2269	; 0x8dd
    92d2:	f04f 0070 	mov.w	r0, #112	; 0x70
    92d6:	f002 fbfd 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    92da:	f1bb 0f00 	cmp.w	fp, #0
    92de:	bf18      	it	ne
    92e0:	f3af 8000 	nopne.w
    92e4:	f3ef 8010 	mrs	r0, PRIMASK
    92e8:	b672      	cpsid	i
    92ea:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    92ee:	784a      	ldrb	r2, [r1, #1]
    92f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    92f4:	4441      	add	r1, r8
    92f6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    92fa:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    92fe:	42a2      	cmp	r2, r4
    9300:	bf04      	itt	eq
    9302:	2220      	moveq	r2, #32
    9304:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9308:	b1c0      	cbz	r0, 933c <MPSL_IRQ_RADIO_Handler+0xeac>
    930a:	462a      	mov	r2, r5
    930c:	4621      	mov	r1, r4
    930e:	2001      	movs	r0, #1
    9310:	f000 f824 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    9314:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9318:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    931c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9320:	6840      	ldr	r0, [r0, #4]
    9322:	4631      	mov	r1, r6
    9324:	4790      	blx	r2
    9326:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    932a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    932e:	4440      	add	r0, r8
    9330:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9334:	2c20      	cmp	r4, #32
    9336:	d1ba      	bne.n	92ae <MPSL_IRQ_RADIO_Handler+0xe1e>
    9338:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    933c:	4806      	ldr	r0, [pc, #24]	; (9358 <MPSL_IRQ_RADIO_Handler+0xec8>)
    933e:	2800      	cmp	r0, #0
    9340:	bf18      	it	ne
    9342:	f3af 8000 	nopne.w
    9346:	b662      	cpsie	i
    9348:	e7df      	b.n	930a <MPSL_IRQ_RADIO_Handler+0xe7a>
    934a:	0000      	.short	0x0000
    934c:	20001040 	.word	0x20001040
    9350:	00000000 	.word	0x00000000
    9354:	20000fc0 	.word	0x20000fc0
    9358:	00000000 	.word	0x00000000
    935c:	f8df c058 	ldr.w	ip, [pc, #88]	; 93b8 <MPSL_IRQ_RADIO_Handler+0xf28>
    9360:	b510      	push	{r4, lr}
    9362:	2300      	movs	r3, #0
    9364:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9368:	2807      	cmp	r0, #7
    936a:	d21f      	bcs.n	93ac <MPSL_IRQ_RADIO_Handler+0xf1c>
    936c:	e8df f000 	tbb	[pc, r0]
    9370:	05050505 	.word	0x05050505
    9374:	00040404 	.word	0x00040404
    9378:	2301      	movs	r3, #1
    937a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    937e:	2b00      	cmp	r3, #0
    9380:	bf08      	it	eq
    9382:	bd10      	popeq	{r4, pc}
    9384:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9388:	480c      	ldr	r0, [pc, #48]	; (93bc <MPSL_IRQ_RADIO_Handler+0xf2c>)
    938a:	4402      	add	r2, r0
    938c:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9390:	2820      	cmp	r0, #32
    9392:	bf0e      	itee	eq
    9394:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9398:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    939c:	7041      	strbne	r1, [r0, #1]
    939e:	2020      	movs	r0, #32
    93a0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    93a4:	7058      	strb	r0, [r3, #1]
    93a6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    93aa:	bd10      	pop	{r4, pc}
    93ac:	f240 216e 	movw	r1, #622	; 0x26e
    93b0:	2070      	movs	r0, #112	; 0x70
    93b2:	f002 fb8f 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93b6:	0000      	.short	0x0000
    93b8:	20000fc0 	.word	0x20000fc0
    93bc:	20001040 	.word	0x20001040
    93c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    93c4:	460f      	mov	r7, r1
    93c6:	4680      	mov	r8, r0
    93c8:	f8df a160 	ldr.w	sl, [pc, #352]	; 952c <MPSL_IRQ_RADIO_Handler+0x109c>
    93cc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    93d0:	4450      	add	r0, sl
    93d2:	f1b8 0f01 	cmp.w	r8, #1
    93d6:	f890 4020 	ldrb.w	r4, [r0, #32]
    93da:	4625      	mov	r5, r4
    93dc:	bf18      	it	ne
    93de:	f1b8 0f02 	cmpne.w	r8, #2
    93e2:	d005      	beq.n	93f0 <MPSL_IRQ_RADIO_Handler+0xf60>
    93e4:	f640 21ac 	movw	r1, #2732	; 0xaac
    93e8:	f04f 0070 	mov.w	r0, #112	; 0x70
    93ec:	f002 fb72 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93f0:	f04f 0b00 	mov.w	fp, #0
    93f4:	2d20      	cmp	r5, #32
    93f6:	d042      	beq.n	947e <MPSL_IRQ_RADIO_Handler+0xfee>
    93f8:	f89a 001e 	ldrb.w	r0, [sl, #30]
    93fc:	2600      	movs	r6, #0
    93fe:	2800      	cmp	r0, #0
    9400:	bf08      	it	eq
    9402:	2602      	moveq	r6, #2
    9404:	f001 fc16 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9408:	f8df c124 	ldr.w	ip, [pc, #292]	; 9530 <MPSL_IRQ_RADIO_Handler+0x10a0>
    940c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9410:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9414:	688a      	ldr	r2, [r1, #8]
    9416:	68c9      	ldr	r1, [r1, #12]
    9418:	1a12      	subs	r2, r2, r0
    941a:	1a09      	subs	r1, r1, r0
    941c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9420:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9424:	4296      	cmp	r6, r2
    9426:	bf99      	ittee	ls
    9428:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    942c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9430:	4a40      	ldrhi	r2, [pc, #256]	; (9534 <MPSL_IRQ_RADIO_Handler+0x10a4>)
    9432:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9436:	d920      	bls.n	947a <MPSL_IRQ_RADIO_Handler+0xfea>
    9438:	4622      	mov	r2, r4
    943a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    943e:	784c      	ldrb	r4, [r1, #1]
    9440:	2c20      	cmp	r4, #32
    9442:	d012      	beq.n	946a <MPSL_IRQ_RADIO_Handler+0xfda>
    9444:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9448:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    944c:	688b      	ldr	r3, [r1, #8]
    944e:	68c9      	ldr	r1, [r1, #12]
    9450:	1a1b      	subs	r3, r3, r0
    9452:	1a09      	subs	r1, r1, r0
    9454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9458:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    945c:	429e      	cmp	r6, r3
    945e:	bf9c      	itt	ls
    9460:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9464:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9468:	d8e6      	bhi.n	9438 <MPSL_IRQ_RADIO_Handler+0xfa8>
    946a:	2a20      	cmp	r2, #32
    946c:	d005      	beq.n	947a <MPSL_IRQ_RADIO_Handler+0xfea>
    946e:	463b      	mov	r3, r7
    9470:	2120      	movs	r1, #32
    9472:	2004      	movs	r0, #4
    9474:	f7ff f82c 	bl	84d0 <MPSL_IRQ_RADIO_Handler+0x40>
    9478:	4604      	mov	r4, r0
    947a:	42ac      	cmp	r4, r5
    947c:	d116      	bne.n	94ac <MPSL_IRQ_RADIO_Handler+0x101c>
    947e:	482e      	ldr	r0, [pc, #184]	; (9538 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9480:	2800      	cmp	r0, #0
    9482:	bf18      	it	ne
    9484:	f3af 8000 	nopne.w
    9488:	f001 fbd4 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    948c:	4603      	mov	r3, r0
    948e:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9492:	2820      	cmp	r0, #32
    9494:	d00d      	beq.n	94b2 <MPSL_IRQ_RADIO_Handler+0x1022>
    9496:	f8da 0008 	ldr.w	r0, [sl, #8]
    949a:	1c99      	adds	r1, r3, #2
    949c:	1a08      	subs	r0, r1, r0
    949e:	0200      	lsls	r0, r0, #8
    94a0:	17c1      	asrs	r1, r0, #31
    94a2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    94a6:	1200      	asrs	r0, r0, #8
    94a8:	2800      	cmp	r0, #0
    94aa:	dd02      	ble.n	94b2 <MPSL_IRQ_RADIO_Handler+0x1022>
    94ac:	2000      	movs	r0, #0
    94ae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    94b2:	2d20      	cmp	r5, #32
    94b4:	d014      	beq.n	94e0 <MPSL_IRQ_RADIO_Handler+0x1050>
    94b6:	462a      	mov	r2, r5
    94b8:	4641      	mov	r1, r8
    94ba:	4618      	mov	r0, r3
    94bc:	f7ff fa9e 	bl	89fc <MPSL_IRQ_RADIO_Handler+0x56c>
    94c0:	2800      	cmp	r0, #0
    94c2:	bf1e      	ittt	ne
    94c4:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    94c8:	2002      	movne	r0, #2
    94ca:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    94ce:	463b      	mov	r3, r7
    94d0:	462a      	mov	r2, r5
    94d2:	2120      	movs	r1, #32
    94d4:	2004      	movs	r0, #4
    94d6:	f7fe fffb 	bl	84d0 <MPSL_IRQ_RADIO_Handler+0x40>
    94da:	2000      	movs	r0, #0
    94dc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    94e0:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    94e4:	f1b0 3fff 	cmp.w	r0, #4294967295
    94e8:	d005      	beq.n	94f6 <MPSL_IRQ_RADIO_Handler+0x1066>
    94ea:	f002 f93b 	bl	b764 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    94ee:	f04f 30ff 	mov.w	r0, #4294967295
    94f2:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    94f6:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    94fa:	b120      	cbz	r0, 9506 <MPSL_IRQ_RADIO_Handler+0x1076>
    94fc:	2005      	movs	r0, #5
    94fe:	f001 fe0f 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9502:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9506:	2004      	movs	r0, #4
    9508:	f001 fe0a 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    950c:	f001 fe78 	bl	b200 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9510:	2020      	movs	r0, #32
    9512:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9516:	4809      	ldr	r0, [pc, #36]	; (953c <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9518:	6880      	ldr	r0, [r0, #8]
    951a:	f8c0 b000 	str.w	fp, [r0]
    951e:	4808      	ldr	r0, [pc, #32]	; (9540 <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9520:	f8c0 b000 	str.w	fp, [r0]
    9524:	2001      	movs	r0, #1
    9526:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    952a:	0000      	.short	0x0000
    952c:	20001040 	.word	0x20001040
    9530:	20000c40 	.word	0x20000c40
    9534:	20000fc0 	.word	0x20000fc0
    9538:	00000000 	.word	0x00000000
    953c:	200002ec 	.word	0x200002ec
    9540:	40000508 	.word	0x40000508

00009544 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9544:	4906      	ldr	r1, [pc, #24]	; (9560 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9546:	b510      	push	{r4, lr}
    9548:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    954c:	2a20      	cmp	r2, #32
    954e:	bf1c      	itt	ne
    9550:	7788      	strbne	r0, [r1, #30]
    9552:	bd10      	popne	{r4, pc}
    9554:	f240 319a 	movw	r1, #922	; 0x39a
    9558:	2070      	movs	r0, #112	; 0x70
    955a:	f002 fabb 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    955e:	0000      	.short	0x0000
    9560:	20001040 	.word	0x20001040

00009564 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9568:	4e69      	ldr	r6, [pc, #420]	; (9710 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    956a:	4607      	mov	r7, r0
    956c:	b08d      	sub	sp, #52	; 0x34
    956e:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9572:	4688      	mov	r8, r1
    9574:	2820      	cmp	r0, #32
    9576:	d055      	beq.n	9624 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9578:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    957c:	f106 0408 	add.w	r4, r6, #8
    9580:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9584:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9588:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    958c:	2020      	movs	r0, #32
    958e:	f88d 0020 	strb.w	r0, [sp, #32]
    9592:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9596:	aa0a      	add	r2, sp, #40	; 0x28
    9598:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    959c:	4430      	add	r0, r6
    959e:	a909      	add	r1, sp, #36	; 0x24
    95a0:	f890 5020 	ldrb.w	r5, [r0, #32]
    95a4:	68f0      	ldr	r0, [r6, #12]
    95a6:	9002      	str	r0, [sp, #8]
    95a8:	6830      	ldr	r0, [r6, #0]
    95aa:	4438      	add	r0, r7
    95ac:	f001 f9d8 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    95b0:	f8da 000c 	ldr.w	r0, [sl, #12]
    95b4:	9909      	ldr	r1, [sp, #36]	; 0x24
    95b6:	2f65      	cmp	r7, #101	; 0x65
    95b8:	4408      	add	r0, r1
    95ba:	d338      	bcc.n	962e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    95bc:	4a55      	ldr	r2, [pc, #340]	; (9714 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    95be:	2100      	movs	r1, #0
    95c0:	1bd2      	subs	r2, r2, r7
    95c2:	eb71 0201 	sbcs.w	r2, r1, r1
    95c6:	d332      	bcc.n	962e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    95c8:	6822      	ldr	r2, [r4, #0]
    95ca:	1a82      	subs	r2, r0, r2
    95cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    95d0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    95d4:	d82b      	bhi.n	962e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    95d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    95da:	6060      	str	r0, [r4, #4]
    95dc:	4630      	mov	r0, r6
    95de:	f884 8010 	strb.w	r8, [r4, #16]
    95e2:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    95e6:	f10d 0a20 	add.w	sl, sp, #32
    95ea:	2d20      	cmp	r5, #32
    95ec:	bf1c      	itt	ne
    95ee:	494a      	ldrne	r1, [pc, #296]	; (9718 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    95f0:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    95f4:	d050      	beq.n	9698 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    95f6:	bf00      	nop
    95f8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    95fc:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9600:	6861      	ldr	r1, [r4, #4]
    9602:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9606:	f108 0008 	add.w	r0, r8, #8
    960a:	1a71      	subs	r1, r6, r1
    960c:	0209      	lsls	r1, r1, #8
    960e:	17ca      	asrs	r2, r1, #31
    9610:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9614:	1209      	asrs	r1, r1, #8
    9616:	d42d      	bmi.n	9674 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9618:	89c0      	ldrh	r0, [r0, #14]
    961a:	2800      	cmp	r0, #0
    961c:	d03c      	beq.n	9698 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    961e:	89e0      	ldrh	r0, [r4, #14]
    9620:	b148      	cbz	r0, 9636 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9622:	e039      	b.n	9698 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9624:	f640 3173 	movw	r1, #2931	; 0xb73
    9628:	2070      	movs	r0, #112	; 0x70
    962a:	f002 fa53 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    962e:	b00d      	add	sp, #52	; 0x34
    9630:	2001      	movs	r0, #1
    9632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9636:	6820      	ldr	r0, [r4, #0]
    9638:	900c      	str	r0, [sp, #48]	; 0x30
    963a:	f002 f88d 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    963e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9642:	bf08      	it	eq
    9644:	200d      	moveq	r0, #13
    9646:	d00b      	beq.n	9660 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9648:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    964c:	3856      	subs	r0, #86	; 0x56
    964e:	bf08      	it	eq
    9650:	201c      	moveq	r0, #28
    9652:	d005      	beq.n	9660 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9654:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9658:	389f      	subs	r0, #159	; 0x9f
    965a:	bf14      	ite	ne
    965c:	2000      	movne	r0, #0
    965e:	2032      	moveq	r0, #50	; 0x32
    9660:	1c41      	adds	r1, r0, #1
    9662:	980c      	ldr	r0, [sp, #48]	; 0x30
    9664:	1a30      	subs	r0, r6, r0
    9666:	0200      	lsls	r0, r0, #8
    9668:	17c2      	asrs	r2, r0, #31
    966a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    966e:	1200      	asrs	r0, r0, #8
    9670:	4288      	cmp	r0, r1
    9672:	da11      	bge.n	9698 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9674:	f88a 5000 	strb.w	r5, [sl]
    9678:	f898 1018 	ldrb.w	r1, [r8, #24]
    967c:	7c20      	ldrb	r0, [r4, #16]
    967e:	4281      	cmp	r1, r0
    9680:	d805      	bhi.n	968e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    9682:	9802      	ldr	r0, [sp, #8]
    9684:	6060      	str	r0, [r4, #4]
    9686:	b00d      	add	sp, #52	; 0x34
    9688:	2002      	movs	r0, #2
    968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    968e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9692:	7845      	ldrb	r5, [r0, #1]
    9694:	2d20      	cmp	r5, #32
    9696:	d1af      	bne.n	95f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    9698:	2005      	movs	r0, #5
    969a:	f001 fd41 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    969e:	4c1c      	ldr	r4, [pc, #112]	; (9710 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    96a0:	f04f 30ff 	mov.w	r0, #4294967295
    96a4:	6060      	str	r0, [r4, #4]
    96a6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    96aa:	f89d 2020 	ldrb.w	r2, [sp, #32]
    96ae:	2120      	movs	r1, #32
    96b0:	2a20      	cmp	r2, #32
    96b2:	d003      	beq.n	96bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    96b4:	2005      	movs	r0, #5
    96b6:	f7fe ff0b 	bl	84d0 <MPSL_IRQ_RADIO_Handler+0x40>
    96ba:	e004      	b.n	96c6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    96bc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    96c0:	4420      	add	r0, r4
    96c2:	f890 0020 	ldrb.w	r0, [r0, #32]
    96c6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    96ca:	4913      	ldr	r1, [pc, #76]	; (9718 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    96cc:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    96d0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    96d4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    96d8:	7048      	strb	r0, [r1, #1]
    96da:	6820      	ldr	r0, [r4, #0]
    96dc:	4438      	add	r0, r7
    96de:	6020      	str	r0, [r4, #0]
    96e0:	20ff      	movs	r0, #255	; 0xff
    96e2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    96e6:	7e60      	ldrb	r0, [r4, #25]
    96e8:	2801      	cmp	r0, #1
    96ea:	d105      	bne.n	96f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    96ec:	68e0      	ldr	r0, [r4, #12]
    96ee:	1e40      	subs	r0, r0, #1
    96f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    96f4:	f001 fb78 	bl	ade8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    96f8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    96fc:	2820      	cmp	r0, #32
    96fe:	d003      	beq.n	9708 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    9700:	4806      	ldr	r0, [pc, #24]	; (971c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    9702:	7840      	ldrb	r0, [r0, #1]
    9704:	f002 faba 	bl	bc7c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9708:	b00d      	add	sp, #52	; 0x34
    970a:	2000      	movs	r0, #0
    970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9710:	20001040 	.word	0x20001040
    9714:	0f424000 	.word	0x0f424000
    9718:	20000fc0 	.word	0x20000fc0
    971c:	200002ec 	.word	0x200002ec

00009720 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9720:	4806      	ldr	r0, [pc, #24]	; (973c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9722:	b510      	push	{r4, lr}
    9724:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9728:	2920      	cmp	r1, #32
    972a:	bf1c      	itt	ne
    972c:	7e00      	ldrbne	r0, [r0, #24]
    972e:	bd10      	popne	{r4, pc}
    9730:	f640 316d 	movw	r1, #2925	; 0xb6d
    9734:	2070      	movs	r0, #112	; 0x70
    9736:	f002 f9cd 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    973a:	0000      	.short	0x0000
    973c:	20001040 	.word	0x20001040

00009740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    9740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9742:	4d6f      	ldr	r5, [pc, #444]	; (9900 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    9744:	2601      	movs	r6, #1
    9746:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    974a:	4a6e      	ldr	r2, [pc, #440]	; (9904 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    974c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    974e:	2808      	cmp	r0, #8
    9750:	d272      	bcs.n	9838 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    9752:	e8df f000 	tbb	[pc, r0]
    9756:	7704      	.short	0x7704
    9758:	44cfb19f 	.word	0x44cfb19f
    975c:	bbb6      	.short	0xbbb6
    975e:	f1b1 3fff 	cmp.w	r1, #4294967295
    9762:	d104      	bne.n	976e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    9764:	f002 f81a 	bl	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9768:	f001 fa64 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    976c:	62e0      	str	r0, [r4, #44]	; 0x2c
    976e:	8ae0      	ldrh	r0, [r4, #22]
    9770:	b110      	cbz	r0, 9778 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    9772:	f002 f937 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9776:	b180      	cbz	r0, 979a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    9778:	f7ff fd3e 	bl	91f8 <MPSL_IRQ_RADIO_Handler+0xd68>
    977c:	20ff      	movs	r0, #255	; 0xff
    977e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    9782:	6861      	ldr	r1, [r4, #4]
    9784:	f1b1 3fff 	cmp.w	r1, #4294967295
    9788:	d003      	beq.n	9792 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    978a:	2005      	movs	r0, #5
    978c:	f001 fc12 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9790:	b140      	cbz	r0, 97a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    9792:	7e60      	ldrb	r0, [r4, #25]
    9794:	2801      	cmp	r0, #1
    9796:	d110      	bne.n	97ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    9798:	e009      	b.n	97ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    979a:	f640 0169 	movw	r1, #2153	; 0x869
    979e:	2070      	movs	r0, #112	; 0x70
    97a0:	f002 f998 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97a4:	f640 016e 	movw	r1, #2158	; 0x86e
    97a8:	2070      	movs	r0, #112	; 0x70
    97aa:	f002 f993 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97ae:	68e0      	ldr	r0, [r4, #12]
    97b0:	1e40      	subs	r0, r0, #1
    97b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    97b6:	f001 fb17 	bl	ade8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    97ba:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    97be:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    97c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    97c6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    97ca:	6840      	ldr	r0, [r0, #4]
    97cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    97d0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    97d4:	b001      	add	sp, #4
    97d6:	2101      	movs	r1, #1
    97d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    97dc:	4710      	bx	r2
    97de:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    97e2:	b158      	cbz	r0, 97fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    97e4:	f1b1 3fff 	cmp.w	r1, #4294967295
    97e8:	d104      	bne.n	97f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    97ea:	f001 ffd7 	bl	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    97ee:	f001 fa21 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    97f2:	62e0      	str	r0, [r4, #44]	; 0x2c
    97f4:	2000      	movs	r0, #0
    97f6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    97fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97fc:	f7ff fcfc 	bl	91f8 <MPSL_IRQ_RADIO_Handler+0xd68>
    9800:	f04f 30ff 	mov.w	r0, #4294967295
    9804:	6060      	str	r0, [r4, #4]
    9806:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    980a:	f88d 0000 	strb.w	r0, [sp]
    980e:	f89d 0000 	ldrb.w	r0, [sp]
    9812:	b190      	cbz	r0, 983a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    9814:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    9818:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    981c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9820:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    9824:	6840      	ldr	r0, [r0, #4]
    9826:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    982a:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    982e:	b001      	add	sp, #4
    9830:	2106      	movs	r1, #6
    9832:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9836:	4710      	bx	r2
    9838:	e05c      	b.n	98f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    983a:	f640 0185 	movw	r1, #2181	; 0x885
    983e:	2070      	movs	r0, #112	; 0x70
    9840:	f002 f948 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9844:	f7ff fcd8 	bl	91f8 <MPSL_IRQ_RADIO_Handler+0xd68>
    9848:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    984c:	f002 f8ca 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9850:	b120      	cbz	r0, 985c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    9852:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9854:	f1b0 3fff 	cmp.w	r0, #4294967295
    9858:	d005      	beq.n	9866 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    985a:	e009      	b.n	9870 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    985c:	f640 0193 	movw	r1, #2195	; 0x893
    9860:	2070      	movs	r0, #112	; 0x70
    9862:	f002 f937 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9866:	f001 ff99 	bl	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    986a:	f001 f9e3 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    986e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9870:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    9874:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    9878:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    987c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    9880:	6840      	ldr	r0, [r0, #4]
    9882:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9886:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    988a:	b001      	add	sp, #4
    988c:	2100      	movs	r1, #0
    988e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9892:	4710      	bx	r2
    9894:	f001 fd6a 	bl	b36c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    9898:	8ae0      	ldrh	r0, [r4, #22]
    989a:	b110      	cbz	r0, 98a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    989c:	f002 f8a2 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    98a0:	b128      	cbz	r0, 98ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    98a2:	f001 fd77 	bl	b394 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    98a6:	2800      	cmp	r0, #0
    98a8:	bf18      	it	ne
    98aa:	7766      	strbne	r6, [r4, #29]
    98ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98ae:	f640 019d 	movw	r1, #2205	; 0x89d
    98b2:	2070      	movs	r0, #112	; 0x70
    98b4:	f002 f90e 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98b8:	4813      	ldr	r0, [pc, #76]	; (9908 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    98ba:	6006      	str	r6, [r0, #0]
    98bc:	6890      	ldr	r0, [r2, #8]
    98be:	6006      	str	r6, [r0, #0]
    98c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98c2:	7810      	ldrb	r0, [r2, #0]
    98c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    98c8:	f002 b9d8 	b.w	bc7c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    98cc:	f7ff fc94 	bl	91f8 <MPSL_IRQ_RADIO_Handler+0xd68>
    98d0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    98d4:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    98d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    98dc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    98e0:	6840      	ldr	r0, [r0, #4]
    98e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    98e6:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    98ea:	b001      	add	sp, #4
    98ec:	2105      	movs	r1, #5
    98ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    98f2:	4710      	bx	r2
    98f4:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    98f8:	2070      	movs	r0, #112	; 0x70
    98fa:	f002 f8eb 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98fe:	0000      	.short	0x0000
    9900:	20000c40 	.word	0x20000c40
    9904:	200002ec 	.word	0x200002ec
    9908:	40000508 	.word	0x40000508

0000990c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    990c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9910:	4682      	mov	sl, r0
    9912:	48ed      	ldr	r0, [pc, #948]	; (9cc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3bc>)
    9914:	b08d      	sub	sp, #52	; 0x34
    9916:	6800      	ldr	r0, [r0, #0]
    9918:	4dec      	ldr	r5, [pc, #944]	; (9ccc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>)
    991a:	05c0      	lsls	r0, r0, #23
    991c:	0dc0      	lsrs	r0, r0, #23
    991e:	d00e      	beq.n	993e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    9920:	3810      	subs	r0, #16
    9922:	b240      	sxtb	r0, r0
    9924:	2800      	cmp	r0, #0
    9926:	bfb8      	it	lt
    9928:	f000 000f 	andlt.w	r0, r0, #15
    992c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9930:	bfac      	ite	ge
    9932:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    9936:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    993a:	0940      	lsrs	r0, r0, #5
    993c:	d00d      	beq.n	995a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    993e:	980e      	ldr	r0, [sp, #56]	; 0x38
    9940:	f04f 0b00 	mov.w	fp, #0
    9944:	7800      	ldrb	r0, [r0, #0]
    9946:	2800      	cmp	r0, #0
    9948:	bf18      	it	ne
    994a:	2801      	cmpne	r0, #1
    994c:	d018      	beq.n	9980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    994e:	f240 713b 	movw	r1, #1851	; 0x73b
    9952:	f04f 0070 	mov.w	r0, #112	; 0x70
    9956:	f002 f8bd 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    995a:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    995e:	f04f 0b01 	mov.w	fp, #1
    9962:	2820      	cmp	r0, #32
    9964:	d007      	beq.n	9976 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    9966:	980e      	ldr	r0, [sp, #56]	; 0x38
    9968:	7800      	ldrb	r0, [r0, #0]
    996a:	b148      	cbz	r0, 9980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    996c:	f240 7137 	movw	r1, #1847	; 0x737
    9970:	2070      	movs	r0, #112	; 0x70
    9972:	f002 f8af 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9976:	f240 7134 	movw	r1, #1844	; 0x734
    997a:	2070      	movs	r0, #112	; 0x70
    997c:	f002 f8aa 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9980:	4cd3      	ldr	r4, [pc, #844]	; (9cd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    9982:	b124      	cbz	r4, 998e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    9984:	2100      	movs	r1, #0
    9986:	f240 703e 	movw	r0, #1854	; 0x73e
    998a:	f3af 8000 	nop.w
    998e:	2000      	movs	r0, #0
    9990:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    9994:	49cf      	ldr	r1, [pc, #828]	; (9cd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    9996:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    999a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    999e:	f04f 0901 	mov.w	r9, #1
    99a2:	9000      	str	r0, [sp, #0]
    99a4:	b124      	cbz	r4, 99b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    99a6:	2100      	movs	r1, #0
    99a8:	f240 7049 	movw	r0, #1865	; 0x749
    99ac:	f3af 8000 	nop.w
    99b0:	f1b9 0f00 	cmp.w	r9, #0
    99b4:	d00a      	beq.n	99cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    99b6:	bf00      	nop
    99b8:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    99bc:	f04f 0800 	mov.w	r8, #0
    99c0:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    99c4:	f1bb 0f00 	cmp.w	fp, #0
    99c8:	d007      	beq.n	99da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    99ca:	e038      	b.n	9a3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    99cc:	48c2      	ldr	r0, [pc, #776]	; (9cd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    99ce:	2800      	cmp	r0, #0
    99d0:	bf18      	it	ne
    99d2:	f3af 8000 	nopne.w
    99d6:	b662      	cpsie	i
    99d8:	e7ee      	b.n	99b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    99da:	4637      	mov	r7, r6
    99dc:	2001      	movs	r0, #1
    99de:	ea20 0607 	bic.w	r6, r0, r7
    99e2:	48be      	ldr	r0, [pc, #760]	; (9cdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    99e4:	2240      	movs	r2, #64	; 0x40
    99e6:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    99ea:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    99ee:	f006 fcf3 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    99f2:	b124      	cbz	r4, 99fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    99f4:	2100      	movs	r1, #0
    99f6:	f240 505e 	movw	r0, #1374	; 0x55e
    99fa:	f3af 8000 	nop.w
    99fe:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    9a02:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    9a06:	4429      	add	r1, r5
    9a08:	4428      	add	r0, r5
    9a0a:	8c0a      	ldrh	r2, [r1, #32]
    9a0c:	8402      	strh	r2, [r0, #32]
    9a0e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    9a12:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    9a16:	b124      	cbz	r4, 9a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    9a18:	2100      	movs	r1, #0
    9a1a:	f240 5062 	movw	r0, #1378	; 0x562
    9a1e:	f3af 8000 	nop.w
    9a22:	b124      	cbz	r4, 9a2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    9a24:	2100      	movs	r1, #0
    9a26:	f240 7053 	movw	r0, #1875	; 0x753
    9a2a:	f3af 8000 	nop.w
    9a2e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    9a32:	f88d 0018 	strb.w	r0, [sp, #24]
    9a36:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9a3a:	2800      	cmp	r0, #0
    9a3c:	d1b2      	bne.n	99a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    9a3e:	b124      	cbz	r4, 9a4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    9a40:	2100      	movs	r1, #0
    9a42:	f240 705d 	movw	r0, #1885	; 0x75d
    9a46:	f3af 8000 	nop.w
    9a4a:	a806      	add	r0, sp, #24
    9a4c:	f001 f8f8 	bl	ac40 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    9a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    9a54:	e9cd 0108 	strd	r0, r1, [sp, #32]
    9a58:	4633      	mov	r3, r6
    9a5a:	aa01      	add	r2, sp, #4
    9a5c:	a808      	add	r0, sp, #32
    9a5e:	990e      	ldr	r1, [sp, #56]	; 0x38
    9a60:	f7ff fa68 	bl	8f34 <MPSL_IRQ_RADIO_Handler+0xaa4>
    9a64:	b124      	cbz	r4, 9a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    9a66:	2100      	movs	r1, #0
    9a68:	f240 7064 	movw	r0, #1892	; 0x764
    9a6c:	f3af 8000 	nop.w
    9a70:	4a9a      	ldr	r2, [pc, #616]	; (9cdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    9a72:	9908      	ldr	r1, [sp, #32]
    9a74:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    9a78:	a801      	add	r0, sp, #4
    9a7a:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    9a7e:	2a01      	cmp	r2, #1
    9a80:	bf18      	it	ne
    9a82:	2a02      	cmpne	r2, #2
    9a84:	d138      	bne.n	9af8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    9a86:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    9a8a:	9a01      	ldr	r2, [sp, #4]
    9a8c:	9b02      	ldr	r3, [sp, #8]
    9a8e:	eba2 0201 	sub.w	r2, r2, r1
    9a92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9a96:	eba3 0101 	sub.w	r1, r3, r1
    9a9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9a9e:	2a02      	cmp	r2, #2
    9aa0:	d360      	bcc.n	9b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    9aa2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9aa6:	bf98      	it	ls
    9aa8:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9aac:	d85a      	bhi.n	9b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    9aae:	f04f 0801 	mov.w	r8, #1
    9ab2:	ab07      	add	r3, sp, #28
    9ab4:	aa06      	add	r2, sp, #24
    9ab6:	4631      	mov	r1, r6
    9ab8:	f7fe fefe 	bl	88b8 <MPSL_IRQ_RADIO_Handler+0x428>
    9abc:	2800      	cmp	r0, #0
    9abe:	d059      	beq.n	9b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    9ac0:	f89d 1018 	ldrb.w	r1, [sp, #24]
    9ac4:	f89d 201c 	ldrb.w	r2, [sp, #28]
    9ac8:	4633      	mov	r3, r6
    9aca:	428a      	cmp	r2, r1
    9acc:	d056      	beq.n	9b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    9ace:	2005      	movs	r0, #5
    9ad0:	f7fe fcfe 	bl	84d0 <MPSL_IRQ_RADIO_Handler+0x40>
    9ad4:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    9ad8:	7048      	strb	r0, [r1, #1]
    9ada:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9ade:	2820      	cmp	r0, #32
    9ae0:	bf1c      	itt	ne
    9ae2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    9ae6:	f880 a001 	strbne.w	sl, [r0, #1]
    9aea:	d053      	beq.n	9b94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x288>
    9aec:	4632      	mov	r2, r6
    9aee:	4651      	mov	r1, sl
    9af0:	f05f 0003 	movs.w	r0, #3
    9af4:	f7ff fc32 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    9af8:	b124      	cbz	r4, 9b04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    9afa:	2100      	movs	r1, #0
    9afc:	f240 7069 	movw	r0, #1897	; 0x769
    9b00:	f3af 8000 	nop.w
    9b04:	4876      	ldr	r0, [pc, #472]	; (9ce0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    9b06:	2800      	cmp	r0, #0
    9b08:	bf18      	it	ne
    9b0a:	f3af 8000 	nopne.w
    9b0e:	f3ef 8910 	mrs	r9, PRIMASK
    9b12:	b672      	cpsid	i
    9b14:	b124      	cbz	r4, 9b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    9b16:	2100      	movs	r1, #0
    9b18:	f240 706f 	movw	r0, #1903	; 0x76f
    9b1c:	f3af 8000 	nop.w
    9b20:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    9b24:	f88d 0018 	strb.w	r0, [sp, #24]
    9b28:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9b2c:	2800      	cmp	r0, #0
    9b2e:	f47f af39 	bne.w	99a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    9b32:	b124      	cbz	r4, 9b3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    9b34:	2100      	movs	r1, #0
    9b36:	f240 7077 	movw	r0, #1911	; 0x777
    9b3a:	f3af 8000 	nop.w
    9b3e:	e89d 108f 	ldmia.w	sp, {r0, r1, r2, r3, r7, ip}
    9b42:	f100 0008 	add.w	r0, r0, #8
    9b46:	f1b8 0f00 	cmp.w	r8, #0
    9b4a:	e880 108e 	stmia.w	r0, {r1, r2, r3, r7, ip}
    9b4e:	d051      	beq.n	9bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    9b50:	b124      	cbz	r4, 9b5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x250>
    9b52:	2100      	movs	r1, #0
    9b54:	f240 7084 	movw	r0, #1924	; 0x784
    9b58:	f3af 8000 	nop.w
    9b5c:	f1bb 0f00 	cmp.w	fp, #0
    9b60:	d139      	bne.n	9bd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    9b62:	e01f      	b.n	9ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    9b64:	4632      	mov	r2, r6
    9b66:	4651      	mov	r1, sl
    9b68:	2004      	movs	r0, #4
    9b6a:	f7ff fbf7 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    9b6e:	f04f 0801 	mov.w	r8, #1
    9b72:	e7c1      	b.n	9af8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    9b74:	4632      	mov	r2, r6
    9b76:	4651      	mov	r1, sl
    9b78:	2004      	movs	r0, #4
    9b7a:	e7bb      	b.n	9af4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    9b7c:	2920      	cmp	r1, #32
    9b7e:	bf19      	ittee	ne
    9b80:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    9b84:	7840      	ldrbne	r0, [r0, #1]
    9b86:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    9b8a:	4428      	addeq	r0, r5
    9b8c:	bf08      	it	eq
    9b8e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    9b92:	e79f      	b.n	9ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    9b94:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    9b98:	4429      	add	r1, r5
    9b9a:	f881 a020 	strb.w	sl, [r1, #32]
    9b9e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    9ba2:	e7a3      	b.n	9aec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    9ba4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9ba6:	f010 0fff 	tst.w	r0, #255	; 0xff
    9baa:	d014      	beq.n	9bd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    9bac:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9bb0:	2820      	cmp	r0, #32
    9bb2:	d110      	bne.n	9bd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    9bb4:	b124      	cbz	r4, 9bc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    9bb6:	2100      	movs	r1, #0
    9bb8:	f240 7089 	movw	r0, #1929	; 0x789
    9bbc:	f3af 8000 	nop.w
    9bc0:	4631      	mov	r1, r6
    9bc2:	2002      	movs	r0, #2
    9bc4:	f7ff fbfc 	bl	93c0 <MPSL_IRQ_RADIO_Handler+0xf30>
    9bc8:	900a      	str	r0, [sp, #40]	; 0x28
    9bca:	b920      	cbnz	r0, 9bd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    9bcc:	980e      	ldr	r0, [sp, #56]	; 0x38
    9bce:	7800      	ldrb	r0, [r0, #0]
    9bd0:	b1e8      	cbz	r0, 9c0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x302>
    9bd2:	2801      	cmp	r0, #1
    9bd4:	d02a      	beq.n	9c2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    9bd6:	b124      	cbz	r4, 9be2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d6>
    9bd8:	2100      	movs	r1, #0
    9bda:	f240 70a6 	movw	r0, #1958	; 0x7a6
    9bde:	f3af 8000 	nop.w
    9be2:	20ff      	movs	r0, #255	; 0xff
    9be4:	f1bb 0f00 	cmp.w	fp, #0
    9be8:	bf18      	it	ne
    9bea:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    9bee:	d026      	beq.n	9c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x332>
    9bf0:	f04f 0801 	mov.w	r8, #1
    9bf4:	b124      	cbz	r4, 9c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    9bf6:	2100      	movs	r1, #0
    9bf8:	f240 70b7 	movw	r0, #1975	; 0x7b7
    9bfc:	f3af 8000 	nop.w
    9c00:	980a      	ldr	r0, [sp, #40]	; 0x28
    9c02:	4e38      	ldr	r6, [pc, #224]	; (9ce4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    9c04:	2802      	cmp	r0, #2
    9c06:	d023      	beq.n	9c50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x344>
    9c08:	2801      	cmp	r0, #1
    9c0a:	d029      	beq.n	9c60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    9c0c:	e02d      	b.n	9c6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    9c0e:	b124      	cbz	r4, 9c1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    9c10:	2100      	movs	r1, #0
    9c12:	f240 7091 	movw	r0, #1937	; 0x791
    9c16:	f3af 8000 	nop.w
    9c1a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9c1e:	4651      	mov	r1, sl
    9c20:	2004      	movs	r0, #4
    9c22:	f7ff fb9b 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    9c26:	f04f 0801 	mov.w	r8, #1
    9c2a:	e7e3      	b.n	9bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    9c2c:	2c00      	cmp	r4, #0
    9c2e:	f43f aeb9 	beq.w	99a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    9c32:	2100      	movs	r1, #0
    9c34:	f240 709c 	movw	r0, #1948	; 0x79c
    9c38:	f3af 8000 	nop.w
    9c3c:	e6b2      	b.n	99a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    9c3e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9c42:	2101      	movs	r1, #1
    9c44:	4391      	bics	r1, r2
    9c46:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    9c4a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9c4e:	e7cf      	b.n	9bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    9c50:	68a8      	ldr	r0, [r5, #8]
    9c52:	9908      	ldr	r1, [sp, #32]
    9c54:	1a40      	subs	r0, r0, r1
    9c56:	f006 fa3e 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9c5a:	6871      	ldr	r1, [r6, #4]
    9c5c:	b921      	cbnz	r1, 9c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    9c5e:	e004      	b.n	9c6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    9c60:	6871      	ldr	r1, [r6, #4]
    9c62:	f04f 30ff 	mov.w	r0, #4294967295
    9c66:	b101      	cbz	r1, 9c6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    9c68:	4788      	blx	r1
    9c6a:	f1b9 0f00 	cmp.w	r9, #0
    9c6e:	d024      	beq.n	9cba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    9c70:	b124      	cbz	r4, 9c7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    9c72:	2100      	movs	r1, #0
    9c74:	f240 70c7 	movw	r0, #1991	; 0x7c7
    9c78:	f3af 8000 	nop.w
    9c7c:	f1b8 0f00 	cmp.w	r8, #0
    9c80:	d011      	beq.n	9ca6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    9c82:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    9c86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9c8a:	4428      	add	r0, r5
    9c8c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    9c90:	2820      	cmp	r0, #32
    9c92:	d008      	beq.n	9ca6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    9c94:	b124      	cbz	r4, 9ca0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>
    9c96:	2100      	movs	r1, #0
    9c98:	f240 70ce 	movw	r0, #1998	; 0x7ce
    9c9c:	f3af 8000 	nop.w
    9ca0:	7870      	ldrb	r0, [r6, #1]
    9ca2:	f001 ffeb 	bl	bc7c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9ca6:	b124      	cbz	r4, 9cb2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    9ca8:	2100      	movs	r1, #0
    9caa:	f240 70d3 	movw	r0, #2003	; 0x7d3
    9cae:	f3af 8000 	nop.w
    9cb2:	b00f      	add	sp, #60	; 0x3c
    9cb4:	4640      	mov	r0, r8
    9cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cba:	4807      	ldr	r0, [pc, #28]	; (9cd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    9cbc:	2800      	cmp	r0, #0
    9cbe:	bf18      	it	ne
    9cc0:	f3af 8000 	nopne.w
    9cc4:	b662      	cpsie	i
    9cc6:	e7d3      	b.n	9c70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    9cc8:	e000ed04 	.word	0xe000ed04
    9ccc:	20001040 	.word	0x20001040
    9cd0:	00000000 	.word	0x00000000
    9cd4:	20000c40 	.word	0x20000c40
    9cd8:	00000000 	.word	0x00000000
    9cdc:	20000fc0 	.word	0x20000fc0
    9ce0:	00000000 	.word	0x00000000
    9ce4:	200002ec 	.word	0x200002ec

00009ce8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    9ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cec:	4606      	mov	r6, r0
    9cee:	7800      	ldrb	r0, [r0, #0]
    9cf0:	b08d      	sub	sp, #52	; 0x34
    9cf2:	b118      	cbz	r0, 9cfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    9cf4:	b00d      	add	sp, #52	; 0x34
    9cf6:	2000      	movs	r0, #0
    9cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cfc:	488c      	ldr	r0, [pc, #560]	; (9f30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    9cfe:	6800      	ldr	r0, [r0, #0]
    9d00:	05c0      	lsls	r0, r0, #23
    9d02:	0dc0      	lsrs	r0, r0, #23
    9d04:	d00e      	beq.n	9d24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    9d06:	3810      	subs	r0, #16
    9d08:	b240      	sxtb	r0, r0
    9d0a:	2800      	cmp	r0, #0
    9d0c:	bfb8      	it	lt
    9d0e:	f000 000f 	andlt.w	r0, r0, #15
    9d12:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d16:	bfac      	ite	ge
    9d18:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    9d1c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    9d20:	0940      	lsrs	r0, r0, #5
    9d22:	d0e7      	beq.n	9cf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    9d24:	4d83      	ldr	r5, [pc, #524]	; (9f34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    9d26:	4c84      	ldr	r4, [pc, #528]	; (9f38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    9d28:	f04f 0b01 	mov.w	fp, #1
    9d2c:	2700      	movs	r7, #0
    9d2e:	b125      	cbz	r5, 9d3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    9d30:	2100      	movs	r1, #0
    9d32:	f240 50e5 	movw	r0, #1509	; 0x5e5
    9d36:	f3af 8000 	nop.w
    9d3a:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    9d3e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    9d42:	f04f 0900 	mov.w	r9, #0
    9d46:	b125      	cbz	r5, 9d52 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    9d48:	2100      	movs	r1, #0
    9d4a:	f240 50ea 	movw	r0, #1514	; 0x5ea
    9d4e:	f3af 8000 	nop.w
    9d52:	487a      	ldr	r0, [pc, #488]	; (9f3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    9d54:	ea2b 080a 	bic.w	r8, fp, sl
    9d58:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    9d5c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    9d60:	2240      	movs	r2, #64	; 0x40
    9d62:	f006 fb39 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9d66:	b125      	cbz	r5, 9d72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    9d68:	2100      	movs	r1, #0
    9d6a:	f240 505e 	movw	r0, #1374	; 0x55e
    9d6e:	f3af 8000 	nop.w
    9d72:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    9d76:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    9d7a:	4421      	add	r1, r4
    9d7c:	4420      	add	r0, r4
    9d7e:	8c0a      	ldrh	r2, [r1, #32]
    9d80:	8402      	strh	r2, [r0, #32]
    9d82:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    9d86:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    9d8a:	b125      	cbz	r5, 9d96 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    9d8c:	2100      	movs	r1, #0
    9d8e:	f240 5062 	movw	r0, #1378	; 0x562
    9d92:	f3af 8000 	nop.w
    9d96:	b125      	cbz	r5, 9da2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    9d98:	2100      	movs	r1, #0
    9d9a:	f240 50ef 	movw	r0, #1519	; 0x5ef
    9d9e:	f3af 8000 	nop.w
    9da2:	a808      	add	r0, sp, #32
    9da4:	f000 ff4c 	bl	ac40 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    9da8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    9dac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    9db0:	4643      	mov	r3, r8
    9db2:	466a      	mov	r2, sp
    9db4:	4631      	mov	r1, r6
    9db6:	a80a      	add	r0, sp, #40	; 0x28
    9db8:	f7ff f8bc 	bl	8f34 <MPSL_IRQ_RADIO_Handler+0xaa4>
    9dbc:	b125      	cbz	r5, 9dc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    9dbe:	2100      	movs	r1, #0
    9dc0:	f240 50f5 	movw	r0, #1525	; 0x5f5
    9dc4:	f3af 8000 	nop.w
    9dc8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    9dcc:	2820      	cmp	r0, #32
    9dce:	d01a      	beq.n	9e06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    9dd0:	68e0      	ldr	r0, [r4, #12]
    9dd2:	9900      	ldr	r1, [sp, #0]
    9dd4:	1a09      	subs	r1, r1, r0
    9dd6:	0209      	lsls	r1, r1, #8
    9dd8:	17ca      	asrs	r2, r1, #31
    9dda:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9dde:	1209      	asrs	r1, r1, #8
    9de0:	d511      	bpl.n	9e06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    9de2:	9900      	ldr	r1, [sp, #0]
    9de4:	4281      	cmp	r1, r0
    9de6:	d902      	bls.n	9dee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    9de8:	9902      	ldr	r1, [sp, #8]
    9dea:	1c49      	adds	r1, r1, #1
    9dec:	9102      	str	r1, [sp, #8]
    9dee:	e9dd 2100 	ldrd	r2, r1, [sp]
    9df2:	1a89      	subs	r1, r1, r2
    9df4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    9df8:	4408      	add	r0, r1
    9dfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9dfe:	e9cd 2000 	strd	r2, r0, [sp]
    9e02:	f04f 0901 	mov.w	r9, #1
    9e06:	b125      	cbz	r5, 9e12 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    9e08:	2100      	movs	r1, #0
    9e0a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    9e0e:	f3af 8000 	nop.w
    9e12:	9900      	ldr	r1, [sp, #0]
    9e14:	980a      	ldr	r0, [sp, #40]	; 0x28
    9e16:	9a01      	ldr	r2, [sp, #4]
    9e18:	1a09      	subs	r1, r1, r0
    9e1a:	1a10      	subs	r0, r2, r0
    9e1c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9e20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    9e28:	bf98      	it	ls
    9e2a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9e2e:	d809      	bhi.n	9e44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    9e30:	4643      	mov	r3, r8
    9e32:	4669      	mov	r1, sp
    9e34:	4842      	ldr	r0, [pc, #264]	; (9f40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    9e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e38:	f7fe fb86 	bl	8548 <MPSL_IRQ_RADIO_Handler+0xb8>
    9e3c:	ea59 0000 	orrs.w	r0, r9, r0
    9e40:	d129      	bne.n	9e96 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    9e42:	e042      	b.n	9eca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    9e44:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9e46:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    9e4a:	9002      	str	r0, [sp, #8]
    9e4c:	aa09      	add	r2, sp, #36	; 0x24
    9e4e:	a907      	add	r1, sp, #28
    9e50:	4650      	mov	r0, sl
    9e52:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    9e56:	f000 fd83 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e5a:	f001 faa5 	bl	b3a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9e5e:	f000 fd63 	bl	a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9e62:	4681      	mov	r9, r0
    9e64:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    9e68:	2820      	cmp	r0, #32
    9e6a:	d03b      	beq.n	9ee4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    9e6c:	68e0      	ldr	r0, [r4, #12]
    9e6e:	1d40      	adds	r0, r0, #5
    9e70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e74:	9900      	ldr	r1, [sp, #0]
    9e76:	4281      	cmp	r1, r0
    9e78:	d902      	bls.n	9e80 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    9e7a:	9902      	ldr	r1, [sp, #8]
    9e7c:	1c49      	adds	r1, r1, #1
    9e7e:	9102      	str	r1, [sp, #8]
    9e80:	e9dd 2100 	ldrd	r2, r1, [sp]
    9e84:	1a89      	subs	r1, r1, r2
    9e86:	9000      	str	r0, [sp, #0]
    9e88:	4408      	add	r0, r1
    9e8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e8e:	9001      	str	r0, [sp, #4]
    9e90:	201f      	movs	r0, #31
    9e92:	f88d 000c 	strb.w	r0, [sp, #12]
    9e96:	9800      	ldr	r0, [sp, #0]
    9e98:	f006 f91d 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9e9c:	1c41      	adds	r1, r0, #1
    9e9e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    9ea2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    9ea6:	4410      	add	r0, r2
    9ea8:	4408      	add	r0, r1
    9eaa:	e9c6 0704 	strd	r0, r7, [r6, #16]
    9eae:	b125      	cbz	r5, 9eba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    9eb0:	2100      	movs	r1, #0
    9eb2:	f240 601a 	movw	r0, #1562	; 0x61a
    9eb6:	f3af 8000 	nop.w
    9eba:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    9ebe:	4a21      	ldr	r2, [pc, #132]	; (9f44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    9ec0:	9b02      	ldr	r3, [sp, #8]
    9ec2:	fbe3 1002 	umlal	r1, r0, r3, r2
    9ec6:	e9c6 1004 	strd	r1, r0, [r6, #16]
    9eca:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    9ece:	f88d 0014 	strb.w	r0, [sp, #20]
    9ed2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    9ed6:	2800      	cmp	r0, #0
    9ed8:	f47f af29 	bne.w	9d2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    9edc:	b00d      	add	sp, #52	; 0x34
    9ede:	2001      	movs	r0, #1
    9ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ee4:	f108 0809 	add.w	r8, r8, #9
    9ee8:	f1ba 0f00 	cmp.w	sl, #0
    9eec:	d016      	beq.n	9f1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    9eee:	f001 fd79 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9ef2:	b998      	cbnz	r0, 9f1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    9ef4:	f001 fc30 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9ef8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9efc:	bf08      	it	eq
    9efe:	200d      	moveq	r0, #13
    9f00:	d00b      	beq.n	9f1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    9f02:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9f06:	3856      	subs	r0, #86	; 0x56
    9f08:	bf08      	it	eq
    9f0a:	201c      	moveq	r0, #28
    9f0c:	d005      	beq.n	9f1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    9f0e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9f12:	389f      	subs	r0, #159	; 0x9f
    9f14:	bf14      	ite	ne
    9f16:	4638      	movne	r0, r7
    9f18:	2032      	moveq	r0, #50	; 0x32
    9f1a:	4480      	add	r8, r0
    9f1c:	9807      	ldr	r0, [sp, #28]
    9f1e:	4581      	cmp	r9, r0
    9f20:	bf84      	itt	hi
    9f22:	eba9 0000 	subhi.w	r0, r9, r0
    9f26:	4480      	addhi	r8, r0
    9f28:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    9f2c:	e7a2      	b.n	9e74 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    9f2e:	0000      	.short	0x0000
    9f30:	e000ed04 	.word	0xe000ed04
    9f34:	00000000 	.word	0x00000000
    9f38:	20001040 	.word	0x20001040
    9f3c:	20000fc0 	.word	0x20000fc0
    9f40:	0f424000 	.word	0x0f424000
    9f44:	1e848000 	.word	0x1e848000

00009f48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    9f48:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f4c:	4d92      	ldr	r5, [pc, #584]	; (a198 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    9f4e:	b08c      	sub	sp, #48	; 0x30
    9f50:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    9f54:	2000      	movs	r0, #0
    9f56:	9008      	str	r0, [sp, #32]
    9f58:	9006      	str	r0, [sp, #24]
    9f5a:	2001      	movs	r0, #1
    9f5c:	4c8f      	ldr	r4, [pc, #572]	; (a19c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    9f5e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    9f62:	f04f 0800 	mov.w	r8, #0
    9f66:	4607      	mov	r7, r0
    9f68:	9007      	str	r0, [sp, #28]
    9f6a:	b124      	cbz	r4, 9f76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    9f6c:	2100      	movs	r1, #0
    9f6e:	f240 70e4 	movw	r0, #2020	; 0x7e4
    9f72:	f3af 8000 	nop.w
    9f76:	9807      	ldr	r0, [sp, #28]
    9f78:	2800      	cmp	r0, #0
    9f7a:	d03c      	beq.n	9ff6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    9f7c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    9f80:	b124      	cbz	r4, 9f8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    9f82:	2100      	movs	r1, #0
    9f84:	f240 70e9 	movw	r0, #2025	; 0x7e9
    9f88:	f3af 8000 	nop.w
    9f8c:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    9f90:	2240      	movs	r2, #64	; 0x40
    9f92:	ea27 060a 	bic.w	r6, r7, sl
    9f96:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    9f9a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    9f9e:	4683      	mov	fp, r0
    9fa0:	f006 fa1a 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9fa4:	b124      	cbz	r4, 9fb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    9fa6:	2100      	movs	r1, #0
    9fa8:	f240 505e 	movw	r0, #1374	; 0x55e
    9fac:	f3af 8000 	nop.w
    9fb0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    9fb4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    9fb8:	4428      	add	r0, r5
    9fba:	4429      	add	r1, r5
    9fbc:	9000      	str	r0, [sp, #0]
    9fbe:	8c0a      	ldrh	r2, [r1, #32]
    9fc0:	8402      	strh	r2, [r0, #32]
    9fc2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    9fc6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    9fca:	b124      	cbz	r4, 9fd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    9fcc:	2100      	movs	r1, #0
    9fce:	f240 5062 	movw	r0, #1378	; 0x562
    9fd2:	f3af 8000 	nop.w
    9fd6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    9fda:	f88d 0008 	strb.w	r0, [sp, #8]
    9fde:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9fe2:	b178      	cbz	r0, a004 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    9fe4:	2c00      	cmp	r4, #0
    9fe6:	bf1c      	itt	ne
    9fe8:	2100      	movne	r1, #0
    9fea:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    9fee:	d0bc      	beq.n	9f6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    9ff0:	f3af 8000 	nop.w
    9ff4:	e7b9      	b.n	9f6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    9ff6:	486a      	ldr	r0, [pc, #424]	; (a1a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    9ff8:	2800      	cmp	r0, #0
    9ffa:	bf18      	it	ne
    9ffc:	f3af 8000 	nopne.w
    a000:	b662      	cpsie	i
    a002:	e7bb      	b.n	9f7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a004:	b124      	cbz	r4, a010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a006:	2100      	movs	r1, #0
    a008:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a00c:	f3af 8000 	nop.w
    a010:	980c      	ldr	r0, [sp, #48]	; 0x30
    a012:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a016:	2803      	cmp	r0, #3
    a018:	d17e      	bne.n	a118 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a01a:	9a00      	ldr	r2, [sp, #0]
    a01c:	990c      	ldr	r1, [sp, #48]	; 0x30
    a01e:	f892 0020 	ldrb.w	r0, [r2, #32]
    a022:	4288      	cmp	r0, r1
    a024:	bf14      	ite	ne
    a026:	f04f 0a00 	movne.w	sl, #0
    a02a:	f04f 0a01 	moveq.w	sl, #1
    a02e:	f102 0c20 	add.w	ip, r2, #32
    a032:	4683      	mov	fp, r0
    a034:	2220      	movs	r2, #32
    a036:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a03a:	e003      	b.n	a044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a03c:	4602      	mov	r2, r0
    a03e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a042:	7840      	ldrb	r0, [r0, #1]
    a044:	4288      	cmp	r0, r1
    a046:	d002      	beq.n	a04e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a048:	2820      	cmp	r0, #32
    a04a:	d00a      	beq.n	a062 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a04c:	e7f6      	b.n	a03c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a04e:	2820      	cmp	r0, #32
    a050:	d007      	beq.n	a062 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a052:	4583      	cmp	fp, r0
    a054:	d107      	bne.n	a066 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a056:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a05a:	7840      	ldrb	r0, [r0, #1]
    a05c:	f88c 0000 	strb.w	r0, [ip]
    a060:	e007      	b.n	a072 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a062:	4640      	mov	r0, r8
    a064:	e00c      	b.n	a080 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a066:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a06a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a06e:	7840      	ldrb	r0, [r0, #1]
    a070:	7048      	strb	r0, [r1, #1]
    a072:	b124      	cbz	r4, a07e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a074:	2100      	movs	r1, #0
    a076:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a07a:	f3af 8000 	nop.w
    a07e:	4638      	mov	r0, r7
    a080:	46c3      	mov	fp, r8
    a082:	ea10 0f0a 	tst.w	r0, sl
    a086:	bf18      	it	ne
    a088:	46bb      	movne	fp, r7
    a08a:	2800      	cmp	r0, #0
    a08c:	d04e      	beq.n	a12c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a08e:	b124      	cbz	r4, a09a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a090:	2100      	movs	r1, #0
    a092:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    a096:	f3af 8000 	nop.w
    a09a:	4632      	mov	r2, r6
    a09c:	2001      	movs	r0, #1
    a09e:	990c      	ldr	r1, [sp, #48]	; 0x30
    a0a0:	f7ff f95c 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    a0a4:	b124      	cbz	r4, a0b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a0a6:	2100      	movs	r1, #0
    a0a8:	f640 0001 	movw	r0, #2049	; 0x801
    a0ac:	f3af 8000 	nop.w
    a0b0:	483c      	ldr	r0, [pc, #240]	; (a1a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    a0b2:	2800      	cmp	r0, #0
    a0b4:	bf18      	it	ne
    a0b6:	f3af 8000 	nopne.w
    a0ba:	f3ef 8010 	mrs	r0, PRIMASK
    a0be:	b672      	cpsid	i
    a0c0:	9007      	str	r0, [sp, #28]
    a0c2:	b124      	cbz	r4, a0ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a0c4:	2100      	movs	r1, #0
    a0c6:	f640 0006 	movw	r0, #2054	; 0x806
    a0ca:	f3af 8000 	nop.w
    a0ce:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a0d2:	f88d 0008 	strb.w	r0, [sp, #8]
    a0d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a0da:	b138      	cbz	r0, a0ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a0dc:	2c00      	cmp	r4, #0
    a0de:	bf1c      	itt	ne
    a0e0:	2100      	movne	r1, #0
    a0e2:	f640 000a 	movwne	r0, #2058	; 0x80a
    a0e6:	f43f af40 	beq.w	9f6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a0ea:	e781      	b.n	9ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    a0ec:	f1bb 0f00 	cmp.w	fp, #0
    a0f0:	d009      	beq.n	a106 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a0f2:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a0f6:	2820      	cmp	r0, #32
    a0f8:	d105      	bne.n	a106 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a0fa:	4631      	mov	r1, r6
    a0fc:	2002      	movs	r0, #2
    a0fe:	f7ff f95f 	bl	93c0 <MPSL_IRQ_RADIO_Handler+0xf30>
    a102:	9006      	str	r0, [sp, #24]
    a104:	b1f8      	cbz	r0, a146 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    a106:	b124      	cbz	r4, a112 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    a108:	2100      	movs	r1, #0
    a10a:	f640 001e 	movw	r0, #2078	; 0x81e
    a10e:	f3af 8000 	nop.w
    a112:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a116:	e000      	b.n	a11a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    a118:	e008      	b.n	a12c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a11a:	ea27 0000 	bic.w	r0, r7, r0
    a11e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    a122:	20ff      	movs	r0, #255	; 0xff
    a124:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a128:	2001      	movs	r0, #1
    a12a:	9008      	str	r0, [sp, #32]
    a12c:	b124      	cbz	r4, a138 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    a12e:	2100      	movs	r1, #0
    a130:	f640 0027 	movw	r0, #2087	; 0x827
    a134:	f3af 8000 	nop.w
    a138:	9806      	ldr	r0, [sp, #24]
    a13a:	4e1b      	ldr	r6, [pc, #108]	; (a1a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    a13c:	2802      	cmp	r0, #2
    a13e:	d009      	beq.n	a154 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    a140:	2801      	cmp	r0, #1
    a142:	d010      	beq.n	a166 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    a144:	e014      	b.n	a170 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a146:	b19c      	cbz	r4, a170 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a148:	2100      	movs	r1, #0
    a14a:	f640 0019 	movw	r0, #2073	; 0x819
    a14e:	f3af 8000 	nop.w
    a152:	e7ec      	b.n	a12e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    a154:	f000 fd6e 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a158:	68a9      	ldr	r1, [r5, #8]
    a15a:	1a08      	subs	r0, r1, r0
    a15c:	f005 ffbb 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a160:	6871      	ldr	r1, [r6, #4]
    a162:	b921      	cbnz	r1, a16e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    a164:	e004      	b.n	a170 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a166:	6871      	ldr	r1, [r6, #4]
    a168:	f04f 30ff 	mov.w	r0, #4294967295
    a16c:	b101      	cbz	r1, a170 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a16e:	4788      	blx	r1
    a170:	9807      	ldr	r0, [sp, #28]
    a172:	b148      	cbz	r0, a188 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    a174:	b124      	cbz	r4, a180 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    a176:	2100      	movs	r1, #0
    a178:	f640 003c 	movw	r0, #2108	; 0x83c
    a17c:	f3af 8000 	nop.w
    a180:	9808      	ldr	r0, [sp, #32]
    a182:	b00d      	add	sp, #52	; 0x34
    a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a188:	4805      	ldr	r0, [pc, #20]	; (a1a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a18a:	2800      	cmp	r0, #0
    a18c:	bf18      	it	ne
    a18e:	f3af 8000 	nopne.w
    a192:	b662      	cpsie	i
    a194:	e7ee      	b.n	a174 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    a196:	0000      	.short	0x0000
    a198:	20001040 	.word	0x20001040
	...
    a1a8:	200002ec 	.word	0x200002ec

0000a1ac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    a1ac:	2820      	cmp	r0, #32
    a1ae:	bf24      	itt	cs
    a1b0:	2000      	movcs	r0, #0
    a1b2:	4770      	bxcs	lr
    a1b4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1b8:	4b03      	ldr	r3, [pc, #12]	; (a1c8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    a1ba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    a1be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a1c2:	6042      	str	r2, [r0, #4]
    a1c4:	2001      	movs	r0, #1
    a1c6:	4770      	bx	lr
    a1c8:	20000c40 	.word	0x20000c40

0000a1cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    a1cc:	b510      	push	{r4, lr}
    a1ce:	2820      	cmp	r0, #32
    a1d0:	d211      	bcs.n	a1f6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a1d2:	490e      	ldr	r1, [pc, #56]	; (a20c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    a1d4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    a1d8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    a1dc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    a1e0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    a1e4:	b13b      	cbz	r3, a1f6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a1e6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    a1ea:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    a1ee:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    a1f2:	2a01      	cmp	r2, #1
    a1f4:	d001      	beq.n	a1fa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    a1f6:	2000      	movs	r0, #0
    a1f8:	bd10      	pop	{r4, pc}
    a1fa:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    a1fe:	4601      	mov	r1, r0
    a200:	2000      	movs	r0, #0
    a202:	f7ff f8ab 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    a206:	2001      	movs	r0, #1
    a208:	bd10      	pop	{r4, pc}
    a20a:	0000      	.short	0x0000
    a20c:	20001040 	.word	0x20001040

0000a210 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    a210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a214:	4e86      	ldr	r6, [pc, #536]	; (a430 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    a216:	4680      	mov	r8, r0
    a218:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a21c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    a220:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    a224:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    a228:	2800      	cmp	r0, #0
    a22a:	d071      	beq.n	a310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a22c:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    a230:	4d80      	ldr	r5, [pc, #512]	; (a434 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    a232:	b125      	cbz	r5, a23e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    a234:	2100      	movs	r1, #0
    a236:	f640 30b9 	movw	r0, #3001	; 0xbb9
    a23a:	f3af 8000 	nop.w
    a23e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    a242:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a246:	2801      	cmp	r0, #1
    a248:	d018      	beq.n	a27c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    a24a:	b2c0      	uxtb	r0, r0
    a24c:	2804      	cmp	r0, #4
    a24e:	bf1c      	itt	ne
    a250:	2805      	cmpne	r0, #5
    a252:	2806      	cmpne	r0, #6
    a254:	d061      	beq.n	a31a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    a256:	b12d      	cbz	r5, a264 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    a258:	f04f 0100 	mov.w	r1, #0
    a25c:	f640 30c5 	movw	r0, #3013	; 0xbc5
    a260:	f3af 8000 	nop.w
    a264:	f006 f86d 	bl	10342 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a268:	b125      	cbz	r5, a274 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    a26a:	2100      	movs	r1, #0
    a26c:	f640 30c9 	movw	r0, #3017	; 0xbc9
    a270:	f3af 8000 	nop.w
    a274:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a278:	2801      	cmp	r0, #1
    a27a:	d1e6      	bne.n	a24a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    a27c:	2401      	movs	r4, #1
    a27e:	b125      	cbz	r5, a28a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    a280:	2100      	movs	r1, #0
    a282:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    a286:	f3af 8000 	nop.w
    a28a:	2c00      	cmp	r4, #0
    a28c:	d04b      	beq.n	a326 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    a28e:	2000      	movs	r0, #0
    a290:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    a294:	b125      	cbz	r5, a2a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    a296:	2100      	movs	r1, #0
    a298:	f640 30d5 	movw	r0, #3029	; 0xbd5
    a29c:	f3af 8000 	nop.w
    a2a0:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    a2a4:	2001      	movs	r0, #1
    a2a6:	ea20 090b 	bic.w	r9, r0, fp
    a2aa:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    a2ae:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    a2b2:	2240      	movs	r2, #64	; 0x40
    a2b4:	f006 f890 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2b8:	b125      	cbz	r5, a2c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    a2ba:	2100      	movs	r1, #0
    a2bc:	f240 505e 	movw	r0, #1374	; 0x55e
    a2c0:	f3af 8000 	nop.w
    a2c4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a2c8:	eb00 0a06 	add.w	sl, r0, r6
    a2cc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    a2d0:	4430      	add	r0, r6
    a2d2:	8c01      	ldrh	r1, [r0, #32]
    a2d4:	f8aa 1020 	strh.w	r1, [sl, #32]
    a2d8:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    a2dc:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    a2e0:	b125      	cbz	r5, a2ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    a2e2:	2100      	movs	r1, #0
    a2e4:	f240 5062 	movw	r0, #1378	; 0x562
    a2e8:	f3af 8000 	nop.w
    a2ec:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    a2f0:	f88d 0000 	strb.w	r0, [sp]
    a2f4:	f89d 0000 	ldrb.w	r0, [sp]
    a2f8:	b1e0      	cbz	r0, a334 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    a2fa:	2d00      	cmp	r5, #0
    a2fc:	bf1c      	itt	ne
    a2fe:	2100      	movne	r1, #0
    a300:	f640 30db 	movwne	r0, #3035	; 0xbdb
    a304:	d0bb      	beq.n	a27e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a306:	bf00      	nop
    a308:	f3af 8000 	nop.w
    a30c:	e7b7      	b.n	a27e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a30e:	e7ff      	b.n	a310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a310:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    a314:	2070      	movs	r0, #112	; 0x70
    a316:	f001 fbdd 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a31a:	464a      	mov	r2, r9
    a31c:	4641      	mov	r1, r8
    a31e:	2001      	movs	r0, #1
    a320:	f7ff f81c 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    a324:	e7a0      	b.n	a268 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    a326:	4844      	ldr	r0, [pc, #272]	; (a438 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    a328:	2800      	cmp	r0, #0
    a32a:	bf18      	it	ne
    a32c:	f3af 8000 	nopne.w
    a330:	b662      	cpsie	i
    a332:	e7ac      	b.n	a28e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    a334:	b125      	cbz	r5, a340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    a336:	2100      	movs	r1, #0
    a338:	f640 30df 	movw	r0, #3039	; 0xbdf
    a33c:	f3af 8000 	nop.w
    a340:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    a344:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    a348:	4640      	mov	r0, r8
    a34a:	461c      	mov	r4, r3
    a34c:	f04f 0b20 	mov.w	fp, #32
    a350:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    a354:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    a358:	e004      	b.n	a364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    a35a:	46a3      	mov	fp, r4
    a35c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    a360:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a364:	4284      	cmp	r4, r0
    a366:	d002      	beq.n	a36e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    a368:	2c20      	cmp	r4, #32
    a36a:	d02b      	beq.n	a3c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a36c:	e7f5      	b.n	a35a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    a36e:	2c20      	cmp	r4, #32
    a370:	d028      	beq.n	a3c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a372:	42a3      	cmp	r3, r4
    a374:	d104      	bne.n	a380 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    a376:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    a37a:	7840      	ldrb	r0, [r0, #1]
    a37c:	7008      	strb	r0, [r1, #0]
    a37e:	e005      	b.n	a38c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    a380:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    a384:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    a388:	7840      	ldrb	r0, [r0, #1]
    a38a:	7048      	strb	r0, [r1, #1]
    a38c:	f1ba 0f00 	cmp.w	sl, #0
    a390:	d011      	beq.n	a3b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    a392:	b125      	cbz	r5, a39e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    a394:	2100      	movs	r1, #0
    a396:	f240 40c1 	movw	r0, #1217	; 0x4c1
    a39a:	f3af 8000 	nop.w
    a39e:	f89a 0000 	ldrb.w	r0, [sl]
    a3a2:	42a0      	cmp	r0, r4
    a3a4:	d107      	bne.n	a3b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    a3a6:	b125      	cbz	r5, a3b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    a3a8:	2100      	movs	r1, #0
    a3aa:	f240 40c4 	movw	r0, #1220	; 0x4c4
    a3ae:	f3af 8000 	nop.w
    a3b2:	f88a b000 	strb.w	fp, [sl]
    a3b6:	b15d      	cbz	r5, a3d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    a3b8:	2100      	movs	r1, #0
    a3ba:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a3be:	f3af 8000 	nop.w
    a3c2:	e000      	b.n	a3c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    a3c4:	b125      	cbz	r5, a3d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    a3c6:	2100      	movs	r1, #0
    a3c8:	f640 30e3 	movw	r0, #3043	; 0xbe3
    a3cc:	f3af 8000 	nop.w
    a3d0:	481a      	ldr	r0, [pc, #104]	; (a43c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    a3d2:	2800      	cmp	r0, #0
    a3d4:	bf18      	it	ne
    a3d6:	f3af 8000 	nopne.w
    a3da:	f3ef 8410 	mrs	r4, PRIMASK
    a3de:	b672      	cpsid	i
    a3e0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    a3e4:	f88d 0000 	strb.w	r0, [sp]
    a3e8:	f89d 0000 	ldrb.w	r0, [sp]
    a3ec:	b138      	cbz	r0, a3fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    a3ee:	2d00      	cmp	r5, #0
    a3f0:	bf1c      	itt	ne
    a3f2:	2100      	movne	r1, #0
    a3f4:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    a3f8:	f43f af41 	beq.w	a27e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a3fc:	e784      	b.n	a308 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    a3fe:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    a402:	20ff      	movs	r0, #255	; 0xff
    a404:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    a408:	b154      	cbz	r4, a420 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    a40a:	2d00      	cmp	r5, #0
    a40c:	bf08      	it	eq
    a40e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a412:	2100      	movs	r1, #0
    a414:	f640 30f6 	movw	r0, #3062	; 0xbf6
    a418:	f3af 8000 	nop.w
    a41c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a420:	4805      	ldr	r0, [pc, #20]	; (a438 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    a422:	2800      	cmp	r0, #0
    a424:	bf18      	it	ne
    a426:	f3af 8000 	nopne.w
    a42a:	b662      	cpsie	i
    a42c:	e7ed      	b.n	a40a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    a42e:	0000      	.short	0x0000
    a430:	20001040 	.word	0x20001040
	...

0000a440 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    a440:	b570      	push	{r4, r5, r6, lr}
    a442:	460d      	mov	r5, r1
    a444:	4606      	mov	r6, r0
    a446:	f001 fabb 	bl	b9c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    a44a:	480f      	ldr	r0, [pc, #60]	; (a488 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    a44c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    a450:	2400      	movs	r4, #0
    a452:	3880      	subs	r0, #128	; 0x80
    a454:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    a458:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    a45c:	b129      	cbz	r1, a46a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    a45e:	1c61      	adds	r1, r4, #1
    a460:	b2cc      	uxtb	r4, r1
    a462:	2c20      	cmp	r4, #32
    a464:	d3f8      	bcc.n	a458 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    a466:	2020      	movs	r0, #32
    a468:	bd70      	pop	{r4, r5, r6, pc}
    a46a:	4808      	ldr	r0, [pc, #32]	; (a48c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    a46c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a470:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    a474:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a478:	4621      	mov	r1, r4
    a47a:	6045      	str	r5, [r0, #4]
    a47c:	2001      	movs	r0, #1
    a47e:	f7fe ff6d 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    a482:	4620      	mov	r0, r4
    a484:	bd70      	pop	{r4, r5, r6, pc}
    a486:	0000      	.short	0x0000
    a488:	20001040 	.word	0x20001040
    a48c:	20000c40 	.word	0x20000c40

0000a490 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a494:	b083      	sub	sp, #12
    a496:	f000 fbcd 	bl	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a49a:	4605      	mov	r5, r0
    a49c:	f000 feb0 	bl	b200 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    a4a0:	4c84      	ldr	r4, [pc, #528]	; (a6b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    a4a2:	6860      	ldr	r0, [r4, #4]
    a4a4:	f1b0 3fff 	cmp.w	r0, #4294967295
    a4a8:	bf1c      	itt	ne
    a4aa:	f04f 30ff 	movne.w	r0, #4294967295
    a4ae:	6060      	strne	r0, [r4, #4]
    a4b0:	7fa0      	ldrb	r0, [r4, #30]
    a4b2:	f8df 9204 	ldr.w	r9, [pc, #516]	; a6b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    a4b6:	b990      	cbnz	r0, a4de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    a4b8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    a4bc:	1a40      	subs	r0, r0, r1
    a4be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a4c2:	f44f 710c 	mov.w	r1, #560	; 0x230
    a4c6:	f001 fa67 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a4ca:	68e1      	ldr	r1, [r4, #12]
    a4cc:	4408      	add	r0, r1
    a4ce:	1a28      	subs	r0, r5, r0
    a4d0:	0200      	lsls	r0, r0, #8
    a4d2:	17c1      	asrs	r1, r0, #31
    a4d4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    a4d8:	1200      	asrs	r0, r0, #8
    a4da:	0fc0      	lsrs	r0, r0, #31
    a4dc:	d012      	beq.n	a504 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    a4de:	7e60      	ldrb	r0, [r4, #25]
    a4e0:	b320      	cbz	r0, a52c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    a4e2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a4e6:	f88d 0000 	strb.w	r0, [sp]
    a4ea:	f89d 0000 	ldrb.w	r0, [sp]
    a4ee:	b1e8      	cbz	r0, a52c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    a4f0:	f000 fce2 	bl	aeb8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    a4f4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    a4f8:	b1f0      	cbz	r0, a538 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    a4fa:	f240 31f5 	movw	r1, #1013	; 0x3f5
    a4fe:	2070      	movs	r0, #112	; 0x70
    a500:	f001 fae8 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a504:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a508:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a50c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a510:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    a514:	6840      	ldr	r0, [r0, #4]
    a516:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a51a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    a51e:	2108      	movs	r1, #8
    a520:	4790      	blx	r2
    a522:	f240 31dd 	movw	r1, #989	; 0x3dd
    a526:	2070      	movs	r0, #112	; 0x70
    a528:	f001 fad4 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a52c:	1ce8      	adds	r0, r5, #3
    a52e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a532:	f000 fba5 	bl	ac80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    a536:	e7dd      	b.n	a4f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    a538:	2001      	movs	r0, #1
    a53a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    a53e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a542:	2820      	cmp	r0, #32
    a544:	d021      	beq.n	a58a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    a546:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    a54a:	2020      	movs	r0, #32
    a54c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    a550:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    a554:	2000      	movs	r0, #0
    a556:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    a55a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a55e:	6020      	str	r0, [r4, #0]
    a560:	f000 ff28 	bl	b3b4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    a564:	7720      	strb	r0, [r4, #28]
    a566:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    a56a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a56e:	1907      	adds	r7, r0, r4
    a570:	f897 0020 	ldrb.w	r0, [r7, #32]
    a574:	2820      	cmp	r0, #32
    a576:	d058      	beq.n	a62a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    a578:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a57c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    a580:	f899 001a 	ldrb.w	r0, [r9, #26]
    a584:	2801      	cmp	r0, #1
    a586:	d005      	beq.n	a594 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    a588:	e04f      	b.n	a62a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    a58a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    a58e:	2070      	movs	r0, #112	; 0x70
    a590:	f001 faa0 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a594:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    a598:	aa01      	add	r2, sp, #4
    a59a:	4669      	mov	r1, sp
    a59c:	4658      	mov	r0, fp
    a59e:	f000 f9df 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a5a2:	f000 ff01 	bl	b3a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a5a6:	f000 f9bf 	bl	a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a5aa:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a5ae:	2820      	cmp	r0, #32
    a5b0:	d004      	beq.n	a5bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    a5b2:	68e0      	ldr	r0, [r4, #12]
    a5b4:	1d40      	adds	r0, r0, #5
    a5b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a5ba:	e01d      	b.n	a5f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    a5bc:	f105 0a09 	add.w	sl, r5, #9
    a5c0:	f1bb 0f00 	cmp.w	fp, #0
    a5c4:	d016      	beq.n	a5f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    a5c6:	f001 fa0d 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a5ca:	b998      	cbnz	r0, a5f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    a5cc:	f001 f8c4 	bl	b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a5d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a5d4:	bf08      	it	eq
    a5d6:	200d      	moveq	r0, #13
    a5d8:	d00b      	beq.n	a5f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    a5da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a5de:	3856      	subs	r0, #86	; 0x56
    a5e0:	bf08      	it	eq
    a5e2:	201c      	moveq	r0, #28
    a5e4:	d005      	beq.n	a5f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    a5e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a5ea:	389f      	subs	r0, #159	; 0x9f
    a5ec:	bf14      	ite	ne
    a5ee:	2000      	movne	r0, #0
    a5f0:	2032      	moveq	r0, #50	; 0x32
    a5f2:	4482      	add	sl, r0
    a5f4:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    a5f8:	f8d9 2008 	ldr.w	r2, [r9, #8]
    a5fc:	1a81      	subs	r1, r0, r2
    a5fe:	0209      	lsls	r1, r1, #8
    a600:	17cb      	asrs	r3, r1, #31
    a602:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    a606:	1209      	asrs	r1, r1, #8
    a608:	2900      	cmp	r1, #0
    a60a:	dc0e      	bgt.n	a62a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    a60c:	f109 0308 	add.w	r3, r9, #8
    a610:	4282      	cmp	r2, r0
    a612:	d202      	bcs.n	a61a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    a614:	6899      	ldr	r1, [r3, #8]
    a616:	1e49      	subs	r1, r1, #1
    a618:	6099      	str	r1, [r3, #8]
    a61a:	e9d3 2100 	ldrd	r2, r1, [r3]
    a61e:	1a89      	subs	r1, r1, r2
    a620:	6018      	str	r0, [r3, #0]
    a622:	4408      	add	r0, r1
    a624:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a628:	6058      	str	r0, [r3, #4]
    a62a:	4631      	mov	r1, r6
    a62c:	2001      	movs	r0, #1
    a62e:	f7fe fec7 	bl	93c0 <MPSL_IRQ_RADIO_Handler+0xf30>
    a632:	ea5f 0900 	movs.w	r9, r0
    a636:	d0f8      	beq.n	a62a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    a638:	4820      	ldr	r0, [pc, #128]	; (a6bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    a63a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a63e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    a642:	2802      	cmp	r0, #2
    a644:	d104      	bne.n	a650 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    a646:	4632      	mov	r2, r6
    a648:	4641      	mov	r1, r8
    a64a:	2006      	movs	r0, #6
    a64c:	f7fe fe86 	bl	935c <MPSL_IRQ_RADIO_Handler+0xecc>
    a650:	20ff      	movs	r0, #255	; 0xff
    a652:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    a656:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    a65a:	4e19      	ldr	r6, [pc, #100]	; (a6c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    a65c:	2820      	cmp	r0, #32
    a65e:	bf1c      	itt	ne
    a660:	7870      	ldrbne	r0, [r6, #1]
    a662:	f001 fb0b 	blne	bc7c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a666:	7f20      	ldrb	r0, [r4, #28]
    a668:	b120      	cbz	r0, a674 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    a66a:	f000 fe7f 	bl	b36c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a66e:	2000      	movs	r0, #0
    a670:	7720      	strb	r0, [r4, #28]
    a672:	7760      	strb	r0, [r4, #29]
    a674:	f1b9 0f02 	cmp.w	r9, #2
    a678:	d011      	beq.n	a69e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    a67a:	f1b9 0f01 	cmp.w	r9, #1
    a67e:	bf1c      	itt	ne
    a680:	b003      	addne	sp, #12
    a682:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a686:	f04f 30ff 	mov.w	r0, #4294967295
    a68a:	6871      	ldr	r1, [r6, #4]
    a68c:	2900      	cmp	r1, #0
    a68e:	bf04      	itt	eq
    a690:	b003      	addeq	sp, #12
    a692:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a696:	b003      	add	sp, #12
    a698:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a69c:	4708      	bx	r1
    a69e:	68a0      	ldr	r0, [r4, #8]
    a6a0:	1b40      	subs	r0, r0, r5
    a6a2:	f005 fd18 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a6a6:	6871      	ldr	r1, [r6, #4]
    a6a8:	2900      	cmp	r1, #0
    a6aa:	d1f4      	bne.n	a696 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    a6ac:	b003      	add	sp, #12
    a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6b2:	0000      	.short	0x0000
    a6b4:	20001040 	.word	0x20001040
    a6b8:	20000c40 	.word	0x20000c40
    a6bc:	20000fc0 	.word	0x20000fc0
    a6c0:	200002ec 	.word	0x200002ec

0000a6c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    a6c4:	b570      	push	{r4, r5, r6, lr}
    a6c6:	4c42      	ldr	r4, [pc, #264]	; (a7d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    a6c8:	4605      	mov	r5, r0
    a6ca:	b082      	sub	sp, #8
    a6cc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6d0:	2820      	cmp	r0, #32
    a6d2:	d008      	beq.n	a6e6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    a6d4:	6860      	ldr	r0, [r4, #4]
    a6d6:	f1b0 3fff 	cmp.w	r0, #4294967295
    a6da:	d009      	beq.n	a6f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    a6dc:	f640 21e4 	movw	r1, #2788	; 0xae4
    a6e0:	2070      	movs	r0, #112	; 0x70
    a6e2:	f001 f9f7 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a6e6:	f640 21e3 	movw	r1, #2787	; 0xae3
    a6ea:	2070      	movs	r0, #112	; 0x70
    a6ec:	f001 f9f2 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a6f0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6f4:	4937      	ldr	r1, [pc, #220]	; (a7d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    a6f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a6fa:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    a6fe:	68b0      	ldr	r0, [r6, #8]
    a700:	f005 fce9 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a704:	4602      	mov	r2, r0
    a706:	8af0      	ldrh	r0, [r6, #22]
    a708:	7d31      	ldrb	r1, [r6, #20]
    a70a:	4b33      	ldr	r3, [pc, #204]	; (a7d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    a70c:	4408      	add	r0, r1
    a70e:	1c40      	adds	r0, r0, #1
    a710:	1811      	adds	r1, r2, r0
    a712:	429a      	cmp	r2, r3
    a714:	d817      	bhi.n	a746 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    a716:	4a31      	ldr	r2, [pc, #196]	; (a7dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    a718:	4290      	cmp	r0, r2
    a71a:	dc1b      	bgt.n	a754 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    a71c:	f1c2 0c00 	rsb	ip, r2, #0
    a720:	4560      	cmp	r0, ip
    a722:	db1e      	blt.n	a762 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    a724:	0056      	lsls	r6, r2, #1
    a726:	428e      	cmp	r6, r1
    a728:	bfdc      	itt	le
    a72a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    a72e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    a732:	dd05      	ble.n	a740 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    a734:	2900      	cmp	r1, #0
    a736:	bfbc      	itt	lt
    a738:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    a73c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    a740:	1948      	adds	r0, r1, r5
    a742:	4299      	cmp	r1, r3
    a744:	d904      	bls.n	a750 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    a746:	f240 519e 	movw	r1, #1438	; 0x59e
    a74a:	2070      	movs	r0, #112	; 0x70
    a74c:	f001 f9c2 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a750:	4295      	cmp	r5, r2
    a752:	dd04      	ble.n	a75e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    a754:	f240 519f 	movw	r1, #1439	; 0x59f
    a758:	2070      	movs	r0, #112	; 0x70
    a75a:	f001 f9bb 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a75e:	4565      	cmp	r5, ip
    a760:	da04      	bge.n	a76c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    a762:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    a766:	2070      	movs	r0, #112	; 0x70
    a768:	f001 f9b4 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a76c:	4286      	cmp	r6, r0
    a76e:	bfdc      	itt	le
    a770:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    a774:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    a778:	dd05      	ble.n	a786 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    a77a:	2800      	cmp	r0, #0
    a77c:	bfbc      	itt	lt
    a77e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    a782:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    a786:	aa01      	add	r2, sp, #4
    a788:	4669      	mov	r1, sp
    a78a:	f000 f8e9 	bl	a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a78e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a792:	280f      	cmp	r0, #15
    a794:	bf8c      	ite	hi
    a796:	2001      	movhi	r0, #1
    a798:	2000      	movls	r0, #0
    a79a:	9900      	ldr	r1, [sp, #0]
    a79c:	4408      	add	r0, r1
    a79e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    a7a2:	6061      	str	r1, [r4, #4]
    a7a4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a7a8:	f88d 0000 	strb.w	r0, [sp]
    a7ac:	f89d 0000 	ldrb.w	r0, [sp]
    a7b0:	2800      	cmp	r0, #0
    a7b2:	bf04      	itt	eq
    a7b4:	b002      	addeq	sp, #8
    a7b6:	bd70      	popeq	{r4, r5, r6, pc}
    a7b8:	2005      	movs	r0, #5
    a7ba:	f000 fbfb 	bl	afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a7be:	2800      	cmp	r0, #0
    a7c0:	bf1c      	itt	ne
    a7c2:	b002      	addne	sp, #8
    a7c4:	bd70      	popne	{r4, r5, r6, pc}
    a7c6:	f640 21eb 	movw	r1, #2795	; 0xaeb
    a7ca:	2070      	movs	r0, #112	; 0x70
    a7cc:	f001 f982 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a7d0:	20001040 	.word	0x20001040
    a7d4:	20000c40 	.word	0x20000c40
    a7d8:	1e847fff 	.word	0x1e847fff
    a7dc:	0f424000 	.word	0x0f424000

0000a7e0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    a7e0:	b570      	push	{r4, r5, r6, lr}
    a7e2:	4c1c      	ldr	r4, [pc, #112]	; (a854 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    a7e4:	2120      	movs	r1, #32
    a7e6:	f884 1020 	strb.w	r1, [r4, #32]
    a7ea:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    a7ee:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    a7f2:	2000      	movs	r0, #0
    a7f4:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    a7f8:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    a7fc:	1e42      	subs	r2, r0, #1
    a7fe:	e9c4 0200 	strd	r0, r2, [r4]
    a802:	77a0      	strb	r0, [r4, #30]
    a804:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    a808:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a80c:	7720      	strb	r0, [r4, #28]
    a80e:	7760      	strb	r0, [r4, #29]
    a810:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    a814:	62e2      	str	r2, [r4, #44]	; 0x2c
    a816:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a81a:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    a81e:	2210      	movs	r2, #16
    a820:	7088      	strb	r0, [r1, #2]
    a822:	f801 0f04 	strb.w	r0, [r1, #4]!
    a826:	1e52      	subs	r2, r2, #1
    a828:	d1fa      	bne.n	a820 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    a82a:	f000 fdcd 	bl	b3c8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    a82e:	4d0a      	ldr	r5, [pc, #40]	; (a858 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    a830:	2601      	movs	r6, #1
    a832:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    a836:	20ff      	movs	r0, #255	; 0xff
    a838:	7028      	strb	r0, [r5, #0]
    a83a:	4808      	ldr	r0, [pc, #32]	; (a85c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    a83c:	f001 fa00 	bl	bc40 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    a840:	7068      	strb	r0, [r5, #1]
    a842:	f001 fa6b 	bl	bd1c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    a846:	60a8      	str	r0, [r5, #8]
    a848:	f000 fd48 	bl	b2dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    a84c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    a850:	bd70      	pop	{r4, r5, r6, pc}
    a852:	0000      	.short	0x0000
    a854:	20001040 	.word	0x20001040
    a858:	200002ec 	.word	0x200002ec
    a85c:	00009285 	.word	0x00009285

0000a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    a860:	b500      	push	{lr}
    a862:	b083      	sub	sp, #12
    a864:	4668      	mov	r0, sp
    a866:	f000 f9eb 	bl	ac40 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a86a:	9800      	ldr	r0, [sp, #0]
    a86c:	f005 fc33 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a870:	9a01      	ldr	r2, [sp, #4]
    a872:	4b03      	ldr	r3, [pc, #12]	; (a880 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    a874:	2100      	movs	r1, #0
    a876:	fbe2 0103 	umlal	r0, r1, r2, r3
    a87a:	b003      	add	sp, #12
    a87c:	bd00      	pop	{pc}
    a87e:	0000      	.short	0x0000
    a880:	1e848000 	.word	0x1e848000

0000a884 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    a884:	b570      	push	{r4, r5, r6, lr}
    a886:	4606      	mov	r6, r0
    a888:	b082      	sub	sp, #8
    a88a:	461d      	mov	r5, r3
    a88c:	4610      	mov	r0, r2
    a88e:	f005 fc22 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a892:	4604      	mov	r4, r0
    a894:	4668      	mov	r0, sp
    a896:	f000 f9d3 	bl	ac40 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a89a:	4920      	ldr	r1, [pc, #128]	; (a91c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    a89c:	9801      	ldr	r0, [sp, #4]
    a89e:	fba0 0201 	umull	r0, r2, r0, r1
    a8a2:	1a30      	subs	r0, r6, r0
    a8a4:	bf44      	itt	mi
    a8a6:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    a8aa:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    a8ae:	d504      	bpl.n	a8ba <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    a8b0:	f640 410b 	movw	r1, #3083	; 0xc0b
    a8b4:	2070      	movs	r0, #112	; 0x70
    a8b6:	f001 f90d 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a8ba:	4288      	cmp	r0, r1
    a8bc:	db04      	blt.n	a8c8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    a8be:	f640 410c 	movw	r1, #3084	; 0xc0c
    a8c2:	2070      	movs	r0, #112	; 0x70
    a8c4:	f001 f906 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a8c8:	4a15      	ldr	r2, [pc, #84]	; (a920 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    a8ca:	1a21      	subs	r1, r4, r0
    a8cc:	2300      	movs	r3, #0
    a8ce:	1a8a      	subs	r2, r1, r2
    a8d0:	f173 0200 	sbcs.w	r2, r3, #0
    a8d4:	d318      	bcc.n	a908 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    a8d6:	f8df c048 	ldr.w	ip, [pc, #72]	; a920 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    a8da:	1b02      	subs	r2, r0, r4
    a8dc:	ebb2 0c0c 	subs.w	ip, r2, ip
    a8e0:	f173 0300 	sbcs.w	r3, r3, #0
    a8e4:	d310      	bcc.n	a908 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    a8e6:	4b0f      	ldr	r3, [pc, #60]	; (a924 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    a8e8:	428b      	cmp	r3, r1
    a8ea:	bf3e      	ittt	cc
    a8ec:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    a8f0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    a8f4:	1901      	addcc	r1, r0, r4
    a8f6:	d307      	bcc.n	a908 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    a8f8:	4293      	cmp	r3, r2
    a8fa:	d20a      	bcs.n	a912 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    a8fc:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    a900:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    a904:	4408      	add	r0, r1
    a906:	4241      	negs	r1, r0
    a908:	f101 000f 	add.w	r0, r1, #15
    a90c:	b002      	add	sp, #8
    a90e:	1a28      	subs	r0, r5, r0
    a910:	bd70      	pop	{r4, r5, r6, pc}
    a912:	f640 3105 	movw	r1, #2821	; 0xb05
    a916:	2070      	movs	r0, #112	; 0x70
    a918:	f001 f8dc 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a91c:	1e848000 	.word	0x1e848000
    a920:	0f424000 	.word	0x0f424000
    a924:	1e847fff 	.word	0x1e847fff

0000a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    a928:	0b41      	lsrs	r1, r0, #13
    a92a:	f248 6237 	movw	r2, #34359	; 0x8637
    a92e:	4351      	muls	r1, r2
    a930:	0c0a      	lsrs	r2, r1, #16
    a932:	4b09      	ldr	r3, [pc, #36]	; (a958 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    a934:	0251      	lsls	r1, r2, #9
    a936:	fb02 0203 	mla	r2, r2, r3, r0
    a93a:	4808      	ldr	r0, [pc, #32]	; (a95c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    a93c:	4350      	muls	r0, r2
    a93e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    a942:	306e      	adds	r0, #110	; 0x6e
    a944:	0d40      	lsrs	r0, r0, #21
    a946:	425b      	negs	r3, r3
    a948:	fb10 f303 	smulbb	r3, r0, r3
    a94c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    a950:	bf88      	it	hi
    a952:	1c49      	addhi	r1, r1, #1
    a954:	4408      	add	r0, r1
    a956:	4770      	bx	lr
    a958:	ffffc2f7 	.word	0xffffc2f7
    a95c:	00010c6f 	.word	0x00010c6f

0000a960 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    a960:	0b43      	lsrs	r3, r0, #13
    a962:	f248 6c37 	movw	ip, #34359	; 0x8637
    a966:	fb03 f30c 	mul.w	r3, r3, ip
    a96a:	b430      	push	{r4, r5}
    a96c:	0c1b      	lsrs	r3, r3, #16
    a96e:	f8df c044 	ldr.w	ip, [pc, #68]	; a9b4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    a972:	025c      	lsls	r4, r3, #9
    a974:	fb03 030c 	mla	r3, r3, ip, r0
    a978:	480f      	ldr	r0, [pc, #60]	; (a9b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    a97a:	4358      	muls	r0, r3
    a97c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    a980:	eb04 000c 	add.w	r0, r4, ip
    a984:	f643 5409 	movw	r4, #15625	; 0x3d09
    a988:	fb1c f404 	smulbb	r4, ip, r4
    a98c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    a990:	f643 5508 	movw	r5, #15624	; 0x3d08
    a994:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    a998:	442c      	add	r4, r5
    a99a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    a99e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    a9a2:	bf84      	itt	hi
    a9a4:	f04f 0c00 	movhi.w	ip, #0
    a9a8:	1c40      	addhi	r0, r0, #1
    a9aa:	6008      	str	r0, [r1, #0]
    a9ac:	f882 c000 	strb.w	ip, [r2]
    a9b0:	bc30      	pop	{r4, r5}
    a9b2:	4770      	bx	lr
    a9b4:	ffffc2f7 	.word	0xffffc2f7
    a9b8:	00010c6f 	.word	0x00010c6f

0000a9bc <MPSL_IRQ_RTC0_Handler>:
    a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9c0:	4d3b      	ldr	r5, [pc, #236]	; (aab0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    a9c2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    a9c6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; aab4 <MPSL_IRQ_RTC0_Handler+0xf8>
    a9ca:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    a9ce:	f44f 6600 	mov.w	r6, #2048	; 0x800
    a9d2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    a9d6:	f04f 0400 	mov.w	r4, #0
    a9da:	d019      	beq.n	aa10 <MPSL_IRQ_RTC0_Handler+0x54>
    a9dc:	4836      	ldr	r0, [pc, #216]	; (aab8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    a9de:	6800      	ldr	r0, [r0, #0]
    a9e0:	b1b0      	cbz	r0, aa10 <MPSL_IRQ_RTC0_Handler+0x54>
    a9e2:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    a9e6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    a9ea:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    a9ee:	f8d8 1000 	ldr.w	r1, [r8]
    a9f2:	1a40      	subs	r0, r0, r1
    a9f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a9f8:	2802      	cmp	r0, #2
    a9fa:	d302      	bcc.n	aa02 <MPSL_IRQ_RTC0_Handler+0x46>
    a9fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    aa00:	d906      	bls.n	aa10 <MPSL_IRQ_RTC0_Handler+0x54>
    aa02:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    aa06:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    aa0a:	2004      	movs	r0, #4
    aa0c:	f7fe fe98 	bl	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    aa10:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    aa14:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    aa18:	d01a      	beq.n	aa50 <MPSL_IRQ_RTC0_Handler+0x94>
    aa1a:	4828      	ldr	r0, [pc, #160]	; (aabc <MPSL_IRQ_RTC0_Handler+0x100>)
    aa1c:	6800      	ldr	r0, [r0, #0]
    aa1e:	b1b8      	cbz	r0, aa50 <MPSL_IRQ_RTC0_Handler+0x94>
    aa20:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    aa24:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    aa28:	4825      	ldr	r0, [pc, #148]	; (aac0 <MPSL_IRQ_RTC0_Handler+0x104>)
    aa2a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    aa2e:	f8d8 1000 	ldr.w	r1, [r8]
    aa32:	1a40      	subs	r0, r0, r1
    aa34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aa38:	2802      	cmp	r0, #2
    aa3a:	d302      	bcc.n	aa42 <MPSL_IRQ_RTC0_Handler+0x86>
    aa3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    aa40:	d906      	bls.n	aa50 <MPSL_IRQ_RTC0_Handler+0x94>
    aa42:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    aa46:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    aa4a:	2005      	movs	r0, #5
    aa4c:	f7fe fe78 	bl	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    aa50:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    aa54:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    aa58:	d01a      	beq.n	aa90 <MPSL_IRQ_RTC0_Handler+0xd4>
    aa5a:	481a      	ldr	r0, [pc, #104]	; (aac4 <MPSL_IRQ_RTC0_Handler+0x108>)
    aa5c:	6800      	ldr	r0, [r0, #0]
    aa5e:	b1b8      	cbz	r0, aa90 <MPSL_IRQ_RTC0_Handler+0xd4>
    aa60:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    aa64:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    aa68:	4817      	ldr	r0, [pc, #92]	; (aac8 <MPSL_IRQ_RTC0_Handler+0x10c>)
    aa6a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    aa6e:	f8d8 1000 	ldr.w	r1, [r8]
    aa72:	1a40      	subs	r0, r0, r1
    aa74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aa78:	2802      	cmp	r0, #2
    aa7a:	d302      	bcc.n	aa82 <MPSL_IRQ_RTC0_Handler+0xc6>
    aa7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    aa80:	d906      	bls.n	aa90 <MPSL_IRQ_RTC0_Handler+0xd4>
    aa82:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    aa86:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    aa8a:	2006      	movs	r0, #6
    aa8c:	f7fe fe58 	bl	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    aa90:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    aa94:	2800      	cmp	r0, #0
    aa96:	bf08      	it	eq
    aa98:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa9c:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    aaa0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    aaa4:	4809      	ldr	r0, [pc, #36]	; (aacc <MPSL_IRQ_RTC0_Handler+0x110>)
    aaa6:	68c1      	ldr	r1, [r0, #12]
    aaa8:	1c49      	adds	r1, r1, #1
    aaaa:	60c1      	str	r1, [r0, #12]
    aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aab0:	4000b000 	.word	0x4000b000
    aab4:	4000b504 	.word	0x4000b504
    aab8:	4000b140 	.word	0x4000b140
    aabc:	4000b144 	.word	0x4000b144
    aac0:	4000b004 	.word	0x4000b004
    aac4:	4000b148 	.word	0x4000b148
    aac8:	4000b008 	.word	0x4000b008
    aacc:	200002f8 	.word	0x200002f8

0000aad0 <MPSL_IRQ_TIMER0_Handler>:
    aad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aad4:	4d38      	ldr	r5, [pc, #224]	; (abb8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    aad6:	7828      	ldrb	r0, [r5, #0]
    aad8:	2804      	cmp	r0, #4
    aada:	d068      	beq.n	abae <MPSL_IRQ_TIMER0_Handler+0xde>
    aadc:	1ca8      	adds	r0, r5, #2
    aade:	2201      	movs	r2, #1
    aae0:	7801      	ldrb	r1, [r0, #0]
    aae2:	b159      	cbz	r1, aafc <MPSL_IRQ_TIMER0_Handler+0x2c>
    aae4:	2901      	cmp	r1, #1
    aae6:	bf08      	it	eq
    aae8:	706a      	strbeq	r2, [r5, #1]
    aaea:	d002      	beq.n	aaf2 <MPSL_IRQ_TIMER0_Handler+0x22>
    aaec:	7869      	ldrb	r1, [r5, #1]
    aaee:	2900      	cmp	r1, #0
    aaf0:	d058      	beq.n	aba4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    aaf2:	2102      	movs	r1, #2
    aaf4:	7001      	strb	r1, [r0, #0]
    aaf6:	7840      	ldrb	r0, [r0, #1]
    aaf8:	f000 fb12 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    aafc:	4c2f      	ldr	r4, [pc, #188]	; (abbc <MPSL_IRQ_TIMER0_Handler+0xec>)
    aafe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ab02:	f04f 0800 	mov.w	r8, #0
    ab06:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    ab0a:	f44f 7780 	mov.w	r7, #256	; 0x100
    ab0e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    ab12:	d00a      	beq.n	ab2a <MPSL_IRQ_TIMER0_Handler+0x5a>
    ab14:	482a      	ldr	r0, [pc, #168]	; (abc0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    ab16:	6800      	ldr	r0, [r0, #0]
    ab18:	b138      	cbz	r0, ab2a <MPSL_IRQ_TIMER0_Handler+0x5a>
    ab1a:	2003      	movs	r0, #3
    ab1c:	f000 fb00 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    ab20:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    ab24:	2003      	movs	r0, #3
    ab26:	f7fe fe0b 	bl	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    ab2a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ab2e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    ab32:	d00a      	beq.n	ab4a <MPSL_IRQ_TIMER0_Handler+0x7a>
    ab34:	4823      	ldr	r0, [pc, #140]	; (abc4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    ab36:	6800      	ldr	r0, [r0, #0]
    ab38:	b138      	cbz	r0, ab4a <MPSL_IRQ_TIMER0_Handler+0x7a>
    ab3a:	2002      	movs	r0, #2
    ab3c:	f000 faf0 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    ab40:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    ab44:	2002      	movs	r0, #2
    ab46:	f7fe fdfb 	bl	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    ab4a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ab4e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    ab52:	d00a      	beq.n	ab6a <MPSL_IRQ_TIMER0_Handler+0x9a>
    ab54:	481c      	ldr	r0, [pc, #112]	; (abc8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    ab56:	6800      	ldr	r0, [r0, #0]
    ab58:	b138      	cbz	r0, ab6a <MPSL_IRQ_TIMER0_Handler+0x9a>
    ab5a:	2001      	movs	r0, #1
    ab5c:	f000 fae0 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    ab60:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    ab64:	2001      	movs	r0, #1
    ab66:	f7fe fdeb 	bl	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    ab6a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ab6e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    ab72:	bf08      	it	eq
    ab74:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab78:	4814      	ldr	r0, [pc, #80]	; (abcc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    ab7a:	6800      	ldr	r0, [r0, #0]
    ab7c:	2800      	cmp	r0, #0
    ab7e:	bf08      	it	eq
    ab80:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab84:	2000      	movs	r0, #0
    ab86:	f000 facb 	bl	b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    ab8a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    ab8e:	2004      	movs	r0, #4
    ab90:	7028      	strb	r0, [r5, #0]
    ab92:	f8c5 8004 	str.w	r8, [r5, #4]
    ab96:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    ab9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ab9e:	2000      	movs	r0, #0
    aba0:	f7fe bdce 	b.w	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    aba4:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    aba8:	206c      	movs	r0, #108	; 0x6c
    abaa:	f000 ff93 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    abae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    abb2:	2007      	movs	r0, #7
    abb4:	f7fe bdc4 	b.w	9740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    abb8:	200002f8 	.word	0x200002f8
    abbc:	40008000 	.word	0x40008000
    abc0:	4000814c 	.word	0x4000814c
    abc4:	40008148 	.word	0x40008148
    abc8:	40008144 	.word	0x40008144
    abcc:	40008140 	.word	0x40008140
    abd0:	2201      	movs	r2, #1
    abd2:	0211      	lsls	r1, r2, #8
    abd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    abd8:	2000      	movs	r0, #0
    abda:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    abde:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    abe2:	f3bf 8f4f 	dsb	sy
    abe6:	f3bf 8f6f 	isb	sy
    abea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    abee:	490e      	ldr	r1, [pc, #56]	; (ac28 <MPSL_IRQ_TIMER0_Handler+0x158>)
    abf0:	f841 2f04 	str.w	r2, [r1, #4]!
    abf4:	1e43      	subs	r3, r0, #1
    abf6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    abfa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    abfe:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    ac02:	4b0a      	ldr	r3, [pc, #40]	; (ac2c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    ac04:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    ac08:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    ac0c:	1d1b      	adds	r3, r3, #4
    ac0e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    ac12:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ac16:	1d1b      	adds	r3, r3, #4
    ac18:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    ac1c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    ac20:	60ca      	str	r2, [r1, #12]
    ac22:	4903      	ldr	r1, [pc, #12]	; (ac30 <MPSL_IRQ_TIMER0_Handler+0x160>)
    ac24:	7048      	strb	r0, [r1, #1]
    ac26:	4770      	bx	lr
    ac28:	40008000 	.word	0x40008000
    ac2c:	40008004 	.word	0x40008004
    ac30:	200002f8 	.word	0x200002f8

0000ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    ac34:	4801      	ldr	r0, [pc, #4]	; (ac3c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    ac36:	6800      	ldr	r0, [r0, #0]
    ac38:	4770      	bx	lr
    ac3a:	0000      	.short	0x0000
    ac3c:	4000b504 	.word	0x4000b504

0000ac40 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    ac40:	b430      	push	{r4, r5}
    ac42:	f3ef 8c10 	mrs	ip, PRIMASK
    ac46:	b672      	cpsid	i
    ac48:	2500      	movs	r5, #0
    ac4a:	4b0b      	ldr	r3, [pc, #44]	; (ac78 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    ac4c:	4a0b      	ldr	r2, [pc, #44]	; (ac7c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    ac4e:	bf00      	nop
    ac50:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    ac54:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    ac58:	b12c      	cbz	r4, ac66 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    ac5a:	68d1      	ldr	r1, [r2, #12]
    ac5c:	1c49      	adds	r1, r1, #1
    ac5e:	60d1      	str	r1, [r2, #12]
    ac60:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    ac64:	e7f4      	b.n	ac50 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    ac66:	68d2      	ldr	r2, [r2, #12]
    ac68:	f1bc 0f00 	cmp.w	ip, #0
    ac6c:	d100      	bne.n	ac70 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    ac6e:	b662      	cpsie	i
    ac70:	e9c0 1200 	strd	r1, r2, [r0]
    ac74:	bc30      	pop	{r4, r5}
    ac76:	4770      	bx	lr
    ac78:	4000b000 	.word	0x4000b000
    ac7c:	200002f8 	.word	0x200002f8

0000ac80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac84:	f8df 8134 	ldr.w	r8, [pc, #308]	; adbc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    ac88:	4605      	mov	r5, r0
    ac8a:	f1a8 0602 	sub.w	r6, r8, #2
    ac8e:	f898 3000 	ldrb.w	r3, [r8]
    ac92:	68b0      	ldr	r0, [r6, #8]
    ac94:	2b01      	cmp	r3, #1
    ac96:	bf04      	itt	eq
    ac98:	42a8      	cmpeq	r0, r5
    ac9a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac9e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    aca2:	4a47      	ldr	r2, [pc, #284]	; (adc0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    aca4:	6011      	str	r1, [r2, #0]
    aca6:	4948      	ldr	r1, [pc, #288]	; (adc8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    aca8:	4a46      	ldr	r2, [pc, #280]	; (adc4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    acaa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    acae:	f101 0c04 	add.w	ip, r1, #4
    acb2:	f04f 0400 	mov.w	r4, #0
    acb6:	2b00      	cmp	r3, #0
    acb8:	d055      	beq.n	ad66 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    acba:	4a44      	ldr	r2, [pc, #272]	; (adcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    acbc:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    acc0:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    acc4:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    acc8:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    accc:	2701      	movs	r7, #1
    acce:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    acd2:	2a00      	cmp	r2, #0
    acd4:	bf01      	itttt	eq
    acd6:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    acda:	2a00      	cmpeq	r2, #0
    acdc:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    ace0:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    ace4:	f04f 0a10 	mov.w	sl, #16
    ace8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    acec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    acf0:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    acf4:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    acf8:	4a35      	ldr	r2, [pc, #212]	; (add0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    acfa:	f8d2 c000 	ldr.w	ip, [r2]
    acfe:	eba5 0c0c 	sub.w	ip, r5, ip
    ad02:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ad06:	f1bc 0f02 	cmp.w	ip, #2
    ad0a:	d337      	bcc.n	ad7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    ad0c:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    ad10:	d834      	bhi.n	ad7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    ad12:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    ad16:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    ad1a:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    ad1e:	b12b      	cbz	r3, ad2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    ad20:	6811      	ldr	r1, [r2, #0]
    ad22:	1a41      	subs	r1, r0, r1
    ad24:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ad28:	2902      	cmp	r1, #2
    ad2a:	d3f9      	bcc.n	ad20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    ad2c:	6077      	str	r7, [r6, #4]
    ad2e:	7034      	strb	r4, [r6, #0]
    ad30:	f7ff ff4e 	bl	abd0 <MPSL_IRQ_TIMER0_Handler+0x100>
    ad34:	4827      	ldr	r0, [pc, #156]	; (add4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    ad36:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    ad3a:	f364 0101 	bfi	r1, r4, #0, #2
    ad3e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    ad42:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    ad46:	2102      	movs	r1, #2
    ad48:	f361 0201 	bfi	r2, r1, #0, #2
    ad4c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    ad50:	fa9a f1aa 	rbit	r1, sl
    ad54:	fab1 f181 	clz	r1, r1
    ad58:	2909      	cmp	r1, #9
    ad5a:	d917      	bls.n	ad8c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    ad5c:	f240 3155 	movw	r1, #853	; 0x355
    ad60:	a01d      	add	r0, pc, #116	; (adr r0, add8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    ad62:	f000 fe8b 	bl	ba7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    ad66:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    ad6a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    ad6e:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    ad72:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    ad76:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    ad7a:	e7a5      	b.n	acc8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    ad7c:	2000      	movs	r0, #0
    ad7e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ad82:	f44f 7127 	mov.w	r1, #668	; 0x29c
    ad86:	206c      	movs	r0, #108	; 0x6c
    ad88:	f000 fea4 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad8c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    ad90:	60c7      	str	r7, [r0, #12]
    ad92:	6871      	ldr	r1, [r6, #4]
    ad94:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ad98:	f44f 7080 	mov.w	r0, #256	; 0x100
    ad9c:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    ada0:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    ada4:	490f      	ldr	r1, [pc, #60]	; (ade4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    ada6:	05c0      	lsls	r0, r0, #23
    ada8:	6008      	str	r0, [r1, #0]
    adaa:	2004      	movs	r0, #4
    adac:	60b5      	str	r5, [r6, #8]
    adae:	f888 0001 	strb.w	r0, [r8, #1]
    adb2:	f888 7000 	strb.w	r7, [r8]
    adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    adba:	0000      	.short	0x0000
    adbc:	200002fa 	.word	0x200002fa
    adc0:	4001f508 	.word	0x4001f508
    adc4:	fffbfffd 	.word	0xfffbfffd
    adc8:	4000b000 	.word	0x4000b000
    adcc:	fffafffd 	.word	0xfffafffd
    add0:	4000b504 	.word	0x4000b504
    add4:	40008000 	.word	0x40008000
    add8:	5f66726e 	.word	0x5f66726e
    addc:	656d6974 	.word	0x656d6974
    ade0:	00682e72 	.word	0x00682e72
    ade4:	4001f504 	.word	0x4001f504

0000ade8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    ade8:	b570      	push	{r4, r5, r6, lr}
    adea:	4c2a      	ldr	r4, [pc, #168]	; (ae94 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    adec:	68a1      	ldr	r1, [r4, #8]
    adee:	4281      	cmp	r1, r0
    adf0:	bf14      	ite	ne
    adf2:	2201      	movne	r2, #1
    adf4:	2200      	moveq	r2, #0
    adf6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; ae98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    adfa:	f89c 5000 	ldrb.w	r5, [ip]
    adfe:	2d02      	cmp	r5, #2
    ae00:	d002      	beq.n	ae08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    ae02:	2a00      	cmp	r2, #0
    ae04:	d034      	beq.n	ae70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    ae06:	e002      	b.n	ae0e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    ae08:	2a00      	cmp	r2, #0
    ae0a:	bf08      	it	eq
    ae0c:	bd70      	popeq	{r4, r5, r6, pc}
    ae0e:	7862      	ldrb	r2, [r4, #1]
    ae10:	b39a      	cbz	r2, ae7a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    ae12:	4b22      	ldr	r3, [pc, #136]	; (ae9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    ae14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ae18:	601a      	str	r2, [r3, #0]
    ae1a:	4b21      	ldr	r3, [pc, #132]	; (aea0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    ae1c:	1392      	asrs	r2, r2, #14
    ae1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    ae22:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    ae26:	2200      	movs	r2, #0
    ae28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    ae2c:	4a1d      	ldr	r2, [pc, #116]	; (aea4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    ae2e:	6816      	ldr	r6, [r2, #0]
    ae30:	1b86      	subs	r6, r0, r6
    ae32:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    ae36:	2e02      	cmp	r6, #2
    ae38:	d324      	bcc.n	ae84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    ae3a:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    ae3e:	d821      	bhi.n	ae84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    ae40:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    ae44:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    ae48:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    ae4c:	b12d      	cbz	r5, ae5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    ae4e:	6813      	ldr	r3, [r2, #0]
    ae50:	1acb      	subs	r3, r1, r3
    ae52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ae56:	2b02      	cmp	r3, #2
    ae58:	d3f9      	bcc.n	ae4e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    ae5a:	4b13      	ldr	r3, [pc, #76]	; (aea8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    ae5c:	2102      	movs	r1, #2
    ae5e:	074a      	lsls	r2, r1, #29
    ae60:	601a      	str	r2, [r3, #0]
    ae62:	60a0      	str	r0, [r4, #8]
    ae64:	2004      	movs	r0, #4
    ae66:	f88c 0001 	strb.w	r0, [ip, #1]
    ae6a:	f88c 1000 	strb.w	r1, [ip]
    ae6e:	bd70      	pop	{r4, r5, r6, pc}
    ae70:	f240 21aa 	movw	r1, #682	; 0x2aa
    ae74:	206c      	movs	r0, #108	; 0x6c
    ae76:	f000 fe2d 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae7a:	f240 21ae 	movw	r1, #686	; 0x2ae
    ae7e:	206c      	movs	r0, #108	; 0x6c
    ae80:	f000 fe28 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae84:	2000      	movs	r0, #0
    ae86:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    ae8a:	f240 21ba 	movw	r1, #698	; 0x2ba
    ae8e:	206c      	movs	r0, #108	; 0x6c
    ae90:	f000 fe20 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae94:	200002f8 	.word	0x200002f8
    ae98:	200002fa 	.word	0x200002fa
    ae9c:	4001f508 	.word	0x4001f508
    aea0:	4000b000 	.word	0x4000b000
    aea4:	4000b504 	.word	0x4000b504
    aea8:	4001f504 	.word	0x4001f504

0000aeac <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    aeac:	4801      	ldr	r0, [pc, #4]	; (aeb4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    aeae:	6880      	ldr	r0, [r0, #8]
    aeb0:	4770      	bx	lr
    aeb2:	0000      	.short	0x0000
    aeb4:	200002f8 	.word	0x200002f8

0000aeb8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aebc:	4836      	ldr	r0, [pc, #216]	; (af98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    aebe:	4a35      	ldr	r2, [pc, #212]	; (af94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    aec0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    aec4:	f8df c0d4 	ldr.w	ip, [pc, #212]	; af9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    aec8:	1d03      	adds	r3, r0, #4
    aeca:	2100      	movs	r1, #0
    aecc:	f89c 4000 	ldrb.w	r4, [ip]
    aed0:	b184      	cbz	r4, aef4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    aed2:	4a33      	ldr	r2, [pc, #204]	; (afa0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    aed4:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    aed8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    aedc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    aee0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    aee4:	2301      	movs	r3, #1
    aee6:	2a00      	cmp	r2, #0
    aee8:	bf04      	itt	eq
    aeea:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    aeee:	2800      	cmpeq	r0, #0
    aef0:	d111      	bne.n	af16 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    aef2:	e00a      	b.n	af0a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    aef4:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    aef8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    aefc:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    af00:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    af04:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    af08:	e7ea      	b.n	aee0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    af0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    af0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    af12:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    af16:	2c02      	cmp	r4, #2
    af18:	d004      	beq.n	af24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    af1a:	f240 21c6 	movw	r1, #710	; 0x2c6
    af1e:	206c      	movs	r0, #108	; 0x6c
    af20:	f000 fdd8 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af24:	4e1f      	ldr	r6, [pc, #124]	; (afa4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    af26:	6830      	ldr	r0, [r6, #0]
    af28:	4c1f      	ldr	r4, [pc, #124]	; (afa8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    af2a:	1cc0      	adds	r0, r0, #3
    af2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af30:	68a2      	ldr	r2, [r4, #8]
    af32:	4d1e      	ldr	r5, [pc, #120]	; (afac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    af34:	4290      	cmp	r0, r2
    af36:	d00b      	beq.n	af50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    af38:	6837      	ldr	r7, [r6, #0]
    af3a:	1bd7      	subs	r7, r2, r7
    af3c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    af40:	2f04      	cmp	r7, #4
    af42:	d305      	bcc.n	af50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    af44:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    af48:	d802      	bhi.n	af50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    af4a:	f7ff fe99 	bl	ac80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    af4e:	e01b      	b.n	af88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    af50:	6830      	ldr	r0, [r6, #0]
    af52:	1a10      	subs	r0, r2, r0
    af54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af58:	2802      	cmp	r0, #2
    af5a:	d313      	bcc.n	af84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    af5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    af60:	d810      	bhi.n	af84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    af62:	4a13      	ldr	r2, [pc, #76]	; (afb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    af64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    af68:	6010      	str	r0, [r2, #0]
    af6a:	6063      	str	r3, [r4, #4]
    af6c:	7021      	strb	r1, [r4, #0]
    af6e:	606b      	str	r3, [r5, #4]
    af70:	60eb      	str	r3, [r5, #12]
    af72:	0040      	lsls	r0, r0, #1
    af74:	1f11      	subs	r1, r2, #4
    af76:	6008      	str	r0, [r1, #0]
    af78:	2004      	movs	r0, #4
    af7a:	f88c 0001 	strb.w	r0, [ip, #1]
    af7e:	f88c 3000 	strb.w	r3, [ip]
    af82:	e001      	b.n	af88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    af84:	6063      	str	r3, [r4, #4]
    af86:	7021      	strb	r1, [r4, #0]
    af88:	6860      	ldr	r0, [r4, #4]
    af8a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    af8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af92:	0000      	.short	0x0000
    af94:	fffbfffd 	.word	0xfffbfffd
    af98:	4000b000 	.word	0x4000b000
    af9c:	200002fa 	.word	0x200002fa
    afa0:	fffafffd 	.word	0xfffafffd
    afa4:	4000b504 	.word	0x4000b504
    afa8:	200002f8 	.word	0x200002f8
    afac:	40008000 	.word	0x40008000
    afb0:	4001f508 	.word	0x4001f508

0000afb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    afb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afb8:	4a54      	ldr	r2, [pc, #336]	; (b10c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    afba:	2500      	movs	r5, #0
    afbc:	2401      	movs	r4, #1
    afbe:	f892 c000 	ldrb.w	ip, [r2]
    afc2:	7853      	ldrb	r3, [r2, #1]
    afc4:	f44f 76a0 	mov.w	r6, #320	; 0x140
    afc8:	2807      	cmp	r0, #7
    afca:	d27d      	bcs.n	b0c8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    afcc:	e8df f000 	tbb	[pc, r0]
    afd0:	04040404 	.word	0x04040404
    afd4:	00585858 	.word	0x00585858
    afd8:	4a4d      	ldr	r2, [pc, #308]	; (b110 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    afda:	6897      	ldr	r7, [r2, #8]
    afdc:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    afe0:	bf04      	itt	eq
    afe2:	7852      	ldrbeq	r2, [r2, #1]
    afe4:	2a00      	cmpeq	r2, #0
    afe6:	d003      	beq.n	aff0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    afe8:	f1bc 0f02 	cmp.w	ip, #2
    afec:	d005      	beq.n	affa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    afee:	e026      	b.n	b03e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    aff0:	f240 3156 	movw	r1, #854	; 0x356
    aff4:	206c      	movs	r0, #108	; 0x6c
    aff6:	f000 fd6d 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    affa:	1f1a      	subs	r2, r3, #4
    affc:	b2d2      	uxtb	r2, r2
    affe:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b002:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b006:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b00a:	2200      	movs	r2, #0
    b00c:	f1bc 0f01 	cmp.w	ip, #1
    b010:	d003      	beq.n	b01a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b012:	f1bc 0f02 	cmp.w	ip, #2
    b016:	d008      	beq.n	b02a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b018:	e00e      	b.n	b038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b01a:	2b04      	cmp	r3, #4
    b01c:	bf24      	itt	cs
    b01e:	6837      	ldrcs	r7, [r6, #0]
    b020:	2f00      	cmpcs	r7, #0
    b022:	bf08      	it	eq
    b024:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b028:	e006      	b.n	b038 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b02a:	2b04      	cmp	r3, #4
    b02c:	bf24      	itt	cs
    b02e:	6837      	ldrcs	r7, [r6, #0]
    b030:	2f00      	cmpcs	r7, #0
    b032:	bf08      	it	eq
    b034:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    b038:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    b03c:	d1e5      	bne.n	b00a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    b03e:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b114 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    b042:	f100 0210 	add.w	r2, r0, #16
    b046:	fa04 f202 	lsl.w	r2, r4, r2
    b04a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b04e:	f04f 0340 	mov.w	r3, #64	; 0x40
    b052:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b056:	b2db      	uxtb	r3, r3
    b058:	4463      	add	r3, ip
    b05a:	601c      	str	r4, [r3, #0]
    b05c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b060:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    b064:	eba1 0303 	sub.w	r3, r1, r3
    b068:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b06c:	2b03      	cmp	r3, #3
    b06e:	bf26      	itte	cs
    b070:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    b074:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    b078:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    b07c:	d237      	bcs.n	b0ee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    b07e:	e03c      	b.n	b0fa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    b080:	f1bc 0f00 	cmp.w	ip, #0
    b084:	d006      	beq.n	b094 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b086:	4283      	cmp	r3, r0
    b088:	d104      	bne.n	b094 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b08a:	f240 3176 	movw	r1, #886	; 0x376
    b08e:	206c      	movs	r0, #108	; 0x6c
    b090:	f000 fd20 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b094:	1f02      	subs	r2, r0, #4
    b096:	b2d3      	uxtb	r3, r2
    b098:	2b03      	cmp	r3, #3
    b09a:	d304      	bcc.n	b0a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    b09c:	f240 11d1 	movw	r1, #465	; 0x1d1
    b0a0:	206c      	movs	r0, #108	; 0x6c
    b0a2:	f000 fd17 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0a6:	f8df c070 	ldr.w	ip, [pc, #112]	; b118 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    b0aa:	f103 0210 	add.w	r2, r3, #16
    b0ae:	fa04 f202 	lsl.w	r2, r4, r2
    b0b2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b0b6:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    b0ba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b0be:	f84c 5003 	str.w	r5, [ip, r3]
    b0c2:	4b16      	ldr	r3, [pc, #88]	; (b11c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b0c4:	681b      	ldr	r3, [r3, #0]
    b0c6:	e000      	b.n	b0ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b0c8:	e01a      	b.n	b100 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    b0ca:	1f00      	subs	r0, r0, #4
    b0cc:	1acb      	subs	r3, r1, r3
    b0ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b0d2:	b2c0      	uxtb	r0, r0
    b0d4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b0d8:	2b02      	cmp	r3, #2
    b0da:	d30b      	bcc.n	b0f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b0dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b0e0:	d808      	bhi.n	b0f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b0e2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b0e6:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    b0ea:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    b0ee:	2001      	movs	r0, #1
    b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b0f4:	2100      	movs	r1, #0
    b0f6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b0fa:	2000      	movs	r0, #0
    b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b100:	f240 317a 	movw	r1, #890	; 0x37a
    b104:	206c      	movs	r0, #108	; 0x6c
    b106:	f000 fce5 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b10a:	0000      	.short	0x0000
    b10c:	200002fa 	.word	0x200002fa
    b110:	200002f8 	.word	0x200002f8
    b114:	40008000 	.word	0x40008000
    b118:	4000b000 	.word	0x4000b000
    b11c:	4000b504 	.word	0x4000b504

0000b120 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b124:	2601      	movs	r6, #1
    b126:	2700      	movs	r7, #0
    b128:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b12c:	2807      	cmp	r0, #7
    b12e:	d251      	bcs.n	b1d4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    b130:	e8df f000 	tbb	[pc, r0]
    b134:	04040404 	.word	0x04040404
    b138:	00191919 	.word	0x00191919
    b13c:	f100 0110 	add.w	r1, r0, #16
    b140:	fa06 f201 	lsl.w	r2, r6, r1
    b144:	4926      	ldr	r1, [pc, #152]	; (b1e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b146:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b14a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b14e:	2200      	movs	r2, #0
    b150:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b154:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    b158:	508f      	str	r7, [r1, r2]
    b15a:	4922      	ldr	r1, [pc, #136]	; (b1e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b15c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b160:	9000      	str	r0, [sp, #0]
    b162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b166:	4d20      	ldr	r5, [pc, #128]	; (b1e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b168:	1f01      	subs	r1, r0, #4
    b16a:	b2cc      	uxtb	r4, r1
    b16c:	7829      	ldrb	r1, [r5, #0]
    b16e:	b179      	cbz	r1, b190 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b170:	786a      	ldrb	r2, [r5, #1]
    b172:	4282      	cmp	r2, r0
    b174:	d10c      	bne.n	b190 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b176:	4a1d      	ldr	r2, [pc, #116]	; (b1ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    b178:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b17c:	6010      	str	r0, [r2, #0]
    b17e:	2901      	cmp	r1, #1
    b180:	bf08      	it	eq
    b182:	f7ff fd25 	bleq	abd0 <MPSL_IRQ_TIMER0_Handler+0x100>
    b186:	702f      	strb	r7, [r5, #0]
    b188:	4919      	ldr	r1, [pc, #100]	; (b1f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    b18a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    b18e:	6088      	str	r0, [r1, #8]
    b190:	4918      	ldr	r1, [pc, #96]	; (b1f4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    b192:	f104 0010 	add.w	r0, r4, #16
    b196:	fa06 f000 	lsl.w	r0, r6, r0
    b19a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    b19e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    b1a2:	00a0      	lsls	r0, r4, #2
    b1a4:	4408      	add	r0, r1
    b1a6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b1aa:	4a13      	ldr	r2, [pc, #76]	; (b1f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    b1ac:	6812      	ldr	r2, [r2, #0]
    b1ae:	1a80      	subs	r0, r0, r2
    b1b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b1b4:	2802      	cmp	r0, #2
    b1b6:	d307      	bcc.n	b1c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    b1b8:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    b1bc:	2000      	movs	r0, #0
    b1be:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b1c2:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    b1c6:	500f      	str	r7, [r1, r0]
    b1c8:	480c      	ldr	r0, [pc, #48]	; (b1fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    b1ca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b1ce:	9000      	str	r0, [sp, #0]
    b1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b1d4:	f240 31fe 	movw	r1, #1022	; 0x3fe
    b1d8:	206c      	movs	r0, #108	; 0x6c
    b1da:	f000 fc7b 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b1de:	0000      	.short	0x0000
    b1e0:	40008000 	.word	0x40008000
    b1e4:	40008140 	.word	0x40008140
    b1e8:	200002fa 	.word	0x200002fa
    b1ec:	4001f508 	.word	0x4001f508
    b1f0:	200002f8 	.word	0x200002f8
    b1f4:	4000b000 	.word	0x4000b000
    b1f8:	4000b504 	.word	0x4000b504
    b1fc:	4000b140 	.word	0x4000b140

0000b200 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    b200:	4825      	ldr	r0, [pc, #148]	; (b298 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    b202:	4a24      	ldr	r2, [pc, #144]	; (b294 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    b204:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b208:	4924      	ldr	r1, [pc, #144]	; (b29c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    b20a:	1d03      	adds	r3, r0, #4
    b20c:	f891 c000 	ldrb.w	ip, [r1]
    b210:	2100      	movs	r1, #0
    b212:	f1bc 0f00 	cmp.w	ip, #0
    b216:	d010      	beq.n	b23a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    b218:	4a21      	ldr	r2, [pc, #132]	; (b2a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    b21a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b21e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b222:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b226:	bf00      	nop
    b228:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b22c:	2a00      	cmp	r2, #0
    b22e:	bf04      	itt	eq
    b230:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b234:	2800      	cmpeq	r0, #0
    b236:	d111      	bne.n	b25c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    b238:	e00a      	b.n	b250 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    b23a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b23e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b242:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b246:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b24a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b24e:	e7eb      	b.n	b228 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    b250:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b254:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b258:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b25c:	4811      	ldr	r0, [pc, #68]	; (b2a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    b25e:	f04f 32ff 	mov.w	r2, #4294967295
    b262:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b266:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b26a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b26e:	f100 0204 	add.w	r2, r0, #4
    b272:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    b276:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b27a:	f102 0204 	add.w	r2, r2, #4
    b27e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    b282:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    b286:	f102 0204 	add.w	r2, r2, #4
    b28a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    b28e:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    b292:	4770      	bx	lr
    b294:	fffbfffd 	.word	0xfffbfffd
    b298:	4000b000 	.word	0x4000b000
    b29c:	200002fa 	.word	0x200002fa
    b2a0:	fffafffd 	.word	0xfffafffd
    b2a4:	40008000 	.word	0x40008000

0000b2a8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    b2a8:	b510      	push	{r4, lr}
    b2aa:	2807      	cmp	r0, #7
    b2ac:	d20d      	bcs.n	b2ca <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    b2ae:	e8df f000 	tbb	[pc, r0]
    b2b2:	0404      	.short	0x0404
    b2b4:	06060404 	.word	0x06060404
    b2b8:	0006      	.short	0x0006
    b2ba:	4906      	ldr	r1, [pc, #24]	; (b2d4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    b2bc:	e002      	b.n	b2c4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    b2be:	1f00      	subs	r0, r0, #4
    b2c0:	4905      	ldr	r1, [pc, #20]	; (b2d8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    b2c2:	b2c0      	uxtb	r0, r0
    b2c4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    b2c8:	bd10      	pop	{r4, pc}
    b2ca:	f240 319e 	movw	r1, #926	; 0x39e
    b2ce:	206c      	movs	r0, #108	; 0x6c
    b2d0:	f000 fc00 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2d4:	40008140 	.word	0x40008140
    b2d8:	4000b140 	.word	0x4000b140

0000b2dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    b2dc:	b570      	push	{r4, r5, r6, lr}
    b2de:	481f      	ldr	r0, [pc, #124]	; (b35c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    b2e0:	2400      	movs	r4, #0
    b2e2:	2104      	movs	r1, #4
    b2e4:	7004      	strb	r4, [r0, #0]
    b2e6:	1e80      	subs	r0, r0, #2
    b2e8:	7001      	strb	r1, [r0, #0]
    b2ea:	0589      	lsls	r1, r1, #22
    b2ec:	60c4      	str	r4, [r0, #12]
    b2ee:	6081      	str	r1, [r0, #8]
    b2f0:	f7ff fc6e 	bl	abd0 <MPSL_IRQ_TIMER0_Handler+0x100>
    b2f4:	2501      	movs	r5, #1
    b2f6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    b2fa:	02eb      	lsls	r3, r5, #11
    b2fc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    b300:	f3bf 8f4f 	dsb	sy
    b304:	f3bf 8f6f 	isb	sy
    b308:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    b30c:	4814      	ldr	r0, [pc, #80]	; (b360 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    b30e:	6045      	str	r5, [r0, #4]
    b310:	6085      	str	r5, [r0, #8]
    b312:	4914      	ldr	r1, [pc, #80]	; (b364 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    b314:	680a      	ldr	r2, [r1, #0]
    b316:	2a00      	cmp	r2, #0
    b318:	d1fc      	bne.n	b314 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    b31a:	1e51      	subs	r1, r2, #1
    b31c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    b320:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    b324:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    b328:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b32c:	490e      	ldr	r1, [pc, #56]	; (b368 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    b32e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b332:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b336:	1d09      	adds	r1, r1, #4
    b338:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b33c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b340:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    b344:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    b348:	6005      	str	r5, [r0, #0]
    b34a:	f44f 7182 	mov.w	r1, #260	; 0x104
    b34e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    b352:	2102      	movs	r1, #2
    b354:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    b358:	bd70      	pop	{r4, r5, r6, pc}
    b35a:	0000      	.short	0x0000
    b35c:	200002fa 	.word	0x200002fa
    b360:	4000b000 	.word	0x4000b000
    b364:	4000b504 	.word	0x4000b504
    b368:	4000b004 	.word	0x4000b004

0000b36c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    b36c:	4808      	ldr	r0, [pc, #32]	; (b390 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    b36e:	f990 0000 	ldrsb.w	r0, [r0]
    b372:	2800      	cmp	r0, #0
    b374:	bfb8      	it	lt
    b376:	4770      	bxlt	lr
    b378:	f000 011f 	and.w	r1, r0, #31
    b37c:	2201      	movs	r2, #1
    b37e:	fa02 f101 	lsl.w	r1, r2, r1
    b382:	0940      	lsrs	r0, r0, #5
    b384:	0080      	lsls	r0, r0, #2
    b386:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b38a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b38e:	4770      	bx	lr
    b390:	20000380 	.word	0x20000380

0000b394 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    b394:	4803      	ldr	r0, [pc, #12]	; (b3a4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    b396:	7800      	ldrb	r0, [r0, #0]
    b398:	2803      	cmp	r0, #3
    b39a:	bf0c      	ite	eq
    b39c:	2001      	moveq	r0, #1
    b39e:	2000      	movne	r0, #0
    b3a0:	4770      	bx	lr
    b3a2:	0000      	.short	0x0000
    b3a4:	20000358 	.word	0x20000358

0000b3a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    b3a8:	4801      	ldr	r0, [pc, #4]	; (b3b0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    b3aa:	8840      	ldrh	r0, [r0, #2]
    b3ac:	4770      	bx	lr
    b3ae:	0000      	.short	0x0000
    b3b0:	20000358 	.word	0x20000358

0000b3b4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    b3b4:	4803      	ldr	r0, [pc, #12]	; (b3c4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    b3b6:	7800      	ldrb	r0, [r0, #0]
    b3b8:	2802      	cmp	r0, #2
    b3ba:	bf16      	itet	ne
    b3bc:	2803      	cmpne	r0, #3
    b3be:	2001      	moveq	r0, #1
    b3c0:	2000      	movne	r0, #0
    b3c2:	4770      	bx	lr
    b3c4:	20000358 	.word	0x20000358

0000b3c8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    b3c8:	4802      	ldr	r0, [pc, #8]	; (b3d4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    b3ca:	2100      	movs	r1, #0
    b3cc:	7001      	strb	r1, [r0, #0]
    b3ce:	8041      	strh	r1, [r0, #2]
    b3d0:	4770      	bx	lr
    b3d2:	0000      	.short	0x0000
    b3d4:	20000358 	.word	0x20000358

0000b3d8 <MPSL_IRQ_CLOCK_Handler>:
    b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3dc:	4c16      	ldr	r4, [pc, #88]	; (b438 <MPSL_IRQ_CLOCK_Handler+0x60>)
    b3de:	7a60      	ldrb	r0, [r4, #9]
    b3e0:	2800      	cmp	r0, #0
    b3e2:	d027      	beq.n	b434 <MPSL_IRQ_CLOCK_Handler+0x5c>
    b3e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b3e8:	058d      	lsls	r5, r1, #22
    b3ea:	4628      	mov	r0, r5
    b3ec:	f004 fe9e 	bl	1012c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b3f0:	4680      	mov	r8, r0
    b3f2:	f44f 7182 	mov.w	r1, #260	; 0x104
    b3f6:	4628      	mov	r0, r5
    b3f8:	f004 fe98 	bl	1012c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b3fc:	2600      	movs	r6, #0
    b3fe:	4607      	mov	r7, r0
    b400:	f1b8 0f00 	cmp.w	r8, #0
    b404:	d009      	beq.n	b41a <MPSL_IRQ_CLOCK_Handler+0x42>
    b406:	2001      	movs	r0, #1
    b408:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b40c:	7920      	ldrb	r0, [r4, #4]
    b40e:	b120      	cbz	r0, b41a <MPSL_IRQ_CLOCK_Handler+0x42>
    b410:	7126      	strb	r6, [r4, #4]
    b412:	69e0      	ldr	r0, [r4, #28]
    b414:	b108      	cbz	r0, b41a <MPSL_IRQ_CLOCK_Handler+0x42>
    b416:	4780      	blx	r0
    b418:	61e6      	str	r6, [r4, #28]
    b41a:	b137      	cbz	r7, b42a <MPSL_IRQ_CLOCK_Handler+0x52>
    b41c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b420:	2002      	movs	r0, #2
    b422:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b426:	f000 fa75 	bl	b914 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    b42a:	4640      	mov	r0, r8
    b42c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b430:	f000 b858 	b.w	b4e4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b438:	20000308 	.word	0x20000308
    b43c:	b510      	push	{r4, lr}
    b43e:	f004 ff1f 	bl	10280 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b442:	b930      	cbnz	r0, b452 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b444:	f004 ff3d 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b448:	b918      	cbnz	r0, b452 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b44a:	f004 ff70 	bl	1032e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b44e:	2800      	cmp	r0, #0
    b450:	d002      	beq.n	b458 <MPSL_IRQ_CLOCK_Handler+0x80>
    b452:	4902      	ldr	r1, [pc, #8]	; (b45c <MPSL_IRQ_CLOCK_Handler+0x84>)
    b454:	2002      	movs	r0, #2
    b456:	6008      	str	r0, [r1, #0]
    b458:	bd10      	pop	{r4, pc}
    b45a:	0000      	.short	0x0000
    b45c:	40000c34 	.word	0x40000c34
    b460:	b570      	push	{r4, r5, r6, lr}
    b462:	f000 f99b 	bl	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b466:	f000 fabd 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b46a:	4c09      	ldr	r4, [pc, #36]	; (b490 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    b46c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b470:	b130      	cbz	r0, b480 <MPSL_IRQ_CLOCK_Handler+0xa8>
    b472:	f7ff ffe3 	bl	b43c <MPSL_IRQ_CLOCK_Handler+0x64>
    b476:	2001      	movs	r0, #1
    b478:	6128      	str	r0, [r5, #16]
    b47a:	2004      	movs	r0, #4
    b47c:	72a0      	strb	r0, [r4, #10]
    b47e:	e004      	b.n	b48a <MPSL_IRQ_CLOCK_Handler+0xb2>
    b480:	2003      	movs	r0, #3
    b482:	72a0      	strb	r0, [r4, #10]
    b484:	2001      	movs	r0, #1
    b486:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b48a:	2000      	movs	r0, #0
    b48c:	71e0      	strb	r0, [r4, #7]
    b48e:	bd70      	pop	{r4, r5, r6, pc}
    b490:	20000308 	.word	0x20000308
    b494:	b570      	push	{r4, r5, r6, lr}
    b496:	4c12      	ldr	r4, [pc, #72]	; (b4e0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    b498:	79a0      	ldrb	r0, [r4, #6]
    b49a:	b1e0      	cbz	r0, b4d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    b49c:	79e1      	ldrb	r1, [r4, #7]
    b49e:	1e40      	subs	r0, r0, #1
    b4a0:	4281      	cmp	r1, r0
    b4a2:	da18      	bge.n	b4d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    b4a4:	f000 fa9e 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b4a8:	4605      	mov	r5, r0
    b4aa:	f000 fb87 	bl	bbbc <mpsl_temperature_get>
    b4ae:	79a1      	ldrb	r1, [r4, #6]
    b4b0:	2901      	cmp	r1, #1
    b4b2:	d902      	bls.n	b4ba <MPSL_IRQ_CLOCK_Handler+0xe2>
    b4b4:	79e1      	ldrb	r1, [r4, #7]
    b4b6:	1c49      	adds	r1, r1, #1
    b4b8:	71e1      	strb	r1, [r4, #7]
    b4ba:	b10d      	cbz	r5, b4c0 <MPSL_IRQ_CLOCK_Handler+0xe8>
    b4bc:	6961      	ldr	r1, [r4, #20]
    b4be:	e000      	b.n	b4c2 <MPSL_IRQ_CLOCK_Handler+0xea>
    b4c0:	6921      	ldr	r1, [r4, #16]
    b4c2:	1a41      	subs	r1, r0, r1
    b4c4:	2902      	cmp	r1, #2
    b4c6:	da02      	bge.n	b4ce <MPSL_IRQ_CLOCK_Handler+0xf6>
    b4c8:	f111 0f02 	cmn.w	r1, #2
    b4cc:	dc07      	bgt.n	b4de <MPSL_IRQ_CLOCK_Handler+0x106>
    b4ce:	b10d      	cbz	r5, b4d4 <MPSL_IRQ_CLOCK_Handler+0xfc>
    b4d0:	6160      	str	r0, [r4, #20]
    b4d2:	e000      	b.n	b4d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    b4d4:	6120      	str	r0, [r4, #16]
    b4d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b4da:	f7ff bfc1 	b.w	b460 <MPSL_IRQ_CLOCK_Handler+0x88>
    b4de:	bd70      	pop	{r4, r5, r6, pc}
    b4e0:	20000308 	.word	0x20000308
    b4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4e8:	4606      	mov	r6, r0
    b4ea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b4ee:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b4f2:	4628      	mov	r0, r5
    b4f4:	f004 fe1a 	bl	1012c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b4f8:	4680      	mov	r8, r0
    b4fa:	f44f 7188 	mov.w	r1, #272	; 0x110
    b4fe:	4628      	mov	r0, r5
    b500:	f004 fe14 	bl	1012c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b504:	4c27      	ldr	r4, [pc, #156]	; (b5a4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    b506:	4682      	mov	sl, r0
    b508:	7827      	ldrb	r7, [r4, #0]
    b50a:	f104 0008 	add.w	r0, r4, #8
    b50e:	f004 fe81 	bl	10214 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    b512:	b110      	cbz	r0, b51a <MPSL_IRQ_CLOCK_Handler+0x142>
    b514:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    b518:	e016      	b.n	b548 <MPSL_IRQ_CLOCK_Handler+0x170>
    b51a:	f04f 0901 	mov.w	r9, #1
    b51e:	b146      	cbz	r6, b532 <MPSL_IRQ_CLOCK_Handler+0x15a>
    b520:	7aa0      	ldrb	r0, [r4, #10]
    b522:	2803      	cmp	r0, #3
    b524:	d105      	bne.n	b532 <MPSL_IRQ_CLOCK_Handler+0x15a>
    b526:	2004      	movs	r0, #4
    b528:	72a0      	strb	r0, [r4, #10]
    b52a:	f7ff ff87 	bl	b43c <MPSL_IRQ_CLOCK_Handler+0x64>
    b52e:	f8c5 9010 	str.w	r9, [r5, #16]
    b532:	2600      	movs	r6, #0
    b534:	f1b8 0f00 	cmp.w	r8, #0
    b538:	d018      	beq.n	b56c <MPSL_IRQ_CLOCK_Handler+0x194>
    b53a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    b53e:	7aa0      	ldrb	r0, [r4, #10]
    b540:	2804      	cmp	r0, #4
    b542:	d004      	beq.n	b54e <MPSL_IRQ_CLOCK_Handler+0x176>
    b544:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    b548:	206d      	movs	r0, #109	; 0x6d
    b54a:	f000 fac3 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b54e:	f004 fe97 	bl	10280 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b552:	b928      	cbnz	r0, b560 <MPSL_IRQ_CLOCK_Handler+0x188>
    b554:	f004 feb5 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b558:	b910      	cbnz	r0, b560 <MPSL_IRQ_CLOCK_Handler+0x188>
    b55a:	f004 fee8 	bl	1032e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b55e:	b108      	cbz	r0, b564 <MPSL_IRQ_CLOCK_Handler+0x18c>
    b560:	4811      	ldr	r0, [pc, #68]	; (b5a8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    b562:	6006      	str	r6, [r0, #0]
    b564:	2002      	movs	r0, #2
    b566:	72a0      	strb	r0, [r4, #10]
    b568:	f000 f8fc 	bl	b764 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b56c:	f1ba 0f00 	cmp.w	sl, #0
    b570:	d008      	beq.n	b584 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    b572:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    b576:	7aa0      	ldrb	r0, [r4, #10]
    b578:	2802      	cmp	r0, #2
    b57a:	d101      	bne.n	b580 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    b57c:	f7ff ff8a 	bl	b494 <MPSL_IRQ_CLOCK_Handler+0xbc>
    b580:	f8c5 9014 	str.w	r9, [r5, #20]
    b584:	b13f      	cbz	r7, b596 <MPSL_IRQ_CLOCK_Handler+0x1be>
    b586:	7026      	strb	r6, [r4, #0]
    b588:	7aa0      	ldrb	r0, [r4, #10]
    b58a:	2802      	cmp	r0, #2
    b58c:	d101      	bne.n	b592 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    b58e:	f7ff ff67 	bl	b460 <MPSL_IRQ_CLOCK_Handler+0x88>
    b592:	f000 f8e7 	bl	b764 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b596:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b59a:	4802      	ldr	r0, [pc, #8]	; (b5a4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    b59c:	3008      	adds	r0, #8
    b59e:	f004 be50 	b.w	10242 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    b5a2:	0000      	.short	0x0000
    b5a4:	20000308 	.word	0x20000308
    b5a8:	40000c34 	.word	0x40000c34
    b5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5b0:	4c49      	ldr	r4, [pc, #292]	; (b6d8 <MPSL_IRQ_CLOCK_Handler+0x300>)
    b5b2:	2700      	movs	r7, #0
    b5b4:	4606      	mov	r6, r0
    b5b6:	61a7      	str	r7, [r4, #24]
    b5b8:	7842      	ldrb	r2, [r0, #1]
    b5ba:	7881      	ldrb	r1, [r0, #2]
    b5bc:	7800      	ldrb	r0, [r0, #0]
    b5be:	72e0      	strb	r0, [r4, #11]
    b5c0:	7162      	strb	r2, [r4, #5]
    b5c2:	71a1      	strb	r1, [r4, #6]
    b5c4:	71e7      	strb	r7, [r4, #7]
    b5c6:	f04f 0801 	mov.w	r8, #1
    b5ca:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b5ce:	2805      	cmp	r0, #5
    b5d0:	d225      	bcs.n	b61e <MPSL_IRQ_CLOCK_Handler+0x246>
    b5d2:	e8df f000 	tbb	[pc, r0]
    b5d6:	0310      	.short	0x0310
    b5d8:	00222006 	.word	0x00222006
    b5dc:	f8c4 8018 	str.w	r8, [r4, #24]
    b5e0:	e009      	b.n	b5f6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    b5e2:	f000 f8db 	bl	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b5e6:	2101      	movs	r1, #1
    b5e8:	4628      	mov	r0, r5
    b5ea:	f004 fda4 	bl	10136 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    b5ee:	2800      	cmp	r0, #0
    b5f0:	d0f9      	beq.n	b5e6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    b5f2:	2002      	movs	r0, #2
    b5f4:	61a0      	str	r0, [r4, #24]
    b5f6:	f004 fdca 	bl	1018e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    b5fa:	b1c0      	cbz	r0, b62e <MPSL_IRQ_CLOCK_Handler+0x256>
    b5fc:	f000 fa0c 	bl	ba18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    b600:	7e21      	ldrb	r1, [r4, #24]
    b602:	f001 0103 	and.w	r1, r1, #3
    b606:	4288      	cmp	r0, r1
    b608:	d111      	bne.n	b62e <MPSL_IRQ_CLOCK_Handler+0x256>
    b60a:	79b0      	ldrb	r0, [r6, #6]
    b60c:	b160      	cbz	r0, b628 <MPSL_IRQ_CLOCK_Handler+0x250>
    b60e:	2002      	movs	r0, #2
    b610:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b614:	e044      	b.n	b6a0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    b616:	4831      	ldr	r0, [pc, #196]	; (b6dc <MPSL_IRQ_CLOCK_Handler+0x304>)
    b618:	e7ec      	b.n	b5f4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    b61a:	4831      	ldr	r0, [pc, #196]	; (b6e0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    b61c:	e7ea      	b.n	b5f4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    b61e:	f240 313d 	movw	r1, #829	; 0x33d
    b622:	206d      	movs	r0, #109	; 0x6d
    b624:	f000 fa56 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b628:	f000 f9ca 	bl	b9c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b62c:	e038      	b.n	b6a0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    b62e:	f8c5 800c 	str.w	r8, [r5, #12]
    b632:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    b636:	69a0      	ldr	r0, [r4, #24]
    b638:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    b63c:	f004 fe0c 	bl	10258 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    b640:	b940      	cbnz	r0, b654 <MPSL_IRQ_CLOCK_Handler+0x27c>
    b642:	f004 fe13 	bl	1026c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b646:	b928      	cbnz	r0, b654 <MPSL_IRQ_CLOCK_Handler+0x27c>
    b648:	f004 fe27 	bl	1029a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b64c:	b910      	cbnz	r0, b654 <MPSL_IRQ_CLOCK_Handler+0x27c>
    b64e:	f004 fe38 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b652:	b138      	cbz	r0, b664 <MPSL_IRQ_CLOCK_Handler+0x28c>
    b654:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b658:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    b65c:	4921      	ldr	r1, [pc, #132]	; (b6e4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    b65e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    b662:	6008      	str	r0, [r1, #0]
    b664:	f004 fdf8 	bl	10258 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    b668:	b940      	cbnz	r0, b67c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    b66a:	f004 fdff 	bl	1026c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b66e:	b928      	cbnz	r0, b67c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    b670:	f004 fe13 	bl	1029a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b674:	b910      	cbnz	r0, b67c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    b676:	f004 fe24 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b67a:	b118      	cbz	r0, b684 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    b67c:	4919      	ldr	r1, [pc, #100]	; (b6e4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    b67e:	3110      	adds	r1, #16
    b680:	f8c1 8000 	str.w	r8, [r1]
    b684:	f8c5 8008 	str.w	r8, [r5, #8]
    b688:	2002      	movs	r0, #2
    b68a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b68e:	79b0      	ldrb	r0, [r6, #6]
    b690:	b930      	cbnz	r0, b6a0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    b692:	f000 f829 	bl	b6e8 <MPSL_IRQ_CLOCK_Handler+0x310>
    b696:	2002      	movs	r0, #2
    b698:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b69c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    b6a0:	79a0      	ldrb	r0, [r4, #6]
    b6a2:	b170      	cbz	r0, b6c2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    b6a4:	7830      	ldrb	r0, [r6, #0]
    b6a6:	b960      	cbnz	r0, b6c2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    b6a8:	f000 f99c 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b6ac:	4606      	mov	r6, r0
    b6ae:	f000 fa85 	bl	bbbc <mpsl_temperature_get>
    b6b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b6b6:	b116      	cbz	r6, b6be <MPSL_IRQ_CLOCK_Handler+0x2e6>
    b6b8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    b6bc:	e001      	b.n	b6c2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    b6be:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b6c2:	2101      	movs	r1, #1
    b6c4:	4628      	mov	r0, r5
    b6c6:	f004 fd36 	bl	10136 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    b6ca:	b108      	cbz	r0, b6d0 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    b6cc:	f000 f984 	bl	b9d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    b6d0:	72a7      	strb	r7, [r4, #10]
    b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6d6:	0000      	.short	0x0000
    b6d8:	20000308 	.word	0x20000308
    b6dc:	00020001 	.word	0x00020001
    b6e0:	00030001 	.word	0x00030001
    b6e4:	4000053c 	.word	0x4000053c
    b6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6ec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b6f0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b6f4:	f010 0f02 	tst.w	r0, #2
    b6f8:	d011      	beq.n	b71e <MPSL_IRQ_CLOCK_Handler+0x346>
    b6fa:	4c16      	ldr	r4, [pc, #88]	; (b754 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    b6fc:	6820      	ldr	r0, [r4, #0]
    b6fe:	43c0      	mvns	r0, r0
    b700:	f340 1600 	sbfx	r6, r0, #4, #1
    b704:	6820      	ldr	r0, [r4, #0]
    b706:	f040 0010 	orr.w	r0, r0, #16
    b70a:	6020      	str	r0, [r4, #0]
    b70c:	f44f 7782 	mov.w	r7, #260	; 0x104
    b710:	4639      	mov	r1, r7
    b712:	4628      	mov	r0, r5
    b714:	1c76      	adds	r6, r6, #1
    b716:	f004 fd09 	bl	1012c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b71a:	b128      	cbz	r0, b728 <MPSL_IRQ_CLOCK_Handler+0x350>
    b71c:	e00a      	b.n	b734 <MPSL_IRQ_CLOCK_Handler+0x35c>
    b71e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    b722:	206d      	movs	r0, #109	; 0x6d
    b724:	f000 f9d6 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b728:	f004 fe0d 	bl	10346 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    b72c:	e002      	b.n	b734 <MPSL_IRQ_CLOCK_Handler+0x35c>
    b72e:	bf00      	nop
    b730:	f004 fe07 	bl	10342 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b734:	4639      	mov	r1, r7
    b736:	4628      	mov	r0, r5
    b738:	f004 fcf8 	bl	1012c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b73c:	2800      	cmp	r0, #0
    b73e:	d0f7      	beq.n	b730 <MPSL_IRQ_CLOCK_Handler+0x358>
    b740:	f000 f93e 	bl	b9c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b744:	2e00      	cmp	r6, #0
    b746:	d103      	bne.n	b750 <MPSL_IRQ_CLOCK_Handler+0x378>
    b748:	6820      	ldr	r0, [r4, #0]
    b74a:	f020 0010 	bic.w	r0, r0, #16
    b74e:	6020      	str	r0, [r4, #0]
    b750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b754:	e000ed10 	.word	0xe000ed10

0000b758 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    b758:	4801      	ldr	r0, [pc, #4]	; (b760 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    b75a:	89c0      	ldrh	r0, [r0, #14]
    b75c:	4770      	bx	lr
    b75e:	0000      	.short	0x0000
    b760:	20000308 	.word	0x20000308

0000b764 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    b764:	b510      	push	{r4, lr}
    b766:	f3ef 8410 	mrs	r4, PRIMASK
    b76a:	b672      	cpsid	i
    b76c:	480a      	ldr	r0, [pc, #40]	; (b798 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    b76e:	7841      	ldrb	r1, [r0, #1]
    b770:	b129      	cbz	r1, b77e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    b772:	7841      	ldrb	r1, [r0, #1]
    b774:	1e49      	subs	r1, r1, #1
    b776:	7041      	strb	r1, [r0, #1]
    b778:	7841      	ldrb	r1, [r0, #1]
    b77a:	b129      	cbz	r1, b788 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    b77c:	e008      	b.n	b790 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    b77e:	f240 1119 	movw	r1, #281	; 0x119
    b782:	206d      	movs	r0, #109	; 0x6d
    b784:	f000 f9a6 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b788:	7880      	ldrb	r0, [r0, #2]
    b78a:	b908      	cbnz	r0, b790 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    b78c:	f000 f938 	bl	ba00 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    b790:	2c00      	cmp	r4, #0
    b792:	d100      	bne.n	b796 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    b794:	b662      	cpsie	i
    b796:	bd10      	pop	{r4, pc}
    b798:	20000308 	.word	0x20000308

0000b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    b79c:	b510      	push	{r4, lr}
    b79e:	f3ef 8410 	mrs	r4, PRIMASK
    b7a2:	b672      	cpsid	i
    b7a4:	4806      	ldr	r0, [pc, #24]	; (b7c0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    b7a6:	7841      	ldrb	r1, [r0, #1]
    b7a8:	1c49      	adds	r1, r1, #1
    b7aa:	7041      	strb	r1, [r0, #1]
    b7ac:	7840      	ldrb	r0, [r0, #1]
    b7ae:	2801      	cmp	r0, #1
    b7b0:	d101      	bne.n	b7b6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    b7b2:	f004 fcd7 	bl	10164 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    b7b6:	2c00      	cmp	r4, #0
    b7b8:	d100      	bne.n	b7bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    b7ba:	b662      	cpsie	i
    b7bc:	bd10      	pop	{r4, pc}
    b7be:	0000      	.short	0x0000
    b7c0:	20000308 	.word	0x20000308

0000b7c4 <mpsl_clock_hfclk_release>:
    b7c4:	4805      	ldr	r0, [pc, #20]	; (b7dc <mpsl_clock_hfclk_release+0x18>)
    b7c6:	b510      	push	{r4, lr}
    b7c8:	78c1      	ldrb	r1, [r0, #3]
    b7ca:	b121      	cbz	r1, b7d6 <mpsl_clock_hfclk_release+0x12>
    b7cc:	2100      	movs	r1, #0
    b7ce:	7101      	strb	r1, [r0, #4]
    b7d0:	70c1      	strb	r1, [r0, #3]
    b7d2:	f7ff ffc7 	bl	b764 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b7d6:	2000      	movs	r0, #0
    b7d8:	bd10      	pop	{r4, pc}
    b7da:	0000      	.short	0x0000
    b7dc:	20000308 	.word	0x20000308

0000b7e0 <mpsl_clock_hfclk_request>:
    b7e0:	b570      	push	{r4, r5, r6, lr}
    b7e2:	4c0c      	ldr	r4, [pc, #48]	; (b814 <mpsl_clock_hfclk_request+0x34>)
    b7e4:	78e1      	ldrb	r1, [r4, #3]
    b7e6:	b961      	cbnz	r1, b802 <mpsl_clock_hfclk_request+0x22>
    b7e8:	2501      	movs	r5, #1
    b7ea:	70e5      	strb	r5, [r4, #3]
    b7ec:	61e0      	str	r0, [r4, #28]
    b7ee:	f7ff ffd5 	bl	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b7f2:	f000 f8f7 	bl	b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b7f6:	b130      	cbz	r0, b806 <mpsl_clock_hfclk_request+0x26>
    b7f8:	69e0      	ldr	r0, [r4, #28]
    b7fa:	b110      	cbz	r0, b802 <mpsl_clock_hfclk_request+0x22>
    b7fc:	4780      	blx	r0
    b7fe:	2000      	movs	r0, #0
    b800:	61e0      	str	r0, [r4, #28]
    b802:	2000      	movs	r0, #0
    b804:	bd70      	pop	{r4, r5, r6, pc}
    b806:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b80a:	7125      	strb	r5, [r4, #4]
    b80c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    b810:	e7f7      	b.n	b802 <mpsl_clock_hfclk_request+0x22>
    b812:	0000      	.short	0x0000
    b814:	20000308 	.word	0x20000308

0000b818 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b81c:	0005      	movs	r5, r0
    b81e:	f06f 0015 	mvn.w	r0, #21
    b822:	d03f      	beq.n	b8a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    b824:	7829      	ldrb	r1, [r5, #0]
    b826:	2904      	cmp	r1, #4
    b828:	d83c      	bhi.n	b8a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    b82a:	2900      	cmp	r1, #0
    b82c:	7869      	ldrb	r1, [r5, #1]
    b82e:	d03b      	beq.n	b8a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    b830:	2900      	cmp	r1, #0
    b832:	d137      	bne.n	b8a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    b834:	78a9      	ldrb	r1, [r5, #2]
    b836:	2900      	cmp	r1, #0
    b838:	d134      	bne.n	b8a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    b83a:	2000      	movs	r0, #0
    b83c:	f004 fc65 	bl	1010a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    b840:	2000      	movs	r0, #0
    b842:	f004 fc55 	bl	100f0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    b846:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    b84a:	f04f 31ff 	mov.w	r1, #4294967295
    b84e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    b852:	2600      	movs	r6, #0
    b854:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    b858:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    b85c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    b860:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    b864:	4c14      	ldr	r4, [pc, #80]	; (b8b8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    b866:	7066      	strb	r6, [r4, #1]
    b868:	88a8      	ldrh	r0, [r5, #4]
    b86a:	81a0      	strh	r0, [r4, #12]
    b86c:	f004 fc71 	bl	10152 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    b870:	2701      	movs	r7, #1
    b872:	b108      	cbz	r0, b878 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    b874:	70e7      	strb	r7, [r4, #3]
    b876:	7067      	strb	r7, [r4, #1]
    b878:	2101      	movs	r1, #1
    b87a:	4640      	mov	r0, r8
    b87c:	f004 fc5b 	bl	10136 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    b880:	b108      	cbz	r0, b886 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    b882:	f000 f8a9 	bl	b9d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    b886:	f240 50f5 	movw	r0, #1525	; 0x5f5
    b88a:	81e0      	strh	r0, [r4, #14]
    b88c:	4628      	mov	r0, r5
    b88e:	f7ff fe8d 	bl	b5ac <MPSL_IRQ_CLOCK_Handler+0x1d4>
    b892:	7267      	strb	r7, [r4, #9]
    b894:	2000      	movs	r0, #0
    b896:	f004 fc2b 	bl	100f0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    b89a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b89e:	4630      	mov	r0, r6
    b8a0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8a8:	2900      	cmp	r1, #0
    b8aa:	d0fb      	beq.n	b8a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    b8ac:	2920      	cmp	r1, #32
    b8ae:	d8f9      	bhi.n	b8a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    b8b0:	78a9      	ldrb	r1, [r5, #2]
    b8b2:	2921      	cmp	r1, #33	; 0x21
    b8b4:	d9c1      	bls.n	b83a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    b8b6:	e7f5      	b.n	b8a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    b8b8:	20000308 	.word	0x20000308

0000b8bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    b8bc:	4801      	ldr	r0, [pc, #4]	; (b8c4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    b8be:	8980      	ldrh	r0, [r0, #12]
    b8c0:	4770      	bx	lr
    b8c2:	0000      	.short	0x0000
    b8c4:	20000308 	.word	0x20000308

0000b8c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    b8c8:	b510      	push	{r4, lr}
    b8ca:	480d      	ldr	r0, [pc, #52]	; (b900 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    b8cc:	f004 fca2 	bl	10214 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    b8d0:	490b      	ldr	r1, [pc, #44]	; (b900 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    b8d2:	3908      	subs	r1, #8
    b8d4:	b148      	cbz	r0, b8ea <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    b8d6:	2001      	movs	r0, #1
    b8d8:	7008      	strb	r0, [r1, #0]
    b8da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b8de:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8e6:	f7ff bf59 	b.w	b79c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b8ea:	7a88      	ldrb	r0, [r1, #10]
    b8ec:	2802      	cmp	r0, #2
    b8ee:	d101      	bne.n	b8f4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    b8f0:	f7ff fdb6 	bl	b460 <MPSL_IRQ_CLOCK_Handler+0x88>
    b8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8f8:	4801      	ldr	r0, [pc, #4]	; (b900 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    b8fa:	f004 bca2 	b.w	10242 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    b8fe:	0000      	.short	0x0000
    b900:	20000310 	.word	0x20000310

0000b904 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    b904:	4802      	ldr	r0, [pc, #8]	; (b910 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    b906:	7a80      	ldrb	r0, [r0, #10]
    b908:	2800      	cmp	r0, #0
    b90a:	d000      	beq.n	b90e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    b90c:	2001      	movs	r0, #1
    b90e:	4770      	bx	lr
    b910:	20000308 	.word	0x20000308

0000b914 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b916:	4d1f      	ldr	r5, [pc, #124]	; (b994 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    b918:	7ae8      	ldrb	r0, [r5, #11]
    b91a:	2800      	cmp	r0, #0
    b91c:	d10f      	bne.n	b93e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    b91e:	7e28      	ldrb	r0, [r5, #24]
    b920:	f000 0003 	and.w	r0, r0, #3
    b924:	f004 fc23 	bl	1016e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    b928:	2800      	cmp	r0, #0
    b92a:	d008      	beq.n	b93e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    b92c:	f3ef 8110 	mrs	r1, PRIMASK
    b930:	b672      	cpsid	i
    b932:	f7ff ffe7 	bl	b904 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    b936:	b118      	cbz	r0, b940 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    b938:	2900      	cmp	r1, #0
    b93a:	d100      	bne.n	b93e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    b93c:	b662      	cpsie	i
    b93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b940:	2601      	movs	r6, #1
    b942:	72ae      	strb	r6, [r5, #10]
    b944:	b901      	cbnz	r1, b948 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    b946:	b662      	cpsie	i
    b948:	2018      	movs	r0, #24
    b94a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    b94e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b952:	61a6      	str	r6, [r4, #24]
    b954:	f44f 7020 	mov.w	r0, #640	; 0x280
    b958:	f8ad 0000 	strh.w	r0, [sp]
    b95c:	f8bd 0000 	ldrh.w	r0, [sp]
    b960:	1e41      	subs	r1, r0, #1
    b962:	f8ad 1000 	strh.w	r1, [sp]
    b966:	d2f9      	bcs.n	b95c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    b968:	2700      	movs	r7, #0
    b96a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    b96e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    b972:	4808      	ldr	r0, [pc, #32]	; (b994 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    b974:	3008      	adds	r0, #8
    b976:	f004 fc60 	bl	1023a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    b97a:	702f      	strb	r7, [r5, #0]
    b97c:	f7ff fd70 	bl	b460 <MPSL_IRQ_CLOCK_Handler+0x88>
    b980:	6166      	str	r6, [r4, #20]
    b982:	7968      	ldrb	r0, [r5, #5]
    b984:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b988:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b98c:	2018      	movs	r0, #24
    b98e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b994:	20000308 	.word	0x20000308

0000b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    b998:	4602      	mov	r2, r0
    b99a:	b510      	push	{r4, lr}
    b99c:	2000      	movs	r0, #0
    b99e:	2900      	cmp	r1, #0
    b9a0:	d00a      	beq.n	b9b8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    b9a2:	2a00      	cmp	r2, #0
    b9a4:	d008      	beq.n	b9b8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    b9a6:	fba2 0101 	umull	r0, r1, r2, r1
    b9aa:	1e40      	subs	r0, r0, #1
    b9ac:	4a03      	ldr	r2, [pc, #12]	; (b9bc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    b9ae:	f141 31ff 	adc.w	r1, r1, #4294967295
    b9b2:	f004 fcca 	bl	1034a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    b9b6:	1c40      	adds	r0, r0, #1
    b9b8:	bd10      	pop	{r4, pc}
    b9ba:	0000      	.short	0x0000
    b9bc:	000f4240 	.word	0x000f4240

0000b9c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    b9c0:	b510      	push	{r4, lr}
    b9c2:	4c04      	ldr	r4, [pc, #16]	; (b9d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    b9c4:	7e20      	ldrb	r0, [r4, #24]
    b9c6:	f000 0003 	and.w	r0, r0, #3
    b9ca:	f004 fbd0 	bl	1016e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    b9ce:	2800      	cmp	r0, #0
    b9d0:	d0f8      	beq.n	b9c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    b9d2:	bd10      	pop	{r4, pc}
    b9d4:	20000308 	.word	0x20000308

0000b9d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    b9d8:	4901      	ldr	r1, [pc, #4]	; (b9e0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    b9da:	2001      	movs	r0, #1
    b9dc:	7008      	strb	r0, [r1, #0]
    b9de:	4770      	bx	lr
    b9e0:	20000381 	.word	0x20000381

0000b9e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    b9e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b9e8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b9ec:	b918      	cbnz	r0, b9f6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    b9ee:	4803      	ldr	r0, [pc, #12]	; (b9fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    b9f0:	7800      	ldrb	r0, [r0, #0]
    b9f2:	2800      	cmp	r0, #0
    b9f4:	d000      	beq.n	b9f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    b9f6:	2001      	movs	r0, #1
    b9f8:	4770      	bx	lr
    b9fa:	0000      	.short	0x0000
    b9fc:	20000381 	.word	0x20000381

0000ba00 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    ba00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ba04:	2101      	movs	r1, #1
    ba06:	6041      	str	r1, [r0, #4]
    ba08:	2100      	movs	r1, #0
    ba0a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ba0e:	4801      	ldr	r0, [pc, #4]	; (ba14 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    ba10:	7001      	strb	r1, [r0, #0]
    ba12:	4770      	bx	lr
    ba14:	20000381 	.word	0x20000381

0000ba18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    ba18:	4802      	ldr	r0, [pc, #8]	; (ba24 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    ba1a:	6800      	ldr	r0, [r0, #0]
    ba1c:	f000 0003 	and.w	r0, r0, #3
    ba20:	4770      	bx	lr
    ba22:	0000      	.short	0x0000
    ba24:	4000041c 	.word	0x4000041c
    ba28:	b510      	push	{r4, lr}
    ba2a:	b131      	cbz	r1, ba3a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    ba2c:	2901      	cmp	r1, #1
    ba2e:	d007      	beq.n	ba40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    ba30:	f240 3102 	movw	r1, #770	; 0x302
    ba34:	a005      	add	r0, pc, #20	; (adr r0, ba4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    ba36:	f000 f821 	bl	ba7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    ba3a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    ba3e:	e001      	b.n	ba44 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    ba40:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    ba44:	f000 0001 	and.w	r0, r0, #1
    ba48:	bd10      	pop	{r4, pc}
    ba4a:	0000      	.short	0x0000
    ba4c:	5f66726e 	.word	0x5f66726e
    ba50:	636f6c63 	.word	0x636f6c63
    ba54:	00682e6b 	.word	0x00682e6b
    ba58:	f3bf 8f4f 	dsb	sy
    ba5c:	4805      	ldr	r0, [pc, #20]	; (ba74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    ba5e:	6801      	ldr	r1, [r0, #0]
    ba60:	4a05      	ldr	r2, [pc, #20]	; (ba78 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    ba62:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    ba66:	4311      	orrs	r1, r2
    ba68:	6001      	str	r1, [r0, #0]
    ba6a:	f3bf 8f4f 	dsb	sy
    ba6e:	bf00      	nop
    ba70:	e7fd      	b.n	ba6e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    ba72:	0000      	.short	0x0000
    ba74:	e000ed0c 	.word	0xe000ed0c
    ba78:	05fa0004 	.word	0x05fa0004

0000ba7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    ba7c:	b672      	cpsid	i
    ba7e:	4a03      	ldr	r2, [pc, #12]	; (ba8c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    ba80:	6852      	ldr	r2, [r2, #4]
    ba82:	b102      	cbz	r2, ba86 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    ba84:	4790      	blx	r2
    ba86:	f7ff ffe7 	bl	ba58 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    ba8a:	0000      	.short	0x0000
    ba8c:	20000328 	.word	0x20000328
    ba90:	4806      	ldr	r0, [pc, #24]	; (baac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    ba92:	b510      	push	{r4, lr}
    ba94:	2100      	movs	r1, #0
    ba96:	6001      	str	r1, [r0, #0]
    ba98:	2101      	movs	r1, #1
    ba9a:	6001      	str	r1, [r0, #0]
    ba9c:	4608      	mov	r0, r1
    ba9e:	f004 fb8d 	bl	101bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    baa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    baa6:	2001      	movs	r0, #1
    baa8:	f004 bb7b 	b.w	101a2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    baac:	40001ffc 	.word	0x40001ffc
    bab0:	4807      	ldr	r0, [pc, #28]	; (bad0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    bab2:	b510      	push	{r4, lr}
    bab4:	2101      	movs	r1, #1
    bab6:	6041      	str	r1, [r0, #4]
    bab8:	1e89      	subs	r1, r1, #2
    baba:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    babe:	200c      	movs	r0, #12
    bac0:	f004 fb7c 	bl	101bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    bac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bac8:	200c      	movs	r0, #12
    baca:	f004 bb6a 	b.w	101a2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    bace:	0000      	.short	0x0000
    bad0:	4000c000 	.word	0x4000c000

0000bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    bad4:	b50e      	push	{r1, r2, r3, lr}
    bad6:	b672      	cpsid	i
    bad8:	4a0f      	ldr	r2, [pc, #60]	; (bb18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    bada:	6855      	ldr	r5, [r2, #4]
    badc:	b1d5      	cbz	r5, bb14 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    bade:	2200      	movs	r2, #0
    bae0:	4603      	mov	r3, r0
    bae2:	466e      	mov	r6, sp
    bae4:	240a      	movs	r4, #10
    bae6:	e003      	b.n	baf0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    bae8:	fbb0 f0f4 	udiv	r0, r0, r4
    baec:	1c52      	adds	r2, r2, #1
    baee:	b2d2      	uxtb	r2, r2
    baf0:	2800      	cmp	r0, #0
    baf2:	d1f9      	bne.n	bae8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    baf4:	54b0      	strb	r0, [r6, r2]
    baf6:	e009      	b.n	bb0c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    baf8:	fbb3 f0f4 	udiv	r0, r3, r4
    bafc:	fb04 3010 	mls	r0, r4, r0, r3
    bb00:	fbb3 f3f4 	udiv	r3, r3, r4
    bb04:	1e52      	subs	r2, r2, #1
    bb06:	b2d2      	uxtb	r2, r2
    bb08:	3030      	adds	r0, #48	; 0x30
    bb0a:	54b0      	strb	r0, [r6, r2]
    bb0c:	2a00      	cmp	r2, #0
    bb0e:	d1f3      	bne.n	baf8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    bb10:	4630      	mov	r0, r6
    bb12:	47a8      	blx	r5
    bb14:	f7ff ffa0 	bl	ba58 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    bb18:	20000328 	.word	0x20000328

0000bb1c <mpsl_init>:
    bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb20:	4c18      	ldr	r4, [pc, #96]	; (bb84 <mpsl_init+0x68>)
    bb22:	4606      	mov	r6, r0
    bb24:	4617      	mov	r7, r2
    bb26:	7860      	ldrb	r0, [r4, #1]
    bb28:	460d      	mov	r5, r1
    bb2a:	b118      	cbz	r0, bb34 <mpsl_init+0x18>
    bb2c:	f04f 30ff 	mov.w	r0, #4294967295
    bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb34:	f7fc fc06 	bl	8344 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    bb38:	b906      	cbnz	r6, bb3c <mpsl_init+0x20>
    bb3a:	4e13      	ldr	r6, [pc, #76]	; (bb88 <mpsl_init+0x6c>)
    bb3c:	6067      	str	r7, [r4, #4]
    bb3e:	7025      	strb	r5, [r4, #0]
    bb40:	f7ff ffa6 	bl	ba90 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    bb44:	f7ff ffb4 	bl	bab0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    bb48:	4630      	mov	r0, r6
    bb4a:	f7ff fe65 	bl	b818 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    bb4e:	0006      	movs	r6, r0
    bb50:	d1ee      	bne.n	bb30 <mpsl_init+0x14>
    bb52:	f7fe fe45 	bl	a7e0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    bb56:	f7ff fedd 	bl	b914 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bb5a:	f004 fa98 	bl	1008e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    bb5e:	4628      	mov	r0, r5
    bb60:	f004 fb1f 	bl	101a2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    bb64:	2001      	movs	r0, #1
    bb66:	2d00      	cmp	r5, #0
    bb68:	db09      	blt.n	bb7e <mpsl_init+0x62>
    bb6a:	f005 011f 	and.w	r1, r5, #31
    bb6e:	fa00 f101 	lsl.w	r1, r0, r1
    bb72:	096a      	lsrs	r2, r5, #5
    bb74:	0092      	lsls	r2, r2, #2
    bb76:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    bb7a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    bb7e:	7060      	strb	r0, [r4, #1]
    bb80:	4630      	mov	r0, r6
    bb82:	e7d5      	b.n	bb30 <mpsl_init+0x14>
    bb84:	20000328 	.word	0x20000328
    bb88:	000101de 	.word	0x000101de

0000bb8c <mpsl_is_initialized>:
    bb8c:	4801      	ldr	r0, [pc, #4]	; (bb94 <mpsl_is_initialized+0x8>)
    bb8e:	7840      	ldrb	r0, [r0, #1]
    bb90:	4770      	bx	lr
    bb92:	0000      	.short	0x0000
    bb94:	20000328 	.word	0x20000328

0000bb98 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    bb98:	4807      	ldr	r0, [pc, #28]	; (bbb8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    bb9a:	f990 0000 	ldrsb.w	r0, [r0]
    bb9e:	2800      	cmp	r0, #0
    bba0:	db09      	blt.n	bbb6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    bba2:	f000 021f 	and.w	r2, r0, #31
    bba6:	2101      	movs	r1, #1
    bba8:	4091      	lsls	r1, r2
    bbaa:	0940      	lsrs	r0, r0, #5
    bbac:	0080      	lsls	r0, r0, #2
    bbae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bbb2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bbb6:	4770      	bx	lr
    bbb8:	20000328 	.word	0x20000328

0000bbbc <mpsl_temperature_get>:
    bbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbc0:	2601      	movs	r6, #1
    bbc2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bbc6:	0331      	lsls	r1, r6, #12
    bbc8:	f04f 0800 	mov.w	r8, #0
    bbcc:	4640      	mov	r0, r8
    bbce:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    bbd2:	f3bf 8f4f 	dsb	sy
    bbd6:	f3bf 8f6f 	isb	sy
    bbda:	4c16      	ldr	r4, [pc, #88]	; (bc34 <mpsl_temperature_get+0x78>)
    bbdc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    bbe0:	200c      	movs	r0, #12
    bbe2:	f004 fb0a 	bl	101fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    bbe6:	4d14      	ldr	r5, [pc, #80]	; (bc38 <mpsl_temperature_get+0x7c>)
    bbe8:	6828      	ldr	r0, [r5, #0]
    bbea:	43c0      	mvns	r0, r0
    bbec:	f340 1700 	sbfx	r7, r0, #4, #1
    bbf0:	6828      	ldr	r0, [r5, #0]
    bbf2:	f040 0010 	orr.w	r0, r0, #16
    bbf6:	6028      	str	r0, [r5, #0]
    bbf8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    bbfc:	6026      	str	r6, [r4, #0]
    bbfe:	1c7f      	adds	r7, r7, #1
    bc00:	e002      	b.n	bc08 <mpsl_temperature_get+0x4c>
    bc02:	bf00      	nop
    bc04:	f004 fb9d 	bl	10342 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bc08:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    bc0c:	2800      	cmp	r0, #0
    bc0e:	d0f9      	beq.n	bc04 <mpsl_temperature_get+0x48>
    bc10:	b91f      	cbnz	r7, bc1a <mpsl_temperature_get+0x5e>
    bc12:	6828      	ldr	r0, [r5, #0]
    bc14:	f020 0010 	bic.w	r0, r0, #16
    bc18:	6028      	str	r0, [r5, #0]
    bc1a:	4808      	ldr	r0, [pc, #32]	; (bc3c <mpsl_temperature_get+0x80>)
    bc1c:	6805      	ldr	r5, [r0, #0]
    bc1e:	6066      	str	r6, [r4, #4]
    bc20:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    bc24:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    bc28:	200c      	movs	r0, #12
    bc2a:	f004 fae6 	bl	101fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    bc2e:	4628      	mov	r0, r5
    bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc34:	4000c000 	.word	0x4000c000
    bc38:	e000ed10 	.word	0xe000ed10
    bc3c:	4000c508 	.word	0x4000c508

0000bc40 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    bc40:	b510      	push	{r4, lr}
    bc42:	4602      	mov	r2, r0
    bc44:	2005      	movs	r0, #5
    bc46:	490c      	ldr	r1, [pc, #48]	; (bc78 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    bc48:	e004      	b.n	bc54 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    bc4a:	bf00      	nop
    bc4c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    bc50:	791b      	ldrb	r3, [r3, #4]
    bc52:	b133      	cbz	r3, bc62 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    bc54:	1e40      	subs	r0, r0, #1
    bc56:	b2c0      	uxtb	r0, r0
    bc58:	d2f8      	bcs.n	bc4c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    bc5a:	2148      	movs	r1, #72	; 0x48
    bc5c:	2069      	movs	r0, #105	; 0x69
    bc5e:	f7ff ff39 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc62:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    bc66:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    bc6a:	2200      	movs	r2, #0
    bc6c:	714a      	strb	r2, [r1, #5]
    bc6e:	718a      	strb	r2, [r1, #6]
    bc70:	2201      	movs	r2, #1
    bc72:	710a      	strb	r2, [r1, #4]
    bc74:	bd10      	pop	{r4, pc}
    bc76:	0000      	.short	0x0000
    bc78:	20001078 	.word	0x20001078

0000bc7c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    bc7c:	b510      	push	{r4, lr}
    bc7e:	2805      	cmp	r0, #5
    bc80:	d301      	bcc.n	bc86 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    bc82:	2158      	movs	r1, #88	; 0x58
    bc84:	e006      	b.n	bc94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    bc86:	490a      	ldr	r1, [pc, #40]	; (bcb0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    bc88:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    bc8c:	7901      	ldrb	r1, [r0, #4]
    bc8e:	2901      	cmp	r1, #1
    bc90:	d003      	beq.n	bc9a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    bc92:	2159      	movs	r1, #89	; 0x59
    bc94:	2069      	movs	r0, #105	; 0x69
    bc96:	f7ff ff1d 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc9a:	7941      	ldrb	r1, [r0, #5]
    bc9c:	7982      	ldrb	r2, [r0, #6]
    bc9e:	1c49      	adds	r1, r1, #1
    bca0:	b2c9      	uxtb	r1, r1
    bca2:	428a      	cmp	r2, r1
    bca4:	d000      	beq.n	bca8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    bca6:	7141      	strb	r1, [r0, #5]
    bca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bcac:	f7ff bf74 	b.w	bb98 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    bcb0:	20001078 	.word	0x20001078

0000bcb4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    bcb4:	b510      	push	{r4, lr}
    bcb6:	2805      	cmp	r0, #5
    bcb8:	d303      	bcc.n	bcc2 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    bcba:	214f      	movs	r1, #79	; 0x4f
    bcbc:	2069      	movs	r0, #105	; 0x69
    bcbe:	f7ff ff09 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bcc2:	4a03      	ldr	r2, [pc, #12]	; (bcd0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    bcc4:	2100      	movs	r1, #0
    bcc6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    bcca:	7101      	strb	r1, [r0, #4]
    bccc:	bd10      	pop	{r4, pc}
    bcce:	0000      	.short	0x0000
    bcd0:	20001078 	.word	0x20001078

0000bcd4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    bcd4:	b570      	push	{r4, r5, r6, lr}
    bcd6:	2505      	movs	r5, #5
    bcd8:	4e0e      	ldr	r6, [pc, #56]	; (bd14 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    bcda:	4c0f      	ldr	r4, [pc, #60]	; (bd18 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    bcdc:	e016      	b.n	bd0c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    bcde:	7821      	ldrb	r1, [r4, #0]
    bce0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    bce4:	7902      	ldrb	r2, [r0, #4]
    bce6:	2a01      	cmp	r2, #1
    bce8:	d108      	bne.n	bcfc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    bcea:	7942      	ldrb	r2, [r0, #5]
    bcec:	7983      	ldrb	r3, [r0, #6]
    bcee:	429a      	cmp	r2, r3
    bcf0:	d004      	beq.n	bcfc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    bcf2:	7942      	ldrb	r2, [r0, #5]
    bcf4:	7182      	strb	r2, [r0, #6]
    bcf6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    bcfa:	4780      	blx	r0
    bcfc:	7820      	ldrb	r0, [r4, #0]
    bcfe:	1c40      	adds	r0, r0, #1
    bd00:	b2c0      	uxtb	r0, r0
    bd02:	7020      	strb	r0, [r4, #0]
    bd04:	2805      	cmp	r0, #5
    bd06:	d301      	bcc.n	bd0c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    bd08:	2000      	movs	r0, #0
    bd0a:	7020      	strb	r0, [r4, #0]
    bd0c:	1e6d      	subs	r5, r5, #1
    bd0e:	b2ed      	uxtb	r5, r5
    bd10:	d2e5      	bcs.n	bcde <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    bd12:	bd70      	pop	{r4, r5, r6, pc}
    bd14:	20001078 	.word	0x20001078
    bd18:	20000382 	.word	0x20000382

0000bd1c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    bd1c:	b500      	push	{lr}
    bd1e:	f004 fa9b 	bl	10258 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bd22:	b940      	cbnz	r0, bd36 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    bd24:	f004 faa2 	bl	1026c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bd28:	b928      	cbnz	r0, bd36 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    bd2a:	f004 fab6 	bl	1029a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bd2e:	b910      	cbnz	r0, bd36 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    bd30:	f004 fac7 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd34:	b108      	cbz	r0, bd3a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    bd36:	4802      	ldr	r0, [pc, #8]	; (bd40 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    bd38:	bd00      	pop	{pc}
    bd3a:	4802      	ldr	r0, [pc, #8]	; (bd44 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    bd3c:	bd00      	pop	{pc}
    bd3e:	0000      	.short	0x0000
    bd40:	4000050c 	.word	0x4000050c
    bd44:	4001e700 	.word	0x4001e700
    bd48:	b510      	push	{r4, lr}
    bd4a:	f004 faba 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd4e:	b330      	cbz	r0, bd9e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    bd50:	f3ef 8010 	mrs	r0, PRIMASK
    bd54:	b1c8      	cbz	r0, bd8a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    bd56:	2100      	movs	r1, #0
    bd58:	b672      	cpsid	i
    bd5a:	4812      	ldr	r0, [pc, #72]	; (bda4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    bd5c:	6802      	ldr	r2, [r0, #0]
    bd5e:	6803      	ldr	r3, [r0, #0]
    bd60:	f3c2 1200 	ubfx	r2, r2, #4, #1
    bd64:	f043 0310 	orr.w	r3, r3, #16
    bd68:	6003      	str	r3, [r0, #0]
    bd6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bd6e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    bd72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    bd76:	431c      	orrs	r4, r3
    bd78:	d000      	beq.n	bd7c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    bd7a:	bf40      	sev
    bd7c:	bf20      	wfe
    bd7e:	bf00      	nop
    bd80:	bf00      	nop
    bd82:	bf00      	nop
    bd84:	bf00      	nop
    bd86:	b112      	cbz	r2, bd8e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    bd88:	e005      	b.n	bd96 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    bd8a:	2101      	movs	r1, #1
    bd8c:	e7e4      	b.n	bd58 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    bd8e:	6802      	ldr	r2, [r0, #0]
    bd90:	f022 0210 	bic.w	r2, r2, #16
    bd94:	6002      	str	r2, [r0, #0]
    bd96:	2900      	cmp	r1, #0
    bd98:	d000      	beq.n	bd9c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    bd9a:	b662      	cpsie	i
    bd9c:	bd10      	pop	{r4, pc}
    bd9e:	bf20      	wfe
    bda0:	bd10      	pop	{r4, pc}
    bda2:	0000      	.short	0x0000
    bda4:	e000ed10 	.word	0xe000ed10

0000bda8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    bda8:	4901      	ldr	r1, [pc, #4]	; (bdb0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    bdaa:	2001      	movs	r0, #1
    bdac:	7088      	strb	r0, [r1, #2]
    bdae:	4770      	bx	lr
    bdb0:	20000330 	.word	0x20000330

0000bdb4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    bdb4:	000105a5 000105dd 000105c7 000105b5     ................
    bdc4:	000105c1 000105af 000105a3 000105a1     ................
    bdd4:	000105d9 000105cd 000105bb 000105a9     ................
    bde4:	0001059b 00010593 00010597 0001058d     ................

0000bdf4 <mpsl_fem_disable>:
    bdf4:	4801      	ldr	r0, [pc, #4]	; (bdfc <mpsl_fem_disable+0x8>)
    bdf6:	6800      	ldr	r0, [r0, #0]
    bdf8:	6800      	ldr	r0, [r0, #0]
    bdfa:	4700      	bx	r0
    bdfc:	20000344 	.word	0x20000344

0000be00 <mpsl_fem_lna_configuration_clear>:
    be00:	4801      	ldr	r0, [pc, #4]	; (be08 <mpsl_fem_lna_configuration_clear+0x8>)
    be02:	6800      	ldr	r0, [r0, #0]
    be04:	6940      	ldr	r0, [r0, #20]
    be06:	4700      	bx	r0
    be08:	20000344 	.word	0x20000344

0000be0c <mpsl_fem_lna_configuration_set>:
    be0c:	4a01      	ldr	r2, [pc, #4]	; (be14 <mpsl_fem_lna_configuration_set+0x8>)
    be0e:	6812      	ldr	r2, [r2, #0]
    be10:	68d2      	ldr	r2, [r2, #12]
    be12:	4710      	bx	r2
    be14:	20000344 	.word	0x20000344

0000be18 <mpsl_fem_lna_is_configured>:
    be18:	4901      	ldr	r1, [pc, #4]	; (be20 <mpsl_fem_lna_is_configured+0x8>)
    be1a:	6809      	ldr	r1, [r1, #0]
    be1c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    be1e:	4708      	bx	r1
    be20:	20000344 	.word	0x20000344

0000be24 <mpsl_fem_pa_configuration_clear>:
    be24:	4801      	ldr	r0, [pc, #4]	; (be2c <mpsl_fem_pa_configuration_clear+0x8>)
    be26:	6800      	ldr	r0, [r0, #0]
    be28:	6900      	ldr	r0, [r0, #16]
    be2a:	4700      	bx	r0
    be2c:	20000344 	.word	0x20000344

0000be30 <mpsl_fem_pa_configuration_set>:
    be30:	4a01      	ldr	r2, [pc, #4]	; (be38 <mpsl_fem_pa_configuration_set+0x8>)
    be32:	6812      	ldr	r2, [r2, #0]
    be34:	6892      	ldr	r2, [r2, #8]
    be36:	4710      	bx	r2
    be38:	20000344 	.word	0x20000344

0000be3c <mpsl_fem_pa_gain_set>:
    be3c:	4901      	ldr	r1, [pc, #4]	; (be44 <mpsl_fem_pa_gain_set+0x8>)
    be3e:	6809      	ldr	r1, [r1, #0]
    be40:	6a49      	ldr	r1, [r1, #36]	; 0x24
    be42:	4708      	bx	r1
    be44:	20000344 	.word	0x20000344

0000be48 <mpsl_fem_pa_is_configured>:
    be48:	4901      	ldr	r1, [pc, #4]	; (be50 <mpsl_fem_pa_is_configured+0x8>)
    be4a:	6809      	ldr	r1, [r1, #0]
    be4c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    be4e:	4708      	bx	r1
    be50:	20000344 	.word	0x20000344

0000be54 <mpsl_fem_tx_power_split>:
    be54:	b430      	push	{r4, r5}
    be56:	4c03      	ldr	r4, [pc, #12]	; (be64 <mpsl_fem_tx_power_split+0x10>)
    be58:	6824      	ldr	r4, [r4, #0]
    be5a:	6864      	ldr	r4, [r4, #4]
    be5c:	46a4      	mov	ip, r4
    be5e:	bc30      	pop	{r4, r5}
    be60:	4760      	bx	ip
    be62:	0000      	.short	0x0000
    be64:	20000344 	.word	0x20000344

0000be68 <mpsl_fem_device_config_254_apply_get>:
    be68:	4801      	ldr	r0, [pc, #4]	; (be70 <mpsl_fem_device_config_254_apply_get+0x8>)
    be6a:	7800      	ldrb	r0, [r0, #0]
    be6c:	4770      	bx	lr
    be6e:	0000      	.short	0x0000
    be70:	20000383 	.word	0x20000383

0000be74 <__udivmoddi4>:
    be74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be78:	4686      	mov	lr, r0
    be7a:	468c      	mov	ip, r1
    be7c:	4608      	mov	r0, r1
    be7e:	9e08      	ldr	r6, [sp, #32]
    be80:	4615      	mov	r5, r2
    be82:	4674      	mov	r4, lr
    be84:	4619      	mov	r1, r3
    be86:	2b00      	cmp	r3, #0
    be88:	f040 80c2 	bne.w	c010 <__udivmoddi4+0x19c>
    be8c:	4285      	cmp	r5, r0
    be8e:	fab2 f282 	clz	r2, r2
    be92:	d945      	bls.n	bf20 <__udivmoddi4+0xac>
    be94:	b14a      	cbz	r2, beaa <__udivmoddi4+0x36>
    be96:	f1c2 0320 	rsb	r3, r2, #32
    be9a:	fa00 fc02 	lsl.w	ip, r0, r2
    be9e:	fa2e f303 	lsr.w	r3, lr, r3
    bea2:	4095      	lsls	r5, r2
    bea4:	ea43 0c0c 	orr.w	ip, r3, ip
    bea8:	4094      	lsls	r4, r2
    beaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    beae:	b2a8      	uxth	r0, r5
    beb0:	fbbc f8fe 	udiv	r8, ip, lr
    beb4:	0c23      	lsrs	r3, r4, #16
    beb6:	fb0e cc18 	mls	ip, lr, r8, ip
    beba:	fb08 f900 	mul.w	r9, r8, r0
    bebe:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    bec2:	4599      	cmp	r9, r3
    bec4:	d928      	bls.n	bf18 <__udivmoddi4+0xa4>
    bec6:	18eb      	adds	r3, r5, r3
    bec8:	f108 37ff 	add.w	r7, r8, #4294967295
    becc:	d204      	bcs.n	bed8 <__udivmoddi4+0x64>
    bece:	4599      	cmp	r9, r3
    bed0:	d902      	bls.n	bed8 <__udivmoddi4+0x64>
    bed2:	f1a8 0702 	sub.w	r7, r8, #2
    bed6:	442b      	add	r3, r5
    bed8:	eba3 0309 	sub.w	r3, r3, r9
    bedc:	b2a4      	uxth	r4, r4
    bede:	fbb3 fcfe 	udiv	ip, r3, lr
    bee2:	fb0e 331c 	mls	r3, lr, ip, r3
    bee6:	fb0c f000 	mul.w	r0, ip, r0
    beea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    beee:	42a0      	cmp	r0, r4
    bef0:	d914      	bls.n	bf1c <__udivmoddi4+0xa8>
    bef2:	192c      	adds	r4, r5, r4
    bef4:	f10c 33ff 	add.w	r3, ip, #4294967295
    bef8:	d204      	bcs.n	bf04 <__udivmoddi4+0x90>
    befa:	42a0      	cmp	r0, r4
    befc:	d902      	bls.n	bf04 <__udivmoddi4+0x90>
    befe:	f1ac 0302 	sub.w	r3, ip, #2
    bf02:	442c      	add	r4, r5
    bf04:	1a24      	subs	r4, r4, r0
    bf06:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    bf0a:	b11e      	cbz	r6, bf14 <__udivmoddi4+0xa0>
    bf0c:	40d4      	lsrs	r4, r2
    bf0e:	2300      	movs	r3, #0
    bf10:	6034      	str	r4, [r6, #0]
    bf12:	6073      	str	r3, [r6, #4]
    bf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf18:	4647      	mov	r7, r8
    bf1a:	e7dd      	b.n	bed8 <__udivmoddi4+0x64>
    bf1c:	4663      	mov	r3, ip
    bf1e:	e7f1      	b.n	bf04 <__udivmoddi4+0x90>
    bf20:	bb92      	cbnz	r2, bf88 <__udivmoddi4+0x114>
    bf22:	1b43      	subs	r3, r0, r5
    bf24:	2101      	movs	r1, #1
    bf26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bf2a:	b2af      	uxth	r7, r5
    bf2c:	fbb3 fcfe 	udiv	ip, r3, lr
    bf30:	0c20      	lsrs	r0, r4, #16
    bf32:	fb0e 331c 	mls	r3, lr, ip, r3
    bf36:	fb0c f807 	mul.w	r8, ip, r7
    bf3a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    bf3e:	4598      	cmp	r8, r3
    bf40:	d962      	bls.n	c008 <__udivmoddi4+0x194>
    bf42:	18eb      	adds	r3, r5, r3
    bf44:	f10c 30ff 	add.w	r0, ip, #4294967295
    bf48:	d204      	bcs.n	bf54 <__udivmoddi4+0xe0>
    bf4a:	4598      	cmp	r8, r3
    bf4c:	d902      	bls.n	bf54 <__udivmoddi4+0xe0>
    bf4e:	f1ac 0002 	sub.w	r0, ip, #2
    bf52:	442b      	add	r3, r5
    bf54:	eba3 0308 	sub.w	r3, r3, r8
    bf58:	b2a4      	uxth	r4, r4
    bf5a:	fbb3 fcfe 	udiv	ip, r3, lr
    bf5e:	fb0e 331c 	mls	r3, lr, ip, r3
    bf62:	fb0c f707 	mul.w	r7, ip, r7
    bf66:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    bf6a:	42a7      	cmp	r7, r4
    bf6c:	d94e      	bls.n	c00c <__udivmoddi4+0x198>
    bf6e:	192c      	adds	r4, r5, r4
    bf70:	f10c 33ff 	add.w	r3, ip, #4294967295
    bf74:	d204      	bcs.n	bf80 <__udivmoddi4+0x10c>
    bf76:	42a7      	cmp	r7, r4
    bf78:	d902      	bls.n	bf80 <__udivmoddi4+0x10c>
    bf7a:	f1ac 0302 	sub.w	r3, ip, #2
    bf7e:	442c      	add	r4, r5
    bf80:	1be4      	subs	r4, r4, r7
    bf82:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bf86:	e7c0      	b.n	bf0a <__udivmoddi4+0x96>
    bf88:	f1c2 0320 	rsb	r3, r2, #32
    bf8c:	fa20 f103 	lsr.w	r1, r0, r3
    bf90:	4095      	lsls	r5, r2
    bf92:	4090      	lsls	r0, r2
    bf94:	fa2e f303 	lsr.w	r3, lr, r3
    bf98:	4303      	orrs	r3, r0
    bf9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bf9e:	b2af      	uxth	r7, r5
    bfa0:	fbb1 fcfe 	udiv	ip, r1, lr
    bfa4:	fb0e 101c 	mls	r0, lr, ip, r1
    bfa8:	0c19      	lsrs	r1, r3, #16
    bfaa:	fb0c f807 	mul.w	r8, ip, r7
    bfae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bfb2:	4588      	cmp	r8, r1
    bfb4:	fa04 f402 	lsl.w	r4, r4, r2
    bfb8:	d922      	bls.n	c000 <__udivmoddi4+0x18c>
    bfba:	1869      	adds	r1, r5, r1
    bfbc:	f10c 30ff 	add.w	r0, ip, #4294967295
    bfc0:	d204      	bcs.n	bfcc <__udivmoddi4+0x158>
    bfc2:	4588      	cmp	r8, r1
    bfc4:	d902      	bls.n	bfcc <__udivmoddi4+0x158>
    bfc6:	f1ac 0002 	sub.w	r0, ip, #2
    bfca:	4429      	add	r1, r5
    bfcc:	eba1 0108 	sub.w	r1, r1, r8
    bfd0:	b29b      	uxth	r3, r3
    bfd2:	fbb1 fcfe 	udiv	ip, r1, lr
    bfd6:	fb0e 111c 	mls	r1, lr, ip, r1
    bfda:	fb0c f707 	mul.w	r7, ip, r7
    bfde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    bfe2:	429f      	cmp	r7, r3
    bfe4:	d90e      	bls.n	c004 <__udivmoddi4+0x190>
    bfe6:	18eb      	adds	r3, r5, r3
    bfe8:	f10c 31ff 	add.w	r1, ip, #4294967295
    bfec:	d204      	bcs.n	bff8 <__udivmoddi4+0x184>
    bfee:	429f      	cmp	r7, r3
    bff0:	d902      	bls.n	bff8 <__udivmoddi4+0x184>
    bff2:	f1ac 0102 	sub.w	r1, ip, #2
    bff6:	442b      	add	r3, r5
    bff8:	1bdb      	subs	r3, r3, r7
    bffa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bffe:	e792      	b.n	bf26 <__udivmoddi4+0xb2>
    c000:	4660      	mov	r0, ip
    c002:	e7e3      	b.n	bfcc <__udivmoddi4+0x158>
    c004:	4661      	mov	r1, ip
    c006:	e7f7      	b.n	bff8 <__udivmoddi4+0x184>
    c008:	4660      	mov	r0, ip
    c00a:	e7a3      	b.n	bf54 <__udivmoddi4+0xe0>
    c00c:	4663      	mov	r3, ip
    c00e:	e7b7      	b.n	bf80 <__udivmoddi4+0x10c>
    c010:	4283      	cmp	r3, r0
    c012:	d906      	bls.n	c022 <__udivmoddi4+0x1ae>
    c014:	b916      	cbnz	r6, c01c <__udivmoddi4+0x1a8>
    c016:	2100      	movs	r1, #0
    c018:	4608      	mov	r0, r1
    c01a:	e77b      	b.n	bf14 <__udivmoddi4+0xa0>
    c01c:	e9c6 e000 	strd	lr, r0, [r6]
    c020:	e7f9      	b.n	c016 <__udivmoddi4+0x1a2>
    c022:	fab3 f783 	clz	r7, r3
    c026:	b98f      	cbnz	r7, c04c <__udivmoddi4+0x1d8>
    c028:	4283      	cmp	r3, r0
    c02a:	d301      	bcc.n	c030 <__udivmoddi4+0x1bc>
    c02c:	4572      	cmp	r2, lr
    c02e:	d808      	bhi.n	c042 <__udivmoddi4+0x1ce>
    c030:	ebbe 0402 	subs.w	r4, lr, r2
    c034:	eb60 0303 	sbc.w	r3, r0, r3
    c038:	2001      	movs	r0, #1
    c03a:	469c      	mov	ip, r3
    c03c:	b91e      	cbnz	r6, c046 <__udivmoddi4+0x1d2>
    c03e:	2100      	movs	r1, #0
    c040:	e768      	b.n	bf14 <__udivmoddi4+0xa0>
    c042:	4638      	mov	r0, r7
    c044:	e7fa      	b.n	c03c <__udivmoddi4+0x1c8>
    c046:	e9c6 4c00 	strd	r4, ip, [r6]
    c04a:	e7f8      	b.n	c03e <__udivmoddi4+0x1ca>
    c04c:	f1c7 0c20 	rsb	ip, r7, #32
    c050:	40bb      	lsls	r3, r7
    c052:	fa22 f40c 	lsr.w	r4, r2, ip
    c056:	431c      	orrs	r4, r3
    c058:	fa2e f10c 	lsr.w	r1, lr, ip
    c05c:	fa20 f30c 	lsr.w	r3, r0, ip
    c060:	40b8      	lsls	r0, r7
    c062:	4301      	orrs	r1, r0
    c064:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c068:	fa0e f507 	lsl.w	r5, lr, r7
    c06c:	fbb3 f8f9 	udiv	r8, r3, r9
    c070:	fa1f fe84 	uxth.w	lr, r4
    c074:	fb09 3018 	mls	r0, r9, r8, r3
    c078:	0c0b      	lsrs	r3, r1, #16
    c07a:	fb08 fa0e 	mul.w	sl, r8, lr
    c07e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c082:	459a      	cmp	sl, r3
    c084:	fa02 f207 	lsl.w	r2, r2, r7
    c088:	d940      	bls.n	c10c <__udivmoddi4+0x298>
    c08a:	18e3      	adds	r3, r4, r3
    c08c:	f108 30ff 	add.w	r0, r8, #4294967295
    c090:	d204      	bcs.n	c09c <__udivmoddi4+0x228>
    c092:	459a      	cmp	sl, r3
    c094:	d902      	bls.n	c09c <__udivmoddi4+0x228>
    c096:	f1a8 0002 	sub.w	r0, r8, #2
    c09a:	4423      	add	r3, r4
    c09c:	eba3 030a 	sub.w	r3, r3, sl
    c0a0:	b289      	uxth	r1, r1
    c0a2:	fbb3 f8f9 	udiv	r8, r3, r9
    c0a6:	fb09 3318 	mls	r3, r9, r8, r3
    c0aa:	fb08 fe0e 	mul.w	lr, r8, lr
    c0ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c0b2:	458e      	cmp	lr, r1
    c0b4:	d92c      	bls.n	c110 <__udivmoddi4+0x29c>
    c0b6:	1861      	adds	r1, r4, r1
    c0b8:	f108 33ff 	add.w	r3, r8, #4294967295
    c0bc:	d204      	bcs.n	c0c8 <__udivmoddi4+0x254>
    c0be:	458e      	cmp	lr, r1
    c0c0:	d902      	bls.n	c0c8 <__udivmoddi4+0x254>
    c0c2:	f1a8 0302 	sub.w	r3, r8, #2
    c0c6:	4421      	add	r1, r4
    c0c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c0cc:	fba0 9802 	umull	r9, r8, r0, r2
    c0d0:	eba1 010e 	sub.w	r1, r1, lr
    c0d4:	4541      	cmp	r1, r8
    c0d6:	46ce      	mov	lr, r9
    c0d8:	4643      	mov	r3, r8
    c0da:	d302      	bcc.n	c0e2 <__udivmoddi4+0x26e>
    c0dc:	d106      	bne.n	c0ec <__udivmoddi4+0x278>
    c0de:	454d      	cmp	r5, r9
    c0e0:	d204      	bcs.n	c0ec <__udivmoddi4+0x278>
    c0e2:	ebb9 0e02 	subs.w	lr, r9, r2
    c0e6:	eb68 0304 	sbc.w	r3, r8, r4
    c0ea:	3801      	subs	r0, #1
    c0ec:	2e00      	cmp	r6, #0
    c0ee:	d0a6      	beq.n	c03e <__udivmoddi4+0x1ca>
    c0f0:	ebb5 020e 	subs.w	r2, r5, lr
    c0f4:	eb61 0103 	sbc.w	r1, r1, r3
    c0f8:	fa01 fc0c 	lsl.w	ip, r1, ip
    c0fc:	fa22 f307 	lsr.w	r3, r2, r7
    c100:	ea4c 0303 	orr.w	r3, ip, r3
    c104:	40f9      	lsrs	r1, r7
    c106:	e9c6 3100 	strd	r3, r1, [r6]
    c10a:	e798      	b.n	c03e <__udivmoddi4+0x1ca>
    c10c:	4640      	mov	r0, r8
    c10e:	e7c5      	b.n	c09c <__udivmoddi4+0x228>
    c110:	4643      	mov	r3, r8
    c112:	e7d9      	b.n	c0c8 <__udivmoddi4+0x254>
    c114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c118:	460c      	mov	r4, r1
    c11a:	4681      	mov	r9, r0
    c11c:	7849      	ldrb	r1, [r1, #1]
    c11e:	f100 0003 	add.w	r0, r0, #3
    c122:	f88d 1000 	strb.w	r1, [sp]
    c126:	f020 0003 	bic.w	r0, r0, #3
    c12a:	78a1      	ldrb	r1, [r4, #2]
    c12c:	0015      	movs	r5, r2
    c12e:	4606      	mov	r6, r0
    c130:	f88d 1001 	strb.w	r1, [sp, #1]
    c134:	d000      	beq.n	c138 <__udivmoddi4+0x2c4>
    c136:	2000      	movs	r0, #0
    c138:	4669      	mov	r1, sp
    c13a:	f7f4 fe4f 	bl	ddc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c13e:	eb06 0a00 	add.w	sl, r6, r0
    c142:	7820      	ldrb	r0, [r4, #0]
    c144:	7861      	ldrb	r1, [r4, #1]
    c146:	2700      	movs	r7, #0
    c148:	4408      	add	r0, r1
    c14a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c14e:	463e      	mov	r6, r7
    c150:	e008      	b.n	c164 <__udivmoddi4+0x2f0>
    c152:	7a23      	ldrb	r3, [r4, #8]
    c154:	79e2      	ldrb	r2, [r4, #7]
    c156:	79a1      	ldrb	r1, [r4, #6]
    c158:	7960      	ldrb	r0, [r4, #5]
    c15a:	f000 fe80 	bl	ce5e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c15e:	1c76      	adds	r6, r6, #1
    c160:	4407      	add	r7, r0
    c162:	b2f6      	uxtb	r6, r6
    c164:	4546      	cmp	r6, r8
    c166:	d3f4      	bcc.n	c152 <__udivmoddi4+0x2de>
    c168:	f10a 0003 	add.w	r0, sl, #3
    c16c:	f020 0003 	bic.w	r0, r0, #3
    c170:	4606      	mov	r6, r0
    c172:	b105      	cbz	r5, c176 <__udivmoddi4+0x302>
    c174:	2000      	movs	r0, #0
    c176:	463a      	mov	r2, r7
    c178:	4641      	mov	r1, r8
    c17a:	f7f4 ffe3 	bl	1144 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c17e:	4430      	add	r0, r6
    c180:	78a1      	ldrb	r1, [r4, #2]
    c182:	462e      	mov	r6, r5
    c184:	b159      	cbz	r1, c19e <__udivmoddi4+0x32a>
    c186:	1cc0      	adds	r0, r0, #3
    c188:	f020 0003 	bic.w	r0, r0, #3
    c18c:	8a63      	ldrh	r3, [r4, #18]
    c18e:	78e2      	ldrb	r2, [r4, #3]
    c190:	4605      	mov	r5, r0
    c192:	b2c9      	uxtb	r1, r1
    c194:	b106      	cbz	r6, c198 <__udivmoddi4+0x324>
    c196:	2000      	movs	r0, #0
    c198:	f7f5 f888 	bl	12ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c19c:	4428      	add	r0, r5
    c19e:	1dc0      	adds	r0, r0, #7
    c1a0:	f020 0007 	bic.w	r0, r0, #7
    c1a4:	eba0 0009 	sub.w	r0, r0, r9
    c1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c1ac <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c1ac:	b50e      	push	{r1, r2, r3, lr}
    c1ae:	4601      	mov	r1, r0
    c1b0:	4668      	mov	r0, sp
    c1b2:	f000 f818 	bl	c1e6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c1b6:	4668      	mov	r0, sp
    c1b8:	f001 fc62 	bl	da80 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c1bc:	bd0e      	pop	{r1, r2, r3, pc}
    c1be:	b570      	push	{r4, r5, r6, lr}
    c1c0:	460c      	mov	r4, r1
    c1c2:	4605      	mov	r5, r0
    c1c4:	f7f4 fd80 	bl	cc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c1c8:	2800      	cmp	r0, #0
    c1ca:	d002      	beq.n	c1d2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c1cc:	2d3e      	cmp	r5, #62	; 0x3e
    c1ce:	d001      	beq.n	c1d4 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c1d0:	2001      	movs	r0, #1
    c1d2:	bd70      	pop	{r4, r5, r6, pc}
    c1d4:	2c12      	cmp	r4, #18
    c1d6:	d004      	beq.n	c1e2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c1d8:	4620      	mov	r0, r4
    c1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c1de:	f7f4 bd85 	b.w	cec <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c1e2:	2000      	movs	r0, #0
    c1e4:	bd70      	pop	{r4, r5, r6, pc}

0000c1e6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c1e6:	880a      	ldrh	r2, [r1, #0]
    c1e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c1ec:	8082      	strh	r2, [r0, #4]
    c1ee:	884a      	ldrh	r2, [r1, #2]
    c1f0:	80c2      	strh	r2, [r0, #6]
    c1f2:	784a      	ldrb	r2, [r1, #1]
    c1f4:	0993      	lsrs	r3, r2, #6
    c1f6:	2200      	movs	r2, #0
    c1f8:	7242      	strb	r2, [r0, #9]
    c1fa:	784b      	ldrb	r3, [r1, #1]
    c1fc:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c200:	b11b      	cbz	r3, c20a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c202:	2b01      	cmp	r3, #1
    c204:	d005      	beq.n	c212 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c206:	2b02      	cmp	r3, #2
    c208:	d005      	beq.n	c216 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c20a:	7202      	strb	r2, [r0, #8]
    c20c:	1d09      	adds	r1, r1, #4
    c20e:	6001      	str	r1, [r0, #0]
    c210:	4770      	bx	lr
    c212:	2201      	movs	r2, #1
    c214:	e7f9      	b.n	c20a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c216:	2202      	movs	r2, #2
    c218:	e7f7      	b.n	c20a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c21a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c21a:	b510      	push	{r4, lr}
    c21c:	460c      	mov	r4, r1
    c21e:	7909      	ldrb	r1, [r1, #4]
    c220:	7001      	strb	r1, [r0, #0]
    c222:	7841      	ldrb	r1, [r0, #1]
    c224:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c228:	7041      	strb	r1, [r0, #1]
    c22a:	88a2      	ldrh	r2, [r4, #4]
    c22c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c230:	4311      	orrs	r1, r2
    c232:	7041      	strb	r1, [r0, #1]
    c234:	79a2      	ldrb	r2, [r4, #6]
    c236:	7082      	strb	r2, [r0, #2]
    c238:	88e2      	ldrh	r2, [r4, #6]
    c23a:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c23e:	0a12      	lsrs	r2, r2, #8
    c240:	70c2      	strb	r2, [r0, #3]
    c242:	7041      	strb	r1, [r0, #1]
    c244:	7a22      	ldrb	r2, [r4, #8]
    c246:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c24a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c24e:	7041      	strb	r1, [r0, #1]
    c250:	7a62      	ldrb	r2, [r4, #9]
    c252:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c256:	7041      	strb	r1, [r0, #1]
    c258:	6821      	ldr	r1, [r4, #0]
    c25a:	1d02      	adds	r2, r0, #4
    c25c:	4291      	cmp	r1, r2
    c25e:	d006      	beq.n	c26e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c260:	88e2      	ldrh	r2, [r4, #6]
    c262:	2afb      	cmp	r2, #251	; 0xfb
    c264:	d300      	bcc.n	c268 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c266:	22fb      	movs	r2, #251	; 0xfb
    c268:	1d00      	adds	r0, r0, #4
    c26a:	f004 f8b5 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c26e:	79a0      	ldrb	r0, [r4, #6]
    c270:	1d00      	adds	r0, r0, #4
    c272:	b2c0      	uxtb	r0, r0
    c274:	bd10      	pop	{r4, pc}

0000c276 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    c276:	b430      	push	{r4, r5}
    c278:	790a      	ldrb	r2, [r1, #4]
    c27a:	7002      	strb	r2, [r0, #0]
    c27c:	7842      	ldrb	r2, [r0, #1]
    c27e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    c282:	7042      	strb	r2, [r0, #1]
    c284:	888b      	ldrh	r3, [r1, #4]
    c286:	f3c3 2303 	ubfx	r3, r3, #8, #4
    c28a:	431a      	orrs	r2, r3
    c28c:	7042      	strb	r2, [r0, #1]
    c28e:	798b      	ldrb	r3, [r1, #6]
    c290:	7083      	strb	r3, [r0, #2]
    c292:	78c3      	ldrb	r3, [r0, #3]
    c294:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    c298:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c29c:	70c3      	strb	r3, [r0, #3]
    c29e:	88cc      	ldrh	r4, [r1, #6]
    c2a0:	f3c4 2405 	ubfx	r4, r4, #8, #6
    c2a4:	4323      	orrs	r3, r4
    c2a6:	70c3      	strb	r3, [r0, #3]
    c2a8:	7042      	strb	r2, [r0, #1]
    c2aa:	7a0c      	ldrb	r4, [r1, #8]
    c2ac:	f004 0403 	and.w	r4, r4, #3
    c2b0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    c2b4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    c2b8:	7042      	strb	r2, [r0, #1]
    c2ba:	7a4c      	ldrb	r4, [r1, #9]
    c2bc:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    c2c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c2c4:	7042      	strb	r2, [r0, #1]
    c2c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    c2ca:	70c2      	strb	r2, [r0, #3]
    c2cc:	680b      	ldr	r3, [r1, #0]
    c2ce:	1d02      	adds	r2, r0, #4
    c2d0:	4293      	cmp	r3, r2
    c2d2:	d005      	beq.n	c2e0 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    c2d4:	88ca      	ldrh	r2, [r1, #6]
    c2d6:	bc30      	pop	{r4, r5}
    c2d8:	4619      	mov	r1, r3
    c2da:	1d00      	adds	r0, r0, #4
    c2dc:	f004 b87c 	b.w	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c2e0:	bc30      	pop	{r4, r5}
    c2e2:	4770      	bx	lr

0000c2e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2e8:	460d      	mov	r5, r1
    c2ea:	4604      	mov	r4, r0
    c2ec:	780f      	ldrb	r7, [r1, #0]
    c2ee:	2000      	movs	r0, #0
    c2f0:	220c      	movs	r2, #12
    c2f2:	2305      	movs	r3, #5
    c2f4:	263e      	movs	r6, #62	; 0x3e
    c2f6:	21ff      	movs	r1, #255	; 0xff
    c2f8:	2f1e      	cmp	r7, #30
    c2fa:	d27d      	bcs.n	c3f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c2fc:	e8df f007 	tbb	[pc, r7]
    c300:	28260fce 	.word	0x28260fce
    c304:	645349ce 	.word	0x645349ce
    c308:	a0959380 	.word	0xa0959380
    c30c:	ced0c6ab 	.word	0xced0c6ab
    c310:	b62ecece 	.word	0xb62ecece
    c314:	f4f1d9b9 	.word	0xf4f1d9b9
    c318:	ebecedee 	.word	0xebecedee
    c31c:	e9ea      	.short	0xe9ea
    c31e:	7022      	strb	r2, [r4, #0]
    c320:	7928      	ldrb	r0, [r5, #4]
    c322:	70a0      	strb	r0, [r4, #2]
    c324:	7968      	ldrb	r0, [r5, #5]
    c326:	70e0      	strb	r0, [r4, #3]
    c328:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c32c:	0a00      	lsrs	r0, r0, #8
    c32e:	7120      	strb	r0, [r4, #4]
    c330:	79e8      	ldrb	r0, [r5, #7]
    c332:	7160      	strb	r0, [r4, #5]
    c334:	7a28      	ldrb	r0, [r5, #8]
    c336:	71a0      	strb	r0, [r4, #6]
    c338:	8928      	ldrh	r0, [r5, #8]
    c33a:	0a00      	lsrs	r0, r0, #8
    c33c:	71e0      	strb	r0, [r4, #7]
    c33e:	7aa8      	ldrb	r0, [r5, #10]
    c340:	7220      	strb	r0, [r4, #8]
    c342:	8968      	ldrh	r0, [r5, #10]
    c344:	0a00      	lsrs	r0, r0, #8
    c346:	7260      	strb	r0, [r4, #9]
    c348:	2008      	movs	r0, #8
    c34a:	e0a5      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c34c:	2010      	movs	r0, #16
    c34e:	e000      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6e>
    c350:	201a      	movs	r0, #26
    c352:	7020      	strb	r0, [r4, #0]
    c354:	7928      	ldrb	r0, [r5, #4]
    c356:	70a0      	strb	r0, [r4, #2]
    c358:	2001      	movs	r0, #1
    c35a:	e09d      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c35c:	2029      	movs	r0, #41	; 0x29
    c35e:	f7f4 fcc5 	bl	cec <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c362:	b148      	cbz	r0, c378 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x94>
    c364:	7026      	strb	r6, [r4, #0]
    c366:	2029      	movs	r0, #41	; 0x29
    c368:	70a0      	strb	r0, [r4, #2]
    c36a:	2221      	movs	r2, #33	; 0x21
    c36c:	1d29      	adds	r1, r5, #4
    c36e:	1ce0      	adds	r0, r4, #3
    c370:	f004 f832 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c374:	2022      	movs	r0, #34	; 0x22
    c376:	e08f      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c378:	200a      	movs	r0, #10
    c37a:	f7f4 fcb7 	bl	cec <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c37e:	2800      	cmp	r0, #0
    c380:	4629      	mov	r1, r5
    c382:	4620      	mov	r0, r4
    c384:	d002      	beq.n	c38c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    c386:	f000 f95b 	bl	c640 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    c38a:	e083      	b.n	c494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    c38c:	f000 f92f 	bl	c5ee <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    c390:	e080      	b.n	c494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    c392:	7026      	strb	r6, [r4, #0]
    c394:	2014      	movs	r0, #20
    c396:	70a0      	strb	r0, [r4, #2]
    c398:	7928      	ldrb	r0, [r5, #4]
    c39a:	70e0      	strb	r0, [r4, #3]
    c39c:	88a8      	ldrh	r0, [r5, #4]
    c39e:	0a00      	lsrs	r0, r0, #8
    c3a0:	7120      	strb	r0, [r4, #4]
    c3a2:	79a8      	ldrb	r0, [r5, #6]
    c3a4:	e0bf      	b.n	c526 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    c3a6:	223e      	movs	r2, #62	; 0x3e
    c3a8:	7022      	strb	r2, [r4, #0]
    c3aa:	2204      	movs	r2, #4
    c3ac:	70a2      	strb	r2, [r4, #2]
    c3ae:	6868      	ldr	r0, [r5, #4]
    c3b0:	f8c4 0003 	str.w	r0, [r4, #3]
    c3b4:	68a8      	ldr	r0, [r5, #8]
    c3b6:	f8c4 0007 	str.w	r0, [r4, #7]
    c3ba:	89a8      	ldrh	r0, [r5, #12]
    c3bc:	f8a4 000b 	strh.w	r0, [r4, #11]
    c3c0:	7ba8      	ldrb	r0, [r5, #14]
    c3c2:	7360      	strb	r0, [r4, #13]
    c3c4:	200c      	movs	r0, #12
    c3c6:	e067      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c3c8:	7026      	strb	r6, [r4, #0]
    c3ca:	2003      	movs	r0, #3
    c3cc:	70a0      	strb	r0, [r4, #2]
    c3ce:	7928      	ldrb	r0, [r5, #4]
    c3d0:	70e0      	strb	r0, [r4, #3]
    c3d2:	79a8      	ldrb	r0, [r5, #6]
    c3d4:	7120      	strb	r0, [r4, #4]
    c3d6:	88e8      	ldrh	r0, [r5, #6]
    c3d8:	0a00      	lsrs	r0, r0, #8
    c3da:	7160      	strb	r0, [r4, #5]
    c3dc:	7a28      	ldrb	r0, [r5, #8]
    c3de:	71a0      	strb	r0, [r4, #6]
    c3e0:	8928      	ldrh	r0, [r5, #8]
    c3e2:	0a00      	lsrs	r0, r0, #8
    c3e4:	71e0      	strb	r0, [r4, #7]
    c3e6:	7aa8      	ldrb	r0, [r5, #10]
    c3e8:	7220      	strb	r0, [r4, #8]
    c3ea:	8968      	ldrh	r0, [r5, #10]
    c3ec:	0a00      	lsrs	r0, r0, #8
    c3ee:	7260      	strb	r0, [r4, #9]
    c3f0:	7b28      	ldrb	r0, [r5, #12]
    c3f2:	72a0      	strb	r0, [r4, #10]
    c3f4:	89a8      	ldrh	r0, [r5, #12]
    c3f6:	e000      	b.n	c3fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x116>
    c3f8:	e050      	b.n	c49c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    c3fa:	0a00      	lsrs	r0, r0, #8
    c3fc:	72e0      	strb	r0, [r4, #11]
    c3fe:	e0cf      	b.n	c5a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    c400:	7026      	strb	r6, [r4, #0]
    c402:	70a3      	strb	r3, [r4, #2]
    c404:	7928      	ldrb	r0, [r5, #4]
    c406:	70e0      	strb	r0, [r4, #3]
    c408:	88a8      	ldrh	r0, [r5, #4]
    c40a:	0a00      	lsrs	r0, r0, #8
    c40c:	7120      	strb	r0, [r4, #4]
    c40e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    c412:	f8c4 0005 	str.w	r0, [r4, #5]
    c416:	f8d5 000a 	ldr.w	r0, [r5, #10]
    c41a:	f8c4 0009 	str.w	r0, [r4, #9]
    c41e:	89e8      	ldrh	r0, [r5, #14]
    c420:	f8a4 000d 	strh.w	r0, [r4, #13]
    c424:	e0e1      	b.n	c5ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    c426:	2011      	movs	r0, #17
    c428:	e03b      	b.n	c4a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1be>
    c42a:	7023      	strb	r3, [r4, #0]
    c42c:	7928      	ldrb	r0, [r5, #4]
    c42e:	70a0      	strb	r0, [r4, #2]
    c430:	7968      	ldrb	r0, [r5, #5]
    c432:	70e0      	strb	r0, [r4, #3]
    c434:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c438:	0a00      	lsrs	r0, r0, #8
    c43a:	7120      	strb	r0, [r4, #4]
    c43c:	79e8      	ldrb	r0, [r5, #7]
    c43e:	e072      	b.n	c526 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    c440:	2008      	movs	r0, #8
    c442:	7020      	strb	r0, [r4, #0]
    c444:	7928      	ldrb	r0, [r5, #4]
    c446:	70a0      	strb	r0, [r4, #2]
    c448:	79a8      	ldrb	r0, [r5, #6]
    c44a:	70e0      	strb	r0, [r4, #3]
    c44c:	88e8      	ldrh	r0, [r5, #6]
    c44e:	0a00      	lsrs	r0, r0, #8
    c450:	7120      	strb	r0, [r4, #4]
    c452:	7a28      	ldrb	r0, [r5, #8]
    c454:	e067      	b.n	c526 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    c456:	2030      	movs	r0, #48	; 0x30
    c458:	7020      	strb	r0, [r4, #0]
    c45a:	7928      	ldrb	r0, [r5, #4]
    c45c:	70a0      	strb	r0, [r4, #2]
    c45e:	79a8      	ldrb	r0, [r5, #6]
    c460:	70e0      	strb	r0, [r4, #3]
    c462:	88e8      	ldrh	r0, [r5, #6]
    c464:	0a00      	lsrs	r0, r0, #8
    c466:	7120      	strb	r0, [r4, #4]
    c468:	2003      	movs	r0, #3
    c46a:	e015      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c46c:	7026      	strb	r6, [r4, #0]
    c46e:	2007      	movs	r0, #7
    c470:	e05e      	b.n	c530 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    c472:	7026      	strb	r6, [r4, #0]
    c474:	70a2      	strb	r2, [r4, #2]
    c476:	7928      	ldrb	r0, [r5, #4]
    c478:	70e0      	strb	r0, [r4, #3]
    c47a:	79a8      	ldrb	r0, [r5, #6]
    c47c:	7120      	strb	r0, [r4, #4]
    c47e:	88e8      	ldrh	r0, [r5, #6]
    c480:	0a00      	lsrs	r0, r0, #8
    c482:	7160      	strb	r0, [r4, #5]
    c484:	7a28      	ldrb	r0, [r5, #8]
    c486:	71a0      	strb	r0, [r4, #6]
    c488:	7a68      	ldrb	r0, [r5, #9]
    c48a:	e01f      	b.n	c4cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    c48c:	1d29      	adds	r1, r5, #4
    c48e:	4620      	mov	r0, r4
    c490:	f7f4 fbec 	bl	c6c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    c494:	2800      	cmp	r0, #0
    c496:	d001      	beq.n	c49c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    c498:	7060      	strb	r0, [r4, #1]
    c49a:	1c80      	adds	r0, r0, #2
    c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4a0:	2057      	movs	r0, #87	; 0x57
    c4a2:	7020      	strb	r0, [r4, #0]
    c4a4:	7928      	ldrb	r0, [r5, #4]
    c4a6:	70a0      	strb	r0, [r4, #2]
    c4a8:	88a8      	ldrh	r0, [r5, #4]
    c4aa:	0a00      	lsrs	r0, r0, #8
    c4ac:	70e0      	strb	r0, [r4, #3]
    c4ae:	2002      	movs	r0, #2
    c4b0:	e7f2      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c4b2:	7026      	strb	r6, [r4, #0]
    c4b4:	2012      	movs	r0, #18
    c4b6:	70a0      	strb	r0, [r4, #2]
    c4b8:	7928      	ldrb	r0, [r5, #4]
    c4ba:	70e0      	strb	r0, [r4, #3]
    c4bc:	7968      	ldrb	r0, [r5, #5]
    c4be:	7120      	strb	r0, [r4, #4]
    c4c0:	79a8      	ldrb	r0, [r5, #6]
    c4c2:	7160      	strb	r0, [r4, #5]
    c4c4:	88e8      	ldrh	r0, [r5, #6]
    c4c6:	0a00      	lsrs	r0, r0, #8
    c4c8:	71a0      	strb	r0, [r4, #6]
    c4ca:	7a28      	ldrb	r0, [r5, #8]
    c4cc:	71e0      	strb	r0, [r4, #7]
    c4ce:	2006      	movs	r0, #6
    c4d0:	e7e2      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c4d2:	e075      	b.n	c5c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    c4d4:	e048      	b.n	c568 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    c4d6:	e029      	b.n	c52c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    c4d8:	e054      	b.n	c584 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    c4da:	e063      	b.n	c5a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    c4dc:	e01b      	b.n	c516 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    c4de:	e003      	b.n	c4e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c4e0:	e7ff      	b.n	c4e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1fe>
    c4e2:	7026      	strb	r6, [r4, #0]
    c4e4:	2020      	movs	r0, #32
    c4e6:	e041      	b.n	c56c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c4e8:	7026      	strb	r6, [r4, #0]
    c4ea:	2021      	movs	r0, #33	; 0x21
    c4ec:	70a0      	strb	r0, [r4, #2]
    c4ee:	7928      	ldrb	r0, [r5, #4]
    c4f0:	70e0      	strb	r0, [r4, #3]
    c4f2:	7968      	ldrb	r0, [r5, #5]
    c4f4:	7120      	strb	r0, [r4, #4]
    c4f6:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c4fa:	0a00      	lsrs	r0, r0, #8
    c4fc:	7160      	strb	r0, [r4, #5]
    c4fe:	79e8      	ldrb	r0, [r5, #7]
    c500:	71a0      	strb	r0, [r4, #6]
    c502:	7a28      	ldrb	r0, [r5, #8]
    c504:	71e0      	strb	r0, [r4, #7]
    c506:	7a68      	ldrb	r0, [r5, #9]
    c508:	7220      	strb	r0, [r4, #8]
    c50a:	7aa8      	ldrb	r0, [r5, #10]
    c50c:	7260      	strb	r0, [r4, #9]
    c50e:	7ae8      	ldrb	r0, [r5, #11]
    c510:	72a0      	strb	r0, [r4, #10]
    c512:	2009      	movs	r0, #9
    c514:	e7c0      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c516:	7021      	strb	r1, [r4, #0]
    c518:	20a1      	movs	r0, #161	; 0xa1
    c51a:	70a0      	strb	r0, [r4, #2]
    c51c:	7928      	ldrb	r0, [r5, #4]
    c51e:	70e0      	strb	r0, [r4, #3]
    c520:	7968      	ldrb	r0, [r5, #5]
    c522:	7120      	strb	r0, [r4, #4]
    c524:	2000      	movs	r0, #0
    c526:	7160      	strb	r0, [r4, #5]
    c528:	2004      	movs	r0, #4
    c52a:	e7b5      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c52c:	7021      	strb	r1, [r4, #0]
    c52e:	20a2      	movs	r0, #162	; 0xa2
    c530:	70a0      	strb	r0, [r4, #2]
    c532:	7928      	ldrb	r0, [r5, #4]
    c534:	70e0      	strb	r0, [r4, #3]
    c536:	88a8      	ldrh	r0, [r5, #4]
    c538:	0a00      	lsrs	r0, r0, #8
    c53a:	7120      	strb	r0, [r4, #4]
    c53c:	79a8      	ldrb	r0, [r5, #6]
    c53e:	7160      	strb	r0, [r4, #5]
    c540:	88e8      	ldrh	r0, [r5, #6]
    c542:	0a00      	lsrs	r0, r0, #8
    c544:	71a0      	strb	r0, [r4, #6]
    c546:	7a28      	ldrb	r0, [r5, #8]
    c548:	71e0      	strb	r0, [r4, #7]
    c54a:	8928      	ldrh	r0, [r5, #8]
    c54c:	0a00      	lsrs	r0, r0, #8
    c54e:	7220      	strb	r0, [r4, #8]
    c550:	7aa8      	ldrb	r0, [r5, #10]
    c552:	7260      	strb	r0, [r4, #9]
    c554:	8968      	ldrh	r0, [r5, #10]
    c556:	0a00      	lsrs	r0, r0, #8
    c558:	72a0      	strb	r0, [r4, #10]
    c55a:	7b28      	ldrb	r0, [r5, #12]
    c55c:	72e0      	strb	r0, [r4, #11]
    c55e:	89a8      	ldrh	r0, [r5, #12]
    c560:	0a00      	lsrs	r0, r0, #8
    c562:	7320      	strb	r0, [r4, #12]
    c564:	200b      	movs	r0, #11
    c566:	e797      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c568:	7021      	strb	r1, [r4, #0]
    c56a:	20a3      	movs	r0, #163	; 0xa3
    c56c:	70a0      	strb	r0, [r4, #2]
    c56e:	7928      	ldrb	r0, [r5, #4]
    c570:	70e0      	strb	r0, [r4, #3]
    c572:	88a8      	ldrh	r0, [r5, #4]
    c574:	0a00      	lsrs	r0, r0, #8
    c576:	7120      	strb	r0, [r4, #4]
    c578:	79a8      	ldrb	r0, [r5, #6]
    c57a:	7160      	strb	r0, [r4, #5]
    c57c:	79e8      	ldrb	r0, [r5, #7]
    c57e:	71a0      	strb	r0, [r4, #6]
    c580:	2005      	movs	r0, #5
    c582:	e789      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c584:	7026      	strb	r6, [r4, #0]
    c586:	2013      	movs	r0, #19
    c588:	70a0      	strb	r0, [r4, #2]
    c58a:	7928      	ldrb	r0, [r5, #4]
    c58c:	70e0      	strb	r0, [r4, #3]
    c58e:	7968      	ldrb	r0, [r5, #5]
    c590:	7120      	strb	r0, [r4, #4]
    c592:	f8d5 0006 	ldr.w	r0, [r5, #6]
    c596:	f8c4 0005 	str.w	r0, [r4, #5]
    c59a:	8968      	ldrh	r0, [r5, #10]
    c59c:	f8a4 0009 	strh.w	r0, [r4, #9]
    c5a0:	200a      	movs	r0, #10
    c5a2:	e779      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c5a4:	7021      	strb	r1, [r4, #0]
    c5a6:	20a4      	movs	r0, #164	; 0xa4
    c5a8:	70a0      	strb	r0, [r4, #2]
    c5aa:	7928      	ldrb	r0, [r5, #4]
    c5ac:	70e0      	strb	r0, [r4, #3]
    c5ae:	88a8      	ldrh	r0, [r5, #4]
    c5b0:	0a00      	lsrs	r0, r0, #8
    c5b2:	7120      	strb	r0, [r4, #4]
    c5b4:	79a8      	ldrb	r0, [r5, #6]
    c5b6:	7160      	strb	r0, [r4, #5]
    c5b8:	79e8      	ldrb	r0, [r5, #7]
    c5ba:	71a0      	strb	r0, [r4, #6]
    c5bc:	2007      	movs	r0, #7
    c5be:	e76b      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    c5c0:	7021      	strb	r1, [r4, #0]
    c5c2:	2080      	movs	r0, #128	; 0x80
    c5c4:	70a0      	strb	r0, [r4, #2]
    c5c6:	88a9      	ldrh	r1, [r5, #4]
    c5c8:	f8a4 1003 	strh.w	r1, [r4, #3]
    c5cc:	88e9      	ldrh	r1, [r5, #6]
    c5ce:	f8a4 1005 	strh.w	r1, [r4, #5]
    c5d2:	7a29      	ldrb	r1, [r5, #8]
    c5d4:	71e1      	strb	r1, [r4, #7]
    c5d6:	8969      	ldrh	r1, [r5, #10]
    c5d8:	8121      	strh	r1, [r4, #8]
    c5da:	89a9      	ldrh	r1, [r5, #12]
    c5dc:	8161      	strh	r1, [r4, #10]
    c5de:	89e9      	ldrh	r1, [r5, #14]
    c5e0:	81a1      	strh	r1, [r4, #12]
    c5e2:	7c29      	ldrb	r1, [r5, #16]
    c5e4:	f001 0101 	and.w	r1, r1, #1
    c5e8:	73a1      	strb	r1, [r4, #14]
    c5ea:	200d      	movs	r0, #13
    c5ec:	e754      	b.n	c498 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>

0000c5ee <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    c5ee:	223e      	movs	r2, #62	; 0x3e
    c5f0:	7002      	strb	r2, [r0, #0]
    c5f2:	2201      	movs	r2, #1
    c5f4:	7082      	strb	r2, [r0, #2]
    c5f6:	790a      	ldrb	r2, [r1, #4]
    c5f8:	70c2      	strb	r2, [r0, #3]
    c5fa:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    c5fe:	7102      	strb	r2, [r0, #4]
    c600:	880a      	ldrh	r2, [r1, #0]
    c602:	0a12      	lsrs	r2, r2, #8
    c604:	7142      	strb	r2, [r0, #5]
    c606:	788a      	ldrb	r2, [r1, #2]
    c608:	7182      	strb	r2, [r0, #6]
    c60a:	78ca      	ldrb	r2, [r1, #3]
    c60c:	71c2      	strb	r2, [r0, #7]
    c60e:	684a      	ldr	r2, [r1, #4]
    c610:	6082      	str	r2, [r0, #8]
    c612:	890a      	ldrh	r2, [r1, #8]
    c614:	8182      	strh	r2, [r0, #12]
    c616:	7d8a      	ldrb	r2, [r1, #22]
    c618:	7382      	strb	r2, [r0, #14]
    c61a:	8aca      	ldrh	r2, [r1, #22]
    c61c:	0a12      	lsrs	r2, r2, #8
    c61e:	73c2      	strb	r2, [r0, #15]
    c620:	7e0a      	ldrb	r2, [r1, #24]
    c622:	7402      	strb	r2, [r0, #16]
    c624:	8b0a      	ldrh	r2, [r1, #24]
    c626:	0a12      	lsrs	r2, r2, #8
    c628:	7442      	strb	r2, [r0, #17]
    c62a:	7e8a      	ldrb	r2, [r1, #26]
    c62c:	7482      	strb	r2, [r0, #18]
    c62e:	8b4a      	ldrh	r2, [r1, #26]
    c630:	0a12      	lsrs	r2, r2, #8
    c632:	74c2      	strb	r2, [r0, #19]
    c634:	7f09      	ldrb	r1, [r1, #28]
    c636:	7501      	strb	r1, [r0, #20]
    c638:	2113      	movs	r1, #19
    c63a:	7041      	strb	r1, [r0, #1]
    c63c:	4608      	mov	r0, r1
    c63e:	4770      	bx	lr
    c640:	223e      	movs	r2, #62	; 0x3e
    c642:	7002      	strb	r2, [r0, #0]
    c644:	220a      	movs	r2, #10
    c646:	7082      	strb	r2, [r0, #2]
    c648:	790a      	ldrb	r2, [r1, #4]
    c64a:	70c2      	strb	r2, [r0, #3]
    c64c:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    c650:	7102      	strb	r2, [r0, #4]
    c652:	880a      	ldrh	r2, [r1, #0]
    c654:	0a12      	lsrs	r2, r2, #8
    c656:	7142      	strb	r2, [r0, #5]
    c658:	788a      	ldrb	r2, [r1, #2]
    c65a:	7182      	strb	r2, [r0, #6]
    c65c:	78ca      	ldrb	r2, [r1, #3]
    c65e:	71c2      	strb	r2, [r0, #7]
    c660:	684a      	ldr	r2, [r1, #4]
    c662:	6082      	str	r2, [r0, #8]
    c664:	890a      	ldrh	r2, [r1, #8]
    c666:	8182      	strh	r2, [r0, #12]
    c668:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c66c:	f8c0 200e 	str.w	r2, [r0, #14]
    c670:	89ca      	ldrh	r2, [r1, #14]
    c672:	8242      	strh	r2, [r0, #18]
    c674:	690a      	ldr	r2, [r1, #16]
    c676:	6142      	str	r2, [r0, #20]
    c678:	8a8a      	ldrh	r2, [r1, #20]
    c67a:	8302      	strh	r2, [r0, #24]
    c67c:	7d8a      	ldrb	r2, [r1, #22]
    c67e:	7682      	strb	r2, [r0, #26]
    c680:	8aca      	ldrh	r2, [r1, #22]
    c682:	0a12      	lsrs	r2, r2, #8
    c684:	76c2      	strb	r2, [r0, #27]
    c686:	7e0a      	ldrb	r2, [r1, #24]
    c688:	7702      	strb	r2, [r0, #28]
    c68a:	8b0a      	ldrh	r2, [r1, #24]
    c68c:	0a12      	lsrs	r2, r2, #8
    c68e:	7742      	strb	r2, [r0, #29]
    c690:	7e8a      	ldrb	r2, [r1, #26]
    c692:	7782      	strb	r2, [r0, #30]
    c694:	8b4a      	ldrh	r2, [r1, #26]
    c696:	0a12      	lsrs	r2, r2, #8
    c698:	77c2      	strb	r2, [r0, #31]
    c69a:	7f09      	ldrb	r1, [r1, #28]
    c69c:	f880 1020 	strb.w	r1, [r0, #32]
    c6a0:	211f      	movs	r1, #31
    c6a2:	7041      	strb	r1, [r0, #1]
    c6a4:	4608      	mov	r0, r1
    c6a6:	4770      	bx	lr
    c6a8:	094a      	lsrs	r2, r1, #5
    c6aa:	f001 011f 	and.w	r1, r1, #31
    c6ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    c6b2:	40c8      	lsrs	r0, r1
    c6b4:	f000 0001 	and.w	r0, r0, #1
    c6b8:	4770      	bx	lr

0000c6ba <sdc_hci_data_put>:
    c6ba:	b510      	push	{r4, lr}
    c6bc:	f06f 0415 	mvn.w	r4, #21
    c6c0:	b120      	cbz	r0, c6cc <sdc_hci_data_put+0x12>
    c6c2:	f7ff fd73 	bl	c1ac <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c6c6:	b108      	cbz	r0, c6cc <sdc_hci_data_put+0x12>
    c6c8:	2000      	movs	r0, #0
    c6ca:	bd10      	pop	{r4, pc}
    c6cc:	4620      	mov	r0, r4
    c6ce:	bd10      	pop	{r4, pc}

0000c6d0 <sdc_hci_get>:
    c6d0:	b510      	push	{r4, lr}
    c6d2:	460c      	mov	r4, r1
    c6d4:	b130      	cbz	r0, c6e4 <sdc_hci_get+0x14>
    c6d6:	b12c      	cbz	r4, c6e4 <sdc_hci_get+0x14>
    c6d8:	f7f4 fa78 	bl	bcc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    c6dc:	b128      	cbz	r0, c6ea <sdc_hci_get+0x1a>
    c6de:	7020      	strb	r0, [r4, #0]
    c6e0:	2000      	movs	r0, #0
    c6e2:	bd10      	pop	{r4, pc}
    c6e4:	f06f 0015 	mvn.w	r0, #21
    c6e8:	bd10      	pop	{r4, pc}
    c6ea:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c6ee:	bd10      	pop	{r4, pc}

0000c6f0 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c6f0:	f003 b910 	b.w	f914 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c6f4 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c6f4:	f003 b92b 	b.w	f94e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c6f8 <sdc_hci_cmd_cb_set_event_mask>:
    c6f8:	b510      	push	{r4, lr}
    c6fa:	f7f4 fb11 	bl	d20 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c6fe:	2000      	movs	r0, #0
    c700:	bd10      	pop	{r4, pc}

0000c702 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c702:	b510      	push	{r4, lr}
    c704:	f7f4 fb1e 	bl	d44 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c708:	2000      	movs	r0, #0
    c70a:	bd10      	pop	{r4, pc}

0000c70c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c70c:	f003 b940 	b.w	f990 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c710 <sdc_hci_cmd_vs_conn_event_extend>:
    c710:	b508      	push	{r3, lr}
    c712:	7800      	ldrb	r0, [r0, #0]
    c714:	f88d 0000 	strb.w	r0, [sp]
    c718:	4668      	mov	r0, sp
    c71a:	f003 f81c 	bl	f756 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c71e:	bd08      	pop	{r3, pc}

0000c720 <sdc_hci_cmd_vs_conn_update>:
    c720:	2001      	movs	r0, #1
    c722:	4770      	bx	lr

0000c724 <sdc_hci_cmd_vs_event_length_set>:
    c724:	f7fa b8c8 	b.w	68b8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c728 <sdc_hci_cmd_vs_llpm_mode_set>:
    c728:	2001      	movs	r0, #1
    c72a:	4770      	bx	lr

0000c72c <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    c72c:	7881      	ldrb	r1, [r0, #2]
    c72e:	8800      	ldrh	r0, [r0, #0]
    c730:	f002 bfc1 	b.w	f6b6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000c734 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c734:	7800      	ldrb	r0, [r0, #0]
    c736:	b100      	cbz	r0, c73a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c738:	2001      	movs	r0, #1
    c73a:	f002 bfb7 	b.w	f6ac <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c73e <sdc_hci_cmd_vs_set_adv_randomness>:
    c73e:	f002 bfe4 	b.w	f70a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000c742 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    c742:	b510      	push	{r4, lr}
    c744:	4604      	mov	r4, r0
    c746:	f7ff fa39 	bl	bbbc <mpsl_temperature_get>
    c74a:	17c1      	asrs	r1, r0, #31
    c74c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    c750:	1080      	asrs	r0, r0, #2
    c752:	287f      	cmp	r0, #127	; 0x7f
    c754:	dd01      	ble.n	c75a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    c756:	207f      	movs	r0, #127	; 0x7f
    c758:	e004      	b.n	c764 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    c75a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    c75e:	4288      	cmp	r0, r1
    c760:	da00      	bge.n	c764 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    c762:	4608      	mov	r0, r1
    c764:	7020      	strb	r0, [r4, #0]
    c766:	2000      	movs	r0, #0
    c768:	bd10      	pop	{r4, pc}

0000c76a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c76a:	b570      	push	{r4, r5, r6, lr}
    c76c:	4605      	mov	r5, r0
    c76e:	2210      	movs	r2, #16
    c770:	2100      	movs	r1, #0
    c772:	f003 feab 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c776:	2210      	movs	r2, #16
    c778:	2100      	movs	r1, #0
    c77a:	f105 0010 	add.w	r0, r5, #16
    c77e:	f003 fea5 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c782:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c786:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c78a:	1c40      	adds	r0, r0, #1
    c78c:	d10b      	bne.n	c7a6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c78e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c792:	1c40      	adds	r0, r0, #1
    c794:	d107      	bne.n	c7a6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c796:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c79a:	1c40      	adds	r0, r0, #1
    c79c:	d103      	bne.n	c7a6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c79e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c7a2:	1c40      	adds	r0, r0, #1
    c7a4:	d00b      	beq.n	c7be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c7a6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    c7aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c7ae:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    c7b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c7b6:	612a      	str	r2, [r5, #16]
    c7b8:	6168      	str	r0, [r5, #20]
    c7ba:	61a9      	str	r1, [r5, #24]
    c7bc:	61eb      	str	r3, [r5, #28]
    c7be:	2000      	movs	r0, #0
    c7c0:	f7f4 ffd4 	bl	176c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c7c4:	b918      	cbnz	r0, c7ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c7c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c7ca:	07c0      	lsls	r0, r0, #31
    c7cc:	d118      	bne.n	c800 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c7ce:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c7d2:	1c40      	adds	r0, r0, #1
    c7d4:	d10b      	bne.n	c7ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7d6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c7da:	1c40      	adds	r0, r0, #1
    c7dc:	d107      	bne.n	c7ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7de:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c7e2:	1c40      	adds	r0, r0, #1
    c7e4:	d103      	bne.n	c7ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7e6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c7ea:	1c40      	adds	r0, r0, #1
    c7ec:	d008      	beq.n	c800 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c7ee:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c7f2:	6861      	ldr	r1, [r4, #4]
    c7f4:	68a2      	ldr	r2, [r4, #8]
    c7f6:	68e3      	ldr	r3, [r4, #12]
    c7f8:	6028      	str	r0, [r5, #0]
    c7fa:	6069      	str	r1, [r5, #4]
    c7fc:	60aa      	str	r2, [r5, #8]
    c7fe:	60eb      	str	r3, [r5, #12]
    c800:	2000      	movs	r0, #0
    c802:	bd70      	pop	{r4, r5, r6, pc}

0000c804 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c804:	b538      	push	{r3, r4, r5, lr}
    c806:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c80a:	4604      	mov	r4, r0
    c80c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c810:	1c40      	adds	r0, r0, #1
    c812:	d105      	bne.n	c820 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c814:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c818:	43c0      	mvns	r0, r0
    c81a:	0400      	lsls	r0, r0, #16
    c81c:	0c00      	lsrs	r0, r0, #16
    c81e:	d03e      	beq.n	c89e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c820:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c824:	07c0      	lsls	r0, r0, #31
    c826:	d03a      	beq.n	c89e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c828:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c82c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    c830:	f8ad 1000 	strh.w	r1, [sp]
    c834:	f8c4 0001 	str.w	r0, [r4, #1]
    c838:	f8bd 0000 	ldrh.w	r0, [sp]
    c83c:	f8a4 0005 	strh.w	r0, [r4, #5]
    c840:	79a0      	ldrb	r0, [r4, #6]
    c842:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c846:	71a0      	strb	r0, [r4, #6]
    c848:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c84c:	1c40      	adds	r0, r0, #1
    c84e:	d00f      	beq.n	c870 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c850:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c854:	1c40      	adds	r0, r0, #1
    c856:	d00b      	beq.n	c870 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c858:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c85c:	1c40      	adds	r0, r0, #1
    c85e:	d007      	beq.n	c870 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c860:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c864:	1c40      	adds	r0, r0, #1
    c866:	d003      	beq.n	c870 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c868:	2000      	movs	r0, #0
    c86a:	f7f4 ff7f 	bl	176c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c86e:	b140      	cbz	r0, c882 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    c870:	2210      	movs	r2, #16
    c872:	2100      	movs	r1, #0
    c874:	1de0      	adds	r0, r4, #7
    c876:	f003 fe29 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c87a:	2001      	movs	r0, #1
    c87c:	7020      	strb	r0, [r4, #0]
    c87e:	2000      	movs	r0, #0
    c880:	bd38      	pop	{r3, r4, r5, pc}
    c882:	f855 2f90 	ldr.w	r2, [r5, #144]!
    c886:	6869      	ldr	r1, [r5, #4]
    c888:	68a8      	ldr	r0, [r5, #8]
    c88a:	68eb      	ldr	r3, [r5, #12]
    c88c:	f8c4 2007 	str.w	r2, [r4, #7]
    c890:	f8c4 100b 	str.w	r1, [r4, #11]
    c894:	f8c4 000f 	str.w	r0, [r4, #15]
    c898:	f8c4 3013 	str.w	r3, [r4, #19]
    c89c:	e7ed      	b.n	c87a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c89e:	2000      	movs	r0, #0
    c8a0:	e7ec      	b.n	c87c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000c8a2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c8a2:	f002 bf47 	b.w	f734 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c8a6 <sdc_hci_cmd_ip_read_bd_addr>:
    c8a6:	f003 b846 	b.w	f936 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c8aa <sdc_hci_cmd_ip_read_local_version_information>:
    c8aa:	f7fa b813 	b.w	68d4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c8ae <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    c8ae:	f002 bcda 	b.w	f266 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c8b2 <sdc_hci_cmd_le_clear_filter_accept_list>:
    c8b2:	f002 bcef 	b.w	f294 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c8b6 <sdc_hci_cmd_le_encrypt>:
    c8b6:	f002 bcf7 	b.w	f2a8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c8ba <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c8ba:	8802      	ldrh	r2, [r0, #0]
    c8bc:	800a      	strh	r2, [r1, #0]
    c8be:	f002 bcfc 	b.w	f2ba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c8c2 <sdc_hci_cmd_le_long_term_key_request_reply>:
    c8c2:	8802      	ldrh	r2, [r0, #0]
    c8c4:	800a      	strh	r2, [r1, #0]
    c8c6:	f002 bd11 	b.w	f2ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c8ca <sdc_hci_cmd_le_rand>:
    c8ca:	f002 bd39 	b.w	f340 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c8ce <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c8ce:	f002 bd3d 	b.w	f34c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c8d2 <sdc_hci_cmd_le_read_buffer_size>:
    c8d2:	f7f9 bef9 	b.w	66c8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c8d6 <sdc_hci_cmd_le_read_channel_map>:
    c8d6:	f7f9 bf01 	b.w	66dc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c8da <sdc_hci_cmd_le_read_filter_accept_list_size>:
    c8da:	f002 bd77 	b.w	f3cc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c8de <sdc_hci_cmd_le_read_max_data_length>:
    c8de:	f002 bd40 	b.w	f362 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c8e2 <sdc_hci_cmd_le_read_phy>:
    c8e2:	f7f9 bf23 	b.w	672c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c8e6 <sdc_hci_cmd_le_read_remote_features>:
    c8e6:	f002 bd45 	b.w	f374 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c8ea <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c8ea:	f7f9 bf45 	b.w	6778 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c8ee <sdc_hci_cmd_le_read_transmit_power>:
    c8ee:	f002 bd5d 	b.w	f3ac <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c8f2 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    c8f2:	f002 bd6f 	b.w	f3d4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c8f6 <sdc_hci_cmd_le_set_adv_data>:
    c8f6:	f002 bd82 	b.w	f3fe <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c8fa <sdc_hci_cmd_le_set_adv_enable>:
    c8fa:	f002 bd95 	b.w	f428 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c8fe <sdc_hci_cmd_le_set_adv_params>:
    c8fe:	f002 bdc6 	b.w	f48e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c902 <sdc_hci_cmd_le_set_data_length>:
    c902:	f002 be59 	b.w	f5b8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c906 <sdc_hci_cmd_le_set_data_related_address_changes>:
    c906:	f002 be77 	b.w	f5f8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000c90a <sdc_hci_cmd_le_set_default_phy>:
    c90a:	f7f9 bf3f 	b.w	678c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c90e <sdc_hci_cmd_le_set_event_mask>:
    c90e:	b510      	push	{r4, lr}
    c910:	f7f4 f9f4 	bl	cfc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c914:	2000      	movs	r0, #0
    c916:	bd10      	pop	{r4, pc}

0000c918 <sdc_hci_cmd_le_set_phy>:
    c918:	f002 be7b 	b.w	f612 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c91c <sdc_hci_cmd_le_set_random_address>:
    c91c:	f002 be92 	b.w	f644 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c920 <sdc_hci_cmd_le_set_scan_response_data>:
    c920:	f002 be9e 	b.w	f660 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c924 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c924:	f002 beb1 	b.w	f68a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c928 <sdc_hci_cmd_lc_disconnect>:
    c928:	f002 bc4f 	b.w	f1ca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c92c <sdc_hci_cmd_lc_read_remote_version_information>:
    c92c:	f7f9 bfdc 	b.w	68e8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c930:	b570      	push	{r4, r5, r6, lr}
    c932:	880b      	ldrh	r3, [r1, #0]
    c934:	7cc4      	ldrb	r4, [r0, #19]
    c936:	f100 0518 	add.w	r5, r0, #24
    c93a:	f3c3 060e 	ubfx	r6, r3, #0, #15
    c93e:	8802      	ldrh	r2, [r0, #0]
    c940:	4435      	add	r5, r6
    c942:	1d64      	adds	r4, r4, #5
    c944:	882d      	ldrh	r5, [r5, #0]
    c946:	4422      	add	r2, r4
    c948:	b292      	uxth	r2, r2
    c94a:	4425      	add	r5, r4
    c94c:	1e54      	subs	r4, r2, #1
    c94e:	442c      	add	r4, r5
    c950:	fb94 f4f2 	sdiv	r4, r4, r2
    c954:	fb02 6204 	mla	r2, r2, r4, r6
    c958:	8840      	ldrh	r0, [r0, #2]
    c95a:	b292      	uxth	r2, r2
    c95c:	4290      	cmp	r0, r2
    c95e:	d903      	bls.n	c968 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c960:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c964:	4310      	orrs	r0, r2
    c966:	e002      	b.n	c96e <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c968:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c96c:	4398      	bics	r0, r3
    c96e:	8008      	strh	r0, [r1, #0]
    c970:	bd70      	pop	{r4, r5, r6, pc}
    c972:	0442      	lsls	r2, r0, #17
    c974:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    c978:	d107      	bne.n	c98a <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    c97a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c97e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c982:	4288      	cmp	r0, r1
    c984:	d001      	beq.n	c98a <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    c986:	2001      	movs	r0, #1
    c988:	4770      	bx	lr
    c98a:	2000      	movs	r0, #0
    c98c:	4770      	bx	lr

0000c98e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c98e:	8881      	ldrh	r1, [r0, #4]
    c990:	88c0      	ldrh	r0, [r0, #6]
    c992:	4288      	cmp	r0, r1
    c994:	d101      	bne.n	c99a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c996:	2001      	movs	r0, #1
    c998:	4770      	bx	lr
    c99a:	2000      	movs	r0, #0
    c99c:	4770      	bx	lr

0000c99e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9a2:	460f      	mov	r7, r1
    c9a4:	4604      	mov	r4, r0
    c9a6:	f100 0118 	add.w	r1, r0, #24
    c9aa:	8880      	ldrh	r0, [r0, #4]
    c9ac:	2600      	movs	r6, #0
    c9ae:	f3c0 000e 	ubfx	r0, r0, #0, #15
    c9b2:	1845      	adds	r5, r0, r1
    c9b4:	603e      	str	r6, [r7, #0]
    c9b6:	89e0      	ldrh	r0, [r4, #14]
    c9b8:	2800      	cmp	r0, #0
    c9ba:	d016      	beq.n	c9ea <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c9bc:	8961      	ldrh	r1, [r4, #10]
    c9be:	4408      	add	r0, r1
    c9c0:	b280      	uxth	r0, r0
    c9c2:	8160      	strh	r0, [r4, #10]
    c9c4:	8829      	ldrh	r1, [r5, #0]
    c9c6:	4288      	cmp	r0, r1
    c9c8:	d905      	bls.n	c9d6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    c9ca:	f240 1151 	movw	r1, #337	; 0x151
    c9ce:	f04f 0014 	mov.w	r0, #20
    c9d2:	f7f4 f801 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9d6:	d106      	bne.n	c9e6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c9d8:	f104 0104 	add.w	r1, r4, #4
    c9dc:	4620      	mov	r0, r4
    c9de:	f7ff ffa7 	bl	c930 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c9e2:	8166      	strh	r6, [r4, #10]
    c9e4:	603d      	str	r5, [r7, #0]
    c9e6:	81e6      	strh	r6, [r4, #14]
    c9e8:	2001      	movs	r0, #1
    c9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c9ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9f2:	4604      	mov	r4, r0
    c9f4:	f100 0318 	add.w	r3, r0, #24
    c9f8:	88c0      	ldrh	r0, [r0, #6]
    c9fa:	460e      	mov	r6, r1
    c9fc:	f3c0 070e 	ubfx	r7, r0, #0, #15
    ca00:	8a20      	ldrh	r0, [r4, #16]
    ca02:	19d9      	adds	r1, r3, r7
    ca04:	b108      	cbz	r0, ca0a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    ca06:	42b0      	cmp	r0, r6
    ca08:	d202      	bcs.n	ca10 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    ca0a:	2000      	movs	r0, #0
    ca0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca10:	89a0      	ldrh	r0, [r4, #12]
    ca12:	2500      	movs	r5, #0
    ca14:	b140      	cbz	r0, ca28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    ca16:	f8b1 c000 	ldrh.w	ip, [r1]
    ca1a:	4560      	cmp	r0, ip
    ca1c:	d006      	beq.n	ca2c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    ca1e:	f44f 7101 	mov.w	r1, #516	; 0x204
    ca22:	2014      	movs	r0, #20
    ca24:	f7f3 ffd8 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca28:	800d      	strh	r5, [r1, #0]
    ca2a:	e00e      	b.n	ca4a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    ca2c:	f894 c013 	ldrb.w	ip, [r4, #19]
    ca30:	4418      	add	r0, r3
    ca32:	f10c 0c05 	add.w	ip, ip, #5
    ca36:	44bc      	add	ip, r7
    ca38:	4460      	add	r0, ip
    ca3a:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    ca3e:	f820 cc03 	strh.w	ip, [r0, #-3]
    ca42:	f894 c016 	ldrb.w	ip, [r4, #22]
    ca46:	f800 cc01 	strb.w	ip, [r0, #-1]
    ca4a:	89a0      	ldrh	r0, [r4, #12]
    ca4c:	4430      	add	r0, r6
    ca4e:	81a0      	strh	r0, [r4, #12]
    ca50:	8808      	ldrh	r0, [r1, #0]
    ca52:	4430      	add	r0, r6
    ca54:	8008      	strh	r0, [r1, #0]
    ca56:	b12a      	cbz	r2, ca64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    ca58:	1da1      	adds	r1, r4, #6
    ca5a:	4620      	mov	r0, r4
    ca5c:	f7ff ff68 	bl	c930 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ca60:	81a5      	strh	r5, [r4, #12]
    ca62:	e00a      	b.n	ca7a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    ca64:	7ce0      	ldrb	r0, [r4, #19]
    ca66:	89a1      	ldrh	r1, [r4, #12]
    ca68:	1d40      	adds	r0, r0, #5
    ca6a:	4438      	add	r0, r7
    ca6c:	4419      	add	r1, r3
    ca6e:	4408      	add	r0, r1
    ca70:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    ca74:	82a1      	strh	r1, [r4, #20]
    ca76:	7880      	ldrb	r0, [r0, #2]
    ca78:	75a0      	strb	r0, [r4, #22]
    ca7a:	8225      	strh	r5, [r4, #16]
    ca7c:	2001      	movs	r0, #1
    ca7e:	e7c5      	b.n	ca0c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000ca80 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    ca80:	1c80      	adds	r0, r0, #2
    ca82:	4770      	bx	lr

0000ca84 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    ca84:	b510      	push	{r4, lr}
    ca86:	4604      	mov	r4, r0
    ca88:	88c0      	ldrh	r0, [r0, #6]
    ca8a:	88a1      	ldrh	r1, [r4, #4]
    ca8c:	4281      	cmp	r1, r0
    ca8e:	d003      	beq.n	ca98 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    ca90:	8960      	ldrh	r0, [r4, #10]
    ca92:	b908      	cbnz	r0, ca98 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    ca94:	89e0      	ldrh	r0, [r4, #14]
    ca96:	b108      	cbz	r0, ca9c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    ca98:	2000      	movs	r0, #0
    ca9a:	bd10      	pop	{r4, pc}
    ca9c:	1d21      	adds	r1, r4, #4
    ca9e:	4620      	mov	r0, r4
    caa0:	f7ff ff46 	bl	c930 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    caa4:	2000      	movs	r0, #0
    caa6:	81e0      	strh	r0, [r4, #14]
    caa8:	2001      	movs	r0, #1
    caaa:	bd10      	pop	{r4, pc}

0000caac <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    caac:	b510      	push	{r4, lr}
    caae:	4604      	mov	r4, r0
    cab0:	f100 0218 	add.w	r2, r0, #24
    cab4:	88c0      	ldrh	r0, [r0, #6]
    cab6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    caba:	4402      	add	r2, r0
    cabc:	8820      	ldrh	r0, [r4, #0]
    cabe:	2845      	cmp	r0, #69	; 0x45
    cac0:	d200      	bcs.n	cac4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    cac2:	2045      	movs	r0, #69	; 0x45
    cac4:	4288      	cmp	r0, r1
    cac6:	d204      	bcs.n	cad2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    cac8:	f44f 7182 	mov.w	r1, #260	; 0x104
    cacc:	2014      	movs	r0, #20
    cace:	f7f3 ff83 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cad2:	7ca0      	ldrb	r0, [r4, #18]
    cad4:	2800      	cmp	r0, #0
    cad6:	d003      	beq.n	cae0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    cad8:	8810      	ldrh	r0, [r2, #0]
    cada:	4288      	cmp	r0, r1
    cadc:	d201      	bcs.n	cae2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    cade:	2000      	movs	r0, #0
    cae0:	bd10      	pop	{r4, pc}
    cae2:	8011      	strh	r1, [r2, #0]
    cae4:	1da1      	adds	r1, r4, #6
    cae6:	4620      	mov	r0, r4
    cae8:	f7ff ff22 	bl	c930 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    caec:	2000      	movs	r0, #0
    caee:	74a0      	strb	r0, [r4, #18]
    caf0:	2001      	movs	r0, #1
    caf2:	bd10      	pop	{r4, pc}

0000caf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    caf4:	b510      	push	{r4, lr}
    caf6:	88c4      	ldrh	r4, [r0, #6]
    caf8:	8883      	ldrh	r3, [r0, #4]
    cafa:	4601      	mov	r1, r0
    cafc:	f100 0218 	add.w	r2, r0, #24
    cb00:	f3c3 000e 	ubfx	r0, r3, #0, #15
    cb04:	4410      	add	r0, r2
    cb06:	42a3      	cmp	r3, r4
    cb08:	d002      	beq.n	cb10 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    cb0a:	8949      	ldrh	r1, [r1, #10]
    cb0c:	2900      	cmp	r1, #0
    cb0e:	d000      	beq.n	cb12 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    cb10:	2000      	movs	r0, #0
    cb12:	bd10      	pop	{r4, pc}

0000cb14 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    cb14:	8803      	ldrh	r3, [r0, #0]
    cb16:	2b45      	cmp	r3, #69	; 0x45
    cb18:	d200      	bcs.n	cb1c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    cb1a:	2345      	movs	r3, #69	; 0x45
    cb1c:	8013      	strh	r3, [r2, #0]
    cb1e:	88c2      	ldrh	r2, [r0, #6]
    cb20:	f3c2 030e 	ubfx	r3, r2, #0, #15
    cb24:	f100 0218 	add.w	r2, r0, #24
    cb28:	441a      	add	r2, r3
    cb2a:	600a      	str	r2, [r1, #0]
    cb2c:	8980      	ldrh	r0, [r0, #12]
    cb2e:	4770      	bx	lr

0000cb30 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    cb30:	7cc0      	ldrb	r0, [r0, #19]
    cb32:	1d40      	adds	r0, r0, #5
    cb34:	4408      	add	r0, r1
    cb36:	1ec0      	subs	r0, r0, #3
    cb38:	6010      	str	r0, [r2, #0]
    cb3a:	8808      	ldrh	r0, [r1, #0]
    cb3c:	4770      	bx	lr

0000cb3e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    cb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb42:	460e      	mov	r6, r1
    cb44:	88c1      	ldrh	r1, [r0, #6]
    cb46:	8902      	ldrh	r2, [r0, #8]
    cb48:	4604      	mov	r4, r0
    cb4a:	f100 0818 	add.w	r8, r0, #24
    cb4e:	8800      	ldrh	r0, [r0, #0]
    cb50:	f3c1 050e 	ubfx	r5, r1, #0, #15
    cb54:	f3c2 070e 	ubfx	r7, r2, #0, #15
    cb58:	2845      	cmp	r0, #69	; 0x45
    cb5a:	d200      	bcs.n	cb5e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cb5c:	2045      	movs	r0, #69	; 0x45
    cb5e:	42b0      	cmp	r0, r6
    cb60:	d203      	bcs.n	cb6a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    cb62:	21c6      	movs	r1, #198	; 0xc6
    cb64:	2014      	movs	r0, #20
    cb66:	f7f3 ff37 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb6a:	4610      	mov	r0, r2
    cb6c:	f7ff ff01 	bl	c972 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cb70:	b110      	cbz	r0, cb78 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    cb72:	2000      	movs	r0, #0
    cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb78:	42af      	cmp	r7, r5
    cb7a:	d908      	bls.n	cb8e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cb7c:	7ce1      	ldrb	r1, [r4, #19]
    cb7e:	1b78      	subs	r0, r7, r5
    cb80:	1a40      	subs	r0, r0, r1
    cb82:	1f40      	subs	r0, r0, #5
    cb84:	4286      	cmp	r6, r0
    cb86:	dd02      	ble.n	cb8e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cb88:	2000      	movs	r0, #0
    cb8a:	74a0      	strb	r0, [r4, #18]
    cb8c:	e7f1      	b.n	cb72 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    cb8e:	eb08 0005 	add.w	r0, r8, r5
    cb92:	2101      	movs	r1, #1
    cb94:	8006      	strh	r6, [r0, #0]
    cb96:	74a1      	strb	r1, [r4, #18]
    cb98:	e7ec      	b.n	cb74 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cb9a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cb9a:	b538      	push	{r3, r4, r5, lr}
    cb9c:	88c4      	ldrh	r4, [r0, #6]
    cb9e:	8881      	ldrh	r1, [r0, #4]
    cba0:	f100 0218 	add.w	r2, r0, #24
    cba4:	f3c1 030e 	ubfx	r3, r1, #0, #15
    cba8:	441a      	add	r2, r3
    cbaa:	42a1      	cmp	r1, r4
    cbac:	d010      	beq.n	cbd0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cbae:	8943      	ldrh	r3, [r0, #10]
    cbb0:	89c5      	ldrh	r5, [r0, #14]
    cbb2:	8812      	ldrh	r2, [r2, #0]
    cbb4:	442b      	add	r3, r5
    cbb6:	4293      	cmp	r3, r2
    cbb8:	d308      	bcc.n	cbcc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cbba:	f8ad 1000 	strh.w	r1, [sp]
    cbbe:	4669      	mov	r1, sp
    cbc0:	f7ff feb6 	bl	c930 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cbc4:	f8bd 0000 	ldrh.w	r0, [sp]
    cbc8:	42a0      	cmp	r0, r4
    cbca:	d001      	beq.n	cbd0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cbcc:	2001      	movs	r0, #1
    cbce:	bd38      	pop	{r3, r4, r5, pc}
    cbd0:	2000      	movs	r0, #0
    cbd2:	bd38      	pop	{r3, r4, r5, pc}

0000cbd4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cbd4:	b570      	push	{r4, r5, r6, lr}
    cbd6:	88c6      	ldrh	r6, [r0, #6]
    cbd8:	8885      	ldrh	r5, [r0, #4]
    cbda:	4603      	mov	r3, r0
    cbdc:	f100 0418 	add.w	r4, r0, #24
    cbe0:	f3c5 000e 	ubfx	r0, r5, #0, #15
    cbe4:	4420      	add	r0, r4
    cbe6:	42b5      	cmp	r5, r6
    cbe8:	d102      	bne.n	cbf0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cbea:	2000      	movs	r0, #0
    cbec:	81d8      	strh	r0, [r3, #14]
    cbee:	bd70      	pop	{r4, r5, r6, pc}
    cbf0:	8804      	ldrh	r4, [r0, #0]
    cbf2:	895d      	ldrh	r5, [r3, #10]
    cbf4:	7cde      	ldrb	r6, [r3, #19]
    cbf6:	1b64      	subs	r4, r4, r5
    cbf8:	4435      	add	r5, r6
    cbfa:	4428      	add	r0, r5
    cbfc:	880d      	ldrh	r5, [r1, #0]
    cbfe:	b2a4      	uxth	r4, r4
    cc00:	1c80      	adds	r0, r0, #2
    cc02:	42a5      	cmp	r5, r4
    cc04:	d900      	bls.n	cc08 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cc06:	800c      	strh	r4, [r1, #0]
    cc08:	895c      	ldrh	r4, [r3, #10]
    cc0a:	b124      	cbz	r4, cc16 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cc0c:	2400      	movs	r4, #0
    cc0e:	7014      	strb	r4, [r2, #0]
    cc10:	8809      	ldrh	r1, [r1, #0]
    cc12:	81d9      	strh	r1, [r3, #14]
    cc14:	bd70      	pop	{r4, r5, r6, pc}
    cc16:	2401      	movs	r4, #1
    cc18:	e7f9      	b.n	cc0e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cc1a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc1e:	461d      	mov	r5, r3
    cc20:	4616      	mov	r6, r2
    cc22:	9f06      	ldr	r7, [sp, #24]
    cc24:	460b      	mov	r3, r1
    cc26:	4604      	mov	r4, r0
    cc28:	463a      	mov	r2, r7
    cc2a:	4629      	mov	r1, r5
    cc2c:	4630      	mov	r0, r6
    cc2e:	f000 f839 	bl	cca4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cc32:	4283      	cmp	r3, r0
    cc34:	d201      	bcs.n	cc3a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cc36:	219e      	movs	r1, #158	; 0x9e
    cc38:	e012      	b.n	cc60 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cc3a:	07a0      	lsls	r0, r4, #30
    cc3c:	d001      	beq.n	cc42 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    cc3e:	219f      	movs	r1, #159	; 0x9f
    cc40:	e00e      	b.n	cc60 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cc42:	2218      	movs	r2, #24
    cc44:	2100      	movs	r1, #0
    cc46:	4620      	mov	r0, r4
    cc48:	f003 fc40 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cc4c:	19a8      	adds	r0, r5, r6
    cc4e:	1d40      	adds	r0, r0, #5
    cc50:	4378      	muls	r0, r7
    cc52:	b280      	uxth	r0, r0
    cc54:	74e5      	strb	r5, [r4, #19]
    cc56:	8060      	strh	r0, [r4, #2]
    cc58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cc5c:	d903      	bls.n	cc66 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    cc5e:	21a4      	movs	r1, #164	; 0xa4
    cc60:	2014      	movs	r0, #20
    cc62:	f7f3 feb9 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc66:	8026      	strh	r6, [r4, #0]
    cc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cc6c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cc6c:	b570      	push	{r4, r5, r6, lr}
    cc6e:	460b      	mov	r3, r1
    cc70:	4604      	mov	r4, r0
    cc72:	f100 0118 	add.w	r1, r0, #24
    cc76:	8902      	ldrh	r2, [r0, #8]
    cc78:	8880      	ldrh	r0, [r0, #4]
    cc7a:	f3c2 050e 	ubfx	r5, r2, #0, #15
    cc7e:	440d      	add	r5, r1
    cc80:	4282      	cmp	r2, r0
    cc82:	d101      	bne.n	cc88 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    cc84:	2000      	movs	r0, #0
    cc86:	bd70      	pop	{r4, r5, r6, pc}
    cc88:	b123      	cbz	r3, cc94 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    cc8a:	7ce2      	ldrb	r2, [r4, #19]
    cc8c:	1ca9      	adds	r1, r5, #2
    cc8e:	4618      	mov	r0, r3
    cc90:	f003 fba2 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc94:	882d      	ldrh	r5, [r5, #0]
    cc96:	f104 0108 	add.w	r1, r4, #8
    cc9a:	4620      	mov	r0, r4
    cc9c:	f7ff fe48 	bl	c930 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cca0:	4628      	mov	r0, r5
    cca2:	bd70      	pop	{r4, r5, r6, pc}

0000cca4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cca4:	4401      	add	r1, r0
    cca6:	1d49      	adds	r1, r1, #5
    cca8:	4351      	muls	r1, r2
    ccaa:	b28a      	uxth	r2, r1
    ccac:	2100      	movs	r1, #0
    ccae:	2845      	cmp	r0, #69	; 0x45
    ccb0:	d202      	bcs.n	ccb8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    ccb2:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    ccb6:	b281      	uxth	r1, r0
    ccb8:	3218      	adds	r2, #24
    ccba:	1850      	adds	r0, r2, r1
    ccbc:	b280      	uxth	r0, r0
    ccbe:	4770      	bx	lr

0000ccc0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    ccc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccc4:	4688      	mov	r8, r1
    ccc6:	88c1      	ldrh	r1, [r0, #6]
    ccc8:	4604      	mov	r4, r0
    ccca:	8900      	ldrh	r0, [r0, #8]
    cccc:	f3c1 060e 	ubfx	r6, r1, #0, #15
    ccd0:	f104 0518 	add.w	r5, r4, #24
    ccd4:	f3c0 070e 	ubfx	r7, r0, #0, #15
    ccd8:	eb05 0906 	add.w	r9, r5, r6
    ccdc:	f7ff fe49 	bl	c972 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cce0:	2200      	movs	r2, #0
    cce2:	b998      	cbnz	r0, cd0c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    cce4:	8820      	ldrh	r0, [r4, #0]
    cce6:	2845      	cmp	r0, #69	; 0x45
    cce8:	d200      	bcs.n	ccec <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    ccea:	2045      	movs	r0, #69	; 0x45
    ccec:	42b7      	cmp	r7, r6
    ccee:	d906      	bls.n	ccfe <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ccf0:	7ce3      	ldrb	r3, [r4, #19]
    ccf2:	1bb9      	subs	r1, r7, r6
    ccf4:	1ac9      	subs	r1, r1, r3
    ccf6:	1f49      	subs	r1, r1, #5
    ccf8:	4281      	cmp	r1, r0
    ccfa:	da00      	bge.n	ccfe <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ccfc:	4608      	mov	r0, r1
    ccfe:	89a1      	ldrh	r1, [r4, #12]
    cd00:	b111      	cbz	r1, cd08 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    cd02:	f8b9 3000 	ldrh.w	r3, [r9]
    cd06:	1ac0      	subs	r0, r0, r3
    cd08:	4540      	cmp	r0, r8
    cd0a:	da03      	bge.n	cd14 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    cd0c:	8222      	strh	r2, [r4, #16]
    cd0e:	2000      	movs	r0, #0
    cd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd14:	7ce0      	ldrb	r0, [r4, #19]
    cd16:	4429      	add	r1, r5
    cd18:	1d40      	adds	r0, r0, #5
    cd1a:	4430      	add	r0, r6
    cd1c:	4408      	add	r0, r1
    cd1e:	f8a4 8010 	strh.w	r8, [r4, #16]
    cd22:	1ec0      	subs	r0, r0, #3
    cd24:	e7f4      	b.n	cd10 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000cd26 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    cd26:	b570      	push	{r4, r5, r6, lr}
    cd28:	2300      	movs	r3, #0
    cd2a:	f1a1 0208 	sub.w	r2, r1, #8
    cd2e:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    cd32:	42a2      	cmp	r2, r4
    cd34:	d304      	bcc.n	cd40 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    cd36:	f240 11cd 	movw	r1, #461	; 0x1cd
    cd3a:	2015      	movs	r0, #21
    cd3c:	f7f3 fe4c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd40:	6802      	ldr	r2, [r0, #0]
    cd42:	b90a      	cbnz	r2, cd48 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    cd44:	e01e      	b.n	cd84 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    cd46:	4610      	mov	r0, r2
    cd48:	6802      	ldr	r2, [r0, #0]
    cd4a:	8893      	ldrh	r3, [r2, #4]
    cd4c:	428b      	cmp	r3, r1
    cd4e:	d002      	beq.n	cd56 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    cd50:	6813      	ldr	r3, [r2, #0]
    cd52:	2b00      	cmp	r3, #0
    cd54:	d1f7      	bne.n	cd46 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    cd56:	8894      	ldrh	r4, [r2, #4]
    cd58:	4613      	mov	r3, r2
    cd5a:	428c      	cmp	r4, r1
    cd5c:	d101      	bne.n	cd62 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    cd5e:	6811      	ldr	r1, [r2, #0]
    cd60:	e00d      	b.n	cd7e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    cd62:	f101 0508 	add.w	r5, r1, #8
    cd66:	b2ae      	uxth	r6, r5
    cd68:	2500      	movs	r5, #0
    cd6a:	42b4      	cmp	r4, r6
    cd6c:	d309      	bcc.n	cd82 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    cd6e:	1a64      	subs	r4, r4, r1
    cd70:	4411      	add	r1, r2
    cd72:	600d      	str	r5, [r1, #0]
    cd74:	808c      	strh	r4, [r1, #4]
    cd76:	6802      	ldr	r2, [r0, #0]
    cd78:	6812      	ldr	r2, [r2, #0]
    cd7a:	6002      	str	r2, [r0, #0]
    cd7c:	600a      	str	r2, [r1, #0]
    cd7e:	6001      	str	r1, [r0, #0]
    cd80:	e000      	b.n	cd84 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    cd82:	2300      	movs	r3, #0
    cd84:	4618      	mov	r0, r3
    cd86:	bd70      	pop	{r4, r5, r6, pc}

0000cd88 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    cd88:	b510      	push	{r4, lr}
    cd8a:	000c      	movs	r4, r1
    cd8c:	d004      	beq.n	cd98 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    cd8e:	2c08      	cmp	r4, #8
    cd90:	d207      	bcs.n	cda2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    cd92:	f240 1195 	movw	r1, #405	; 0x195
    cd96:	e00a      	b.n	cdae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    cd98:	b108      	cbz	r0, cd9e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    cd9a:	2100      	movs	r1, #0
    cd9c:	6001      	str	r1, [r0, #0]
    cd9e:	2000      	movs	r0, #0
    cda0:	bd10      	pop	{r4, pc}
    cda2:	b158      	cbz	r0, cdbc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    cda4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    cda8:	d304      	bcc.n	cdb4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    cdaa:	f240 11a7 	movw	r1, #423	; 0x1a7
    cdae:	2015      	movs	r0, #21
    cdb0:	f7f3 fe12 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdb4:	b2a1      	uxth	r1, r4
    cdb6:	6800      	ldr	r0, [r0, #0]
    cdb8:	f000 f814 	bl	cde4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cdbc:	1d20      	adds	r0, r4, #4
    cdbe:	bd10      	pop	{r4, pc}

0000cdc0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cdc0:	2100      	movs	r1, #0
    cdc2:	6802      	ldr	r2, [r0, #0]
    cdc4:	e003      	b.n	cdce <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    cdc6:	8893      	ldrh	r3, [r2, #4]
    cdc8:	6812      	ldr	r2, [r2, #0]
    cdca:	4419      	add	r1, r3
    cdcc:	b289      	uxth	r1, r1
    cdce:	2a00      	cmp	r2, #0
    cdd0:	d1f9      	bne.n	cdc6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    cdd2:	f000 b807 	b.w	cde4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cdd6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cdd6:	2300      	movs	r3, #0
    cdd8:	600b      	str	r3, [r1, #0]
    cdda:	808a      	strh	r2, [r1, #4]
    cddc:	6802      	ldr	r2, [r0, #0]
    cdde:	600a      	str	r2, [r1, #0]
    cde0:	6001      	str	r1, [r0, #0]
    cde2:	4770      	bx	lr
    cde4:	2300      	movs	r3, #0
    cde6:	6043      	str	r3, [r0, #4]
    cde8:	1d02      	adds	r2, r0, #4
    cdea:	8101      	strh	r1, [r0, #8]
    cdec:	6002      	str	r2, [r0, #0]
    cdee:	4770      	bx	lr

0000cdf0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    cdf0:	b51c      	push	{r2, r3, r4, lr}
    cdf2:	4604      	mov	r4, r0
    cdf4:	2000      	movs	r0, #0
    cdf6:	9001      	str	r0, [sp, #4]
    cdf8:	9000      	str	r0, [sp, #0]
    cdfa:	f88d 4006 	strb.w	r4, [sp, #6]
    cdfe:	e00a      	b.n	ce16 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    ce00:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ce04:	4621      	mov	r1, r4
    ce06:	f7f4 f86d 	bl	ee4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ce0a:	b120      	cbz	r0, ce16 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    ce0c:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    ce10:	2017      	movs	r0, #23
    ce12:	f7f3 fde1 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce16:	4668      	mov	r0, sp
    ce18:	f7f4 f81c 	bl	e54 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ce1c:	2800      	cmp	r0, #0
    ce1e:	d0ef      	beq.n	ce00 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    ce20:	bd1c      	pop	{r2, r3, r4, pc}

0000ce22 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    ce22:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    ce26:	3aff      	subs	r2, #255	; 0xff
    ce28:	d001      	beq.n	ce2e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    ce2a:	2902      	cmp	r1, #2
    ce2c:	d301      	bcc.n	ce32 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    ce2e:	2000      	movs	r0, #0
    ce30:	4770      	bx	lr
    ce32:	f7f4 b889 	b.w	f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    ce36:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    ce3a:	3aff      	subs	r2, #255	; 0xff
    ce3c:	d001      	beq.n	ce42 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    ce3e:	2902      	cmp	r1, #2
    ce40:	d301      	bcc.n	ce46 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    ce42:	2000      	movs	r0, #0
    ce44:	4770      	bx	lr
    ce46:	f7f4 b8a7 	b.w	f98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    ce4a:	b510      	push	{r4, lr}
    ce4c:	4604      	mov	r4, r0
    ce4e:	f7f4 f8ef 	bl	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    ce52:	42a0      	cmp	r0, r4
    ce54:	d901      	bls.n	ce5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    ce56:	2001      	movs	r0, #1
    ce58:	bd10      	pop	{r4, pc}
    ce5a:	2000      	movs	r0, #0
    ce5c:	bd10      	pop	{r4, pc}

0000ce5e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    ce5e:	b570      	push	{r4, r5, r6, lr}
    ce60:	460e      	mov	r6, r1
    ce62:	461d      	mov	r5, r3
    ce64:	4611      	mov	r1, r2
    ce66:	f000 f813 	bl	ce90 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    ce6a:	4604      	mov	r4, r0
    ce6c:	4629      	mov	r1, r5
    ce6e:	4630      	mov	r0, r6
    ce70:	f000 f804 	bl	ce7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    ce74:	4420      	add	r0, r4
    ce76:	1d00      	adds	r0, r0, #4
    ce78:	b280      	uxth	r0, r0
    ce7a:	bd70      	pop	{r4, r5, r6, pc}
    ce7c:	b510      	push	{r4, lr}
    ce7e:	460a      	mov	r2, r1
    ce80:	2109      	movs	r1, #9
    ce82:	f7ff ff0f 	bl	cca4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ce86:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    ce8a:	1cc0      	adds	r0, r0, #3
    ce8c:	4008      	ands	r0, r1
    ce8e:	bd10      	pop	{r4, pc}
    ce90:	b510      	push	{r4, lr}
    ce92:	460a      	mov	r2, r1
    ce94:	210a      	movs	r1, #10
    ce96:	f7ff ff05 	bl	cca4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ce9a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    ce9e:	1cc0      	adds	r0, r0, #3
    cea0:	4008      	ands	r0, r1
    cea2:	bd10      	pop	{r4, pc}
    cea4:	b109      	cbz	r1, ceaa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    cea6:	2100      	movs	r1, #0
    cea8:	e000      	b.n	ceac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    ceaa:	2102      	movs	r1, #2
    ceac:	1843      	adds	r3, r0, r1
    ceae:	7d1a      	ldrb	r2, [r3, #20]
    ceb0:	2a02      	cmp	r2, #2
    ceb2:	d008      	beq.n	cec6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    ceb4:	7d5b      	ldrb	r3, [r3, #21]
    ceb6:	2b02      	cmp	r3, #2
    ceb8:	d009      	beq.n	cece <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    ceba:	2a03      	cmp	r2, #3
    cebc:	d003      	beq.n	cec6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    cebe:	2b03      	cmp	r3, #3
    cec0:	d005      	beq.n	cece <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    cec2:	2000      	movs	r0, #0
    cec4:	4770      	bx	lr
    cec6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ceca:	8b00      	ldrh	r0, [r0, #24]
    cecc:	4770      	bx	lr
    cece:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ced2:	8b40      	ldrh	r0, [r0, #26]
    ced4:	4770      	bx	lr
    ced6:	b109      	cbz	r1, cedc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    ced8:	2100      	movs	r1, #0
    ceda:	e000      	b.n	cede <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    cedc:	2102      	movs	r1, #2
    cede:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cee2:	8b01      	ldrh	r1, [r0, #24]
    cee4:	b911      	cbnz	r1, ceec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    cee6:	8b40      	ldrh	r0, [r0, #26]
    cee8:	2800      	cmp	r0, #0
    ceea:	d000      	beq.n	ceee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    ceec:	2001      	movs	r0, #1
    ceee:	4770      	bx	lr
    cef0:	b538      	push	{r3, r4, r5, lr}
    cef2:	7883      	ldrb	r3, [r0, #2]
    cef4:	f88d 3000 	strb.w	r3, [sp]
    cef8:	9b00      	ldr	r3, [sp, #0]
    cefa:	9300      	str	r3, [sp, #0]
    cefc:	f89d 3000 	ldrb.w	r3, [sp]
    cf00:	b95b      	cbnz	r3, cf1a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    cf02:	2400      	movs	r4, #0
    cf04:	b10a      	cbz	r2, cf0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    cf06:	2300      	movs	r3, #0
    cf08:	e000      	b.n	cf0c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    cf0a:	2302      	movs	r3, #2
    cf0c:	18c2      	adds	r2, r0, r3
    cf0e:	7d15      	ldrb	r5, [r2, #20]
    cf10:	2d02      	cmp	r5, #2
    cf12:	d004      	beq.n	cf1e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    cf14:	7d52      	ldrb	r2, [r2, #21]
    cf16:	2a02      	cmp	r2, #2
    cf18:	d004      	beq.n	cf24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    cf1a:	2000      	movs	r0, #0
    cf1c:	bd38      	pop	{r3, r4, r5, pc}
    cf1e:	461a      	mov	r2, r3
    cf20:	1c5b      	adds	r3, r3, #1
    cf22:	e000      	b.n	cf26 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    cf24:	1c5a      	adds	r2, r3, #1
    cf26:	b179      	cbz	r1, cf48 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    cf28:	18c5      	adds	r5, r0, r3
    cf2a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    cf2e:	752c      	strb	r4, [r5, #20]
    cf30:	831c      	strh	r4, [r3, #24]
    cf32:	2303      	movs	r3, #3
    cf34:	1884      	adds	r4, r0, r2
    cf36:	7523      	strb	r3, [r4, #20]
    cf38:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    cf3c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    cf40:	685b      	ldr	r3, [r3, #4]
    cf42:	600b      	str	r3, [r1, #0]
    cf44:	8b00      	ldrh	r0, [r0, #24]
    cf46:	8088      	strh	r0, [r1, #4]
    cf48:	2001      	movs	r0, #1
    cf4a:	bd38      	pop	{r3, r4, r5, pc}
    cf4c:	b510      	push	{r4, lr}
    cf4e:	b109      	cbz	r1, cf54 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    cf50:	2100      	movs	r1, #0
    cf52:	e000      	b.n	cf56 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    cf54:	2102      	movs	r1, #2
    cf56:	1843      	adds	r3, r0, r1
    cf58:	7d1c      	ldrb	r4, [r3, #20]
    cf5a:	4294      	cmp	r4, r2
    cf5c:	d103      	bne.n	cf66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    cf5e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cf62:	8b00      	ldrh	r0, [r0, #24]
    cf64:	bd10      	pop	{r4, pc}
    cf66:	7d5b      	ldrb	r3, [r3, #21]
    cf68:	4293      	cmp	r3, r2
    cf6a:	d103      	bne.n	cf74 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    cf6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cf70:	8b40      	ldrh	r0, [r0, #26]
    cf72:	bd10      	pop	{r4, pc}
    cf74:	2000      	movs	r0, #0
    cf76:	bd10      	pop	{r4, pc}
    cf78:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    cf7c:	d201      	bcs.n	cf82 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    cf7e:	0841      	lsrs	r1, r0, #1
    cf80:	e000      	b.n	cf84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    cf82:	21ff      	movs	r1, #255	; 0xff
    cf84:	1a40      	subs	r0, r0, r1
    cf86:	f240 6172 	movw	r1, #1650	; 0x672
    cf8a:	4288      	cmp	r0, r1
    cf8c:	db00      	blt.n	cf90 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    cf8e:	4608      	mov	r0, r1
    cf90:	b280      	uxth	r0, r0
    cf92:	4770      	bx	lr

0000cf94 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    cf94:	2101      	movs	r1, #1
    cf96:	f7ff bf85 	b.w	cea4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000cf9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    cf9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf9e:	4606      	mov	r6, r0
    cfa0:	f342 0780 	sbfx	r7, r2, #2, #1
    cfa4:	7848      	ldrb	r0, [r1, #1]
    cfa6:	460c      	mov	r4, r1
    cfa8:	f022 0504 	bic.w	r5, r2, #4
    cfac:	1c7f      	adds	r7, r7, #1
    cfae:	b100      	cbz	r0, cfb2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    cfb0:	b90d      	cbnz	r5, cfb6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    cfb2:	4328      	orrs	r0, r5
    cfb4:	d104      	bne.n	cfc0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    cfb6:	b145      	cbz	r5, cfca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    cfb8:	2100      	movs	r1, #0
    cfba:	4620      	mov	r0, r4
    cfbc:	f7f4 f936 	bl	122c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    cfc0:	20ff      	movs	r0, #255	; 0xff
    cfc2:	70a0      	strb	r0, [r4, #2]
    cfc4:	b11f      	cbz	r7, cfce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    cfc6:	2000      	movs	r0, #0
    cfc8:	e002      	b.n	cfd0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    cfca:	2101      	movs	r1, #1
    cfcc:	e7f5      	b.n	cfba <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    cfce:	2002      	movs	r0, #2
    cfd0:	1821      	adds	r1, r4, r0
    cfd2:	7d09      	ldrb	r1, [r1, #20]
    cfd4:	2903      	cmp	r1, #3
    cfd6:	d102      	bne.n	cfde <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cfd8:	2d02      	cmp	r5, #2
    cfda:	d000      	beq.n	cfde <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cfdc:	1c40      	adds	r0, r0, #1
    cfde:	1822      	adds	r2, r4, r0
    cfe0:	2101      	movs	r1, #1
    cfe2:	7511      	strb	r1, [r2, #20]
    cfe4:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    cfe8:	2200      	movs	r2, #0
    cfea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cfee:	830a      	strh	r2, [r1, #24]
    cff0:	6840      	ldr	r0, [r0, #4]
    cff2:	70a2      	strb	r2, [r4, #2]
    cff4:	4631      	mov	r1, r6
    cff6:	f362 010f 	bfi	r1, r2, #0, #16
    cffa:	e9c6 0100 	strd	r0, r1, [r6]
    cffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d002 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d006:	461e      	mov	r6, r3
    d008:	4613      	mov	r3, r2
    d00a:	4604      	mov	r4, r0
    d00c:	b109      	cbz	r1, d012 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d00e:	2000      	movs	r0, #0
    d010:	e000      	b.n	d014 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d012:	2002      	movs	r0, #2
    d014:	21ff      	movs	r1, #255	; 0xff
    d016:	70a1      	strb	r1, [r4, #2]
    d018:	1821      	adds	r1, r4, r0
    d01a:	7d0a      	ldrb	r2, [r1, #20]
    d01c:	2a01      	cmp	r2, #1
    d01e:	d003      	beq.n	d028 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d020:	7d49      	ldrb	r1, [r1, #21]
    d022:	2901      	cmp	r1, #1
    d024:	d10c      	bne.n	d040 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d026:	1c40      	adds	r0, r0, #1
    d028:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d02c:	2700      	movs	r7, #0
    d02e:	8b29      	ldrh	r1, [r5, #24]
    d030:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d034:	198a      	adds	r2, r1, r6
    d036:	4562      	cmp	r2, ip
    d038:	d905      	bls.n	d046 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d03a:	4420      	add	r0, r4
    d03c:	832f      	strh	r7, [r5, #24]
    d03e:	7507      	strb	r7, [r0, #20]
    d040:	2000      	movs	r0, #0
    d042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d046:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d04a:	4632      	mov	r2, r6
    d04c:	6840      	ldr	r0, [r0, #4]
    d04e:	4408      	add	r0, r1
    d050:	4619      	mov	r1, r3
    d052:	f003 f9c1 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d056:	8b28      	ldrh	r0, [r5, #24]
    d058:	4430      	add	r0, r6
    d05a:	8328      	strh	r0, [r5, #24]
    d05c:	70a7      	strb	r7, [r4, #2]
    d05e:	2001      	movs	r0, #1
    d060:	e7ef      	b.n	d042 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d062 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d062:	b510      	push	{r4, lr}
    d064:	2101      	movs	r1, #1
    d066:	f7ff ff36 	bl	ced6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d06a:	2800      	cmp	r0, #0
    d06c:	d000      	beq.n	d070 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d06e:	2001      	movs	r0, #1
    d070:	bd10      	pop	{r4, pc}

0000d072 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d072:	2201      	movs	r2, #1
    d074:	f7ff bf3c 	b.w	cef0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d078 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d078:	2200      	movs	r2, #0
    d07a:	f7ff bf39 	b.w	cef0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d07e <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    d07e:	b510      	push	{r4, lr}
    d080:	2100      	movs	r1, #0
    d082:	f7ff ff28 	bl	ced6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d086:	2800      	cmp	r0, #0
    d088:	d000      	beq.n	d08c <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    d08a:	2001      	movs	r0, #1
    d08c:	bd10      	pop	{r4, pc}

0000d08e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d08e:	b570      	push	{r4, r5, r6, lr}
    d090:	b109      	cbz	r1, d096 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d092:	2300      	movs	r3, #0
    d094:	e000      	b.n	d098 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d096:	2302      	movs	r3, #2
    d098:	21ff      	movs	r1, #255	; 0xff
    d09a:	7081      	strb	r1, [r0, #2]
    d09c:	18c1      	adds	r1, r0, r3
    d09e:	2402      	movs	r4, #2
    d0a0:	7d0d      	ldrb	r5, [r1, #20]
    d0a2:	2d01      	cmp	r5, #1
    d0a4:	d007      	beq.n	d0b6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d0a6:	7d4d      	ldrb	r5, [r1, #21]
    d0a8:	2d01      	cmp	r5, #1
    d0aa:	d009      	beq.n	d0c0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d0ac:	f44f 718b 	mov.w	r1, #278	; 0x116
    d0b0:	2009      	movs	r0, #9
    d0b2:	f7f3 fc91 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d0ba:	831a      	strh	r2, [r3, #24]
    d0bc:	750c      	strb	r4, [r1, #20]
    d0be:	e003      	b.n	d0c8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d0c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d0c4:	835a      	strh	r2, [r3, #26]
    d0c6:	754c      	strb	r4, [r1, #21]
    d0c8:	2100      	movs	r1, #0
    d0ca:	7081      	strb	r1, [r0, #2]
    d0cc:	bd70      	pop	{r4, r5, r6, pc}

0000d0ce <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d0ce:	2101      	movs	r1, #1
    d0d0:	7001      	strb	r1, [r0, #0]
    d0d2:	4770      	bx	lr

0000d0d4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d0d4:	2201      	movs	r2, #1
    d0d6:	4611      	mov	r1, r2
    d0d8:	f7ff bf38 	b.w	cf4c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d0dc <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d0dc:	2201      	movs	r2, #1
    d0de:	2100      	movs	r1, #0
    d0e0:	f7ff bf34 	b.w	cf4c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d0e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d0e4:	2100      	movs	r1, #0
    d0e6:	f7ff bedd 	b.w	cea4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d0ea:	2800      	cmp	r0, #0
    d0ec:	db09      	blt.n	d102 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d0ee:	f000 021f 	and.w	r2, r0, #31
    d0f2:	2101      	movs	r1, #1
    d0f4:	4091      	lsls	r1, r2
    d0f6:	0940      	lsrs	r0, r0, #5
    d0f8:	0080      	lsls	r0, r0, #2
    d0fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d0fe:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d102:	4770      	bx	lr
    d104:	2800      	cmp	r0, #0
    d106:	db0d      	blt.n	d124 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d108:	f000 021f 	and.w	r2, r0, #31
    d10c:	2101      	movs	r1, #1
    d10e:	4091      	lsls	r1, r2
    d110:	0940      	lsrs	r0, r0, #5
    d112:	0080      	lsls	r0, r0, #2
    d114:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d118:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d11c:	f3bf 8f4f 	dsb	sy
    d120:	f3bf 8f6f 	isb	sy
    d124:	4770      	bx	lr
    d126:	b510      	push	{r4, lr}
    d128:	200e      	movs	r0, #14
    d12a:	f7ff ffeb 	bl	d104 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d12e:	200e      	movs	r0, #14
    d130:	f7ff ffdb 	bl	d0ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d134:	200f      	movs	r0, #15
    d136:	f7ff ffe5 	bl	d104 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d13e:	200f      	movs	r0, #15
    d140:	f7ff bfd3 	b.w	d0ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d144:	2800      	cmp	r0, #0
    d146:	db09      	blt.n	d15c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d148:	f000 021f 	and.w	r2, r0, #31
    d14c:	2101      	movs	r1, #1
    d14e:	4091      	lsls	r1, r2
    d150:	0940      	lsrs	r0, r0, #5
    d152:	0080      	lsls	r0, r0, #2
    d154:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d158:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d15c:	4770      	bx	lr
    d15e:	5840      	ldr	r0, [r0, r1]
    d160:	2800      	cmp	r0, #0
    d162:	d000      	beq.n	d166 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d164:	2001      	movs	r0, #1
    d166:	4770      	bx	lr

0000d168 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d168:	b510      	push	{r4, lr}
    d16a:	4604      	mov	r4, r0
    d16c:	4620      	mov	r0, r4
    d16e:	f7f4 f965 	bl	143c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d172:	2811      	cmp	r0, #17
    d174:	d0fa      	beq.n	d16c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d176:	bd10      	pop	{r4, pc}

0000d178 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d178:	b510      	push	{r4, lr}
    d17a:	f7ff fff5 	bl	d168 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d17e:	2800      	cmp	r0, #0
    d180:	d003      	beq.n	d18a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d182:	21a0      	movs	r1, #160	; 0xa0
    d184:	201d      	movs	r0, #29
    d186:	f7f3 fc27 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d18a:	bd10      	pop	{r4, pc}

0000d18c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d18c:	f7f4 bab4 	b.w	16f8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d190 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d190:	f7f4 baa2 	b.w	16d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d194 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d194:	b510      	push	{r4, lr}
    d196:	4050      	eors	r0, r2
    d198:	780a      	ldrb	r2, [r1, #0]
    d19a:	781c      	ldrb	r4, [r3, #0]
    d19c:	4062      	eors	r2, r4
    d19e:	4410      	add	r0, r2
    d1a0:	784a      	ldrb	r2, [r1, #1]
    d1a2:	785c      	ldrb	r4, [r3, #1]
    d1a4:	4062      	eors	r2, r4
    d1a6:	4410      	add	r0, r2
    d1a8:	788a      	ldrb	r2, [r1, #2]
    d1aa:	789c      	ldrb	r4, [r3, #2]
    d1ac:	4062      	eors	r2, r4
    d1ae:	4410      	add	r0, r2
    d1b0:	78ca      	ldrb	r2, [r1, #3]
    d1b2:	78dc      	ldrb	r4, [r3, #3]
    d1b4:	4062      	eors	r2, r4
    d1b6:	4410      	add	r0, r2
    d1b8:	790a      	ldrb	r2, [r1, #4]
    d1ba:	791c      	ldrb	r4, [r3, #4]
    d1bc:	7949      	ldrb	r1, [r1, #5]
    d1be:	4062      	eors	r2, r4
    d1c0:	4410      	add	r0, r2
    d1c2:	795a      	ldrb	r2, [r3, #5]
    d1c4:	4051      	eors	r1, r2
    d1c6:	42c1      	cmn	r1, r0
    d1c8:	d101      	bne.n	d1ce <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d1ca:	2001      	movs	r0, #1
    d1cc:	bd10      	pop	{r4, pc}
    d1ce:	2000      	movs	r0, #0
    d1d0:	bd10      	pop	{r4, pc}

0000d1d2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d1d2:	b510      	push	{r4, lr}
    d1d4:	2900      	cmp	r1, #0
    d1d6:	4604      	mov	r4, r0
    d1d8:	f04f 0106 	mov.w	r1, #6
    d1dc:	d002      	beq.n	d1e4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d1de:	f7f3 fc9b 	bl	b18 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d1e2:	e001      	b.n	d1e8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d1e4:	f7f3 fca6 	bl	b34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d1e8:	7960      	ldrb	r0, [r4, #5]
    d1ea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d1ee:	7160      	strb	r0, [r4, #5]
    d1f0:	bd10      	pop	{r4, pc}

0000d1f2 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d1f2:	4770      	bx	lr

0000d1f4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d1f4:	b530      	push	{r4, r5, lr}
    d1f6:	460c      	mov	r4, r1
    d1f8:	4605      	mov	r5, r0
    d1fa:	b08d      	sub	sp, #52	; 0x34
    d1fc:	f04f 0103 	mov.w	r1, #3
    d200:	f104 0003 	add.w	r0, r4, #3
    d204:	b112      	cbz	r2, d20c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d206:	f7f3 fc87 	bl	b18 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d20a:	e001      	b.n	d210 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d20c:	f7f3 fc92 	bl	b34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d210:	7960      	ldrb	r0, [r4, #5]
    d212:	220d      	movs	r2, #13
    d214:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d218:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d21c:	7160      	strb	r0, [r4, #5]
    d21e:	2100      	movs	r1, #0
    d220:	a804      	add	r0, sp, #16
    d222:	f003 f953 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d226:	78e0      	ldrb	r0, [r4, #3]
    d228:	f88d 001f 	strb.w	r0, [sp, #31]
    d22c:	7920      	ldrb	r0, [r4, #4]
    d22e:	f88d 001e 	strb.w	r0, [sp, #30]
    d232:	7960      	ldrb	r0, [r4, #5]
    d234:	f88d 001d 	strb.w	r0, [sp, #29]
    d238:	2210      	movs	r2, #16
    d23a:	4629      	mov	r1, r5
    d23c:	4668      	mov	r0, sp
    d23e:	f003 f8cb 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d242:	4668      	mov	r0, sp
    d244:	f7ff ff98 	bl	d178 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d248:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d24c:	7020      	strb	r0, [r4, #0]
    d24e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d252:	7060      	strb	r0, [r4, #1]
    d254:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d258:	70a0      	strb	r0, [r4, #2]
    d25a:	b00d      	add	sp, #52	; 0x34
    d25c:	bd30      	pop	{r4, r5, pc}

0000d25e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d25e:	f7f4 bdc3 	b.w	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    d262:	07c1      	lsls	r1, r0, #31
    d264:	d001      	beq.n	d26a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d266:	2001      	movs	r0, #1
    d268:	4770      	bx	lr
    d26a:	0780      	lsls	r0, r0, #30
    d26c:	d501      	bpl.n	d272 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d26e:	2002      	movs	r0, #2
    d270:	4770      	bx	lr
    d272:	2000      	movs	r0, #0
    d274:	4770      	bx	lr
    d276:	b510      	push	{r4, lr}
    d278:	2801      	cmp	r0, #1
    d27a:	d008      	beq.n	d28e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d27c:	2802      	cmp	r0, #2
    d27e:	d004      	beq.n	d28a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d280:	f240 4122 	movw	r1, #1058	; 0x422
    d284:	2006      	movs	r0, #6
    d286:	f7f3 fba7 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d28a:	2001      	movs	r0, #1
    d28c:	bd10      	pop	{r4, pc}
    d28e:	2000      	movs	r0, #0
    d290:	bd10      	pop	{r4, pc}
    d292:	2900      	cmp	r1, #0
    d294:	d004      	beq.n	d2a0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d296:	2801      	cmp	r0, #1
    d298:	d003      	beq.n	d2a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d29a:	2901      	cmp	r1, #1
    d29c:	d001      	beq.n	d2a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d29e:	2002      	movs	r0, #2
    d2a0:	4770      	bx	lr
    d2a2:	2001      	movs	r0, #1
    d2a4:	4770      	bx	lr
    d2a6:	f7ff bc95 	b.w	cbd4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d2aa <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d2aa:	2101      	movs	r1, #1
    d2ac:	f7f5 b8a6 	b.w	23fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d2b0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d2b0:	b510      	push	{r4, lr}
    d2b2:	f002 fe75 	bl	ffa0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d2b6:	b118      	cbz	r0, d2c0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d2bc:	f7f9 bed2 	b.w	7064 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d2c0:	20ff      	movs	r0, #255	; 0xff
    d2c2:	bd10      	pop	{r4, pc}

0000d2c4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d2c4:	b510      	push	{r4, lr}
    d2c6:	f7f5 f8e1 	bl	248c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d2ca:	2810      	cmp	r0, #16
    d2cc:	d003      	beq.n	d2d6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d2ce:	f7f5 f8ad 	bl	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d2d2:	2810      	cmp	r0, #16
    d2d4:	d100      	bne.n	d2d8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d2d6:	2008      	movs	r0, #8
    d2d8:	bd10      	pop	{r4, pc}

0000d2da <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d2da:	b510      	push	{r4, lr}
    d2dc:	f7f5 f8d6 	bl	248c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d2e0:	2810      	cmp	r0, #16
    d2e2:	d003      	beq.n	d2ec <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d2e4:	f7f5 f930 	bl	2548 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    d2e8:	2001      	movs	r0, #1
    d2ea:	bd10      	pop	{r4, pc}
    d2ec:	2000      	movs	r0, #0
    d2ee:	bd10      	pop	{r4, pc}

0000d2f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d2f0:	b570      	push	{r4, r5, r6, lr}
    d2f2:	460e      	mov	r6, r1
    d2f4:	b08c      	sub	sp, #48	; 0x30
    d2f6:	4614      	mov	r4, r2
    d2f8:	4601      	mov	r1, r0
    d2fa:	461d      	mov	r5, r3
    d2fc:	2210      	movs	r2, #16
    d2fe:	4668      	mov	r0, sp
    d300:	f000 f938 	bl	d574 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d304:	2210      	movs	r2, #16
    d306:	4631      	mov	r1, r6
    d308:	a804      	add	r0, sp, #16
    d30a:	f000 f933 	bl	d574 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d30e:	4668      	mov	r0, sp
    d310:	f7ff ff32 	bl	d178 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d314:	a908      	add	r1, sp, #32
    d316:	f04f 0210 	mov.w	r2, #16
    d31a:	4628      	mov	r0, r5
    d31c:	b11c      	cbz	r4, d326 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d31e:	f000 f929 	bl	d574 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d322:	b00c      	add	sp, #48	; 0x30
    d324:	bd70      	pop	{r4, r5, r6, pc}
    d326:	f003 f857 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d32a:	e7fa      	b.n	d322 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d32c:	b510      	push	{r4, lr}
    d32e:	460c      	mov	r4, r1
    d330:	2100      	movs	r1, #0
    d332:	f7ff fd80 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d336:	6060      	str	r0, [r4, #4]
    d338:	b118      	cbz	r0, d342 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d33a:	2001      	movs	r0, #1
    d33c:	7020      	strb	r0, [r4, #0]
    d33e:	2000      	movs	r0, #0
    d340:	bd10      	pop	{r4, pc}
    d342:	2002      	movs	r0, #2
    d344:	bd10      	pop	{r4, pc}

0000d346 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d346:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d34a:	4348      	muls	r0, r1
    d34c:	4770      	bx	lr

0000d34e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d34e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d352:	fbb0 f0f1 	udiv	r0, r0, r1
    d356:	b280      	uxth	r0, r0
    d358:	4770      	bx	lr

0000d35a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d35a:	b570      	push	{r4, r5, r6, lr}
    d35c:	4604      	mov	r4, r0
    d35e:	4290      	cmp	r0, r2
    d360:	d20b      	bcs.n	d37a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d362:	1b10      	subs	r0, r2, r4
    d364:	2865      	cmp	r0, #101	; 0x65
    d366:	d200      	bcs.n	d36a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d368:	2065      	movs	r0, #101	; 0x65
    d36a:	1825      	adds	r5, r4, r0
    d36c:	428d      	cmp	r5, r1
    d36e:	d803      	bhi.n	d378 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d370:	2103      	movs	r1, #3
    d372:	f7fc f8f7 	bl	9564 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d376:	b108      	cbz	r0, d37c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d378:	4620      	mov	r0, r4
    d37a:	bd70      	pop	{r4, r5, r6, pc}
    d37c:	4628      	mov	r0, r5
    d37e:	bd70      	pop	{r4, r5, r6, pc}

0000d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d380:	b510      	push	{r4, lr}
    d382:	f1a2 0310 	sub.w	r3, r2, #16
    d386:	290d      	cmp	r1, #13
    d388:	d24d      	bcs.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d38a:	e8df f001 	tbb	[pc, r1]
    d38e:	0907      	.short	0x0907
    d390:	1d1a150e 	.word	0x1d1a150e
    d394:	4e2c2921 	.word	0x4e2c2921
    d398:	0048362f 	.word	0x0048362f
    d39c:	b3f2      	cbz	r2, d41c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d39e:	e042      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3a0:	2a06      	cmp	r2, #6
    d3a2:	d03e      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3a4:	2a07      	cmp	r2, #7
    d3a6:	d03c      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3a8:	e03d      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3aa:	2a0b      	cmp	r2, #11
    d3ac:	d039      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3ae:	2a0c      	cmp	r2, #12
    d3b0:	d037      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3b2:	2a0a      	cmp	r2, #10
    d3b4:	d035      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3b6:	e036      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3b8:	2a0d      	cmp	r2, #13
    d3ba:	d032      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3bc:	2a0e      	cmp	r2, #14
    d3be:	d030      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3c0:	e031      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3c2:	2b0c      	cmp	r3, #12
    d3c4:	d92d      	bls.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3c6:	e02e      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3c8:	3a11      	subs	r2, #17
    d3ca:	2a0b      	cmp	r2, #11
    d3cc:	d929      	bls.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3ce:	e02a      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3d0:	2b03      	cmp	r3, #3
    d3d2:	d926      	bls.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3d4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    d3d8:	b1f8      	cbz	r0, d41a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d3da:	2a1c      	cmp	r2, #28
    d3dc:	d921      	bls.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3de:	e022      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3e0:	2a04      	cmp	r2, #4
    d3e2:	d01e      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3e4:	e01f      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3e6:	2a01      	cmp	r2, #1
    d3e8:	d01b      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3ea:	e01c      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3ec:	2a1d      	cmp	r2, #29
    d3ee:	d018      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3f0:	2a1e      	cmp	r2, #30
    d3f2:	d016      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3f4:	2a1f      	cmp	r2, #31
    d3f6:	d014      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3f8:	e015      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d3fa:	2a20      	cmp	r2, #32
    d3fc:	d011      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d3fe:	2a21      	cmp	r2, #33	; 0x21
    d400:	d00f      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d402:	2a22      	cmp	r2, #34	; 0x22
    d404:	d00d      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d406:	2a23      	cmp	r2, #35	; 0x23
    d408:	d00b      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d40a:	2a24      	cmp	r2, #36	; 0x24
    d40c:	d009      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d40e:	2a25      	cmp	r2, #37	; 0x25
    d410:	d007      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d412:	2a26      	cmp	r2, #38	; 0x26
    d414:	d005      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d416:	2a2e      	cmp	r2, #46	; 0x2e
    d418:	d003      	beq.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d41a:	e004      	b.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d41c:	e001      	b.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d41e:	2a28      	cmp	r2, #40	; 0x28
    d420:	d101      	bne.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d422:	2001      	movs	r0, #1
    d424:	bd10      	pop	{r4, pc}
    d426:	2000      	movs	r0, #0
    d428:	bd10      	pop	{r4, pc}
    d42a:	2a0f      	cmp	r2, #15
    d42c:	d1fb      	bne.n	d426 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d42e:	e7f8      	b.n	d422 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d430 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d430:	280b      	cmp	r0, #11
    d432:	d019      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d434:	280c      	cmp	r0, #12
    d436:	d017      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d438:	280a      	cmp	r0, #10
    d43a:	d015      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d43c:	280d      	cmp	r0, #13
    d43e:	d013      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d440:	280e      	cmp	r0, #14
    d442:	d011      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d444:	2820      	cmp	r0, #32
    d446:	d00f      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d448:	2821      	cmp	r0, #33	; 0x21
    d44a:	d00d      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d44c:	2822      	cmp	r0, #34	; 0x22
    d44e:	d00b      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d450:	2823      	cmp	r0, #35	; 0x23
    d452:	d009      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d454:	2824      	cmp	r0, #36	; 0x24
    d456:	d007      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d458:	2825      	cmp	r0, #37	; 0x25
    d45a:	d005      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d45c:	2826      	cmp	r0, #38	; 0x26
    d45e:	d003      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d460:	282e      	cmp	r0, #46	; 0x2e
    d462:	d001      	beq.n	d468 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d464:	2000      	movs	r0, #0
    d466:	4770      	bx	lr
    d468:	2001      	movs	r0, #1
    d46a:	4770      	bx	lr

0000d46c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d46c:	f011 0f0c 	tst.w	r1, #12
    d470:	d018      	beq.n	d4a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    d472:	074a      	lsls	r2, r1, #29
    d474:	f44f 7116 	mov.w	r1, #600	; 0x258
    d478:	2a00      	cmp	r2, #0
    d47a:	da02      	bge.n	d482 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d47c:	f04f 0210 	mov.w	r2, #16
    d480:	e001      	b.n	d486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d482:	f04f 0240 	mov.w	r2, #64	; 0x40
    d486:	da01      	bge.n	d48c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d488:	f04f 0196 	mov.w	r1, #150	; 0x96
    d48c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d490:	eba0 0301 	sub.w	r3, r0, r1
    d494:	4288      	cmp	r0, r1
    d496:	d903      	bls.n	d4a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d498:	fb93 f0f2 	sdiv	r0, r3, r2
    d49c:	b280      	uxth	r0, r0
    d49e:	4770      	bx	lr
    d4a0:	2000      	movs	r0, #0
    d4a2:	4770      	bx	lr
    d4a4:	2902      	cmp	r1, #2
    d4a6:	d008      	beq.n	d4ba <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d4a8:	2870      	cmp	r0, #112	; 0x70
    d4aa:	d9f9      	bls.n	d4a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d4ac:	3870      	subs	r0, #112	; 0x70
    d4ae:	17c1      	asrs	r1, r0, #31
    d4b0:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d4b4:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    d4b8:	4770      	bx	lr
    d4ba:	283c      	cmp	r0, #60	; 0x3c
    d4bc:	d9f0      	bls.n	d4a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d4be:	383c      	subs	r0, #60	; 0x3c
    d4c0:	17c1      	asrs	r1, r0, #31
    d4c2:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d4c6:	f3c0 008f 	ubfx	r0, r0, #2, #16
    d4ca:	4770      	bx	lr

0000d4cc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d4cc:	6809      	ldr	r1, [r1, #0]
    d4ce:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    d4d2:	4770      	bx	lr

0000d4d4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d4d4:	07c1      	lsls	r1, r0, #31
    d4d6:	d001      	beq.n	d4dc <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d4d8:	2001      	movs	r0, #1
    d4da:	4770      	bx	lr
    d4dc:	0781      	lsls	r1, r0, #30
    d4de:	d501      	bpl.n	d4e4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d4e0:	2002      	movs	r0, #2
    d4e2:	4770      	bx	lr
    d4e4:	0740      	lsls	r0, r0, #29
    d4e6:	d501      	bpl.n	d4ec <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d4e8:	2008      	movs	r0, #8
    d4ea:	4770      	bx	lr
    d4ec:	2000      	movs	r0, #0
    d4ee:	4770      	bx	lr

0000d4f0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d4f0:	b510      	push	{r4, lr}
    d4f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d4f6:	2901      	cmp	r1, #1
    d4f8:	d006      	beq.n	d508 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d4fa:	2902      	cmp	r1, #2
    d4fc:	d005      	beq.n	d50a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d4fe:	f240 31a1 	movw	r1, #929	; 0x3a1
    d502:	2029      	movs	r0, #41	; 0x29
    d504:	f7f3 fa68 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d508:	b108      	cbz	r0, d50e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d50a:	4610      	mov	r0, r2
    d50c:	bd10      	pop	{r4, pc}
    d50e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d512:	bd10      	pop	{r4, pc}

0000d514 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d518:	4607      	mov	r7, r0
    d51a:	460e      	mov	r6, r1
    d51c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    d520:	f7fc fbe2 	bl	9ce8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d524:	b198      	cbz	r0, d54e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    d526:	b31e      	cbz	r6, d570 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d528:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    d52c:	1b40      	subs	r0, r0, r5
    d52e:	2300      	movs	r3, #0
    d530:	eb61 0104 	sbc.w	r1, r1, r4
    d534:	461a      	mov	r2, r3
    d536:	1a1b      	subs	r3, r3, r0
    d538:	418a      	sbcs	r2, r1
    d53a:	da19      	bge.n	d570 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d53c:	1c42      	adds	r2, r0, #1
    d53e:	f171 0100 	sbcs.w	r1, r1, #0
    d542:	db07      	blt.n	d554 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    d544:	f240 211b 	movw	r1, #539	; 0x21b
    d548:	2029      	movs	r0, #41	; 0x29
    d54a:	f7f3 fa45 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d54e:	f240 2111 	movw	r1, #529	; 0x211
    d552:	e7f9      	b.n	d548 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    d554:	4430      	add	r0, r6
    d556:	1e40      	subs	r0, r0, #1
    d558:	fbb0 f1f6 	udiv	r1, r0, r6
    d55c:	fb01 f006 	mul.w	r0, r1, r6
    d560:	1828      	adds	r0, r5, r0
    d562:	f144 0400 	adc.w	r4, r4, #0
    d566:	e9c7 0404 	strd	r0, r4, [r7, #16]
    d56a:	4608      	mov	r0, r1
    d56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d570:	2000      	movs	r0, #0
    d572:	e7fb      	b.n	d56c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000d574 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d574:	b530      	push	{r4, r5, lr}
    d576:	4613      	mov	r3, r2
    d578:	e006      	b.n	d588 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d57a:	18cc      	adds	r4, r1, r3
    d57c:	1ad5      	subs	r5, r2, r3
    d57e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d582:	1e5b      	subs	r3, r3, #1
    d584:	5544      	strb	r4, [r0, r5]
    d586:	b2db      	uxtb	r3, r3
    d588:	2b00      	cmp	r3, #0
    d58a:	d1f6      	bne.n	d57a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d58c:	bd30      	pop	{r4, r5, pc}

0000d58e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d58e:	2300      	movs	r3, #0
    d590:	6403      	str	r3, [r0, #64]	; 0x40
    d592:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    d596:	f240 2371 	movw	r3, #625	; 0x271
    d59a:	435a      	muls	r2, r3
    d59c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d5a0:	1e52      	subs	r2, r2, #1
    d5a2:	fbb2 f1f1 	udiv	r1, r2, r1
    d5a6:	6441      	str	r1, [r0, #68]	; 0x44
    d5a8:	4770      	bx	lr

0000d5aa <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d5aa:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d5ae:	4607      	mov	r7, r0
    d5b0:	4690      	mov	r8, r2
    d5b2:	468b      	mov	fp, r1
    d5b4:	2601      	movs	r6, #1
    d5b6:	4608      	mov	r0, r1
    d5b8:	f000 f9e1 	bl	d97e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    d5bc:	4682      	mov	sl, r0
    d5be:	4658      	mov	r0, fp
    d5c0:	f000 f9df 	bl	d982 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    d5c4:	4681      	mov	r9, r0
    d5c6:	f7ff ff85 	bl	d4d4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d5ca:	4604      	mov	r4, r0
    d5cc:	4650      	mov	r0, sl
    d5ce:	f7ff ff81 	bl	d4d4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d5d2:	4605      	mov	r5, r0
    d5d4:	ea54 0005 	orrs.w	r0, r4, r5
    d5d8:	d100      	bne.n	d5dc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d5da:	2600      	movs	r6, #0
    d5dc:	f7f9 fcc4 	bl	6f68 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d5e0:	ea10 0f09 	tst.w	r0, r9
    d5e4:	d100      	bne.n	d5e8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d5e6:	2400      	movs	r4, #0
    d5e8:	f7f9 fcbe 	bl	6f68 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d5ec:	ea10 0f0a 	tst.w	r0, sl
    d5f0:	d100      	bne.n	d5f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d5f2:	2500      	movs	r5, #0
    d5f4:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d5f8:	42a0      	cmp	r0, r4
    d5fa:	d100      	bne.n	d5fe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d5fc:	2400      	movs	r4, #0
    d5fe:	f888 4000 	strb.w	r4, [r8]
    d602:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d606:	42a8      	cmp	r0, r5
    d608:	d100      	bne.n	d60c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d60a:	2500      	movs	r5, #0
    d60c:	f888 5001 	strb.w	r5, [r8, #1]
    d610:	b974      	cbnz	r4, d630 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d612:	b96d      	cbnz	r5, d630 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d614:	4658      	mov	r0, fp
    d616:	f000 f9a0 	bl	d95a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    d61a:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    d61e:	1a40      	subs	r0, r0, r1
    d620:	b200      	sxth	r0, r0
    d622:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d626:	4288      	cmp	r0, r1
    d628:	dc01      	bgt.n	d62e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d62a:	2800      	cmp	r0, #0
    d62c:	dc00      	bgt.n	d630 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d62e:	2600      	movs	r6, #0
    d630:	4630      	mov	r0, r6
    d632:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d636 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d636:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d63a:	4348      	muls	r0, r1
    d63c:	4770      	bx	lr

0000d63e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d63e:	f240 2171 	movw	r1, #625	; 0x271
    d642:	fb10 f001 	smulbb	r0, r0, r1
    d646:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d64a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    d64e:	4770      	bx	lr

0000d650 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d650:	b510      	push	{r4, lr}
    d652:	2300      	movs	r3, #0
    d654:	461a      	mov	r2, r3
    d656:	e003      	b.n	d660 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d658:	5c84      	ldrb	r4, [r0, r2]
    d65a:	4323      	orrs	r3, r4
    d65c:	1c52      	adds	r2, r2, #1
    d65e:	b2d2      	uxtb	r2, r2
    d660:	428a      	cmp	r2, r1
    d662:	d3f9      	bcc.n	d658 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d664:	b10b      	cbz	r3, d66a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d666:	2000      	movs	r0, #0
    d668:	bd10      	pop	{r4, pc}
    d66a:	2001      	movs	r0, #1
    d66c:	bd10      	pop	{r4, pc}
    d66e:	4401      	add	r1, r0
    d670:	2914      	cmp	r1, #20
    d672:	dd01      	ble.n	d678 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    d674:	2014      	movs	r0, #20
    d676:	4770      	bx	lr
    d678:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    d67c:	4281      	cmp	r1, r0
    d67e:	dbfa      	blt.n	d676 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x26>
    d680:	b248      	sxtb	r0, r1
    d682:	4770      	bx	lr

0000d684 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    d684:	b570      	push	{r4, r5, r6, lr}
    d686:	4605      	mov	r5, r0
    d688:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    d68c:	b286      	uxth	r6, r0
    d68e:	4610      	mov	r0, r2
    d690:	7aec      	ldrb	r4, [r5, #11]
    d692:	4631      	mov	r1, r6
    d694:	f000 f863 	bl	d75e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    d698:	4070      	eors	r0, r6
    d69a:	2125      	movs	r1, #37	; 0x25
    d69c:	fbb0 f2f1 	udiv	r2, r0, r1
    d6a0:	fb01 0112 	mls	r1, r1, r2, r0
    d6a4:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    d6a8:	f001 0307 	and.w	r3, r1, #7
    d6ac:	7852      	ldrb	r2, [r2, #1]
    d6ae:	2601      	movs	r6, #1
    d6b0:	409e      	lsls	r6, r3
    d6b2:	4232      	tst	r2, r6
    d6b4:	d001      	beq.n	d6ba <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    d6b6:	4608      	mov	r0, r1
    d6b8:	bd70      	pop	{r4, r5, r6, pc}
    d6ba:	4344      	muls	r4, r0
    d6bc:	0c21      	lsrs	r1, r4, #16
    d6be:	4628      	mov	r0, r5
    d6c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6c4:	f7f5 b848 	b.w	2758 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xbc>

0000d6c8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d6c8:	b510      	push	{r4, lr}
    d6ca:	4604      	mov	r4, r0
    d6cc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    d6d0:	b108      	cbz	r0, d6d6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d6d2:	2825      	cmp	r0, #37	; 0x25
    d6d4:	d901      	bls.n	d6da <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d6d6:	2012      	movs	r0, #18
    d6d8:	bd10      	pop	{r4, pc}
    d6da:	b132      	cbz	r2, d6ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    d6dc:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    d6e0:	b128      	cbz	r0, d6ee <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    d6e2:	2801      	cmp	r0, #1
    d6e4:	d009      	beq.n	d6fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    d6e6:	201f      	movs	r0, #31
    d6e8:	bd10      	pop	{r4, pc}
    d6ea:	2000      	movs	r0, #0
    d6ec:	bd10      	pop	{r4, pc}
    d6ee:	4620      	mov	r0, r4
    d6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d6f4:	4611      	mov	r1, r2
    d6f6:	f7f4 bfe7 	b.w	26c8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x2c>
    d6fa:	8aa2      	ldrh	r2, [r4, #20]
    d6fc:	6949      	ldr	r1, [r1, #20]
    d6fe:	f104 0025 	add.w	r0, r4, #37	; 0x25
    d702:	f7ff ffbf 	bl	d684 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d706:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    d70a:	e7ee      	b.n	d6ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000d70c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d70c:	b570      	push	{r4, r5, r6, lr}
    d70e:	4604      	mov	r4, r0
    d710:	1c40      	adds	r0, r0, #1
    d712:	4288      	cmp	r0, r1
    d714:	d004      	beq.n	d720 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    d716:	6808      	ldr	r0, [r1, #0]
    d718:	f8c4 0001 	str.w	r0, [r4, #1]
    d71c:	7908      	ldrb	r0, [r1, #4]
    d71e:	7160      	strb	r0, [r4, #5]
    d720:	7960      	ldrb	r0, [r4, #5]
    d722:	f000 001f 	and.w	r0, r0, #31
    d726:	7160      	strb	r0, [r4, #5]
    d728:	2000      	movs	r0, #0
    d72a:	72e0      	strb	r0, [r4, #11]
    d72c:	4605      	mov	r5, r0
    d72e:	1966      	adds	r6, r4, r5
    d730:	7870      	ldrb	r0, [r6, #1]
    d732:	f000 fb4a 	bl	ddca <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    d736:	71b0      	strb	r0, [r6, #6]
    d738:	7ae1      	ldrb	r1, [r4, #11]
    d73a:	1c6d      	adds	r5, r5, #1
    d73c:	4408      	add	r0, r1
    d73e:	b2ed      	uxtb	r5, r5
    d740:	72e0      	strb	r0, [r4, #11]
    d742:	2d05      	cmp	r5, #5
    d744:	d3f3      	bcc.n	d72e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    d746:	bd70      	pop	{r4, r5, r6, pc}
    d748:	b2c1      	uxtb	r1, r0
    d74a:	fa91 f1a1 	rbit	r1, r1
    d74e:	0a00      	lsrs	r0, r0, #8
    d750:	0e09      	lsrs	r1, r1, #24
    d752:	fa90 f0a0 	rbit	r0, r0
    d756:	0e00      	lsrs	r0, r0, #24
    d758:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    d75c:	4770      	bx	lr
    d75e:	b570      	push	{r4, r5, r6, lr}
    d760:	460d      	mov	r5, r1
    d762:	4048      	eors	r0, r1
    d764:	2400      	movs	r4, #0
    d766:	f7ff ffef 	bl	d748 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    d76a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    d76e:	1c64      	adds	r4, r4, #1
    d770:	4428      	add	r0, r5
    d772:	b2e4      	uxtb	r4, r4
    d774:	b280      	uxth	r0, r0
    d776:	2c03      	cmp	r4, #3
    d778:	d3f5      	bcc.n	d766 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    d77a:	bd70      	pop	{r4, r5, r6, pc}

0000d77c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    d77c:	7802      	ldrb	r2, [r0, #0]
    d77e:	f002 020f 	and.w	r2, r2, #15
    d782:	2a03      	cmp	r2, #3
    d784:	d003      	beq.n	d78e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    d786:	2a05      	cmp	r2, #5
    d788:	d104      	bne.n	d794 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    d78a:	f000 b92e 	b.w	d9ea <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    d78e:	7840      	ldrb	r0, [r0, #1]
    d790:	280c      	cmp	r0, #12
    d792:	d001      	beq.n	d798 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    d794:	2000      	movs	r0, #0
    d796:	4770      	bx	lr
    d798:	2001      	movs	r0, #1
    d79a:	4770      	bx	lr

0000d79c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    d79c:	b570      	push	{r4, r5, r6, lr}
    d79e:	4614      	mov	r4, r2
    d7a0:	4605      	mov	r5, r0
    d7a2:	2a1f      	cmp	r2, #31
    d7a4:	d903      	bls.n	d7ae <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    d7a6:	21ee      	movs	r1, #238	; 0xee
    d7a8:	202a      	movs	r0, #42	; 0x2a
    d7aa:	f7f3 f915 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7ae:	f105 0009 	add.w	r0, r5, #9
    d7b2:	f002 fe11 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7b6:	1da4      	adds	r4, r4, #6
    d7b8:	706c      	strb	r4, [r5, #1]
    d7ba:	bd70      	pop	{r4, r5, r6, pc}

0000d7bc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    d7bc:	b510      	push	{r4, lr}
    d7be:	7802      	ldrb	r2, [r0, #0]
    d7c0:	f001 030f 	and.w	r3, r1, #15
    d7c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    d7c8:	431a      	orrs	r2, r3
    d7ca:	7002      	strb	r2, [r0, #0]
    d7cc:	2907      	cmp	r1, #7
    d7ce:	d20c      	bcs.n	d7ea <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    d7d0:	e8df f001 	tbb	[pc, r1]
    d7d4:	06040604 	.word	0x06040604
    d7d8:	00040804 	.word	0x00040804
    d7dc:	2106      	movs	r1, #6
    d7de:	e002      	b.n	d7e6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    d7e0:	210c      	movs	r1, #12
    d7e2:	e000      	b.n	d7e6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    d7e4:	2122      	movs	r1, #34	; 0x22
    d7e6:	7041      	strb	r1, [r0, #1]
    d7e8:	bd10      	pop	{r4, pc}
    d7ea:	21a8      	movs	r1, #168	; 0xa8
    d7ec:	202a      	movs	r0, #42	; 0x2a
    d7ee:	f7f3 f8f3 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d7f2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    d7f2:	680a      	ldr	r2, [r1, #0]
    d7f4:	f840 2f09 	str.w	r2, [r0, #9]!
    d7f8:	8889      	ldrh	r1, [r1, #4]
    d7fa:	8081      	strh	r1, [r0, #4]
    d7fc:	4770      	bx	lr

0000d7fe <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    d7fe:	7802      	ldrb	r2, [r0, #0]
    d800:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d804:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d808:	7002      	strb	r2, [r0, #0]
    d80a:	4770      	bx	lr

0000d80c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    d80c:	680a      	ldr	r2, [r1, #0]
    d80e:	f840 2f03 	str.w	r2, [r0, #3]!
    d812:	8889      	ldrh	r1, [r1, #4]
    d814:	8081      	strh	r1, [r0, #4]
    d816:	4770      	bx	lr

0000d818 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    d818:	7802      	ldrb	r2, [r0, #0]
    d81a:	2340      	movs	r3, #64	; 0x40
    d81c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    d820:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d824:	430a      	orrs	r2, r1
    d826:	7002      	strb	r2, [r0, #0]
    d828:	4770      	bx	lr

0000d82a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    d82a:	b570      	push	{r4, r5, r6, lr}
    d82c:	4614      	mov	r4, r2
    d82e:	4605      	mov	r5, r0
    d830:	2a1f      	cmp	r2, #31
    d832:	d904      	bls.n	d83e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    d834:	f44f 7188 	mov.w	r1, #272	; 0x110
    d838:	202a      	movs	r0, #42	; 0x2a
    d83a:	f7f3 f8cd 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d83e:	f105 0009 	add.w	r0, r5, #9
    d842:	f002 fdc9 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d846:	1da4      	adds	r4, r4, #6
    d848:	706c      	strb	r4, [r5, #1]
    d84a:	bd70      	pop	{r4, r5, r6, pc}

0000d84c <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    d84c:	6842      	ldr	r2, [r0, #4]
    d84e:	600a      	str	r2, [r1, #0]
    d850:	7a00      	ldrb	r0, [r0, #8]
    d852:	7108      	strb	r0, [r1, #4]
    d854:	4770      	bx	lr

0000d856 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    d856:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d85a:	4770      	bx	lr

0000d85c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    d85c:	b570      	push	{r4, r5, r6, lr}
    d85e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d862:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    d866:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    d86a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d86e:	88c0      	ldrh	r0, [r0, #6]
    d870:	b131      	cbz	r1, d880 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    d872:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d876:	d903      	bls.n	d880 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    d878:	f640 5107 	movw	r1, #3335	; 0xd07
    d87c:	428a      	cmp	r2, r1
    d87e:	d90b      	bls.n	d898 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    d880:	1f91      	subs	r1, r2, #6
    d882:	f640 467a 	movw	r6, #3194	; 0xc7a
    d886:	42b1      	cmp	r1, r6
    d888:	d810      	bhi.n	d8ac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d88a:	b17b      	cbz	r3, d8ac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d88c:	2b08      	cmp	r3, #8
    d88e:	d80d      	bhi.n	d8ac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d890:	4293      	cmp	r3, r2
    d892:	d20b      	bcs.n	d8ac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d894:	4295      	cmp	r5, r2
    d896:	d809      	bhi.n	d8ac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d898:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    d89c:	d206      	bcs.n	d8ac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d89e:	f640 4176 	movw	r1, #3190	; 0xc76
    d8a2:	380a      	subs	r0, #10
    d8a4:	4288      	cmp	r0, r1
    d8a6:	d801      	bhi.n	d8ac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d8a8:	2001      	movs	r0, #1
    d8aa:	bd70      	pop	{r4, r5, r6, pc}
    d8ac:	2000      	movs	r0, #0
    d8ae:	bd70      	pop	{r4, r5, r6, pc}

0000d8b0 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    d8b0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d8b4:	4770      	bx	lr

0000d8b6 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    d8b6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d8ba:	4770      	bx	lr

0000d8bc <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    d8bc:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d8c0:	4770      	bx	lr

0000d8c2 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    d8c2:	b510      	push	{r4, lr}
    d8c4:	29fb      	cmp	r1, #251	; 0xfb
    d8c6:	d904      	bls.n	d8d2 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    d8c8:	f240 61a9 	movw	r1, #1705	; 0x6a9
    d8cc:	202a      	movs	r0, #42	; 0x2a
    d8ce:	f7f3 f883 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8d2:	7041      	strb	r1, [r0, #1]
    d8d4:	bd10      	pop	{r4, pc}

0000d8d6 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    d8d6:	8980      	ldrh	r0, [r0, #12]
    d8d8:	8008      	strh	r0, [r1, #0]
    d8da:	4770      	bx	lr

0000d8dc <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    d8dc:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d8e0:	6008      	str	r0, [r1, #0]
    d8e2:	4770      	bx	lr

0000d8e4 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    d8e4:	6842      	ldr	r2, [r0, #4]
    d8e6:	600a      	str	r2, [r1, #0]
    d8e8:	6880      	ldr	r0, [r0, #8]
    d8ea:	6048      	str	r0, [r1, #4]
    d8ec:	4770      	bx	lr

0000d8ee <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    d8ee:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d8f2:	600a      	str	r2, [r1, #0]
    d8f4:	6840      	ldr	r0, [r0, #4]
    d8f6:	6048      	str	r0, [r1, #4]
    d8f8:	4770      	bx	lr

0000d8fa <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    d8fa:	6809      	ldr	r1, [r1, #0]
    d8fc:	60c1      	str	r1, [r0, #12]
    d8fe:	4770      	bx	lr

0000d900 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    d900:	680a      	ldr	r2, [r1, #0]
    d902:	6042      	str	r2, [r0, #4]
    d904:	6849      	ldr	r1, [r1, #4]
    d906:	6081      	str	r1, [r0, #8]
    d908:	4770      	bx	lr

0000d90a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    d90a:	7800      	ldrb	r0, [r0, #0]
    d90c:	f000 0003 	and.w	r0, r0, #3
    d910:	4770      	bx	lr

0000d912 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    d912:	8880      	ldrh	r0, [r0, #4]
    d914:	4770      	bx	lr

0000d916 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    d916:	88c0      	ldrh	r0, [r0, #6]
    d918:	4770      	bx	lr

0000d91a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    d91a:	8900      	ldrh	r0, [r0, #8]
    d91c:	4770      	bx	lr

0000d91e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    d91e:	8940      	ldrh	r0, [r0, #10]
    d920:	4770      	bx	lr

0000d922 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    d922:	8901      	ldrh	r1, [r0, #8]
    d924:	291b      	cmp	r1, #27
    d926:	d30c      	bcc.n	d942 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d928:	8941      	ldrh	r1, [r0, #10]
    d92a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d92e:	4291      	cmp	r1, r2
    d930:	d307      	bcc.n	d942 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d932:	8881      	ldrh	r1, [r0, #4]
    d934:	291b      	cmp	r1, #27
    d936:	d304      	bcc.n	d942 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d938:	88c0      	ldrh	r0, [r0, #6]
    d93a:	4290      	cmp	r0, r2
    d93c:	d301      	bcc.n	d942 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d93e:	2001      	movs	r0, #1
    d940:	4770      	bx	lr
    d942:	2000      	movs	r0, #0
    d944:	4770      	bx	lr

0000d946 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    d946:	7901      	ldrb	r1, [r0, #4]
    d948:	0749      	lsls	r1, r1, #29
    d94a:	d004      	beq.n	d956 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    d94c:	7940      	ldrb	r0, [r0, #5]
    d94e:	0740      	lsls	r0, r0, #29
    d950:	d001      	beq.n	d956 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    d952:	2001      	movs	r0, #1
    d954:	4770      	bx	lr
    d956:	2000      	movs	r0, #0
    d958:	4770      	bx	lr

0000d95a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    d95a:	88c0      	ldrh	r0, [r0, #6]
    d95c:	4770      	bx	lr

0000d95e <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    d95e:	7901      	ldrb	r1, [r0, #4]
    d960:	7940      	ldrb	r0, [r0, #5]
    d962:	f001 0107 	and.w	r1, r1, #7
    d966:	1e4a      	subs	r2, r1, #1
    d968:	f000 0007 	and.w	r0, r0, #7
    d96c:	4011      	ands	r1, r2
    d96e:	1e42      	subs	r2, r0, #1
    d970:	4010      	ands	r0, r2
    d972:	4301      	orrs	r1, r0
    d974:	d001      	beq.n	d97a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    d976:	2000      	movs	r0, #0
    d978:	4770      	bx	lr
    d97a:	2001      	movs	r0, #1
    d97c:	4770      	bx	lr

0000d97e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    d97e:	7900      	ldrb	r0, [r0, #4]
    d980:	4770      	bx	lr

0000d982 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    d982:	7940      	ldrb	r0, [r0, #5]
    d984:	4770      	bx	lr

0000d986 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    d986:	7900      	ldrb	r0, [r0, #4]
    d988:	4770      	bx	lr

0000d98a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    d98a:	7101      	strb	r1, [r0, #4]
    d98c:	4770      	bx	lr

0000d98e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    d98e:	7940      	ldrb	r0, [r0, #5]
    d990:	4770      	bx	lr

0000d992 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    d992:	7141      	strb	r1, [r0, #5]
    d994:	4770      	bx	lr

0000d996 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    d996:	b510      	push	{r4, lr}
    d998:	2a1b      	cmp	r2, #27
    d99a:	d904      	bls.n	d9a6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    d99c:	f240 417f 	movw	r1, #1151	; 0x47f
    d9a0:	202a      	movs	r0, #42	; 0x2a
    d9a2:	f7f3 f819 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9a6:	7042      	strb	r2, [r0, #1]
    d9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9ac:	1cc0      	adds	r0, r0, #3
    d9ae:	f002 bd13 	b.w	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d9b2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    d9b2:	7802      	ldrb	r2, [r0, #0]
    d9b4:	f001 0103 	and.w	r1, r1, #3
    d9b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d9bc:	430a      	orrs	r2, r1
    d9be:	7002      	strb	r2, [r0, #0]
    d9c0:	4770      	bx	lr

0000d9c2 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    d9c2:	7101      	strb	r1, [r0, #4]
    d9c4:	0a09      	lsrs	r1, r1, #8
    d9c6:	7141      	strb	r1, [r0, #5]
    d9c8:	4770      	bx	lr

0000d9ca <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    d9ca:	7181      	strb	r1, [r0, #6]
    d9cc:	0a09      	lsrs	r1, r1, #8
    d9ce:	71c1      	strb	r1, [r0, #7]
    d9d0:	4770      	bx	lr

0000d9d2 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    d9d2:	7201      	strb	r1, [r0, #8]
    d9d4:	0a09      	lsrs	r1, r1, #8
    d9d6:	7241      	strb	r1, [r0, #9]
    d9d8:	4770      	bx	lr

0000d9da <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    d9da:	7281      	strb	r1, [r0, #10]
    d9dc:	0a09      	lsrs	r1, r1, #8
    d9de:	72c1      	strb	r1, [r0, #11]
    d9e0:	4770      	bx	lr

0000d9e2 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    d9e2:	7900      	ldrb	r0, [r0, #4]
    d9e4:	4770      	bx	lr

0000d9e6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    d9e6:	7900      	ldrb	r0, [r0, #4]
    d9e8:	4770      	bx	lr
    d9ea:	b570      	push	{r4, r5, r6, lr}
    d9ec:	f8d0 201f 	ldr.w	r2, [r0, #31]
    d9f0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d9f4:	f012 0fff 	tst.w	r2, #255	; 0xff
    d9f8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d9fc:	d108      	bne.n	da10 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    d9fe:	f3c2 2407 	ubfx	r4, r2, #8, #8
    da02:	b92c      	cbnz	r4, da10 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    da04:	f3c2 4407 	ubfx	r4, r2, #16, #8
    da08:	b914      	cbnz	r4, da10 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    da0a:	0e12      	lsrs	r2, r2, #24
    da0c:	d100      	bne.n	da10 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    da0e:	b34b      	cbz	r3, da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da10:	7846      	ldrb	r6, [r0, #1]
    da12:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    da16:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    da1a:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    da1e:	7d83      	ldrb	r3, [r0, #22]
    da20:	2e22      	cmp	r6, #34	; 0x22
    da22:	d11f      	bne.n	da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da24:	b131      	cbz	r1, da34 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    da26:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    da2a:	d903      	bls.n	da34 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    da2c:	f640 5107 	movw	r1, #3335	; 0xd07
    da30:	428a      	cmp	r2, r1
    da32:	d90b      	bls.n	da4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    da34:	1f91      	subs	r1, r2, #6
    da36:	f640 467a 	movw	r6, #3194	; 0xc7a
    da3a:	42b1      	cmp	r1, r6
    da3c:	d812      	bhi.n	da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da3e:	b18b      	cbz	r3, da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da40:	2b08      	cmp	r3, #8
    da42:	d80f      	bhi.n	da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da44:	4293      	cmp	r3, r2
    da46:	d20d      	bcs.n	da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da48:	4295      	cmp	r5, r2
    da4a:	d80b      	bhi.n	da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da4c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    da50:	d208      	bcs.n	da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da52:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    da56:	f640 4176 	movw	r1, #3190	; 0xc76
    da5a:	380a      	subs	r0, #10
    da5c:	4288      	cmp	r0, r1
    da5e:	d801      	bhi.n	da64 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    da60:	2001      	movs	r0, #1
    da62:	bd70      	pop	{r4, r5, r6, pc}
    da64:	2000      	movs	r0, #0
    da66:	bd70      	pop	{r4, r5, r6, pc}

0000da68 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    da68:	6841      	ldr	r1, [r0, #4]
    da6a:	2200      	movs	r2, #0
    da6c:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    da70:	2b00      	cmp	r3, #0
    da72:	d004      	beq.n	da7e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    da74:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    da78:	6840      	ldr	r0, [r0, #4]
    da7a:	f000 bd70 	b.w	e55e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    da7e:	4770      	bx	lr

0000da80 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    da80:	b510      	push	{r4, lr}
    da82:	7a01      	ldrb	r1, [r0, #8]
    da84:	b119      	cbz	r1, da8e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    da86:	2901      	cmp	r1, #1
    da88:	d006      	beq.n	da98 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    da8a:	2000      	movs	r0, #0
    da8c:	bd10      	pop	{r4, pc}
    da8e:	88c2      	ldrh	r2, [r0, #6]
    da90:	6803      	ldr	r3, [r0, #0]
    da92:	8880      	ldrh	r0, [r0, #4]
    da94:	2102      	movs	r1, #2
    da96:	e003      	b.n	daa0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    da98:	88c2      	ldrh	r2, [r0, #6]
    da9a:	6803      	ldr	r3, [r0, #0]
    da9c:	8880      	ldrh	r0, [r0, #4]
    da9e:	2101      	movs	r1, #1
    daa0:	f7f4 fec4 	bl	282c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    daa4:	b908      	cbnz	r0, daaa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    daa6:	f7f4 ff11 	bl	28cc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    daaa:	2001      	movs	r0, #1
    daac:	bd10      	pop	{r4, pc}

0000daae <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    daae:	b508      	push	{r3, lr}
    dab0:	7a03      	ldrb	r3, [r0, #8]
    dab2:	f88d 3000 	strb.w	r3, [sp]
    dab6:	9b00      	ldr	r3, [sp, #0]
    dab8:	9300      	str	r3, [sp, #0]
    daba:	f89d 3000 	ldrb.w	r3, [sp]
    dabe:	b123      	cbz	r3, daca <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    dac0:	f240 3117 	movw	r1, #791	; 0x317
    dac4:	2010      	movs	r0, #16
    dac6:	f7f2 ff87 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dace:	f7f5 b871 	b.w	2bb4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>

0000dad2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    dad2:	f7f5 b89d 	b.w	2c10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>

0000dad6 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    dad6:	7a03      	ldrb	r3, [r0, #8]
    dad8:	b082      	sub	sp, #8
    dada:	f88d 3000 	strb.w	r3, [sp]
    dade:	9b00      	ldr	r3, [sp, #0]
    dae0:	9300      	str	r3, [sp, #0]
    dae2:	f89d 3000 	ldrb.w	r3, [sp]
    dae6:	2b00      	cmp	r3, #0
    dae8:	d102      	bne.n	daf0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    daea:	b002      	add	sp, #8
    daec:	f7f5 b862 	b.w	2bb4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    daf0:	b002      	add	sp, #8
    daf2:	4770      	bx	lr
    daf4:	2000      	movs	r0, #0
    daf6:	7048      	strb	r0, [r1, #1]
    daf8:	2003      	movs	r0, #3
    dafa:	7008      	strb	r0, [r1, #0]
    dafc:	2001      	movs	r0, #1
    dafe:	7108      	strb	r0, [r1, #4]
    db00:	4770      	bx	lr

0000db02 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    db02:	b510      	push	{r4, lr}
    db04:	888c      	ldrh	r4, [r1, #4]
    db06:	890a      	ldrh	r2, [r1, #8]
    db08:	884b      	ldrh	r3, [r1, #2]
    db0a:	88c9      	ldrh	r1, [r1, #6]
    db0c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    db10:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    db14:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    db18:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    db1c:	bd10      	pop	{r4, pc}

0000db1e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    db1e:	b570      	push	{r4, r5, r6, lr}
    db20:	4615      	mov	r5, r2
    db22:	460c      	mov	r4, r1
    db24:	f000 f91a 	bl	dd5c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    db28:	3096      	adds	r0, #150	; 0x96
    db2a:	4428      	add	r0, r5
    db2c:	42a0      	cmp	r0, r4
    db2e:	d801      	bhi.n	db34 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    db30:	1a20      	subs	r0, r4, r0
    db32:	bd70      	pop	{r4, r5, r6, pc}
    db34:	2000      	movs	r0, #0
    db36:	bd70      	pop	{r4, r5, r6, pc}

0000db38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    db38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db3c:	4604      	mov	r4, r0
    db3e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    db40:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    db42:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    db46:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    db4a:	4285      	cmp	r5, r0
    db4c:	d300      	bcc.n	db50 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    db4e:	4605      	mov	r5, r0
    db50:	4620      	mov	r0, r4
    db52:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    db56:	f000 f89c 	bl	dc92 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    db5a:	4601      	mov	r1, r0
    db5c:	86e5      	strh	r5, [r4, #54]	; 0x36
    db5e:	8761      	strh	r1, [r4, #58]	; 0x3a
    db60:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    db62:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    db66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    db68:	4680      	mov	r8, r0
    db6a:	42aa      	cmp	r2, r5
    db6c:	d200      	bcs.n	db70 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    db6e:	462a      	mov	r2, r5
    db70:	428b      	cmp	r3, r1
    db72:	d200      	bcs.n	db76 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    db74:	460b      	mov	r3, r1
    db76:	8202      	strh	r2, [r0, #16]
    db78:	f8a8 3012 	strh.w	r3, [r8, #18]
    db7c:	42bd      	cmp	r5, r7
    db7e:	d101      	bne.n	db84 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    db80:	42b1      	cmp	r1, r6
    db82:	d001      	beq.n	db88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    db84:	2001      	movs	r0, #1
    db86:	e000      	b.n	db8a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    db88:	2000      	movs	r0, #0
    db8a:	4681      	mov	r9, r0
    db8c:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    db90:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    db94:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    db96:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    db98:	4285      	cmp	r5, r0
    db9a:	d300      	bcc.n	db9e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    db9c:	4605      	mov	r5, r0
    db9e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    dba2:	4620      	mov	r0, r4
    dba4:	f000 f87d 	bl	dca2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    dba8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    dbac:	2902      	cmp	r1, #2
    dbae:	d108      	bne.n	dbc2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    dbb0:	42af      	cmp	r7, r5
    dbb2:	d200      	bcs.n	dbb6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    dbb4:	463d      	mov	r5, r7
    dbb6:	4286      	cmp	r6, r0
    dbb8:	d200      	bcs.n	dbbc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    dbba:	4630      	mov	r0, r6
    dbbc:	2100      	movs	r1, #0
    dbbe:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    dbc2:	f8a8 5008 	strh.w	r5, [r8, #8]
    dbc6:	f8a8 000c 	strh.w	r0, [r8, #12]
    dbca:	42bd      	cmp	r5, r7
    dbcc:	d101      	bne.n	dbd2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dbce:	42b0      	cmp	r0, r6
    dbd0:	d001      	beq.n	dbd6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    dbd2:	2001      	movs	r0, #1
    dbd4:	e000      	b.n	dbd8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    dbd6:	2000      	movs	r0, #0
    dbd8:	ea40 0009 	orr.w	r0, r0, r9
    dbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dbe0 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    dbe0:	6840      	ldr	r0, [r0, #4]
    dbe2:	4770      	bx	lr

0000dbe4 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbe8:	4616      	mov	r6, r2
    dbea:	460f      	mov	r7, r1
    dbec:	4604      	mov	r4, r0
    dbee:	f000 f8b5 	bl	dd5c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    dbf2:	4605      	mov	r5, r0
    dbf4:	463a      	mov	r2, r7
    dbf6:	6921      	ldr	r1, [r4, #16]
    dbf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dbfa:	f000 f845 	bl	dc88 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    dbfe:	19a9      	adds	r1, r5, r6
    dc00:	4281      	cmp	r1, r0
    dc02:	d300      	bcc.n	dc06 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dc04:	4608      	mov	r0, r1
    dc06:	6320      	str	r0, [r4, #48]	; 0x30
    dc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dc0c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    dc0c:	221b      	movs	r2, #27
    dc0e:	8402      	strh	r2, [r0, #32]
    dc10:	8382      	strh	r2, [r0, #28]
    dc12:	82c2      	strh	r2, [r0, #22]
    dc14:	8282      	strh	r2, [r0, #20]
    dc16:	8142      	strh	r2, [r0, #10]
    dc18:	8202      	strh	r2, [r0, #16]
    dc1a:	8102      	strh	r2, [r0, #8]
    dc1c:	8542      	strh	r2, [r0, #42]	; 0x2a
    dc1e:	8582      	strh	r2, [r0, #44]	; 0x2c
    dc20:	8482      	strh	r2, [r0, #36]	; 0x24
    dc22:	2900      	cmp	r1, #0
    dc24:	d10a      	bne.n	dc3c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    dc26:	f44f 71a4 	mov.w	r1, #328	; 0x148
    dc2a:	8441      	strh	r1, [r0, #34]	; 0x22
    dc2c:	83c1      	strh	r1, [r0, #30]
    dc2e:	8341      	strh	r1, [r0, #26]
    dc30:	8301      	strh	r1, [r0, #24]
    dc32:	81c1      	strh	r1, [r0, #14]
    dc34:	8241      	strh	r1, [r0, #18]
    dc36:	8181      	strh	r1, [r0, #12]
    dc38:	85c1      	strh	r1, [r0, #46]	; 0x2e
    dc3a:	8601      	strh	r1, [r0, #48]	; 0x30
    dc3c:	4770      	bx	lr

0000dc3e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    dc3e:	6800      	ldr	r0, [r0, #0]
    dc40:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    dc44:	4290      	cmp	r0, r2
    dc46:	d903      	bls.n	dc50 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    dc48:	1a40      	subs	r0, r0, r1
    dc4a:	389c      	subs	r0, #156	; 0x9c
    dc4c:	0840      	lsrs	r0, r0, #1
    dc4e:	4770      	bx	lr
    dc50:	2000      	movs	r0, #0
    dc52:	4770      	bx	lr

0000dc54 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    dc54:	b510      	push	{r4, lr}
    dc56:	9c02      	ldr	r4, [sp, #8]
    dc58:	8281      	strh	r1, [r0, #20]
    dc5a:	82c2      	strh	r2, [r0, #22]
    dc5c:	8303      	strh	r3, [r0, #24]
    dc5e:	8344      	strh	r4, [r0, #26]
    dc60:	bd10      	pop	{r4, pc}
    dc62:	1d00      	adds	r0, r0, #4
    dc64:	b510      	push	{r4, lr}
    dc66:	b280      	uxth	r0, r0
    dc68:	2901      	cmp	r1, #1
    dc6a:	d006      	beq.n	dc7a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    dc6c:	2902      	cmp	r1, #2
    dc6e:	d007      	beq.n	dc80 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    dc70:	f240 2126 	movw	r1, #550	; 0x226
    dc74:	2006      	movs	r0, #6
    dc76:	f7f2 feaf 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc7a:	00c0      	lsls	r0, r0, #3
    dc7c:	3050      	adds	r0, #80	; 0x50
    dc7e:	e001      	b.n	dc84 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    dc80:	0080      	lsls	r0, r0, #2
    dc82:	302c      	adds	r0, #44	; 0x2c
    dc84:	b280      	uxth	r0, r0
    dc86:	bd10      	pop	{r4, pc}
    dc88:	4288      	cmp	r0, r1
    dc8a:	d300      	bcc.n	dc8e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    dc8c:	4608      	mov	r0, r1
    dc8e:	1a80      	subs	r0, r0, r2
    dc90:	4770      	bx	lr
    dc92:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    dc96:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    dc9a:	4281      	cmp	r1, r0
    dc9c:	d200      	bcs.n	dca0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    dc9e:	4608      	mov	r0, r1
    dca0:	4770      	bx	lr
    dca2:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    dca6:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    dcaa:	4281      	cmp	r1, r0
    dcac:	d200      	bcs.n	dcb0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    dcae:	4608      	mov	r0, r1
    dcb0:	4770      	bx	lr
    dcb2:	b538      	push	{r3, r4, r5, lr}
    dcb4:	2200      	movs	r2, #0
    dcb6:	f1a0 0318 	sub.w	r3, r0, #24
    dcba:	2413      	movs	r4, #19
    dcbc:	7202      	strb	r2, [r0, #8]
    dcbe:	704a      	strb	r2, [r1, #1]
    dcc0:	700c      	strb	r4, [r1, #0]
    dcc2:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    dcc6:	604d      	str	r5, [r1, #4]
    dcc8:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    dccc:	608d      	str	r5, [r1, #8]
    dcce:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    dcd2:	60cd      	str	r5, [r1, #12]
    dcd4:	7a05      	ldrb	r5, [r0, #8]
    dcd6:	f88d 5000 	strb.w	r5, [sp]
    dcda:	9d00      	ldr	r5, [sp, #0]
    dcdc:	9500      	str	r5, [sp, #0]
    dcde:	f89d 5000 	ldrb.w	r5, [sp]
    dce2:	2d00      	cmp	r5, #0
    dce4:	d1ea      	bne.n	dcbc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    dce6:	bd38      	pop	{r3, r4, r5, pc}
    dce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcea:	b087      	sub	sp, #28
    dcec:	460d      	mov	r5, r1
    dcee:	4604      	mov	r4, r0
    dcf0:	f7f4 fd88 	bl	2804 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    dcf4:	2600      	movs	r6, #0
    dcf6:	b328      	cbz	r0, dd44 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    dcf8:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    dcfc:	7226      	strb	r6, [r4, #8]
    dcfe:	8807      	ldrh	r7, [r0, #0]
    dd00:	a903      	add	r1, sp, #12
    dd02:	4638      	mov	r0, r7
    dd04:	f001 fcf3 	bl	f6ee <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    dd08:	b108      	cbz	r0, dd0e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    dd0a:	21fd      	movs	r1, #253	; 0xfd
    dd0c:	e017      	b.n	dd3e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    dd0e:	f8ad 7000 	strh.w	r7, [sp]
    dd12:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    dd16:	f8ad 0002 	strh.w	r0, [sp, #2]
    dd1a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    dd1e:	f8ad 0004 	strh.w	r0, [sp, #4]
    dd22:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    dd26:	f8ad 0006 	strh.w	r0, [sp, #6]
    dd2a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    dd2e:	f8ad 0008 	strh.w	r0, [sp, #8]
    dd32:	4668      	mov	r0, sp
    dd34:	f001 fd17 	bl	f766 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    dd38:	b120      	cbz	r0, dd44 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    dd3a:	f44f 7183 	mov.w	r1, #262	; 0x106
    dd3e:	202c      	movs	r0, #44	; 0x2c
    dd40:	f7f2 fe4a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd44:	201b      	movs	r0, #27
    dd46:	7028      	strb	r0, [r5, #0]
    dd48:	706e      	strb	r6, [r5, #1]
    dd4a:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    dd4e:	6068      	str	r0, [r5, #4]
    dd50:	6860      	ldr	r0, [r4, #4]
    dd52:	60a8      	str	r0, [r5, #8]
    dd54:	8920      	ldrh	r0, [r4, #8]
    dd56:	81a8      	strh	r0, [r5, #12]
    dd58:	b007      	add	sp, #28
    dd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd5c:	2196      	movs	r1, #150	; 0x96
    dd5e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    dd62:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    dd66:	f000 b800 	b.w	dd6a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    dd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd6e:	460d      	mov	r5, r1
    dd70:	4606      	mov	r6, r0
    dd72:	4698      	mov	r8, r3
    dd74:	4617      	mov	r7, r2
    dd76:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    dd78:	4611      	mov	r1, r2
    dd7a:	f7ff ff72 	bl	dc62 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    dd7e:	4604      	mov	r4, r0
    dd80:	4639      	mov	r1, r7
    dd82:	4630      	mov	r0, r6
    dd84:	f7ff ff8d 	bl	dca2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    dd88:	42a0      	cmp	r0, r4
    dd8a:	d200      	bcs.n	dd8e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    dd8c:	4604      	mov	r4, r0
    dd8e:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    dd90:	4641      	mov	r1, r8
    dd92:	f7ff ff66 	bl	dc62 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    dd96:	4607      	mov	r7, r0
    dd98:	4641      	mov	r1, r8
    dd9a:	4630      	mov	r0, r6
    dd9c:	f7ff ff79 	bl	dc92 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    dda0:	42b8      	cmp	r0, r7
    dda2:	d300      	bcc.n	dda6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    dda4:	4638      	mov	r0, r7
    dda6:	4420      	add	r0, r4
    dda8:	4428      	add	r0, r5
    ddaa:	1d80      	adds	r0, r0, #6
    ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddb0:	b510      	push	{r4, lr}
    ddb2:	4604      	mov	r4, r0
    ddb4:	2108      	movs	r1, #8
    ddb6:	4620      	mov	r0, r4
    ddb8:	f7f2 febc 	bl	b34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ddbc:	6820      	ldr	r0, [r4, #0]
    ddbe:	2800      	cmp	r0, #0
    ddc0:	d102      	bne.n	ddc8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x174>
    ddc2:	6860      	ldr	r0, [r4, #4]
    ddc4:	2800      	cmp	r0, #0
    ddc6:	d0f5      	beq.n	ddb4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x160>
    ddc8:	bd10      	pop	{r4, pc}

0000ddca <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    ddca:	f000 0155 	and.w	r1, r0, #85	; 0x55
    ddce:	2255      	movs	r2, #85	; 0x55
    ddd0:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    ddd4:	4408      	add	r0, r1
    ddd6:	f000 0133 	and.w	r1, r0, #51	; 0x33
    ddda:	2233      	movs	r2, #51	; 0x33
    dddc:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    dde0:	4408      	add	r0, r1
    dde2:	f000 010f 	and.w	r1, r0, #15
    dde6:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    ddea:	4770      	bx	lr

0000ddec <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    ddec:	b510      	push	{r4, lr}
    ddee:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    ddf2:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    ddf6:	2000      	movs	r0, #0
    ddf8:	7048      	strb	r0, [r1, #1]
    ddfa:	230a      	movs	r3, #10
    ddfc:	700b      	strb	r3, [r1, #0]
    ddfe:	7108      	strb	r0, [r1, #4]
    de00:	f8a1 4005 	strh.w	r4, [r1, #5]
    de04:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    de08:	71c8      	strb	r0, [r1, #7]
    de0a:	4620      	mov	r0, r4
    de0c:	f7f3 f9e0 	bl	11d0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    de10:	f7fe fdbd 	bl	c98e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    de14:	b140      	cbz	r0, de28 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    de16:	4620      	mov	r0, r4
    de18:	f7ff f9b8 	bl	d18c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    de1c:	4620      	mov	r0, r4
    de1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de22:	2100      	movs	r1, #0
    de24:	f7f3 b85e 	b.w	ee4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    de28:	2160      	movs	r1, #96	; 0x60
    de2a:	2063      	movs	r0, #99	; 0x63
    de2c:	f7f2 fdd4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000de30 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    de30:	b538      	push	{r3, r4, r5, lr}
    de32:	2200      	movs	r2, #0
    de34:	704a      	strb	r2, [r1, #1]
    de36:	2307      	movs	r3, #7
    de38:	700b      	strb	r3, [r1, #0]
    de3a:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    de3e:	f5a0 73df 	sub.w	r3, r0, #446	; 0x1be
    de42:	7202      	strb	r2, [r0, #8]
    de44:	84da      	strh	r2, [r3, #38]	; 0x26
    de46:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    de4a:	604d      	str	r5, [r1, #4]
    de4c:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    de50:	608d      	str	r5, [r1, #8]
    de52:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    de56:	818d      	strh	r5, [r1, #12]
    de58:	710a      	strb	r2, [r1, #4]
    de5a:	7a05      	ldrb	r5, [r0, #8]
    de5c:	f88d 5000 	strb.w	r5, [sp]
    de60:	9d00      	ldr	r5, [sp, #0]
    de62:	9500      	str	r5, [sp, #0]
    de64:	f89d 5000 	ldrb.w	r5, [sp]
    de68:	2d00      	cmp	r5, #0
    de6a:	d1ea      	bne.n	de42 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    de6c:	bd38      	pop	{r3, r4, r5, pc}

0000de6e <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    de6e:	2200      	movs	r2, #0
    de70:	704a      	strb	r2, [r1, #1]
    de72:	220b      	movs	r2, #11
    de74:	700a      	strb	r2, [r1, #0]
    de76:	f100 020a 	add.w	r2, r0, #10
    de7a:	7a83      	ldrb	r3, [r0, #10]
    de7c:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    de80:	710b      	strb	r3, [r1, #4]
    de82:	8800      	ldrh	r0, [r0, #0]
    de84:	80c8      	strh	r0, [r1, #6]
    de86:	7910      	ldrb	r0, [r2, #4]
    de88:	7208      	strb	r0, [r1, #8]
    de8a:	4770      	bx	lr

0000de8c <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    de8c:	2200      	movs	r2, #0
    de8e:	704a      	strb	r2, [r1, #1]
    de90:	220c      	movs	r2, #12
    de92:	700a      	strb	r2, [r1, #0]
    de94:	7a82      	ldrb	r2, [r0, #10]
    de96:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    de9a:	710a      	strb	r2, [r1, #4]
    de9c:	8800      	ldrh	r0, [r0, #0]
    de9e:	80c8      	strh	r0, [r1, #6]
    dea0:	4770      	bx	lr

0000dea2 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    dea2:	2200      	movs	r2, #0
    dea4:	704a      	strb	r2, [r1, #1]
    dea6:	2208      	movs	r2, #8
    dea8:	700a      	strb	r2, [r1, #0]
    deaa:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    deae:	8812      	ldrh	r2, [r2, #0]
    deb0:	808a      	strh	r2, [r1, #4]
    deb2:	68c2      	ldr	r2, [r0, #12]
    deb4:	f8c1 2006 	str.w	r2, [r1, #6]
    deb8:	6902      	ldr	r2, [r0, #16]
    deba:	f8c1 200a 	str.w	r2, [r1, #10]
    debe:	8a80      	ldrh	r0, [r0, #20]
    dec0:	81c8      	strh	r0, [r1, #14]
    dec2:	4770      	bx	lr

0000dec4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    dec4:	b510      	push	{r4, lr}
    dec6:	6844      	ldr	r4, [r0, #4]
    dec8:	7803      	ldrb	r3, [r0, #0]
    deca:	2100      	movs	r1, #0
    decc:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    ded0:	3480      	adds	r4, #128	; 0x80
    ded2:	4620      	mov	r0, r4
    ded4:	f7ff fa54 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ded8:	b110      	cbz	r0, dee0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    deda:	2004      	movs	r0, #4
    dedc:	7760      	strb	r0, [r4, #29]
    dede:	bd10      	pop	{r4, pc}
    dee0:	21aa      	movs	r1, #170	; 0xaa
    dee2:	201c      	movs	r0, #28
    dee4:	f7f2 fd78 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dee8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    dee8:	b510      	push	{r4, lr}
    deea:	6841      	ldr	r1, [r0, #4]
    deec:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    def0:	07d2      	lsls	r2, r2, #31
    def2:	d00b      	beq.n	df0c <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    def4:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    def8:	1e52      	subs	r2, r2, #1
    defa:	b252      	sxtb	r2, r2
    defc:	700a      	strb	r2, [r1, #0]
    defe:	6840      	ldr	r0, [r0, #4]
    df00:	2a00      	cmp	r2, #0
    df02:	da05      	bge.n	df10 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    df04:	21b9      	movs	r1, #185	; 0xb9
    df06:	201c      	movs	r0, #28
    df08:	f7f2 fd66 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df0c:	21b7      	movs	r1, #183	; 0xb7
    df0e:	e7fa      	b.n	df06 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    df10:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    df14:	f021 0101 	bic.w	r1, r1, #1
    df18:	6001      	str	r1, [r0, #0]
    df1a:	bd10      	pop	{r4, pc}
    df1c:	2200      	movs	r2, #0
    df1e:	704a      	strb	r2, [r1, #1]
    df20:	2206      	movs	r2, #6
    df22:	700a      	strb	r2, [r1, #0]
    df24:	f850 2f09 	ldr.w	r2, [r0, #9]!
    df28:	604a      	str	r2, [r1, #4]
    df2a:	6842      	ldr	r2, [r0, #4]
    df2c:	608a      	str	r2, [r1, #8]
    df2e:	8902      	ldrh	r2, [r0, #8]
    df30:	818a      	strh	r2, [r1, #12]
    df32:	7a80      	ldrb	r0, [r0, #10]
    df34:	7388      	strb	r0, [r1, #14]
    df36:	4770      	bx	lr

0000df38 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    df38:	2200      	movs	r2, #0
    df3a:	704a      	strb	r2, [r1, #1]
    df3c:	220e      	movs	r2, #14
    df3e:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    df42:	700a      	strb	r2, [r1, #0]
    df44:	8800      	ldrh	r0, [r0, #0]
    df46:	8088      	strh	r0, [r1, #4]
    df48:	4770      	bx	lr

0000df4a <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    df4a:	b538      	push	{r3, r4, r5, lr}
    df4c:	2400      	movs	r4, #0
    df4e:	704c      	strb	r4, [r1, #1]
    df50:	2501      	movs	r5, #1
    df52:	700d      	strb	r5, [r1, #0]
    df54:	f1a0 025e 	sub.w	r2, r0, #94	; 0x5e
    df58:	f1a0 03de 	sub.w	r3, r0, #222	; 0xde
    df5c:	710c      	strb	r4, [r1, #4]
    df5e:	7204      	strb	r4, [r0, #8]
    df60:	881d      	ldrh	r5, [r3, #0]
    df62:	f8a1 5005 	strh.w	r5, [r1, #5]
    df66:	f892 5067 	ldrb.w	r5, [r2, #103]	; 0x67
    df6a:	71cd      	strb	r5, [r1, #7]
    df6c:	f8b2 5068 	ldrh.w	r5, [r2, #104]	; 0x68
    df70:	810d      	strh	r5, [r1, #8]
    df72:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    df76:	814d      	strh	r5, [r1, #10]
    df78:	7a05      	ldrb	r5, [r0, #8]
    df7a:	f88d 5000 	strb.w	r5, [sp]
    df7e:	9d00      	ldr	r5, [sp, #0]
    df80:	9500      	str	r5, [sp, #0]
    df82:	f89d 5000 	ldrb.w	r5, [sp]
    df86:	2d00      	cmp	r5, #0
    df88:	d1e9      	bne.n	df5e <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    df8a:	bd38      	pop	{r3, r4, r5, pc}

0000df8c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    df8c:	b570      	push	{r4, r5, r6, lr}
    df8e:	7803      	ldrb	r3, [r0, #0]
    df90:	6840      	ldr	r0, [r0, #4]
    df92:	2500      	movs	r5, #0
    df94:	f100 0480 	add.w	r4, r0, #128	; 0x80
    df98:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    df9c:	f500 7098 	add.w	r0, r0, #304	; 0x130
    dfa0:	0789      	lsls	r1, r1, #30
    dfa2:	d40e      	bmi.n	dfc2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    dfa4:	7f62      	ldrb	r2, [r4, #29]
    dfa6:	2100      	movs	r1, #0
    dfa8:	4620      	mov	r0, r4
    dfaa:	f7ff f9e9 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    dfae:	b130      	cbz	r0, dfbe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    dfb0:	2001      	movs	r0, #1
    dfb2:	7760      	strb	r0, [r4, #29]
    dfb4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    dfb8:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    dfbc:	bd70      	pop	{r4, r5, r6, pc}
    dfbe:	216e      	movs	r1, #110	; 0x6e
    dfc0:	e00b      	b.n	dfda <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    dfc2:	7b21      	ldrb	r1, [r4, #12]
    dfc4:	0789      	lsls	r1, r1, #30
    dfc6:	d50f      	bpl.n	dfe8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    dfc8:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    dfcc:	1e49      	subs	r1, r1, #1
    dfce:	b249      	sxtb	r1, r1
    dfd0:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    dfd4:	2900      	cmp	r1, #0
    dfd6:	da03      	bge.n	dfe0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    dfd8:	2180      	movs	r1, #128	; 0x80
    dfda:	2040      	movs	r0, #64	; 0x40
    dfdc:	f7f2 fcfc 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfe0:	68e1      	ldr	r1, [r4, #12]
    dfe2:	f021 0102 	bic.w	r1, r1, #2
    dfe6:	60e1      	str	r1, [r4, #12]
    dfe8:	7485      	strb	r5, [r0, #18]
    dfea:	bd70      	pop	{r4, r5, r6, pc}
    dfec:	2200      	movs	r2, #0
    dfee:	704a      	strb	r2, [r1, #1]
    dff0:	2219      	movs	r2, #25
    dff2:	700a      	strb	r2, [r1, #0]
    dff4:	f8d0 000a 	ldr.w	r0, [r0, #10]
    dff8:	6048      	str	r0, [r1, #4]
    dffa:	4770      	bx	lr
    dffc:	b510      	push	{r4, lr}
    dffe:	4604      	mov	r4, r0
    e000:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e004:	e9d4 1000 	ldrd	r1, r0, [r4]
    e008:	4050      	eors	r0, r2
    e00a:	ea70 0101 	orns	r1, r0, r1
    e00e:	d008      	beq.n	e022 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e010:	f7fc fc26 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e014:	e9d4 2300 	ldrd	r2, r3, [r4]
    e018:	1a80      	subs	r0, r0, r2
    e01a:	4199      	sbcs	r1, r3
    e01c:	d301      	bcc.n	e022 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e01e:	2001      	movs	r0, #1
    e020:	bd10      	pop	{r4, pc}
    e022:	2000      	movs	r0, #0
    e024:	bd10      	pop	{r4, pc}
    e026:	2801      	cmp	r0, #1
    e028:	d102      	bne.n	e030 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa4>
    e02a:	7948      	ldrb	r0, [r1, #5]
    e02c:	0980      	lsrs	r0, r0, #6
    e02e:	d001      	beq.n	e034 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa8>
    e030:	2000      	movs	r0, #0
    e032:	4770      	bx	lr
    e034:	2001      	movs	r0, #1
    e036:	4770      	bx	lr
    e038:	2801      	cmp	r0, #1
    e03a:	d106      	bne.n	e04a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    e03c:	7948      	ldrb	r0, [r1, #5]
    e03e:	2101      	movs	r1, #1
    e040:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e044:	d101      	bne.n	e04a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    e046:	2001      	movs	r0, #1
    e048:	4770      	bx	lr
    e04a:	2000      	movs	r0, #0
    e04c:	4770      	bx	lr
    e04e:	2802      	cmp	r0, #2
    e050:	d003      	beq.n	e05a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    e052:	2803      	cmp	r0, #3
    e054:	d001      	beq.n	e05a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    e056:	2000      	movs	r0, #0
    e058:	4770      	bx	lr
    e05a:	2001      	movs	r0, #1
    e05c:	4770      	bx	lr

0000e05e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e05e:	b510      	push	{r4, lr}
    e060:	4604      	mov	r4, r0
    e062:	7c00      	ldrb	r0, [r0, #16]
    e064:	f7ff fff3 	bl	e04e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e068:	b148      	cbz	r0, e07e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e06a:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e06e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e072:	f7ff f927 	bl	d2c4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e076:	2808      	cmp	r0, #8
    e078:	d001      	beq.n	e07e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e07a:	2001      	movs	r0, #1
    e07c:	bd10      	pop	{r4, pc}
    e07e:	7c20      	ldrb	r0, [r4, #16]
    e080:	b118      	cbz	r0, e08a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e082:	2802      	cmp	r0, #2
    e084:	d001      	beq.n	e08a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e086:	7de0      	ldrb	r0, [r4, #23]
    e088:	bd10      	pop	{r4, pc}
    e08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e08e:	2000      	movs	r0, #0
    e090:	f7f3 bb6c 	b.w	176c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e094 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e094:	b508      	push	{r3, lr}
    e096:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e09a:	f88d 1000 	strb.w	r1, [sp]
    e09e:	9900      	ldr	r1, [sp, #0]
    e0a0:	9100      	str	r1, [sp, #0]
    e0a2:	f89d 1000 	ldrb.w	r1, [sp]
    e0a6:	b941      	cbnz	r1, e0ba <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    e0a8:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    e0ac:	f88d 1000 	strb.w	r1, [sp]
    e0b0:	9900      	ldr	r1, [sp, #0]
    e0b2:	9100      	str	r1, [sp, #0]
    e0b4:	f89d 1000 	ldrb.w	r1, [sp]
    e0b8:	b109      	cbz	r1, e0be <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    e0ba:	2001      	movs	r0, #1
    e0bc:	bd08      	pop	{r3, pc}
    e0be:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e0c2:	f88d 0000 	strb.w	r0, [sp]
    e0c6:	9800      	ldr	r0, [sp, #0]
    e0c8:	9000      	str	r0, [sp, #0]
    e0ca:	f89d 0000 	ldrb.w	r0, [sp]
    e0ce:	2000      	movs	r0, #0
    e0d0:	bd08      	pop	{r3, pc}

0000e0d2 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e0d2:	20ff      	movs	r0, #255	; 0xff
    e0d4:	7008      	strb	r0, [r1, #0]
    e0d6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e0d8:	f7fe bff9 	b.w	d0ce <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e0dc <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e0dc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e0de:	460d      	mov	r5, r1
    e0e0:	4604      	mov	r4, r0
    e0e2:	f44f 728c 	mov.w	r2, #280	; 0x118
    e0e6:	2100      	movs	r1, #0
    e0e8:	f002 f9f0 	bl	104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e0ec:	20ff      	movs	r0, #255	; 0xff
    e0ee:	7020      	strb	r0, [r4, #0]
    e0f0:	207f      	movs	r0, #127	; 0x7f
    e0f2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e0f6:	2013      	movs	r0, #19
    e0f8:	8060      	strh	r0, [r4, #2]
    e0fa:	f242 7010 	movw	r0, #10000	; 0x2710
    e0fe:	8460      	strh	r0, [r4, #34]	; 0x22
    e100:	f7f3 f924 	bl	134c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e104:	4601      	mov	r1, r0
    e106:	6360      	str	r0, [r4, #52]	; 0x34
    e108:	2200      	movs	r2, #0
    e10a:	4668      	mov	r0, sp
    e10c:	f7fe ff45 	bl	cf9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e110:	2200      	movs	r2, #0
    e112:	2101      	movs	r1, #1
    e114:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e116:	f7fe ffba 	bl	d08e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e11a:	2204      	movs	r2, #4
    e11c:	4668      	mov	r0, sp
    e11e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e120:	f7fe ff3b 	bl	cf9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e124:	2200      	movs	r2, #0
    e126:	4611      	mov	r1, r2
    e128:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e12a:	f7fe ffb0 	bl	d08e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e12e:	73a5      	strb	r5, [r4, #14]
    e130:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e134:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e138:	f000 b96b 	b.w	e412 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e13c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e13c:	7880      	ldrb	r0, [r0, #2]
    e13e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e142:	b108      	cbz	r0, e148 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e144:	2000      	movs	r0, #0
    e146:	4770      	bx	lr
    e148:	201f      	movs	r0, #31
    e14a:	4770      	bx	lr

0000e14c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e14c:	f7f5 bd02 	b.w	3b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>

0000e150 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e150:	6880      	ldr	r0, [r0, #8]
    e152:	4770      	bx	lr

0000e154 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e154:	2001      	movs	r0, #1
    e156:	4770      	bx	lr

0000e158 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e158:	b510      	push	{r4, lr}
    e15a:	4604      	mov	r4, r0
    e15c:	3028      	adds	r0, #40	; 0x28
    e15e:	f000 f918 	bl	e392 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e162:	8861      	ldrh	r1, [r4, #2]
    e164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e168:	2228      	movs	r2, #40	; 0x28
    e16a:	f7f5 bec3 	b.w	3ef4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e16e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e16e:	2200      	movs	r2, #0
    e170:	8602      	strh	r2, [r0, #48]	; 0x30
    e172:	8843      	ldrh	r3, [r0, #2]
    e174:	2b1d      	cmp	r3, #29
    e176:	d001      	beq.n	e17c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e178:	7341      	strb	r1, [r0, #13]
    e17a:	4770      	bx	lr
    e17c:	7342      	strb	r2, [r0, #13]
    e17e:	4770      	bx	lr

0000e180 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    e180:	b510      	push	{r4, lr}
    e182:	2400      	movs	r4, #0
    e184:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e186:	f7fe ff7a 	bl	d07e <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    e18a:	4384      	bics	r4, r0
    e18c:	f084 0001 	eor.w	r0, r4, #1
    e190:	bd10      	pop	{r4, pc}

0000e192 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e192:	2000      	movs	r0, #0
    e194:	4770      	bx	lr

0000e196 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e196:	7880      	ldrb	r0, [r0, #2]
    e198:	f000 0001 	and.w	r0, r0, #1
    e19c:	4770      	bx	lr

0000e19e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e19e:	7880      	ldrb	r0, [r0, #2]
    e1a0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e1a4:	4770      	bx	lr

0000e1a6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e1a6:	2001      	movs	r0, #1
    e1a8:	4770      	bx	lr

0000e1aa <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e1aa:	7880      	ldrb	r0, [r0, #2]
    e1ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e1b0:	4770      	bx	lr

0000e1b2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e1b2:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e1b6:	4770      	bx	lr

0000e1b8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e1b8:	7800      	ldrb	r0, [r0, #0]
    e1ba:	28ff      	cmp	r0, #255	; 0xff
    e1bc:	d001      	beq.n	e1c2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e1be:	2001      	movs	r0, #1
    e1c0:	4770      	bx	lr
    e1c2:	2000      	movs	r0, #0
    e1c4:	4770      	bx	lr

0000e1c6 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e1c6:	f800 1f20 	strb.w	r1, [r0, #32]!
    e1ca:	7042      	strb	r2, [r0, #1]
    e1cc:	4770      	bx	lr

0000e1ce <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e1ce:	680a      	ldr	r2, [r1, #0]
    e1d0:	f840 2f11 	str.w	r2, [r0, #17]!
    e1d4:	8889      	ldrh	r1, [r1, #4]
    e1d6:	8081      	strh	r1, [r0, #4]
    e1d8:	2101      	movs	r1, #1
    e1da:	7181      	strb	r1, [r0, #6]
    e1dc:	4770      	bx	lr

0000e1de <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e1de:	7b00      	ldrb	r0, [r0, #12]
    e1e0:	4770      	bx	lr

0000e1e2 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e1e2:	2001      	movs	r0, #1
    e1e4:	4770      	bx	lr

0000e1e6 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e1e6:	61c1      	str	r1, [r0, #28]
    e1e8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e1ec:	724a      	strb	r2, [r1, #9]
    e1ee:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e1f2:	f8c1 200a 	str.w	r2, [r1, #10]
    e1f6:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e1fa:	81c8      	strh	r0, [r1, #14]
    e1fc:	4770      	bx	lr

0000e1fe <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e1fe:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e202:	4770      	bx	lr

0000e204 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e204:	7bc0      	ldrb	r0, [r0, #15]
    e206:	2800      	cmp	r0, #0
    e208:	d000      	beq.n	e20c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e20a:	2001      	movs	r0, #1
    e20c:	4770      	bx	lr
    e20e:	7802      	ldrb	r2, [r0, #0]
    e210:	2320      	movs	r3, #32
    e212:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e216:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e21a:	430a      	orrs	r2, r1
    e21c:	7002      	strb	r2, [r0, #0]
    e21e:	4770      	bx	lr
    e220:	b510      	push	{r4, lr}
    e222:	f7ff f84f 	bl	d2c4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e226:	4604      	mov	r4, r0
    e228:	f7f4 f85c 	bl	22e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e22c:	b138      	cbz	r0, e23e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e22e:	4620      	mov	r0, r4
    e230:	f7f4 f800 	bl	2234 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e234:	b118      	cbz	r0, e23e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e236:	2110      	movs	r1, #16
    e238:	f7ff fa0a 	bl	d650 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e23c:	b108      	cbz	r0, e242 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    e23e:	2000      	movs	r0, #0
    e240:	bd10      	pop	{r4, pc}
    e242:	2001      	movs	r0, #1
    e244:	bd10      	pop	{r4, pc}
    e246:	2101      	movs	r1, #1
    e248:	f7f5 b8f4 	b.w	3434 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e24c:	2101      	movs	r1, #1
    e24e:	f7f5 b8f1 	b.w	3434 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e252:	2200      	movs	r2, #0
    e254:	704a      	strb	r2, [r1, #1]
    e256:	2205      	movs	r2, #5
    e258:	700a      	strb	r2, [r1, #0]
    e25a:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e25e:	6048      	str	r0, [r1, #4]
    e260:	4770      	bx	lr
    e262:	b510      	push	{r4, lr}
    e264:	460c      	mov	r4, r1
    e266:	2100      	movs	r1, #0
    e268:	7061      	strb	r1, [r4, #1]
    e26a:	2112      	movs	r1, #18
    e26c:	7021      	strb	r1, [r4, #0]
    e26e:	f100 0109 	add.w	r1, r0, #9
    e272:	2221      	movs	r2, #33	; 0x21
    e274:	1d20      	adds	r0, r4, #4
    e276:	f002 f8af 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e27a:	2001      	movs	r0, #1
    e27c:	71e0      	strb	r0, [r4, #7]
    e27e:	7920      	ldrb	r0, [r4, #4]
    e280:	2800      	cmp	r0, #0
    e282:	d015      	beq.n	e2b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    e284:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    e288:	2100      	movs	r1, #0
    e28a:	4620      	mov	r0, r4
    e28c:	f7fe fdd3 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e290:	2800      	cmp	r0, #0
    e292:	d00d      	beq.n	e2b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    e294:	8800      	ldrh	r0, [r0, #0]
    e296:	f7fe ff79 	bl	d18c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e29a:	2100      	movs	r1, #0
    e29c:	4620      	mov	r0, r4
    e29e:	f7f2 fe21 	bl	ee4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e2a2:	2800      	cmp	r0, #0
    e2a4:	d004      	beq.n	e2b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    e2a6:	f44f 7114 	mov.w	r1, #592	; 0x250
    e2aa:	202d      	movs	r0, #45	; 0x2d
    e2ac:	f7f2 fb94 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2b0:	bd10      	pop	{r4, pc}
    e2b2:	2200      	movs	r2, #0
    e2b4:	704a      	strb	r2, [r1, #1]
    e2b6:	221a      	movs	r2, #26
    e2b8:	700a      	strb	r2, [r1, #0]
    e2ba:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e2be:	604a      	str	r2, [r1, #4]
    e2c0:	6842      	ldr	r2, [r0, #4]
    e2c2:	608a      	str	r2, [r1, #8]
    e2c4:	7a00      	ldrb	r0, [r0, #8]
    e2c6:	7308      	strb	r0, [r1, #12]
    e2c8:	4770      	bx	lr
    e2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2ce:	4604      	mov	r4, r0
    e2d0:	460f      	mov	r7, r1
    e2d2:	7e40      	ldrb	r0, [r0, #25]
    e2d4:	f7f3 ff94 	bl	2200 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e2d8:	4606      	mov	r6, r0
    e2da:	7e20      	ldrb	r0, [r4, #24]
    e2dc:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e2e0:	b120      	cbz	r0, e2ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    e2e2:	b11e      	cbz	r6, e2ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    e2e4:	7e60      	ldrb	r0, [r4, #25]
    e2e6:	f7f3 ff7f 	bl	21e8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e2ea:	b1a0      	cbz	r0, e316 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x112>
    e2ec:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e2f0:	2800      	cmp	r0, #0
    e2f2:	d024      	beq.n	e33e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    e2f4:	7ea0      	ldrb	r0, [r4, #26]
    e2f6:	2800      	cmp	r0, #0
    e2f8:	d021      	beq.n	e33e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    e2fa:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e2fe:	4629      	mov	r1, r5
    e300:	f7ff fe9a 	bl	e038 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    e304:	b1a8      	cbz	r0, e332 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    e306:	f7f3 ff6b 	bl	21e0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e30a:	463a      	mov	r2, r7
    e30c:	4629      	mov	r1, r5
    e30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e312:	f7fe bf6f 	b.w	d1f4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e316:	2001      	movs	r0, #1
    e318:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e31c:	463a      	mov	r2, r7
    e31e:	4629      	mov	r1, r5
    e320:	4630      	mov	r0, r6
    e322:	f7fe ff67 	bl	d1f4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e326:	7e61      	ldrb	r1, [r4, #25]
    e328:	4628      	mov	r0, r5
    e32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e32e:	f7f3 bf73 	b.w	2218 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e332:	4639      	mov	r1, r7
    e334:	4628      	mov	r0, r5
    e336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e33a:	f7fe bf4a 	b.w	d1d2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e342:	b510      	push	{r4, lr}
    e344:	4604      	mov	r4, r0
    e346:	4608      	mov	r0, r1
    e348:	f7f9 fbb2 	bl	7ab0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e34c:	7921      	ldrb	r1, [r4, #4]
    e34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e352:	2025      	movs	r0, #37	; 0x25
    e354:	f7f9 bb82 	b.w	7a5c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e358:	b570      	push	{r4, r5, r6, lr}
    e35a:	4614      	mov	r4, r2
    e35c:	461d      	mov	r5, r3
    e35e:	4606      	mov	r6, r0
    e360:	f7fc fa7e 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e364:	1900      	adds	r0, r0, r4
    e366:	4169      	adcs	r1, r5
    e368:	e9c6 0100 	strd	r0, r1, [r6]
    e36c:	bd70      	pop	{r4, r5, r6, pc}

0000e36e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e36e:	b570      	push	{r4, r5, r6, lr}
    e370:	7001      	strb	r1, [r0, #0]
    e372:	7042      	strb	r2, [r0, #1]
    e374:	4614      	mov	r4, r2
    e376:	460d      	mov	r5, r1
    e378:	7880      	ldrb	r0, [r0, #2]
    e37a:	f000 f87f 	bl	e47c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e37e:	fb10 f005 	smulbb	r0, r0, r5
    e382:	4360      	muls	r0, r4
    e384:	28ff      	cmp	r0, #255	; 0xff
    e386:	d303      	bcc.n	e390 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e388:	215c      	movs	r1, #92	; 0x5c
    e38a:	202e      	movs	r0, #46	; 0x2e
    e38c:	f7f2 fb24 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e390:	bd70      	pop	{r4, r5, r6, pc}

0000e392 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e392:	b510      	push	{r4, lr}
    e394:	4604      	mov	r4, r0
    e396:	7880      	ldrb	r0, [r0, #2]
    e398:	f000 f870 	bl	e47c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e39c:	7861      	ldrb	r1, [r4, #1]
    e39e:	7822      	ldrb	r2, [r4, #0]
    e3a0:	fb11 f102 	smulbb	r1, r1, r2
    e3a4:	4348      	muls	r0, r1
    e3a6:	b2c0      	uxtb	r0, r0
    e3a8:	bd10      	pop	{r4, pc}

0000e3aa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e3aa:	b510      	push	{r4, lr}
    e3ac:	4604      	mov	r4, r0
    e3ae:	f000 f84d 	bl	e44c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e3b2:	7961      	ldrb	r1, [r4, #5]
    e3b4:	1c49      	adds	r1, r1, #1
    e3b6:	b2c9      	uxtb	r1, r1
    e3b8:	7161      	strb	r1, [r4, #5]
    e3ba:	7862      	ldrb	r2, [r4, #1]
    e3bc:	4291      	cmp	r1, r2
    e3be:	d10b      	bne.n	e3d8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e3c0:	2200      	movs	r2, #0
    e3c2:	7162      	strb	r2, [r4, #5]
    e3c4:	78e1      	ldrb	r1, [r4, #3]
    e3c6:	4301      	orrs	r1, r0
    e3c8:	70e1      	strb	r1, [r4, #3]
    e3ca:	78a3      	ldrb	r3, [r4, #2]
    e3cc:	4299      	cmp	r1, r3
    e3ce:	d103      	bne.n	e3d8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e3d0:	70e2      	strb	r2, [r4, #3]
    e3d2:	7921      	ldrb	r1, [r4, #4]
    e3d4:	1c49      	adds	r1, r1, #1
    e3d6:	7121      	strb	r1, [r4, #4]
    e3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3dc:	f000 b825 	b.w	e42a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e3e0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e3e0:	7081      	strb	r1, [r0, #2]
    e3e2:	4770      	bx	lr

0000e3e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e3e4:	b570      	push	{r4, r5, r6, lr}
    e3e6:	4604      	mov	r4, r0
    e3e8:	7880      	ldrb	r0, [r0, #2]
    e3ea:	f000 f847 	bl	e47c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e3ee:	7861      	ldrb	r1, [r4, #1]
    e3f0:	fb11 f500 	smulbb	r5, r1, r0
    e3f4:	78e0      	ldrb	r0, [r4, #3]
    e3f6:	f000 f841 	bl	e47c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e3fa:	7861      	ldrb	r1, [r4, #1]
    e3fc:	7962      	ldrb	r2, [r4, #5]
    e3fe:	fb10 2001 	smlabb	r0, r0, r1, r2
    e402:	7821      	ldrb	r1, [r4, #0]
    e404:	7922      	ldrb	r2, [r4, #4]
    e406:	1a89      	subs	r1, r1, r2
    e408:	fb11 f105 	smulbb	r1, r1, r5
    e40c:	1a08      	subs	r0, r1, r0
    e40e:	b2c0      	uxtb	r0, r0
    e410:	bd70      	pop	{r4, r5, r6, pc}

0000e412 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e412:	2100      	movs	r1, #0
    e414:	6001      	str	r1, [r0, #0]
    e416:	8081      	strh	r1, [r0, #4]
    e418:	2101      	movs	r1, #1
    e41a:	7041      	strb	r1, [r0, #1]
    e41c:	7001      	strb	r1, [r0, #0]
    e41e:	4770      	bx	lr

0000e420 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e420:	2100      	movs	r1, #0
    e422:	70c1      	strb	r1, [r0, #3]
    e424:	7141      	strb	r1, [r0, #5]
    e426:	7101      	strb	r1, [r0, #4]
    e428:	4770      	bx	lr
    e42a:	b510      	push	{r4, lr}
    e42c:	2801      	cmp	r0, #1
    e42e:	d007      	beq.n	e440 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e430:	2802      	cmp	r0, #2
    e432:	d007      	beq.n	e444 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e434:	2804      	cmp	r0, #4
    e436:	d007      	beq.n	e448 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e438:	2139      	movs	r1, #57	; 0x39
    e43a:	202e      	movs	r0, #46	; 0x2e
    e43c:	f7f2 facc 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e440:	2025      	movs	r0, #37	; 0x25
    e442:	bd10      	pop	{r4, pc}
    e444:	2026      	movs	r0, #38	; 0x26
    e446:	bd10      	pop	{r4, pc}
    e448:	2027      	movs	r0, #39	; 0x27
    e44a:	bd10      	pop	{r4, pc}
    e44c:	4601      	mov	r1, r0
    e44e:	2000      	movs	r0, #0
    e450:	788a      	ldrb	r2, [r1, #2]
    e452:	07d3      	lsls	r3, r2, #31
    e454:	d002      	beq.n	e45c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e456:	78cb      	ldrb	r3, [r1, #3]
    e458:	07db      	lsls	r3, r3, #31
    e45a:	d006      	beq.n	e46a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e45c:	0793      	lsls	r3, r2, #30
    e45e:	d506      	bpl.n	e46e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e460:	78cb      	ldrb	r3, [r1, #3]
    e462:	079b      	lsls	r3, r3, #30
    e464:	d403      	bmi.n	e46e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e466:	2002      	movs	r0, #2
    e468:	4770      	bx	lr
    e46a:	2001      	movs	r0, #1
    e46c:	4770      	bx	lr
    e46e:	0752      	lsls	r2, r2, #29
    e470:	d5fc      	bpl.n	e46c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e472:	78c9      	ldrb	r1, [r1, #3]
    e474:	0749      	lsls	r1, r1, #29
    e476:	d4f9      	bmi.n	e46c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e478:	2004      	movs	r0, #4
    e47a:	4770      	bx	lr
    e47c:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e480:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e484:	4411      	add	r1, r2
    e486:	f000 0001 	and.w	r0, r0, #1
    e48a:	4408      	add	r0, r1
    e48c:	4770      	bx	lr

0000e48e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e48e:	f240 315a 	movw	r1, #858	; 0x35a
    e492:	4348      	muls	r0, r1
    e494:	4770      	bx	lr

0000e496 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e496:	f240 20ef 	movw	r0, #751	; 0x2ef
    e49a:	4770      	bx	lr
    e49c:	041c020e 	.word	0x041c020e
    e4a0:	0c600630 	.word	0x0c600630
    e4a4:	06b4035a 	.word	0x06b4035a
    e4a8:	0bf505c5 	.word	0x0bf505c5
    e4ac:	01a31225 	.word	0x01a31225
    e4b0:	05bf03b1 	.word	0x05bf03b1
    e4b4:	064902ef 	.word	0x064902ef
    e4b8:	09a3      	.short	0x09a3

0000e4ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e4ba:	b510      	push	{r4, lr}
    e4bc:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    e4c0:	b109      	cbz	r1, e4c6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e4c2:	2000      	movs	r0, #0
    e4c4:	bd10      	pop	{r4, pc}
    e4c6:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e4ca:	b131      	cbz	r1, e4da <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e4cc:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    e4d0:	428a      	cmp	r2, r1
    e4d2:	d902      	bls.n	e4da <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e4d4:	f7f4 ff96 	bl	3404 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e4d8:	e7f3      	b.n	e4c2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e4da:	2001      	movs	r0, #1
    e4dc:	bd10      	pop	{r4, pc}

0000e4de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e4de:	b510      	push	{r4, lr}
    e4e0:	b131      	cbz	r1, e4f0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e4e2:	2901      	cmp	r1, #1
    e4e4:	d008      	beq.n	e4f8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e4e6:	f240 717a 	movw	r1, #1914	; 0x77a
    e4ea:	2030      	movs	r0, #48	; 0x30
    e4ec:	f7f2 fa74 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4f4:	f000 b9b7 	b.w	e866 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    e4f8:	2100      	movs	r1, #0
    e4fa:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    e4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e502:	f000 b913 	b.w	e72c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000e506 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    e506:	b510      	push	{r4, lr}
    e508:	4604      	mov	r4, r0
    e50a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e50e:	2800      	cmp	r0, #0
    e510:	d019      	beq.n	e546 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    e512:	2001      	movs	r0, #1
    e514:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    e518:	4601      	mov	r1, r0
    e51a:	4620      	mov	r0, r4
    e51c:	f7ff fe6f 	bl	e1fe <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e520:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    e524:	b170      	cbz	r0, e544 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    e526:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    e52a:	f7fb fd0d 	bl	9f48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e52e:	7820      	ldrb	r0, [r4, #0]
    e530:	f7fb fe6e 	bl	a210 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e534:	f814 09c8 	ldrb.w	r0, [r4], #-200
    e538:	f7fb fe48 	bl	a1cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e53c:	b120      	cbz	r0, e548 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    e53e:	2000      	movs	r0, #0
    e540:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    e544:	2000      	movs	r0, #0
    e546:	bd10      	pop	{r4, pc}
    e548:	f240 2105 	movw	r1, #517	; 0x205
    e54c:	2030      	movs	r0, #48	; 0x30
    e54e:	f7f2 fa43 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e552 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    e552:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    e556:	4770      	bx	lr

0000e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e558:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e55c:	4770      	bx	lr

0000e55e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    e55e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e560:	4604      	mov	r4, r0
    e562:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    e566:	2800      	cmp	r0, #0
    e568:	d15f      	bne.n	e62a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e56a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    e56e:	2803      	cmp	r0, #3
    e570:	d15b      	bne.n	e62a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e572:	f7fc f975 	bl	a860 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e576:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    e57a:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    e57e:	1ac0      	subs	r0, r0, r3
    e580:	eb61 0102 	sbc.w	r1, r1, r2
    e584:	2300      	movs	r3, #0
    e586:	461a      	mov	r2, r3
    e588:	1a1b      	subs	r3, r3, r0
    e58a:	418a      	sbcs	r2, r1
    e58c:	da4d      	bge.n	e62a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e58e:	1c42      	adds	r2, r0, #1
    e590:	f171 0100 	sbcs.w	r1, r1, #0
    e594:	db02      	blt.n	e59c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    e596:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
    e59a:	e036      	b.n	e60a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    e59c:	6921      	ldr	r1, [r4, #16]
    e59e:	b111      	cbz	r1, e5a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    e5a0:	fbb0 f0f1 	udiv	r0, r0, r1
    e5a4:	e000      	b.n	e5a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    e5a6:	2000      	movs	r0, #0
    e5a8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    e5ac:	1c40      	adds	r0, r0, #1
    e5ae:	4408      	add	r0, r1
    e5b0:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    e5b4:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    e5b8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    e5bc:	1a08      	subs	r0, r1, r0
    e5be:	b200      	sxth	r0, r0
    e5c0:	2800      	cmp	r0, #0
    e5c2:	dd32      	ble.n	e62a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e5c4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    e5c8:	f7fb fcbe 	bl	9f48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e5cc:	2800      	cmp	r0, #0
    e5ce:	d02c      	beq.n	e62a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e5d0:	20ff      	movs	r0, #255	; 0xff
    e5d2:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    e5d6:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    e5da:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    e5de:	ae01      	add	r6, sp, #4
    e5e0:	1a40      	subs	r0, r0, r1
    e5e2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    e5e6:	1e40      	subs	r0, r0, #1
    e5e8:	4408      	add	r0, r1
    e5ea:	b285      	uxth	r5, r0
    e5ec:	e017      	b.n	e61e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    e5ee:	9600      	str	r6, [sp, #0]
    e5f0:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    e5f4:	2300      	movs	r3, #0
    e5f6:	2201      	movs	r2, #1
    e5f8:	4620      	mov	r0, r4
    e5fa:	f7f5 ff0f 	bl	441c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e5fe:	2800      	cmp	r0, #0
    e600:	d013      	beq.n	e62a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e602:	2801      	cmp	r0, #1
    e604:	d004      	beq.n	e610 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    e606:	f240 51f9 	movw	r1, #1529	; 0x5f9
    e60a:	2030      	movs	r0, #48	; 0x30
    e60c:	f7f2 f9e4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e610:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    e614:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e618:	4408      	add	r0, r1
    e61a:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    e61e:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    e622:	1a28      	subs	r0, r5, r0
    e624:	b200      	sxth	r0, r0
    e626:	2800      	cmp	r0, #0
    e628:	dae1      	bge.n	e5ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    e62a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e62c:	2000      	movs	r0, #0
    e62e:	4770      	bx	lr
    e630:	b570      	push	{r4, r5, r6, lr}
    e632:	4604      	mov	r4, r0
    e634:	f000 f8f0 	bl	e818 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    e638:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    e63c:	2000      	movs	r0, #0
    e63e:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    e642:	4601      	mov	r1, r0
    e644:	2501      	movs	r5, #1
    e646:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    e64a:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    e64e:	4606      	mov	r6, r0
    e650:	f7fe ff60 	bl	d514 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e654:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    e658:	1c40      	adds	r0, r0, #1
    e65a:	280a      	cmp	r0, #10
    e65c:	d201      	bcs.n	e662 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    e65e:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    e662:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e666:	b138      	cbz	r0, e678 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    e668:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    e66c:	1c40      	adds	r0, r0, #1
    e66e:	280a      	cmp	r0, #10
    e670:	d302      	bcc.n	e678 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    e672:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    e676:	e002      	b.n	e67e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    e678:	2002      	movs	r0, #2
    e67a:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    e67e:	4620      	mov	r0, r4
    e680:	f000 f822 	bl	e6c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    e684:	b120      	cbz	r0, e690 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    e686:	4620      	mov	r0, r4
    e688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e68c:	f000 b80d 	b.w	e6aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    e690:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e694:	4631      	mov	r1, r6
    e696:	f000 f8bd 	bl	e814 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    e69a:	2800      	cmp	r0, #0
    e69c:	d104      	bne.n	e6a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    e69e:	f240 618e 	movw	r1, #1678	; 0x68e
    e6a2:	2030      	movs	r0, #48	; 0x30
    e6a4:	f7f2 f998 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6a8:	bd70      	pop	{r4, r5, r6, pc}
    e6aa:	b510      	push	{r4, lr}
    e6ac:	4604      	mov	r4, r0
    e6ae:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    e6b2:	f7fb fd8b 	bl	a1cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e6b6:	2000      	movs	r0, #0
    e6b8:	7620      	strb	r0, [r4, #24]
    e6ba:	bd10      	pop	{r4, pc}
    e6bc:	b510      	push	{r4, lr}
    e6be:	f7ff fd4b 	bl	e158 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e6c2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    e6c6:	bd10      	pop	{r4, pc}
    e6c8:	b570      	push	{r4, r5, r6, lr}
    e6ca:	4605      	mov	r5, r0
    e6cc:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    e6d0:	b108      	cbz	r0, e6d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    e6d2:	2001      	movs	r0, #1
    e6d4:	bd70      	pop	{r4, r5, r6, pc}
    e6d6:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    e6da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e6de:	4050      	eors	r0, r2
    e6e0:	ea70 0101 	orns	r1, r0, r1
    e6e4:	d012      	beq.n	e70c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    e6e6:	2400      	movs	r4, #0
    e6e8:	4621      	mov	r1, r4
    e6ea:	4628      	mov	r0, r5
    e6ec:	f7ff ffe6 	bl	e6bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    e6f0:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    e6f4:	1840      	adds	r0, r0, r1
    e6f6:	4154      	adcs	r4, r2
    e6f8:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    e6fc:	3df8      	subs	r5, #248	; 0xf8
    e6fe:	1a10      	subs	r0, r2, r0
    e700:	41a1      	sbcs	r1, r4
    e702:	d503      	bpl.n	e70c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    e704:	4628      	mov	r0, r5
    e706:	f7f4 fe7d 	bl	3404 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e70a:	e7e2      	b.n	e6d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    e70c:	2000      	movs	r0, #0
    e70e:	bd70      	pop	{r4, r5, r6, pc}
    e710:	b510      	push	{r4, lr}
    e712:	4604      	mov	r4, r0
    e714:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    e718:	f000 f9ef 	bl	eafa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    e71c:	4602      	mov	r2, r0
    e71e:	4620      	mov	r0, r4
    e720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e724:	f240 111b 	movw	r1, #283	; 0x11b
    e728:	f7ff ba5c 	b.w	dbe4 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e72c:	b510      	push	{r4, lr}
    e72e:	f7f8 fff1 	bl	7714 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e736:	f7fb beab 	b.w	a490 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e73e:	4604      	mov	r4, r0
    e740:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    e744:	2800      	cmp	r0, #0
    e746:	d051      	beq.n	e7ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    e748:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    e74c:	2803      	cmp	r0, #3
    e74e:	d14d      	bne.n	e7ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    e750:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    e754:	f001 fbbc 	bl	fed0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    e758:	4605      	mov	r5, r0
    e75a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    e75e:	f7f5 fd7f 	bl	4260 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e762:	4428      	add	r0, r5
    e764:	b286      	uxth	r6, r0
    e766:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    e76a:	f7f5 fd79 	bl	4260 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e76e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    e772:	fa1f f880 	uxth.w	r8, r0
    e776:	4648      	mov	r0, r9
    e778:	f7f9 f88a 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e77c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    e780:	1a0d      	subs	r5, r1, r0
    e782:	4648      	mov	r0, r9
    e784:	f7f9 f8b0 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e788:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e78c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e790:	fbb0 f0fa 	udiv	r0, r0, sl
    e794:	1a2d      	subs	r5, r5, r0
    e796:	4648      	mov	r0, r9
    e798:	f7f9 f87a 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e79c:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    e7a0:	1a0f      	subs	r7, r1, r0
    e7a2:	4648      	mov	r0, r9
    e7a4:	f7f9 f8a0 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e7a8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e7ac:	4401      	add	r1, r0
    e7ae:	fbb1 f0fa 	udiv	r0, r1, sl
    e7b2:	1a39      	subs	r1, r7, r0
    e7b4:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    e7b8:	4370      	muls	r0, r6
    e7ba:	fbb0 f2f8 	udiv	r2, r0, r8
    e7be:	2029      	movs	r0, #41	; 0x29
    e7c0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    e7c4:	3260      	adds	r2, #96	; 0x60
    e7c6:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    e7ca:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    e7ce:	42a9      	cmp	r1, r5
    e7d0:	d801      	bhi.n	e7d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    e7d2:	4285      	cmp	r5, r0
    e7d4:	d901      	bls.n	e7da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    e7d6:	f7fd f877 	bl	b8c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    e7da:	4631      	mov	r1, r6
    e7dc:	6920      	ldr	r0, [r4, #16]
    e7de:	f7fd f8db 	bl	b998 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    e7e2:	2100      	movs	r1, #0
    e7e4:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    e7e8:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    e7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e7f0:	b570      	push	{r4, r5, r6, lr}
    e7f2:	460c      	mov	r4, r1
    e7f4:	4605      	mov	r5, r0
    e7f6:	f7f9 f877 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e7fa:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e7fe:	4408      	add	r0, r1
    e800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e804:	fbb0 f6f1 	udiv	r6, r0, r1
    e808:	4628      	mov	r0, r5
    e80a:	f7f9 f841 	bl	7890 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e80e:	4430      	add	r0, r6
    e810:	4420      	add	r0, r4
    e812:	bd70      	pop	{r4, r5, r6, pc}
    e814:	f7fb b87a 	b.w	990c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e818:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e81a:	4604      	mov	r4, r0
    e81c:	f7ff fcc3 	bl	e1a6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e820:	b1f8      	cbz	r0, e862 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    e822:	4620      	mov	r0, r4
    e824:	f7ff fcb7 	bl	e196 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e828:	b918      	cbnz	r0, e832 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    e82a:	4620      	mov	r0, r4
    e82c:	f7ff fcbd 	bl	e1aa <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e830:	b140      	cbz	r0, e844 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    e832:	2455      	movs	r4, #85	; 0x55
    e834:	4668      	mov	r0, sp
    e836:	f7fd fb07 	bl	be48 <mpsl_fem_pa_is_configured>
    e83a:	f89d 0000 	ldrb.w	r0, [sp]
    e83e:	b118      	cbz	r0, e848 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    e840:	2501      	movs	r5, #1
    e842:	e002      	b.n	e84a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    e844:	2450      	movs	r4, #80	; 0x50
    e846:	e7f5      	b.n	e834 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    e848:	2500      	movs	r5, #0
    e84a:	a801      	add	r0, sp, #4
    e84c:	f7fd fae4 	bl	be18 <mpsl_fem_lna_is_configured>
    e850:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e854:	b100      	cbz	r0, e858 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    e856:	2001      	movs	r0, #1
    e858:	4305      	orrs	r5, r0
    e85a:	d000      	beq.n	e85e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    e85c:	340a      	adds	r4, #10
    e85e:	4620      	mov	r0, r4
    e860:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e862:	2061      	movs	r0, #97	; 0x61
    e864:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e866:	b570      	push	{r4, r5, r6, lr}
    e868:	4604      	mov	r4, r0
    e86a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    e86c:	2500      	movs	r5, #0
    e86e:	b130      	cbz	r0, e87e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    e870:	f7f4 fa60 	bl	2d34 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    e874:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    e876:	fbb0 f2f1 	udiv	r2, r0, r1
    e87a:	fb01 0512 	mls	r5, r1, r2, r0
    e87e:	4620      	mov	r0, r4
    e880:	f7ff fc66 	bl	e150 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e884:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    e888:	4428      	add	r0, r5
    e88a:	34e8      	adds	r4, #232	; 0xe8
    e88c:	2500      	movs	r5, #0
    e88e:	1882      	adds	r2, r0, r2
    e890:	eb45 0001 	adc.w	r0, r5, r1
    e894:	e9c4 2004 	strd	r2, r0, [r4, #16]
    e898:	f804 5b0b 	strb.w	r5, [r4], #11
    e89c:	2001      	movs	r0, #1
    e89e:	f804 0901 	strb.w	r0, [r4], #-1
    e8a2:	2002      	movs	r0, #2
    e8a4:	f804 09f2 	strb.w	r0, [r4], #-242
    e8a8:	4620      	mov	r0, r4
    e8aa:	f7ff ffb5 	bl	e818 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    e8ae:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    e8b2:	4620      	mov	r0, r4
    e8b4:	f7ff ff08 	bl	e6c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    e8b8:	b930      	cbnz	r0, e8c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    e8ba:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e8be:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    e8c2:	f7ff ffa7 	bl	e814 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    e8c6:	b128      	cbz	r0, e8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    e8c8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    e8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8d0:	f7ff bf2c 	b.w	e72c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    e8d4:	f240 61d4 	movw	r1, #1748	; 0x6d4
    e8d8:	2030      	movs	r0, #48	; 0x30
    e8da:	f7f2 f87d 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8de:	b510      	push	{r4, lr}
    e8e0:	4604      	mov	r4, r0
    e8e2:	2000      	movs	r0, #0
    e8e4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    e8e8:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    e8ec:	f7fb fc6e 	bl	a1cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e8f0:	2020      	movs	r0, #32
    e8f2:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    e8f6:	bd10      	pop	{r4, pc}
    e8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e8fc:	4604      	mov	r4, r0
    e8fe:	2500      	movs	r5, #0
    e900:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    e904:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    e908:	4689      	mov	r9, r1
    e90a:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    e90e:	f04f 0801 	mov.w	r8, #1
    e912:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    e916:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    e91a:	4641      	mov	r1, r8
    e91c:	34c8      	adds	r4, #200	; 0xc8
    e91e:	f7f3 fe21 	bl	2564 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e922:	6860      	ldr	r0, [r4, #4]
    e924:	f8c0 6290 	str.w	r6, [r0, #656]	; 0x290
    e928:	f8c0 7294 	str.w	r7, [r0, #660]	; 0x294
    e92c:	6861      	ldr	r1, [r4, #4]
    e92e:	7820      	ldrb	r0, [r4, #0]
    e930:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    e934:	6861      	ldr	r1, [r4, #4]
    e936:	f8c1 92a8 	str.w	r9, [r1, #680]	; 0x2a8
    e93a:	6860      	ldr	r0, [r4, #4]
    e93c:	e9c0 67a6 	strd	r6, r7, [r0, #664]	; 0x298
    e940:	6864      	ldr	r4, [r4, #4]
    e942:	f884 525c 	strb.w	r5, [r4, #604]	; 0x25c
    e946:	2300      	movs	r3, #0
    e948:	f8a4 52a0 	strh.w	r5, [r4, #672]	; 0x2a0
    e94c:	461a      	mov	r2, r3
    e94e:	4619      	mov	r1, r3
    e950:	4620      	mov	r0, r4
    e952:	9500      	str	r5, [sp, #0]
    e954:	f7f5 fd62 	bl	441c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e958:	b120      	cbz	r0, e964 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    e95a:	f240 2119 	movw	r1, #537	; 0x219
    e95e:	2030      	movs	r0, #48	; 0x30
    e960:	f7f2 f83a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e964:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    e968:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    e96c:	f884 825c 	strb.w	r8, [r4, #604]	; 0x25c
    e970:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    e974:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    e978:	3494      	adds	r4, #148	; 0x94
    e97a:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    e97e:	8820      	ldrh	r0, [r4, #0]
    e980:	1e40      	subs	r0, r0, #1
    e982:	8020      	strh	r0, [r4, #0]
    e984:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    e988:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e98c:	f7ff bece 	b.w	e72c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    e990:	b570      	push	{r4, r5, r6, lr}
    e992:	b140      	cbz	r0, e9a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    e994:	2909      	cmp	r1, #9
    e996:	d249      	bcs.n	ea2c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    e998:	e8df f001 	tbb	[pc, r1]
    e99c:	3c3c1507 	.word	0x3c3c1507
    e9a0:	402a4838 	.word	0x402a4838
    e9a4:	0044      	.short	0x0044
    e9a6:	21cb      	movs	r1, #203	; 0xcb
    e9a8:	e03d      	b.n	ea26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    e9aa:	4604      	mov	r4, r0
    e9ac:	f7f4 fcfa 	bl	33a4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    e9b0:	b110      	cbz	r0, e9b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    e9b2:	f240 2175 	movw	r1, #629	; 0x275
    e9b6:	e036      	b.n	ea26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    e9b8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    e9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e9c0:	38ff      	subs	r0, #255	; 0xff
    e9c2:	f7fb be7f 	b.w	a6c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    e9c6:	4605      	mov	r5, r0
    e9c8:	f7ff fbe9 	bl	e19e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e9cc:	b9b0      	cbnz	r0, e9fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    e9ce:	2100      	movs	r1, #0
    e9d0:	4628      	mov	r0, r5
    e9d2:	f7ff fe73 	bl	e6bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    e9d6:	4604      	mov	r4, r0
    e9d8:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    e9dc:	42a0      	cmp	r0, r4
    e9de:	d20b      	bcs.n	e9f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    e9e0:	1a20      	subs	r0, r4, r0
    e9e2:	2103      	movs	r1, #3
    e9e4:	f7fa fdbe 	bl	9564 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e9e8:	b130      	cbz	r0, e9f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    e9ea:	4628      	mov	r0, r5
    e9ec:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    e9f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e9f4:	f7ff bbaa 	b.w	e14c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    e9f8:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    e9fc:	4628      	mov	r0, r5
    e9fe:	f7f4 fced 	bl	33dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ea02:	2800      	cmp	r0, #0
    ea04:	d014      	beq.n	ea30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    ea06:	f240 21a9 	movw	r1, #681	; 0x2a9
    ea0a:	e00c      	b.n	ea26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ea0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ea10:	f7f9 b854 	b.w	7abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ea14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ea18:	f7ff be0a 	b.w	e630 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    ea1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ea20:	f7ff be43 	b.w	e6aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ea24:	21eb      	movs	r1, #235	; 0xeb
    ea26:	2030      	movs	r0, #48	; 0x30
    ea28:	f7f1 ffd6 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea2c:	21ef      	movs	r1, #239	; 0xef
    ea2e:	e7fa      	b.n	ea26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ea30:	bd70      	pop	{r4, r5, r6, pc}
    ea32:	b510      	push	{r4, lr}
    ea34:	0004      	movs	r4, r0
    ea36:	d008      	beq.n	ea4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    ea38:	2909      	cmp	r1, #9
    ea3a:	d25c      	bcs.n	eaf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    ea3c:	e8df f001 	tbb	[pc, r1]
    ea40:	40403807 	.word	0x40403807
    ea44:	4c455b3c 	.word	0x4c455b3c
    ea48:	0057      	.short	0x0057
    ea4a:	2197      	movs	r1, #151	; 0x97
    ea4c:	e050      	b.n	eaf0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    ea4e:	2100      	movs	r1, #0
    ea50:	f8c4 12ac 	str.w	r1, [r4, #684]	; 0x2ac
    ea54:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    ea58:	4620      	mov	r0, r4
    ea5a:	b189      	cbz	r1, ea80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    ea5c:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    ea60:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    ea64:	428a      	cmp	r2, r1
    ea66:	d106      	bne.n	ea76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    ea68:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    ea6c:	1a51      	subs	r1, r2, r1
    ea6e:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ea72:	4611      	mov	r1, r2
    ea74:	e00d      	b.n	ea92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    ea76:	1a51      	subs	r1, r2, r1
    ea78:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ea7c:	b291      	uxth	r1, r2
    ea7e:	e008      	b.n	ea92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    ea80:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    ea84:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    ea88:	1a89      	subs	r1, r1, r2
    ea8a:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ea8e:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    ea92:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    ea96:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    ea9a:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    ea9e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    eaa2:	f7f6 f88f 	bl	4bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    eaa6:	4620      	mov	r0, r4
    eaa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eaac:	f7f5 bec0 	b.w	4830 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    eab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eab4:	f000 b83c 	b.w	eb30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    eab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eabc:	f7f8 bffe 	b.w	7abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    eac0:	4620      	mov	r0, r4
    eac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eac6:	f7f5 beed 	b.w	48a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x680>
    eaca:	2001      	movs	r0, #1
    eacc:	f7fa fd3a 	bl	9544 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    ead0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ead4:	f7fe bbc3 	b.w	d25e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    ead8:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    eadc:	2804      	cmp	r0, #4
    eade:	d001      	beq.n	eae4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    eae0:	21b9      	movs	r1, #185	; 0xb9
    eae2:	e005      	b.n	eaf0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    eae4:	4620      	mov	r0, r4
    eae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eaea:	f7ff bef8 	b.w	e8de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    eaee:	21bf      	movs	r1, #191	; 0xbf
    eaf0:	2030      	movs	r0, #48	; 0x30
    eaf2:	f7f1 ff71 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaf6:	21c3      	movs	r1, #195	; 0xc3
    eaf8:	e7fa      	b.n	eaf0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    eafa:	b510      	push	{r4, lr}
    eafc:	f7f8 fef4 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    eb00:	f64d 7141 	movw	r1, #57153	; 0xdf41
    eb04:	4408      	add	r0, r1
    eb06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eb0a:	fbb0 f0f1 	udiv	r0, r0, r1
    eb0e:	f200 1079 	addw	r0, r0, #377	; 0x179
    eb12:	bd10      	pop	{r4, pc}
    eb14:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    eb18:	f001 0307 	and.w	r3, r1, #7
    eb1c:	7802      	ldrb	r2, [r0, #0]
    eb1e:	2101      	movs	r1, #1
    eb20:	4099      	lsls	r1, r3
    eb22:	438a      	bics	r2, r1
    eb24:	7002      	strb	r2, [r0, #0]
    eb26:	4770      	bx	lr

0000eb28 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    eb28:	f7f2 bae0 	b.w	10ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000eb2c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    eb2c:	2000      	movs	r0, #0
    eb2e:	4770      	bx	lr

0000eb30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    eb30:	f7f2 bf70 	b.w	1a14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000eb34 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    eb34:	2100      	movs	r1, #0
    eb36:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    eb3a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    eb3e:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    eb42:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    eb46:	b109      	cbz	r1, eb4c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    eb48:	2102      	movs	r1, #2
    eb4a:	e000      	b.n	eb4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    eb4c:	2103      	movs	r1, #3
    eb4e:	f7f5 bb2f 	b.w	41b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    eb52:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    eb56:	28fe      	cmp	r0, #254	; 0xfe
    eb58:	d001      	beq.n	eb5e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    eb5a:	2001      	movs	r0, #1
    eb5c:	4770      	bx	lr
    eb5e:	2000      	movs	r0, #0
    eb60:	4770      	bx	lr
    eb62:	b510      	push	{r4, lr}
    eb64:	2801      	cmp	r0, #1
    eb66:	d006      	beq.n	eb76 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eb68:	2802      	cmp	r0, #2
    eb6a:	d004      	beq.n	eb76 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eb6c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    eb70:	2006      	movs	r0, #6
    eb72:	f7f1 ff31 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb76:	bd10      	pop	{r4, pc}
    eb78:	2801      	cmp	r0, #1
    eb7a:	d002      	beq.n	eb82 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    eb7c:	2802      	cmp	r0, #2
    eb7e:	d105      	bne.n	eb8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eb80:	e002      	b.n	eb88 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    eb82:	2901      	cmp	r1, #1
    eb84:	d004      	beq.n	eb90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eb86:	e001      	b.n	eb8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eb88:	2902      	cmp	r1, #2
    eb8a:	d001      	beq.n	eb90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eb8c:	2000      	movs	r0, #0
    eb8e:	4770      	bx	lr
    eb90:	2001      	movs	r0, #1
    eb92:	4770      	bx	lr
    eb94:	1a40      	subs	r0, r0, r1
    eb96:	b200      	sxth	r0, r0
    eb98:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    eb9c:	4288      	cmp	r0, r1
    eb9e:	dc01      	bgt.n	eba4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    eba0:	2800      	cmp	r0, #0
    eba2:	dc01      	bgt.n	eba8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    eba4:	2001      	movs	r0, #1
    eba6:	4770      	bx	lr
    eba8:	2000      	movs	r0, #0
    ebaa:	4770      	bx	lr
    ebac:	6842      	ldr	r2, [r0, #4]
    ebae:	2100      	movs	r1, #0
    ebb0:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    ebb4:	6842      	ldr	r2, [r0, #4]
    ebb6:	f882 10d6 	strb.w	r1, [r2, #214]	; 0xd6
    ebba:	6840      	ldr	r0, [r0, #4]
    ebbc:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    ebc0:	4770      	bx	lr
    ebc2:	b510      	push	{r4, lr}
    ebc4:	4604      	mov	r4, r0
    ebc6:	6840      	ldr	r0, [r0, #4]
    ebc8:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    ebcc:	0740      	lsls	r0, r0, #29
    ebce:	d501      	bpl.n	ebd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa0>
    ebd0:	2001      	movs	r0, #1
    ebd2:	bd10      	pop	{r4, pc}
    ebd4:	f7f6 f8f8 	bl	4dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    ebd8:	6860      	ldr	r0, [r4, #4]
    ebda:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    ebde:	f041 0104 	orr.w	r1, r1, #4
    ebe2:	6001      	str	r1, [r0, #0]
    ebe4:	2000      	movs	r0, #0
    ebe6:	bd10      	pop	{r4, pc}
    ebe8:	b510      	push	{r4, lr}
    ebea:	4604      	mov	r4, r0
    ebec:	6840      	ldr	r0, [r0, #4]
    ebee:	2301      	movs	r3, #1
    ebf0:	2109      	movs	r1, #9
    ebf2:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    ebf6:	3080      	adds	r0, #128	; 0x80
    ebf8:	f7fe fbc2 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ebfc:	2800      	cmp	r0, #0
    ebfe:	d009      	beq.n	ec14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe0>
    ec00:	6861      	ldr	r1, [r4, #4]
    ec02:	2000      	movs	r0, #0
    ec04:	f881 00ca 	strb.w	r0, [r1, #202]	; 0xca
    ec08:	6861      	ldr	r1, [r4, #4]
    ec0a:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    ec0e:	6861      	ldr	r1, [r4, #4]
    ec10:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    ec14:	bd10      	pop	{r4, pc}
    ec16:	b510      	push	{r4, lr}
    ec18:	4604      	mov	r4, r0
    ec1a:	6840      	ldr	r0, [r0, #4]
    ec1c:	2301      	movs	r3, #1
    ec1e:	2100      	movs	r1, #0
    ec20:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    ec24:	3080      	adds	r0, #128	; 0x80
    ec26:	f7fe fbab 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec2a:	2800      	cmp	r0, #0
    ec2c:	6860      	ldr	r0, [r4, #4]
    ec2e:	d00b      	beq.n	ec48 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x114>
    ec30:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    ec34:	2800      	cmp	r0, #0
    ec36:	d006      	beq.n	ec46 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x112>
    ec38:	f7f6 f8c6 	bl	4dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    ec3c:	6861      	ldr	r1, [r4, #4]
    ec3e:	2011      	movs	r0, #17
    ec40:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    ec44:	2000      	movs	r0, #0
    ec46:	bd10      	pop	{r4, pc}
    ec48:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    ec4c:	2301      	movs	r3, #1
    ec4e:	2105      	movs	r1, #5
    ec50:	3080      	adds	r0, #128	; 0x80
    ec52:	f7fe fb95 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec56:	b108      	cbz	r0, ec5c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x128>
    ec58:	2008      	movs	r0, #8
    ec5a:	bd10      	pop	{r4, pc}
    ec5c:	2001      	movs	r0, #1
    ec5e:	bd10      	pop	{r4, pc}
    ec60:	6840      	ldr	r0, [r0, #4]
    ec62:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    ec66:	2912      	cmp	r1, #18
    ec68:	d001      	beq.n	ec6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x13a>
    ec6a:	2002      	movs	r0, #2
    ec6c:	4770      	bx	lr
    ec6e:	2113      	movs	r1, #19
    ec70:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    ec74:	2000      	movs	r0, #0
    ec76:	4770      	bx	lr
    ec78:	b510      	push	{r4, lr}
    ec7a:	4604      	mov	r4, r0
    ec7c:	6840      	ldr	r0, [r0, #4]
    ec7e:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    ec82:	2818      	cmp	r0, #24
    ec84:	d001      	beq.n	ec8a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x156>
    ec86:	2002      	movs	r0, #2
    ec88:	bd10      	pop	{r4, pc}
    ec8a:	f7f6 f8a9 	bl	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ec8e:	6861      	ldr	r1, [r4, #4]
    ec90:	201c      	movs	r0, #28
    ec92:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    ec96:	2000      	movs	r0, #0
    ec98:	bd10      	pop	{r4, pc}
    ec9a:	b510      	push	{r4, lr}
    ec9c:	6843      	ldr	r3, [r0, #4]
    ec9e:	4604      	mov	r4, r0
    eca0:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    eca4:	2808      	cmp	r0, #8
    eca6:	d20d      	bcs.n	ecc4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x190>
    eca8:	f500 7210 	add.w	r2, r0, #576	; 0x240
    ecac:	f1c0 0008 	rsb	r0, r0, #8
    ecb0:	b2c1      	uxtb	r1, r0
    ecb2:	1898      	adds	r0, r3, r2
    ecb4:	f7f1 ff30 	bl	b18 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ecb8:	6861      	ldr	r1, [r4, #4]
    ecba:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    ecbe:	4410      	add	r0, r2
    ecc0:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    ecc4:	6862      	ldr	r2, [r4, #4]
    ecc6:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    ecca:	3908      	subs	r1, #8
    eccc:	2904      	cmp	r1, #4
    ecce:	d20d      	bcs.n	ecec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b8>
    ecd0:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    ecd4:	f1c1 0104 	rsb	r1, r1, #4
    ecd8:	b2c9      	uxtb	r1, r1
    ecda:	4410      	add	r0, r2
    ecdc:	f7f1 ff1c 	bl	b18 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ece0:	6861      	ldr	r1, [r4, #4]
    ece2:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    ece6:	4410      	add	r0, r2
    ece8:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    ecec:	6860      	ldr	r0, [r4, #4]
    ecee:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    ecf2:	290c      	cmp	r1, #12
    ecf4:	d30f      	bcc.n	ed16 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e2>
    ecf6:	d005      	beq.n	ed04 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d0>
    ecf8:	f640 1176 	movw	r1, #2422	; 0x976
    ecfc:	f04f 0031 	mov.w	r0, #49	; 0x31
    ed00:	f7f1 fe6a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed04:	2100      	movs	r1, #0
    ed06:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    ed0a:	2101      	movs	r1, #1
    ed0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed10:	2004      	movs	r0, #4
    ed12:	f7f6 be0d 	b.w	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    ed16:	bd10      	pop	{r4, pc}
    ed18:	6842      	ldr	r2, [r0, #4]
    ed1a:	2131      	movs	r1, #49	; 0x31
    ed1c:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    ed20:	6840      	ldr	r0, [r0, #4]
    ed22:	2100      	movs	r1, #0
    ed24:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    ed28:	4770      	bx	lr
    ed2a:	b510      	push	{r4, lr}
    ed2c:	6841      	ldr	r1, [r0, #4]
    ed2e:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    ed32:	2a15      	cmp	r2, #21
    ed34:	d004      	beq.n	ed40 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x20c>
    ed36:	f640 011b 	movw	r1, #2075	; 0x81b
    ed3a:	2031      	movs	r0, #49	; 0x31
    ed3c:	f7f1 fe4c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed40:	2201      	movs	r2, #1
    ed42:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    ed46:	6840      	ldr	r0, [r0, #4]
    ed48:	2116      	movs	r1, #22
    ed4a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    ed4e:	bd10      	pop	{r4, pc}
    ed50:	f7ff b8ca 	b.w	dee8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    ed54:	b510      	push	{r4, lr}
    ed56:	4604      	mov	r4, r0
    ed58:	6840      	ldr	r0, [r0, #4]
    ed5a:	2301      	movs	r3, #1
    ed5c:	2100      	movs	r1, #0
    ed5e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    ed62:	3080      	adds	r0, #128	; 0x80
    ed64:	f7fe fb0c 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ed68:	b120      	cbz	r0, ed74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x240>
    ed6a:	6861      	ldr	r1, [r4, #4]
    ed6c:	201d      	movs	r0, #29
    ed6e:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    ed72:	bd10      	pop	{r4, pc}
    ed74:	f640 017e 	movw	r1, #2174	; 0x87e
    ed78:	2031      	movs	r0, #49	; 0x31
    ed7a:	f7f1 fe2d 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed7e:	b510      	push	{r4, lr}
    ed80:	6841      	ldr	r1, [r0, #4]
    ed82:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    ed86:	06c2      	lsls	r2, r0, #27
    ed88:	d402      	bmi.n	ed90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x25c>
    ed8a:	f640 0185 	movw	r1, #2181	; 0x885
    ed8e:	e003      	b.n	ed98 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x264>
    ed90:	0682      	lsls	r2, r0, #26
    ed92:	d504      	bpl.n	ed9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x26a>
    ed94:	f640 0186 	movw	r1, #2182	; 0x886
    ed98:	2031      	movs	r0, #49	; 0x31
    ed9a:	f7f1 fe1d 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed9e:	f020 0010 	bic.w	r0, r0, #16
    eda2:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    eda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edaa:	f7f6 b819 	b.w	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    edae:	b510      	push	{r4, lr}
    edb0:	4604      	mov	r4, r0
    edb2:	6840      	ldr	r0, [r0, #4]
    edb4:	2301      	movs	r3, #1
    edb6:	2100      	movs	r1, #0
    edb8:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    edbc:	3080      	adds	r0, #128	; 0x80
    edbe:	f7fe fadf 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    edc2:	b120      	cbz	r0, edce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x29a>
    edc4:	6861      	ldr	r1, [r4, #4]
    edc6:	200f      	movs	r0, #15
    edc8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    edcc:	bd10      	pop	{r4, pc}
    edce:	f640 0171 	movw	r1, #2161	; 0x871
    edd2:	2031      	movs	r0, #49	; 0x31
    edd4:	f7f1 fe00 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edd8:	6840      	ldr	r0, [r0, #4]
    edda:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    edde:	f021 0104 	bic.w	r1, r1, #4
    ede2:	6001      	str	r1, [r0, #0]
    ede4:	f7f5 bffc 	b.w	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ede8:	b510      	push	{r4, lr}
    edea:	6841      	ldr	r1, [r0, #4]
    edec:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    edf0:	2a11      	cmp	r2, #17
    edf2:	d004      	beq.n	edfe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ca>
    edf4:	f640 0113 	movw	r1, #2067	; 0x813
    edf8:	2031      	movs	r0, #49	; 0x31
    edfa:	f7f1 fded 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edfe:	2201      	movs	r2, #1
    ee00:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    ee04:	6840      	ldr	r0, [r0, #4]
    ee06:	2112      	movs	r1, #18
    ee08:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    ee0c:	bd10      	pop	{r4, pc}
    ee0e:	b510      	push	{r4, lr}
    ee10:	4604      	mov	r4, r0
    ee12:	6840      	ldr	r0, [r0, #4]
    ee14:	2301      	movs	r3, #1
    ee16:	2100      	movs	r1, #0
    ee18:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    ee1c:	3080      	adds	r0, #128	; 0x80
    ee1e:	f7fe faaf 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ee22:	b120      	cbz	r0, ee2e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2fa>
    ee24:	6861      	ldr	r1, [r4, #4]
    ee26:	2020      	movs	r0, #32
    ee28:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    ee2c:	bd10      	pop	{r4, pc}
    ee2e:	f44f 6109 	mov.w	r1, #2192	; 0x890
    ee32:	2031      	movs	r0, #49	; 0x31
    ee34:	f7f1 fdd0 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee38:	b510      	push	{r4, lr}
    ee3a:	6841      	ldr	r1, [r0, #4]
    ee3c:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    ee40:	2822      	cmp	r0, #34	; 0x22
    ee42:	d005      	beq.n	ee50 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    ee44:	b120      	cbz	r0, ee50 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    ee46:	f640 0197 	movw	r1, #2199	; 0x897
    ee4a:	2031      	movs	r0, #49	; 0x31
    ee4c:	f7f1 fdc4 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee50:	2023      	movs	r0, #35	; 0x23
    ee52:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    ee56:	bd10      	pop	{r4, pc}
    ee58:	b510      	push	{r4, lr}
    ee5a:	6840      	ldr	r0, [r0, #4]
    ee5c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    ee60:	292f      	cmp	r1, #47	; 0x2f
    ee62:	d006      	beq.n	ee72 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    ee64:	2916      	cmp	r1, #22
    ee66:	d00b      	beq.n	ee80 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x34c>
    ee68:	f640 013d 	movw	r1, #2109	; 0x83d
    ee6c:	2031      	movs	r0, #49	; 0x31
    ee6e:	f7f1 fdb3 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee72:	2100      	movs	r1, #0
    ee74:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    ee78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee7c:	f7f5 bfb0 	b.w	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ee80:	211a      	movs	r1, #26
    ee82:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    ee86:	bd10      	pop	{r4, pc}
    ee88:	b510      	push	{r4, lr}
    ee8a:	6840      	ldr	r0, [r0, #4]
    ee8c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    ee90:	2916      	cmp	r1, #22
    ee92:	d004      	beq.n	ee9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36a>
    ee94:	f640 0128 	movw	r1, #2088	; 0x828
    ee98:	2031      	movs	r0, #49	; 0x31
    ee9a:	f7f1 fd9d 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee9e:	211a      	movs	r1, #26
    eea0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    eea4:	bd10      	pop	{r4, pc}
    eea6:	f7ff b80d 	b.w	dec4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    eeaa:	b510      	push	{r4, lr}
    eeac:	6840      	ldr	r0, [r0, #4]
    eeae:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    eeb2:	2916      	cmp	r1, #22
    eeb4:	d004      	beq.n	eec0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    eeb6:	f640 0122 	movw	r1, #2082	; 0x822
    eeba:	2031      	movs	r0, #49	; 0x31
    eebc:	f7f1 fd8c 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eec0:	2118      	movs	r1, #24
    eec2:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    eec6:	bd10      	pop	{r4, pc}
    eec8:	b510      	push	{r4, lr}
    eeca:	4604      	mov	r4, r0
    eecc:	6840      	ldr	r0, [r0, #4]
    eece:	2301      	movs	r3, #1
    eed0:	4619      	mov	r1, r3
    eed2:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    eed6:	3080      	adds	r0, #128	; 0x80
    eed8:	f7fe fa52 	bl	d380 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eedc:	2800      	cmp	r0, #0
    eede:	d103      	bne.n	eee8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3b4>
    eee0:	6861      	ldr	r1, [r4, #4]
    eee2:	2007      	movs	r0, #7
    eee4:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    eee8:	bd10      	pop	{r4, pc}
    eeea:	f7ff b84f 	b.w	df8c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    eeee:	b570      	push	{r4, r5, r6, lr}
    eef0:	4614      	mov	r4, r2
    eef2:	460e      	mov	r6, r1
    eef4:	6861      	ldr	r1, [r4, #4]
    eef6:	4602      	mov	r2, r0
    eef8:	2500      	movs	r5, #0
    eefa:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    eefe:	2a0e      	cmp	r2, #14
    ef00:	d00a      	beq.n	ef18 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3e4>
    ef02:	2a12      	cmp	r2, #18
    ef04:	d011      	beq.n	ef2a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f6>
    ef06:	2a14      	cmp	r2, #20
    ef08:	d016      	beq.n	ef38 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x404>
    ef0a:	2a17      	cmp	r2, #23
    ef0c:	d022      	beq.n	ef54 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x420>
    ef0e:	f240 4115 	movw	r1, #1045	; 0x415
    ef12:	2031      	movs	r0, #49	; 0x31
    ef14:	f7f1 fd60 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef18:	2804      	cmp	r0, #4
    ef1a:	d12f      	bne.n	ef7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    ef1c:	4620      	mov	r0, r4
    ef1e:	f7ff fe45 	bl	ebac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ef22:	4620      	mov	r0, r4
    ef24:	f7f3 ffb2 	bl	2e8c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    ef28:	e028      	b.n	ef7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    ef2a:	280f      	cmp	r0, #15
    ef2c:	d126      	bne.n	ef7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    ef2e:	4620      	mov	r0, r4
    ef30:	f7ff fe5a 	bl	ebe8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xb4>
    ef34:	4605      	mov	r5, r0
    ef36:	e021      	b.n	ef7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    ef38:	281d      	cmp	r0, #29
    ef3a:	d11f      	bne.n	ef7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    ef3c:	4620      	mov	r0, r4
    ef3e:	f7ff fe35 	bl	ebac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ef42:	b126      	cbz	r6, ef4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x41a>
    ef44:	6860      	ldr	r0, [r4, #4]
    ef46:	2105      	movs	r1, #5
    ef48:	30ec      	adds	r0, #236	; 0xec
    ef4a:	f7ff fde3 	bl	eb14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    ef4e:	f7f6 f91f 	bl	5190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    ef52:	e013      	b.n	ef7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    ef54:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    ef58:	2823      	cmp	r0, #35	; 0x23
    ef5a:	d10f      	bne.n	ef7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    ef5c:	2600      	movs	r6, #0
    ef5e:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    ef62:	f7f5 ff3d 	bl	4de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ef66:	6860      	ldr	r0, [r4, #4]
    ef68:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    ef6c:	2801      	cmp	r0, #1
    ef6e:	d102      	bne.n	ef76 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x442>
    ef70:	2000      	movs	r0, #0
    ef72:	f7f6 fdef 	bl	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    ef76:	6860      	ldr	r0, [r4, #4]
    ef78:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    ef7c:	4628      	mov	r0, r5
    ef7e:	bd70      	pop	{r4, r5, r6, pc}
    ef80:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ef84:	f001 0107 	and.w	r1, r1, #7
    ef88:	7800      	ldrb	r0, [r0, #0]
    ef8a:	40c8      	lsrs	r0, r1
    ef8c:	f000 0001 	and.w	r0, r0, #1
    ef90:	4770      	bx	lr

0000ef92 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    ef92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef96:	6856      	ldr	r6, [r2, #4]
    ef98:	460c      	mov	r4, r1
    ef9a:	f506 7598 	add.w	r5, r6, #304	; 0x130
    ef9e:	f106 0780 	add.w	r7, r6, #128	; 0x80
    efa2:	2823      	cmp	r0, #35	; 0x23
    efa4:	d008      	beq.n	efb8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    efa6:	2824      	cmp	r0, #36	; 0x24
    efa8:	d014      	beq.n	efd4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    efaa:	2825      	cmp	r0, #37	; 0x25
    efac:	d02a      	beq.n	f004 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    efae:	f44f 718d 	mov.w	r1, #282	; 0x11a
    efb2:	2078      	movs	r0, #120	; 0x78
    efb4:	f7f1 fd10 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efb8:	7de8      	ldrb	r0, [r5, #23]
    efba:	f000 f8d4 	bl	f166 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    efbe:	7de9      	ldrb	r1, [r5, #23]
    efc0:	7121      	strb	r1, [r4, #4]
    efc2:	7e29      	ldrb	r1, [r5, #24]
    efc4:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    efc8:	7161      	strb	r1, [r4, #5]
    efca:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    efce:	71a0      	strb	r0, [r4, #6]
    efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efd4:	7d28      	ldrb	r0, [r5, #20]
    efd6:	f000 f8c6 	bl	f166 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    efda:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    efde:	7f78      	ldrb	r0, [r7, #29]
    efe0:	366f      	adds	r6, #111	; 0x6f
    efe2:	2828      	cmp	r0, #40	; 0x28
    efe4:	d00c      	beq.n	f000 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    efe6:	68b8      	ldr	r0, [r7, #8]
    efe8:	f7f3 ffbe 	bl	2f68 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    efec:	7831      	ldrb	r1, [r6, #0]
    efee:	7121      	strb	r1, [r4, #4]
    eff0:	7d69      	ldrb	r1, [r5, #21]
    eff2:	7161      	strb	r1, [r4, #5]
    eff4:	7871      	ldrb	r1, [r6, #1]
    eff6:	71a1      	strb	r1, [r4, #6]
    eff8:	71e0      	strb	r0, [r4, #7]
    effa:	2000      	movs	r0, #0
    effc:	75a8      	strb	r0, [r5, #22]
    effe:	e7e7      	b.n	efd0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f000:	20ff      	movs	r0, #255	; 0xff
    f002:	e7f3      	b.n	efec <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f004:	7d28      	ldrb	r0, [r5, #20]
    f006:	f000 f8ae 	bl	f166 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f00a:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f00e:	7d29      	ldrb	r1, [r5, #20]
    f010:	7121      	strb	r1, [r4, #4]
    f012:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f016:	7161      	strb	r1, [r4, #5]
    f018:	7d69      	ldrb	r1, [r5, #21]
    f01a:	71a1      	strb	r1, [r4, #6]
    f01c:	7840      	ldrb	r0, [r0, #1]
    f01e:	71e0      	strb	r0, [r4, #7]
    f020:	e7d6      	b.n	efd0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f022 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f022:	b510      	push	{r4, lr}
    f024:	2801      	cmp	r0, #1
    f026:	d006      	beq.n	f036 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f028:	2802      	cmp	r0, #2
    f02a:	d006      	beq.n	f03a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f02c:	f240 2162 	movw	r1, #610	; 0x262
    f030:	2078      	movs	r0, #120	; 0x78
    f032:	f7f1 fcd1 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f036:	2000      	movs	r0, #0
    f038:	bd10      	pop	{r4, pc}
    f03a:	2001      	movs	r0, #1
    f03c:	bd10      	pop	{r4, pc}

0000f03e <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f03e:	207f      	movs	r0, #127	; 0x7f
    f040:	f000 b8ab 	b.w	f19a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f044 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f044:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f048:	f000 b8a7 	b.w	f19a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f04c <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f04c:	b510      	push	{r4, lr}
    f04e:	4604      	mov	r4, r0
    f050:	f7f7 ff84 	bl	6f5c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f054:	1e64      	subs	r4, r4, #1
    f056:	b2e2      	uxtb	r2, r4
    f058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f05c:	f000 b869 	b.w	f132 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f060 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f064:	4607      	mov	r7, r0
    f066:	461e      	mov	r6, r3
    f068:	4690      	mov	r8, r2
    f06a:	460c      	mov	r4, r1
    f06c:	4608      	mov	r0, r1
    f06e:	f7ff ffed 	bl	f04c <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f072:	b1e8      	cbz	r0, f0b0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f074:	687d      	ldr	r5, [r7, #4]
    f076:	2121      	movs	r1, #33	; 0x21
    f078:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f07c:	3580      	adds	r5, #128	; 0x80
    f07e:	f7ff ff7f 	bl	ef80 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44c>
    f082:	b1b8      	cbz	r0, f0b4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f084:	1e64      	subs	r4, r4, #1
    f086:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f088:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f08a:	b2e2      	uxtb	r2, r4
    f08c:	f000 f851 	bl	f132 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f090:	b180      	cbz	r0, f0b4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f092:	6878      	ldr	r0, [r7, #4]
    f094:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f098:	f88d 1000 	strb.w	r1, [sp]
    f09c:	9900      	ldr	r1, [sp, #0]
    f09e:	9100      	str	r1, [sp, #0]
    f0a0:	f89d 1000 	ldrb.w	r1, [sp]
    f0a4:	f200 1047 	addw	r0, r0, #327	; 0x147
    f0a8:	b131      	cbz	r1, f0b8 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f0aa:	203a      	movs	r0, #58	; 0x3a
    f0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f0b0:	2011      	movs	r0, #17
    f0b2:	e7fb      	b.n	f0ac <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f0b4:	201a      	movs	r0, #26
    f0b6:	e7f9      	b.n	f0ac <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f0b8:	1c81      	adds	r1, r0, #2
    f0ba:	700e      	strb	r6, [r1, #0]
    f0bc:	2101      	movs	r1, #1
    f0be:	40a1      	lsls	r1, r4
    f0c0:	7001      	strb	r1, [r0, #0]
    f0c2:	f880 8001 	strb.w	r8, [r0, #1]
    f0c6:	2000      	movs	r0, #0
    f0c8:	e7f0      	b.n	f0ac <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f0ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0ce:	460d      	mov	r5, r1
    f0d0:	4606      	mov	r6, r0
    f0d2:	f7ff ffb4 	bl	f03e <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f0d6:	4607      	mov	r7, r0
    f0d8:	f7ff ffb4 	bl	f044 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f0dc:	2400      	movs	r4, #0
    f0de:	4285      	cmp	r5, r0
    f0e0:	d100      	bne.n	f0e4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f0e2:	2401      	movs	r4, #1
    f0e4:	42bd      	cmp	r5, r7
    f0e6:	d101      	bne.n	f0ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f0e8:	f044 0402 	orr.w	r4, r4, #2
    f0ec:	f000 f834 	bl	f158 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f0f0:	2200      	movs	r2, #0
    f0f2:	4601      	mov	r1, r0
    f0f4:	2301      	movs	r3, #1
    f0f6:	fa03 f002 	lsl.w	r0, r3, r2
    f0fa:	4208      	tst	r0, r1
    f0fc:	d005      	beq.n	f10a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f0fe:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f102:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f106:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f10a:	1c52      	adds	r2, r2, #1
    f10c:	b2d2      	uxtb	r2, r2
    f10e:	2a02      	cmp	r2, #2
    f110:	d3f1      	bcc.n	f0f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f116 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f116:	b510      	push	{r4, lr}
    f118:	4604      	mov	r4, r0
    f11a:	4608      	mov	r0, r1
    f11c:	f7ff ff81 	bl	f022 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f120:	2802      	cmp	r0, #2
    f122:	d205      	bcs.n	f130 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f124:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f128:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f12c:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f130:	bd10      	pop	{r4, pc}
    f132:	b510      	push	{r4, lr}
    f134:	4614      	mov	r4, r2
    f136:	4602      	mov	r2, r0
    f138:	2000      	movs	r0, #0
    f13a:	4603      	mov	r3, r0
    f13c:	2c02      	cmp	r4, #2
    f13e:	d205      	bcs.n	f14c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f140:	4610      	mov	r0, r2
    f142:	f000 f821 	bl	f188 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f146:	2101      	movs	r1, #1
    f148:	40a1      	lsls	r1, r4
    f14a:	b2cb      	uxtb	r3, r1
    f14c:	4203      	tst	r3, r0
    f14e:	d001      	beq.n	f154 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f150:	2001      	movs	r0, #1
    f152:	bd10      	pop	{r4, pc}
    f154:	2000      	movs	r0, #0
    f156:	bd10      	pop	{r4, pc}
    f158:	b510      	push	{r4, lr}
    f15a:	f7f7 feff 	bl	6f5c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f162:	f000 b811 	b.w	f188 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f166:	4601      	mov	r1, r0
    f168:	b510      	push	{r4, lr}
    f16a:	2000      	movs	r0, #0
    f16c:	2301      	movs	r3, #1
    f16e:	fa03 f200 	lsl.w	r2, r3, r0
    f172:	420a      	tst	r2, r1
    f174:	d107      	bne.n	f186 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f176:	1c40      	adds	r0, r0, #1
    f178:	b2c0      	uxtb	r0, r0
    f17a:	2802      	cmp	r0, #2
    f17c:	d3f7      	bcc.n	f16e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f17e:	213c      	movs	r1, #60	; 0x3c
    f180:	2078      	movs	r0, #120	; 0x78
    f182:	f7f1 fc29 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f186:	bd10      	pop	{r4, pc}
    f188:	0a00      	lsrs	r0, r0, #8
    f18a:	2201      	movs	r2, #1
    f18c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f190:	07c0      	lsls	r0, r0, #31
    f192:	d000      	beq.n	f196 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    f194:	2203      	movs	r2, #3
    f196:	4610      	mov	r0, r2
    f198:	4770      	bx	lr
    f19a:	b508      	push	{r3, lr}
    f19c:	2301      	movs	r3, #1
    f19e:	f640 1288 	movw	r2, #2440	; 0x988
    f1a2:	4669      	mov	r1, sp
    f1a4:	f7fc fe56 	bl	be54 <mpsl_fem_tx_power_split>
    f1a8:	bd08      	pop	{r3, pc}
    f1aa:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f1ae:	f001 0107 	and.w	r1, r1, #7
    f1b2:	7800      	ldrb	r0, [r0, #0]
    f1b4:	40c8      	lsrs	r0, r1
    f1b6:	f000 0001 	and.w	r0, r0, #1
    f1ba:	4770      	bx	lr
    f1bc:	b118      	cbz	r0, f1c6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f1be:	2802      	cmp	r0, #2
    f1c0:	d001      	beq.n	f1c6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f1c2:	2001      	movs	r0, #1
    f1c4:	4770      	bx	lr
    f1c6:	2000      	movs	r0, #0
    f1c8:	4770      	bx	lr

0000f1ca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f1ca:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f1cc:	7881      	ldrb	r1, [r0, #2]
    f1ce:	2500      	movs	r5, #0
    f1d0:	4604      	mov	r4, r0
    f1d2:	291a      	cmp	r1, #26
    f1d4:	d024      	beq.n	f220 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f1d6:	dc0e      	bgt.n	f1f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f1d8:	2916      	cmp	r1, #22
    f1da:	d22b      	bcs.n	f234 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f1dc:	e8df f001 	tbb	[pc, r1]
    f1e0:	2a2a2a2a 	.word	0x2a2a2a2a
    f1e4:	2a2a202a 	.word	0x2a2a202a
    f1e8:	2a2a2a2a 	.word	0x2a2a2a2a
    f1ec:	2a2a2a2a 	.word	0x2a2a2a2a
    f1f0:	202a2a2a 	.word	0x202a2a2a
    f1f4:	2020      	.short	0x2020
    f1f6:	292a      	cmp	r1, #42	; 0x2a
    f1f8:	d01c      	beq.n	f234 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f1fa:	dc0b      	bgt.n	f214 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f1fc:	f1a1 011e 	sub.w	r1, r1, #30
    f200:	290c      	cmp	r1, #12
    f202:	d217      	bcs.n	f234 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f204:	e8df f001 	tbb	[pc, r1]
    f208:	16161616 	.word	0x16161616
    f20c:	16161616 	.word	0x16161616
    f210:	0c161616 	.word	0x0c161616
    f214:	393a      	subs	r1, #58	; 0x3a
    f216:	2902      	cmp	r1, #2
    f218:	d20c      	bcs.n	f234 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f21a:	e8df f001 	tbb	[pc, r1]
    f21e:	010b      	.short	0x010b
    f220:	8820      	ldrh	r0, [r4, #0]
    f222:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f226:	d205      	bcs.n	f234 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f228:	4669      	mov	r1, sp
    f22a:	f7fe f87f 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f22e:	b118      	cbz	r0, f238 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f230:	2002      	movs	r0, #2
    f232:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f234:	2012      	movs	r0, #18
    f236:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f238:	9901      	ldr	r1, [sp, #4]
    f23a:	4668      	mov	r0, sp
    f23c:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    f240:	f88d 2008 	strb.w	r2, [sp, #8]
    f244:	9a02      	ldr	r2, [sp, #8]
    f246:	9202      	str	r2, [sp, #8]
    f248:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f24c:	f501 7198 	add.w	r1, r1, #304	; 0x130
    f250:	b10a      	cbz	r2, f256 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f252:	200c      	movs	r0, #12
    f254:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f256:	78a2      	ldrb	r2, [r4, #2]
    f258:	704a      	strb	r2, [r1, #1]
    f25a:	22ff      	movs	r2, #255	; 0xff
    f25c:	700a      	strb	r2, [r1, #0]
    f25e:	f7fe fc03 	bl	da68 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f262:	4628      	mov	r0, r5
    f264:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f266 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f266:	b510      	push	{r4, lr}
    f268:	4604      	mov	r4, r0
    f26a:	f7f7 fda1 	bl	6db0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f26e:	b108      	cbz	r0, f274 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f270:	200c      	movs	r0, #12
    f272:	bd10      	pop	{r4, pc}
    f274:	7820      	ldrb	r0, [r4, #0]
    f276:	b118      	cbz	r0, f280 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f278:	2801      	cmp	r0, #1
    f27a:	d001      	beq.n	f280 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f27c:	2012      	movs	r0, #18
    f27e:	bd10      	pop	{r4, pc}
    f280:	f7ff ff9c 	bl	f1bc <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f284:	1c61      	adds	r1, r4, #1
    f286:	f7f3 f83b 	bl	2300 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f28a:	b108      	cbz	r0, f290 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f28c:	2000      	movs	r0, #0
    f28e:	bd10      	pop	{r4, pc}
    f290:	2007      	movs	r0, #7
    f292:	bd10      	pop	{r4, pc}

0000f294 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f294:	b510      	push	{r4, lr}
    f296:	f7f7 fd8b 	bl	6db0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f29a:	b108      	cbz	r0, f2a0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f29c:	200c      	movs	r0, #12
    f29e:	bd10      	pop	{r4, pc}
    f2a0:	f7f3 f856 	bl	2350 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f2a4:	2000      	movs	r0, #0
    f2a6:	bd10      	pop	{r4, pc}

0000f2a8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f2a8:	b510      	push	{r4, lr}
    f2aa:	460b      	mov	r3, r1
    f2ac:	2201      	movs	r2, #1
    f2ae:	f100 0110 	add.w	r1, r0, #16
    f2b2:	f7fe f81d 	bl	d2f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f2b6:	2000      	movs	r0, #0
    f2b8:	bd10      	pop	{r4, pc}

0000f2ba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f2ba:	b510      	push	{r4, lr}
    f2bc:	8800      	ldrh	r0, [r0, #0]
    f2be:	2100      	movs	r1, #0
    f2c0:	f7fd fdb9 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f2c4:	b118      	cbz	r0, f2ce <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f2c6:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    f2ca:	b111      	cbz	r1, f2d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f2cc:	e007      	b.n	f2de <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f2ce:	2002      	movs	r0, #2
    f2d0:	bd10      	pop	{r4, pc}
    f2d2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f2d6:	2915      	cmp	r1, #21
    f2d8:	d003      	beq.n	f2e2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f2da:	2916      	cmp	r1, #22
    f2dc:	d001      	beq.n	f2e2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f2de:	200c      	movs	r0, #12
    f2e0:	bd10      	pop	{r4, pc}
    f2e2:	2102      	movs	r1, #2
    f2e4:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    f2e8:	2000      	movs	r0, #0
    f2ea:	bd10      	pop	{r4, pc}

0000f2ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2ee:	4605      	mov	r5, r0
    f2f0:	8800      	ldrh	r0, [r0, #0]
    f2f2:	2100      	movs	r1, #0
    f2f4:	f7fd fd9f 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f2f8:	0004      	movs	r4, r0
    f2fa:	d003      	beq.n	f304 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f2fc:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    f300:	b110      	cbz	r0, f308 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f302:	e011      	b.n	f328 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f304:	2002      	movs	r0, #2
    f306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f308:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    f30c:	2815      	cmp	r0, #21
    f30e:	d001      	beq.n	f314 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f310:	2816      	cmp	r0, #22
    f312:	d109      	bne.n	f328 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f314:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    f318:	f88d 0000 	strb.w	r0, [sp]
    f31c:	9800      	ldr	r0, [sp, #0]
    f31e:	9000      	str	r0, [sp, #0]
    f320:	f89d 0000 	ldrb.w	r0, [sp]
    f324:	2601      	movs	r6, #1
    f326:	b108      	cbz	r0, f32c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    f328:	200c      	movs	r0, #12
    f32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f32c:	2210      	movs	r2, #16
    f32e:	1ca9      	adds	r1, r5, #2
    f330:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    f334:	f001 f850 	bl	103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f338:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    f33c:	2000      	movs	r0, #0
    f33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f340 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f340:	b510      	push	{r4, lr}
    f342:	2108      	movs	r1, #8
    f344:	f7f1 fbf6 	bl	b34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f348:	2000      	movs	r0, #0
    f34a:	bd10      	pop	{r4, pc}

0000f34c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f34c:	b510      	push	{r4, lr}
    f34e:	4604      	mov	r4, r0
    f350:	f7f7 fbae 	bl	6ab0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f354:	f7fe ff2d 	bl	e1b2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f358:	f7f3 f998 	bl	268c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f35c:	7020      	strb	r0, [r4, #0]
    f35e:	2000      	movs	r0, #0
    f360:	bd10      	pop	{r4, pc}

0000f362 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f362:	21fb      	movs	r1, #251	; 0xfb
    f364:	8001      	strh	r1, [r0, #0]
    f366:	f640 0248 	movw	r2, #2120	; 0x848
    f36a:	8042      	strh	r2, [r0, #2]
    f36c:	8081      	strh	r1, [r0, #4]
    f36e:	80c2      	strh	r2, [r0, #6]
    f370:	2000      	movs	r0, #0
    f372:	4770      	bx	lr

0000f374 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f374:	b51c      	push	{r2, r3, r4, lr}
    f376:	8800      	ldrh	r0, [r0, #0]
    f378:	4669      	mov	r1, sp
    f37a:	f7fd ffd7 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f37e:	2800      	cmp	r0, #0
    f380:	d10d      	bne.n	f39e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f382:	f89d 0000 	ldrb.w	r0, [sp]
    f386:	9c01      	ldr	r4, [sp, #4]
    f388:	2801      	cmp	r0, #1
    f38a:	f504 7498 	add.w	r4, r4, #304	; 0x130
    f38e:	d103      	bne.n	f398 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    f390:	9801      	ldr	r0, [sp, #4]
    f392:	f000 fcd6 	bl	fd42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    f396:	b118      	cbz	r0, f3a0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    f398:	7ce0      	ldrb	r0, [r4, #19]
    f39a:	b118      	cbz	r0, f3a4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    f39c:	203a      	movs	r0, #58	; 0x3a
    f39e:	bd1c      	pop	{r2, r3, r4, pc}
    f3a0:	2002      	movs	r0, #2
    f3a2:	bd1c      	pop	{r2, r3, r4, pc}
    f3a4:	2001      	movs	r0, #1
    f3a6:	74e0      	strb	r0, [r4, #19]
    f3a8:	2000      	movs	r0, #0
    f3aa:	bd1c      	pop	{r2, r3, r4, pc}

0000f3ac <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f3ac:	b510      	push	{r4, lr}
    f3ae:	4604      	mov	r4, r0
    f3b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f3b4:	f000 fd01 	bl	fdba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    f3b8:	f7f3 f968 	bl	268c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f3bc:	7020      	strb	r0, [r4, #0]
    f3be:	f000 fcbd 	bl	fd3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f3c2:	f7f3 f963 	bl	268c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f3c6:	7060      	strb	r0, [r4, #1]
    f3c8:	2000      	movs	r0, #0
    f3ca:	bd10      	pop	{r4, pc}

0000f3cc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f3cc:	2108      	movs	r1, #8
    f3ce:	7001      	strb	r1, [r0, #0]
    f3d0:	2000      	movs	r0, #0
    f3d2:	4770      	bx	lr

0000f3d4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f3d4:	b510      	push	{r4, lr}
    f3d6:	4604      	mov	r4, r0
    f3d8:	f7f7 fcea 	bl	6db0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f3dc:	b108      	cbz	r0, f3e2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f3de:	200c      	movs	r0, #12
    f3e0:	bd10      	pop	{r4, pc}
    f3e2:	7820      	ldrb	r0, [r4, #0]
    f3e4:	b108      	cbz	r0, f3ea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f3e6:	2801      	cmp	r0, #1
    f3e8:	d107      	bne.n	f3fa <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f3ea:	f7ff fee7 	bl	f1bc <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f3ee:	1c61      	adds	r1, r4, #1
    f3f0:	f7fd ff73 	bl	d2da <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f3f4:	b108      	cbz	r0, f3fa <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f3f6:	2000      	movs	r0, #0
    f3f8:	bd10      	pop	{r4, pc}
    f3fa:	2012      	movs	r0, #18
    f3fc:	bd10      	pop	{r4, pc}

0000f3fe <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f3fe:	b51c      	push	{r2, r3, r4, lr}
    f400:	4604      	mov	r4, r0
    f402:	f7f7 fb55 	bl	6ab0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f406:	2000      	movs	r0, #0
    f408:	f88d 0002 	strb.w	r0, [sp, #2]
    f40c:	2103      	movs	r1, #3
    f40e:	f88d 1001 	strb.w	r1, [sp, #1]
    f412:	f814 1b01 	ldrb.w	r1, [r4], #1
    f416:	f88d 1003 	strb.w	r1, [sp, #3]
    f41a:	f88d 0000 	strb.w	r0, [sp]
    f41e:	4668      	mov	r0, sp
    f420:	9401      	str	r4, [sp, #4]
    f422:	f000 f9a2 	bl	f76a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f426:	bd1c      	pop	{r2, r3, r4, pc}

0000f428 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f42a:	4605      	mov	r5, r0
    f42c:	f7f7 fb40 	bl	6ab0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f430:	4606      	mov	r6, r0
    f432:	7828      	ldrb	r0, [r5, #0]
    f434:	2400      	movs	r4, #0
    f436:	b160      	cbz	r0, f452 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f438:	f88d 4000 	strb.w	r4, [sp]
    f43c:	2001      	movs	r0, #1
    f43e:	f10d 0101 	add.w	r1, sp, #1
    f442:	f7f2 f967 	bl	1714 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f446:	b120      	cbz	r0, f452 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f448:	4668      	mov	r0, sp
    f44a:	f000 f897 	bl	f57c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f44e:	2800      	cmp	r0, #0
    f450:	d112      	bne.n	f478 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f452:	f88d 400c 	strb.w	r4, [sp, #12]
    f456:	4630      	mov	r0, r6
    f458:	f7fe fea1 	bl	e19e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f45c:	b118      	cbz	r0, f466 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f45e:	2080      	movs	r0, #128	; 0x80
    f460:	f8ad 000d 	strh.w	r0, [sp, #13]
    f464:	e001      	b.n	f46a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f466:	f8ad 400d 	strh.w	r4, [sp, #13]
    f46a:	f88d 400f 	strb.w	r4, [sp, #15]
    f46e:	7828      	ldrb	r0, [r5, #0]
    f470:	2801      	cmp	r0, #1
    f472:	d003      	beq.n	f47c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f474:	b138      	cbz	r0, f486 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f476:	2012      	movs	r0, #18
    f478:	b004      	add	sp, #16
    f47a:	bd70      	pop	{r4, r5, r6, pc}
    f47c:	a903      	add	r1, sp, #12
    f47e:	4630      	mov	r0, r6
    f480:	f7f7 fb32 	bl	6ae8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f484:	e7f8      	b.n	f478 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f486:	4630      	mov	r0, r6
    f488:	f000 fc71 	bl	fd6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f48c:	e7f4      	b.n	f478 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f48e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f48e:	b530      	push	{r4, r5, lr}
    f490:	b08b      	sub	sp, #44	; 0x2c
    f492:	4604      	mov	r4, r0
    f494:	f7f7 fb0c 	bl	6ab0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f498:	4602      	mov	r2, r0
    f49a:	7920      	ldrb	r0, [r4, #4]
    f49c:	2804      	cmp	r0, #4
    f49e:	d803      	bhi.n	f4a8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f4a0:	8860      	ldrh	r0, [r4, #2]
    f4a2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f4a6:	d902      	bls.n	f4ae <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f4a8:	2012      	movs	r0, #18
    f4aa:	b00b      	add	sp, #44	; 0x2c
    f4ac:	bd30      	pop	{r4, r5, pc}
    f4ae:	2500      	movs	r5, #0
    f4b0:	f88d 5004 	strb.w	r5, [sp, #4]
    f4b4:	7921      	ldrb	r1, [r4, #4]
    f4b6:	9500      	str	r5, [sp, #0]
    f4b8:	f89d 0000 	ldrb.w	r0, [sp]
    f4bc:	2905      	cmp	r1, #5
    f4be:	f040 0010 	orr.w	r0, r0, #16
    f4c2:	f88d 0000 	strb.w	r0, [sp]
    f4c6:	d254      	bcs.n	f572 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f4c8:	e8df f001 	tbb	[pc, r1]
    f4cc:	11050803 	.word	0x11050803
    f4d0:	000b      	.short	0x000b
    f4d2:	f040 0001 	orr.w	r0, r0, #1
    f4d6:	f040 0002 	orr.w	r0, r0, #2
    f4da:	e006      	b.n	f4ea <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f4dc:	f040 0009 	orr.w	r0, r0, #9
    f4e0:	e001      	b.n	f4e6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f4e2:	f040 0001 	orr.w	r0, r0, #1
    f4e6:	f040 0004 	orr.w	r0, r0, #4
    f4ea:	f88d 0000 	strb.w	r0, [sp]
    f4ee:	f8bd 0000 	ldrh.w	r0, [sp]
    f4f2:	9000      	str	r0, [sp, #0]
    f4f4:	f8bd 0000 	ldrh.w	r0, [sp]
    f4f8:	f8ad 0005 	strh.w	r0, [sp, #5]
    f4fc:	8821      	ldrh	r1, [r4, #0]
    f4fe:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f502:	f361 201f 	bfi	r0, r1, #8, #24
    f506:	f8cd 0006 	str.w	r0, [sp, #6]
    f50a:	8861      	ldrh	r1, [r4, #2]
    f50c:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f510:	f361 201f 	bfi	r0, r1, #8, #24
    f514:	f8cd 0009 	str.w	r0, [sp, #9]
    f518:	7b60      	ldrb	r0, [r4, #13]
    f51a:	f88d 000d 	strb.w	r0, [sp, #13]
    f51e:	7960      	ldrb	r0, [r4, #5]
    f520:	f88d 000e 	strb.w	r0, [sp, #14]
    f524:	79a0      	ldrb	r0, [r4, #6]
    f526:	f88d 000f 	strb.w	r0, [sp, #15]
    f52a:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f52e:	9004      	str	r0, [sp, #16]
    f530:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f534:	f8ad 0014 	strh.w	r0, [sp, #20]
    f538:	7ba0      	ldrb	r0, [r4, #14]
    f53a:	f88d 0016 	strb.w	r0, [sp, #22]
    f53e:	207f      	movs	r0, #127	; 0x7f
    f540:	f88d 0017 	strb.w	r0, [sp, #23]
    f544:	2001      	movs	r0, #1
    f546:	f88d 0018 	strb.w	r0, [sp, #24]
    f54a:	f88d 5019 	strb.w	r5, [sp, #25]
    f54e:	f88d 001a 	strb.w	r0, [sp, #26]
    f552:	f88d 501b 	strb.w	r5, [sp, #27]
    f556:	4610      	mov	r0, r2
    f558:	f7fe fe41 	bl	e1de <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f55c:	f88d 001c 	strb.w	r0, [sp, #28]
    f560:	f88d 501d 	strb.w	r5, [sp, #29]
    f564:	f88d 501e 	strb.w	r5, [sp, #30]
    f568:	a909      	add	r1, sp, #36	; 0x24
    f56a:	a801      	add	r0, sp, #4
    f56c:	f7f7 f936 	bl	67dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f570:	e79b      	b.n	f4aa <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f572:	f241 215b 	movw	r1, #4699	; 0x125b
    f576:	2039      	movs	r0, #57	; 0x39
    f578:	f7f1 fa2e 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f57c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f57c:	b570      	push	{r4, r5, r6, lr}
    f57e:	4604      	mov	r4, r0
    f580:	7800      	ldrb	r0, [r0, #0]
    f582:	2101      	movs	r1, #1
    f584:	f7fd fc57 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f588:	0005      	movs	r5, r0
    f58a:	d007      	beq.n	f59c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f58c:	f7fe ffe4 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f590:	b160      	cbz	r0, f5ac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f592:	4628      	mov	r0, r5
    f594:	f7fe fe09 	bl	e1aa <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f598:	b110      	cbz	r0, f5a0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f59a:	e005      	b.n	f5a8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f59c:	2042      	movs	r0, #66	; 0x42
    f59e:	bd70      	pop	{r4, r5, r6, pc}
    f5a0:	4628      	mov	r0, r5
    f5a2:	f7fe fdf8 	bl	e196 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f5a6:	b108      	cbz	r0, f5ac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f5a8:	200c      	movs	r0, #12
    f5aa:	bd70      	pop	{r4, r5, r6, pc}
    f5ac:	1c61      	adds	r1, r4, #1
    f5ae:	4628      	mov	r0, r5
    f5b0:	f7fe fe0d 	bl	e1ce <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f5b4:	2000      	movs	r0, #0
    f5b6:	bd70      	pop	{r4, r5, r6, pc}

0000f5b8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f5b8:	b50e      	push	{r1, r2, r3, lr}
    f5ba:	8882      	ldrh	r2, [r0, #4]
    f5bc:	f244 2390 	movw	r3, #17040	; 0x4290
    f5c0:	429a      	cmp	r2, r3
    f5c2:	d901      	bls.n	f5c8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f5c4:	2012      	movs	r0, #18
    f5c6:	bd0e      	pop	{r1, r2, r3, pc}
    f5c8:	f640 0348 	movw	r3, #2120	; 0x848
    f5cc:	429a      	cmp	r2, r3
    f5ce:	d300      	bcc.n	f5d2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f5d0:	461a      	mov	r2, r3
    f5d2:	8803      	ldrh	r3, [r0, #0]
    f5d4:	f8ad 3000 	strh.w	r3, [sp]
    f5d8:	8843      	ldrh	r3, [r0, #2]
    f5da:	f8ad 3002 	strh.w	r3, [sp, #2]
    f5de:	f8ad 2004 	strh.w	r2, [sp, #4]
    f5e2:	8843      	ldrh	r3, [r0, #2]
    f5e4:	f8ad 3006 	strh.w	r3, [sp, #6]
    f5e8:	f8ad 2008 	strh.w	r2, [sp, #8]
    f5ec:	8800      	ldrh	r0, [r0, #0]
    f5ee:	8008      	strh	r0, [r1, #0]
    f5f0:	4668      	mov	r0, sp
    f5f2:	f7f7 fb59 	bl	6ca8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    f5f6:	bd0e      	pop	{r1, r2, r3, pc}

0000f5f8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    f5f8:	b510      	push	{r4, lr}
    f5fa:	4604      	mov	r4, r0
    f5fc:	f7f7 fa58 	bl	6ab0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f600:	7861      	ldrb	r1, [r4, #1]
    f602:	f3c1 0240 	ubfx	r2, r1, #1, #1
    f606:	f001 0101 	and.w	r1, r1, #1
    f60a:	f7fe fddc 	bl	e1c6 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    f60e:	2000      	movs	r0, #0
    f610:	bd10      	pop	{r4, pc}

0000f612 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f612:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f614:	4604      	mov	r4, r0
    f616:	f10d 0007 	add.w	r0, sp, #7
    f61a:	9000      	str	r0, [sp, #0]
    f61c:	7922      	ldrb	r2, [r4, #4]
    f61e:	78e1      	ldrb	r1, [r4, #3]
    f620:	78a0      	ldrb	r0, [r4, #2]
    f622:	f10d 0306 	add.w	r3, sp, #6
    f626:	f000 fbd0 	bl	fdca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    f62a:	2800      	cmp	r0, #0
    f62c:	d109      	bne.n	f642 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f62e:	8820      	ldrh	r0, [r4, #0]
    f630:	f8ad 0004 	strh.w	r0, [sp, #4]
    f634:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f638:	f8ad 0008 	strh.w	r0, [sp, #8]
    f63c:	a801      	add	r0, sp, #4
    f63e:	f000 f94f 	bl	f8e0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f642:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f644 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f644:	b510      	push	{r4, lr}
    f646:	4604      	mov	r4, r0
    f648:	2001      	movs	r0, #1
    f64a:	f000 fa55 	bl	faf8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f64e:	b128      	cbz	r0, f65c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f650:	4621      	mov	r1, r4
    f652:	2001      	movs	r0, #1
    f654:	f7f2 f876 	bl	1744 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f658:	2000      	movs	r0, #0
    f65a:	bd10      	pop	{r4, pc}
    f65c:	200c      	movs	r0, #12
    f65e:	bd10      	pop	{r4, pc}

0000f660 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f660:	b51c      	push	{r2, r3, r4, lr}
    f662:	4604      	mov	r4, r0
    f664:	f7f7 fa24 	bl	6ab0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f668:	2000      	movs	r0, #0
    f66a:	f88d 0000 	strb.w	r0, [sp]
    f66e:	f88d 0002 	strb.w	r0, [sp, #2]
    f672:	2003      	movs	r0, #3
    f674:	f88d 0001 	strb.w	r0, [sp, #1]
    f678:	f814 0b01 	ldrb.w	r0, [r4], #1
    f67c:	f88d 0003 	strb.w	r0, [sp, #3]
    f680:	4668      	mov	r0, sp
    f682:	9401      	str	r4, [sp, #4]
    f684:	f000 f8da 	bl	f83c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f688:	bd1c      	pop	{r2, r3, r4, pc}

0000f68a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f68a:	b51c      	push	{r2, r3, r4, lr}
    f68c:	8801      	ldrh	r1, [r0, #0]
    f68e:	f8ad 1000 	strh.w	r1, [sp]
    f692:	8841      	ldrh	r1, [r0, #2]
    f694:	f8ad 1002 	strh.w	r1, [sp, #2]
    f698:	8801      	ldrh	r1, [r0, #0]
    f69a:	f8ad 1004 	strh.w	r1, [sp, #4]
    f69e:	8840      	ldrh	r0, [r0, #2]
    f6a0:	f8ad 0006 	strh.w	r0, [sp, #6]
    f6a4:	4668      	mov	r0, sp
    f6a6:	f7f7 fb9f 	bl	6de8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
    f6aa:	bd1c      	pop	{r2, r3, r4, pc}

0000f6ac <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f6ac:	b510      	push	{r4, lr}
    f6ae:	f7f2 f86d 	bl	178c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f6b2:	2000      	movs	r0, #0
    f6b4:	bd10      	pop	{r4, pc}

0000f6b6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    f6b6:	b510      	push	{r4, lr}
    f6b8:	460c      	mov	r4, r1
    f6ba:	2100      	movs	r1, #0
    f6bc:	f7fd fbbb 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f6c0:	b118      	cbz	r0, f6ca <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    f6c2:	2c02      	cmp	r4, #2
    f6c4:	d903      	bls.n	f6ce <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    f6c6:	2012      	movs	r0, #18
    f6c8:	bd10      	pop	{r4, pc}
    f6ca:	2002      	movs	r0, #2
    f6cc:	bd10      	pop	{r4, pc}
    f6ce:	f014 0101 	ands.w	r1, r4, #1
    f6d2:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    f6d6:	f3c4 0240 	ubfx	r2, r4, #1, #1
    f6da:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    f6de:	d004      	beq.n	f6ea <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f6e0:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    f6e4:	b109      	cbz	r1, f6ea <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f6e6:	f7fe ff3a 	bl	e55e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f6ea:	2000      	movs	r0, #0
    f6ec:	bd10      	pop	{r4, pc}

0000f6ee <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f6ee:	b51c      	push	{r2, r3, r4, lr}
    f6f0:	460c      	mov	r4, r1
    f6f2:	4669      	mov	r1, sp
    f6f4:	f7fd fe1a 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6f8:	2800      	cmp	r0, #0
    f6fa:	d105      	bne.n	f708 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f6fc:	2100      	movs	r1, #0
    f6fe:	4622      	mov	r2, r4
    f700:	9801      	ldr	r0, [sp, #4]
    f702:	f000 fac5 	bl	fc90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    f706:	2000      	movs	r0, #0
    f708:	bd1c      	pop	{r2, r3, r4, pc}

0000f70a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    f70a:	b510      	push	{r4, lr}
    f70c:	4604      	mov	r4, r0
    f70e:	7800      	ldrb	r0, [r0, #0]
    f710:	28ff      	cmp	r0, #255	; 0xff
    f712:	d009      	beq.n	f728 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    f714:	2101      	movs	r1, #1
    f716:	f7fd fb8e 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f71a:	b118      	cbz	r0, f724 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    f71c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    f720:	8441      	strh	r1, [r0, #34]	; 0x22
    f722:	e005      	b.n	f730 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    f724:	2042      	movs	r0, #66	; 0x42
    f726:	bd10      	pop	{r4, pc}
    f728:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f72c:	f7f4 fcd8 	bl	40e0 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    f730:	2000      	movs	r0, #0
    f732:	bd10      	pop	{r4, pc}

0000f734 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f734:	b510      	push	{r4, lr}
    f736:	4604      	mov	r4, r0
    f738:	f7f7 fb96 	bl	6e68 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    f73c:	b118      	cbz	r0, f746 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    f73e:	2000      	movs	r0, #0
    f740:	f000 f9da 	bl	faf8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f744:	b128      	cbz	r0, f752 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    f746:	4621      	mov	r1, r4
    f748:	2000      	movs	r0, #0
    f74a:	f7f1 fffb 	bl	1744 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f74e:	2000      	movs	r0, #0
    f750:	bd10      	pop	{r4, pc}
    f752:	200c      	movs	r0, #12
    f754:	bd10      	pop	{r4, pc}

0000f756 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f756:	b510      	push	{r4, lr}
    f758:	7800      	ldrb	r0, [r0, #0]
    f75a:	b100      	cbz	r0, f75e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    f75c:	2001      	movs	r0, #1
    f75e:	f7f4 fce9 	bl	4134 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f762:	2000      	movs	r0, #0
    f764:	bd10      	pop	{r4, pc}

0000f766 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f766:	f7f7 ba9f 	b.w	6ca8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000f76a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f76a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f76e:	4606      	mov	r6, r0
    f770:	7845      	ldrb	r5, [r0, #1]
    f772:	7800      	ldrb	r0, [r0, #0]
    f774:	2101      	movs	r1, #1
    f776:	f7fd fb5e 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f77a:	0004      	movs	r4, r0
    f77c:	d01e      	beq.n	f7bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f77e:	f7fe fcdd 	bl	e13c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f782:	78f1      	ldrb	r1, [r6, #3]
    f784:	4281      	cmp	r1, r0
    f786:	d800      	bhi.n	f78a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f788:	4608      	mov	r0, r1
    f78a:	4607      	mov	r7, r0
    f78c:	2d04      	cmp	r5, #4
    f78e:	d018      	beq.n	f7c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f790:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f792:	f7fd fc9f 	bl	d0d4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f796:	4438      	add	r0, r7
    f798:	b281      	uxth	r1, r0
    f79a:	4620      	mov	r0, r4
    f79c:	2201      	movs	r2, #1
    f79e:	f000 f9bd 	bl	fb1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f7a2:	2800      	cmp	r0, #0
    f7a4:	d10b      	bne.n	f7be <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f7a6:	2d03      	cmp	r5, #3
    f7a8:	d000      	beq.n	f7ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f7aa:	b1df      	cbz	r7, f7e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f7ac:	4620      	mov	r0, r4
    f7ae:	f7fe fcfa 	bl	e1a6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f7b2:	7871      	ldrb	r1, [r6, #1]
    f7b4:	2903      	cmp	r1, #3
    f7b6:	d010      	beq.n	f7da <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f7b8:	b9a0      	cbnz	r0, f7e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f7ba:	e004      	b.n	f7c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f7bc:	2042      	movs	r0, #66	; 0x42
    f7be:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f7c2:	b97f      	cbnz	r7, f7e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f7c4:	e7f2      	b.n	f7ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f7c6:	2904      	cmp	r1, #4
    f7c8:	d107      	bne.n	f7da <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f7ca:	4620      	mov	r0, r4
    f7cc:	f7fe fec4 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f7d0:	b140      	cbz	r0, f7e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f7d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f7d4:	f7fd fc45 	bl	d062 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f7d8:	b120      	cbz	r0, f7e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f7da:	2d01      	cmp	r5, #1
    f7dc:	d004      	beq.n	f7e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f7de:	2d03      	cmp	r5, #3
    f7e0:	d002      	beq.n	f7e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f7e2:	e00e      	b.n	f802 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f7e4:	2012      	movs	r0, #18
    f7e6:	e7ea      	b.n	f7be <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f7e8:	4620      	mov	r0, r4
    f7ea:	f7fe fcdc 	bl	e1a6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f7ee:	b108      	cbz	r0, f7f4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f7f0:	2200      	movs	r2, #0
    f7f2:	e002      	b.n	f7fa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f7f4:	2d01      	cmp	r5, #1
    f7f6:	d013      	beq.n	f820 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f7f8:	2201      	movs	r2, #1
    f7fa:	4668      	mov	r0, sp
    f7fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f7fe:	f7fd fbcc 	bl	cf9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f802:	2d04      	cmp	r5, #4
    f804:	d018      	beq.n	f838 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f806:	6872      	ldr	r2, [r6, #4]
    f808:	463b      	mov	r3, r7
    f80a:	2101      	movs	r1, #1
    f80c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f80e:	f7fd fbf8 	bl	d002 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f812:	b138      	cbz	r0, f824 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f814:	7870      	ldrb	r0, [r6, #1]
    f816:	2802      	cmp	r0, #2
    f818:	d006      	beq.n	f828 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f81a:	2803      	cmp	r0, #3
    f81c:	d004      	beq.n	f828 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f81e:	e00b      	b.n	f838 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f820:	2202      	movs	r2, #2
    f822:	e7ea      	b.n	f7fa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f824:	2007      	movs	r0, #7
    f826:	e7ca      	b.n	f7be <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f828:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f82a:	f7fd fc53 	bl	d0d4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f82e:	4602      	mov	r2, r0
    f830:	2101      	movs	r1, #1
    f832:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f834:	f7fd fc2b 	bl	d08e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f838:	2000      	movs	r0, #0
    f83a:	e7c0      	b.n	f7be <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f83c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f83c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f840:	4607      	mov	r7, r0
    f842:	7845      	ldrb	r5, [r0, #1]
    f844:	78c6      	ldrb	r6, [r0, #3]
    f846:	7800      	ldrb	r0, [r0, #0]
    f848:	2101      	movs	r1, #1
    f84a:	f7fd faf4 	bl	ce36 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f84e:	0004      	movs	r4, r0
    f850:	d003      	beq.n	f85a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f852:	f7fe fcaa 	bl	e1aa <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f856:	b118      	cbz	r0, f860 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f858:	e003      	b.n	f862 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f85a:	2042      	movs	r0, #66	; 0x42
    f85c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f860:	2600      	movs	r6, #0
    f862:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f864:	f7fd fc3a 	bl	d0dc <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f868:	4430      	add	r0, r6
    f86a:	b281      	uxth	r1, r0
    f86c:	4688      	mov	r8, r1
    f86e:	4620      	mov	r0, r4
    f870:	2201      	movs	r2, #1
    f872:	f000 f953 	bl	fb1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f876:	2800      	cmp	r0, #0
    f878:	d1f0      	bne.n	f85c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f87a:	2d04      	cmp	r5, #4
    f87c:	d008      	beq.n	f890 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f87e:	2d03      	cmp	r5, #3
    f880:	d00a      	beq.n	f898 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f882:	b12e      	cbz	r6, f890 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f884:	4620      	mov	r0, r4
    f886:	f7fe fe67 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f88a:	b118      	cbz	r0, f894 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f88c:	200c      	movs	r0, #12
    f88e:	e7e5      	b.n	f85c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f890:	2012      	movs	r0, #18
    f892:	e7e3      	b.n	f85c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f894:	2d01      	cmp	r5, #1
    f896:	d10c      	bne.n	f8b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f898:	4620      	mov	r0, r4
    f89a:	f7fe fc84 	bl	e1a6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f89e:	b108      	cbz	r0, f8a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f8a0:	2204      	movs	r2, #4
    f8a2:	e002      	b.n	f8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f8a4:	2d01      	cmp	r5, #1
    f8a6:	d010      	beq.n	f8ca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f8a8:	2205      	movs	r2, #5
    f8aa:	4668      	mov	r0, sp
    f8ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f8ae:	f7fd fb74 	bl	cf9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f8b2:	687a      	ldr	r2, [r7, #4]
    f8b4:	4633      	mov	r3, r6
    f8b6:	2100      	movs	r1, #0
    f8b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8ba:	f7fd fba2 	bl	d002 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f8be:	b130      	cbz	r0, f8ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    f8c0:	2d02      	cmp	r5, #2
    f8c2:	d006      	beq.n	f8d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f8c4:	2d03      	cmp	r5, #3
    f8c6:	d004      	beq.n	f8d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f8c8:	e008      	b.n	f8dc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    f8ca:	2206      	movs	r2, #6
    f8cc:	e7ed      	b.n	f8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f8ce:	2007      	movs	r0, #7
    f8d0:	e7c4      	b.n	f85c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f8d2:	4642      	mov	r2, r8
    f8d4:	2100      	movs	r1, #0
    f8d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8d8:	f7fd fbd9 	bl	d08e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f8dc:	2000      	movs	r0, #0
    f8de:	e7bd      	b.n	f85c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000f8e0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f8e0:	b510      	push	{r4, lr}
    f8e2:	4604      	mov	r4, r0
    f8e4:	8880      	ldrh	r0, [r0, #4]
    f8e6:	b128      	cbz	r0, f8f4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f8e8:	2801      	cmp	r0, #1
    f8ea:	d003      	beq.n	f8f4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f8ec:	2802      	cmp	r0, #2
    f8ee:	d001      	beq.n	f8f4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f8f0:	2012      	movs	r0, #18
    f8f2:	bd10      	pop	{r4, pc}
    f8f4:	78e0      	ldrb	r0, [r4, #3]
    f8f6:	f000 f9a8 	bl	fc4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    f8fa:	b148      	cbz	r0, f910 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f8fc:	78a0      	ldrb	r0, [r4, #2]
    f8fe:	f000 f9a4 	bl	fc4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    f902:	b128      	cbz	r0, f910 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f904:	4620      	mov	r0, r4
    f906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f90a:	2101      	movs	r1, #1
    f90c:	f000 b862 	b.w	f9d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f910:	2011      	movs	r0, #17
    f912:	bd10      	pop	{r4, pc}

0000f914 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f914:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f916:	460c      	mov	r4, r1
    f918:	4605      	mov	r5, r0
    f91a:	8800      	ldrh	r0, [r0, #0]
    f91c:	4669      	mov	r1, sp
    f91e:	f7fd fd05 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f922:	2800      	cmp	r0, #0
    f924:	d106      	bne.n	f934 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f926:	9801      	ldr	r0, [sp, #4]
    f928:	8829      	ldrh	r1, [r5, #0]
    f92a:	8021      	strh	r1, [r4, #0]
    f92c:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
    f930:	8060      	strh	r0, [r4, #2]
    f932:	2000      	movs	r0, #0
    f934:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f936 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f936:	b510      	push	{r4, lr}
    f938:	4604      	mov	r4, r0
    f93a:	4601      	mov	r1, r0
    f93c:	2000      	movs	r0, #0
    f93e:	f7f1 fee9 	bl	1714 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f942:	b910      	cbnz	r0, f94a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f944:	2000      	movs	r0, #0
    f946:	6020      	str	r0, [r4, #0]
    f948:	80a0      	strh	r0, [r4, #4]
    f94a:	2000      	movs	r0, #0
    f94c:	bd10      	pop	{r4, pc}

0000f94e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f94e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f950:	460c      	mov	r4, r1
    f952:	4605      	mov	r5, r0
    f954:	8800      	ldrh	r0, [r0, #0]
    f956:	4669      	mov	r1, sp
    f958:	f7fd fce8 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f95c:	b108      	cbz	r0, f962 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f95e:	2002      	movs	r0, #2
    f960:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f962:	78a8      	ldrb	r0, [r5, #2]
    f964:	b158      	cbz	r0, f97e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    f966:	f000 f9e9 	bl	fd3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f96a:	70a0      	strb	r0, [r4, #2]
    f96c:	8828      	ldrh	r0, [r5, #0]
    f96e:	8020      	strh	r0, [r4, #0]
    f970:	f994 0002 	ldrsb.w	r0, [r4, #2]
    f974:	f7f2 fe8a 	bl	268c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f978:	70a0      	strb	r0, [r4, #2]
    f97a:	2000      	movs	r0, #0
    f97c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f97e:	9801      	ldr	r0, [sp, #4]
    f980:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f984:	e7f1      	b.n	f96a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f986 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f986:	b510      	push	{r4, lr}
    f988:	f7f7 fa74 	bl	6e74 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f98c:	2000      	movs	r0, #0
    f98e:	bd10      	pop	{r4, pc}

0000f990 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f990:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f994:	4604      	mov	r4, r0
    f996:	8840      	ldrh	r0, [r0, #2]
    f998:	460d      	mov	r5, r1
    f99a:	b1b8      	cbz	r0, f9cc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f99c:	8820      	ldrh	r0, [r4, #0]
    f99e:	4669      	mov	r1, sp
    f9a0:	f7fd fcc4 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9a4:	2800      	cmp	r0, #0
    f9a6:	d10f      	bne.n	f9c8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f9a8:	8820      	ldrh	r0, [r4, #0]
    f9aa:	8028      	strh	r0, [r5, #0]
    f9ac:	9e01      	ldr	r6, [sp, #4]
    f9ae:	f106 0510 	add.w	r5, r6, #16
    f9b2:	3680      	adds	r6, #128	; 0x80
    f9b4:	682f      	ldr	r7, [r5, #0]
    f9b6:	8862      	ldrh	r2, [r4, #2]
    f9b8:	4639      	mov	r1, r7
    f9ba:	4630      	mov	r0, r6
    f9bc:	f7fd fde7 	bl	d58e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f9c0:	6828      	ldr	r0, [r5, #0]
    f9c2:	42b8      	cmp	r0, r7
    f9c4:	d1f6      	bne.n	f9b4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f9c6:	2000      	movs	r0, #0
    f9c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f9cc:	2012      	movs	r0, #18
    f9ce:	e7fb      	b.n	f9c8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f9d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f9d0:	f000 b863 	b.w	fa9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f9d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9d8:	b086      	sub	sp, #24
    f9da:	4689      	mov	r9, r1
    f9dc:	4607      	mov	r7, r0
    f9de:	8800      	ldrh	r0, [r0, #0]
    f9e0:	a901      	add	r1, sp, #4
    f9e2:	f7fd fca3 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9e6:	2800      	cmp	r0, #0
    f9e8:	d136      	bne.n	fa58 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    f9ea:	9802      	ldr	r0, [sp, #8]
    f9ec:	4601      	mov	r1, r0
    f9ee:	4688      	mov	r8, r1
    f9f0:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
    f9f4:	f500 7498 	add.w	r4, r0, #304	; 0x130
    f9f8:	f88d 1000 	strb.w	r1, [sp]
    f9fc:	9900      	ldr	r1, [sp, #0]
    f9fe:	9100      	str	r1, [sp, #0]
    fa00:	f89d 1000 	ldrb.w	r1, [sp]
    fa04:	3080      	adds	r0, #128	; 0x80
    fa06:	b109      	cbz	r1, fa0c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    fa08:	2601      	movs	r6, #1
    fa0a:	e000      	b.n	fa0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    fa0c:	2600      	movs	r6, #0
    fa0e:	7f81      	ldrb	r1, [r0, #30]
    fa10:	2922      	cmp	r1, #34	; 0x22
    fa12:	d100      	bne.n	fa16 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fa14:	b13e      	cbz	r6, fa26 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    fa16:	2500      	movs	r5, #0
    fa18:	306c      	adds	r0, #108	; 0x6c
    fa1a:	2108      	movs	r1, #8
    fa1c:	4682      	mov	sl, r0
    fa1e:	f7ff fbc4 	bl	f1aa <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fa22:	b110      	cbz	r0, fa2a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    fa24:	e007      	b.n	fa36 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fa26:	2501      	movs	r5, #1
    fa28:	e7f6      	b.n	fa18 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fa2a:	210b      	movs	r1, #11
    fa2c:	4650      	mov	r0, sl
    fa2e:	f7ff fbbc 	bl	f1aa <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fa32:	b900      	cbnz	r0, fa36 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fa34:	b17d      	cbz	r5, fa56 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    fa36:	a804      	add	r0, sp, #16
    fa38:	9000      	str	r0, [sp, #0]
    fa3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fa3e:	ab03      	add	r3, sp, #12
    fa40:	463a      	mov	r2, r7
    fa42:	4641      	mov	r1, r8
    fa44:	f000 f95a 	bl	fcfc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    fa48:	0005      	movs	r5, r0
    fa4a:	d105      	bne.n	fa58 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fa4c:	340c      	adds	r4, #12
    fa4e:	20ff      	movs	r0, #255	; 0xff
    fa50:	7060      	strb	r0, [r4, #1]
    fa52:	b936      	cbnz	r6, fa62 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fa54:	e003      	b.n	fa5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    fa56:	201a      	movs	r0, #26
    fa58:	b006      	add	sp, #24
    fa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa5e:	7820      	ldrb	r0, [r4, #0]
    fa60:	b108      	cbz	r0, fa66 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    fa62:	253a      	movs	r5, #58	; 0x3a
    fa64:	e012      	b.n	fa8c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    fa66:	f884 9000 	strb.w	r9, [r4]
    fa6a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fa6e:	70a0      	strb	r0, [r4, #2]
    fa70:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fa74:	70e1      	strb	r1, [r4, #3]
    fa76:	f88d 0000 	strb.w	r0, [sp]
    fa7a:	f88d 1001 	strb.w	r1, [sp, #1]
    fa7e:	88b8      	ldrh	r0, [r7, #4]
    fa80:	f8ad 0002 	strh.w	r0, [sp, #2]
    fa84:	4669      	mov	r1, sp
    fa86:	4640      	mov	r0, r8
    fa88:	f7fd fd20 	bl	d4cc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fa8c:	2000      	movs	r0, #0
    fa8e:	7060      	strb	r0, [r4, #1]
    fa90:	4628      	mov	r0, r5
    fa92:	e7e1      	b.n	fa58 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000fa94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fa94:	2008      	movs	r0, #8
    fa96:	f7f7 ba55 	b.w	6f44 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fa9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fa9a:	b510      	push	{r4, lr}
    fa9c:	f7fd fba9 	bl	d1f2 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    faa0:	f7f2 fbd4 	bl	224c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    faa4:	f7f7 fa70 	bl	6f88 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    faa8:	f7fe f813 	bl	dad2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    faac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fab0:	f7f6 bfde 	b.w	6a70 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

0000fab4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
    fab4:	f7f5 b86e 	b.w	4b94 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    fab8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fabc:	4288      	cmp	r0, r1
    fabe:	d303      	bcc.n	fac8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
    fac0:	f640 0148 	movw	r1, #2120	; 0x848
    fac4:	4288      	cmp	r0, r1
    fac6:	d300      	bcc.n	faca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
    fac8:	4608      	mov	r0, r1
    faca:	b280      	uxth	r0, r0
    facc:	4770      	bx	lr
    face:	07c1      	lsls	r1, r0, #31
    fad0:	d001      	beq.n	fad6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
    fad2:	2001      	movs	r0, #1
    fad4:	4770      	bx	lr
    fad6:	0780      	lsls	r0, r0, #30
    fad8:	d501      	bpl.n	fade <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
    fada:	2002      	movs	r0, #2
    fadc:	4770      	bx	lr
    fade:	2000      	movs	r0, #0
    fae0:	4770      	bx	lr
    fae2:	b510      	push	{r4, lr}
    fae4:	2801      	cmp	r0, #1
    fae6:	d006      	beq.n	faf6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    fae8:	2802      	cmp	r0, #2
    faea:	d004      	beq.n	faf6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    faec:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    faf0:	2006      	movs	r0, #6
    faf2:	f7f0 ff71 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faf6:	bd10      	pop	{r4, pc}
    faf8:	b510      	push	{r4, lr}
    fafa:	f7f6 ff37 	bl	696c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
    fafe:	b158      	cbz	r0, fb18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fb00:	f7f6 ffd6 	bl	6ab0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb04:	4604      	mov	r4, r0
    fb06:	f7fe fb50 	bl	e1aa <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fb0a:	b918      	cbnz	r0, fb14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
    fb0c:	4620      	mov	r0, r4
    fb0e:	f7fe fb42 	bl	e196 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fb12:	b108      	cbz	r0, fb18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fb14:	2000      	movs	r0, #0
    fb16:	bd10      	pop	{r4, pc}
    fb18:	2001      	movs	r0, #1
    fb1a:	bd10      	pop	{r4, pc}
    fb1c:	b570      	push	{r4, r5, r6, lr}
    fb1e:	460c      	mov	r4, r1
    fb20:	4605      	mov	r5, r0
    fb22:	b112      	cbz	r2, fb2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
    fb24:	291f      	cmp	r1, #31
    fb26:	d80c      	bhi.n	fb42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
    fb28:	e016      	b.n	fb58 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
    fb2a:	f7f1 fc33 	bl	1394 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    fb2e:	42a0      	cmp	r0, r4
    fb30:	d201      	bcs.n	fb36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
    fb32:	2007      	movs	r0, #7
    fb34:	bd70      	pop	{r4, r5, r6, pc}
    fb36:	4628      	mov	r0, r5
    fb38:	f7fe fb35 	bl	e1a6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fb3c:	b118      	cbz	r0, fb46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fb3e:	2c1f      	cmp	r4, #31
    fb40:	d901      	bls.n	fb46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fb42:	2012      	movs	r0, #18
    fb44:	bd70      	pop	{r4, r5, r6, pc}
    fb46:	4628      	mov	r0, r5
    fb48:	f7fe fb36 	bl	e1b8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fb4c:	b130      	cbz	r0, fb5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
    fb4e:	4621      	mov	r1, r4
    fb50:	4628      	mov	r0, r5
    fb52:	f7fe faff 	bl	e154 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    fb56:	b118      	cbz	r0, fb60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
    fb58:	2000      	movs	r0, #0
    fb5a:	bd70      	pop	{r4, r5, r6, pc}
    fb5c:	2042      	movs	r0, #66	; 0x42
    fb5e:	bd70      	pop	{r4, r5, r6, pc}
    fb60:	2045      	movs	r0, #69	; 0x45
    fb62:	bd70      	pop	{r4, r5, r6, pc}
    fb64:	b510      	push	{r4, lr}
    fb66:	4604      	mov	r4, r0
    fb68:	7840      	ldrb	r0, [r0, #1]
    fb6a:	06c1      	lsls	r1, r0, #27
    fb6c:	d51c      	bpl.n	fba8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fb6e:	07c0      	lsls	r0, r0, #31
    fb70:	d00b      	beq.n	fb8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fb72:	f7f7 f9bb 	bl	6eec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    fb76:	b1b8      	cbz	r0, fba8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fb78:	7860      	ldrb	r0, [r4, #1]
    fb7a:	06c1      	lsls	r1, r0, #27
    fb7c:	d405      	bmi.n	fb8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fb7e:	0700      	lsls	r0, r0, #28
    fb80:	d503      	bpl.n	fb8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fb82:	7d20      	ldrb	r0, [r4, #20]
    fb84:	2802      	cmp	r0, #2
    fb86:	d10f      	bne.n	fba8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fb88:	e010      	b.n	fbac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fb8a:	7d20      	ldrb	r0, [r4, #20]
    fb8c:	2802      	cmp	r0, #2
    fb8e:	d001      	beq.n	fb94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    fb90:	7ea0      	ldrb	r0, [r4, #26]
    fb92:	b948      	cbnz	r0, fba8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fb94:	7860      	ldrb	r0, [r4, #1]
    fb96:	0700      	lsls	r0, r0, #28
    fb98:	d408      	bmi.n	fbac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fb9a:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fb9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    fba2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    fba6:	d201      	bcs.n	fbac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fba8:	2011      	movs	r0, #17
    fbaa:	bd10      	pop	{r4, pc}
    fbac:	2000      	movs	r0, #0
    fbae:	bd10      	pop	{r4, pc}
    fbb0:	b538      	push	{r3, r4, r5, lr}
    fbb2:	4604      	mov	r4, r0
    fbb4:	7800      	ldrb	r0, [r0, #0]
    fbb6:	28ef      	cmp	r0, #239	; 0xef
    fbb8:	d843      	bhi.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fbba:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fbbe:	f8ad 0000 	strh.w	r0, [sp]
    fbc2:	9800      	ldr	r0, [sp, #0]
    fbc4:	f000 f918 	bl	fdf8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
    fbc8:	b3a0      	cbz	r0, fc34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fbca:	7861      	ldrb	r1, [r4, #1]
    fbcc:	0708      	lsls	r0, r1, #28
    fbce:	d40b      	bmi.n	fbe8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
    fbd0:	f8d4 0002 	ldr.w	r0, [r4, #2]
    fbd4:	f8d4 3005 	ldr.w	r3, [r4, #5]
    fbd8:	0a02      	lsrs	r2, r0, #8
    fbda:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    fbde:	d830      	bhi.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fbe0:	2220      	movs	r2, #32
    fbe2:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    fbe6:	d82c      	bhi.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fbe8:	7a60      	ldrb	r0, [r4, #9]
    fbea:	b318      	cbz	r0, fc34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fbec:	2807      	cmp	r0, #7
    fbee:	d828      	bhi.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fbf0:	7aa0      	ldrb	r0, [r4, #10]
    fbf2:	b128      	cbz	r0, fc00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fbf4:	2801      	cmp	r0, #1
    fbf6:	d003      	beq.n	fc00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fbf8:	2802      	cmp	r0, #2
    fbfa:	d001      	beq.n	fc00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fbfc:	2803      	cmp	r0, #3
    fbfe:	d120      	bne.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fc00:	074a      	lsls	r2, r1, #29
    fc02:	d403      	bmi.n	fc0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fc04:	2802      	cmp	r0, #2
    fc06:	d001      	beq.n	fc0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fc08:	2803      	cmp	r0, #3
    fc0a:	d105      	bne.n	fc18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
    fc0c:	7ae0      	ldrb	r0, [r4, #11]
    fc0e:	b108      	cbz	r0, fc14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
    fc10:	2801      	cmp	r0, #1
    fc12:	d116      	bne.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fc14:	0748      	lsls	r0, r1, #29
    fc16:	d407      	bmi.n	fc28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fc18:	7ca0      	ldrb	r0, [r4, #18]
    fc1a:	b128      	cbz	r0, fc28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fc1c:	2801      	cmp	r0, #1
    fc1e:	d003      	beq.n	fc28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fc20:	2802      	cmp	r0, #2
    fc22:	d001      	beq.n	fc28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fc24:	2803      	cmp	r0, #3
    fc26:	d10c      	bne.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fc28:	06c8      	lsls	r0, r1, #27
    fc2a:	7d20      	ldrb	r0, [r4, #20]
    fc2c:	d503      	bpl.n	fc36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
    fc2e:	2801      	cmp	r0, #1
    fc30:	d107      	bne.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fc32:	e002      	b.n	fc3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
    fc34:	e005      	b.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fc36:	2802      	cmp	r0, #2
    fc38:	d003      	beq.n	fc42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fc3a:	7e20      	ldrb	r0, [r4, #24]
    fc3c:	b118      	cbz	r0, fc46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fc3e:	2801      	cmp	r0, #1
    fc40:	d001      	beq.n	fc46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fc42:	2012      	movs	r0, #18
    fc44:	bd38      	pop	{r3, r4, r5, pc}
    fc46:	2000      	movs	r0, #0
    fc48:	bd38      	pop	{r3, r4, r5, pc}
    fc4a:	b510      	push	{r4, lr}
    fc4c:	0004      	movs	r4, r0
    fc4e:	d005      	beq.n	fc5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fc50:	f7f7 f98a 	bl	6f68 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fc54:	4384      	bics	r4, r0
    fc56:	d001      	beq.n	fc5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fc58:	2000      	movs	r0, #0
    fc5a:	bd10      	pop	{r4, pc}
    fc5c:	2001      	movs	r0, #1
    fc5e:	bd10      	pop	{r4, pc}
    fc60:	28fb      	cmp	r0, #251	; 0xfb
    fc62:	d803      	bhi.n	fc6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
    fc64:	f640 0048 	movw	r0, #2120	; 0x848
    fc68:	4281      	cmp	r1, r0
    fc6a:	d901      	bls.n	fc70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
    fc6c:	2011      	movs	r0, #17
    fc6e:	4770      	bx	lr
    fc70:	2000      	movs	r0, #0
    fc72:	4770      	bx	lr
    fc74:	381b      	subs	r0, #27
    fc76:	28e1      	cmp	r0, #225	; 0xe1
    fc78:	d206      	bcs.n	fc88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fc7a:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fc7e:	d303      	bcc.n	fc88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fc80:	f244 2090 	movw	r0, #17040	; 0x4290
    fc84:	4281      	cmp	r1, r0
    fc86:	d901      	bls.n	fc8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
    fc88:	2012      	movs	r0, #18
    fc8a:	4770      	bx	lr
    fc8c:	2000      	movs	r0, #0
    fc8e:	4770      	bx	lr
    fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc94:	4606      	mov	r6, r0
    fc96:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    fc9a:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    fc9e:	4615      	mov	r5, r2
    fca0:	302c      	adds	r0, #44	; 0x2c
    fca2:	f7f4 fa4d 	bl	4140 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    fca6:	4680      	mov	r8, r0
    fca8:	2102      	movs	r1, #2
    fcaa:	f7fd fbdf 	bl	d46c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fcae:	4287      	cmp	r7, r0
    fcb0:	d200      	bcs.n	fcb4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
    fcb2:	4638      	mov	r0, r7
    fcb4:	4607      	mov	r7, r0
    fcb6:	2102      	movs	r1, #2
    fcb8:	4640      	mov	r0, r8
    fcba:	f7fd fbd7 	bl	d46c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fcbe:	4284      	cmp	r4, r0
    fcc0:	d200      	bcs.n	fcc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
    fcc2:	4620      	mov	r0, r4
    fcc4:	8831      	ldrh	r1, [r6, #0]
    fcc6:	8029      	strh	r1, [r5, #0]
    fcc8:	2f1b      	cmp	r7, #27
    fcca:	d913      	bls.n	fcf4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
    fccc:	2ffb      	cmp	r7, #251	; 0xfb
    fcce:	d300      	bcc.n	fcd2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fcd0:	27fb      	movs	r7, #251	; 0xfb
    fcd2:	806f      	strh	r7, [r5, #2]
    fcd4:	281b      	cmp	r0, #27
    fcd6:	d90f      	bls.n	fcf8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
    fcd8:	28fb      	cmp	r0, #251	; 0xfb
    fcda:	d300      	bcc.n	fcde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fcdc:	20fb      	movs	r0, #251	; 0xfb
    fcde:	80e8      	strh	r0, [r5, #6]
    fce0:	4640      	mov	r0, r8
    fce2:	f7ff fee9 	bl	fab8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fce6:	80a8      	strh	r0, [r5, #4]
    fce8:	4640      	mov	r0, r8
    fcea:	f7ff fee5 	bl	fab8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fcee:	8128      	strh	r0, [r5, #8]
    fcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcf4:	271b      	movs	r7, #27
    fcf6:	e7ec      	b.n	fcd2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fcf8:	201b      	movs	r0, #27
    fcfa:	e7f0      	b.n	fcde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd00:	7890      	ldrb	r0, [r2, #2]
    fd02:	9e06      	ldr	r6, [sp, #24]
    fd04:	461d      	mov	r5, r3
    fd06:	4614      	mov	r4, r2
    fd08:	b908      	cbnz	r0, fd0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
    fd0a:	f7f7 f92d 	bl	6f68 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd0e:	78e4      	ldrb	r4, [r4, #3]
    fd10:	4607      	mov	r7, r0
    fd12:	b914      	cbnz	r4, fd1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
    fd14:	f7f7 f928 	bl	6f68 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd18:	4604      	mov	r4, r0
    fd1a:	b16f      	cbz	r7, fd38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fd1c:	b164      	cbz	r4, fd38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fd1e:	4638      	mov	r0, r7
    fd20:	f7ff fed5 	bl	face <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fd24:	4620      	mov	r0, r4
    fd26:	f7ff fed2 	bl	face <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fd2a:	b12f      	cbz	r7, fd38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fd2c:	b124      	cbz	r4, fd38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fd2e:	702f      	strb	r7, [r5, #0]
    fd30:	7034      	strb	r4, [r6, #0]
    fd32:	2000      	movs	r0, #0
    fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd38:	2009      	movs	r0, #9
    fd3a:	e7fb      	b.n	fd34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
    fd3c:	207f      	movs	r0, #127	; 0x7f
    fd3e:	f000 b83c 	b.w	fdba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fd42:	b508      	push	{r3, lr}
    fd44:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    fd48:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    fd4c:	f88d 0000 	strb.w	r0, [sp]
    fd50:	9800      	ldr	r0, [sp, #0]
    fd52:	9000      	str	r0, [sp, #0]
    fd54:	f89d 0000 	ldrb.w	r0, [sp]
    fd58:	b100      	cbz	r0, fd5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
    fd5a:	2001      	movs	r0, #1
    fd5c:	1e40      	subs	r0, r0, #1
    fd5e:	4208      	tst	r0, r1
    fd60:	d003      	beq.n	fd6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    fd62:	2904      	cmp	r1, #4
    fd64:	d001      	beq.n	fd6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    fd66:	2001      	movs	r0, #1
    fd68:	bd08      	pop	{r3, pc}
    fd6a:	2000      	movs	r0, #0
    fd6c:	bd08      	pop	{r3, pc}
    fd6e:	b570      	push	{r4, r5, r6, lr}
    fd70:	4605      	mov	r5, r0
    fd72:	f7fe fa21 	bl	e1b8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fd76:	b170      	cbz	r0, fd96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
    fd78:	4628      	mov	r0, r5
    fd7a:	f7fe fbed 	bl	e558 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fd7e:	2800      	cmp	r0, #0
    fd80:	d008      	beq.n	fd94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
    fd82:	4628      	mov	r0, r5
    fd84:	f7fe fbe5 	bl	e552 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    fd88:	4604      	mov	r4, r0
    fd8a:	4628      	mov	r0, r5
    fd8c:	f7fe fbbb 	bl	e506 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fd90:	b118      	cbz	r0, fd9a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
    fd92:	200c      	movs	r0, #12
    fd94:	bd70      	pop	{r4, r5, r6, pc}
    fd96:	2042      	movs	r0, #66	; 0x42
    fd98:	bd70      	pop	{r4, r5, r6, pc}
    fd9a:	b164      	cbz	r4, fdb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    fd9c:	8820      	ldrh	r0, [r4, #0]
    fd9e:	f7fd f9f5 	bl	d18c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fda2:	8820      	ldrh	r0, [r4, #0]
    fda4:	2100      	movs	r1, #0
    fda6:	f7f1 f89d 	bl	ee4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fdaa:	b120      	cbz	r0, fdb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    fdac:	f241 61ac 	movw	r1, #5804	; 0x16ac
    fdb0:	2039      	movs	r0, #57	; 0x39
    fdb2:	f7f0 fe11 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fdb6:	2000      	movs	r0, #0
    fdb8:	bd70      	pop	{r4, r5, r6, pc}
    fdba:	b508      	push	{r3, lr}
    fdbc:	f640 1288 	movw	r2, #2440	; 0x988
    fdc0:	2300      	movs	r3, #0
    fdc2:	4669      	mov	r1, sp
    fdc4:	f7fc f846 	bl	be54 <mpsl_fem_tx_power_split>
    fdc8:	bd08      	pop	{r3, pc}
    fdca:	b530      	push	{r4, r5, lr}
    fdcc:	f340 0400 	sbfx	r4, r0, #0, #1
    fdd0:	f340 0040 	sbfx	r0, r0, #1, #1
    fdd4:	1c40      	adds	r0, r0, #1
    fdd6:	9d03      	ldr	r5, [sp, #12]
    fdd8:	1c64      	adds	r4, r4, #1
    fdda:	d000      	beq.n	fdde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
    fddc:	b119      	cbz	r1, fde6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
    fdde:	b100      	cbz	r0, fde2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
    fde0:	b10a      	cbz	r2, fde6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
    fde2:	b91c      	cbnz	r4, fdec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
    fde4:	e001      	b.n	fdea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
    fde6:	2011      	movs	r0, #17
    fde8:	bd30      	pop	{r4, r5, pc}
    fdea:	2100      	movs	r1, #0
    fdec:	7019      	strb	r1, [r3, #0]
    fdee:	b900      	cbnz	r0, fdf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
    fdf0:	2200      	movs	r2, #0
    fdf2:	702a      	strb	r2, [r5, #0]
    fdf4:	2000      	movs	r0, #0
    fdf6:	bd30      	pop	{r4, r5, pc}
    fdf8:	b2c0      	uxtb	r0, r0
    fdfa:	06c1      	lsls	r1, r0, #27
    fdfc:	d40c      	bmi.n	fe18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
    fdfe:	0681      	lsls	r1, r0, #26
    fe00:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    fe04:	d503      	bpl.n	fe0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
    fe06:	b9d1      	cbnz	r1, fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe08:	0781      	lsls	r1, r0, #30
    fe0a:	d418      	bmi.n	fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe0c:	e001      	b.n	fe12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
    fe0e:	2900      	cmp	r1, #0
    fe10:	d1fa      	bne.n	fe08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
    fe12:	0700      	lsls	r0, r0, #28
    fe14:	d413      	bmi.n	fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe16:	e010      	b.n	fe3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
    fe18:	0641      	lsls	r1, r0, #25
    fe1a:	d410      	bmi.n	fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe1c:	0681      	lsls	r1, r0, #26
    fe1e:	d40e      	bmi.n	fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe20:	07c1      	lsls	r1, r0, #31
    fe22:	ea4f 7180 	mov.w	r1, r0, lsl #30
    fe26:	d004      	beq.n	fe32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
    fe28:	2900      	cmp	r1, #0
    fe2a:	db02      	blt.n	fe32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
    fe2c:	0740      	lsls	r0, r0, #29
    fe2e:	d404      	bmi.n	fe3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
    fe30:	e005      	b.n	fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe32:	0701      	lsls	r1, r0, #28
    fe34:	d403      	bmi.n	fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe36:	0740      	lsls	r0, r0, #29
    fe38:	d401      	bmi.n	fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    fe3a:	2001      	movs	r0, #1
    fe3c:	4770      	bx	lr
    fe3e:	2000      	movs	r0, #0
    fe40:	4770      	bx	lr
    fe42:	b510      	push	{r4, lr}
    fe44:	f7f4 f960 	bl	4108 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    fe48:	b108      	cbz	r0, fe4e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
    fe4a:	21fd      	movs	r1, #253	; 0xfd
    fe4c:	e004      	b.n	fe58 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
    fe4e:	f7f3 fab1 	bl	33b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    fe52:	b120      	cbz	r0, fe5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
    fe54:	f44f 7181 	mov.w	r1, #258	; 0x102
    fe58:	2001      	movs	r0, #1
    fe5a:	f7f0 fdbd 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe62:	2001      	movs	r0, #1
    fe64:	f7fc bfc4 	b.w	cdf0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fe68:	6802      	ldr	r2, [r0, #0]
    fe6a:	b912      	cbnz	r2, fe72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
    fe6c:	6001      	str	r1, [r0, #0]
    fe6e:	4770      	bx	lr
    fe70:	4602      	mov	r2, r0
    fe72:	6850      	ldr	r0, [r2, #4]
    fe74:	b108      	cbz	r0, fe7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
    fe76:	428a      	cmp	r2, r1
    fe78:	d1fa      	bne.n	fe70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
    fe7a:	428a      	cmp	r2, r1
    fe7c:	d0f7      	beq.n	fe6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
    fe7e:	6051      	str	r1, [r2, #4]
    fe80:	4770      	bx	lr
    fe82:	b510      	push	{r4, lr}
    fe84:	4604      	mov	r4, r0
    fe86:	e002      	b.n	fe8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
    fe88:	6820      	ldr	r0, [r4, #0]
    fe8a:	4780      	blx	r0
    fe8c:	6864      	ldr	r4, [r4, #4]
    fe8e:	2c00      	cmp	r4, #0
    fe90:	d1fa      	bne.n	fe88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
    fe92:	bd10      	pop	{r4, pc}
    fe94:	b510      	push	{r4, lr}
    fe96:	2000      	movs	r0, #0
    fe98:	f7fc ffaa 	bl	cdf0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fe9c:	f7f1 f984 	bl	11a8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fea0:	f7f1 fc1a 	bl	16d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    fea4:	f7f1 fda8 	bl	19f8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    fea8:	2800      	cmp	r0, #0
    feaa:	d003      	beq.n	feb4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
    feac:	21df      	movs	r1, #223	; 0xdf
    feae:	2001      	movs	r0, #1
    feb0:	f7f0 fd92 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    feb4:	bd10      	pop	{r4, pc}
    feb6:	b510      	push	{r4, lr}
    feb8:	f7ff ffc3 	bl	fe42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
    febc:	f7fe fe36 	bl	eb2c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fec0:	2800      	cmp	r0, #0
    fec2:	d004      	beq.n	fece <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    fec4:	f240 1117 	movw	r1, #279	; 0x117
    fec8:	2001      	movs	r0, #1
    feca:	f7f0 fd85 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fece:	bd10      	pop	{r4, pc}

0000fed0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    fed0:	f7fb bcf4 	b.w	b8bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    fed4:	000b0001 	.word	0x000b0001
    fed8:	000a0002 	.word	0x000a0002
    fedc:	00090005 	.word	0x00090005
    fee0:	0008000a 	.word	0x0008000a
    fee4:	00070014 	.word	0x00070014
    fee8:	0006001e 	.word	0x0006001e
    feec:	00050032 	.word	0x00050032
    fef0:	0004004b 	.word	0x0004004b
    fef4:	00030064 	.word	0x00030064
    fef8:	00020096 	.word	0x00020096
    fefc:	000100fa 	.word	0x000100fa
    ff00:	000001f4 	.word	0x000001f4

0000ff04 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
    ff04:	b518      	push	{r3, r4, lr}
    ff06:	2200      	movs	r2, #0
    ff08:	704a      	strb	r2, [r1, #1]
    ff0a:	2314      	movs	r3, #20
    ff0c:	700b      	strb	r3, [r1, #0]
    ff0e:	7202      	strb	r2, [r0, #8]
    ff10:	f8d0 400a 	ldr.w	r4, [r0, #10]
    ff14:	604c      	str	r4, [r1, #4]
    ff16:	89c3      	ldrh	r3, [r0, #14]
    ff18:	810b      	strh	r3, [r1, #8]
    ff1a:	7a03      	ldrb	r3, [r0, #8]
    ff1c:	f88d 3000 	strb.w	r3, [sp]
    ff20:	9b00      	ldr	r3, [sp, #0]
    ff22:	9300      	str	r3, [sp, #0]
    ff24:	f89d 3000 	ldrb.w	r3, [sp]
    ff28:	2b00      	cmp	r3, #0
    ff2a:	d1f0      	bne.n	ff0e <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
    ff2c:	bd18      	pop	{r3, r4, pc}

0000ff2e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    ff2e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ff30:	460d      	mov	r5, r1
    ff32:	4604      	mov	r4, r0
    ff34:	f7f2 fc70 	bl	2818 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    ff38:	2600      	movs	r6, #0
    ff3a:	b1f8      	cbz	r0, ff7c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
    ff3c:	f5a4 70c6 	sub.w	r0, r4, #396	; 0x18c
    ff40:	7226      	strb	r6, [r4, #8]
    ff42:	8800      	ldrh	r0, [r0, #0]
    ff44:	f8ad 0000 	strh.w	r0, [sp]
    ff48:	a902      	add	r1, sp, #8
    ff4a:	f7fd f9ef 	bl	d32c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff4e:	b108      	cbz	r0, ff54 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
    ff50:	2124      	movs	r1, #36	; 0x24
    ff52:	e010      	b.n	ff76 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
    ff54:	9803      	ldr	r0, [sp, #12]
    ff56:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    ff5a:	f88d 1002 	strb.w	r1, [sp, #2]
    ff5e:	7841      	ldrb	r1, [r0, #1]
    ff60:	f88d 1003 	strb.w	r1, [sp, #3]
    ff64:	8840      	ldrh	r0, [r0, #2]
    ff66:	f8ad 0004 	strh.w	r0, [sp, #4]
    ff6a:	2102      	movs	r1, #2
    ff6c:	4668      	mov	r0, sp
    ff6e:	f7ff fd31 	bl	f9d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ff72:	b118      	cbz	r0, ff7c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
    ff74:	213a      	movs	r1, #58	; 0x3a
    ff76:	207e      	movs	r0, #126	; 0x7e
    ff78:	f7f0 fd2e 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff7c:	201c      	movs	r0, #28
    ff7e:	7028      	strb	r0, [r5, #0]
    ff80:	706e      	strb	r6, [r5, #1]
    ff82:	f8d4 000a 	ldr.w	r0, [r4, #10]
    ff86:	6068      	str	r0, [r5, #4]
    ff88:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0000ff8a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    ff8a:	b510      	push	{r4, lr}
    ff8c:	f7f7 fb86 	bl	769c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    ff90:	f000 f81d 	bl	ffce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    ff94:	f7f7 f85c 	bl	7050 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    ff98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff9c:	f7f7 b956 	b.w	724c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000ffa0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    ffa0:	b510      	push	{r4, lr}
    ffa2:	24c8      	movs	r4, #200	; 0xc8
    ffa4:	1e64      	subs	r4, r4, #1
    ffa6:	b2e4      	uxtb	r4, r4
    ffa8:	f7f7 f870 	bl	708c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    ffac:	2802      	cmp	r0, #2
    ffae:	d003      	beq.n	ffb8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    ffb0:	2801      	cmp	r0, #1
    ffb2:	d000      	beq.n	ffb6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    ffb4:	2000      	movs	r0, #0
    ffb6:	bd10      	pop	{r4, pc}
    ffb8:	2c00      	cmp	r4, #0
    ffba:	d1f3      	bne.n	ffa4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    ffbc:	21ca      	movs	r1, #202	; 0xca
    ffbe:	203b      	movs	r0, #59	; 0x3b
    ffc0:	f7f0 fd0a 	bl	9d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffc4:	5840      	ldr	r0, [r0, r1]
    ffc6:	2800      	cmp	r0, #0
    ffc8:	d000      	beq.n	ffcc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
    ffca:	2001      	movs	r0, #1
    ffcc:	4770      	bx	lr

0000ffce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    ffce:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ffd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ffd6:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    ffda:	f3bf 8f4f 	dsb	sy
    ffde:	f3bf 8f6f 	isb	sy
    ffe2:	f7f7 b9cd 	b.w	7380 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    ffe6:	2800      	cmp	r0, #0
    ffe8:	db09      	blt.n	fffe <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    ffea:	f000 021f 	and.w	r2, r0, #31
    ffee:	2101      	movs	r1, #1
    fff0:	4091      	lsls	r1, r2
    fff2:	0940      	lsrs	r0, r0, #5
    fff4:	0080      	lsls	r0, r0, #2
    fff6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fffa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fffe:	4770      	bx	lr
   10000:	2800      	cmp	r0, #0
   10002:	db0d      	blt.n	10020 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10004:	f000 021f 	and.w	r2, r0, #31
   10008:	2101      	movs	r1, #1
   1000a:	4091      	lsls	r1, r2
   1000c:	0940      	lsrs	r0, r0, #5
   1000e:	0080      	lsls	r0, r0, #2
   10010:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10014:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10018:	f3bf 8f4f 	dsb	sy
   1001c:	f3bf 8f6f 	isb	sy
   10020:	4770      	bx	lr
   10022:	5840      	ldr	r0, [r0, r1]
   10024:	2800      	cmp	r0, #0
   10026:	d000      	beq.n	1002a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10028:	2001      	movs	r0, #1
   1002a:	4770      	bx	lr
   1002c:	5840      	ldr	r0, [r0, r1]
   1002e:	2800      	cmp	r0, #0
   10030:	d000      	beq.n	10034 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10032:	2001      	movs	r0, #1
   10034:	4770      	bx	lr

00010036 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10036:	b510      	push	{r4, lr}
   10038:	4604      	mov	r4, r0
   1003a:	4608      	mov	r0, r1
   1003c:	f7f7 fc54 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10040:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10044:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10048:	fbb0 f0f1 	udiv	r0, r0, r1
   1004c:	1a20      	subs	r0, r4, r0
   1004e:	1e80      	subs	r0, r0, #2
   10050:	bd10      	pop	{r4, pc}

00010052 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10052:	b510      	push	{r4, lr}
   10054:	4604      	mov	r4, r0
   10056:	4608      	mov	r0, r1
   10058:	f7f7 fc46 	bl	78e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1005c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10060:	fbb0 f0f1 	udiv	r0, r0, r1
   10064:	1a20      	subs	r0, r4, r0
   10066:	bd10      	pop	{r4, pc}
   10068:	2804      	cmp	r0, #4
   1006a:	d202      	bcs.n	10072 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   1006c:	f04f 0028 	mov.w	r0, #40	; 0x28
   10070:	4770      	bx	lr
   10072:	d102      	bne.n	1007a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10074:	f04f 0010 	mov.w	r0, #16
   10078:	4770      	bx	lr
   1007a:	f04f 0000 	mov.w	r0, #0
   1007e:	4770      	bx	lr
   10080:	2100      	movs	r1, #0
   10082:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10086:	f800 1f24 	strb.w	r1, [r0, #36]!
   1008a:	7041      	strb	r1, [r0, #1]
   1008c:	4770      	bx	lr

0001008e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   1008e:	b570      	push	{r4, r5, r6, lr}
   10090:	f7f8 f9ea 	bl	8468 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10094:	4605      	mov	r5, r0
   10096:	2400      	movs	r4, #0
   10098:	e006      	b.n	100a8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1009a:	4620      	mov	r0, r4
   1009c:	f7f8 f9ea 	bl	8474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   100a0:	f7ff ffee 	bl	10080 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   100a4:	1c64      	adds	r4, r4, #1
   100a6:	b2e4      	uxtb	r4, r4
   100a8:	42ac      	cmp	r4, r5
   100aa:	d3f6      	bcc.n	1009a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   100ac:	bd70      	pop	{r4, r5, r6, pc}

000100ae <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   100ae:	f7fa bdc1 	b.w	ac34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

000100b2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   100b2:	b510      	push	{r4, lr}
   100b4:	2000      	movs	r0, #0
   100b6:	f7fb f8f7 	bl	b2a8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   100ba:	6800      	ldr	r0, [r0, #0]
   100bc:	2800      	cmp	r0, #0
   100be:	bf18      	it	ne
   100c0:	2001      	movne	r0, #1
   100c2:	bd10      	pop	{r4, pc}

000100c4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   100c4:	b510      	push	{r4, lr}
   100c6:	f7fb f96f 	bl	b3a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   100ca:	f7fa fc2d 	bl	a928 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   100ce:	f000 f802 	bl	100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   100d2:	b280      	uxth	r0, r0
   100d4:	bd10      	pop	{r4, pc}

000100d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   100d6:	0a41      	lsrs	r1, r0, #9
   100d8:	f643 5209 	movw	r2, #15625	; 0x3d09
   100dc:	4351      	muls	r1, r2
   100de:	f3c0 0008 	ubfx	r0, r0, #0, #9
   100e2:	fb10 f002 	smulbb	r0, r0, r2
   100e6:	f500 7080 	add.w	r0, r0, #256	; 0x100
   100ea:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   100ee:	4770      	bx	lr
   100f0:	2800      	cmp	r0, #0
   100f2:	db09      	blt.n	10108 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   100f4:	f000 021f 	and.w	r2, r0, #31
   100f8:	2101      	movs	r1, #1
   100fa:	4091      	lsls	r1, r2
   100fc:	0940      	lsrs	r0, r0, #5
   100fe:	0080      	lsls	r0, r0, #2
   10100:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10104:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10108:	4770      	bx	lr
   1010a:	2800      	cmp	r0, #0
   1010c:	db0d      	blt.n	1012a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   1010e:	f000 021f 	and.w	r2, r0, #31
   10112:	2101      	movs	r1, #1
   10114:	4091      	lsls	r1, r2
   10116:	0940      	lsrs	r0, r0, #5
   10118:	0080      	lsls	r0, r0, #2
   1011a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1011e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10122:	f3bf 8f4f 	dsb	sy
   10126:	f3bf 8f6f 	isb	sy
   1012a:	4770      	bx	lr
   1012c:	5840      	ldr	r0, [r0, r1]
   1012e:	2800      	cmp	r0, #0
   10130:	d000      	beq.n	10134 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10132:	2001      	movs	r0, #1
   10134:	4770      	bx	lr
   10136:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   1013a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   1013e:	f002 0201 	and.w	r2, r2, #1
   10142:	03c0      	lsls	r0, r0, #15
   10144:	d503      	bpl.n	1014e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10146:	428a      	cmp	r2, r1
   10148:	d101      	bne.n	1014e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   1014a:	2001      	movs	r0, #1
   1014c:	4770      	bx	lr
   1014e:	2000      	movs	r0, #0
   10150:	4770      	bx	lr

00010152 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10152:	b510      	push	{r4, lr}
   10154:	2101      	movs	r1, #1
   10156:	0788      	lsls	r0, r1, #30
   10158:	f7fb fc66 	bl	ba28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1015c:	2800      	cmp	r0, #0
   1015e:	d000      	beq.n	10162 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10160:	2001      	movs	r0, #1
   10162:	bd10      	pop	{r4, pc}

00010164 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10164:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10168:	2101      	movs	r1, #1
   1016a:	6001      	str	r1, [r0, #0]
   1016c:	4770      	bx	lr

0001016e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   1016e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10172:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10176:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   1017a:	f002 0203 	and.w	r2, r2, #3
   1017e:	03c9      	lsls	r1, r1, #15
   10180:	d503      	bpl.n	1018a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10182:	4282      	cmp	r2, r0
   10184:	d101      	bne.n	1018a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10186:	2001      	movs	r0, #1
   10188:	4770      	bx	lr
   1018a:	2000      	movs	r0, #0
   1018c:	4770      	bx	lr

0001018e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   1018e:	b510      	push	{r4, lr}
   10190:	2100      	movs	r1, #0
   10192:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10196:	f7fb fc47 	bl	ba28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1019a:	2800      	cmp	r0, #0
   1019c:	d000      	beq.n	101a0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   1019e:	2001      	movs	r0, #1
   101a0:	bd10      	pop	{r4, pc}
   101a2:	2800      	cmp	r0, #0
   101a4:	db09      	blt.n	101ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   101a6:	f000 021f 	and.w	r2, r0, #31
   101aa:	2101      	movs	r1, #1
   101ac:	4091      	lsls	r1, r2
   101ae:	0940      	lsrs	r0, r0, #5
   101b0:	0080      	lsls	r0, r0, #2
   101b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101b6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   101ba:	4770      	bx	lr
   101bc:	2800      	cmp	r0, #0
   101be:	db0d      	blt.n	101dc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   101c0:	f000 021f 	and.w	r2, r0, #31
   101c4:	2101      	movs	r1, #1
   101c6:	4091      	lsls	r1, r2
   101c8:	0940      	lsrs	r0, r0, #5
   101ca:	0080      	lsls	r0, r0, #2
   101cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101d0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   101d4:	f3bf 8f4f 	dsb	sy
   101d8:	f3bf 8f6f 	isb	sy
   101dc:	4770      	bx	lr
   101de:	1000      	.short	0x1000
   101e0:	00fa0002 	.word	0x00fa0002
   101e4:	f18c0000 	.word	0xf18c0000
   101e8:	4134cc9e 	.word	0x4134cc9e
   101ec:	f70ea7d7 	.word	0xf70ea7d7
   101f0:	2bbb1459 	.word	0x2bbb1459
   101f4:	bb7f67d7 	.word	0xbb7f67d7
   101f8:	ebbe      	.short	0xebbe
   101fa:	2800      	cmp	r0, #0
   101fc:	db09      	blt.n	10212 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   101fe:	f000 021f 	and.w	r2, r0, #31
   10202:	2101      	movs	r1, #1
   10204:	4091      	lsls	r1, r2
   10206:	0940      	lsrs	r0, r0, #5
   10208:	0080      	lsls	r0, r0, #2
   1020a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1020e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10212:	4770      	bx	lr

00010214 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10214:	f3ef 8110 	mrs	r1, PRIMASK
   10218:	b672      	cpsid	i
   1021a:	7802      	ldrb	r2, [r0, #0]
   1021c:	2a01      	cmp	r2, #1
   1021e:	d001      	beq.n	10224 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10220:	2201      	movs	r2, #1
   10222:	e000      	b.n	10226 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10224:	2200      	movs	r2, #0
   10226:	2301      	movs	r3, #1
   10228:	7003      	strb	r3, [r0, #0]
   1022a:	b901      	cbnz	r1, 1022e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   1022c:	b662      	cpsie	i
   1022e:	b10a      	cbz	r2, 10234 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10230:	2000      	movs	r0, #0
   10232:	4770      	bx	lr
   10234:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10238:	4770      	bx	lr

0001023a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   1023a:	2100      	movs	r1, #0
   1023c:	7001      	strb	r1, [r0, #0]
   1023e:	4608      	mov	r0, r1
   10240:	4770      	bx	lr

00010242 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10242:	f3ef 8110 	mrs	r1, PRIMASK
   10246:	b672      	cpsid	i
   10248:	2200      	movs	r2, #0
   1024a:	7002      	strb	r2, [r0, #0]
   1024c:	b901      	cbnz	r1, 10250 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   1024e:	b662      	cpsie	i
   10250:	2000      	movs	r0, #0
   10252:	4770      	bx	lr

00010254 <mpsl_low_priority_process>:
   10254:	f7fb bd3e 	b.w	bcd4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010258 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10258:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1025c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10260:	280f      	cmp	r0, #15
   10262:	d001      	beq.n	10268 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10264:	2000      	movs	r0, #0
   10266:	4770      	bx	lr
   10268:	2001      	movs	r0, #1
   1026a:	4770      	bx	lr

0001026c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   1026c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10270:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10274:	280a      	cmp	r0, #10
   10276:	d001      	beq.n	1027c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10278:	2000      	movs	r0, #0
   1027a:	4770      	bx	lr
   1027c:	2001      	movs	r0, #1
   1027e:	4770      	bx	lr

00010280 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10280:	b500      	push	{lr}
   10282:	f7ff fff3 	bl	1026c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10286:	b120      	cbz	r0, 10292 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10288:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1028c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10290:	b108      	cbz	r0, 10296 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10292:	2000      	movs	r0, #0
   10294:	bd00      	pop	{pc}
   10296:	2001      	movs	r0, #1
   10298:	bd00      	pop	{pc}

0001029a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1029a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1029e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   102a2:	280e      	cmp	r0, #14
   102a4:	d001      	beq.n	102aa <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   102a6:	2000      	movs	r0, #0
   102a8:	4770      	bx	lr
   102aa:	2001      	movs	r0, #1
   102ac:	4770      	bx	lr

000102ae <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   102ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   102b2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   102b6:	2810      	cmp	r0, #16
   102b8:	d001      	beq.n	102be <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   102ba:	2000      	movs	r0, #0
   102bc:	4770      	bx	lr
   102be:	2001      	movs	r0, #1
   102c0:	4770      	bx	lr

000102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   102c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   102c6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   102ca:	2806      	cmp	r0, #6
   102cc:	d003      	beq.n	102d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   102ce:	1c40      	adds	r0, r0, #1
   102d0:	d001      	beq.n	102d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   102d2:	2000      	movs	r0, #0
   102d4:	4770      	bx	lr
   102d6:	2001      	movs	r0, #1
   102d8:	4770      	bx	lr

000102da <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   102da:	b500      	push	{lr}
   102dc:	f7ff fff1 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   102e0:	b148      	cbz	r0, 102f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   102e2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   102e6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   102ea:	2806      	cmp	r0, #6
   102ec:	d303      	bcc.n	102f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   102ee:	1c40      	adds	r0, r0, #1
   102f0:	d001      	beq.n	102f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   102f2:	2001      	movs	r0, #1
   102f4:	bd00      	pop	{pc}
   102f6:	2000      	movs	r0, #0
   102f8:	bd00      	pop	{pc}

000102fa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   102fa:	b500      	push	{lr}
   102fc:	f7ff ffe1 	bl	102c2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10300:	b138      	cbz	r0, 10312 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10306:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1030a:	2806      	cmp	r0, #6
   1030c:	d303      	bcc.n	10316 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   1030e:	1c40      	adds	r0, r0, #1
   10310:	d001      	beq.n	10316 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10312:	2000      	movs	r0, #0
   10314:	bd00      	pop	{pc}
   10316:	2001      	movs	r0, #1
   10318:	bd00      	pop	{pc}

0001031a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1031a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1031e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10322:	280d      	cmp	r0, #13
   10324:	d001      	beq.n	1032a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10326:	2000      	movs	r0, #0
   10328:	4770      	bx	lr
   1032a:	2001      	movs	r0, #1
   1032c:	4770      	bx	lr

0001032e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   1032e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10332:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10336:	2808      	cmp	r0, #8
   10338:	d001      	beq.n	1033e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   1033a:	2000      	movs	r0, #0
   1033c:	4770      	bx	lr
   1033e:	2001      	movs	r0, #1
   10340:	4770      	bx	lr

00010342 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10342:	f7fb bd01 	b.w	bd48 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010346 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10346:	f7fb bcff 	b.w	bd48 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0001034a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   1034a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1034e:	428a      	cmp	r2, r1
   10350:	d803      	bhi.n	1035a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10352:	2179      	movs	r1, #121	; 0x79
   10354:	2096      	movs	r0, #150	; 0x96
   10356:	f7fb fbbd 	bl	bad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1035a:	fab2 f382 	clz	r3, r2
   1035e:	b13b      	cbz	r3, 10370 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10360:	4099      	lsls	r1, r3
   10362:	f1c3 0420 	rsb	r4, r3, #32
   10366:	fa20 f404 	lsr.w	r4, r0, r4
   1036a:	4321      	orrs	r1, r4
   1036c:	4098      	lsls	r0, r3
   1036e:	409a      	lsls	r2, r3
   10370:	0c14      	lsrs	r4, r2, #16
   10372:	0c07      	lsrs	r7, r0, #16
   10374:	b286      	uxth	r6, r0
   10376:	fbb1 f0f4 	udiv	r0, r1, r4
   1037a:	fbb1 f3f4 	udiv	r3, r1, r4
   1037e:	fb04 1c10 	mls	ip, r4, r0, r1
   10382:	b295      	uxth	r5, r2
   10384:	fb03 f005 	mul.w	r0, r3, r5
   10388:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   1038c:	4560      	cmp	r0, ip
   1038e:	d907      	bls.n	103a0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10390:	eba0 000c 	sub.w	r0, r0, ip
   10394:	4290      	cmp	r0, r2
   10396:	d901      	bls.n	1039c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   10398:	2002      	movs	r0, #2
   1039a:	e000      	b.n	1039e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   1039c:	2001      	movs	r0, #1
   1039e:	1a1b      	subs	r3, r3, r0
   103a0:	0409      	lsls	r1, r1, #16
   103a2:	0418      	lsls	r0, r3, #16
   103a4:	19c9      	adds	r1, r1, r7
   103a6:	fba3 3702 	umull	r3, r7, r3, r2
   103aa:	1acf      	subs	r7, r1, r3
   103ac:	fbb7 f1f4 	udiv	r1, r7, r4
   103b0:	fbb7 f3f4 	udiv	r3, r7, r4
   103b4:	fb04 7413 	mls	r4, r4, r3, r7
   103b8:	fb01 f305 	mul.w	r3, r1, r5
   103bc:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   103c0:	42a3      	cmp	r3, r4
   103c2:	d906      	bls.n	103d2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   103c4:	1b1b      	subs	r3, r3, r4
   103c6:	4293      	cmp	r3, r2
   103c8:	d901      	bls.n	103ce <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   103ca:	2202      	movs	r2, #2
   103cc:	e000      	b.n	103d0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   103ce:	2201      	movs	r2, #1
   103d0:	1a89      	subs	r1, r1, r2
   103d2:	4308      	orrs	r0, r1
   103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000103d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   103d8:	b4f0      	push	{r4, r5, r6, r7}
   103da:	ea80 0c01 	eor.w	ip, r0, r1
   103de:	4603      	mov	r3, r0
   103e0:	f01c 0f03 	tst.w	ip, #3
   103e4:	d13c      	bne.n	10460 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   103e6:	f013 0f03 	tst.w	r3, #3
   103ea:	d00b      	beq.n	10404 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   103ec:	2a00      	cmp	r2, #0
   103ee:	bf04      	itt	eq
   103f0:	bcf0      	popeq	{r4, r5, r6, r7}
   103f2:	4770      	bxeq	lr
   103f4:	f811 cb01 	ldrb.w	ip, [r1], #1
   103f8:	f803 cb01 	strb.w	ip, [r3], #1
   103fc:	1e52      	subs	r2, r2, #1
   103fe:	f013 0f03 	tst.w	r3, #3
   10402:	d1f3      	bne.n	103ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10404:	2a03      	cmp	r2, #3
   10406:	d94f      	bls.n	104a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10408:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1040c:	d24c      	bcs.n	104a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1040e:	f1c2 0c00 	rsb	ip, r2, #0
   10412:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10416:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   1041a:	ea4f 0cac 	mov.w	ip, ip, asr #2
   1041e:	f1cc 0c00 	rsb	ip, ip, #0
   10422:	f1bc 0f00 	cmp.w	ip, #0
   10426:	dd1b      	ble.n	10460 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10428:	1f0d      	subs	r5, r1, #4
   1042a:	1f1c      	subs	r4, r3, #4
   1042c:	f01c 0f01 	tst.w	ip, #1
   10430:	d003      	beq.n	1043a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10432:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10436:	f844 6f04 	str.w	r6, [r4, #4]!
   1043a:	ea5f 066c 	movs.w	r6, ip, asr #1
   1043e:	d007      	beq.n	10450 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10440:	686f      	ldr	r7, [r5, #4]
   10442:	6067      	str	r7, [r4, #4]
   10444:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10448:	f844 7f08 	str.w	r7, [r4, #8]!
   1044c:	1e76      	subs	r6, r6, #1
   1044e:	d1f7      	bne.n	10440 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10450:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10454:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10458:	f1cc 0c00 	rsb	ip, ip, #0
   1045c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10460:	2a00      	cmp	r2, #0
   10462:	bf04      	itt	eq
   10464:	bcf0      	popeq	{r4, r5, r6, r7}
   10466:	4770      	bxeq	lr
   10468:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1046c:	d226      	bcs.n	104bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1046e:	2a00      	cmp	r2, #0
   10470:	bfdc      	itt	le
   10472:	bcf0      	pople	{r4, r5, r6, r7}
   10474:	4770      	bxle	lr
   10476:	1e49      	subs	r1, r1, #1
   10478:	1e5b      	subs	r3, r3, #1
   1047a:	f012 0f01 	tst.w	r2, #1
   1047e:	d003      	beq.n	10488 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10480:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10484:	f803 cf01 	strb.w	ip, [r3, #1]!
   10488:	1052      	asrs	r2, r2, #1
   1048a:	bf04      	itt	eq
   1048c:	bcf0      	popeq	{r4, r5, r6, r7}
   1048e:	4770      	bxeq	lr
   10490:	f891 c001 	ldrb.w	ip, [r1, #1]
   10494:	f883 c001 	strb.w	ip, [r3, #1]
   10498:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   1049c:	f803 cf02 	strb.w	ip, [r3, #2]!
   104a0:	1e52      	subs	r2, r2, #1
   104a2:	d1f5      	bne.n	10490 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   104a4:	bcf0      	pop	{r4, r5, r6, r7}
   104a6:	4770      	bx	lr
   104a8:	2a04      	cmp	r2, #4
   104aa:	d3d9      	bcc.n	10460 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   104ac:	f851 cb04 	ldr.w	ip, [r1], #4
   104b0:	1f12      	subs	r2, r2, #4
   104b2:	f843 cb04 	str.w	ip, [r3], #4
   104b6:	2a04      	cmp	r2, #4
   104b8:	d2f8      	bcs.n	104ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   104ba:	e7d1      	b.n	10460 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   104bc:	f811 cb01 	ldrb.w	ip, [r1], #1
   104c0:	f803 cb01 	strb.w	ip, [r3], #1
   104c4:	1e52      	subs	r2, r2, #1
   104c6:	d1f9      	bne.n	104bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   104c8:	bcf0      	pop	{r4, r5, r6, r7}
   104ca:	4770      	bx	lr

000104cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   104cc:	b470      	push	{r4, r5, r6}
   104ce:	4603      	mov	r3, r0
   104d0:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   104d4:	f010 0f03 	tst.w	r0, #3
   104d8:	d009      	beq.n	104ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   104da:	2a00      	cmp	r2, #0
   104dc:	bf04      	itt	eq
   104de:	bc70      	popeq	{r4, r5, r6}
   104e0:	4770      	bxeq	lr
   104e2:	f803 cb01 	strb.w	ip, [r3], #1
   104e6:	1e52      	subs	r2, r2, #1
   104e8:	f013 0f03 	tst.w	r3, #3
   104ec:	d1f5      	bne.n	104da <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   104ee:	b2c9      	uxtb	r1, r1
   104f0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   104f4:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   104f8:	2a03      	cmp	r2, #3
   104fa:	d939      	bls.n	10570 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   104fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10500:	d236      	bcs.n	10570 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10502:	4251      	negs	r1, r2
   10504:	17cc      	asrs	r4, r1, #31
   10506:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   1050a:	1089      	asrs	r1, r1, #2
   1050c:	424e      	negs	r6, r1
   1050e:	2e00      	cmp	r6, #0
   10510:	dd11      	ble.n	10536 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10512:	1f19      	subs	r1, r3, #4
   10514:	f016 0f01 	tst.w	r6, #1
   10518:	bf18      	it	ne
   1051a:	f841 5f04 	strne.w	r5, [r1, #4]!
   1051e:	1074      	asrs	r4, r6, #1
   10520:	d004      	beq.n	1052c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10522:	604d      	str	r5, [r1, #4]
   10524:	f841 5f08 	str.w	r5, [r1, #8]!
   10528:	1e64      	subs	r4, r4, #1
   1052a:	d1fa      	bne.n	10522 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   1052c:	4271      	negs	r1, r6
   1052e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10532:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10536:	2a00      	cmp	r2, #0
   10538:	bf04      	itt	eq
   1053a:	bc70      	popeq	{r4, r5, r6}
   1053c:	4770      	bxeq	lr
   1053e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10542:	d21d      	bcs.n	10580 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10544:	2a00      	cmp	r2, #0
   10546:	bfdc      	itt	le
   10548:	bc70      	pople	{r4, r5, r6}
   1054a:	4770      	bxle	lr
   1054c:	1e59      	subs	r1, r3, #1
   1054e:	f012 0f01 	tst.w	r2, #1
   10552:	bf18      	it	ne
   10554:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10558:	1052      	asrs	r2, r2, #1
   1055a:	bf04      	itt	eq
   1055c:	bc70      	popeq	{r4, r5, r6}
   1055e:	4770      	bxeq	lr
   10560:	f881 c001 	strb.w	ip, [r1, #1]
   10564:	f801 cf02 	strb.w	ip, [r1, #2]!
   10568:	1e52      	subs	r2, r2, #1
   1056a:	d1f9      	bne.n	10560 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   1056c:	bc70      	pop	{r4, r5, r6}
   1056e:	4770      	bx	lr
   10570:	2a04      	cmp	r2, #4
   10572:	d3e0      	bcc.n	10536 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10574:	1f12      	subs	r2, r2, #4
   10576:	f843 5b04 	str.w	r5, [r3], #4
   1057a:	2a04      	cmp	r2, #4
   1057c:	d2fa      	bcs.n	10574 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   1057e:	e7da      	b.n	10536 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10580:	f803 cb01 	strb.w	ip, [r3], #1
   10584:	1e52      	subs	r2, r2, #1
   10586:	d1fb      	bne.n	10580 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10588:	bc70      	pop	{r4, r5, r6}
   1058a:	4770      	bx	lr
   1058c:	f04f 30ff 	mov.w	r0, #4294967295
   10590:	4770      	bx	lr
   10592:	2000      	movs	r0, #0
   10594:	4770      	bx	lr
   10596:	2000      	movs	r0, #0
   10598:	4770      	bx	lr
   1059a:	f04f 30ff 	mov.w	r0, #4294967295
   1059e:	4770      	bx	lr
   105a0:	4770      	bx	lr
   105a2:	4770      	bx	lr
   105a4:	2000      	movs	r0, #0
   105a6:	4770      	bx	lr
   105a8:	2100      	movs	r1, #0
   105aa:	7001      	strb	r1, [r0, #0]
   105ac:	4770      	bx	lr
   105ae:	f04f 30ff 	mov.w	r0, #4294967295
   105b2:	4770      	bx	lr
   105b4:	f04f 30ff 	mov.w	r0, #4294967295
   105b8:	4770      	bx	lr
   105ba:	2100      	movs	r1, #0
   105bc:	7001      	strb	r1, [r0, #0]
   105be:	4770      	bx	lr
   105c0:	f04f 30ff 	mov.w	r0, #4294967295
   105c4:	4770      	bx	lr
   105c6:	f04f 30ff 	mov.w	r0, #4294967295
   105ca:	4770      	bx	lr
   105cc:	7800      	ldrb	r0, [r0, #0]
   105ce:	2800      	cmp	r0, #0
   105d0:	d001      	beq.n	105d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   105d2:	f06f 0015 	mvn.w	r0, #21
   105d6:	4770      	bx	lr
   105d8:	2000      	movs	r0, #0
   105da:	4770      	bx	lr
   105dc:	2200      	movs	r2, #0
   105de:	f000 b802 	b.w	105e6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

000105e2 <mpsl_fem_init>:
   105e2:	f7f7 beaf 	b.w	8344 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

000105e6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   105e6:	b570      	push	{r4, r5, r6, lr}
   105e8:	4614      	mov	r4, r2
   105ea:	460d      	mov	r5, r1
   105ec:	1b00      	subs	r0, r0, r4
   105ee:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   105f2:	4288      	cmp	r0, r1
   105f4:	da01      	bge.n	105fa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   105f6:	4608      	mov	r0, r1
   105f8:	e002      	b.n	10600 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   105fa:	287f      	cmp	r0, #127	; 0x7f
   105fc:	dd00      	ble.n	10600 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   105fe:	207f      	movs	r0, #127	; 0x7f
   10600:	4619      	mov	r1, r3
   10602:	b240      	sxtb	r0, r0
   10604:	f7f7 fed2 	bl	83ac <mpsl_tx_power_radio_supported_power_adjust>
   10608:	7028      	strb	r0, [r5, #0]
   1060a:	706c      	strb	r4, [r5, #1]
   1060c:	2100      	movs	r1, #0
   1060e:	4420      	add	r0, r4
   10610:	70a9      	strb	r1, [r5, #2]
   10612:	b240      	sxtb	r0, r0
   10614:	bd70      	pop	{r4, r5, r6, pc}
   10616:	080c      	.short	0x080c
   10618:	010d1702 	.word	0x010d1702
   1061c:	09090201 	.word	0x09090201
   10620:	02060101 	.word	0x02060101
   10624:	03181809 	.word	0x03181809
   10628:	09090101 	.word	0x09090101
   1062c:	03050303 	.word	0x03050303
   10630:	02230102 	.word	0x02230102
   10634:	10092402 	.word	0x10092402
   10638:	05050404 	.word	0x05050404
   1063c:	0b040b0b 	.word	0x0b040b0b
   10640:	2b          	.byte	0x2b
   10641:	d8          	.byte	0xd8
   10642:	f0ec      	.short	0xf0ec
   10644:	00fcf8f4 	.word	0x00fcf8f4
   10648:	05040302 	.word	0x05040302
   1064c:	00080706 	.word	0x00080706
	...
   10660:	01000000 	.word	0x01000000
   10664:	02010101 	.word	0x02010101
   10668:	03020202 	.word	0x03020202
   1066c:	04030303 	.word	0x04030303
   10670:	05040404 	.word	0x05040404
   10674:	06050505 	.word	0x06050505
   10678:	09080706 	.word	0x09080706
   1067c:	0d0c0b0a 	.word	0x0d0c0b0a
	...
   10694:	01010101 	.word	0x01010101
   10698:	02020202 	.word	0x02020202
   1069c:	03030303 	.word	0x03030303
   106a0:	04040404 	.word	0x04040404
   106a4:	05050505 	.word	0x05050505
   106a8:	08060606 	.word	0x08060606
   106ac:	00000009 	.word	0x00000009

000106b0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106b4:	b09f      	sub	sp, #124	; 0x7c
   106b6:	4682      	mov	sl, r0
   106b8:	9103      	str	r1, [sp, #12]
   106ba:	4616      	mov	r6, r2
   106bc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   106be:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   106c0:	7830      	ldrb	r0, [r6, #0]
   106c2:	b910      	cbnz	r0, 106ca <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   106c4:	4628      	mov	r0, r5
   106c6:	f000 bd85 	b.w	111d4 <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   106ca:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   106cc:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   106ce:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   106d0:	d006      	beq.n	106e0 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   106d2:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   106d4:	47d0      	blx	sl
   106d6:	2800      	cmp	r0, #0
   106d8:	f2c0 857c 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   106dc:	3501      	adds	r5, #1
		if (bps == NULL) {
   106de:	e227      	b.n	10b30 <z_cbvprintf_impl+0x480>
		} state = {
   106e0:	2218      	movs	r2, #24
   106e2:	2100      	movs	r1, #0
   106e4:	a810      	add	r0, sp, #64	; 0x40
   106e6:	f00e fd63 	bl	1f1b0 <memset>
	if (*sp == '%') {
   106ea:	7873      	ldrb	r3, [r6, #1]
   106ec:	2b25      	cmp	r3, #37	; 0x25
   106ee:	d07d      	beq.n	107ec <z_cbvprintf_impl+0x13c>
   106f0:	2300      	movs	r3, #0
   106f2:	1c70      	adds	r0, r6, #1
   106f4:	4698      	mov	r8, r3
   106f6:	469e      	mov	lr, r3
   106f8:	469c      	mov	ip, r3
   106fa:	461f      	mov	r7, r3
   106fc:	4601      	mov	r1, r0
		switch (*sp) {
   106fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   10702:	2a2b      	cmp	r2, #43	; 0x2b
   10704:	f000 80a1 	beq.w	1084a <z_cbvprintf_impl+0x19a>
   10708:	f200 8098 	bhi.w	1083c <z_cbvprintf_impl+0x18c>
   1070c:	2a20      	cmp	r2, #32
   1070e:	f000 809f 	beq.w	10850 <z_cbvprintf_impl+0x1a0>
   10712:	2a23      	cmp	r2, #35	; 0x23
   10714:	f000 809f 	beq.w	10856 <z_cbvprintf_impl+0x1a6>
   10718:	b12b      	cbz	r3, 10726 <z_cbvprintf_impl+0x76>
   1071a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1071e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10722:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   10726:	f1b8 0f00 	cmp.w	r8, #0
   1072a:	d005      	beq.n	10738 <z_cbvprintf_impl+0x88>
   1072c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10730:	f043 0320 	orr.w	r3, r3, #32
   10734:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   10738:	f1be 0f00 	cmp.w	lr, #0
   1073c:	d005      	beq.n	1074a <z_cbvprintf_impl+0x9a>
   1073e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10742:	f043 0310 	orr.w	r3, r3, #16
   10746:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1074a:	f1bc 0f00 	cmp.w	ip, #0
   1074e:	d005      	beq.n	1075c <z_cbvprintf_impl+0xac>
   10750:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10754:	f043 0308 	orr.w	r3, r3, #8
   10758:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1075c:	b12f      	cbz	r7, 1076a <z_cbvprintf_impl+0xba>
   1075e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10762:	f043 0304 	orr.w	r3, r3, #4
   10766:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   1076a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1076e:	f003 0044 	and.w	r0, r3, #68	; 0x44
   10772:	2844      	cmp	r0, #68	; 0x44
   10774:	d103      	bne.n	1077e <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   10776:	f36f 1386 	bfc	r3, #6, #1
   1077a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   1077e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   10782:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   10784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10788:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1078c:	d17f      	bne.n	1088e <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
   1078e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10792:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   10796:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   10798:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
   1079c:	781a      	ldrb	r2, [r3, #0]
   1079e:	2a2e      	cmp	r2, #46	; 0x2e
   107a0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   107a4:	bf0c      	ite	eq
   107a6:	2101      	moveq	r1, #1
   107a8:	2100      	movne	r1, #0
   107aa:	f361 0241 	bfi	r2, r1, #1, #1
   107ae:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   107b2:	d178      	bne.n	108a6 <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
   107b4:	785a      	ldrb	r2, [r3, #1]
   107b6:	2a2a      	cmp	r2, #42	; 0x2a
   107b8:	d06e      	beq.n	10898 <z_cbvprintf_impl+0x1e8>
	++sp;
   107ba:	3301      	adds	r3, #1
	size_t val = 0;
   107bc:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   107be:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   107c2:	4619      	mov	r1, r3
   107c4:	f811 0b01 	ldrb.w	r0, [r1], #1
   107c8:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   107cc:	2f09      	cmp	r7, #9
   107ce:	f240 80ad 	bls.w	1092c <z_cbvprintf_impl+0x27c>
	conv->unsupported |= ((conv->prec_value < 0)
   107d2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
   107d6:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   107d8:	f3c1 0040 	ubfx	r0, r1, #1, #1
   107dc:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   107e0:	460a      	mov	r2, r1
   107e2:	f360 0241 	bfi	r2, r0, #1, #1
   107e6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   107ea:	e05c      	b.n	108a6 <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
   107ec:	1cb2      	adds	r2, r6, #2
   107ee:	9206      	str	r2, [sp, #24]
   107f0:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   107f4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   107f8:	07d9      	lsls	r1, r3, #31
   107fa:	f140 8150 	bpl.w	10a9e <z_cbvprintf_impl+0x3ee>
			width = va_arg(ap, int);
   107fe:	f854 2b04 	ldr.w	r2, [r4], #4
   10802:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   10804:	2a00      	cmp	r2, #0
   10806:	da08      	bge.n	1081a <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
   10808:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   1080c:	f042 0204 	orr.w	r2, r2, #4
   10810:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   10814:	9a04      	ldr	r2, [sp, #16]
   10816:	4252      	negs	r2, r2
		int width = -1;
   10818:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   1081a:	075a      	lsls	r2, r3, #29
   1081c:	f140 8147 	bpl.w	10aae <z_cbvprintf_impl+0x3fe>
			int arg = va_arg(ap, int);
   10820:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   10824:	2f00      	cmp	r7, #0
   10826:	f280 8146 	bge.w	10ab6 <z_cbvprintf_impl+0x406>
				conv->prec_present = false;
   1082a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1082e:	f36f 0341 	bfc	r3, #1, #1
   10832:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   10836:	f04f 37ff 	mov.w	r7, #4294967295
   1083a:	e13c      	b.n	10ab6 <z_cbvprintf_impl+0x406>
		switch (*sp) {
   1083c:	2a2d      	cmp	r2, #45	; 0x2d
   1083e:	d00d      	beq.n	1085c <z_cbvprintf_impl+0x1ac>
   10840:	2a30      	cmp	r2, #48	; 0x30
   10842:	f47f af69 	bne.w	10718 <z_cbvprintf_impl+0x68>
   10846:	2301      	movs	r3, #1
	} while (loop);
   10848:	e758      	b.n	106fc <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   1084a:	f04f 0c01 	mov.w	ip, #1
   1084e:	e755      	b.n	106fc <z_cbvprintf_impl+0x4c>
   10850:	f04f 0e01 	mov.w	lr, #1
   10854:	e752      	b.n	106fc <z_cbvprintf_impl+0x4c>
   10856:	f04f 0801 	mov.w	r8, #1
   1085a:	e74f      	b.n	106fc <z_cbvprintf_impl+0x4c>
   1085c:	2701      	movs	r7, #1
   1085e:	e74d      	b.n	106fc <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
   10860:	fb0e 7202 	mla	r2, lr, r2, r7
   10864:	3a30      	subs	r2, #48	; 0x30
   10866:	4603      	mov	r3, r0
   10868:	4618      	mov	r0, r3
   1086a:	f810 7b01 	ldrb.w	r7, [r0], #1
   1086e:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10872:	f1bc 0f09 	cmp.w	ip, #9
   10876:	d9f3      	bls.n	10860 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
   10878:	4299      	cmp	r1, r3
   1087a:	d08f      	beq.n	1079c <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
   1087c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
   10880:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   10882:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   10884:	f362 0141 	bfi	r1, r2, #1, #1
   10888:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
   1088c:	e786      	b.n	1079c <z_cbvprintf_impl+0xec>
   1088e:	460b      	mov	r3, r1
	size_t val = 0;
   10890:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10892:	f04f 0e0a 	mov.w	lr, #10
   10896:	e7e7      	b.n	10868 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
   10898:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1089c:	f042 0204 	orr.w	r2, r2, #4
   108a0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   108a4:	3302      	adds	r3, #2
	switch (*sp) {
   108a6:	781a      	ldrb	r2, [r3, #0]
   108a8:	2a6c      	cmp	r2, #108	; 0x6c
   108aa:	d05f      	beq.n	1096c <z_cbvprintf_impl+0x2bc>
   108ac:	d843      	bhi.n	10936 <z_cbvprintf_impl+0x286>
   108ae:	2a68      	cmp	r2, #104	; 0x68
   108b0:	d049      	beq.n	10946 <z_cbvprintf_impl+0x296>
   108b2:	2a6a      	cmp	r2, #106	; 0x6a
   108b4:	d063      	beq.n	1097e <z_cbvprintf_impl+0x2ce>
   108b6:	2a4c      	cmp	r2, #76	; 0x4c
   108b8:	d069      	beq.n	1098e <z_cbvprintf_impl+0x2de>
	conv->specifier = *sp++;
   108ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   108be:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
   108c0:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   108c2:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   108c6:	f200 80a9 	bhi.w	10a1c <z_cbvprintf_impl+0x36c>
   108ca:	2a6d      	cmp	r2, #109	; 0x6d
   108cc:	d86c      	bhi.n	109a8 <z_cbvprintf_impl+0x2f8>
   108ce:	2a69      	cmp	r2, #105	; 0x69
   108d0:	f200 80a4 	bhi.w	10a1c <z_cbvprintf_impl+0x36c>
   108d4:	2a57      	cmp	r2, #87	; 0x57
   108d6:	f200 8084 	bhi.w	109e2 <z_cbvprintf_impl+0x332>
   108da:	2a41      	cmp	r2, #65	; 0x41
   108dc:	d004      	beq.n	108e8 <z_cbvprintf_impl+0x238>
   108de:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   108e2:	2b02      	cmp	r3, #2
   108e4:	f200 809a 	bhi.w	10a1c <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_FP;
   108e8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   108ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   108f0:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   108f2:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   108f6:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   108fa:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   108fc:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
   10900:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   10904:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   10906:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   1090a:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   1090c:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   10910:	b2cb      	uxtb	r3, r1
   10912:	f100 80c2 	bmi.w	10a9a <z_cbvprintf_impl+0x3ea>
		if (conv->length_mod == LENGTH_L) {
   10916:	f003 0278 	and.w	r2, r3, #120	; 0x78
   1091a:	2a18      	cmp	r2, #24
   1091c:	f040 80ac 	bne.w	10a78 <z_cbvprintf_impl+0x3c8>
			conv->length_mod = LENGTH_NONE;
   10920:	f36f 03c6 	bfc	r3, #3, #4
   10924:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   10928:	2300      	movs	r3, #0
   1092a:	e09b      	b.n	10a64 <z_cbvprintf_impl+0x3b4>
		val = 10U * val + *sp++ - '0';
   1092c:	fb0c 0202 	mla	r2, ip, r2, r0
   10930:	3a30      	subs	r2, #48	; 0x30
   10932:	460b      	mov	r3, r1
   10934:	e745      	b.n	107c2 <z_cbvprintf_impl+0x112>
	switch (*sp) {
   10936:	2a74      	cmp	r2, #116	; 0x74
   10938:	d025      	beq.n	10986 <z_cbvprintf_impl+0x2d6>
   1093a:	2a7a      	cmp	r2, #122	; 0x7a
   1093c:	d1bd      	bne.n	108ba <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
   1093e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10942:	2106      	movs	r1, #6
   10944:	e00c      	b.n	10960 <z_cbvprintf_impl+0x2b0>
		if (*++sp == 'h') {
   10946:	785a      	ldrb	r2, [r3, #1]
   10948:	2a68      	cmp	r2, #104	; 0x68
   1094a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1094e:	d106      	bne.n	1095e <z_cbvprintf_impl+0x2ae>
			conv->length_mod = LENGTH_HH;
   10950:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10952:	f361 02c6 	bfi	r2, r1, #3, #4
   10956:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   1095a:	3302      	adds	r3, #2
   1095c:	e7ad      	b.n	108ba <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
   1095e:	2102      	movs	r1, #2
   10960:	f361 02c6 	bfi	r2, r1, #3, #4
   10964:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   10968:	3301      	adds	r3, #1
   1096a:	e7a6      	b.n	108ba <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
   1096c:	785a      	ldrb	r2, [r3, #1]
   1096e:	2a6c      	cmp	r2, #108	; 0x6c
   10970:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10974:	d101      	bne.n	1097a <z_cbvprintf_impl+0x2ca>
			conv->length_mod = LENGTH_LL;
   10976:	2104      	movs	r1, #4
   10978:	e7eb      	b.n	10952 <z_cbvprintf_impl+0x2a2>
			conv->length_mod = LENGTH_L;
   1097a:	2103      	movs	r1, #3
   1097c:	e7f0      	b.n	10960 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_J;
   1097e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10982:	2105      	movs	r1, #5
   10984:	e7ec      	b.n	10960 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_T;
   10986:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1098a:	2107      	movs	r1, #7
   1098c:	e7e8      	b.n	10960 <z_cbvprintf_impl+0x2b0>
		conv->unsupported = true;
   1098e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   10992:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   10996:	f022 0202 	bic.w	r2, r2, #2
   1099a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1099e:	f042 0202 	orr.w	r2, r2, #2
   109a2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   109a6:	e7df      	b.n	10968 <z_cbvprintf_impl+0x2b8>
	switch (conv->specifier) {
   109a8:	3a6e      	subs	r2, #110	; 0x6e
   109aa:	b2d3      	uxtb	r3, r2
   109ac:	2201      	movs	r2, #1
   109ae:	409a      	lsls	r2, r3
   109b0:	f240 4382 	movw	r3, #1154	; 0x482
   109b4:	421a      	tst	r2, r3
   109b6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   109ba:	d136      	bne.n	10a2a <z_cbvprintf_impl+0x37a>
   109bc:	f012 0f24 	tst.w	r2, #36	; 0x24
   109c0:	d15e      	bne.n	10a80 <z_cbvprintf_impl+0x3d0>
   109c2:	07d1      	lsls	r1, r2, #31
   109c4:	d52a      	bpl.n	10a1c <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_PTR;
   109c6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   109ca:	f003 0378 	and.w	r3, r3, #120	; 0x78
   109ce:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   109d2:	2103      	movs	r1, #3
   109d4:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   109d8:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   109da:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   109de:	4143      	adcs	r3, r0
   109e0:	e040      	b.n	10a64 <z_cbvprintf_impl+0x3b4>
	switch (conv->specifier) {
   109e2:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   109e6:	b2c9      	uxtb	r1, r1
   109e8:	2001      	movs	r0, #1
   109ea:	fa00 f101 	lsl.w	r1, r0, r1
   109ee:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   109f2:	f47f af79 	bne.w	108e8 <z_cbvprintf_impl+0x238>
   109f6:	f640 0301 	movw	r3, #2049	; 0x801
   109fa:	4219      	tst	r1, r3
   109fc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   10a00:	d119      	bne.n	10a36 <z_cbvprintf_impl+0x386>
   10a02:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   10a06:	d009      	beq.n	10a1c <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_SINT;
   10a08:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   10a0c:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a10:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10a14:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10a16:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a1a:	d185      	bne.n	10928 <z_cbvprintf_impl+0x278>
		conv->invalid = true;
   10a1c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10a20:	f043 0301 	orr.w	r3, r3, #1
   10a24:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   10a28:	e77e      	b.n	10928 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_UINT;
   10a2a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   10a2e:	2102      	movs	r1, #2
   10a30:	f361 0202 	bfi	r2, r1, #0, #3
   10a34:	e7ec      	b.n	10a10 <z_cbvprintf_impl+0x360>
   10a36:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   10a3a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a3c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10a40:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a44:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10a46:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   10a4a:	bf02      	ittt	eq
   10a4c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   10a50:	f041 0101 	orreq.w	r1, r1, #1
   10a54:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   10a58:	2a63      	cmp	r2, #99	; 0x63
   10a5a:	f47f af65 	bne.w	10928 <z_cbvprintf_impl+0x278>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10a5e:	3b00      	subs	r3, #0
   10a60:	bf18      	it	ne
   10a62:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10a64:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   10a68:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10a6c:	430b      	orrs	r3, r1
   10a6e:	f363 0241 	bfi	r2, r3, #1, #1
   10a72:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   10a76:	e6bd      	b.n	107f4 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
   10a78:	f013 0f38 	tst.w	r3, #56	; 0x38
   10a7c:	d1ce      	bne.n	10a1c <z_cbvprintf_impl+0x36c>
   10a7e:	e753      	b.n	10928 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_PTR;
   10a80:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   10a84:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   10a86:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   10a8a:	f361 0202 	bfi	r2, r1, #0, #3
   10a8e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   10a92:	bf14      	ite	ne
   10a94:	2301      	movne	r3, #1
   10a96:	2300      	moveq	r3, #0
   10a98:	e7e4      	b.n	10a64 <z_cbvprintf_impl+0x3b4>
			unsupported = true;
   10a9a:	2301      	movs	r3, #1
   10a9c:	e7e2      	b.n	10a64 <z_cbvprintf_impl+0x3b4>
		} else if (conv->width_present) {
   10a9e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   10aa2:	2a00      	cmp	r2, #0
			width = conv->width_value;
   10aa4:	bfb4      	ite	lt
   10aa6:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
   10aa8:	f04f 32ff 	movge.w	r2, #4294967295
   10aac:	e6b4      	b.n	10818 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
   10aae:	079f      	lsls	r7, r3, #30
   10ab0:	f57f aec1 	bpl.w	10836 <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
   10ab4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   10ab6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10ab8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   10abc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   10ac0:	f003 0207 	and.w	r2, r3, #7
   10ac4:	2a04      	cmp	r2, #4
   10ac6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10aca:	d107      	bne.n	10adc <z_cbvprintf_impl+0x42c>
		    && !conv->prec_present) {
   10acc:	0790      	lsls	r0, r2, #30
   10ace:	d405      	bmi.n	10adc <z_cbvprintf_impl+0x42c>
			if (conv->specifier_a) {
   10ad0:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   10ad4:	2900      	cmp	r1, #0
   10ad6:	bfac      	ite	ge
   10ad8:	2706      	movge	r7, #6
   10ada:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   10adc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10ae0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10ae2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10ae6:	d133      	bne.n	10b50 <z_cbvprintf_impl+0x4a0>
			switch (length_mod) {
   10ae8:	1ed3      	subs	r3, r2, #3
   10aea:	2b04      	cmp	r3, #4
   10aec:	d804      	bhi.n	10af8 <z_cbvprintf_impl+0x448>
   10aee:	e8df f003 	tbb	[pc, r3]
   10af2:	4621      	.short	0x4621
   10af4:	2146      	.short	0x2146
   10af6:	21          	.byte	0x21
   10af7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   10af8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   10afa:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   10afc:	ea4f 71e3 	mov.w	r1, r3, asr #31
   10b00:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   10b04:	d11c      	bne.n	10b40 <z_cbvprintf_impl+0x490>
				value->sint = (signed char)value->sint;
   10b06:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   10b0a:	17d9      	asrs	r1, r3, #31
   10b0c:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   10b10:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   10b12:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10b16:	9307      	str	r3, [sp, #28]
   10b18:	0799      	lsls	r1, r3, #30
   10b1a:	d050      	beq.n	10bbe <z_cbvprintf_impl+0x50e>
			OUTS(sp, fp);
   10b1c:	9b06      	ldr	r3, [sp, #24]
   10b1e:	9903      	ldr	r1, [sp, #12]
   10b20:	4632      	mov	r2, r6
   10b22:	4650      	mov	r0, sl
   10b24:	f00d fde5 	bl	1e6f2 <outs>
   10b28:	2800      	cmp	r0, #0
   10b2a:	f2c0 8353 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   10b2e:	4405      	add	r5, r0
			continue;
   10b30:	9e06      	ldr	r6, [sp, #24]
   10b32:	e5c5      	b.n	106c0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10b34:	f854 3b04 	ldr.w	r3, [r4], #4
   10b38:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   10b3a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   10b3e:	e7e8      	b.n	10b12 <z_cbvprintf_impl+0x462>
			} else if (length_mod == LENGTH_H) {
   10b40:	2a02      	cmp	r2, #2
   10b42:	d1e5      	bne.n	10b10 <z_cbvprintf_impl+0x460>
				value->sint = (short)value->sint;
   10b44:	b219      	sxth	r1, r3
   10b46:	f343 33c0 	sbfx	r3, r3, #15, #1
   10b4a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   10b4e:	e7df      	b.n	10b10 <z_cbvprintf_impl+0x460>
		} else if (specifier_cat == SPECIFIER_UINT) {
   10b50:	2b02      	cmp	r3, #2
   10b52:	d124      	bne.n	10b9e <z_cbvprintf_impl+0x4ee>
			switch (length_mod) {
   10b54:	1ed3      	subs	r3, r2, #3
   10b56:	2b04      	cmp	r3, #4
   10b58:	d804      	bhi.n	10b64 <z_cbvprintf_impl+0x4b4>
   10b5a:	e8df f003 	tbb	[pc, r3]
   10b5e:	1018      	.short	0x1018
   10b60:	1810      	.short	0x1810
   10b62:	18          	.byte	0x18
   10b63:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   10b64:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
   10b66:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   10b6a:	f04f 0100 	mov.w	r1, #0
   10b6e:	d014      	beq.n	10b9a <z_cbvprintf_impl+0x4ea>
			} else if (length_mod == LENGTH_H) {
   10b70:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   10b72:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   10b76:	d1cc      	bne.n	10b12 <z_cbvprintf_impl+0x462>
				value->uint = (unsigned short)value->uint;
   10b78:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   10b7a:	9310      	str	r3, [sp, #64]	; 0x40
   10b7c:	e7c9      	b.n	10b12 <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap,
   10b7e:	3407      	adds	r4, #7
   10b80:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   10b84:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   10b88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   10b8c:	e7c1      	b.n	10b12 <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
   10b8e:	f854 3b04 	ldr.w	r3, [r4], #4
   10b92:	9310      	str	r3, [sp, #64]	; 0x40
   10b94:	2300      	movs	r3, #0
   10b96:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   10b98:	e7bb      	b.n	10b12 <z_cbvprintf_impl+0x462>
				value->uint = (unsigned char)value->uint;
   10b9a:	b2db      	uxtb	r3, r3
   10b9c:	e7cd      	b.n	10b3a <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
   10b9e:	2b04      	cmp	r3, #4
   10ba0:	d108      	bne.n	10bb4 <z_cbvprintf_impl+0x504>
					(sint_value_type)va_arg(ap, long long);
   10ba2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   10ba4:	f024 0407 	bic.w	r4, r4, #7
   10ba8:	e9d4 0100 	ldrd	r0, r1, [r4]
   10bac:	3408      	adds	r4, #8
   10bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10bb2:	e7ae      	b.n	10b12 <z_cbvprintf_impl+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10bb4:	2b03      	cmp	r3, #3
   10bb6:	d1ac      	bne.n	10b12 <z_cbvprintf_impl+0x462>
			value->ptr = va_arg(ap, void *);
   10bb8:	f854 3b04 	ldr.w	r3, [r4], #4
   10bbc:	e7dd      	b.n	10b7a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   10bbe:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   10bc2:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   10bc6:	d8b3      	bhi.n	10b30 <z_cbvprintf_impl+0x480>
   10bc8:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   10bcc:	d849      	bhi.n	10c62 <z_cbvprintf_impl+0x5b2>
   10bce:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   10bd2:	f000 8091 	beq.w	10cf8 <z_cbvprintf_impl+0x648>
   10bd6:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   10bda:	d9a9      	bls.n	10b30 <z_cbvprintf_impl+0x480>
   10bdc:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   10be0:	d003      	beq.n	10bea <z_cbvprintf_impl+0x53a>
   10be2:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   10be6:	2a02      	cmp	r2, #2
   10be8:	d8a2      	bhi.n	10b30 <z_cbvprintf_impl+0x480>
	} u = {
   10bea:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   10bee:	2a00      	cmp	r2, #0
   10bf0:	f2c0 8136 	blt.w	10e60 <z_cbvprintf_impl+0x7b0>
	} else if (conv->flag_plus) {
   10bf4:	9b07      	ldr	r3, [sp, #28]
   10bf6:	071e      	lsls	r6, r3, #28
   10bf8:	f100 8135 	bmi.w	10e66 <z_cbvprintf_impl+0x7b6>
	} else if (conv->flag_space) {
   10bfc:	f3c3 1900 	ubfx	r9, r3, #4, #1
   10c00:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   10c04:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   10c08:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   10c0c:	2800      	cmp	r0, #0
   10c0e:	f040 812d 	bne.w	10e6c <z_cbvprintf_impl+0x7bc>
   10c12:	ea51 0602 	orrs.w	r6, r1, r2
   10c16:	bf14      	ite	ne
   10c18:	2601      	movne	r6, #1
   10c1a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   10c1c:	02d2      	lsls	r2, r2, #11
   10c1e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   10c22:	02c9      	lsls	r1, r1, #11
		c = 'f';
   10c24:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   10c28:	ea40 0e01 	orr.w	lr, r0, r1
   10c2c:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   10c30:	bf08      	it	eq
   10c32:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   10c36:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   10c3a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   10c3e:	f000 8197 	beq.w	10f70 <z_cbvprintf_impl+0x8c0>
		if (is_subnormal) {
   10c42:	2e00      	cmp	r6, #0
   10c44:	f040 8144 	bne.w	10ed0 <z_cbvprintf_impl+0x820>
		fract |= BIT_63;
   10c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10c4a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   10c4e:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   10c52:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   10c54:	2000      	movs	r0, #0
   10c56:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   10c5a:	4606      	mov	r6, r0
		fract *= 5U;
   10c5c:	f04f 0c05 	mov.w	ip, #5
   10c60:	e150      	b.n	10f04 <z_cbvprintf_impl+0x854>
		switch (conv->specifier) {
   10c62:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   10c66:	2920      	cmp	r1, #32
   10c68:	f63f af62 	bhi.w	10b30 <z_cbvprintf_impl+0x480>
   10c6c:	a001      	add	r0, pc, #4	; (adr r0, 10c74 <z_cbvprintf_impl+0x5c4>)
   10c6e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   10c72:	bf00      	nop
   10c74:	00010dff 	.word	0x00010dff
   10c78:	00010b31 	.word	0x00010b31
   10c7c:	00010b31 	.word	0x00010b31
   10c80:	00010b31 	.word	0x00010b31
   10c84:	00010b31 	.word	0x00010b31
   10c88:	00010b31 	.word	0x00010b31
   10c8c:	00010b31 	.word	0x00010b31
   10c90:	00010b31 	.word	0x00010b31
   10c94:	00010b31 	.word	0x00010b31
   10c98:	00010beb 	.word	0x00010beb
   10c9c:	00010b31 	.word	0x00010b31
   10ca0:	00010d83 	.word	0x00010d83
   10ca4:	00010d97 	.word	0x00010d97
   10ca8:	00010beb 	.word	0x00010beb
   10cac:	00010beb 	.word	0x00010beb
   10cb0:	00010beb 	.word	0x00010beb
   10cb4:	00010b31 	.word	0x00010b31
   10cb8:	00010d97 	.word	0x00010d97
   10cbc:	00010b31 	.word	0x00010b31
   10cc0:	00010b31 	.word	0x00010b31
   10cc4:	00010b31 	.word	0x00010b31
   10cc8:	00010b31 	.word	0x00010b31
   10ccc:	00010e39 	.word	0x00010e39
   10cd0:	00010dff 	.word	0x00010dff
   10cd4:	00010e05 	.word	0x00010e05
   10cd8:	00010b31 	.word	0x00010b31
   10cdc:	00010b31 	.word	0x00010b31
   10ce0:	00010cff 	.word	0x00010cff
   10ce4:	00010b31 	.word	0x00010b31
   10ce8:	00010dff 	.word	0x00010dff
   10cec:	00010b31 	.word	0x00010b31
   10cf0:	00010b31 	.word	0x00010b31
   10cf4:	00010dff 	.word	0x00010dff
			OUTC('%');
   10cf8:	9903      	ldr	r1, [sp, #12]
   10cfa:	4658      	mov	r0, fp
   10cfc:	e4ea      	b.n	106d4 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   10cfe:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   10d00:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   10d02:	db3a      	blt.n	10d7a <z_cbvprintf_impl+0x6ca>
				len = strnlen(bps, precision);
   10d04:	4639      	mov	r1, r7
   10d06:	4630      	mov	r0, r6
   10d08:	f00e fa22 	bl	1f150 <strnlen>
			bpe = bps + len;
   10d0c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   10d0e:	2e00      	cmp	r6, #0
   10d10:	f43f af0e 	beq.w	10b30 <z_cbvprintf_impl+0x480>
		char sign = 0;
   10d14:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   10d18:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   10d1c:	f013 0210 	ands.w	r2, r3, #16
   10d20:	9205      	str	r2, [sp, #20]
   10d22:	f000 824c 	beq.w	111be <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   10d26:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   10d28:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   10d2c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   10d30:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   10d32:	bf18      	it	ne
   10d34:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   10d36:	f8cd 801c 	str.w	r8, [sp, #28]
   10d3a:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   10d3c:	bf18      	it	ne
   10d3e:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   10d40:	9b04      	ldr	r3, [sp, #16]
   10d42:	2b00      	cmp	r3, #0
   10d44:	f340 8256 	ble.w	111f4 <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   10d48:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   10d4c:	1a1b      	subs	r3, r3, r0
   10d4e:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   10d50:	0753      	lsls	r3, r2, #29
   10d52:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   10d56:	f100 824d 	bmi.w	111f4 <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   10d5a:	0650      	lsls	r0, r2, #25
   10d5c:	f140 823d 	bpl.w	111da <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   10d60:	f1b9 0f00 	cmp.w	r9, #0
   10d64:	d007      	beq.n	10d76 <z_cbvprintf_impl+0x6c6>
						OUTC(sign);
   10d66:	9903      	ldr	r1, [sp, #12]
   10d68:	4648      	mov	r0, r9
   10d6a:	47d0      	blx	sl
   10d6c:	2800      	cmp	r0, #0
   10d6e:	f2c0 8231 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   10d72:	3501      	adds	r5, #1
						sign = 0;
   10d74:	46d9      	mov	r9, fp
					pad = '0';
   10d76:	2230      	movs	r2, #48	; 0x30
   10d78:	e230      	b.n	111dc <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   10d7a:	4630      	mov	r0, r6
   10d7c:	f00e f9e1 	bl	1f142 <strlen>
   10d80:	e7c4      	b.n	10d0c <z_cbvprintf_impl+0x65c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10d84:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
   10d88:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
   10d8c:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   10d90:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   10d92:	2001      	movs	r0, #1
   10d94:	e7c0      	b.n	10d18 <z_cbvprintf_impl+0x668>
			if (conv->flag_plus) {
   10d96:	9b07      	ldr	r3, [sp, #28]
   10d98:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   10d9a:	bf58      	it	pl
   10d9c:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
   10da0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   10da4:	bf54      	ite	pl
   10da6:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
   10daa:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
   10dae:	2b00      	cmp	r3, #0
   10db0:	da06      	bge.n	10dc0 <z_cbvprintf_impl+0x710>
				value->uint = (uint_value_type)-sint;
   10db2:	4252      	negs	r2, r2
   10db4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10db8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   10dbc:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   10dc0:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   10dc4:	9300      	str	r3, [sp, #0]
   10dc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10dca:	ab17      	add	r3, sp, #92	; 0x5c
   10dcc:	aa12      	add	r2, sp, #72	; 0x48
   10dce:	f00d fc4a 	bl	1e666 <encode_uint>
   10dd2:	4606      	mov	r6, r0
			if (precision >= 0) {
   10dd4:	2f00      	cmp	r7, #0
   10dd6:	db0c      	blt.n	10df2 <z_cbvprintf_impl+0x742>
				conv->flag_zero = false;
   10dd8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   10ddc:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   10de0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   10de2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10de6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   10de8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   10dec:	d901      	bls.n	10df2 <z_cbvprintf_impl+0x742>
					conv->pad0_value = precision - (int)len;
   10dee:	1afb      	subs	r3, r7, r3
   10df0:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   10df2:	2e00      	cmp	r6, #0
   10df4:	f43f ae9c 	beq.w	10b30 <z_cbvprintf_impl+0x480>
   10df8:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   10dfc:	e056      	b.n	10eac <z_cbvprintf_impl+0x7fc>
		switch (conv->specifier) {
   10dfe:	f04f 0900 	mov.w	r9, #0
   10e02:	e7dd      	b.n	10dc0 <z_cbvprintf_impl+0x710>
			if (value->ptr != NULL) {
   10e04:	9810      	ldr	r0, [sp, #64]	; 0x40
   10e06:	2800      	cmp	r0, #0
   10e08:	f000 81d4 	beq.w	111b4 <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10e0c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   10e10:	9300      	str	r3, [sp, #0]
   10e12:	aa12      	add	r2, sp, #72	; 0x48
   10e14:	ab17      	add	r3, sp, #92	; 0x5c
   10e16:	2100      	movs	r1, #0
   10e18:	f00d fc25 	bl	1e666 <encode_uint>
				conv->altform_0c = true;
   10e1c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   10e20:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10e24:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10e28:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10e2c:	4606      	mov	r6, r0
				conv->altform_0c = true;
   10e2e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
   10e32:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
   10e36:	e7cd      	b.n	10dd4 <z_cbvprintf_impl+0x724>
				store_count(conv, value->ptr, count);
   10e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   10e3a:	2a07      	cmp	r2, #7
   10e3c:	f63f ae78 	bhi.w	10b30 <z_cbvprintf_impl+0x480>
   10e40:	e8df f002 	tbb	[pc, r2]
   10e44:	0c06040c 	.word	0x0c06040c
   10e48:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   10e4c:	701d      	strb	r5, [r3, #0]
		break;
   10e4e:	e66f      	b.n	10b30 <z_cbvprintf_impl+0x480>
		*(short *)dp = (short)count;
   10e50:	801d      	strh	r5, [r3, #0]
		break;
   10e52:	e66d      	b.n	10b30 <z_cbvprintf_impl+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   10e54:	17ea      	asrs	r2, r5, #31
   10e56:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   10e5a:	e669      	b.n	10b30 <z_cbvprintf_impl+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10e5c:	601d      	str	r5, [r3, #0]
		break;
   10e5e:	e667      	b.n	10b30 <z_cbvprintf_impl+0x480>
		*sign = '-';
   10e60:	f04f 092d 	mov.w	r9, #45	; 0x2d
   10e64:	e6ce      	b.n	10c04 <z_cbvprintf_impl+0x554>
		*sign = '+';
   10e66:	f04f 092b 	mov.w	r9, #43	; 0x2b
   10e6a:	e6cb      	b.n	10c04 <z_cbvprintf_impl+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   10e6c:	f240 76ff 	movw	r6, #2047	; 0x7ff
   10e70:	42b0      	cmp	r0, r6
   10e72:	d12a      	bne.n	10eca <z_cbvprintf_impl+0x81a>
		if (fract == 0) {
   10e74:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   10e76:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   10e7a:	d11e      	bne.n	10eba <z_cbvprintf_impl+0x80a>
			if (isupper((unsigned char)c)) {
   10e7c:	2b1a      	cmp	r3, #26
   10e7e:	bf35      	itete	cc
   10e80:	2349      	movcc	r3, #73	; 0x49
   10e82:	2369      	movcs	r3, #105	; 0x69
   10e84:	214e      	movcc	r1, #78	; 0x4e
   10e86:	216e      	movcs	r1, #110	; 0x6e
   10e88:	bf34      	ite	cc
   10e8a:	2246      	movcc	r2, #70	; 0x46
   10e8c:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
   10e8e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   10e92:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   10e96:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   10e9a:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   10e9e:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   10ea2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   10ea6:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   10eaa:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   10eac:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   10eae:	f1b9 0f00 	cmp.w	r9, #0
   10eb2:	f43f af31 	beq.w	10d18 <z_cbvprintf_impl+0x668>
			nj_len += 1U;
   10eb6:	3001      	adds	r0, #1
   10eb8:	e72e      	b.n	10d18 <z_cbvprintf_impl+0x668>
			if (isupper((unsigned char)c)) {
   10eba:	2b19      	cmp	r3, #25
   10ebc:	bf8b      	itete	hi
   10ebe:	236e      	movhi	r3, #110	; 0x6e
   10ec0:	234e      	movls	r3, #78	; 0x4e
   10ec2:	2161      	movhi	r1, #97	; 0x61
   10ec4:	2141      	movls	r1, #65	; 0x41
   10ec6:	461a      	mov	r2, r3
   10ec8:	e7e1      	b.n	10e8e <z_cbvprintf_impl+0x7de>
	bool is_subnormal = (expo == 0) && (fract != 0);
   10eca:	2600      	movs	r6, #0
   10ecc:	e6a6      	b.n	10c1c <z_cbvprintf_impl+0x56c>
				expo--;
   10ece:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   10ed0:	1849      	adds	r1, r1, r1
   10ed2:	4152      	adcs	r2, r2
   10ed4:	2a00      	cmp	r2, #0
   10ed6:	dafa      	bge.n	10ece <z_cbvprintf_impl+0x81e>
   10ed8:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   10edc:	e6b4      	b.n	10c48 <z_cbvprintf_impl+0x598>
			fract >>= 1;
   10ede:	0849      	lsrs	r1, r1, #1
   10ee0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   10ee4:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   10ee6:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   10eea:	4640      	mov	r0, r8
			expo++;
   10eec:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   10ef0:	d2f5      	bcs.n	10ede <z_cbvprintf_impl+0x82e>
		fract *= 5U;
   10ef2:	fb0c fe02 	mul.w	lr, ip, r2
   10ef6:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
   10efa:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
   10efe:	4472      	add	r2, lr
		decexp--;
   10f00:	3e01      	subs	r6, #1
   10f02:	2001      	movs	r0, #1
	while (expo < -2) {
   10f04:	f118 0f02 	cmn.w	r8, #2
   10f08:	dbe9      	blt.n	10ede <z_cbvprintf_impl+0x82e>
   10f0a:	b108      	cbz	r0, 10f10 <z_cbvprintf_impl+0x860>
   10f0c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
   10f10:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
   10f14:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   10f18:	dc2d      	bgt.n	10f76 <z_cbvprintf_impl+0x8c6>
	fract >>= (4 - expo);
   10f1a:	f1c8 0004 	rsb	r0, r8, #4
   10f1e:	f1a0 0c20 	sub.w	ip, r0, #32
   10f22:	f108 081c 	add.w	r8, r8, #28
   10f26:	40c2      	lsrs	r2, r0
   10f28:	fa01 f808 	lsl.w	r8, r1, r8
   10f2c:	fa21 fc0c 	lsr.w	ip, r1, ip
   10f30:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   10f32:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   10f36:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   10f3a:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   10f3c:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   10f40:	d13a      	bne.n	10fb8 <z_cbvprintf_impl+0x908>
		if (decexp < (-4 + 1) || decexp > precision) {
   10f42:	1cf0      	adds	r0, r6, #3
   10f44:	db01      	blt.n	10f4a <z_cbvprintf_impl+0x89a>
   10f46:	42b7      	cmp	r7, r6
   10f48:	da2b      	bge.n	10fa2 <z_cbvprintf_impl+0x8f2>
			c += 'e' - 'g';  /* e or E */
   10f4a:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   10f4e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   10f50:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   10f54:	dd7d      	ble.n	11052 <z_cbvprintf_impl+0x9a2>
		if (!conv->flag_hash && (precision > 0)) {
   10f56:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   10f5a:	0683      	lsls	r3, r0, #26
				precision--;
   10f5c:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   10f60:	d477      	bmi.n	11052 <z_cbvprintf_impl+0x9a2>
   10f62:	1e3b      	subs	r3, r7, #0
   10f64:	bf18      	it	ne
   10f66:	2301      	movne	r3, #1
	bool prune_zero = false;
   10f68:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   10f6a:	f107 0801 	add.w	r8, r7, #1
   10f6e:	e02d      	b.n	10fcc <z_cbvprintf_impl+0x91c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   10f70:	f04f 0800 	mov.w	r8, #0
   10f74:	e66e      	b.n	10c54 <z_cbvprintf_impl+0x5a4>
		fract += 2;
   10f76:	3202      	adds	r2, #2
   10f78:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   10f7c:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
   10f7e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   10f82:	f00d fb41 	bl	1e608 <_ldiv5>
		expo--;
   10f86:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
   10f8a:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   10f8e:	3601      	adds	r6, #1
			fract <<= 1;
   10f90:	1892      	adds	r2, r2, r2
   10f92:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   10f94:	2900      	cmp	r1, #0
			expo--;
   10f96:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
   10f9a:	daf9      	bge.n	10f90 <z_cbvprintf_impl+0x8e0>
   10f9c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   10fa0:	e7b6      	b.n	10f10 <z_cbvprintf_impl+0x860>
		if (!conv->flag_hash && (precision > 0)) {
   10fa2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10fa6:	0698      	lsls	r0, r3, #26
			precision -= decexp;
   10fa8:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   10fac:	d44f      	bmi.n	1104e <z_cbvprintf_impl+0x99e>
   10fae:	1e3b      	subs	r3, r7, #0
   10fb0:	bf18      	it	ne
   10fb2:	2301      	movne	r3, #1
	bool prune_zero = false;
   10fb4:	9305      	str	r3, [sp, #20]
   10fb6:	e004      	b.n	10fc2 <z_cbvprintf_impl+0x912>
   10fb8:	2300      	movs	r3, #0
	if (c == 'f') {
   10fba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   10fbe:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   10fc0:	d1d3      	bne.n	10f6a <z_cbvprintf_impl+0x8ba>
		if (decimals < 0) {
   10fc2:	eb17 0806 	adds.w	r8, r7, r6
   10fc6:	f04f 0b66 	mov.w	fp, #102	; 0x66
   10fca:	d444      	bmi.n	11056 <z_cbvprintf_impl+0x9a6>
	if (decimals > 16) {
   10fcc:	f1b8 0f10 	cmp.w	r8, #16
   10fd0:	bfa8      	it	ge
   10fd2:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   10fd6:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 112a0 <z_cbvprintf_impl+0xbf0>
   10fda:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   10fde:	2010      	movs	r0, #16
   10fe0:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   10fe2:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   10fe6:	f1b8 0f00 	cmp.w	r8, #0
   10fea:	d137      	bne.n	1105c <z_cbvprintf_impl+0x9ac>
	fract += round;
   10fec:	1812      	adds	r2, r2, r0
   10fee:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   10ff2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   10ff6:	d241      	bcs.n	1107c <z_cbvprintf_impl+0x9cc>
	fract += round;
   10ff8:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   10ffc:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   10ffe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   11002:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   11006:	f040 80b4 	bne.w	11172 <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   1100a:	2e00      	cmp	r6, #0
   1100c:	dc41      	bgt.n	11092 <z_cbvprintf_impl+0x9e2>
			*buf++ = '0';
   1100e:	2130      	movs	r1, #48	; 0x30
   11010:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   11014:	2a00      	cmp	r2, #0
   11016:	d165      	bne.n	110e4 <z_cbvprintf_impl+0xa34>
   11018:	2f00      	cmp	r7, #0
   1101a:	f340 81b2 	ble.w	11382 <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   1101e:	222e      	movs	r2, #46	; 0x2e
   11020:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   11024:	b186      	cbz	r6, 11048 <z_cbvprintf_impl+0x998>
			conv->pad0_value = -decexp;
   11026:	4272      	negs	r2, r6
   11028:	42ba      	cmp	r2, r7
   1102a:	bfa8      	it	ge
   1102c:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   1102e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   11032:	9213      	str	r2, [sp, #76]	; 0x4c
   11034:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
   11036:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   1103a:	bfd4      	ite	le
   1103c:	2200      	movle	r2, #0
   1103e:	2201      	movgt	r2, #1
   11040:	f362 1145 	bfi	r1, r2, #5, #1
   11044:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   11048:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   1104c:	e039      	b.n	110c2 <z_cbvprintf_impl+0xa12>
	bool prune_zero = false;
   1104e:	2300      	movs	r3, #0
   11050:	e7b0      	b.n	10fb4 <z_cbvprintf_impl+0x904>
   11052:	2300      	movs	r3, #0
   11054:	e788      	b.n	10f68 <z_cbvprintf_impl+0x8b8>
			decimals = 0;
   11056:	f04f 0800 	mov.w	r8, #0
   1105a:	e7bc      	b.n	10fd6 <z_cbvprintf_impl+0x926>
	*v >>= 1;
   1105c:	0840      	lsrs	r0, r0, #1
   1105e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   11062:	085b      	lsrs	r3, r3, #1
   11064:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   11068:	a80e      	add	r0, sp, #56	; 0x38
   1106a:	e9cd 2108 	strd	r2, r1, [sp, #32]
   1106e:	f108 38ff 	add.w	r8, r8, #4294967295
   11072:	f00d fac9 	bl	1e608 <_ldiv5>
   11076:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   1107a:	e7b2      	b.n	10fe2 <z_cbvprintf_impl+0x932>
	*v >>= 1;
   1107c:	0852      	lsrs	r2, r2, #1
   1107e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   11082:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   11084:	0849      	lsrs	r1, r1, #1
   11086:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   1108a:	3601      	adds	r6, #1
	_ldiv5(v);
   1108c:	f00d fabc 	bl	1e608 <_ldiv5>
		decexp++;
   11090:	e7b4      	b.n	10ffc <z_cbvprintf_impl+0x94c>
	char *buf = bps;
   11092:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   11096:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11098:	2900      	cmp	r1, #0
   1109a:	dd09      	ble.n	110b0 <z_cbvprintf_impl+0xa00>
				*buf++ = _get_digit(&fract, &digit_count);
   1109c:	a90b      	add	r1, sp, #44	; 0x2c
   1109e:	a80c      	add	r0, sp, #48	; 0x30
   110a0:	9207      	str	r2, [sp, #28]
   110a2:	f00d fac9 	bl	1e638 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   110a6:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   110a8:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   110ac:	9a07      	ldr	r2, [sp, #28]
   110ae:	d1f2      	bne.n	11096 <z_cbvprintf_impl+0x9e6>
			conv->pad0_value = decexp;
   110b0:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   110b2:	b99a      	cbnz	r2, 110dc <z_cbvprintf_impl+0xa2c>
   110b4:	2f00      	cmp	r7, #0
   110b6:	f340 8162 	ble.w	1137e <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
   110ba:	212e      	movs	r1, #46	; 0x2e
   110bc:	f808 1b01 	strb.w	r1, [r8], #1
   110c0:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   110c2:	2f00      	cmp	r7, #0
   110c4:	dd17      	ble.n	110f6 <z_cbvprintf_impl+0xa46>
   110c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   110c8:	2a00      	cmp	r2, #0
   110ca:	dd14      	ble.n	110f6 <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   110cc:	a90b      	add	r1, sp, #44	; 0x2c
   110ce:	a80c      	add	r0, sp, #48	; 0x30
   110d0:	f00d fab2 	bl	1e638 <_get_digit>
		precision--;
   110d4:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   110d6:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   110da:	e7f2      	b.n	110c2 <z_cbvprintf_impl+0xa12>
			*buf++ = '.';
   110dc:	222e      	movs	r2, #46	; 0x2e
   110de:	f808 2b01 	strb.w	r2, [r8], #1
   110e2:	e7ed      	b.n	110c0 <z_cbvprintf_impl+0xa10>
   110e4:	222e      	movs	r2, #46	; 0x2e
   110e6:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   110ea:	2e00      	cmp	r6, #0
   110ec:	d0ac      	beq.n	11048 <z_cbvprintf_impl+0x998>
   110ee:	2f00      	cmp	r7, #0
   110f0:	dc99      	bgt.n	11026 <z_cbvprintf_impl+0x976>
			*buf++ = '.';
   110f2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   110f6:	9b05      	ldr	r3, [sp, #20]
   110f8:	2b00      	cmp	r3, #0
   110fa:	d14e      	bne.n	1119a <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   110fc:	9714      	str	r7, [sp, #80]	; 0x50
   110fe:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   11100:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   11104:	2a45      	cmp	r2, #69	; 0x45
   11106:	d123      	bne.n	11150 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   11108:	2e00      	cmp	r6, #0
			decexp = -decexp;
   1110a:	bfba      	itte	lt
   1110c:	4276      	neglt	r6, r6
			*buf++ = '-';
   1110e:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   11110:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   11112:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   11114:	bfc8      	it	gt
   11116:	2164      	movgt	r1, #100	; 0x64
   11118:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
   1111a:	bfd1      	iteee	le
   1111c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   1111e:	fbb6 f3f1 	udivgt	r3, r6, r1
   11122:	1cfa      	addgt	r2, r7, #3
   11124:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
   11128:	bfc8      	it	gt
   1112a:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   1112e:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   11132:	bfc8      	it	gt
   11134:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   11136:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   1113a:	fbb6 f3f1 	udiv	r3, r6, r1
   1113e:	4617      	mov	r7, r2
   11140:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   11144:	fb01 6313 	mls	r3, r1, r3, r6
   11148:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1114a:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   1114e:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   11150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11152:	2b00      	cmp	r3, #0
   11154:	dc2c      	bgt.n	111b0 <z_cbvprintf_impl+0xb00>
   11156:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11158:	2b00      	cmp	r3, #0
   1115a:	bfd4      	ite	le
   1115c:	2300      	movle	r3, #0
   1115e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11160:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   11164:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   11168:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1116a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   1116e:	703b      	strb	r3, [r7, #0]
	return bps;
   11170:	e69b      	b.n	10eaa <z_cbvprintf_impl+0x7fa>
		*buf = _get_digit(&fract, &digit_count);
   11172:	a90b      	add	r1, sp, #44	; 0x2c
   11174:	a80c      	add	r0, sp, #48	; 0x30
   11176:	9207      	str	r2, [sp, #28]
   11178:	f00d fa5e 	bl	1e638 <_get_digit>
		if (*buf++ != '0') {
   1117c:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
   1117e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
   11182:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11184:	bf18      	it	ne
   11186:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   1118a:	b912      	cbnz	r2, 11192 <z_cbvprintf_impl+0xae2>
   1118c:	2f00      	cmp	r7, #0
   1118e:	f340 80f8 	ble.w	11382 <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   11192:	222e      	movs	r2, #46	; 0x2e
   11194:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   11198:	e756      	b.n	11048 <z_cbvprintf_impl+0x998>
		while (*--buf == '0') {
   1119a:	4647      	mov	r7, r8
   1119c:	f108 38ff 	add.w	r8, r8, #4294967295
   111a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   111a4:	2a30      	cmp	r2, #48	; 0x30
   111a6:	d0f8      	beq.n	1119a <z_cbvprintf_impl+0xaea>
   111a8:	2a2e      	cmp	r2, #46	; 0x2e
   111aa:	bf08      	it	eq
   111ac:	4647      	moveq	r7, r8
   111ae:	e7a7      	b.n	11100 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   111b0:	2301      	movs	r3, #1
   111b2:	e7d5      	b.n	11160 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   111b4:	4f3c      	ldr	r7, [pc, #240]	; (112a8 <z_cbvprintf_impl+0xbf8>)
		char sign = 0;
   111b6:	4681      	mov	r9, r0
			bps = "(nil)";
   111b8:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   111ba:	2005      	movs	r0, #5
   111bc:	e5ac      	b.n	10d18 <z_cbvprintf_impl+0x668>
		} else if (conv->altform_0) {
   111be:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   111c0:	bf48      	it	mi
   111c2:	3001      	addmi	r0, #1
   111c4:	e5b0      	b.n	10d28 <z_cbvprintf_impl+0x678>
					OUTC(pad);
   111c6:	4610      	mov	r0, r2
   111c8:	9209      	str	r2, [sp, #36]	; 0x24
   111ca:	9903      	ldr	r1, [sp, #12]
   111cc:	47d0      	blx	sl
   111ce:	2800      	cmp	r0, #0
   111d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111d2:	da05      	bge.n	111e0 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   111d4:	b01f      	add	sp, #124	; 0x7c
   111d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   111da:	2220      	movs	r2, #32
					pad = '0';
   111dc:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   111e0:	4659      	mov	r1, fp
   111e2:	2900      	cmp	r1, #0
   111e4:	f10b 3bff 	add.w	fp, fp, #4294967295
   111e8:	dced      	bgt.n	111c6 <z_cbvprintf_impl+0xb16>
   111ea:	9b04      	ldr	r3, [sp, #16]
   111ec:	f8cd b010 	str.w	fp, [sp, #16]
   111f0:	442b      	add	r3, r5
   111f2:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   111f4:	f1b9 0f00 	cmp.w	r9, #0
   111f8:	d005      	beq.n	11206 <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   111fa:	9903      	ldr	r1, [sp, #12]
   111fc:	4648      	mov	r0, r9
   111fe:	47d0      	blx	sl
   11200:	2800      	cmp	r0, #0
   11202:	dbe7      	blt.n	111d4 <z_cbvprintf_impl+0xb24>
   11204:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   11206:	9b08      	ldr	r3, [sp, #32]
   11208:	2b00      	cmp	r3, #0
   1120a:	d07d      	beq.n	11308 <z_cbvprintf_impl+0xc58>
			if (conv->specifier_a) {
   1120c:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   11210:	2b00      	cmp	r3, #0
   11212:	db28      	blt.n	11266 <z_cbvprintf_impl+0xbb6>
   11214:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
   11216:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1121a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1121e:	2b09      	cmp	r3, #9
   11220:	46d9      	mov	r9, fp
   11222:	f10b 0b01 	add.w	fp, fp, #1
   11226:	d946      	bls.n	112b6 <z_cbvprintf_impl+0xc06>
				if (!conv->pad_postdp) {
   11228:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1122c:	1bae      	subs	r6, r5, r6
   1122e:	0699      	lsls	r1, r3, #26
   11230:	444e      	add	r6, r9
   11232:	d407      	bmi.n	11244 <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
   11234:	4642      	mov	r2, r8
   11236:	2a00      	cmp	r2, #0
   11238:	f108 38ff 	add.w	r8, r8, #4294967295
   1123c:	dc40      	bgt.n	112c0 <z_cbvprintf_impl+0xc10>
   1123e:	9b07      	ldr	r3, [sp, #28]
   11240:	4433      	add	r3, r6
   11242:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   11244:	f899 0000 	ldrb.w	r0, [r9]
   11248:	282e      	cmp	r0, #46	; 0x2e
   1124a:	d10a      	bne.n	11262 <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
   1124c:	9903      	ldr	r1, [sp, #12]
   1124e:	47d0      	blx	sl
						OUTC('0');
   11250:	2800      	cmp	r0, #0
   11252:	dbbf      	blt.n	111d4 <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   11254:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   11258:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   1125c:	dc36      	bgt.n	112cc <z_cbvprintf_impl+0xc1c>
					OUTC(*cp++);
   1125e:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
   11262:	464d      	mov	r5, r9
   11264:	e03d      	b.n	112e2 <z_cbvprintf_impl+0xc32>
   11266:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   11268:	f899 0000 	ldrb.w	r0, [r9]
   1126c:	2870      	cmp	r0, #112	; 0x70
   1126e:	46c8      	mov	r8, r9
   11270:	f109 0901 	add.w	r9, r9, #1
   11274:	d11a      	bne.n	112ac <z_cbvprintf_impl+0xbfc>
   11276:	1bae      	subs	r6, r5, r6
   11278:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1127a:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   1127c:	4435      	add	r5, r6
   1127e:	1bab      	subs	r3, r5, r6
   11280:	2b00      	cmp	r3, #0
   11282:	dc39      	bgt.n	112f8 <z_cbvprintf_impl+0xc48>
			OUTS(cp, bpe);
   11284:	9903      	ldr	r1, [sp, #12]
   11286:	463b      	mov	r3, r7
   11288:	4642      	mov	r2, r8
   1128a:	4650      	mov	r0, sl
   1128c:	f00d fa31 	bl	1e6f2 <outs>
   11290:	2800      	cmp	r0, #0
   11292:	db9f      	blt.n	111d4 <z_cbvprintf_impl+0xb24>
   11294:	4430      	add	r0, r6
   11296:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   11298:	4605      	mov	r5, r0
   1129a:	4406      	add	r6, r0
   1129c:	e06a      	b.n	11374 <z_cbvprintf_impl+0xcc4>
   1129e:	bf00      	nop
   112a0:	00000000 	.word	0x00000000
   112a4:	08000000 	.word	0x08000000
   112a8:	00022822 	.word	0x00022822
					OUTC(*cp++);
   112ac:	9903      	ldr	r1, [sp, #12]
   112ae:	47d0      	blx	sl
   112b0:	2800      	cmp	r0, #0
   112b2:	dad9      	bge.n	11268 <z_cbvprintf_impl+0xbb8>
   112b4:	e78e      	b.n	111d4 <z_cbvprintf_impl+0xb24>
					OUTC(*cp++);
   112b6:	9903      	ldr	r1, [sp, #12]
   112b8:	47d0      	blx	sl
   112ba:	2800      	cmp	r0, #0
   112bc:	daab      	bge.n	11216 <z_cbvprintf_impl+0xb66>
   112be:	e789      	b.n	111d4 <z_cbvprintf_impl+0xb24>
						OUTC('0');
   112c0:	9903      	ldr	r1, [sp, #12]
   112c2:	2030      	movs	r0, #48	; 0x30
   112c4:	47d0      	blx	sl
   112c6:	2800      	cmp	r0, #0
   112c8:	dab4      	bge.n	11234 <z_cbvprintf_impl+0xb84>
   112ca:	e783      	b.n	111d4 <z_cbvprintf_impl+0xb24>
						OUTC('0');
   112cc:	9903      	ldr	r1, [sp, #12]
   112ce:	2030      	movs	r0, #48	; 0x30
   112d0:	47d0      	blx	sl
   112d2:	f108 38ff 	add.w	r8, r8, #4294967295
   112d6:	e7bb      	b.n	11250 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
   112d8:	9903      	ldr	r1, [sp, #12]
   112da:	47d0      	blx	sl
   112dc:	2800      	cmp	r0, #0
   112de:	f6ff af79 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
   112e2:	7828      	ldrb	r0, [r5, #0]
   112e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   112e8:	2b09      	cmp	r3, #9
   112ea:	46a8      	mov	r8, r5
   112ec:	f105 0501 	add.w	r5, r5, #1
   112f0:	d9f2      	bls.n	112d8 <z_cbvprintf_impl+0xc28>
   112f2:	eba6 0609 	sub.w	r6, r6, r9
   112f6:	e7bf      	b.n	11278 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
   112f8:	9903      	ldr	r1, [sp, #12]
   112fa:	2030      	movs	r0, #48	; 0x30
   112fc:	47d0      	blx	sl
   112fe:	2800      	cmp	r0, #0
   11300:	f6ff af68 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   11304:	3601      	adds	r6, #1
   11306:	e7ba      	b.n	1127e <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
   11308:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1130c:	06da      	lsls	r2, r3, #27
   1130e:	d401      	bmi.n	11314 <z_cbvprintf_impl+0xc64>
   11310:	071b      	lsls	r3, r3, #28
   11312:	d506      	bpl.n	11322 <z_cbvprintf_impl+0xc72>
				OUTC('0');
   11314:	9903      	ldr	r1, [sp, #12]
   11316:	2030      	movs	r0, #48	; 0x30
   11318:	47d0      	blx	sl
   1131a:	2800      	cmp	r0, #0
   1131c:	f6ff af5a 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   11320:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11322:	9b05      	ldr	r3, [sp, #20]
   11324:	b13b      	cbz	r3, 11336 <z_cbvprintf_impl+0xc86>
				OUTC(conv->specifier);
   11326:	9903      	ldr	r1, [sp, #12]
   11328:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1132c:	47d0      	blx	sl
   1132e:	2800      	cmp	r0, #0
   11330:	f6ff af50 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   11334:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11336:	44a8      	add	r8, r5
   11338:	e006      	b.n	11348 <z_cbvprintf_impl+0xc98>
				OUTC('0');
   1133a:	9903      	ldr	r1, [sp, #12]
   1133c:	2030      	movs	r0, #48	; 0x30
   1133e:	47d0      	blx	sl
   11340:	2800      	cmp	r0, #0
   11342:	f6ff af47 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   11346:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11348:	eba8 0305 	sub.w	r3, r8, r5
   1134c:	2b00      	cmp	r3, #0
   1134e:	dcf4      	bgt.n	1133a <z_cbvprintf_impl+0xc8a>
			OUTS(bps, bpe);
   11350:	9903      	ldr	r1, [sp, #12]
   11352:	463b      	mov	r3, r7
   11354:	4632      	mov	r2, r6
   11356:	4650      	mov	r0, sl
   11358:	f00d f9cb 	bl	1e6f2 <outs>
   1135c:	2800      	cmp	r0, #0
   1135e:	f6ff af39 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   11362:	4428      	add	r0, r5
   11364:	e797      	b.n	11296 <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
   11366:	9903      	ldr	r1, [sp, #12]
   11368:	2020      	movs	r0, #32
   1136a:	47d0      	blx	sl
   1136c:	2800      	cmp	r0, #0
   1136e:	f6ff af31 	blt.w	111d4 <z_cbvprintf_impl+0xb24>
   11372:	3501      	adds	r5, #1
		while (width > 0) {
   11374:	1b73      	subs	r3, r6, r5
   11376:	2b00      	cmp	r3, #0
   11378:	dcf5      	bgt.n	11366 <z_cbvprintf_impl+0xcb6>
   1137a:	f7ff bbd9 	b.w	10b30 <z_cbvprintf_impl+0x480>
			decexp = 0;
   1137e:	4616      	mov	r6, r2
   11380:	e6b9      	b.n	110f6 <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   11382:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   11386:	e6b6      	b.n	110f6 <z_cbvprintf_impl+0xa46>

00011388 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   11388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1138c:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   11390:	ed9f 8b49 	vldr	d8, [pc, #292]	; 114b8 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11394:	4e4a      	ldr	r6, [pc, #296]	; (114c0 <work_queue_main+0x138>)
{
   11396:	b084      	sub	sp, #16
   11398:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1139a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1139e:	f3ef 8711 	mrs	r7, BASEPRI
   113a2:	f383 8812 	msr	BASEPRI_MAX, r3
   113a6:	f3bf 8f6f 	isb	sy
   113aa:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   113ae:	b98d      	cbnz	r5, 113d4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   113b0:	2102      	movs	r1, #2
   113b2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   113b6:	f00f ff94 	bl	212e2 <flag_test_and_clear>
   113ba:	2800      	cmp	r0, #0
   113bc:	d143      	bne.n	11446 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   113be:	2300      	movs	r3, #0
   113c0:	ed8d 8b00 	vstr	d8, [sp]
   113c4:	9302      	str	r3, [sp, #8]
   113c6:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   113ca:	4639      	mov	r1, r7
   113cc:	483d      	ldr	r0, [pc, #244]	; (114c4 <work_queue_main+0x13c>)
   113ce:	f00b ff8f 	bl	1d2f0 <z_sched_wait>
			continue;
   113d2:	e7e2      	b.n	1139a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   113d4:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   113d8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   113da:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   113de:	4295      	cmp	r5, r2
	list->tail = node;
   113e0:	bf08      	it	eq
   113e2:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   113e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   113ea:	f043 0302 	orr.w	r3, r3, #2
   113ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   113f2:	68eb      	ldr	r3, [r5, #12]
   113f4:	f023 0304 	bic.w	r3, r3, #4
   113f8:	f043 0301 	orr.w	r3, r3, #1
   113fc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   113fe:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11400:	f387 8811 	msr	BASEPRI, r7
   11404:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   11408:	4628      	mov	r0, r5
   1140a:	4798      	blx	r3
	__asm__ volatile(
   1140c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11410:	f3ef 8911 	mrs	r9, BASEPRI
   11414:	f383 8812 	msr	BASEPRI_MAX, r3
   11418:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1141c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1141e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   11420:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11424:	d419      	bmi.n	1145a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   11426:	60ea      	str	r2, [r5, #12]
   11428:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1142c:	f023 0302 	bic.w	r3, r3, #2
   11430:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
   11434:	f389 8811 	msr	BASEPRI, r9
   11438:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1143c:	05db      	lsls	r3, r3, #23
   1143e:	d4ac      	bmi.n	1139a <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
   11440:	f00b fe54 	bl	1d0ec <z_impl_k_yield>
}
   11444:	e7a9      	b.n	1139a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   11446:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1144a:	2200      	movs	r2, #0
   1144c:	2101      	movs	r1, #1
   1144e:	4628      	mov	r0, r5
   11450:	f010 f942 	bl	216d8 <z_sched_wake>
   11454:	2800      	cmp	r0, #0
   11456:	d1f8      	bne.n	1144a <work_queue_main+0xc2>
   11458:	e7b1      	b.n	113be <work_queue_main+0x36>
	return list->head;
   1145a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1145c:	f023 0303 	bic.w	r3, r3, #3
   11460:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   11462:	2800      	cmp	r0, #0
   11464:	d0e0      	beq.n	11428 <work_queue_main+0xa0>
	return node->next;
   11466:	2700      	movs	r7, #0
   11468:	f8d0 8000 	ldr.w	r8, [r0]
	parent->next = child;
   1146c:	46ba      	mov	sl, r7
   1146e:	2800      	cmp	r0, #0
   11470:	d0da      	beq.n	11428 <work_queue_main+0xa0>
		if (wc->work == work) {
   11472:	6842      	ldr	r2, [r0, #4]
   11474:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   11476:	4601      	mov	r1, r0
		if (wc->work == work) {
   11478:	d10b      	bne.n	11492 <work_queue_main+0x10a>
	return node->next;
   1147a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1147c:	b997      	cbnz	r7, 114a4 <work_queue_main+0x11c>
   1147e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   11480:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   11482:	4282      	cmp	r2, r0
   11484:	d100      	bne.n	11488 <work_queue_main+0x100>
	list->tail = node;
   11486:	6071      	str	r1, [r6, #4]
	parent->next = child;
   11488:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1148c:	f00b fa66 	bl	1c95c <z_impl_k_sem_give>
}
   11490:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   11492:	f1b8 0f00 	cmp.w	r8, #0
   11496:	d00b      	beq.n	114b0 <work_queue_main+0x128>
	return node->next;
   11498:	f8d8 2000 	ldr.w	r2, [r8]
   1149c:	4640      	mov	r0, r8
   1149e:	460f      	mov	r7, r1
   114a0:	4690      	mov	r8, r2
   114a2:	e7e4      	b.n	1146e <work_queue_main+0xe6>
	parent->next = child;
   114a4:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   114a6:	6872      	ldr	r2, [r6, #4]
   114a8:	4282      	cmp	r2, r0
	list->tail = node;
   114aa:	bf08      	it	eq
   114ac:	6077      	streq	r7, [r6, #4]
}
   114ae:	e7eb      	b.n	11488 <work_queue_main+0x100>
   114b0:	4642      	mov	r2, r8
   114b2:	e7f3      	b.n	1149c <work_queue_main+0x114>
   114b4:	f3af 8000 	nop.w
   114b8:	ffffffff 	.word	0xffffffff
   114bc:	ffffffff 	.word	0xffffffff
   114c0:	20002f8c 	.word	0x20002f8c
   114c4:	20003568 	.word	0x20003568

000114c8 <read_pressure>:
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
				 sizeof(temp_value));
}

static ssize_t read_pressure(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf, uint16_t len, uint16_t offset)
{
   114c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int *value = &pressure_value;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   114ca:	2404      	movs	r4, #4
   114cc:	9402      	str	r4, [sp, #8]
   114ce:	4c04      	ldr	r4, [pc, #16]	; (114e0 <read_pressure+0x18>)
   114d0:	9401      	str	r4, [sp, #4]
   114d2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   114d6:	9400      	str	r4, [sp, #0]
   114d8:	f00f f838 	bl	2054c <bt_gatt_attr_read>
				 sizeof(temp_value));
}
   114dc:	b004      	add	sp, #16
   114de:	bd10      	pop	{r4, pc}
   114e0:	20000510 	.word	0x20000510

000114e4 <connected>:
	BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),
};

static void connected(struct bt_conn *conn, uint8_t err)
{
   114e4:	b590      	push	{r4, r7, lr}
   114e6:	b087      	sub	sp, #28
   114e8:	af00      	add	r7, sp, #0
	if (err) {
   114ea:	b189      	cbz	r1, 11510 <connected+0x2c>
		LOG_WRN("Connection failed (err 0x%02x)", err);
   114ec:	466c      	mov	r4, sp
   114ee:	b088      	sub	sp, #32
   114f0:	466a      	mov	r2, sp
   114f2:	4b0d      	ldr	r3, [pc, #52]	; (11528 <connected+0x44>)
   114f4:	480d      	ldr	r0, [pc, #52]	; (1152c <connected+0x48>)
   114f6:	e9c2 3105 	strd	r3, r1, [r2, #20]
   114fa:	2303      	movs	r3, #3
   114fc:	f842 3f10 	str.w	r3, [r2, #16]!
   11500:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11504:	f00c fd26 	bl	1df54 <z_log_msg_static_create.constprop.0>
   11508:	46a5      	mov	sp, r4
	} else {
		LOG_INF("Connected");
	}
}
   1150a:	371c      	adds	r7, #28
   1150c:	46bd      	mov	sp, r7
   1150e:	bd90      	pop	{r4, r7, pc}
		LOG_INF("Connected");
   11510:	4b07      	ldr	r3, [pc, #28]	; (11530 <connected+0x4c>)
   11512:	617b      	str	r3, [r7, #20]
   11514:	2302      	movs	r3, #2
   11516:	4805      	ldr	r0, [pc, #20]	; (1152c <connected+0x48>)
   11518:	613b      	str	r3, [r7, #16]
   1151a:	f107 0210 	add.w	r2, r7, #16
   1151e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11522:	f00c fd17 	bl	1df54 <z_log_msg_static_create.constprop.0>
}
   11526:	e7f0      	b.n	1150a <connected+0x26>
   11528:	000225d0 	.word	0x000225d0
   1152c:	00021f04 	.word	0x00021f04
   11530:	000225ef 	.word	0x000225ef

00011534 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   11534:	b580      	push	{r7, lr}
   11536:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason 0x%02x)", reason);
   11538:	b088      	sub	sp, #32
   1153a:	466a      	mov	r2, sp
   1153c:	4b06      	ldr	r3, [pc, #24]	; (11558 <disconnected+0x24>)
   1153e:	4807      	ldr	r0, [pc, #28]	; (1155c <disconnected+0x28>)
   11540:	e9c2 3105 	strd	r3, r1, [r2, #20]
   11544:	2303      	movs	r3, #3
   11546:	f842 3f10 	str.w	r3, [r2, #16]!
   1154a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1154e:	f00c fd01 	bl	1df54 <z_log_msg_static_create.constprop.0>
}
   11552:	46bd      	mov	sp, r7
   11554:	bd80      	pop	{r7, pc}
   11556:	bf00      	nop
   11558:	000225f9 	.word	0x000225f9
   1155c:	00021f04 	.word	0x00021f04

00011560 <read_temp>:
{
   11560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11564:	4604      	mov	r4, r0
   11566:	b08a      	sub	sp, #40	; 0x28
   11568:	460d      	mov	r5, r1
   1156a:	4616      	mov	r6, r2
   1156c:	461f      	mov	r7, r3
	LOG_INF("waiting 10ms");
   1156e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 115d4 <read_temp+0x74>
   11572:	4b15      	ldr	r3, [pc, #84]	; (115c8 <read_temp+0x68>)
   11574:	9309      	str	r3, [sp, #36]	; 0x24
   11576:	f44f 5986 	mov.w	r9, #4288	; 0x10c0
   1157a:	f04f 0a02 	mov.w	sl, #2
   1157e:	aa08      	add	r2, sp, #32
   11580:	4649      	mov	r1, r9
   11582:	4640      	mov	r0, r8
   11584:	f8cd a020 	str.w	sl, [sp, #32]
   11588:	f00c fce4 	bl	1df54 <z_log_msg_static_create.constprop.0>
	return z_impl_k_sleep(timeout);
   1158c:	2100      	movs	r1, #0
   1158e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11592:	f00b fe2d 	bl	1d1f0 <z_impl_k_sleep>
	LOG_INF("done waiting");
   11596:	4b0d      	ldr	r3, [pc, #52]	; (115cc <read_temp+0x6c>)
   11598:	aa08      	add	r2, sp, #32
   1159a:	4649      	mov	r1, r9
   1159c:	4640      	mov	r0, r8
   1159e:	e9cd a308 	strd	sl, r3, [sp, #32]
   115a2:	f00c fcd7 	bl	1df54 <z_log_msg_static_create.constprop.0>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   115a6:	2304      	movs	r3, #4
   115a8:	9302      	str	r3, [sp, #8]
   115aa:	4b09      	ldr	r3, [pc, #36]	; (115d0 <read_temp+0x70>)
   115ac:	9301      	str	r3, [sp, #4]
   115ae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   115b2:	9300      	str	r3, [sp, #0]
   115b4:	4632      	mov	r2, r6
   115b6:	463b      	mov	r3, r7
   115b8:	4629      	mov	r1, r5
   115ba:	4620      	mov	r0, r4
   115bc:	f00e ffc6 	bl	2054c <bt_gatt_attr_read>
}
   115c0:	b00a      	add	sp, #40	; 0x28
   115c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   115c6:	bf00      	nop
   115c8:	00022616 	.word	0x00022616
   115cc:	00022623 	.word	0x00022623
   115d0:	20000514 	.word	0x20000514
   115d4:	00021f04 	.word	0x00021f04

000115d8 <main>:

/* --- BLUETOOTH SHIT END --- */


void main(void)
{
   115d8:	b5b0      	push	{r4, r5, r7, lr}
   115da:	b090      	sub	sp, #64	; 0x40
	LOG_INF("Running ttpms_v2_internal");
   115dc:	466c      	mov	r4, sp
{
   115de:	af02      	add	r7, sp, #8
	LOG_INF("Running ttpms_v2_internal");
   115e0:	4b52      	ldr	r3, [pc, #328]	; (1172c <main+0x154>)
   115e2:	637b      	str	r3, [r7, #52]	; 0x34
   115e4:	2302      	movs	r3, #2
   115e6:	4852      	ldr	r0, [pc, #328]	; (11730 <main+0x158>)
   115e8:	633b      	str	r3, [r7, #48]	; 0x30
   115ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
   115ee:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   115f2:	f00c fcaf 	bl	1df54 <z_log_msg_static_create.constprop.0>

	int err;

	bt_addr_le_t addr;

	err = bt_addr_le_from_str(TTPMS_SENSOR_BT_ID, "random", &addr);
   115f6:	494f      	ldr	r1, [pc, #316]	; (11734 <main+0x15c>)
   115f8:	484f      	ldr	r0, [pc, #316]	; (11738 <main+0x160>)
   115fa:	1d3a      	adds	r2, r7, #4
   115fc:	f002 fd00 	bl	14000 <bt_addr_le_from_str>
	if (err) {
   11600:	b168      	cbz	r0, 1161e <main+0x46>
		LOG_WRN("Invalid BT address (err %d)", err);
   11602:	b088      	sub	sp, #32
   11604:	aa02      	add	r2, sp, #8
   11606:	4b4d      	ldr	r3, [pc, #308]	; (1173c <main+0x164>)
   11608:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1160c:	2303      	movs	r3, #3
   1160e:	f842 3f10 	str.w	r3, [r2, #16]!
   11612:	4847      	ldr	r0, [pc, #284]	; (11730 <main+0x158>)
   11614:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11618:	f00c fc9c 	bl	1df54 <z_log_msg_static_create.constprop.0>
   1161c:	46a5      	mov	sp, r4
	}

	err = bt_id_create(&addr, NULL);
   1161e:	2100      	movs	r1, #0
   11620:	1d38      	adds	r0, r7, #4
   11622:	f004 f9f1 	bl	15a08 <bt_id_create>
	if (err < 0) {
   11626:	2800      	cmp	r0, #0
   11628:	da0e      	bge.n	11648 <main+0x70>
		LOG_WRN("Creating new BT ID failed (err %d)", err);
   1162a:	466c      	mov	r4, sp
   1162c:	b088      	sub	sp, #32
   1162e:	aa02      	add	r2, sp, #8
   11630:	4b43      	ldr	r3, [pc, #268]	; (11740 <main+0x168>)
   11632:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11636:	2303      	movs	r3, #3
   11638:	f842 3f10 	str.w	r3, [r2, #16]!
   1163c:	483c      	ldr	r0, [pc, #240]	; (11730 <main+0x158>)
   1163e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11642:	f00c fc87 	bl	1df54 <z_log_msg_static_create.constprop.0>
   11646:	46a5      	mov	sp, r4
	}

	err = bt_enable(NULL);
   11648:	2000      	movs	r0, #0
   1164a:	f004 f8b7 	bl	157bc <bt_enable>
	if (err) {
   1164e:	2800      	cmp	r0, #0
   11650:	d048      	beq.n	116e4 <main+0x10c>
		LOG_WRN("Bluetooth init failed (err %d)", err);
   11652:	466c      	mov	r4, sp
   11654:	b088      	sub	sp, #32
   11656:	aa02      	add	r2, sp, #8
   11658:	4b3a      	ldr	r3, [pc, #232]	; (11744 <main+0x16c>)
   1165a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1165e:	2303      	movs	r3, #3
   11660:	f842 3f10 	str.w	r3, [r2, #16]!
   11664:	4832      	ldr	r0, [pc, #200]	; (11730 <main+0x158>)
   11666:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1166a:	f00c fc73 	bl	1df54 <z_log_msg_static_create.constprop.0>
   1166e:	46a5      	mov	sp, r4
	} else {
		LOG_INF("Bluetooth initialized");
	}

	err = bt_set_name(bt_device_name);
   11670:	4835      	ldr	r0, [pc, #212]	; (11748 <main+0x170>)
   11672:	f004 f883 	bl	1577c <bt_set_name>
	if (err) {
   11676:	2800      	cmp	r0, #0
   11678:	d040      	beq.n	116fc <main+0x124>
		LOG_WRN("Failed to set BT Device name (err %d)", err);
   1167a:	466c      	mov	r4, sp
   1167c:	b088      	sub	sp, #32
   1167e:	aa02      	add	r2, sp, #8
   11680:	4b32      	ldr	r3, [pc, #200]	; (1174c <main+0x174>)
   11682:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11686:	2303      	movs	r3, #3
   11688:	f842 3f10 	str.w	r3, [r2, #16]!
   1168c:	4828      	ldr	r0, [pc, #160]	; (11730 <main+0x158>)
   1168e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11692:	f00c fc5f 	bl	1df54 <z_log_msg_static_create.constprop.0>
   11696:	46a5      	mov	sp, r4
		LOG_INF("Successfully set BT device name");
	}

	adv_param = *BT_LE_ADV_CONN_NAME;

	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   11698:	4d2d      	ldr	r5, [pc, #180]	; (11750 <main+0x178>)
   1169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1169c:	f107 040c 	add.w	r4, r7, #12
   116a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   116a2:	682b      	ldr	r3, [r5, #0]
   116a4:	6023      	str	r3, [r4, #0]
   116a6:	2300      	movs	r3, #0
   116a8:	492a      	ldr	r1, [pc, #168]	; (11754 <main+0x17c>)
   116aa:	9300      	str	r3, [sp, #0]
   116ac:	2202      	movs	r2, #2
   116ae:	f107 000c 	add.w	r0, r7, #12
   116b2:	f004 fd83 	bl	161bc <bt_le_adv_start>
	if (err) {
   116b6:	b368      	cbz	r0, 11714 <main+0x13c>
		LOG_WRN("Advertising failed to start (err %d)", err);
   116b8:	466c      	mov	r4, sp
   116ba:	b088      	sub	sp, #32
   116bc:	aa02      	add	r2, sp, #8
   116be:	4b26      	ldr	r3, [pc, #152]	; (11758 <main+0x180>)
   116c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   116c4:	2303      	movs	r3, #3
   116c6:	f842 3f10 	str.w	r3, [r2, #16]!
   116ca:	4819      	ldr	r0, [pc, #100]	; (11730 <main+0x158>)
   116cc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   116d0:	f00c fc40 	bl	1df54 <z_log_msg_static_create.constprop.0>
   116d4:	46a5      	mov	sp, r4
   116d6:	f04f 31ff 	mov.w	r1, #4294967295
   116da:	f04f 30ff 	mov.w	r0, #4294967295
   116de:	f00b fd87 	bl	1d1f0 <z_impl_k_sleep>
	} else {
		LOG_INF("Advertising successfully started");
	}

	while (1) {
   116e2:	e7f8      	b.n	116d6 <main+0xfe>
		LOG_INF("Bluetooth initialized");
   116e4:	4b1d      	ldr	r3, [pc, #116]	; (1175c <main+0x184>)
   116e6:	637b      	str	r3, [r7, #52]	; 0x34
   116e8:	2302      	movs	r3, #2
   116ea:	4811      	ldr	r0, [pc, #68]	; (11730 <main+0x158>)
   116ec:	633b      	str	r3, [r7, #48]	; 0x30
   116ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
   116f2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   116f6:	f00c fc2d 	bl	1df54 <z_log_msg_static_create.constprop.0>
   116fa:	e7b9      	b.n	11670 <main+0x98>
		LOG_INF("Successfully set BT device name");
   116fc:	4b18      	ldr	r3, [pc, #96]	; (11760 <main+0x188>)
   116fe:	637b      	str	r3, [r7, #52]	; 0x34
   11700:	2302      	movs	r3, #2
   11702:	480b      	ldr	r0, [pc, #44]	; (11730 <main+0x158>)
   11704:	633b      	str	r3, [r7, #48]	; 0x30
   11706:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1170a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1170e:	f00c fc21 	bl	1df54 <z_log_msg_static_create.constprop.0>
   11712:	e7c1      	b.n	11698 <main+0xc0>
		LOG_INF("Advertising successfully started");
   11714:	4b13      	ldr	r3, [pc, #76]	; (11764 <main+0x18c>)
   11716:	637b      	str	r3, [r7, #52]	; 0x34
   11718:	2302      	movs	r3, #2
   1171a:	4805      	ldr	r0, [pc, #20]	; (11730 <main+0x158>)
   1171c:	633b      	str	r3, [r7, #48]	; 0x30
   1171e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11722:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11726:	f00c fc15 	bl	1df54 <z_log_msg_static_create.constprop.0>
   1172a:	e7d4      	b.n	116d6 <main+0xfe>
   1172c:	00022630 	.word	0x00022630
   11730:	00021f04 	.word	0x00021f04
   11734:	0002264a 	.word	0x0002264a
   11738:	00022651 	.word	0x00022651
   1173c:	00022663 	.word	0x00022663
   11740:	0002267f 	.word	0x0002267f
   11744:	000226a2 	.word	0x000226a2
   11748:	2000075c 	.word	0x2000075c
   1174c:	000226d7 	.word	0x000226d7
   11750:	00021f20 	.word	0x00021f20
   11754:	00021f78 	.word	0x00021f78
   11758:	0002271d 	.word	0x0002271d
   1175c:	000226c1 	.word	0x000226c1
   11760:	000226fd 	.word	0x000226fd
   11764:	00022742 	.word	0x00022742

00011768 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   11768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1176c:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1176e:	0784      	lsls	r4, r0, #30
{
   11770:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   11772:	f002 0304 	and.w	r3, r2, #4
   11776:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11778:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   1177c:	f103 0301 	add.w	r3, r3, #1
   11780:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   11784:	9203      	str	r2, [sp, #12]
   11786:	4605      	mov	r5, r0
   11788:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1178a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   1178c:	f040 81be 	bne.w	11b0c <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   11790:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   11792:	b130      	cbz	r0, 117a2 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   11794:	2907      	cmp	r1, #7
   11796:	d809      	bhi.n	117ac <cbvprintf_package+0x44>
		return -ENOSPC;
   11798:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   1179c:	b011      	add	sp, #68	; 0x44
   1179e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   117a2:	f001 0607 	and.w	r6, r1, #7
   117a6:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   117a8:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   117ac:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   117ae:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   117b2:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   117b4:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   117b8:	f04f 33ff 	mov.w	r3, #4294967295
   117bc:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   117be:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   117c2:	464f      	mov	r7, r9
	bool parsing = false;
   117c4:	46cb      	mov	fp, r9
	size = sizeof(char *);
   117c6:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   117c8:	b10d      	cbz	r5, 117ce <cbvprintf_package+0x66>
				*(const char **)buf = s;
   117ca:	9800      	ldr	r0, [sp, #0]
   117cc:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   117ce:	9805      	ldr	r0, [sp, #20]
   117d0:	2800      	cmp	r0, #0
   117d2:	f300 80eb 	bgt.w	119ac <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   117d6:	489a      	ldr	r0, [pc, #616]	; (11a40 <cbvprintf_package+0x2d8>)
   117d8:	9a00      	ldr	r2, [sp, #0]
   117da:	4282      	cmp	r2, r0
   117dc:	d303      	bcc.n	117e6 <cbvprintf_package+0x7e>
   117de:	4899      	ldr	r0, [pc, #612]	; (11a44 <cbvprintf_package+0x2dc>)
   117e0:	4282      	cmp	r2, r0
   117e2:	f0c0 80e3 	bcc.w	119ac <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   117e6:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   117e8:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   117ec:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   117ee:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   117f2:	f100 8106 	bmi.w	11a02 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   117f6:	2f0f      	cmp	r7, #15
   117f8:	f200 80b4 	bhi.w	11964 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   117fc:	2d00      	cmp	r5, #0
   117fe:	f000 8108 	beq.w	11a12 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11802:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11806:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   1180a:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   1180c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11810:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   11814:	9804      	ldr	r0, [sp, #16]
   11816:	3001      	adds	r0, #1
   11818:	9004      	str	r0, [sp, #16]
   1181a:	e0ea      	b.n	119f2 <cbvprintf_package+0x28a>
			switch (*fmt) {
   1181c:	287a      	cmp	r0, #122	; 0x7a
   1181e:	d860      	bhi.n	118e2 <cbvprintf_package+0x17a>
   11820:	284b      	cmp	r0, #75	; 0x4b
   11822:	d80e      	bhi.n	11842 <cbvprintf_package+0xda>
   11824:	2847      	cmp	r0, #71	; 0x47
   11826:	d85c      	bhi.n	118e2 <cbvprintf_package+0x17a>
   11828:	2829      	cmp	r0, #41	; 0x29
   1182a:	d82f      	bhi.n	1188c <cbvprintf_package+0x124>
   1182c:	2825      	cmp	r0, #37	; 0x25
   1182e:	d055      	beq.n	118dc <cbvprintf_package+0x174>
   11830:	d857      	bhi.n	118e2 <cbvprintf_package+0x17a>
   11832:	2820      	cmp	r0, #32
   11834:	d07d      	beq.n	11932 <cbvprintf_package+0x1ca>
   11836:	3823      	subs	r0, #35	; 0x23
   11838:	f1d0 0b00 	rsbs	fp, r0, #0
   1183c:	eb4b 0b00 	adc.w	fp, fp, r0
   11840:	e077      	b.n	11932 <cbvprintf_package+0x1ca>
   11842:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   11846:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   1184a:	d84a      	bhi.n	118e2 <cbvprintf_package+0x17a>
   1184c:	e8df f00c 	tbb	[pc, ip]
   11850:	49494971 	.word	0x49494971
   11854:	49494949 	.word	0x49494949
   11858:	49494949 	.word	0x49494949
   1185c:	4949494c 	.word	0x4949494c
   11860:	49494949 	.word	0x49494949
   11864:	4c495a49 	.word	0x4c495a49
   11868:	5a5a5a4c 	.word	0x5a5a5a4c
   1186c:	496e4c71 	.word	0x496e4c71
   11870:	4c184971 	.word	0x4c184971
   11874:	83494918 	.word	0x83494918
   11878:	49494c80 	.word	0x49494c80
   1187c:	494c      	.short	0x494c
   1187e:	80          	.byte	0x80
   1187f:	00          	.byte	0x00
   11880:	2000      	movs	r0, #0
   11882:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   11886:	f04f 0a04 	mov.w	sl, #4
   1188a:	e039      	b.n	11900 <cbvprintf_package+0x198>
			switch (*fmt) {
   1188c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   11890:	fa5f fc8c 	uxtb.w	ip, ip
   11894:	2201      	movs	r2, #1
   11896:	fa02 fc0c 	lsl.w	ip, r2, ip
   1189a:	ea1c 0f0e 	tst.w	ip, lr
   1189e:	d148      	bne.n	11932 <cbvprintf_package+0x1ca>
   118a0:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   118a4:	d12e      	bne.n	11904 <cbvprintf_package+0x19c>
   118a6:	ea1c 0b02 	ands.w	fp, ip, r2
   118aa:	d042      	beq.n	11932 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   118ac:	3c01      	subs	r4, #1
   118ae:	4454      	add	r4, sl
   118b0:	f1ca 0c00 	rsb	ip, sl, #0
   118b4:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   118b8:	2d00      	cmp	r5, #0
   118ba:	d061      	beq.n	11980 <cbvprintf_package+0x218>
   118bc:	eba3 0c05 	sub.w	ip, r3, r5
   118c0:	44a4      	add	ip, r4
   118c2:	45b4      	cmp	ip, r6
   118c4:	f63f af68 	bhi.w	11798 <cbvprintf_package+0x30>
		if (is_str_arg) {
   118c8:	2800      	cmp	r0, #0
   118ca:	d168      	bne.n	1199e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   118cc:	2b04      	cmp	r3, #4
   118ce:	d147      	bne.n	11960 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   118d0:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   118d4:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   118d6:	3404      	adds	r4, #4
   118d8:	2304      	movs	r3, #4
   118da:	e02a      	b.n	11932 <cbvprintf_package+0x1ca>
				arg_idx--;
   118dc:	9a01      	ldr	r2, [sp, #4]
   118de:	3a01      	subs	r2, #1
   118e0:	9201      	str	r2, [sp, #4]
				parsing = false;
   118e2:	f04f 0b00 	mov.w	fp, #0
				continue;
   118e6:	e024      	b.n	11932 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   118e8:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   118ec:	286c      	cmp	r0, #108	; 0x6c
   118ee:	d134      	bne.n	1195a <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   118f0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   118f4:	2000      	movs	r0, #0
   118f6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   118f8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   118fa:	d1c4      	bne.n	11886 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   118fc:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   11900:	4653      	mov	r3, sl
   11902:	e7d3      	b.n	118ac <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   11904:	f108 0807 	add.w	r8, r8, #7
   11908:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   1190c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   1190e:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   11912:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   11916:	b135      	cbz	r5, 11926 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   11918:	9806      	ldr	r0, [sp, #24]
   1191a:	4420      	add	r0, r4
   1191c:	42b0      	cmp	r0, r6
   1191e:	f63f af3b 	bhi.w	11798 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   11922:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   11926:	3408      	adds	r4, #8
				parsing = false;
   11928:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   1192c:	f04f 0a08 	mov.w	sl, #8
   11930:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   11932:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   11936:	2800      	cmp	r0, #0
   11938:	d078      	beq.n	11a2c <cbvprintf_package+0x2c4>
			if (!parsing) {
   1193a:	f1bb 0f00 	cmp.w	fp, #0
   1193e:	f47f af6d 	bne.w	1181c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   11942:	2825      	cmp	r0, #37	; 0x25
   11944:	d1f5      	bne.n	11932 <cbvprintf_package+0x1ca>
					arg_idx++;
   11946:	9b01      	ldr	r3, [sp, #4]
   11948:	3301      	adds	r3, #1
   1194a:	9301      	str	r3, [sp, #4]
					parsing = true;
   1194c:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   11950:	f04f 0a04 	mov.w	sl, #4
   11954:	e7ec      	b.n	11930 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   11956:	4658      	mov	r0, fp
   11958:	e793      	b.n	11882 <cbvprintf_package+0x11a>
   1195a:	2000      	movs	r0, #0
				parsing = false;
   1195c:	4683      	mov	fp, r0
   1195e:	e7a5      	b.n	118ac <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   11960:	2b08      	cmp	r3, #8
   11962:	d002      	beq.n	1196a <cbvprintf_package+0x202>
					return -EINVAL;
   11964:	f06f 0015 	mvn.w	r0, #21
   11968:	e718      	b.n	1179c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   1196a:	f108 0807 	add.w	r8, r8, #7
   1196e:	f028 0807 	bic.w	r8, r8, #7
   11972:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
   11976:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   1197a:	3408      	adds	r4, #8
   1197c:	2308      	movs	r3, #8
   1197e:	e7d8      	b.n	11932 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   11980:	b968      	cbnz	r0, 1199e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   11982:	2b04      	cmp	r3, #4
   11984:	d102      	bne.n	1198c <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   11986:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   1198a:	e7a4      	b.n	118d6 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   1198c:	2b08      	cmp	r3, #8
   1198e:	d1e9      	bne.n	11964 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   11990:	f108 0807 	add.w	r8, r8, #7
   11994:	f028 0807 	bic.w	r8, r8, #7
   11998:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   1199c:	e7ed      	b.n	1197a <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1199e:	9805      	ldr	r0, [sp, #20]
   119a0:	3801      	subs	r0, #1
   119a2:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   119a4:	f858 0b04 	ldr.w	r0, [r8], #4
   119a8:	9000      	str	r0, [sp, #0]
   119aa:	e70d      	b.n	117c8 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   119ac:	9a03      	ldr	r2, [sp, #12]
   119ae:	0790      	lsls	r0, r2, #30
   119b0:	d520      	bpl.n	119f4 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   119b2:	eba4 0e05 	sub.w	lr, r4, r5
   119b6:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   119ba:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   119be:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   119c2:	d2cf      	bcs.n	11964 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   119c4:	2f0f      	cmp	r7, #15
   119c6:	d8cd      	bhi.n	11964 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   119c8:	b1f5      	cbz	r5, 11a08 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   119ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
   119ce:	eb0d 0e02 	add.w	lr, sp, r2
   119d2:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   119d4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   119d6:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   119da:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   119de:	f1bc 0f00 	cmp.w	ip, #0
   119e2:	f43f af17 	beq.w	11814 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   119e6:	f060 007f 	orn	r0, r0, #127	; 0x7f
   119ea:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   119ee:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   119f2:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   119f4:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   119f8:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   119fa:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   119fc:	f64f 7eda 	movw	lr, #65498	; 0xffda
   11a00:	e797      	b.n	11932 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11a02:	f04f 0c00 	mov.w	ip, #0
   11a06:	e7da      	b.n	119be <cbvprintf_package+0x256>
				} else if (is_ro) {
   11a08:	f1bc 0f00 	cmp.w	ip, #0
   11a0c:	d001      	beq.n	11a12 <cbvprintf_package+0x2aa>
					len += 1;
   11a0e:	3601      	adds	r6, #1
   11a10:	e7ef      	b.n	119f2 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   11a12:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   11a14:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   11a16:	2a00      	cmp	r2, #0
   11a18:	d1eb      	bne.n	119f2 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   11a1a:	9800      	ldr	r0, [sp, #0]
   11a1c:	e9cd 3106 	strd	r3, r1, [sp, #24]
   11a20:	f00d fb8f 	bl	1f142 <strlen>
   11a24:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   11a28:	4406      	add	r6, r0
   11a2a:	e7e2      	b.n	119f2 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   11a2c:	1b63      	subs	r3, r4, r5
   11a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11a32:	d297      	bcs.n	11964 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   11a34:	b945      	cbnz	r5, 11a48 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   11a36:	f1a6 0408 	sub.w	r4, r6, #8
   11a3a:	18e0      	adds	r0, r4, r3
   11a3c:	e6ae      	b.n	1179c <cbvprintf_package+0x34>
   11a3e:	bf00      	nop
   11a40:	00021b10 	.word	0x00021b10
   11a44:	00024198 	.word	0x00024198
	if (rws_pos_en) {
   11a48:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   11a4a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   11a4c:	089b      	lsrs	r3, r3, #2
   11a4e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11a50:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   11a54:	b1c2      	cbz	r2, 11a88 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11a56:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   11a58:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   11a5c:	f1b9 0f00 	cmp.w	r9, #0
   11a60:	d005      	beq.n	11a6e <cbvprintf_package+0x306>
   11a62:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   11a64:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   11a66:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   11a6a:	4297      	cmp	r7, r2
   11a6c:	d10e      	bne.n	11a8c <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   11a6e:	f1c5 0301 	rsb	r3, r5, #1
   11a72:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   11a76:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   11a7a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   11a7c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   11a80:	4557      	cmp	r7, sl
   11a82:	d112      	bne.n	11aaa <cbvprintf_package+0x342>
	return BUF_OFFSET;
   11a84:	1b60      	subs	r0, r4, r5
   11a86:	e689      	b.n	1179c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   11a88:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   11a8a:	e7e5      	b.n	11a58 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   11a8c:	f810 3b01 	ldrb.w	r3, [r0], #1
   11a90:	0619      	lsls	r1, r3, #24
   11a92:	d508      	bpl.n	11aa6 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   11a94:	eb04 0e0c 	add.w	lr, r4, ip
   11a98:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   11a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   11a9e:	f63f ae7b 	bhi.w	11798 <cbvprintf_package+0x30>
			*buf++ = pos;
   11aa2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   11aa6:	3201      	adds	r2, #1
   11aa8:	e7df      	b.n	11a6a <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   11aaa:	f1b9 0f00 	cmp.w	r9, #0
   11aae:	d003      	beq.n	11ab8 <cbvprintf_package+0x350>
   11ab0:	f998 2000 	ldrsb.w	r2, [r8]
   11ab4:	2a00      	cmp	r2, #0
   11ab6:	db17      	blt.n	11ae8 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   11ab8:	9b02      	ldr	r3, [sp, #8]
   11aba:	b1d3      	cbz	r3, 11af2 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   11abc:	f81a 200b 	ldrb.w	r2, [sl, fp]
   11ac0:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   11ac4:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   11ac6:	9b01      	ldr	r3, [sp, #4]
   11ac8:	1898      	adds	r0, r3, r2
   11aca:	4420      	add	r0, r4
   11acc:	42b0      	cmp	r0, r6
   11ace:	f63f ae63 	bhi.w	11798 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   11ad2:	f898 0000 	ldrb.w	r0, [r8]
   11ad6:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   11ada:	9900      	ldr	r1, [sp, #0]
   11adc:	9203      	str	r2, [sp, #12]
   11ade:	4620      	mov	r0, r4
   11ae0:	f00d fb5b 	bl	1f19a <memcpy>
		buf += size;
   11ae4:	9a03      	ldr	r2, [sp, #12]
   11ae6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   11ae8:	f10a 0a01 	add.w	sl, sl, #1
   11aec:	f108 0801 	add.w	r8, r8, #1
   11af0:	e7c6      	b.n	11a80 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   11af2:	f898 2000 	ldrb.w	r2, [r8]
   11af6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   11afa:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   11afc:	9b02      	ldr	r3, [sp, #8]
   11afe:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   11b02:	9800      	ldr	r0, [sp, #0]
   11b04:	f00d fb1d 	bl	1f142 <strlen>
   11b08:	1c42      	adds	r2, r0, #1
   11b0a:	e7dc      	b.n	11ac6 <cbvprintf_package+0x35e>
		return -EFAULT;
   11b0c:	f06f 000d 	mvn.w	r0, #13
   11b10:	e644      	b.n	1179c <cbvprintf_package+0x34>
   11b12:	bf00      	nop

00011b14 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   11b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b18:	b095      	sub	sp, #84	; 0x54
   11b1a:	af00      	add	r7, sp, #0
   11b1c:	4604      	mov	r4, r0
   11b1e:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   11b22:	61bb      	str	r3, [r7, #24]
   11b24:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   11b28:	627a      	str	r2, [r7, #36]	; 0x24
   11b2a:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   11b2c:	6239      	str	r1, [r7, #32]
   11b2e:	b951      	cbnz	r1, 11b46 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   11b30:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   11b32:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   11b34:	7880      	ldrb	r0, [r0, #2]
   11b36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11b3a:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   11b3c:	460d      	mov	r5, r1
   11b3e:	42ae      	cmp	r6, r5
   11b40:	d81a      	bhi.n	11b78 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   11b42:	1b03      	subs	r3, r0, r4
   11b44:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   11b46:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   11b4a:	78e3      	ldrb	r3, [r4, #3]
   11b4c:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   11b4e:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
   11b50:	f1b9 0f00 	cmp.w	r9, #0
   11b54:	d002      	beq.n	11b5c <cbprintf_package_convert+0x48>
   11b56:	f01b 0f01 	tst.w	fp, #1
   11b5a:	d116      	bne.n	11b8a <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
   11b5c:	697b      	ldr	r3, [r7, #20]
   11b5e:	bb53      	cbnz	r3, 11bb6 <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   11b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11b62:	b11b      	cbz	r3, 11b6c <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   11b64:	69ba      	ldr	r2, [r7, #24]
   11b66:	6a39      	ldr	r1, [r7, #32]
   11b68:	4620      	mov	r0, r4
   11b6a:	4798      	blx	r3
		}

		return in_len;
   11b6c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   11b6e:	4628      	mov	r0, r5
   11b70:	3754      	adds	r7, #84	; 0x54
   11b72:	46bd      	mov	sp, r7
   11b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   11b78:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
   11b7c:	4640      	mov	r0, r8
   11b7e:	f00d fae0 	bl	1f142 <strlen>
   11b82:	3001      	adds	r0, #1
   11b84:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
   11b86:	3501      	adds	r5, #1
   11b88:	e7d9      	b.n	11b3e <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
   11b8a:	f894 a000 	ldrb.w	sl, [r4]
   11b8e:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11b90:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   11b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   11b94:	ea4f 028a 	mov.w	r2, sl, lsl #2
   11b98:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   11b9a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	f040 8101 	bne.w	11da6 <cbprintf_package_convert+0x292>
		out_len = (int)in_len;
   11ba4:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   11ba6:	46d0      	mov	r8, sl
   11ba8:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
   11bac:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
   11bae:	4543      	cmp	r3, r8
   11bb0:	d14e      	bne.n	11c50 <cbprintf_package_convert+0x13c>
   11bb2:	44ca      	add	sl, r9
   11bb4:	e013      	b.n	11bde <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
   11bb6:	f01b 0f02 	tst.w	fp, #2
   11bba:	d0d1      	beq.n	11b60 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   11bbc:	f894 a000 	ldrb.w	sl, [r4]
   11bc0:	ea4f 038a 	mov.w	r3, sl, lsl #2
   11bc4:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11bc6:	6863      	ldr	r3, [r4, #4]
   11bc8:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   11bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   11bcc:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   11bd0:	2b00      	cmp	r3, #0
   11bd2:	d178      	bne.n	11cc6 <cbprintf_package_convert+0x1b2>
		out_len = (int)in_len;
   11bd4:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11bd6:	f1b9 0f00 	cmp.w	r9, #0
   11bda:	d14e      	bne.n	11c7a <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
   11bdc:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
   11bde:	f01b 0f05 	tst.w	fp, #5
   11be2:	bf0c      	ite	eq
   11be4:	2302      	moveq	r3, #2
   11be6:	2301      	movne	r3, #1
   11be8:	627b      	str	r3, [r7, #36]	; 0x24
   11bea:	697b      	ldr	r3, [r7, #20]
   11bec:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11bf0:	f00b 0302 	and.w	r3, fp, #2
   11bf4:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
   11bf6:	45ca      	cmp	sl, r9
   11bf8:	d0b9      	beq.n	11b6e <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   11bfa:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   11bfe:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   11c02:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   11c06:	4bad      	ldr	r3, [pc, #692]	; (11ebc <cbprintf_package_convert+0x3a8>)
   11c08:	4598      	cmp	r8, r3
   11c0a:	d302      	bcc.n	11c12 <cbprintf_package_convert+0xfe>
   11c0c:	4bac      	ldr	r3, [pc, #688]	; (11ec0 <cbprintf_package_convert+0x3ac>)
   11c0e:	4598      	cmp	r8, r3
   11c10:	d339      	bcc.n	11c86 <cbprintf_package_convert+0x172>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11c12:	693b      	ldr	r3, [r7, #16]
   11c14:	2b00      	cmp	r3, #0
   11c16:	d043      	beq.n	11ca0 <cbprintf_package_convert+0x18c>
   11c18:	69f8      	ldr	r0, [r7, #28]
   11c1a:	f00c f9cf 	bl	1dfbc <is_ptr>
   11c1e:	2800      	cmp	r0, #0
   11c20:	d03e      	beq.n	11ca0 <cbprintf_package_convert+0x18c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   11c22:	46e8      	mov	r8, sp
   11c24:	b08a      	sub	sp, #40	; 0x28
   11c26:	466a      	mov	r2, sp
   11c28:	4ba6      	ldr	r3, [pc, #664]	; (11ec4 <cbprintf_package_convert+0x3b0>)
   11c2a:	6153      	str	r3, [r2, #20]
   11c2c:	69fb      	ldr	r3, [r7, #28]
   11c2e:	e9c2 3106 	strd	r3, r1, [r2, #24]
   11c32:	f44f 7300 	mov.w	r3, #512	; 0x200
   11c36:	8413      	strh	r3, [r2, #32]
   11c38:	4ba3      	ldr	r3, [pc, #652]	; (11ec8 <cbprintf_package_convert+0x3b4>)
   11c3a:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   11c3e:	48a3      	ldr	r0, [pc, #652]	; (11ecc <cbprintf_package_convert+0x3b8>)
   11c40:	2300      	movs	r3, #0
   11c42:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   11c46:	f000 fd01 	bl	1264c <z_impl_z_log_msg_static_create>
				out_len -= 2;
   11c4a:	3d02      	subs	r5, #2
   11c4c:	46c5      	mov	sp, r8
				continue;
   11c4e:	e7d2      	b.n	11bf6 <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   11c50:	f818 2b01 	ldrb.w	r2, [r8], #1
   11c54:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11c56:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   11c5a:	f00d fa72 	bl	1f142 <strlen>
				if (strl && strl_cnt < strl_len) {
   11c5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   11c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11c62:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   11c64:	b13a      	cbz	r2, 11c76 <cbprintf_package_convert+0x162>
   11c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   11c6a:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   11c6c:	bf3e      	ittt	cc
   11c6e:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   11c70:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   11c74:	3601      	addcc	r6, #1
				out_len += len;
   11c76:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   11c78:	e799      	b.n	11bae <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11c7a:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   11c7e:	bf1c      	itt	ne
   11c80:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   11c82:	44ca      	addne	sl, r9
   11c84:	e7ab      	b.n	11bde <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11c86:	693b      	ldr	r3, [r7, #16]
   11c88:	b123      	cbz	r3, 11c94 <cbprintf_package_convert+0x180>
   11c8a:	69f8      	ldr	r0, [r7, #28]
   11c8c:	f00c f996 	bl	1dfbc <is_ptr>
   11c90:	2800      	cmp	r0, #0
   11c92:	d1c6      	bne.n	11c22 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11c94:	f01b 0f01 	tst.w	fp, #1
   11c98:	d105      	bne.n	11ca6 <cbprintf_package_convert+0x192>
					out_len -= drop_ro_str_pos ? 2 : 1;
   11c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c9c:	1aed      	subs	r5, r5, r3
   11c9e:	e7aa      	b.n	11bf6 <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11ca0:	6a3b      	ldr	r3, [r7, #32]
   11ca2:	2b00      	cmp	r3, #0
   11ca4:	d0a7      	beq.n	11bf6 <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   11ca6:	4640      	mov	r0, r8
   11ca8:	f00d fa4b 	bl	1f142 <strlen>
				if (strl && strl_cnt < strl_len) {
   11cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   11cae:	b143      	cbz	r3, 11cc2 <cbprintf_package_convert+0x1ae>
   11cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   11cb4:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   11cb6:	bf3f      	itttt	cc
   11cb8:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   11cba:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   11cbc:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   11cc0:	3601      	addcc	r6, #1
				out_len += (len - 1);
   11cc2:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   11cc4:	e797      	b.n	11bf6 <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11cc6:	f1b9 0f00 	cmp.w	r9, #0
   11cca:	d071      	beq.n	11db0 <cbprintf_package_convert+0x29c>
   11ccc:	f01b 0604 	ands.w	r6, fp, #4
   11cd0:	d071      	beq.n	11db6 <cbprintf_package_convert+0x2a2>
		keep_cnt = ros_nbr;
   11cd2:	46c8      	mov	r8, r9
		scpy_cnt = 0;
   11cd4:	2600      	movs	r6, #0
		dst = keep_str_pos;
   11cd6:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   11cda:	464a      	mov	r2, r9
   11cdc:	4651      	mov	r1, sl
   11cde:	f00d fa5c 	bl	1f19a <memcpy>
	str_pos += ros_nbr;
   11ce2:	697b      	ldr	r3, [r7, #20]
   11ce4:	005b      	lsls	r3, r3, #1
   11ce6:	60bb      	str	r3, [r7, #8]
   11ce8:	697b      	ldr	r3, [r7, #20]
   11cea:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
   11cec:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   11cf0:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11cf2:	f00b 0302 	and.w	r3, fp, #2
   11cf6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
   11cf8:	697b      	ldr	r3, [r7, #20]
   11cfa:	459a      	cmp	sl, r3
   11cfc:	d15d      	bne.n	11dba <cbprintf_package_convert+0x2a6>
	out_desc.len = in_desc->len;
   11cfe:	7823      	ldrb	r3, [r4, #0]
   11d00:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11d02:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   11d04:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11d08:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   11d0c:	bf0c      	ite	eq
   11d0e:	ea4f 0158 	moveq.w	r1, r8, lsr #1
   11d12:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11d14:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11d18:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11d1a:	f040 809d 	bne.w	11e58 <cbprintf_package_convert+0x344>
   11d1e:	f01b 0f04 	tst.w	fp, #4
   11d22:	bf14      	ite	ne
   11d24:	4640      	movne	r0, r8
   11d26:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   11d28:	f894 b002 	ldrb.w	fp, [r4, #2]
   11d2c:	f894 a003 	ldrb.w	sl, [r4, #3]
   11d30:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   11d32:	7062      	strb	r2, [r4, #1]
   11d34:	70a0      	strb	r0, [r4, #2]
   11d36:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   11d38:	69ba      	ldr	r2, [r7, #24]
   11d3a:	68f9      	ldr	r1, [r7, #12]
   11d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d3e:	4620      	mov	r0, r4
   11d40:	4798      	blx	r3
	if (rv < 0) {
   11d42:	1e05      	subs	r5, r0, #0
   11d44:	f6ff af13 	blt.w	11b6e <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   11d48:	69fb      	ldr	r3, [r7, #28]
   11d4a:	7023      	strb	r3, [r4, #0]
   11d4c:	693b      	ldr	r3, [r7, #16]
   11d4e:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   11d50:	4641      	mov	r1, r8
   11d52:	69ba      	ldr	r2, [r7, #24]
   11d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   11d56:	f884 b002 	strb.w	fp, [r4, #2]
   11d5a:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   11d5e:	f107 0040 	add.w	r0, r7, #64	; 0x40
   11d62:	4798      	blx	r3
	if (rv < 0) {
   11d64:	f1b0 0800 	subs.w	r8, r0, #0
   11d68:	f2c0 80a3 	blt.w	11eb2 <cbprintf_package_convert+0x39e>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   11d6c:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   11d6e:	69ba      	ldr	r2, [r7, #24]
   11d70:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   11d72:	eba3 0109 	sub.w	r1, r3, r9
   11d76:	68fb      	ldr	r3, [r7, #12]
   11d78:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   11d7a:	68bb      	ldr	r3, [r7, #8]
   11d7c:	1ac9      	subs	r1, r1, r3
   11d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d80:	4798      	blx	r3
	if (rv < 0) {
   11d82:	2800      	cmp	r0, #0
   11d84:	f2c0 8097 	blt.w	11eb6 <cbprintf_package_convert+0x3a2>
	out_len += rv;
   11d88:	44a8      	add	r8, r5
	out_len += rv;
   11d8a:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
   11d8e:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   11d92:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   11d96:	45b3      	cmp	fp, r6
   11d98:	db60      	blt.n	11e5c <cbprintf_package_convert+0x348>
	(void)cb(NULL, 0, ctx);
   11d9a:	2100      	movs	r1, #0
   11d9c:	69ba      	ldr	r2, [r7, #24]
   11d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11da0:	4608      	mov	r0, r1
   11da2:	4798      	blx	r3
	return out_len;
   11da4:	e6e3      	b.n	11b6e <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   11da6:	f04f 0800 	mov.w	r8, #0
   11daa:	f107 0030 	add.w	r0, r7, #48	; 0x30
   11dae:	e794      	b.n	11cda <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   11db0:	464e      	mov	r6, r9
		keep_cnt = 0;
   11db2:	46c8      	mov	r8, r9
   11db4:	e795      	b.n	11ce2 <cbprintf_package_convert+0x1ce>
   11db6:	46b0      	mov	r8, r6
   11db8:	e793      	b.n	11ce2 <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   11dba:	f81a 1b02 	ldrb.w	r1, [sl], #2
   11dbe:	4a3f      	ldr	r2, [pc, #252]	; (11ebc <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
   11dc0:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   11dc4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   11dc8:	4293      	cmp	r3, r2
   11dca:	d302      	bcc.n	11dd2 <cbprintf_package_convert+0x2be>
   11dcc:	4a3c      	ldr	r2, [pc, #240]	; (11ec0 <cbprintf_package_convert+0x3ac>)
   11dce:	4293      	cmp	r3, r2
   11dd0:	d31c      	bcc.n	11e0c <cbprintf_package_convert+0x2f8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11dd2:	693b      	ldr	r3, [r7, #16]
   11dd4:	b123      	cbz	r3, 11de0 <cbprintf_package_convert+0x2cc>
   11dd6:	69f8      	ldr	r0, [r7, #28]
   11dd8:	f00c f8f0 	bl	1dfbc <is_ptr>
   11ddc:	2800      	cmp	r0, #0
   11dde:	d18b      	bne.n	11cf8 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11de0:	687b      	ldr	r3, [r7, #4]
   11de2:	b9f3      	cbnz	r3, 11e22 <cbprintf_package_convert+0x30e>
				keep_str_pos[keep_cnt++] = arg_idx;
   11de4:	f108 0228 	add.w	r2, r8, #40	; 0x28
   11de8:	f107 0028 	add.w	r0, r7, #40	; 0x28
   11dec:	4402      	add	r2, r0
   11dee:	f108 0301 	add.w	r3, r8, #1
   11df2:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   11df6:	f107 0250 	add.w	r2, r7, #80	; 0x50
   11dfa:	fa52 f383 	uxtab	r3, r2, r3
   11dfe:	f108 0802 	add.w	r8, r8, #2
   11e02:	fa5f f888 	uxtb.w	r8, r8
   11e06:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   11e0a:	e775      	b.n	11cf8 <cbprintf_package_convert+0x1e4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11e0c:	693b      	ldr	r3, [r7, #16]
   11e0e:	b12b      	cbz	r3, 11e1c <cbprintf_package_convert+0x308>
   11e10:	69f8      	ldr	r0, [r7, #28]
   11e12:	f00c f8d3 	bl	1dfbc <is_ptr>
   11e16:	2800      	cmp	r0, #0
   11e18:	f47f af6e 	bne.w	11cf8 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11e1c:	f01b 0f01 	tst.w	fp, #1
   11e20:	d009      	beq.n	11e36 <cbprintf_package_convert+0x322>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   11e22:	f106 0228 	add.w	r2, r6, #40	; 0x28
   11e26:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11e2a:	1c73      	adds	r3, r6, #1
   11e2c:	1856      	adds	r6, r2, r1
   11e2e:	f806 5c20 	strb.w	r5, [r6, #-32]
   11e32:	b2de      	uxtb	r6, r3
   11e34:	e760      	b.n	11cf8 <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11e36:	f01b 0f04 	tst.w	fp, #4
   11e3a:	f43f af5d 	beq.w	11cf8 <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
   11e3e:	f108 0228 	add.w	r2, r8, #40	; 0x28
   11e42:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11e46:	f108 0301 	add.w	r3, r8, #1
   11e4a:	eb02 0801 	add.w	r8, r2, r1
   11e4e:	f808 5c10 	strb.w	r5, [r8, #-16]
   11e52:	fa5f f883 	uxtb.w	r8, r3
   11e56:	e74f      	b.n	11cf8 <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11e58:	2000      	movs	r0, #0
   11e5a:	e765      	b.n	11d28 <cbprintf_package_convert+0x214>
		uint8_t loc = cpy_str_pos[i];
   11e5c:	f81b 300a 	ldrb.w	r3, [fp, sl]
   11e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   11e64:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   11e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   11e6a:	b1fb      	cbz	r3, 11eac <cbprintf_package_convert+0x398>
   11e6c:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   11e70:	69ba      	ldr	r2, [r7, #24]
   11e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e74:	2101      	movs	r1, #1
   11e76:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   11e7a:	4798      	blx	r3
		if (rv < 0) {
   11e7c:	2800      	cmp	r0, #0
   11e7e:	db1a      	blt.n	11eb6 <cbprintf_package_convert+0x3a2>
		out_len += rv;
   11e80:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   11e82:	f1b8 0f00 	cmp.w	r8, #0
   11e86:	d106      	bne.n	11e96 <cbprintf_package_convert+0x382>
   11e88:	4648      	mov	r0, r9
   11e8a:	f00d f95a 	bl	1f142 <strlen>
   11e8e:	f100 0801 	add.w	r8, r0, #1
   11e92:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   11e96:	69ba      	ldr	r2, [r7, #24]
   11e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e9a:	4641      	mov	r1, r8
   11e9c:	4648      	mov	r0, r9
   11e9e:	4798      	blx	r3
		if (rv < 0) {
   11ea0:	2800      	cmp	r0, #0
   11ea2:	db08      	blt.n	11eb6 <cbprintf_package_convert+0x3a2>
		out_len += rv;
   11ea4:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   11ea6:	f10b 0b01 	add.w	fp, fp, #1
   11eaa:	e774      	b.n	11d96 <cbprintf_package_convert+0x282>
		uint16_t str_len = strl ? strl[i] : 0;
   11eac:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   11eb0:	e7de      	b.n	11e70 <cbprintf_package_convert+0x35c>
   11eb2:	4645      	mov	r5, r8
   11eb4:	e65b      	b.n	11b6e <cbprintf_package_convert+0x5a>
   11eb6:	4605      	mov	r5, r0
   11eb8:	e659      	b.n	11b6e <cbprintf_package_convert+0x5a>
   11eba:	bf00      	nop
   11ebc:	00021b10 	.word	0x00021b10
   11ec0:	00024198 	.word	0x00024198
   11ec4:	00022769 	.word	0x00022769
   11ec8:	01000004 	.word	0x01000004
   11ecc:	00021e9c 	.word	0x00021e9c

00011ed0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   11ed0:	4b01      	ldr	r3, [pc, #4]	; (11ed8 <__printk_hook_install+0x8>)
   11ed2:	6018      	str	r0, [r3, #0]
}
   11ed4:	4770      	bx	lr
   11ed6:	bf00      	nop
   11ed8:	20000518 	.word	0x20000518

00011edc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11edc:	b530      	push	{r4, r5, lr}
   11ede:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   11ee0:	2500      	movs	r5, #0
   11ee2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   11ee6:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11ee8:	9500      	str	r5, [sp, #0]
   11eea:	a903      	add	r1, sp, #12
   11eec:	4805      	ldr	r0, [pc, #20]	; (11f04 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   11eee:	9505      	str	r5, [sp, #20]
   11ef0:	f7fe fbde 	bl	106b0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   11ef4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   11ef8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   11efa:	bfb8      	it	lt
   11efc:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11efe:	b007      	add	sp, #28
   11f00:	bd30      	pop	{r4, r5, pc}
   11f02:	bf00      	nop
   11f04:	0001e03b 	.word	0x0001e03b

00011f08 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11f0c:	8b05      	ldrh	r5, [r0, #24]
{
   11f0e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11f10:	0728      	lsls	r0, r5, #28
{
   11f12:	4690      	mov	r8, r2
	if (processing) {
   11f14:	d411      	bmi.n	11f3a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   11f16:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11f18:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   11f1c:	f040 80cd 	bne.w	120ba <process_event+0x1b2>
			evt = process_recheck(mgr);
   11f20:	4620      	mov	r0, r4
   11f22:	f00c fa88 	bl	1e436 <process_recheck>
		}

		if (evt == EVT_NOP) {
   11f26:	b178      	cbz	r0, 11f48 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   11f28:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11f2a:	8b21      	ldrh	r1, [r4, #24]
   11f2c:	2804      	cmp	r0, #4
   11f2e:	d811      	bhi.n	11f54 <process_event+0x4c>
   11f30:	e8df f000 	tbb	[pc, r0]
   11f34:	856d10c3 	.word	0x856d10c3
   11f38:	95          	.byte	0x95
   11f39:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   11f3a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11f3c:	bf0c      	ite	eq
   11f3e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11f42:	f045 0520 	orrne.w	r5, r5, #32
   11f46:	8325      	strh	r5, [r4, #24]
   11f48:	f388 8811 	msr	BASEPRI, r8
   11f4c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11f54:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11f58:	45aa      	cmp	sl, r5
   11f5a:	f000 80a6 	beq.w	120aa <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   11f5e:	2700      	movs	r7, #0
   11f60:	46b9      	mov	r9, r7
   11f62:	463e      	mov	r6, r7
   11f64:	68a3      	ldr	r3, [r4, #8]
   11f66:	2b00      	cmp	r3, #0
   11f68:	f000 80bd 	beq.w	120e6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11f6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11f70:	8321      	strh	r1, [r4, #24]
   11f72:	f388 8811 	msr	BASEPRI, r8
   11f76:	f3bf 8f6f 	isb	sy
	return list->head;
   11f7a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11f7c:	2900      	cmp	r1, #0
   11f7e:	f000 80bb 	beq.w	120f8 <process_event+0x1f0>
	return node->next;
   11f82:	680d      	ldr	r5, [r1, #0]
   11f84:	2900      	cmp	r1, #0
   11f86:	f000 80b7 	beq.w	120f8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   11f8a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   11f8e:	4633      	mov	r3, r6
   11f90:	4652      	mov	r2, sl
   11f92:	4620      	mov	r0, r4
   11f94:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11f96:	2d00      	cmp	r5, #0
   11f98:	d076      	beq.n	12088 <process_event+0x180>
   11f9a:	682b      	ldr	r3, [r5, #0]
   11f9c:	4629      	mov	r1, r5
   11f9e:	461d      	mov	r5, r3
   11fa0:	e7f0      	b.n	11f84 <process_event+0x7c>
   11fa2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11fa6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11fa8:	2a01      	cmp	r2, #1
   11faa:	d81b      	bhi.n	11fe4 <process_event+0xdc>
	list->head = NULL;
   11fac:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11fae:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   11fb2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   11fb4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11fb6:	b289      	uxth	r1, r1
	list->tail = NULL;
   11fb8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11fbc:	d109      	bne.n	11fd2 <process_event+0xca>
   11fbe:	463b      	mov	r3, r7
   11fc0:	e003      	b.n	11fca <process_event+0xc2>
				mgr->refs += 1U;
   11fc2:	8b62      	ldrh	r2, [r4, #26]
   11fc4:	3201      	adds	r2, #1
   11fc6:	8362      	strh	r2, [r4, #26]
	return node->next;
   11fc8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11fca:	2b00      	cmp	r3, #0
   11fcc:	d1f9      	bne.n	11fc2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11fce:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11fd2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11fd4:	4620      	mov	r0, r4
   11fd6:	f00c fa2e 	bl	1e436 <process_recheck>
   11fda:	2800      	cmp	r0, #0
   11fdc:	d07b      	beq.n	120d6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11fde:	f041 0120 	orr.w	r1, r1, #32
   11fe2:	e077      	b.n	120d4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11fe4:	2b04      	cmp	r3, #4
   11fe6:	d10a      	bne.n	11ffe <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11fe8:	f021 0107 	bic.w	r1, r1, #7
   11fec:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11fee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11ff0:	4620      	mov	r0, r4
   11ff2:	f00c fa20 	bl	1e436 <process_recheck>
   11ff6:	b110      	cbz	r0, 11ffe <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11ff8:	f041 0120 	orr.w	r1, r1, #32
   11ffc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11ffe:	8b21      	ldrh	r1, [r4, #24]
   12000:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12004:	45aa      	cmp	sl, r5
   12006:	d050      	beq.n	120aa <process_event+0x1a2>
   12008:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   1200a:	46b9      	mov	r9, r7
   1200c:	e7aa      	b.n	11f64 <process_event+0x5c>
			transit = mgr->transitions->start;
   1200e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12010:	f021 0107 	bic.w	r1, r1, #7
   12014:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   12018:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   1201a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1201e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12020:	d12d      	bne.n	1207e <process_event+0x176>
		    || (transit != NULL)) {
   12022:	f1b9 0f00 	cmp.w	r9, #0
   12026:	d040      	beq.n	120aa <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12028:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1202c:	8321      	strh	r1, [r4, #24]
   1202e:	f388 8811 	msr	BASEPRI, r8
   12032:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   12036:	493a      	ldr	r1, [pc, #232]	; (12120 <process_event+0x218>)
   12038:	4620      	mov	r0, r4
   1203a:	47c8      	blx	r9
   1203c:	e029      	b.n	12092 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1203e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   12042:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12044:	f041 0104 	orr.w	r1, r1, #4
   12048:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1204a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   1204c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12050:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12052:	d0e6      	beq.n	12022 <process_event+0x11a>
   12054:	2700      	movs	r7, #0
		res = 0;
   12056:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12058:	f04f 0a04 	mov.w	sl, #4
   1205c:	e782      	b.n	11f64 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1205e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   12062:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12064:	f041 0105 	orr.w	r1, r1, #5
   12068:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1206a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   1206c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12070:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12072:	d0d6      	beq.n	12022 <process_event+0x11a>
   12074:	2700      	movs	r7, #0
		res = 0;
   12076:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12078:	f04f 0a05 	mov.w	sl, #5
   1207c:	e772      	b.n	11f64 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   1207e:	2700      	movs	r7, #0
		res = 0;
   12080:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12082:	f04f 0a06 	mov.w	sl, #6
   12086:	e76d      	b.n	11f64 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12088:	462b      	mov	r3, r5
   1208a:	e787      	b.n	11f9c <process_event+0x94>
			if (transit != NULL) {
   1208c:	f1b9 0f00 	cmp.w	r9, #0
   12090:	d1d1      	bne.n	12036 <process_event+0x12e>
	__asm__ volatile(
   12092:	f04f 0340 	mov.w	r3, #64	; 0x40
   12096:	f3ef 8811 	mrs	r8, BASEPRI
   1209a:	f383 8812 	msr	BASEPRI_MAX, r3
   1209e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   120a2:	8b23      	ldrh	r3, [r4, #24]
   120a4:	f023 0308 	bic.w	r3, r3, #8
   120a8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   120aa:	8b25      	ldrh	r5, [r4, #24]
   120ac:	06ea      	lsls	r2, r5, #27
   120ae:	d52e      	bpl.n	1210e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   120b0:	f025 0310 	bic.w	r3, r5, #16
   120b4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   120b6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   120ba:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120bc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   120be:	2e00      	cmp	r6, #0
   120c0:	f6bf af6f 	bge.w	11fa2 <process_event+0x9a>
	list->head = NULL;
   120c4:	2300      	movs	r3, #0
		*clients = mgr->clients;
   120c6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   120c8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   120cc:	f021 0107 	bic.w	r1, r1, #7
   120d0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   120d4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   120d6:	8b21      	ldrh	r1, [r4, #24]
   120d8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   120dc:	45aa      	cmp	sl, r5
   120de:	f04f 0900 	mov.w	r9, #0
   120e2:	f47f af3f 	bne.w	11f64 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   120e6:	2f00      	cmp	r7, #0
   120e8:	d09b      	beq.n	12022 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   120ea:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   120ee:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   120f0:	f388 8811 	msr	BASEPRI, r8
   120f4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   120f8:	2f00      	cmp	r7, #0
   120fa:	d0c7      	beq.n	1208c <process_event+0x184>
	return node->next;
   120fc:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   120fe:	4639      	mov	r1, r7
   12100:	4633      	mov	r3, r6
   12102:	4652      	mov	r2, sl
   12104:	4620      	mov	r0, r4
   12106:	f00c f9c2 	bl	1e48e <notify_one>
	list->head = node;
   1210a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   1210c:	e7f4      	b.n	120f8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1210e:	06ab      	lsls	r3, r5, #26
   12110:	f57f af1a 	bpl.w	11f48 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12114:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12118:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1211a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   1211e:	e6ff      	b.n	11f20 <process_event+0x18>
   12120:	0001e4bb 	.word	0x0001e4bb

00012124 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12124:	f009 b8ae 	b.w	1b284 <SystemInit>

00012128 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   12128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1212c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12188 <activate_foreach_backend+0x60>
{
   12130:	4604      	mov	r4, r0
	while (mask_cpy) {
   12132:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   12134:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   12138:	b914      	cbnz	r4, 12140 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   1213a:	4638      	mov	r0, r7
   1213c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   12140:	fa94 f5a4 	rbit	r5, r4
   12144:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   12148:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1214c:	012e      	lsls	r6, r5, #4
   1214e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   12152:	ea6f 0a03 	mvn.w	sl, r3
   12156:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1215a:	7b2b      	ldrb	r3, [r5, #12]
   1215c:	2b00      	cmp	r3, #0
   1215e:	d0eb      	beq.n	12138 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   12160:	f858 3006 	ldr.w	r3, [r8, r6]
   12164:	691b      	ldr	r3, [r3, #16]
   12166:	b94b      	cbnz	r3, 1217c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   12168:	4446      	add	r6, r8
			log_backend_enable(backend,
   1216a:	2204      	movs	r2, #4
   1216c:	6873      	ldr	r3, [r6, #4]
   1216e:	4628      	mov	r0, r5
   12170:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   12172:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   12176:	f000 fa55 	bl	12624 <log_backend_enable>
   1217a:	e7dd      	b.n	12138 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   1217c:	4628      	mov	r0, r5
   1217e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12180:	2800      	cmp	r0, #0
   12182:	d1d9      	bne.n	12138 <activate_foreach_backend+0x10>
   12184:	e7f0      	b.n	12168 <activate_foreach_backend+0x40>
   12186:	bf00      	nop
   12188:	00021f0c 	.word	0x00021f0c

0001218c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1218c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1218e:	4910      	ldr	r1, [pc, #64]	; (121d0 <enable_logger+0x44>)
   12190:	4810      	ldr	r0, [pc, #64]	; (121d4 <enable_logger+0x48>)
{
   12192:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12194:	2200      	movs	r2, #0
   12196:	f00f fb30 	bl	217fa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1219a:	4d0f      	ldr	r5, [pc, #60]	; (121d8 <enable_logger+0x4c>)
   1219c:	490f      	ldr	r1, [pc, #60]	; (121dc <enable_logger+0x50>)
   1219e:	2200      	movs	r2, #0
   121a0:	2300      	movs	r3, #0
   121a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   121a6:	2400      	movs	r4, #0
   121a8:	230e      	movs	r3, #14
   121aa:	e9cd 3403 	strd	r3, r4, [sp, #12]
   121ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
   121b2:	4b0b      	ldr	r3, [pc, #44]	; (121e0 <enable_logger+0x54>)
   121b4:	9400      	str	r4, [sp, #0]
   121b6:	f44f 7240 	mov.w	r2, #768	; 0x300
   121ba:	4628      	mov	r0, r5
   121bc:	f00a fa40 	bl	1c640 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   121c0:	4908      	ldr	r1, [pc, #32]	; (121e4 <enable_logger+0x58>)
   121c2:	4628      	mov	r0, r5
   121c4:	f00e ffd4 	bl	21170 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   121c8:	4620      	mov	r0, r4
   121ca:	b009      	add	sp, #36	; 0x24
   121cc:	bd30      	pop	{r4, r5, pc}
   121ce:	bf00      	nop
   121d0:	000121e9 	.word	0x000121e9
   121d4:	20001a88 	.word	0x20001a88
   121d8:	200015b8 	.word	0x200015b8
   121dc:	20003580 	.word	0x20003580
   121e0:	000124d1 	.word	0x000124d1
   121e4:	00022823 	.word	0x00022823

000121e8 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   121e8:	4801      	ldr	r0, [pc, #4]	; (121f0 <log_process_thread_timer_expiry_fn+0x8>)
   121ea:	f00a bbb7 	b.w	1c95c <z_impl_k_sem_give>
   121ee:	bf00      	nop
   121f0:	20000844 	.word	0x20000844

000121f4 <z_log_init>:
{
   121f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   121f8:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   121fa:	481f      	ldr	r0, [pc, #124]	; (12278 <z_log_init+0x84>)
{
   121fc:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   121fe:	f00c fcac 	bl	1eb5a <atomic_inc>
   12202:	4606      	mov	r6, r0
   12204:	2800      	cmp	r0, #0
   12206:	d030      	beq.n	1226a <z_log_init+0x76>
	uint32_t mask = 0;
   12208:	2500      	movs	r5, #0
}
   1220a:	4628      	mov	r0, r5
   1220c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   12210:	7b23      	ldrb	r3, [r4, #12]
   12212:	b173      	cbz	r3, 12232 <z_log_init+0x3e>
	if (backend->api->init) {
   12214:	6823      	ldr	r3, [r4, #0]
   12216:	68db      	ldr	r3, [r3, #12]
   12218:	b10b      	cbz	r3, 1221e <z_log_init+0x2a>
		backend->api->init(backend);
   1221a:	4620      	mov	r0, r4
   1221c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   1221e:	6823      	ldr	r3, [r4, #0]
   12220:	691b      	ldr	r3, [r3, #16]
   12222:	b9d3      	cbnz	r3, 1225a <z_log_init+0x66>
				log_backend_enable(backend,
   12224:	6863      	ldr	r3, [r4, #4]
   12226:	2204      	movs	r2, #4
   12228:	6819      	ldr	r1, [r3, #0]
   1222a:	4620      	mov	r0, r4
   1222c:	f000 f9fa 	bl	12624 <log_backend_enable>
			i++;
   12230:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12232:	3410      	adds	r4, #16
   12234:	454c      	cmp	r4, r9
   12236:	d3eb      	bcc.n	12210 <z_log_init+0x1c>
	if (blocking) {
   12238:	f1b8 0f00 	cmp.w	r8, #0
   1223c:	d0e5      	beq.n	1220a <z_log_init+0x16>
		while (mask) {
   1223e:	2d00      	cmp	r5, #0
   12240:	d0e2      	beq.n	12208 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   12242:	4628      	mov	r0, r5
   12244:	f7ff ff70 	bl	12128 <activate_foreach_backend>
   12248:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   1224a:	2f00      	cmp	r7, #0
   1224c:	d0f7      	beq.n	1223e <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   1224e:	2100      	movs	r1, #0
   12250:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12254:	f00a ffcc 	bl	1d1f0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   12258:	e7f1      	b.n	1223e <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   1225a:	4620      	mov	r0, r4
   1225c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   1225e:	2800      	cmp	r0, #0
   12260:	d0e0      	beq.n	12224 <z_log_init+0x30>
				mask |= BIT(i);
   12262:	fa0a f306 	lsl.w	r3, sl, r6
   12266:	431d      	orrs	r5, r3
   12268:	e7e2      	b.n	12230 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1226a:	4c04      	ldr	r4, [pc, #16]	; (1227c <z_log_init+0x88>)
   1226c:	f8df 9010 	ldr.w	r9, [pc, #16]	; 12280 <z_log_init+0x8c>
	uint32_t mask = 0;
   12270:	4605      	mov	r5, r0
				mask |= BIT(i);
   12272:	f04f 0a01 	mov.w	sl, #1
   12276:	e7dd      	b.n	12234 <z_log_init+0x40>
   12278:	20002b18 	.word	0x20002b18
   1227c:	00021f0c 	.word	0x00021f0c
   12280:	00021f1c 	.word	0x00021f1c

00012284 <log_format_func_t_get>:
}
   12284:	4b01      	ldr	r3, [pc, #4]	; (1228c <log_format_func_t_get+0x8>)
   12286:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1228a:	4770      	bx	lr
   1228c:	00022000 	.word	0x00022000

00012290 <log_set_timestamp_func>:
{
   12290:	b508      	push	{r3, lr}
   12292:	4603      	mov	r3, r0
   12294:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   12296:	b12b      	cbz	r3, 122a4 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   12298:	4a04      	ldr	r2, [pc, #16]	; (122ac <log_set_timestamp_func+0x1c>)
   1229a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   1229c:	f000 fc48 	bl	12b30 <log_output_timestamp_freq_set>
	return 0;
   122a0:	2000      	movs	r0, #0
}
   122a2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   122a4:	f06f 0015 	mvn.w	r0, #21
   122a8:	e7fb      	b.n	122a2 <log_set_timestamp_func+0x12>
   122aa:	bf00      	nop
   122ac:	2000051c 	.word	0x2000051c

000122b0 <z_log_notify_backend_enabled>:
{
   122b0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   122b2:	4c04      	ldr	r4, [pc, #16]	; (122c4 <z_log_notify_backend_enabled+0x14>)
   122b4:	7823      	ldrb	r3, [r4, #0]
   122b6:	b913      	cbnz	r3, 122be <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   122b8:	4803      	ldr	r0, [pc, #12]	; (122c8 <z_log_notify_backend_enabled+0x18>)
   122ba:	f00a fb4f 	bl	1c95c <z_impl_k_sem_give>
	backend_attached = true;
   122be:	2301      	movs	r3, #1
   122c0:	7023      	strb	r3, [r4, #0]
}
   122c2:	bd10      	pop	{r4, pc}
   122c4:	20002fb4 	.word	0x20002fb4
   122c8:	20000844 	.word	0x20000844

000122cc <z_log_dropped>:
{
   122cc:	b510      	push	{r4, lr}
   122ce:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   122d0:	4808      	ldr	r0, [pc, #32]	; (122f4 <z_log_dropped+0x28>)
   122d2:	f00c fc42 	bl	1eb5a <atomic_inc>
	if (buffered) {
   122d6:	b15c      	cbz	r4, 122f0 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   122d8:	f3bf 8f5b 	dmb	ish
   122dc:	4b06      	ldr	r3, [pc, #24]	; (122f8 <z_log_dropped+0x2c>)
   122de:	e853 1f00 	ldrex	r1, [r3]
   122e2:	3901      	subs	r1, #1
   122e4:	e843 1200 	strex	r2, r1, [r3]
   122e8:	2a00      	cmp	r2, #0
   122ea:	d1f8      	bne.n	122de <z_log_dropped+0x12>
   122ec:	f3bf 8f5b 	dmb	ish
}
   122f0:	bd10      	pop	{r4, pc}
   122f2:	bf00      	nop
   122f4:	20002b10 	.word	0x20002b10
   122f8:	20002b14 	.word	0x20002b14

000122fc <z_log_dropped_read_and_clear>:
}
   122fc:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   122fe:	4b06      	ldr	r3, [pc, #24]	; (12318 <z_log_dropped_read_and_clear+0x1c>)
   12300:	f3bf 8f5b 	dmb	ish
   12304:	4601      	mov	r1, r0
   12306:	e853 0f00 	ldrex	r0, [r3]
   1230a:	e843 1200 	strex	r2, r1, [r3]
   1230e:	2a00      	cmp	r2, #0
   12310:	d1f9      	bne.n	12306 <z_log_dropped_read_and_clear+0xa>
   12312:	f3bf 8f5b 	dmb	ish
   12316:	4770      	bx	lr
   12318:	20002b10 	.word	0x20002b10

0001231c <dropped_notify>:
{
   1231c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1231e:	f7ff ffed 	bl	122fc <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12322:	4c08      	ldr	r4, [pc, #32]	; (12344 <dropped_notify+0x28>)
   12324:	4e08      	ldr	r6, [pc, #32]	; (12348 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   12326:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12328:	42b4      	cmp	r4, r6
   1232a:	d300      	bcc.n	1232e <dropped_notify+0x12>
}
   1232c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1232e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12330:	795b      	ldrb	r3, [r3, #5]
   12332:	b12b      	cbz	r3, 12340 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   12334:	6823      	ldr	r3, [r4, #0]
   12336:	685b      	ldr	r3, [r3, #4]
   12338:	b113      	cbz	r3, 12340 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   1233a:	4629      	mov	r1, r5
   1233c:	4620      	mov	r0, r4
   1233e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12340:	3410      	adds	r4, #16
   12342:	e7f1      	b.n	12328 <dropped_notify+0xc>
   12344:	00021f0c 	.word	0x00021f0c
   12348:	00021f1c 	.word	0x00021f1c

0001234c <z_log_msg_init>:
{
   1234c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   1234e:	4c04      	ldr	r4, [pc, #16]	; (12360 <z_log_msg_init+0x14>)
   12350:	4904      	ldr	r1, [pc, #16]	; (12364 <z_log_msg_init+0x18>)
   12352:	4620      	mov	r0, r4
   12354:	f00c fa9e 	bl	1e894 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   12358:	4b03      	ldr	r3, [pc, #12]	; (12368 <z_log_msg_init+0x1c>)
   1235a:	601c      	str	r4, [r3, #0]
}
   1235c:	bd10      	pop	{r4, pc}
   1235e:	bf00      	nop
   12360:	20000784 	.word	0x20000784
   12364:	00021fec 	.word	0x00021fec
   12368:	20002b08 	.word	0x20002b08

0001236c <log_core_init>:
{
   1236c:	b508      	push	{r3, lr}
	panic_mode = false;
   1236e:	4a07      	ldr	r2, [pc, #28]	; (1238c <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   12370:	4807      	ldr	r0, [pc, #28]	; (12390 <log_core_init+0x24>)
	panic_mode = false;
   12372:	2300      	movs	r3, #0
   12374:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12376:	4a07      	ldr	r2, [pc, #28]	; (12394 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
   12378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
   1237c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   1237e:	f7ff ff87 	bl	12290 <log_set_timestamp_func>
}
   12382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   12386:	f7ff bfe1 	b.w	1234c <z_log_msg_init>
   1238a:	bf00      	nop
   1238c:	20002fb5 	.word	0x20002fb5
   12390:	0001eb57 	.word	0x0001eb57
   12394:	20002b10 	.word	0x20002b10

00012398 <z_log_msg_alloc>:
{
   12398:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1239a:	2200      	movs	r2, #0
   1239c:	4801      	ldr	r0, [pc, #4]	; (123a4 <z_log_msg_alloc+0xc>)
   1239e:	2300      	movs	r3, #0
   123a0:	f00c ba99 	b.w	1e8d6 <mpsc_pbuf_alloc>
   123a4:	20000784 	.word	0x20000784

000123a8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   123a8:	4801      	ldr	r0, [pc, #4]	; (123b0 <z_log_msg_local_claim+0x8>)
   123aa:	f00c bb32 	b.w	1ea12 <mpsc_pbuf_claim>
   123ae:	bf00      	nop
   123b0:	20000784 	.word	0x20000784

000123b4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   123b4:	4b02      	ldr	r3, [pc, #8]	; (123c0 <z_log_msg_free+0xc>)
{
   123b6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   123b8:	6818      	ldr	r0, [r3, #0]
   123ba:	f00c bb7a 	b.w	1eab2 <mpsc_pbuf_free>
   123be:	bf00      	nop
   123c0:	20002b08 	.word	0x20002b08

000123c4 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   123c4:	4801      	ldr	r0, [pc, #4]	; (123cc <z_log_msg_pending+0x8>)
   123c6:	f00c bba8 	b.w	1eb1a <mpsc_pbuf_is_pending>
   123ca:	bf00      	nop
   123cc:	20000784 	.word	0x20000784

000123d0 <z_impl_log_process>:
{
   123d0:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   123d2:	4b28      	ldr	r3, [pc, #160]	; (12474 <z_impl_log_process+0xa4>)
   123d4:	7818      	ldrb	r0, [r3, #0]
   123d6:	2800      	cmp	r0, #0
   123d8:	d04b      	beq.n	12472 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   123da:	f7ff ffe5 	bl	123a8 <z_log_msg_local_claim>
	if (msg) {
   123de:	4605      	mov	r5, r0
   123e0:	b190      	cbz	r0, 12408 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   123e2:	f3bf 8f5b 	dmb	ish
   123e6:	4b24      	ldr	r3, [pc, #144]	; (12478 <z_impl_log_process+0xa8>)
   123e8:	e853 1f00 	ldrex	r1, [r3]
   123ec:	3901      	subs	r1, #1
   123ee:	e843 1200 	strex	r2, r1, [r3]
   123f2:	2a00      	cmp	r2, #0
   123f4:	d1f8      	bne.n	123e8 <z_impl_log_process+0x18>
   123f6:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   123fa:	4c20      	ldr	r4, [pc, #128]	; (1247c <z_impl_log_process+0xac>)
   123fc:	4e20      	ldr	r6, [pc, #128]	; (12480 <z_impl_log_process+0xb0>)
   123fe:	42b4      	cmp	r4, r6
   12400:	d32d      	bcc.n	1245e <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   12402:	4628      	mov	r0, r5
   12404:	f7ff ffd6 	bl	123b4 <z_log_msg_free>
	return dropped_cnt > 0;
   12408:	4b1e      	ldr	r3, [pc, #120]	; (12484 <z_impl_log_process+0xb4>)
   1240a:	4c1f      	ldr	r4, [pc, #124]	; (12488 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   1240c:	681b      	ldr	r3, [r3, #0]
   1240e:	2b00      	cmp	r3, #0
   12410:	dd19      	ble.n	12446 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   12412:	f00f f9ca 	bl	217aa <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   12416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1241a:	fba0 0302 	umull	r0, r3, r0, r2
   1241e:	fb02 3101 	mla	r1, r2, r1, r3
   12422:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12424:	e9d4 2000 	ldrd	r2, r0, [r4]
   12428:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1242c:	1a9b      	subs	r3, r3, r2
   1242e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   12432:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12436:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   1243a:	4293      	cmp	r3, r2
   1243c:	f171 0100 	sbcs.w	r1, r1, #0
   12440:	d301      	bcc.n	12446 <z_impl_log_process+0x76>
				dropped_notify();
   12442:	f7ff ff6b 	bl	1231c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   12446:	e9d4 3200 	ldrd	r3, r2, [r4]
   1244a:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   1244e:	f142 0200 	adc.w	r2, r2, #0
   12452:	e9c4 3200 	strd	r3, r2, [r4]
}
   12456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   1245a:	f7ff bfb3 	b.w	123c4 <z_log_msg_pending>
	return backend->cb->active;
   1245e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   12460:	795b      	ldrb	r3, [r3, #5]
   12462:	b123      	cbz	r3, 1246e <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   12464:	6823      	ldr	r3, [r4, #0]
   12466:	4629      	mov	r1, r5
   12468:	681b      	ldr	r3, [r3, #0]
   1246a:	4620      	mov	r0, r4
   1246c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1246e:	3410      	adds	r4, #16
   12470:	e7c5      	b.n	123fe <z_impl_log_process+0x2e>
}
   12472:	bd70      	pop	{r4, r5, r6, pc}
   12474:	20002fb4 	.word	0x20002fb4
   12478:	20002b14 	.word	0x20002b14
   1247c:	00021f0c 	.word	0x00021f0c
   12480:	00021f1c 	.word	0x00021f1c
   12484:	20002b10 	.word	0x20002b10
   12488:	20001a80 	.word	0x20001a80

0001248c <z_impl_log_panic>:
{
   1248c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   1248e:	4d0d      	ldr	r5, [pc, #52]	; (124c4 <z_impl_log_panic+0x38>)
   12490:	7829      	ldrb	r1, [r5, #0]
   12492:	b961      	cbnz	r1, 124ae <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   12494:	2001      	movs	r0, #1
   12496:	f7ff fead 	bl	121f4 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1249a:	4c0b      	ldr	r4, [pc, #44]	; (124c8 <z_impl_log_panic+0x3c>)
   1249c:	4e0b      	ldr	r6, [pc, #44]	; (124cc <z_impl_log_panic+0x40>)
   1249e:	42b4      	cmp	r4, r6
   124a0:	d306      	bcc.n	124b0 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   124a2:	f7ff ff95 	bl	123d0 <z_impl_log_process>
		while (log_process() == true) {
   124a6:	2800      	cmp	r0, #0
   124a8:	d1fb      	bne.n	124a2 <z_impl_log_panic+0x16>
	panic_mode = true;
   124aa:	2301      	movs	r3, #1
   124ac:	702b      	strb	r3, [r5, #0]
}
   124ae:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   124b0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   124b2:	795b      	ldrb	r3, [r3, #5]
   124b4:	b11b      	cbz	r3, 124be <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   124b6:	6823      	ldr	r3, [r4, #0]
   124b8:	4620      	mov	r0, r4
   124ba:	689b      	ldr	r3, [r3, #8]
   124bc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   124be:	3410      	adds	r4, #16
   124c0:	e7ed      	b.n	1249e <z_impl_log_panic+0x12>
   124c2:	bf00      	nop
   124c4:	20002fb5 	.word	0x20002fb5
   124c8:	00021f0c 	.word	0x00021f0c
   124cc:	00021f1c 	.word	0x00021f1c

000124d0 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   124d0:	2100      	movs	r1, #0
{
   124d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   124d6:	4608      	mov	r0, r1
   124d8:	f7ff fe8c 	bl	121f4 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   124dc:	4604      	mov	r4, r0
   124de:	b348      	cbz	r0, 12534 <log_process_thread_func+0x64>
   124e0:	f240 6867 	movw	r8, #1639	; 0x667
   124e4:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   124e8:	f00a fe9c 	bl	1d224 <z_impl_z_current_get>
	proc_tid = process_tid;
   124ec:	4b1a      	ldr	r3, [pc, #104]	; (12558 <log_process_thread_func+0x88>)
   124ee:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   124f0:	b130      	cbz	r0, 12500 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   124f2:	4b1a      	ldr	r3, [pc, #104]	; (1255c <log_process_thread_func+0x8c>)
	    process_tid &&
   124f4:	681b      	ldr	r3, [r3, #0]
   124f6:	2b09      	cmp	r3, #9
   124f8:	dd02      	ble.n	12500 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   124fa:	4819      	ldr	r0, [pc, #100]	; (12560 <log_process_thread_func+0x90>)
   124fc:	f00a fa2e 	bl	1c95c <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12500:	4f18      	ldr	r7, [pc, #96]	; (12564 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   12502:	f8df a05c 	ldr.w	sl, [pc, #92]	; 12560 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12506:	2500      	movs	r5, #0
		if (activate_mask) {
   12508:	b144      	cbz	r4, 1251c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   1250a:	4620      	mov	r0, r4
   1250c:	f7ff fe0c 	bl	12128 <activate_foreach_backend>
			if (!activate_mask) {
   12510:	4604      	mov	r4, r0
   12512:	b918      	cbnz	r0, 1251c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   12514:	f04f 38ff 	mov.w	r8, #4294967295
   12518:	f04f 39ff 	mov.w	r9, #4294967295
   1251c:	f7ff ff58 	bl	123d0 <z_impl_log_process>
		if (log_process() == false) {
   12520:	4606      	mov	r6, r0
   12522:	b928      	cbnz	r0, 12530 <log_process_thread_func+0x60>
			if (processed_any) {
   12524:	b9b5      	cbnz	r5, 12554 <log_process_thread_func+0x84>
   12526:	4642      	mov	r2, r8
   12528:	464b      	mov	r3, r9
   1252a:	4650      	mov	r0, sl
   1252c:	f00a fa3c 	bl	1c9a8 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12530:	4635      	mov	r5, r6
   12532:	e7e9      	b.n	12508 <log_process_thread_func+0x38>
   12534:	f04f 38ff 	mov.w	r8, #4294967295
   12538:	f04f 39ff 	mov.w	r9, #4294967295
   1253c:	e7d4      	b.n	124e8 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   1253e:	682b      	ldr	r3, [r5, #0]
   12540:	699b      	ldr	r3, [r3, #24]
   12542:	b11b      	cbz	r3, 1254c <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   12544:	2200      	movs	r2, #0
   12546:	4611      	mov	r1, r2
   12548:	4628      	mov	r0, r5
   1254a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1254c:	3510      	adds	r5, #16
   1254e:	42bd      	cmp	r5, r7
   12550:	d3f5      	bcc.n	1253e <log_process_thread_func+0x6e>
   12552:	e7e8      	b.n	12526 <log_process_thread_func+0x56>
   12554:	4d04      	ldr	r5, [pc, #16]	; (12568 <log_process_thread_func+0x98>)
   12556:	e7fa      	b.n	1254e <log_process_thread_func+0x7e>
   12558:	20002b0c 	.word	0x20002b0c
   1255c:	20002b14 	.word	0x20002b14
   12560:	20000844 	.word	0x20000844
   12564:	00021f1c 	.word	0x00021f1c
   12568:	00021f0c 	.word	0x00021f0c

0001256c <z_log_msg_post_finalize>:
{
   1256c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   1256e:	4818      	ldr	r0, [pc, #96]	; (125d0 <z_log_msg_post_finalize+0x64>)
   12570:	f00c faf3 	bl	1eb5a <atomic_inc>
	if (panic_mode) {
   12574:	4b17      	ldr	r3, [pc, #92]	; (125d4 <z_log_msg_post_finalize+0x68>)
   12576:	781b      	ldrb	r3, [r3, #0]
   12578:	b17b      	cbz	r3, 1259a <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   1257a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1257e:	f3ef 8411 	mrs	r4, BASEPRI
   12582:	f383 8812 	msr	BASEPRI_MAX, r3
   12586:	f3bf 8f6f 	isb	sy
   1258a:	f7ff ff21 	bl	123d0 <z_impl_log_process>
	__asm__ volatile(
   1258e:	f384 8811 	msr	BASEPRI, r4
   12592:	f3bf 8f6f 	isb	sy
}
   12596:	b002      	add	sp, #8
   12598:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   1259a:	4b0f      	ldr	r3, [pc, #60]	; (125d8 <z_log_msg_post_finalize+0x6c>)
   1259c:	681b      	ldr	r3, [r3, #0]
   1259e:	2b00      	cmp	r3, #0
   125a0:	d0f9      	beq.n	12596 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   125a2:	b950      	cbnz	r0, 125ba <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   125a4:	2200      	movs	r2, #0
   125a6:	2300      	movs	r3, #0
   125a8:	e9cd 2300 	strd	r2, r3, [sp]
   125ac:	480b      	ldr	r0, [pc, #44]	; (125dc <z_log_msg_post_finalize+0x70>)
   125ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   125b2:	2300      	movs	r3, #0
   125b4:	f00b f872 	bl	1d69c <z_impl_k_timer_start>
   125b8:	e7ed      	b.n	12596 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   125ba:	280a      	cmp	r0, #10
   125bc:	d1eb      	bne.n	12596 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   125be:	4807      	ldr	r0, [pc, #28]	; (125dc <z_log_msg_post_finalize+0x70>)
   125c0:	f00f f927 	bl	21812 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   125c4:	4806      	ldr	r0, [pc, #24]	; (125e0 <z_log_msg_post_finalize+0x74>)
}
   125c6:	b002      	add	sp, #8
   125c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   125cc:	f00a b9c6 	b.w	1c95c <z_impl_k_sem_give>
   125d0:	20002b14 	.word	0x20002b14
   125d4:	20002fb5 	.word	0x20002fb5
   125d8:	20002b0c 	.word	0x20002b0c
   125dc:	20001a88 	.word	0x20001a88
   125e0:	20000844 	.word	0x20000844

000125e4 <z_log_msg_commit>:
{
   125e4:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   125e6:	4b06      	ldr	r3, [pc, #24]	; (12600 <z_log_msg_commit+0x1c>)
   125e8:	681b      	ldr	r3, [r3, #0]
{
   125ea:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   125ec:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   125ee:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   125f0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   125f2:	4804      	ldr	r0, [pc, #16]	; (12604 <z_log_msg_commit+0x20>)
   125f4:	f00c f9ed 	bl	1e9d2 <mpsc_pbuf_commit>
}
   125f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   125fc:	f7ff bfb6 	b.w	1256c <z_log_msg_post_finalize>
   12600:	2000051c 	.word	0x2000051c
   12604:	20000784 	.word	0x20000784

00012608 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   12608:	4a04      	ldr	r2, [pc, #16]	; (1261c <log_source_name_get+0x14>)
   1260a:	4b05      	ldr	r3, [pc, #20]	; (12620 <log_source_name_get+0x18>)
   1260c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   1260e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   12612:	bf34      	ite	cc
   12614:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   12618:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   1261a:	4770      	bx	lr
   1261c:	00021e34 	.word	0x00021e34
   12620:	00021f0c 	.word	0x00021f0c

00012624 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   12624:	4b08      	ldr	r3, [pc, #32]	; (12648 <log_backend_enable+0x24>)
   12626:	1ac3      	subs	r3, r0, r3
{
   12628:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   1262a:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   1262c:	6844      	ldr	r4, [r0, #4]
   1262e:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   12630:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   12632:	6843      	ldr	r3, [r0, #4]
   12634:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   12636:	6843      	ldr	r3, [r0, #4]
   12638:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1263a:	6843      	ldr	r3, [r0, #4]
   1263c:	2201      	movs	r2, #1
   1263e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   12640:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
   12644:	f7ff be34 	b.w	122b0 <z_log_notify_backend_enabled>
   12648:	00021f0c 	.word	0x00021f0c

0001264c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   1264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12650:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   12652:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   12656:	f3c1 2649 	ubfx	r6, r1, #9, #10
   1265a:	9005      	str	r0, [sp, #20]
   1265c:	460d      	mov	r5, r1
   1265e:	4690      	mov	r8, r2
   12660:	4699      	mov	r9, r3
   12662:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   12664:	2e00      	cmp	r6, #0
   12666:	d03c      	beq.n	126e2 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   12668:	f04f 0b04 	mov.w	fp, #4
   1266c:	af09      	add	r7, sp, #36	; 0x24
   1266e:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   12672:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   12674:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   12676:	ab0b      	add	r3, sp, #44	; 0x2c
   12678:	f8cd b008 	str.w	fp, [sp, #8]
   1267c:	9701      	str	r7, [sp, #4]
   1267e:	f8cd a000 	str.w	sl, [sp]
   12682:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   12684:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   12688:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1268a:	9607      	str	r6, [sp, #28]
   1268c:	f7ff fa42 	bl	11b14 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   12690:	f3c0 0309 	ubfx	r3, r0, #0, #10
   12694:	1918      	adds	r0, r3, r4
   12696:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1269a:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   1269c:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1269e:	f363 2552 	bfi	r5, r3, #9, #10
   126a2:	9306      	str	r3, [sp, #24]
   126a4:	f7ff fe78 	bl	12398 <z_log_msg_alloc>
		if (msg) {
   126a8:	4604      	mov	r4, r0
   126aa:	b178      	cbz	r0, 126cc <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   126ac:	9b06      	ldr	r3, [sp, #24]
   126ae:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   126b0:	3010      	adds	r0, #16
   126b2:	2200      	movs	r2, #0
   126b4:	900b      	str	r0, [sp, #44]	; 0x2c
   126b6:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   126b8:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   126bc:	4a0c      	ldr	r2, [pc, #48]	; (126f0 <z_impl_z_log_msg_static_create+0xa4>)
   126be:	9907      	ldr	r1, [sp, #28]
   126c0:	f8cd a000 	str.w	sl, [sp]
   126c4:	ab0b      	add	r3, sp, #44	; 0x2c
   126c6:	4640      	mov	r0, r8
   126c8:	f7ff fa24 	bl	11b14 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   126cc:	f366 2552 	bfi	r5, r6, #9, #10
   126d0:	9905      	ldr	r1, [sp, #20]
   126d2:	464b      	mov	r3, r9
   126d4:	462a      	mov	r2, r5
   126d6:	4620      	mov	r0, r4
}
   126d8:	b00f      	add	sp, #60	; 0x3c
   126da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   126de:	f00c ba72 	b.w	1ebc6 <z_log_msg_finalize>
   126e2:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   126e6:	0880      	lsrs	r0, r0, #2
   126e8:	f7ff fe56 	bl	12398 <z_log_msg_alloc>
   126ec:	4604      	mov	r4, r0
   126ee:	e7ed      	b.n	126cc <z_impl_z_log_msg_static_create+0x80>
   126f0:	0001eb9b 	.word	0x0001eb9b

000126f4 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   126f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126f8:	b087      	sub	sp, #28
   126fa:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   126fe:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   12702:	4604      	mov	r4, r0
   12704:	460f      	mov	r7, r1
   12706:	4693      	mov	fp, r2
   12708:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   1270a:	b3b6      	cbz	r6, 1277a <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1270c:	2110      	movs	r1, #16
   1270e:	f8cd 9000 	str.w	r9, [sp]
   12712:	4633      	mov	r3, r6
   12714:	4652      	mov	r2, sl
   12716:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   12718:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1271c:	f7ff f824 	bl	11768 <cbvprintf_package>
   12720:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   12722:	4b17      	ldr	r3, [pc, #92]	; (12780 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   12724:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   12726:	f004 0407 	and.w	r4, r4, #7
   1272a:	f00b 0b07 	and.w	fp, fp, #7
   1272e:	00e4      	lsls	r4, r4, #3
   12730:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   12734:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   12738:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   1273c:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1273e:	4408      	add	r0, r1
	struct log_msg_desc desc =
   12740:	4b10      	ldr	r3, [pc, #64]	; (12784 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   12742:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   12746:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1274a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   1274c:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   1274e:	f7ff fe23 	bl	12398 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   12752:	4605      	mov	r5, r0
   12754:	b140      	cbz	r0, 12768 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   12756:	b13e      	cbz	r6, 12768 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   12758:	9903      	ldr	r1, [sp, #12]
   1275a:	f8cd 9000 	str.w	r9, [sp]
   1275e:	4633      	mov	r3, r6
   12760:	4652      	mov	r2, sl
   12762:	3010      	adds	r0, #16
   12764:	f7ff f800 	bl	11768 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   12768:	4643      	mov	r3, r8
   1276a:	4622      	mov	r2, r4
   1276c:	4639      	mov	r1, r7
   1276e:	4628      	mov	r0, r5
	}
}
   12770:	b007      	add	sp, #28
   12772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   12776:	f00c ba26 	b.w	1ebc6 <z_log_msg_finalize>
		plen = 0;
   1277a:	4631      	mov	r1, r6
   1277c:	e7d1      	b.n	12722 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   1277e:	bf00      	nop
   12780:	0007fe00 	.word	0x0007fe00
   12784:	7ff80000 	.word	0x7ff80000

00012788 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   12788:	b40e      	push	{r1, r2, r3}
   1278a:	b503      	push	{r0, r1, lr}
   1278c:	ab03      	add	r3, sp, #12
   1278e:	4601      	mov	r1, r0
   12790:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12794:	4804      	ldr	r0, [pc, #16]	; (127a8 <print_formatted+0x20>)
	va_start(args, fmt);
   12796:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12798:	f00c fa3c 	bl	1ec14 <cbvprintf>
	va_end(args);

	return length;
}
   1279c:	b002      	add	sp, #8
   1279e:	f85d eb04 	ldr.w	lr, [sp], #4
   127a2:	b003      	add	sp, #12
   127a4:	4770      	bx	lr
   127a6:	bf00      	nop
   127a8:	0001ec3d 	.word	0x0001ec3d

000127ac <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   127ac:	06ca      	lsls	r2, r1, #27
   127ae:	d405      	bmi.n	127bc <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   127b0:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   127b2:	bf4c      	ite	mi
   127b4:	4902      	ldrmi	r1, [pc, #8]	; (127c0 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   127b6:	4903      	ldrpl	r1, [pc, #12]	; (127c4 <newline_print+0x18>)
   127b8:	f7ff bfe6 	b.w	12788 <print_formatted>
	}
}
   127bc:	4770      	bx	lr
   127be:	bf00      	nop
   127c0:	00022839 	.word	0x00022839
   127c4:	00022838 	.word	0x00022838

000127c8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   127c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	b08b      	sub	sp, #44	; 0x2c
   127ce:	469b      	mov	fp, r3
   127d0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   127d4:	9305      	str	r3, [sp, #20]
   127d6:	e9dd 9315 	ldrd	r9, r3, [sp, #84]	; 0x54
   127da:	9306      	str	r3, [sp, #24]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   127dc:	9b05      	ldr	r3, [sp, #20]
{
   127de:	9208      	str	r2, [sp, #32]
   127e0:	e9dd 7617 	ldrd	r7, r6, [sp, #92]	; 0x5c
   127e4:	4604      	mov	r4, r0
   127e6:	460d      	mov	r5, r1
	if (!raw_string) {
   127e8:	2b00      	cmp	r3, #0
   127ea:	f000 8087 	beq.w	128fc <log_output_process+0x134>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   127ee:	f006 0301 	and.w	r3, r6, #1
   127f2:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   127f4:	f006 0308 	and.w	r3, r6, #8
   127f8:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   127fa:	f00c f9cc 	bl	1eb96 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   127fe:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   12802:	4602      	mov	r2, r0
   12804:	2800      	cmp	r0, #0
   12806:	d049      	beq.n	1289c <log_output_process+0xd4>
		length += print_formatted(output, "%s ", tag);
   12808:	4984      	ldr	r1, [pc, #528]	; (12a1c <log_output_process+0x254>)
   1280a:	4620      	mov	r0, r4
   1280c:	f7ff ffbc 	bl	12788 <print_formatted>
   12810:	4680      	mov	r8, r0
	if (stamp) {
   12812:	f1ba 0f00 	cmp.w	sl, #0
   12816:	d008      	beq.n	1282a <log_output_process+0x62>
	if (!format) {
   12818:	f016 0f44 	tst.w	r6, #68	; 0x44
   1281c:	d140      	bne.n	128a0 <log_output_process+0xd8>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1281e:	4980      	ldr	r1, [pc, #512]	; (12a20 <log_output_process+0x258>)
   12820:	462a      	mov	r2, r5
   12822:	4620      	mov	r0, r4
   12824:	f7ff ffb0 	bl	12788 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   12828:	4480      	add	r8, r0
	if (color) {
   1282a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1282c:	b15b      	cbz	r3, 12846 <log_output_process+0x7e>
		const char *log_color = start && (colors[level] != NULL) ?
   1282e:	4b7d      	ldr	r3, [pc, #500]	; (12a24 <log_output_process+0x25c>)
   12830:	9a05      	ldr	r2, [sp, #20]
		print_formatted(output, "%s", log_color);
   12832:	497d      	ldr	r1, [pc, #500]	; (12a28 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   12834:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   12838:	4b7c      	ldr	r3, [pc, #496]	; (12a2c <log_output_process+0x264>)
   1283a:	4620      	mov	r0, r4
   1283c:	2a00      	cmp	r2, #0
   1283e:	bf08      	it	eq
   12840:	461a      	moveq	r2, r3
   12842:	f7ff ffa1 	bl	12788 <print_formatted>
	if (level_on) {
   12846:	9b07      	ldr	r3, [sp, #28]
   12848:	2b00      	cmp	r3, #0
   1284a:	d055      	beq.n	128f8 <log_output_process+0x130>
		total += print_formatted(output, "<%s> ", severity[level]);
   1284c:	4b78      	ldr	r3, [pc, #480]	; (12a30 <log_output_process+0x268>)
   1284e:	9a05      	ldr	r2, [sp, #20]
   12850:	4978      	ldr	r1, [pc, #480]	; (12a34 <log_output_process+0x26c>)
   12852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12856:	4620      	mov	r0, r4
   12858:	f7ff ff96 	bl	12788 <print_formatted>
   1285c:	4605      	mov	r5, r0
	if (domain) {
   1285e:	9b08      	ldr	r3, [sp, #32]
   12860:	b12b      	cbz	r3, 1286e <log_output_process+0xa6>
		total += print_formatted(output, "%s/", domain);
   12862:	4975      	ldr	r1, [pc, #468]	; (12a38 <log_output_process+0x270>)
   12864:	461a      	mov	r2, r3
   12866:	4620      	mov	r0, r4
   12868:	f7ff ff8e 	bl	12788 <print_formatted>
   1286c:	4405      	add	r5, r0
	if (source) {
   1286e:	f1bb 0f00 	cmp.w	fp, #0
   12872:	d005      	beq.n	12880 <log_output_process+0xb8>
		total += print_formatted(output,
   12874:	4971      	ldr	r1, [pc, #452]	; (12a3c <log_output_process+0x274>)
   12876:	465a      	mov	r2, fp
   12878:	4620      	mov	r0, r4
   1287a:	f7ff ff85 	bl	12788 <print_formatted>
   1287e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   12880:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   12882:	f1b9 0f00 	cmp.w	r9, #0
   12886:	d148      	bne.n	1291a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   12888:	2f00      	cmp	r7, #0
   1288a:	d14e      	bne.n	1292a <log_output_process+0x162>
	if (color) {
   1288c:	07f3      	lsls	r3, r6, #31
   1288e:	f100 80bf 	bmi.w	12a10 <log_output_process+0x248>
	newline_print(output, flags);
   12892:	4631      	mov	r1, r6
   12894:	4620      	mov	r0, r4
   12896:	f7ff ff89 	bl	127ac <newline_print>
}
   1289a:	e0b3      	b.n	12a04 <log_output_process+0x23c>
	uint32_t length = 0U;
   1289c:	4680      	mov	r8, r0
   1289e:	e7b8      	b.n	12812 <log_output_process+0x4a>
	} else if (freq != 0U) {
   128a0:	4b67      	ldr	r3, [pc, #412]	; (12a40 <log_output_process+0x278>)
   128a2:	6818      	ldr	r0, [r3, #0]
   128a4:	2800      	cmp	r0, #0
   128a6:	d0bf      	beq.n	12828 <log_output_process+0x60>
		timestamp /= timestamp_div;
   128a8:	4b66      	ldr	r3, [pc, #408]	; (12a44 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   128aa:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   128ae:	681b      	ldr	r3, [r3, #0]
   128b0:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   128b4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   128b8:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   128bc:	fb00 5513 	mls	r5, r0, r3, r5
   128c0:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   128c4:	fb0e f505 	mul.w	r5, lr, r5
   128c8:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   128cc:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   128ce:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   128d2:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   128d6:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   128da:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   128de:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   128e2:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   128e4:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   128e8:	4957      	ldr	r1, [pc, #348]	; (12a48 <log_output_process+0x280>)
   128ea:	e9cd c501 	strd	ip, r5, [sp, #4]
   128ee:	4652      	mov	r2, sl
   128f0:	4620      	mov	r0, r4
   128f2:	f7ff ff49 	bl	12788 <print_formatted>
   128f6:	e797      	b.n	12828 <log_output_process+0x60>
	int total = 0;
   128f8:	9d07      	ldr	r5, [sp, #28]
   128fa:	e7b0      	b.n	1285e <log_output_process+0x96>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   128fc:	f1bb 0f01 	cmp.w	fp, #1
   12900:	d106      	bne.n	12910 <log_output_process+0x148>
	if (package) {
   12902:	f1b9 0f00 	cmp.w	r9, #0
   12906:	d164      	bne.n	129d2 <log_output_process+0x20a>
	if (data_len) {
   12908:	2f00      	cmp	r7, #0
   1290a:	d07b      	beq.n	12a04 <log_output_process+0x23c>
		prefix_offset = 0;
   1290c:	2500      	movs	r5, #0
   1290e:	e00c      	b.n	1292a <log_output_process+0x162>
	if (package) {
   12910:	f1b9 0f00 	cmp.w	r9, #0
   12914:	d0f8      	beq.n	12908 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   12916:	484d      	ldr	r0, [pc, #308]	; (12a4c <log_output_process+0x284>)
   12918:	e05c      	b.n	129d4 <log_output_process+0x20c>
		cb = out_func;
   1291a:	484d      	ldr	r0, [pc, #308]	; (12a50 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1291c:	494d      	ldr	r1, [pc, #308]	; (12a54 <log_output_process+0x28c>)
   1291e:	464b      	mov	r3, r9
   12920:	4622      	mov	r2, r4
   12922:	f00b fb1a 	bl	1df5a <cbpprintf_external>
	if (data_len) {
   12926:	2f00      	cmp	r7, #0
   12928:	d068      	beq.n	129fc <log_output_process+0x234>
		print_formatted(output, " ");
   1292a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 12a64 <log_output_process+0x29c>
			print_formatted(output, "%02x ", data[i]);
   1292e:	f8df a138 	ldr.w	sl, [pc, #312]	; 12a68 <log_output_process+0x2a0>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   12932:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   12934:	4631      	mov	r1, r6
   12936:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   12938:	46b8      	mov	r8, r7
   1293a:	bf28      	it	cs
   1293c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   12940:	f7ff ff34 	bl	127ac <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   12944:	f04f 0b00 	mov.w	fp, #0
   12948:	455d      	cmp	r5, fp
   1294a:	dc45      	bgt.n	129d8 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   1294c:	9b06      	ldr	r3, [sp, #24]
   1294e:	4651      	mov	r1, sl
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	4620      	mov	r0, r4
   12954:	f7ff ff18 	bl	12788 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12958:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   1295c:	f01b 0f07 	tst.w	fp, #7
   12960:	d103      	bne.n	1296a <log_output_process+0x1a2>
			print_formatted(output, " ");
   12962:	4649      	mov	r1, r9
   12964:	4620      	mov	r0, r4
   12966:	f7ff ff0f 	bl	12788 <print_formatted>
		if (i < length) {
   1296a:	45d8      	cmp	r8, fp
   1296c:	d93b      	bls.n	129e6 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   1296e:	9b06      	ldr	r3, [sp, #24]
   12970:	4651      	mov	r1, sl
   12972:	f813 200b 	ldrb.w	r2, [r3, fp]
   12976:	4620      	mov	r0, r4
   12978:	f7ff ff06 	bl	12788 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1297c:	f10b 0b01 	add.w	fp, fp, #1
   12980:	f1bb 0f10 	cmp.w	fp, #16
   12984:	d1ea      	bne.n	1295c <log_output_process+0x194>
	print_formatted(output, "|");
   12986:	4934      	ldr	r1, [pc, #208]	; (12a58 <log_output_process+0x290>)
   12988:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1298a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   1298e:	f7ff fefb 	bl	12788 <print_formatted>
		if (i < length) {
   12992:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   12994:	9b06      	ldr	r3, [sp, #24]
   12996:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   12998:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   1299c:	295f      	cmp	r1, #95	; 0x5f
   1299e:	bf28      	it	cs
   129a0:	222e      	movcs	r2, #46	; 0x2e
   129a2:	492e      	ldr	r1, [pc, #184]	; (12a5c <log_output_process+0x294>)
   129a4:	4620      	mov	r0, r4
   129a6:	f7ff feef 	bl	12788 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   129aa:	f10b 0b01 	add.w	fp, fp, #1
   129ae:	f1bb 0f10 	cmp.w	fp, #16
   129b2:	d01d      	beq.n	129f0 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   129b4:	f01b 0f07 	tst.w	fp, #7
   129b8:	d103      	bne.n	129c2 <log_output_process+0x1fa>
			print_formatted(output, " ");
   129ba:	4649      	mov	r1, r9
   129bc:	4620      	mov	r0, r4
   129be:	f7ff fee3 	bl	12788 <print_formatted>
		if (i < length) {
   129c2:	45d8      	cmp	r8, fp
   129c4:	465a      	mov	r2, fp
   129c6:	d8e5      	bhi.n	12994 <log_output_process+0x1cc>
			print_formatted(output, " ");
   129c8:	4649      	mov	r1, r9
   129ca:	4620      	mov	r0, r4
   129cc:	f7ff fedc 	bl	12788 <print_formatted>
   129d0:	e7eb      	b.n	129aa <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   129d2:	481f      	ldr	r0, [pc, #124]	; (12a50 <log_output_process+0x288>)
		prefix_offset = 0;
   129d4:	9d05      	ldr	r5, [sp, #20]
   129d6:	e7a1      	b.n	1291c <log_output_process+0x154>
		print_formatted(output, " ");
   129d8:	4649      	mov	r1, r9
   129da:	4620      	mov	r0, r4
   129dc:	f7ff fed4 	bl	12788 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   129e0:	f10b 0b01 	add.w	fp, fp, #1
   129e4:	e7b0      	b.n	12948 <log_output_process+0x180>
			print_formatted(output, "   ");
   129e6:	491e      	ldr	r1, [pc, #120]	; (12a60 <log_output_process+0x298>)
   129e8:	4620      	mov	r0, r4
   129ea:	f7ff fecd 	bl	12788 <print_formatted>
   129ee:	e7c5      	b.n	1297c <log_output_process+0x1b4>
		data += length;
   129f0:	9b06      	ldr	r3, [sp, #24]
	} while (len);
   129f2:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   129f6:	4443      	add	r3, r8
   129f8:	9306      	str	r3, [sp, #24]
	} while (len);
   129fa:	d19a      	bne.n	12932 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   129fc:	9b05      	ldr	r3, [sp, #20]
   129fe:	2b00      	cmp	r3, #0
   12a00:	f47f af44 	bne.w	1288c <log_output_process+0xc4>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   12a04:	4620      	mov	r0, r4
}
   12a06:	b00b      	add	sp, #44	; 0x2c
   12a08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   12a0c:	f00c b909 	b.w	1ec22 <log_output_flush>
		print_formatted(output, "%s", log_color);
   12a10:	4a06      	ldr	r2, [pc, #24]	; (12a2c <log_output_process+0x264>)
   12a12:	4905      	ldr	r1, [pc, #20]	; (12a28 <log_output_process+0x260>)
   12a14:	4620      	mov	r0, r4
   12a16:	f7ff feb7 	bl	12788 <print_formatted>
}
   12a1a:	e73a      	b.n	12892 <log_output_process+0xca>
   12a1c:	00022840 	.word	0x00022840
   12a20:	00022844 	.word	0x00022844
   12a24:	00022010 	.word	0x00022010
   12a28:	00023dcc 	.word	0x00023dcc
   12a2c:	0002283b 	.word	0x0002283b
   12a30:	00022024 	.word	0x00022024
   12a34:	00022869 	.word	0x00022869
   12a38:	0002286f 	.word	0x0002286f
   12a3c:	00022873 	.word	0x00022873
   12a40:	20002b20 	.word	0x20002b20
   12a44:	20002b1c 	.word	0x20002b1c
   12a48:	0002284d 	.word	0x0002284d
   12a4c:	0001ec73 	.word	0x0001ec73
   12a50:	0001ec3d 	.word	0x0001ec3d
   12a54:	0001ec15 	.word	0x0001ec15
   12a58:	00022882 	.word	0x00022882
   12a5c:	00022884 	.word	0x00022884
   12a60:	0002287e 	.word	0x0002287e
   12a64:	00022880 	.word	0x00022880
   12a68:	00022878 	.word	0x00022878

00012a6c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   12a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   12a70:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   12a72:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   12a74:	688e      	ldr	r6, [r1, #8]
   12a76:	b086      	sub	sp, #24
   12a78:	4605      	mov	r5, r0
   12a7a:	460c      	mov	r4, r1
   12a7c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   12a7e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   12a82:	b15b      	cbz	r3, 12a9c <log_output_msg_process+0x30>
   12a84:	4a13      	ldr	r2, [pc, #76]	; (12ad4 <log_output_msg_process+0x68>)
   12a86:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   12a88:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   12a8c:	2900      	cmp	r1, #0
   12a8e:	db1f      	blt.n	12ad0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   12a90:	7820      	ldrb	r0, [r4, #0]
   12a92:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   12a96:	f7ff fdb7 	bl	12608 <log_source_name_get>
   12a9a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   12a9c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   12a9e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   12aa0:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   12aa4:	9700      	str	r7, [sp, #0]
   12aa6:	f3c2 2249 	ubfx	r2, r2, #9, #10
   12aaa:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   12aac:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   12ab0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   12ab4:	bf08      	it	eq
   12ab6:	2100      	moveq	r1, #0
   12ab8:	e9cd 0803 	strd	r0, r8, [sp, #12]
   12abc:	e9cd 1401 	strd	r1, r4, [sp, #4]
   12ac0:	2200      	movs	r2, #0
   12ac2:	4631      	mov	r1, r6
   12ac4:	4628      	mov	r0, r5
   12ac6:	f7ff fe7f 	bl	127c8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   12aca:	b006      	add	sp, #24
   12acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   12ad0:	2300      	movs	r3, #0
   12ad2:	e7e3      	b.n	12a9c <log_output_msg_process+0x30>
   12ad4:	00021e34 	.word	0x00021e34

00012ad8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12ada:	f242 730f 	movw	r3, #9999	; 0x270f
   12ade:	428b      	cmp	r3, r1
   12ae0:	bf28      	it	cs
   12ae2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   12ae4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12ae6:	4a0f      	ldr	r2, [pc, #60]	; (12b24 <log_output_dropped_process+0x4c>)
{
   12ae8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12aea:	2105      	movs	r1, #5
   12aec:	4668      	mov	r0, sp
   12aee:	f00b fac6 	bl	1e07e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12af2:	6863      	ldr	r3, [r4, #4]
   12af4:	490c      	ldr	r1, [pc, #48]	; (12b28 <log_output_dropped_process+0x50>)
   12af6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12af8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12afa:	220b      	movs	r2, #11
   12afc:	4628      	mov	r0, r5
   12afe:	f00c f87c 	bl	1ebfa <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   12b02:	6863      	ldr	r3, [r4, #4]
   12b04:	4632      	mov	r2, r6
   12b06:	4669      	mov	r1, sp
   12b08:	4628      	mov	r0, r5
   12b0a:	685b      	ldr	r3, [r3, #4]
   12b0c:	f00c f875 	bl	1ebfa <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   12b10:	6863      	ldr	r3, [r4, #4]
   12b12:	4906      	ldr	r1, [pc, #24]	; (12b2c <log_output_dropped_process+0x54>)
   12b14:	685b      	ldr	r3, [r3, #4]
   12b16:	221b      	movs	r2, #27
   12b18:	4628      	mov	r0, r5
   12b1a:	f00c f86e 	bl	1ebfa <buffer_write>
		     output->control_block->ctx);
}
   12b1e:	b002      	add	sp, #8
   12b20:	bd70      	pop	{r4, r5, r6, pc}
   12b22:	bf00      	nop
   12b24:	00024055 	.word	0x00024055
   12b28:	000228a3 	.word	0x000228a3
   12b2c:	00022887 	.word	0x00022887

00012b30 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12b30:	4a07      	ldr	r2, [pc, #28]	; (12b50 <log_output_timestamp_freq_set+0x20>)
   12b32:	2100      	movs	r1, #0
   12b34:	2301      	movs	r3, #1
   12b36:	4290      	cmp	r0, r2
   12b38:	d806      	bhi.n	12b48 <log_output_timestamp_freq_set+0x18>
   12b3a:	4a06      	ldr	r2, [pc, #24]	; (12b54 <log_output_timestamp_freq_set+0x24>)
   12b3c:	b901      	cbnz	r1, 12b40 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   12b3e:	2301      	movs	r3, #1
   12b40:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   12b42:	4b05      	ldr	r3, [pc, #20]	; (12b58 <log_output_timestamp_freq_set+0x28>)
   12b44:	6018      	str	r0, [r3, #0]
}
   12b46:	4770      	bx	lr
		frequency /= 2U;
   12b48:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   12b4a:	005b      	lsls	r3, r3, #1
   12b4c:	2101      	movs	r1, #1
   12b4e:	e7f2      	b.n	12b36 <log_output_timestamp_freq_set+0x6>
   12b50:	000f4240 	.word	0x000f4240
   12b54:	20002b1c 	.word	0x20002b1c
   12b58:	20002b20 	.word	0x20002b20

00012b5c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   12b5c:	4b01      	ldr	r3, [pc, #4]	; (12b64 <log_backend_rtt_init+0x8>)
   12b5e:	2201      	movs	r2, #1
   12b60:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   12b62:	4770      	bx	lr
   12b64:	20002fb6 	.word	0x20002fb6

00012b68 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   12b68:	4b01      	ldr	r3, [pc, #4]	; (12b70 <format_set+0x8>)
	return 0;
}
   12b6a:	2000      	movs	r0, #0
	log_format_current = log_type;
   12b6c:	6019      	str	r1, [r3, #0]
}
   12b6e:	4770      	bx	lr
   12b70:	20002b38 	.word	0x20002b38

00012b74 <panic>:
	panic_mode = true;
   12b74:	4b02      	ldr	r3, [pc, #8]	; (12b80 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   12b76:	4803      	ldr	r0, [pc, #12]	; (12b84 <panic+0x10>)
   12b78:	2201      	movs	r2, #1
   12b7a:	701a      	strb	r2, [r3, #0]
   12b7c:	f00c b851 	b.w	1ec22 <log_output_flush>
   12b80:	20002fb7 	.word	0x20002fb7
   12b84:	00022054 	.word	0x00022054

00012b88 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12b88:	4801      	ldr	r0, [pc, #4]	; (12b90 <dropped+0x8>)
   12b8a:	f7ff bfa5 	b.w	12ad8 <log_output_dropped_process>
   12b8e:	bf00      	nop
   12b90:	00022054 	.word	0x00022054

00012b94 <process>:
{
   12b94:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12b96:	4b06      	ldr	r3, [pc, #24]	; (12bb0 <process+0x1c>)
   12b98:	6818      	ldr	r0, [r3, #0]
{
   12b9a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12b9c:	f7ff fb72 	bl	12284 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   12ba0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12ba2:	4603      	mov	r3, r0
}
   12ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   12ba8:	4802      	ldr	r0, [pc, #8]	; (12bb4 <process+0x20>)
   12baa:	220f      	movs	r2, #15
   12bac:	4718      	bx	r3
   12bae:	bf00      	nop
   12bb0:	20002b38 	.word	0x20002b38
   12bb4:	00022054 	.word	0x00022054

00012bb8 <on_failed_write>:
	if (retry_cnt == 0) {
   12bb8:	b910      	cbnz	r0, 12bc0 <on_failed_write+0x8>
		host_present = false;
   12bba:	4b07      	ldr	r3, [pc, #28]	; (12bd8 <on_failed_write+0x20>)
   12bbc:	7018      	strb	r0, [r3, #0]
}
   12bbe:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   12bc0:	4b06      	ldr	r3, [pc, #24]	; (12bdc <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   12bc2:	781b      	ldrb	r3, [r3, #0]
   12bc4:	b11b      	cbz	r3, 12bce <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   12bc6:	f241 3088 	movw	r0, #5000	; 0x1388
   12bca:	f00e bdf0 	b.w	217ae <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   12bce:	20a4      	movs	r0, #164	; 0xa4
   12bd0:	2100      	movs	r1, #0
   12bd2:	f00a bb0d 	b.w	1d1f0 <z_impl_k_sleep>
   12bd6:	bf00      	nop
   12bd8:	20002fb6 	.word	0x20002fb6
   12bdc:	20002fb7 	.word	0x20002fb7

00012be0 <data_out_block_mode>:
{
   12be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   12be4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 12c60 <data_out_block_mode+0x80>
   12be8:	4f1c      	ldr	r7, [pc, #112]	; (12c5c <data_out_block_mode+0x7c>)
{
   12bea:	4680      	mov	r8, r0
   12bec:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   12bee:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   12bf0:	f899 5000 	ldrb.w	r5, [r9]
   12bf4:	b995      	cbnz	r5, 12c1c <data_out_block_mode+0x3c>
			RTT_LOCK();
   12bf6:	f009 fb21 	bl	1c23c <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12bfa:	4628      	mov	r0, r5
   12bfc:	4632      	mov	r2, r6
   12bfe:	4641      	mov	r1, r8
   12c00:	f009 fa9e 	bl	1c140 <SEGGER_RTT_WriteSkipNoLock>
   12c04:	4605      	mov	r5, r0
			RTT_UNLOCK();
   12c06:	f009 fb23 	bl	1c250 <zephyr_rtt_mutex_unlock>
		if (ret) {
   12c0a:	b1e5      	cbz	r5, 12c46 <data_out_block_mode+0x66>
	host_present = true;
   12c0c:	2301      	movs	r3, #1
   12c0e:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   12c10:	f899 3000 	ldrb.w	r3, [r9]
   12c14:	b973      	cbnz	r3, 12c34 <data_out_block_mode+0x54>
}
   12c16:	4630      	mov	r0, r6
   12c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12c1c:	4632      	mov	r2, r6
   12c1e:	4641      	mov	r1, r8
   12c20:	2000      	movs	r0, #0
   12c22:	f009 fa8d 	bl	1c140 <SEGGER_RTT_WriteSkipNoLock>
   12c26:	4605      	mov	r5, r0
   12c28:	e7ef      	b.n	12c0a <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   12c2a:	4620      	mov	r0, r4
   12c2c:	f7ff ffc4 	bl	12bb8 <on_failed_write>
   12c30:	1e65      	subs	r5, r4, #1
   12c32:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   12c34:	2000      	movs	r0, #0
   12c36:	f009 faf7 	bl	1c228 <SEGGER_RTT_HasDataUp>
   12c3a:	2800      	cmp	r0, #0
   12c3c:	d0eb      	beq.n	12c16 <data_out_block_mode+0x36>
   12c3e:	783b      	ldrb	r3, [r7, #0]
   12c40:	2b00      	cmp	r3, #0
   12c42:	d1f2      	bne.n	12c2a <data_out_block_mode+0x4a>
   12c44:	e7e7      	b.n	12c16 <data_out_block_mode+0x36>
		} else if (host_present) {
   12c46:	783b      	ldrb	r3, [r7, #0]
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d0e4      	beq.n	12c16 <data_out_block_mode+0x36>
			retry_cnt--;
   12c4c:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   12c4e:	4620      	mov	r0, r4
   12c50:	f7ff ffb2 	bl	12bb8 <on_failed_write>
	} while ((ret == 0) && host_present);
   12c54:	783b      	ldrb	r3, [r7, #0]
   12c56:	2b00      	cmp	r3, #0
   12c58:	d1ca      	bne.n	12bf0 <data_out_block_mode+0x10>
   12c5a:	e7dc      	b.n	12c16 <data_out_block_mode+0x36>
   12c5c:	20002fb6 	.word	0x20002fb6
   12c60:	20002fb7 	.word	0x20002fb7

00012c64 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c68:	4605      	mov	r5, r0
	__asm__ volatile(
   12c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c6e:	f3ef 8611 	mrs	r6, BASEPRI
   12c72:	f383 8812 	msr	BASEPRI_MAX, r3
   12c76:	f3bf 8f6f 	isb	sy
	return list->head;
   12c7a:	4b0e      	ldr	r3, [pc, #56]	; (12cb4 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12c7c:	4f0e      	ldr	r7, [pc, #56]	; (12cb8 <pm_state_notify+0x54>)
   12c7e:	681c      	ldr	r4, [r3, #0]
   12c80:	f8df 8038 	ldr.w	r8, [pc, #56]	; 12cbc <pm_state_notify+0x58>
   12c84:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12c88:	b92c      	cbnz	r4, 12c96 <pm_state_notify+0x32>
	__asm__ volatile(
   12c8a:	f386 8811 	msr	BASEPRI, r6
   12c8e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   12c96:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   12c9a:	2d00      	cmp	r5, #0
   12c9c:	bf18      	it	ne
   12c9e:	4613      	movne	r3, r2
		if (callback) {
   12ca0:	b12b      	cbz	r3, 12cae <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12ca2:	f898 2014 	ldrb.w	r2, [r8, #20]
   12ca6:	fb09 f202 	mul.w	r2, r9, r2
   12caa:	5cb8      	ldrb	r0, [r7, r2]
   12cac:	4798      	blx	r3
	return node->next;
   12cae:	6824      	ldr	r4, [r4, #0]
   12cb0:	e7ea      	b.n	12c88 <pm_state_notify+0x24>
   12cb2:	bf00      	nop
   12cb4:	20002b54 	.word	0x20002b54
   12cb8:	20002b48 	.word	0x20002b48
   12cbc:	20002f5c 	.word	0x20002f5c

00012cc0 <pm_system_resume>:

void pm_system_resume(void)
{
   12cc0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   12cc2:	4b19      	ldr	r3, [pc, #100]	; (12d28 <pm_system_resume+0x68>)
   12cc4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12cc6:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12cca:	f004 031f 	and.w	r3, r4, #31
   12cce:	2201      	movs	r2, #1
   12cd0:	409a      	lsls	r2, r3
   12cd2:	4b16      	ldr	r3, [pc, #88]	; (12d2c <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12cd4:	0961      	lsrs	r1, r4, #5
   12cd6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12cda:	43d0      	mvns	r0, r2
   12cdc:	e853 1f00 	ldrex	r1, [r3]
   12ce0:	ea01 0500 	and.w	r5, r1, r0
   12ce4:	e843 5600 	strex	r6, r5, [r3]
   12ce8:	2e00      	cmp	r6, #0
   12cea:	d1f7      	bne.n	12cdc <pm_system_resume+0x1c>
   12cec:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12cf0:	420a      	tst	r2, r1
   12cf2:	d013      	beq.n	12d1c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   12cf4:	4b0e      	ldr	r3, [pc, #56]	; (12d30 <pm_system_resume+0x70>)
   12cf6:	4d0f      	ldr	r5, [pc, #60]	; (12d34 <pm_system_resume+0x74>)
   12cf8:	b18b      	cbz	r3, 12d1e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   12cfa:	230c      	movs	r3, #12
   12cfc:	4363      	muls	r3, r4
   12cfe:	18ea      	adds	r2, r5, r3
   12d00:	5ce8      	ldrb	r0, [r5, r3]
   12d02:	7851      	ldrb	r1, [r2, #1]
   12d04:	f00c fa6c 	bl	1f1e0 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   12d08:	2000      	movs	r0, #0
   12d0a:	f7ff ffab 	bl	12c64 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12d0e:	230c      	movs	r3, #12
   12d10:	435c      	muls	r4, r3
   12d12:	192a      	adds	r2, r5, r4
   12d14:	2300      	movs	r3, #0
   12d16:	512b      	str	r3, [r5, r4]
   12d18:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   12d1c:	bd70      	pop	{r4, r5, r6, pc}
   12d1e:	f383 8811 	msr	BASEPRI, r3
   12d22:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12d26:	e7ef      	b.n	12d08 <pm_system_resume+0x48>
   12d28:	20002f5c 	.word	0x20002f5c
   12d2c:	20002b5c 	.word	0x20002b5c
   12d30:	0001f1e1 	.word	0x0001f1e1
   12d34:	20002b48 	.word	0x20002b48

00012d38 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   12d3c:	4b35      	ldr	r3, [pc, #212]	; (12e14 <pm_system_suspend+0xdc>)
{
   12d3e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   12d40:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   12d42:	f04f 0340 	mov.w	r3, #64	; 0x40
   12d46:	f3ef 8811 	mrs	r8, BASEPRI
   12d4a:	f383 8812 	msr	BASEPRI_MAX, r3
   12d4e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   12d52:	240c      	movs	r4, #12
   12d54:	4b30      	ldr	r3, [pc, #192]	; (12e18 <pm_system_suspend+0xe0>)
   12d56:	4e31      	ldr	r6, [pc, #196]	; (12e1c <pm_system_suspend+0xe4>)
   12d58:	436c      	muls	r4, r5
   12d5a:	191a      	adds	r2, r3, r4
   12d5c:	5d19      	ldrb	r1, [r3, r4]
   12d5e:	2900      	cmp	r1, #0
   12d60:	d04c      	beq.n	12dfc <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   12d62:	ca07      	ldmia	r2, {r0, r1, r2}
   12d64:	eb06 0c04 	add.w	ip, r6, r4
   12d68:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   12d6c:	2200      	movs	r2, #0
   12d6e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   12d70:	f388 8811 	msr	BASEPRI, r8
   12d74:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12d78:	230c      	movs	r3, #12
   12d7a:	436b      	muls	r3, r5
   12d7c:	18f2      	adds	r2, r6, r3
   12d7e:	5cf0      	ldrb	r0, [r6, r3]
   12d80:	2800      	cmp	r0, #0
   12d82:	d039      	beq.n	12df8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   12d84:	1c7b      	adds	r3, r7, #1
   12d86:	d010      	beq.n	12daa <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12d88:	f8d2 c008 	ldr.w	ip, [r2, #8]
   12d8c:	4c24      	ldr	r4, [pc, #144]	; (12e20 <pm_system_suspend+0xe8>)
   12d8e:	4a25      	ldr	r2, [pc, #148]	; (12e24 <pm_system_suspend+0xec>)
   12d90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12d94:	2100      	movs	r1, #0
   12d96:	fbec 4100 	umlal	r4, r1, ip, r0
   12d9a:	2300      	movs	r3, #0
   12d9c:	4620      	mov	r0, r4
   12d9e:	f7ed f9af 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12da2:	2101      	movs	r1, #1
   12da4:	1a38      	subs	r0, r7, r0
   12da6:	f00e fce0 	bl	2176a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12daa:	f00a f963 	bl	1d074 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   12dae:	2001      	movs	r0, #1
   12db0:	f7ff ff58 	bl	12c64 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12db4:	f3bf 8f5b 	dmb	ish
   12db8:	4b1b      	ldr	r3, [pc, #108]	; (12e28 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12dba:	096a      	lsrs	r2, r5, #5
   12dbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   12dc0:	f005 011f 	and.w	r1, r5, #31
   12dc4:	2201      	movs	r2, #1
   12dc6:	408a      	lsls	r2, r1
   12dc8:	e853 0f00 	ldrex	r0, [r3]
   12dcc:	4310      	orrs	r0, r2
   12dce:	e843 0100 	strex	r1, r0, [r3]
   12dd2:	2900      	cmp	r1, #0
   12dd4:	d1f8      	bne.n	12dc8 <pm_system_suspend+0x90>
   12dd6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   12dda:	4b14      	ldr	r3, [pc, #80]	; (12e2c <pm_system_suspend+0xf4>)
   12ddc:	b13b      	cbz	r3, 12dee <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   12dde:	230c      	movs	r3, #12
   12de0:	fb03 f005 	mul.w	r0, r3, r5
   12de4:	1833      	adds	r3, r6, r0
   12de6:	5c30      	ldrb	r0, [r6, r0]
   12de8:	7859      	ldrb	r1, [r3, #1]
   12dea:	f00c f9ed 	bl	1f1c8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   12dee:	f7ff ff67 	bl	12cc0 <pm_system_resume>
	k_sched_unlock();
   12df2:	f00a f953 	bl	1d09c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   12df6:	2001      	movs	r0, #1
}
   12df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   12dfc:	4601      	mov	r1, r0
   12dfe:	4628      	mov	r0, r5
   12e00:	f000 f816 	bl	12e30 <pm_policy_next_state>
		if (info != NULL) {
   12e04:	2800      	cmp	r0, #0
   12e06:	d0b3      	beq.n	12d70 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   12e08:	c807      	ldmia	r0, {r0, r1, r2}
   12e0a:	4434      	add	r4, r6
   12e0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   12e10:	e7ae      	b.n	12d70 <pm_system_suspend+0x38>
   12e12:	bf00      	nop
   12e14:	20002f5c 	.word	0x20002f5c
   12e18:	20002b3c 	.word	0x20002b3c
   12e1c:	20002b48 	.word	0x20002b48
   12e20:	000f423f 	.word	0x000f423f
   12e24:	000f4240 	.word	0x000f4240
   12e28:	20002b5c 	.word	0x20002b5c
   12e2c:	0001f1c9 	.word	0x0001f1c9

00012e30 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e34:	b085      	sub	sp, #20
   12e36:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12e38:	a903      	add	r1, sp, #12
   12e3a:	f000 f843 	bl	12ec4 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12e3e:	4b1e      	ldr	r3, [pc, #120]	; (12eb8 <pm_policy_next_state+0x88>)
   12e40:	9d03      	ldr	r5, [sp, #12]
   12e42:	f8d3 a000 	ldr.w	sl, [r3]
   12e46:	f8df 8078 	ldr.w	r8, [pc, #120]	; 12ec0 <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12e4a:	1e43      	subs	r3, r0, #1
   12e4c:	b21b      	sxth	r3, r3
   12e4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12e52:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12e54:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12e58:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   12e5c:	f04f 0b00 	mov.w	fp, #0
   12e60:	b924      	cbnz	r4, 12e6c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   12e62:	46a1      	mov	r9, r4
}
   12e64:	4648      	mov	r0, r9
   12e66:	b005      	add	sp, #20
   12e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e6c:	6868      	ldr	r0, [r5, #4]
   12e6e:	4a13      	ldr	r2, [pc, #76]	; (12ebc <pm_policy_next_state+0x8c>)
   12e70:	46c4      	mov	ip, r8
   12e72:	4659      	mov	r1, fp
   12e74:	fbe0 c107 	umlal	ip, r1, r0, r7
   12e78:	2300      	movs	r3, #0
   12e7a:	4660      	mov	r0, ip
   12e7c:	f7ed f940 	bl	100 <__aeabi_uldivmod>
   12e80:	9001      	str	r0, [sp, #4]
   12e82:	68a8      	ldr	r0, [r5, #8]
   12e84:	4a0d      	ldr	r2, [pc, #52]	; (12ebc <pm_policy_next_state+0x8c>)
   12e86:	46c4      	mov	ip, r8
   12e88:	4659      	mov	r1, fp
   12e8a:	fbe0 c107 	umlal	ip, r1, r0, r7
   12e8e:	2300      	movs	r3, #0
   12e90:	4660      	mov	r0, ip
   12e92:	f7ed f935 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12e96:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   12e9a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12e9c:	d001      	beq.n	12ea2 <pm_policy_next_state+0x72>
   12e9e:	4582      	cmp	sl, r0
   12ea0:	d905      	bls.n	12eae <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   12ea2:	1c73      	adds	r3, r6, #1
   12ea4:	d0de      	beq.n	12e64 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   12ea6:	9b01      	ldr	r3, [sp, #4]
   12ea8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   12eaa:	42b0      	cmp	r0, r6
   12eac:	d9da      	bls.n	12e64 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12eae:	3c01      	subs	r4, #1
   12eb0:	b2a4      	uxth	r4, r4
   12eb2:	3d0c      	subs	r5, #12
   12eb4:	e7d4      	b.n	12e60 <pm_policy_next_state+0x30>
   12eb6:	bf00      	nop
   12eb8:	20000520 	.word	0x20000520
   12ebc:	000f4240 	.word	0x000f4240
   12ec0:	000f423f 	.word	0x000f423f

00012ec4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   12ec4:	b908      	cbnz	r0, 12eca <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   12ec6:	4b02      	ldr	r3, [pc, #8]	; (12ed0 <pm_state_cpu_get_all+0xc>)
   12ec8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   12eca:	2000      	movs	r0, #0
   12ecc:	4770      	bx	lr
   12ece:	bf00      	nop
   12ed0:	00022064 	.word	0x00022064

00012ed4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12ed4:	4904      	ldr	r1, [pc, #16]	; (12ee8 <sub_bytes+0x14>)
   12ed6:	1e43      	subs	r3, r0, #1
   12ed8:	300f      	adds	r0, #15
   12eda:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12ede:	5c8a      	ldrb	r2, [r1, r2]
   12ee0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12ee2:	4283      	cmp	r3, r0
   12ee4:	d1f9      	bne.n	12eda <sub_bytes+0x6>
	}
}
   12ee6:	4770      	bx	lr
   12ee8:	000228e2 	.word	0x000228e2

00012eec <tc_aes128_set_encrypt_key>:
{
   12eec:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   12eee:	4e26      	ldr	r6, [pc, #152]	; (12f88 <tc_aes128_set_encrypt_key+0x9c>)
{
   12ef0:	4607      	mov	r7, r0
   12ef2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12ef4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12ef6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12ef8:	ad01      	add	r5, sp, #4
   12efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12efc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12f00:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12f04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12f08:	4638      	mov	r0, r7
   12f0a:	2f00      	cmp	r7, #0
   12f0c:	d038      	beq.n	12f80 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   12f0e:	2c00      	cmp	r4, #0
   12f10:	d038      	beq.n	12f84 <tc_aes128_set_encrypt_key+0x98>
   12f12:	1f38      	subs	r0, r7, #4
   12f14:	4621      	mov	r1, r4
   12f16:	4602      	mov	r2, r0
   12f18:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12f1a:	784b      	ldrb	r3, [r1, #1]
   12f1c:	780d      	ldrb	r5, [r1, #0]
   12f1e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12f20:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12f24:	78cd      	ldrb	r5, [r1, #3]
   12f26:	432b      	orrs	r3, r5
   12f28:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   12f2a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12f2c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12f30:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12f32:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12f36:	d1f0      	bne.n	12f1a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12f38:	4c14      	ldr	r4, [pc, #80]	; (12f8c <tc_aes128_set_encrypt_key+0xa0>)
   12f3a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12f3c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   12f3e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12f40:	d116      	bne.n	12f70 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12f42:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12f46:	5ca5      	ldrb	r5, [r4, r2]
   12f48:	0e1a      	lsrs	r2, r3, #24
   12f4a:	5ca2      	ldrb	r2, [r4, r2]
   12f4c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12f50:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12f54:	b2db      	uxtb	r3, r3
   12f56:	5d65      	ldrb	r5, [r4, r5]
   12f58:	5ce3      	ldrb	r3, [r4, r3]
   12f5a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12f5e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12f62:	f021 0303 	bic.w	r3, r1, #3
   12f66:	3330      	adds	r3, #48	; 0x30
   12f68:	446b      	add	r3, sp
   12f6a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   12f6e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   12f70:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12f74:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12f76:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12f78:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12f7a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12f7c:	d1de      	bne.n	12f3c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   12f7e:	2001      	movs	r0, #1
}
   12f80:	b00d      	add	sp, #52	; 0x34
   12f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12f84:	4620      	mov	r0, r4
   12f86:	e7fb      	b.n	12f80 <tc_aes128_set_encrypt_key+0x94>
   12f88:	00021f34 	.word	0x00021f34
   12f8c:	000228e2 	.word	0x000228e2

00012f90 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12f90:	4901      	ldr	r1, [pc, #4]	; (12f98 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12f92:	2210      	movs	r2, #16
	str	r2, [r1]
   12f94:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12f96:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12f98:	e000ed10 	.word	0xe000ed10

00012f9c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12f9c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12f9e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12fa0:	f380 8811 	msr	BASEPRI, r0
	isb
   12fa4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   12fa8:	f3bf 8f4f 	dsb	sy
   12fac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12fae:	b662      	cpsie	i
	isb
   12fb0:	f3bf 8f6f 	isb	sy

	bx	lr
   12fb4:	4770      	bx	lr
   12fb6:	bf00      	nop

00012fb8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12fb8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12fba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12fbc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   12fc0:	f3bf 8f4f 	dsb	sy
   12fc4:	bf20      	wfe

	msr	BASEPRI, r0
   12fc6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12fca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12fcc:	4770      	bx	lr
   12fce:	bf00      	nop

00012fd0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fd4:	4680      	mov	r8, r0
   12fd6:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   12fd8:	460c      	mov	r4, r1
   12fda:	2900      	cmp	r1, #0
   12fdc:	f000 8093 	beq.w	13106 <z_arm_fatal_error+0x136>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12fe0:	46e9      	mov	r9, sp
   12fe2:	b08a      	sub	sp, #40	; 0x28
   12fe4:	e9d1 1200 	ldrd	r1, r2, [r1]
   12fe8:	68a3      	ldr	r3, [r4, #8]
   12fea:	466d      	mov	r5, sp
   12fec:	4849      	ldr	r0, [pc, #292]	; (13114 <z_arm_fatal_error+0x144>)
   12fee:	462e      	mov	r6, r5
   12ff0:	f04f 0a05 	mov.w	sl, #5
   12ff4:	e9c5 0105 	strd	r0, r1, [r5, #20]
   12ff8:	e9c5 2307 	strd	r2, r3, [r5, #28]
   12ffc:	f846 af10 	str.w	sl, [r6, #16]!
   13000:	4845      	ldr	r0, [pc, #276]	; (13118 <z_arm_fatal_error+0x148>)
   13002:	4632      	mov	r2, r6
   13004:	2300      	movs	r3, #0
   13006:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1300a:	f7ff fb1f 	bl	1264c <z_impl_z_log_msg_static_create>
   1300e:	46cd      	mov	sp, r9
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13010:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   13014:	6963      	ldr	r3, [r4, #20]
   13016:	46ad      	mov	sp, r5
   13018:	4840      	ldr	r0, [pc, #256]	; (1311c <z_arm_fatal_error+0x14c>)
   1301a:	f8c5 a010 	str.w	sl, [r5, #16]
   1301e:	e9c5 0105 	strd	r0, r1, [r5, #20]
   13022:	e9c5 2307 	strd	r2, r3, [r5, #28]
   13026:	483c      	ldr	r0, [pc, #240]	; (13118 <z_arm_fatal_error+0x148>)
   13028:	4632      	mov	r2, r6
   1302a:	2300      	movs	r3, #0
   1302c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13030:	f7ff fb0c 	bl	1264c <z_impl_z_log_msg_static_create>
   13034:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13036:	b088      	sub	sp, #32
   13038:	69e3      	ldr	r3, [r4, #28]
   1303a:	466a      	mov	r2, sp
   1303c:	4938      	ldr	r1, [pc, #224]	; (13120 <z_arm_fatal_error+0x150>)
   1303e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13042:	2303      	movs	r3, #3
   13044:	f842 3f10 	str.w	r3, [r2, #16]!
   13048:	4833      	ldr	r0, [pc, #204]	; (13118 <z_arm_fatal_error+0x148>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1304a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1312c <z_arm_fatal_error+0x15c>
   1304e:	2300      	movs	r3, #0
   13050:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13054:	f7ff fafa 	bl	1264c <z_impl_z_log_msg_static_create>
   13058:	4626      	mov	r6, r4
   1305a:	46cd      	mov	sp, r9
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   1305c:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1305e:	f04f 0a0a 	mov.w	sl, #10
   13062:	edd6 7a08 	vldr	s15, [r6, #32]
   13066:	eebc 7ae7 	vcvt.u32.f32	s14, s15
   1306a:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   1306e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13072:	46e9      	mov	r9, sp
   13074:	ee17 1a90 	vmov	r1, s15
   13078:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   1307c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13080:	b08e      	sub	sp, #56	; 0x38
   13082:	ee17 3a90 	vmov	r3, s15
   13086:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   1308a:	466a      	mov	r2, sp
   1308c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13090:	1c68      	adds	r0, r5, #1
   13092:	e9c2 0108 	strd	r0, r1, [r2, #32]
   13096:	1ca9      	adds	r1, r5, #2
   13098:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
   1309c:	1ceb      	adds	r3, r5, #3
   1309e:	e9c2 b505 	strd	fp, r5, [r2, #20]
   130a2:	ed82 7a07 	vstr	s14, [r2, #28]
   130a6:	6313      	str	r3, [r2, #48]	; 0x30
   130a8:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
   130ac:	f842 af10 	str.w	sl, [r2, #16]!
   130b0:	4819      	ldr	r0, [pc, #100]	; (13118 <z_arm_fatal_error+0x148>)
   130b2:	2300      	movs	r3, #0
   130b4:	f245 0140 	movw	r1, #20544	; 0x5040
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   130b8:	3504      	adds	r5, #4
   130ba:	f7ff fac7 	bl	1264c <z_impl_z_log_msg_static_create>
   130be:	2d10      	cmp	r5, #16
   130c0:	46cd      	mov	sp, r9
   130c2:	f106 0610 	add.w	r6, r6, #16
   130c6:	d1cc      	bne.n	13062 <z_arm_fatal_error+0x92>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   130c8:	b088      	sub	sp, #32
   130ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
   130cc:	466a      	mov	r2, sp
   130ce:	4915      	ldr	r1, [pc, #84]	; (13124 <z_arm_fatal_error+0x154>)
   130d0:	2503      	movs	r5, #3
   130d2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   130d6:	f842 5f10 	str.w	r5, [r2, #16]!
   130da:	480f      	ldr	r0, [pc, #60]	; (13118 <z_arm_fatal_error+0x148>)
   130dc:	2300      	movs	r3, #0
   130de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   130e2:	f7ff fab3 	bl	1264c <z_impl_z_log_msg_static_create>
   130e6:	46cd      	mov	sp, r9
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   130e8:	b088      	sub	sp, #32
   130ea:	69a3      	ldr	r3, [r4, #24]
   130ec:	466a      	mov	r2, sp
   130ee:	490e      	ldr	r1, [pc, #56]	; (13128 <z_arm_fatal_error+0x158>)
   130f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   130f4:	f842 5f10 	str.w	r5, [r2, #16]!
   130f8:	4807      	ldr	r0, [pc, #28]	; (13118 <z_arm_fatal_error+0x148>)
   130fa:	2300      	movs	r3, #0
   130fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13100:	f7ff faa4 	bl	1264c <z_impl_z_log_msg_static_create>
   13104:	46cd      	mov	sp, r9
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13106:	4621      	mov	r1, r4
   13108:	4640      	mov	r0, r8
   1310a:	f009 f8a7 	bl	1c25c <z_fatal_error>
}
   1310e:	46bd      	mov	sp, r7
   13110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13114:	000229e2 	.word	0x000229e2
   13118:	00021eec 	.word	0x00021eec
   1311c:	00022a11 	.word	0x00022a11
   13120:	00022a40 	.word	0x00022a40
   13124:	00022a92 	.word	0x00022a92
   13128:	00022aa1 	.word	0x00022aa1
   1312c:	00022a4f 	.word	0x00022a4f

00013130 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13130:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13132:	2800      	cmp	r0, #0
   13134:	db07      	blt.n	13146 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13136:	4a04      	ldr	r2, [pc, #16]	; (13148 <arch_irq_enable+0x18>)
   13138:	0941      	lsrs	r1, r0, #5
   1313a:	2301      	movs	r3, #1
   1313c:	f000 001f 	and.w	r0, r0, #31
   13140:	4083      	lsls	r3, r0
   13142:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   13146:	4770      	bx	lr
   13148:	e000e100 	.word	0xe000e100

0001314c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1314c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1314e:	2800      	cmp	r0, #0
   13150:	db0c      	blt.n	1316c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13152:	0943      	lsrs	r3, r0, #5
   13154:	4906      	ldr	r1, [pc, #24]	; (13170 <arch_irq_disable+0x24>)
   13156:	f000 001f 	and.w	r0, r0, #31
   1315a:	3320      	adds	r3, #32
   1315c:	2201      	movs	r2, #1
   1315e:	4082      	lsls	r2, r0
   13160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13164:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13168:	f3bf 8f6f 	isb	sy
}
   1316c:	4770      	bx	lr
   1316e:	bf00      	nop
   13170:	e000e100 	.word	0xe000e100

00013174 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13174:	4b05      	ldr	r3, [pc, #20]	; (1318c <arch_irq_is_enabled+0x18>)
   13176:	0942      	lsrs	r2, r0, #5
   13178:	f000 001f 	and.w	r0, r0, #31
   1317c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13180:	2301      	movs	r3, #1
   13182:	fa03 f000 	lsl.w	r0, r3, r0
}
   13186:	4010      	ands	r0, r2
   13188:	4770      	bx	lr
   1318a:	bf00      	nop
   1318c:	e000e100 	.word	0xe000e100

00013190 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13190:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13192:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   13194:	bf54      	ite	pl
   13196:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13198:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1319a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1319c:	bfac      	ite	ge
   1319e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   131a2:	4a07      	ldrlt	r2, [pc, #28]	; (131c0 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   131a4:	ea4f 1341 	mov.w	r3, r1, lsl #5
   131a8:	bfac      	ite	ge
   131aa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   131ae:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   131b2:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   131b4:	bfb4      	ite	lt
   131b6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   131b8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   131bc:	4770      	bx	lr
   131be:	bf00      	nop
   131c0:	e000ed14 	.word	0xe000ed14

000131c4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   131c4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   131c6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   131c8:	4b04      	ldr	r3, [pc, #16]	; (131dc <_arch_isr_direct_pm+0x18>)
   131ca:	69da      	ldr	r2, [r3, #28]
   131cc:	b11a      	cbz	r2, 131d6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   131ce:	2200      	movs	r2, #0
   131d0:	61da      	str	r2, [r3, #28]
		z_pm_save_idle_exit();
   131d2:	f00d ffd4 	bl	2117e <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   131d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   131d8:	bd08      	pop	{r3, pc}
   131da:	bf00      	nop
   131dc:	20002f5c 	.word	0x20002f5c

000131e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   131e0:	bf30      	wfi
    b z_SysNmiOnReset
   131e2:	f7ff bffd 	b.w	131e0 <z_SysNmiOnReset>
   131e6:	bf00      	nop

000131e8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   131e8:	4a14      	ldr	r2, [pc, #80]	; (1323c <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   131ea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   131ec:	4b14      	ldr	r3, [pc, #80]	; (13240 <z_arm_prep_c+0x58>)
   131ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   131f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   131f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   131f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   131fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13200:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   13208:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1320c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   13210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   13214:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   13218:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   1321c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13220:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   13224:	2300      	movs	r3, #0
   13226:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1322a:	f009 f8d1 	bl	1c3d0 <z_bss_zero>
	z_data_copy();
   1322e:	f00a f871 	bl	1d314 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13232:	f000 fc39 	bl	13aa8 <z_arm_interrupt_init>
	z_cstart();
   13236:	f009 f90f 	bl	1c458 <z_cstart>
   1323a:	bf00      	nop
   1323c:	00000000 	.word	0x00000000
   13240:	e000ed00 	.word	0xe000ed00

00013244 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13244:	4a09      	ldr	r2, [pc, #36]	; (1326c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13246:	490a      	ldr	r1, [pc, #40]	; (13270 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   13248:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1324a:	6809      	ldr	r1, [r1, #0]
   1324c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1324e:	4909      	ldr	r1, [pc, #36]	; (13274 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13250:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13252:	684b      	ldr	r3, [r1, #4]
   13254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13258:	604b      	str	r3, [r1, #4]
   1325a:	2300      	movs	r3, #0
   1325c:	f383 8811 	msr	BASEPRI, r3
   13260:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13264:	6893      	ldr	r3, [r2, #8]
}
   13266:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   13268:	4770      	bx	lr
   1326a:	bf00      	nop
   1326c:	20002f5c 	.word	0x20002f5c
   13270:	000224a0 	.word	0x000224a0
   13274:	e000ed00 	.word	0xe000ed00

00013278 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13278:	4921      	ldr	r1, [pc, #132]	; (13300 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1327a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1327c:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13280:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13284:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13286:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1328a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   1328e:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   13292:	d103      	bne.n	1329c <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   13294:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   13298:	ec80 8a10 	vstmia	r0, {s16-s31}

0001329c <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1329c:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1329e:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   132a2:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   132a6:	4f17      	ldr	r7, [pc, #92]	; (13304 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   132a8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   132ac:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   132ae:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   132b0:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   132b2:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   132b6:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   132b8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   132ba:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   132bc:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   132c0:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   132c4:	d003      	beq.n	132ce <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   132c6:	2300      	movs	r3, #0
    vmsr fpscr, r3
   132c8:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   132cc:	e003      	b.n	132d6 <in_fp_endif>

000132ce <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   132ce:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   132d2:	ec90 8a10 	vldmia	r0, {s16-s31}

000132d6 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   132d6:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   132da:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   132de:	f383 8814 	msr	CONTROL, r3
    isb
   132e2:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   132e6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   132e8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   132ea:	f000 fc79 	bl	13be0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   132ee:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   132f2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   132f6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   132fa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   132fe:	4770      	bx	lr
    ldr r1, =_kernel
   13300:	20002f5c 	.word	0x20002f5c
    ldr v4, =_SCS_ICSR
   13304:	e000ed04 	.word	0xe000ed04

00013308 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13308:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1330c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1330e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13312:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13316:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13318:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1331c:	2902      	cmp	r1, #2
    beq _oops
   1331e:	d0ff      	beq.n	13320 <_oops>

00013320 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13320:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   13322:	f00b fede 	bl	1f0e2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   13326:	bd01      	pop	{r0, pc}

00013328 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   13328:	7b01      	ldrb	r1, [r0, #12]
   1332a:	0789      	lsls	r1, r1, #30
   1332c:	d505      	bpl.n	1333a <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   1332e:	6e81      	ldr	r1, [r0, #104]	; 0x68
   13330:	3140      	adds	r1, #64	; 0x40
   13332:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   13334:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
   13336:	3940      	subs	r1, #64	; 0x40
   13338:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1333a:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1333e:	9b00      	ldr	r3, [sp, #0]
   13340:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13344:	490f      	ldr	r1, [pc, #60]	; (13384 <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
   13346:	9b01      	ldr	r3, [sp, #4]
   13348:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1334c:	9b02      	ldr	r3, [sp, #8]
   1334e:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13352:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1335a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1335e:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13362:	2300      	movs	r3, #0
   13364:	6783      	str	r3, [r0, #120]	; 0x78
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   13366:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   13368:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1336c:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   13370:	f64f 5308 	movw	r3, #64776	; 0xfd08
   13374:	bf08      	it	eq
   13376:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
   1337a:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   1337c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13380:	4770      	bx	lr
   13382:	bf00      	nop
   13384:	0001e099 	.word	0x0001e099

00013388 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   13388:	7b03      	ldrb	r3, [r0, #12]
   1338a:	f013 0f02 	tst.w	r3, #2
   1338e:	4b19      	ldr	r3, [pc, #100]	; (133f4 <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
   13390:	d103      	bne.n	1339a <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
   13392:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   13396:	06d2      	lsls	r2, r2, #27
   13398:	d417      	bmi.n	133ca <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   1339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1339c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   133a0:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   133a2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   133a6:	0719      	lsls	r1, r3, #28
   133a8:	d409      	bmi.n	133be <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   133aa:	f043 0308 	orr.w	r3, r3, #8
   133ae:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
   133b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   133b4:	3340      	adds	r3, #64	; 0x40
   133b6:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
   133b8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   133ba:	3b40      	subs	r3, #64	; 0x40
   133bc:	66c3      	str	r3, [r0, #108]	; 0x6c

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
   133be:	7b03      	ldrb	r3, [r0, #12]
   133c0:	f043 0302 	orr.w	r3, r3, #2
   133c4:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   133c6:	2080      	movs	r0, #128	; 0x80
   133c8:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   133ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   133cc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   133d0:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   133d2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   133d6:	071a      	lsls	r2, r3, #28
   133d8:	d401      	bmi.n	133de <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   133da:	2040      	movs	r0, #64	; 0x40
}
   133dc:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   133de:	f023 0308 	bic.w	r3, r3, #8
   133e2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
   133e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
   133e8:	3b40      	subs	r3, #64	; 0x40
   133ea:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
   133ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   133ee:	3340      	adds	r3, #64	; 0x40
   133f0:	66c3      	str	r3, [r0, #108]	; 0x6c
   133f2:	e7f2      	b.n	133da <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
   133f4:	e000ef00 	.word	0xe000ef00

000133f8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   133f8:	4a0c      	ldr	r2, [pc, #48]	; (1342c <z_check_thread_stack_fail+0x34>)
{
   133fa:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   133fc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   133fe:	b1a0      	cbz	r0, 1342a <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   13400:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13404:	6e80      	ldr	r0, [r0, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   13406:	f012 0f08 	tst.w	r2, #8
   1340a:	bf0c      	ite	eq
   1340c:	2240      	moveq	r2, #64	; 0x40
   1340e:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13410:	f113 0f16 	cmn.w	r3, #22
   13414:	d004      	beq.n	13420 <z_check_thread_stack_fail+0x28>
   13416:	1a82      	subs	r2, r0, r2
   13418:	429a      	cmp	r2, r3
   1341a:	d805      	bhi.n	13428 <z_check_thread_stack_fail+0x30>
   1341c:	4283      	cmp	r3, r0
   1341e:	d203      	bcs.n	13428 <z_check_thread_stack_fail+0x30>
		return 0;
   13420:	4281      	cmp	r1, r0
   13422:	bf28      	it	cs
   13424:	2000      	movcs	r0, #0
   13426:	4770      	bx	lr
   13428:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   1342a:	4770      	bx	lr
   1342c:	20002f5c 	.word	0x20002f5c

00013430 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13430:	b508      	push	{r3, lr}
   13432:	4614      	mov	r4, r2
   13434:	460d      	mov	r5, r1
   13436:	2200      	movs	r2, #0
   13438:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1343c:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13440:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13444:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
   13448:	f3bf 8f6f 	isb	sy
   1344c:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13450:	4a08      	ldr	r2, [pc, #32]	; (13474 <arch_switch_to_main_thread+0x44>)
   13452:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13454:	f000 fbc4 	bl	13be0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13458:	4620      	mov	r0, r4
   1345a:	f385 8809 	msr	PSP, r5
   1345e:	2100      	movs	r1, #0
   13460:	b663      	cpsie	if
   13462:	f381 8811 	msr	BASEPRI, r1
   13466:	f3bf 8f6f 	isb	sy
   1346a:	2200      	movs	r2, #0
   1346c:	2300      	movs	r3, #0
   1346e:	f00a fe13 	bl	1e098 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13472:	bf00      	nop
   13474:	20002f5c 	.word	0x20002f5c

00013478 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13478:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1347a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1347c:	4a0b      	ldr	r2, [pc, #44]	; (134ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1347e:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   13480:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13482:	bf1e      	ittt	ne
	movne	r1, #0
   13484:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13486:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   13488:	f00d fe79 	blne	2117e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1348c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1348e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13492:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13496:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1349a:	4905      	ldr	r1, [pc, #20]	; (134b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1349c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1349e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   134a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   134a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   134a6:	4903      	ldr	r1, [pc, #12]	; (134b4 <_isr_wrapper+0x3c>)
	bx r1
   134a8:	4708      	bx	r1
   134aa:	0000      	.short	0x0000
	ldr r2, =_kernel
   134ac:	20002f5c 	.word	0x20002f5c
	ldr r1, =_sw_isr_table
   134b0:	00021c40 	.word	0x00021c40
	ldr r1, =z_arm_int_exit
   134b4:	000134b9 	.word	0x000134b9

000134b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   134b8:	4b04      	ldr	r3, [pc, #16]	; (134cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   134ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   134bc:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   134be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   134c0:	d003      	beq.n	134ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   134c2:	4903      	ldr	r1, [pc, #12]	; (134d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   134c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   134c8:	600a      	str	r2, [r1, #0]

000134ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   134ca:	4770      	bx	lr
	ldr r3, =_kernel
   134cc:	20002f5c 	.word	0x20002f5c
	ldr r1, =_SCS_ICSR
   134d0:	e000ed04 	.word	0xe000ed04

000134d4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   134d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134d8:	b086      	sub	sp, #24
   134da:	4606      	mov	r6, r0
   134dc:	af00      	add	r7, sp, #0
   134de:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   134e0:	4b3e      	ldr	r3, [pc, #248]	; (135dc <bus_fault.constprop.0+0x108>)
   134e2:	617b      	str	r3, [r7, #20]
   134e4:	2402      	movs	r4, #2
   134e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   134ea:	483d      	ldr	r0, [pc, #244]	; (135e0 <bus_fault.constprop.0+0x10c>)
   134ec:	613c      	str	r4, [r7, #16]
   134ee:	f107 0210 	add.w	r2, r7, #16
   134f2:	f00b fe05 	bl	1f100 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   134f6:	4b3b      	ldr	r3, [pc, #236]	; (135e4 <bus_fault.constprop.0+0x110>)
   134f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134fa:	04d9      	lsls	r1, r3, #19
   134fc:	d509      	bpl.n	13512 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   134fe:	4b3a      	ldr	r3, [pc, #232]	; (135e8 <bus_fault.constprop.0+0x114>)
   13500:	4837      	ldr	r0, [pc, #220]	; (135e0 <bus_fault.constprop.0+0x10c>)
   13502:	e9c7 4304 	strd	r4, r3, [r7, #16]
   13506:	f107 0210 	add.w	r2, r7, #16
   1350a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1350e:	f00b fdf7 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13512:	4b34      	ldr	r3, [pc, #208]	; (135e4 <bus_fault.constprop.0+0x110>)
   13514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13516:	051a      	lsls	r2, r3, #20
   13518:	d50a      	bpl.n	13530 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1351a:	4b34      	ldr	r3, [pc, #208]	; (135ec <bus_fault.constprop.0+0x118>)
   1351c:	617b      	str	r3, [r7, #20]
   1351e:	2302      	movs	r3, #2
   13520:	482f      	ldr	r0, [pc, #188]	; (135e0 <bus_fault.constprop.0+0x10c>)
   13522:	613b      	str	r3, [r7, #16]
   13524:	f107 0210 	add.w	r2, r7, #16
   13528:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1352c:	f00b fde8 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13530:	4c2c      	ldr	r4, [pc, #176]	; (135e4 <bus_fault.constprop.0+0x110>)
   13532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13534:	059b      	lsls	r3, r3, #22
   13536:	d522      	bpl.n	1357e <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   13538:	46e8      	mov	r8, sp
   1353a:	4b2d      	ldr	r3, [pc, #180]	; (135f0 <bus_fault.constprop.0+0x11c>)
   1353c:	617b      	str	r3, [r7, #20]
   1353e:	2302      	movs	r3, #2
   13540:	4827      	ldr	r0, [pc, #156]	; (135e0 <bus_fault.constprop.0+0x10c>)
   13542:	613b      	str	r3, [r7, #16]
   13544:	f107 0210 	add.w	r2, r7, #16
   13548:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1354c:	f00b fdd8 	bl	1f100 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13550:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13552:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   13554:	0410      	lsls	r0, r2, #16
   13556:	d512      	bpl.n	1357e <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13558:	b088      	sub	sp, #32
   1355a:	466a      	mov	r2, sp
   1355c:	4925      	ldr	r1, [pc, #148]	; (135f4 <bus_fault.constprop.0+0x120>)
   1355e:	4820      	ldr	r0, [pc, #128]	; (135e0 <bus_fault.constprop.0+0x10c>)
   13560:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13564:	2303      	movs	r3, #3
   13566:	f842 3f10 	str.w	r3, [r2, #16]!
   1356a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1356e:	f00b fdc7 	bl	1f100 <z_log_msg_static_create.constprop.0>
   13572:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   13574:	b11e      	cbz	r6, 1357e <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1357c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1357e:	4b19      	ldr	r3, [pc, #100]	; (135e4 <bus_fault.constprop.0+0x110>)
   13580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13582:	0559      	lsls	r1, r3, #21
   13584:	d50a      	bpl.n	1359c <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   13586:	4b1c      	ldr	r3, [pc, #112]	; (135f8 <bus_fault.constprop.0+0x124>)
   13588:	617b      	str	r3, [r7, #20]
   1358a:	2302      	movs	r3, #2
   1358c:	4814      	ldr	r0, [pc, #80]	; (135e0 <bus_fault.constprop.0+0x10c>)
   1358e:	613b      	str	r3, [r7, #16]
   13590:	f107 0210 	add.w	r2, r7, #16
   13594:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13598:	f00b fdb2 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1359c:	4b11      	ldr	r3, [pc, #68]	; (135e4 <bus_fault.constprop.0+0x110>)
   1359e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135a0:	05d2      	lsls	r2, r2, #23
   135a2:	d515      	bpl.n	135d0 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   135a4:	4b15      	ldr	r3, [pc, #84]	; (135fc <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   135a6:	617b      	str	r3, [r7, #20]
   135a8:	2302      	movs	r3, #2
   135aa:	480d      	ldr	r0, [pc, #52]	; (135e0 <bus_fault.constprop.0+0x10c>)
   135ac:	613b      	str	r3, [r7, #16]
   135ae:	f107 0210 	add.w	r2, r7, #16
   135b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   135b6:	f00b fda3 	bl	1f100 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   135ba:	4a0a      	ldr	r2, [pc, #40]	; (135e4 <bus_fault.constprop.0+0x110>)
   135bc:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   135be:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   135c0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   135c4:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   135c6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   135c8:	7028      	strb	r0, [r5, #0]
}
   135ca:	46bd      	mov	sp, r7
   135cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   135d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135d2:	049b      	lsls	r3, r3, #18
   135d4:	d5f1      	bpl.n	135ba <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   135d6:	4b0a      	ldr	r3, [pc, #40]	; (13600 <bus_fault.constprop.0+0x12c>)
   135d8:	e7e5      	b.n	135a6 <bus_fault.constprop.0+0xd2>
   135da:	bf00      	nop
   135dc:	00022acf 	.word	0x00022acf
   135e0:	00021eec 	.word	0x00021eec
   135e4:	e000ed00 	.word	0xe000ed00
   135e8:	00022ae5 	.word	0x00022ae5
   135ec:	00022af6 	.word	0x00022af6
   135f0:	00022b09 	.word	0x00022b09
   135f4:	00022b22 	.word	0x00022b22
   135f8:	00022b37 	.word	0x00022b37
   135fc:	00022b52 	.word	0x00022b52
   13600:	00022b6a 	.word	0x00022b6a

00013604 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   13604:	b510      	push	{r4, lr}
   13606:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   13608:	4b33      	ldr	r3, [pc, #204]	; (136d8 <usage_fault.constprop.0+0xd4>)
   1360a:	4834      	ldr	r0, [pc, #208]	; (136dc <usage_fault.constprop.0+0xd8>)
   1360c:	9305      	str	r3, [sp, #20]
   1360e:	2402      	movs	r4, #2
   13610:	aa04      	add	r2, sp, #16
   13612:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13616:	9404      	str	r4, [sp, #16]
   13618:	f00b fd72 	bl	1f100 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1361c:	4b30      	ldr	r3, [pc, #192]	; (136e0 <usage_fault.constprop.0+0xdc>)
   1361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13620:	019b      	lsls	r3, r3, #6
   13622:	d508      	bpl.n	13636 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   13624:	4b2f      	ldr	r3, [pc, #188]	; (136e4 <usage_fault.constprop.0+0xe0>)
   13626:	482d      	ldr	r0, [pc, #180]	; (136dc <usage_fault.constprop.0+0xd8>)
   13628:	aa04      	add	r2, sp, #16
   1362a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1362e:	e9cd 4304 	strd	r4, r3, [sp, #16]
   13632:	f00b fd65 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13636:	4b2a      	ldr	r3, [pc, #168]	; (136e0 <usage_fault.constprop.0+0xdc>)
   13638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1363a:	01dc      	lsls	r4, r3, #7
   1363c:	d509      	bpl.n	13652 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   1363e:	4b2a      	ldr	r3, [pc, #168]	; (136e8 <usage_fault.constprop.0+0xe4>)
   13640:	9305      	str	r3, [sp, #20]
   13642:	4826      	ldr	r0, [pc, #152]	; (136dc <usage_fault.constprop.0+0xd8>)
   13644:	2302      	movs	r3, #2
   13646:	aa04      	add	r2, sp, #16
   13648:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1364c:	9304      	str	r3, [sp, #16]
   1364e:	f00b fd57 	bl	1f100 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13652:	4b23      	ldr	r3, [pc, #140]	; (136e0 <usage_fault.constprop.0+0xdc>)
   13654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13656:	0318      	lsls	r0, r3, #12
   13658:	d509      	bpl.n	1366e <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   1365a:	4b24      	ldr	r3, [pc, #144]	; (136ec <usage_fault.constprop.0+0xe8>)
   1365c:	9305      	str	r3, [sp, #20]
   1365e:	481f      	ldr	r0, [pc, #124]	; (136dc <usage_fault.constprop.0+0xd8>)
   13660:	2302      	movs	r3, #2
   13662:	aa04      	add	r2, sp, #16
   13664:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13668:	9304      	str	r3, [sp, #16]
   1366a:	f00b fd49 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1366e:	4b1c      	ldr	r3, [pc, #112]	; (136e0 <usage_fault.constprop.0+0xdc>)
   13670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13672:	0359      	lsls	r1, r3, #13
   13674:	d509      	bpl.n	1368a <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13676:	4b1e      	ldr	r3, [pc, #120]	; (136f0 <usage_fault.constprop.0+0xec>)
   13678:	9305      	str	r3, [sp, #20]
   1367a:	4818      	ldr	r0, [pc, #96]	; (136dc <usage_fault.constprop.0+0xd8>)
   1367c:	2302      	movs	r3, #2
   1367e:	aa04      	add	r2, sp, #16
   13680:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13684:	9304      	str	r3, [sp, #16]
   13686:	f00b fd3b 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1368a:	4b15      	ldr	r3, [pc, #84]	; (136e0 <usage_fault.constprop.0+0xdc>)
   1368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1368e:	039a      	lsls	r2, r3, #14
   13690:	d509      	bpl.n	136a6 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13692:	4b18      	ldr	r3, [pc, #96]	; (136f4 <usage_fault.constprop.0+0xf0>)
   13694:	9305      	str	r3, [sp, #20]
   13696:	4811      	ldr	r0, [pc, #68]	; (136dc <usage_fault.constprop.0+0xd8>)
   13698:	2302      	movs	r3, #2
   1369a:	aa04      	add	r2, sp, #16
   1369c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   136a0:	9304      	str	r3, [sp, #16]
   136a2:	f00b fd2d 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   136a6:	4b0e      	ldr	r3, [pc, #56]	; (136e0 <usage_fault.constprop.0+0xdc>)
   136a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136aa:	03db      	lsls	r3, r3, #15
   136ac:	d509      	bpl.n	136c2 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   136ae:	4b12      	ldr	r3, [pc, #72]	; (136f8 <usage_fault.constprop.0+0xf4>)
   136b0:	9305      	str	r3, [sp, #20]
   136b2:	480a      	ldr	r0, [pc, #40]	; (136dc <usage_fault.constprop.0+0xd8>)
   136b4:	2302      	movs	r3, #2
   136b6:	aa04      	add	r2, sp, #16
   136b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   136bc:	9304      	str	r3, [sp, #16]
   136be:	f00b fd1f 	bl	1f100 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   136c2:	4a07      	ldr	r2, [pc, #28]	; (136e0 <usage_fault.constprop.0+0xdc>)
   136c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   136c6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   136ca:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   136ce:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   136d0:	6293      	str	r3, [r2, #40]	; 0x28
}
   136d2:	b006      	add	sp, #24
   136d4:	bd10      	pop	{r4, pc}
   136d6:	bf00      	nop
   136d8:	00022b99 	.word	0x00022b99
   136dc:	00021eec 	.word	0x00021eec
   136e0:	e000ed00 	.word	0xe000ed00
   136e4:	00022bb1 	.word	0x00022bb1
   136e8:	00022bc4 	.word	0x00022bc4
   136ec:	00022bde 	.word	0x00022bde
   136f0:	00022bfc 	.word	0x00022bfc
   136f4:	00022c21 	.word	0x00022c21
   136f8:	00022c3b 	.word	0x00022c3b

000136fc <mem_manage_fault>:
{
   136fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13700:	b086      	sub	sp, #24
   13702:	4680      	mov	r8, r0
   13704:	af00      	add	r7, sp, #0
   13706:	460c      	mov	r4, r1
   13708:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1370a:	4b4f      	ldr	r3, [pc, #316]	; (13848 <mem_manage_fault+0x14c>)
   1370c:	617b      	str	r3, [r7, #20]
   1370e:	2602      	movs	r6, #2
   13710:	484e      	ldr	r0, [pc, #312]	; (1384c <mem_manage_fault+0x150>)
   13712:	613e      	str	r6, [r7, #16]
   13714:	f107 0210 	add.w	r2, r7, #16
   13718:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1371c:	f00b fcf0 	bl	1f100 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13720:	4b4b      	ldr	r3, [pc, #300]	; (13850 <mem_manage_fault+0x154>)
   13722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13724:	06db      	lsls	r3, r3, #27
   13726:	d509      	bpl.n	1373c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13728:	4b4a      	ldr	r3, [pc, #296]	; (13854 <mem_manage_fault+0x158>)
   1372a:	4848      	ldr	r0, [pc, #288]	; (1384c <mem_manage_fault+0x150>)
   1372c:	e9c7 6304 	strd	r6, r3, [r7, #16]
   13730:	f107 0210 	add.w	r2, r7, #16
   13734:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13738:	f00b fce2 	bl	1f100 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1373c:	4b44      	ldr	r3, [pc, #272]	; (13850 <mem_manage_fault+0x154>)
   1373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13740:	0718      	lsls	r0, r3, #28
   13742:	d50a      	bpl.n	1375a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
   13744:	4b44      	ldr	r3, [pc, #272]	; (13858 <mem_manage_fault+0x15c>)
   13746:	617b      	str	r3, [r7, #20]
   13748:	2302      	movs	r3, #2
   1374a:	4840      	ldr	r0, [pc, #256]	; (1384c <mem_manage_fault+0x150>)
   1374c:	613b      	str	r3, [r7, #16]
   1374e:	f107 0210 	add.w	r2, r7, #16
   13752:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13756:	f00b fcd3 	bl	1f100 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1375a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 13850 <mem_manage_fault+0x154>
   1375e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   13762:	0799      	lsls	r1, r3, #30
   13764:	d439      	bmi.n	137da <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
   13766:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1376a:	4b39      	ldr	r3, [pc, #228]	; (13850 <mem_manage_fault+0x154>)
   1376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1376e:	07db      	lsls	r3, r3, #31
   13770:	d50a      	bpl.n	13788 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
   13772:	4b3a      	ldr	r3, [pc, #232]	; (1385c <mem_manage_fault+0x160>)
   13774:	617b      	str	r3, [r7, #20]
   13776:	2302      	movs	r3, #2
   13778:	4834      	ldr	r0, [pc, #208]	; (1384c <mem_manage_fault+0x150>)
   1377a:	613b      	str	r3, [r7, #16]
   1377c:	f107 0210 	add.w	r2, r7, #16
   13780:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13784:	f00b fcbc 	bl	1f100 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13788:	4b31      	ldr	r3, [pc, #196]	; (13850 <mem_manage_fault+0x154>)
   1378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1378c:	069c      	lsls	r4, r3, #26
   1378e:	d50a      	bpl.n	137a6 <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
   13790:	4b33      	ldr	r3, [pc, #204]	; (13860 <mem_manage_fault+0x164>)
   13792:	617b      	str	r3, [r7, #20]
   13794:	2302      	movs	r3, #2
   13796:	482d      	ldr	r0, [pc, #180]	; (1384c <mem_manage_fault+0x150>)
   13798:	613b      	str	r3, [r7, #16]
   1379a:	f107 0210 	add.w	r2, r7, #16
   1379e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   137a2:	f00b fcad 	bl	1f100 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   137a6:	4c2a      	ldr	r4, [pc, #168]	; (13850 <mem_manage_fault+0x154>)
   137a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   137aa:	06d8      	lsls	r0, r3, #27
   137ac:	d43e      	bmi.n	1382c <mem_manage_fault+0x130>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   137ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   137b0:	0799      	lsls	r1, r3, #30
   137b2:	d43b      	bmi.n	1382c <mem_manage_fault+0x130>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   137b4:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   137b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   137b8:	4a25      	ldr	r2, [pc, #148]	; (13850 <mem_manage_fault+0x154>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   137ba:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   137bc:	bf42      	ittt	mi
   137be:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
   137c0:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
   137c4:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   137c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   137c8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   137cc:	6293      	str	r3, [r2, #40]	; 0x28
}
   137ce:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   137d0:	2300      	movs	r3, #0
   137d2:	702b      	strb	r3, [r5, #0]
}
   137d4:	46bd      	mov	sp, r7
   137d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   137da:	46e9      	mov	r9, sp
   137dc:	4b21      	ldr	r3, [pc, #132]	; (13864 <mem_manage_fault+0x168>)
   137de:	617b      	str	r3, [r7, #20]
   137e0:	2302      	movs	r3, #2
   137e2:	613b      	str	r3, [r7, #16]
   137e4:	f107 0210 	add.w	r2, r7, #16
   137e8:	4818      	ldr	r0, [pc, #96]	; (1384c <mem_manage_fault+0x150>)
   137ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   137ee:	f00b fc87 	bl	1f100 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   137f2:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   137f6:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   137fa:	061a      	lsls	r2, r3, #24
   137fc:	d5b3      	bpl.n	13766 <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   137fe:	b088      	sub	sp, #32
   13800:	466a      	mov	r2, sp
   13802:	4b19      	ldr	r3, [pc, #100]	; (13868 <mem_manage_fault+0x16c>)
   13804:	4811      	ldr	r0, [pc, #68]	; (1384c <mem_manage_fault+0x150>)
   13806:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1380a:	2303      	movs	r3, #3
   1380c:	f842 3f10 	str.w	r3, [r2, #16]!
   13810:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13814:	f00b fc74 	bl	1f100 <z_log_msg_static_create.constprop.0>
   13818:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   1381a:	2c00      	cmp	r4, #0
   1381c:	d0a5      	beq.n	1376a <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1381e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   13822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13826:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
   1382a:	e79e      	b.n	1376a <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1382c:	6863      	ldr	r3, [r4, #4]
   1382e:	051a      	lsls	r2, r3, #20
   13830:	d5c0      	bpl.n	137b4 <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13832:	4641      	mov	r1, r8
   13834:	4630      	mov	r0, r6
   13836:	f7ff fddf 	bl	133f8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1383a:	2800      	cmp	r0, #0
   1383c:	d0ba      	beq.n	137b4 <mem_manage_fault+0xb8>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1383e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13842:	2002      	movs	r0, #2
   13844:	e7b7      	b.n	137b6 <mem_manage_fault+0xba>
   13846:	bf00      	nop
   13848:	00022c66 	.word	0x00022c66
   1384c:	00021eec 	.word	0x00021eec
   13850:	e000ed00 	.word	0xe000ed00
   13854:	00022c7c 	.word	0x00022c7c
   13858:	00022af6 	.word	0x00022af6
   1385c:	00022cdd 	.word	0x00022cdd
   13860:	00022b6a 	.word	0x00022b6a
   13864:	00022caf 	.word	0x00022caf
   13868:	00022cc7 	.word	0x00022cc7

0001386c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1386c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13870:	4b77      	ldr	r3, [pc, #476]	; (13a50 <z_arm_fault+0x1e4>)
{
   13872:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13874:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   13878:	af00      	add	r7, sp, #0
   1387a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1387c:	f3c8 0408 	ubfx	r4, r8, #0, #9
   13880:	2600      	movs	r6, #0
   13882:	f386 8811 	msr	BASEPRI, r6
   13886:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1388a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1388e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13892:	d10e      	bne.n	138b2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13894:	f002 030c 	and.w	r3, r2, #12
   13898:	2b08      	cmp	r3, #8
   1389a:	d119      	bne.n	138d0 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   1389c:	4b6d      	ldr	r3, [pc, #436]	; (13a54 <z_arm_fault+0x1e8>)
   1389e:	61fb      	str	r3, [r7, #28]
   138a0:	2302      	movs	r3, #2
   138a2:	486d      	ldr	r0, [pc, #436]	; (13a58 <z_arm_fault+0x1ec>)
   138a4:	61bb      	str	r3, [r7, #24]
   138a6:	f107 0218 	add.w	r2, r7, #24
   138aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   138ae:	f00b fc27 	bl	1f100 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   138b2:	2600      	movs	r6, #0
		return NULL;
   138b4:	4635      	mov	r5, r6
	*recoverable = false;
   138b6:	2300      	movs	r3, #0
   138b8:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   138ba:	1ee3      	subs	r3, r4, #3
   138bc:	2b09      	cmp	r3, #9
   138be:	f200 80a6 	bhi.w	13a0e <z_arm_fault+0x1a2>
   138c2:	e8df f003 	tbb	[pc, r3]
   138c6:	990a      	.short	0x990a
   138c8:	a4a4959c 	.word	0xa4a4959c
   138cc:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   138d0:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   138d2:	bf4c      	ite	mi
   138d4:	460d      	movmi	r5, r1
			*nested_exc = true;
   138d6:	2601      	movpl	r6, #1
   138d8:	e7ed      	b.n	138b6 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   138da:	46e9      	mov	r9, sp
   138dc:	4b5f      	ldr	r3, [pc, #380]	; (13a5c <z_arm_fault+0x1f0>)
   138de:	61fb      	str	r3, [r7, #28]
   138e0:	f04f 0802 	mov.w	r8, #2
   138e4:	f107 0218 	add.w	r2, r7, #24
   138e8:	485b      	ldr	r0, [pc, #364]	; (13a58 <z_arm_fault+0x1ec>)
   138ea:	f8c7 8018 	str.w	r8, [r7, #24]
   138ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   138f2:	f00b fc05 	bl	1f100 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   138f6:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   138f8:	4c55      	ldr	r4, [pc, #340]	; (13a50 <z_arm_fault+0x1e4>)
	*recoverable = false;
   138fa:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   138fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   138fe:	079a      	lsls	r2, r3, #30
   13900:	d50b      	bpl.n	1391a <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   13902:	4b57      	ldr	r3, [pc, #348]	; (13a60 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
   13904:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   13908:	4853      	ldr	r0, [pc, #332]	; (13a58 <z_arm_fault+0x1ec>)
   1390a:	f107 0218 	add.w	r2, r7, #24
   1390e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13912:	f00b fbf5 	bl	1f100 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13916:	2400      	movs	r4, #0
   13918:	e041      	b.n	1399e <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1391a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1391c:	2b00      	cmp	r3, #0
   1391e:	da01      	bge.n	13924 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   13920:	4b50      	ldr	r3, [pc, #320]	; (13a64 <z_arm_fault+0x1f8>)
   13922:	e7ef      	b.n	13904 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13926:	005b      	lsls	r3, r3, #1
   13928:	d5f5      	bpl.n	13916 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   1392a:	4b4f      	ldr	r3, [pc, #316]	; (13a68 <z_arm_fault+0x1fc>)
   1392c:	484a      	ldr	r0, [pc, #296]	; (13a58 <z_arm_fault+0x1ec>)
   1392e:	e9c7 8306 	strd	r8, r3, [r7, #24]
   13932:	f107 0218 	add.w	r2, r7, #24
   13936:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1393a:	f00b fbe1 	bl	1f100 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1393e:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13940:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   13942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13946:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1394c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   13950:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   13952:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   13956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1395a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1395c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13960:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13964:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13968:	429a      	cmp	r2, r3
   1396a:	d008      	beq.n	1397e <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1396c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1396e:	b2db      	uxtb	r3, r3
   13970:	b38b      	cbz	r3, 139d6 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   13972:	1dfa      	adds	r2, r7, #7
   13974:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   13976:	4628      	mov	r0, r5
   13978:	f7ff fec0 	bl	136fc <mem_manage_fault>
   1397c:	e03a      	b.n	139f4 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1397e:	b088      	sub	sp, #32
   13980:	682b      	ldr	r3, [r5, #0]
   13982:	466a      	mov	r2, sp
   13984:	4939      	ldr	r1, [pc, #228]	; (13a6c <z_arm_fault+0x200>)
   13986:	4834      	ldr	r0, [pc, #208]	; (13a58 <z_arm_fault+0x1ec>)
   13988:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1398c:	2303      	movs	r3, #3
   1398e:	f842 3f10 	str.w	r3, [r2, #16]!
   13992:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13996:	f00b fbb3 	bl	1f100 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   1399a:	682c      	ldr	r4, [r5, #0]
   1399c:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1399e:	79fb      	ldrb	r3, [r7, #7]
   139a0:	b9ab      	cbnz	r3, 139ce <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   139a2:	2268      	movs	r2, #104	; 0x68
   139a4:	4629      	mov	r1, r5
   139a6:	f107 0008 	add.w	r0, r7, #8
   139aa:	f00b fbf6 	bl	1f19a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   139ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   139b0:	2e00      	cmp	r6, #0
   139b2:	d047      	beq.n	13a44 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   139b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   139b8:	b922      	cbnz	r2, 139c4 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   139ba:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   139be:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   139c2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   139c4:	f107 0108 	add.w	r1, r7, #8
   139c8:	4620      	mov	r0, r4
   139ca:	f7ff fb01 	bl	12fd0 <z_arm_fatal_error>
}
   139ce:	3774      	adds	r7, #116	; 0x74
   139d0:	46bd      	mov	sp, r7
   139d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   139d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139d8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   139dc:	d004      	beq.n	139e8 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
   139de:	1df9      	adds	r1, r7, #7
   139e0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   139e2:	f7ff fd77 	bl	134d4 <bus_fault.constprop.0>
   139e6:	e005      	b.n	139f4 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   139e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   139ee:	d392      	bcc.n	13916 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   139f0:	f7ff fe08 	bl	13604 <usage_fault.constprop.0>
   139f4:	4604      	mov	r4, r0
   139f6:	e7d2      	b.n	1399e <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   139f8:	1dfa      	adds	r2, r7, #7
   139fa:	2100      	movs	r1, #0
   139fc:	e7bb      	b.n	13976 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   139fe:	1df9      	adds	r1, r7, #7
   13a00:	2000      	movs	r0, #0
   13a02:	e7ee      	b.n	139e2 <z_arm_fault+0x176>
	PR_FAULT_INFO(
   13a04:	4b1a      	ldr	r3, [pc, #104]	; (13a70 <z_arm_fault+0x204>)
   13a06:	61fb      	str	r3, [r7, #28]
   13a08:	2302      	movs	r3, #2
   13a0a:	61bb      	str	r3, [r7, #24]
   13a0c:	e77c      	b.n	13908 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   13a0e:	4a19      	ldr	r2, [pc, #100]	; (13a74 <z_arm_fault+0x208>)
   13a10:	4b19      	ldr	r3, [pc, #100]	; (13a78 <z_arm_fault+0x20c>)
   13a12:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   13a16:	46e8      	mov	r8, sp
   13a18:	b08a      	sub	sp, #40	; 0x28
   13a1a:	bf18      	it	ne
   13a1c:	4613      	movne	r3, r2
   13a1e:	466a      	mov	r2, sp
   13a20:	4916      	ldr	r1, [pc, #88]	; (13a7c <z_arm_fault+0x210>)
   13a22:	480d      	ldr	r0, [pc, #52]	; (13a58 <z_arm_fault+0x1ec>)
   13a24:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13a28:	f44f 7300 	mov.w	r3, #512	; 0x200
   13a2c:	8413      	strh	r3, [r2, #32]
   13a2e:	3c10      	subs	r4, #16
   13a30:	4b13      	ldr	r3, [pc, #76]	; (13a80 <z_arm_fault+0x214>)
   13a32:	61d4      	str	r4, [r2, #28]
   13a34:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   13a38:	f842 3f10 	str.w	r3, [r2, #16]!
   13a3c:	f00b fb60 	bl	1f100 <z_log_msg_static_create.constprop.0>
   13a40:	46c5      	mov	sp, r8
}
   13a42:	e768      	b.n	13916 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13a44:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13a48:	f023 0301 	bic.w	r3, r3, #1
   13a4c:	e7b9      	b.n	139c2 <z_arm_fault+0x156>
   13a4e:	bf00      	nop
   13a50:	e000ed00 	.word	0xe000ed00
   13a54:	00022d2a 	.word	0x00022d2a
   13a58:	00021eec 	.word	0x00021eec
   13a5c:	00022d55 	.word	0x00022d55
   13a60:	00022d6c 	.word	0x00022d6c
   13a64:	00022d8d 	.word	0x00022d8d
   13a68:	00022d9b 	.word	0x00022d9b
   13a6c:	00022dba 	.word	0x00022dba
   13a70:	00022dd6 	.word	0x00022dd6
   13a74:	00022d11 	.word	0x00022d11
   13a78:	00022cfc 	.word	0x00022cfc
   13a7c:	00022dfa 	.word	0x00022dfa
   13a80:	01000004 	.word	0x01000004

00013a84 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13a84:	4a02      	ldr	r2, [pc, #8]	; (13a90 <z_arm_fault_init+0xc>)
   13a86:	6953      	ldr	r3, [r2, #20]
   13a88:	f043 0310 	orr.w	r3, r3, #16
   13a8c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   13a8e:	4770      	bx	lr
   13a90:	e000ed00 	.word	0xe000ed00

00013a94 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13a94:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13a98:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13a9c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13a9e:	4672      	mov	r2, lr
	bl z_arm_fault
   13aa0:	f7ff fee4 	bl	1386c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13aa4:	bd01      	pop	{r0, pc}
   13aa6:	bf00      	nop

00013aa8 <z_arm_interrupt_init>:
   13aa8:	4804      	ldr	r0, [pc, #16]	; (13abc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13aaa:	2300      	movs	r3, #0
   13aac:	2140      	movs	r1, #64	; 0x40
   13aae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13ab0:	3301      	adds	r3, #1
   13ab2:	2b30      	cmp	r3, #48	; 0x30
   13ab4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13ab8:	d1f9      	bne.n	13aae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13aba:	4770      	bx	lr
   13abc:	e000e100 	.word	0xe000e100

00013ac0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13ac0:	2000      	movs	r0, #0
    msr CONTROL, r0
   13ac2:	f380 8814 	msr	CONTROL, r0
    isb
   13ac6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13aca:	f7fe fb2b 	bl	12124 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13ace:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13ad0:	490d      	ldr	r1, [pc, #52]	; (13b08 <__start+0x48>)
    str r0, [r1]
   13ad2:	6008      	str	r0, [r1, #0]
    dsb
   13ad4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13ad8:	480c      	ldr	r0, [pc, #48]	; (13b0c <__start+0x4c>)
    msr msp, r0
   13ada:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13ade:	f000 f82b 	bl	13b38 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13ae2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13ae4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13ae8:	4809      	ldr	r0, [pc, #36]	; (13b10 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13aea:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   13aee:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13af0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13af4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13af8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13afa:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13afc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13b00:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13b04:	f7ff fb70 	bl	131e8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13b08:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13b0c:	20006000 	.word	0x20006000
    ldr r0, =z_interrupt_stacks
   13b10:	20005200 	.word	0x20005200

00013b14 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13b14:	4907      	ldr	r1, [pc, #28]	; (13b34 <z_arm_clear_arm_mpu_config+0x20>)
   13b16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   13b1a:	2300      	movs	r3, #0
	int num_regions =
   13b1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   13b20:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   13b22:	4293      	cmp	r3, r2
   13b24:	db00      	blt.n	13b28 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   13b26:	4770      	bx	lr
  MPU->RNR = rnr;
   13b28:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   13b2c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   13b30:	3301      	adds	r3, #1
   13b32:	e7f6      	b.n	13b22 <z_arm_clear_arm_mpu_config+0xe>
   13b34:	e000ed00 	.word	0xe000ed00

00013b38 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13b38:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13b3a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13b3c:	2300      	movs	r3, #0
   13b3e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13b42:	f7ff ffe7 	bl	13b14 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   13b46:	4b14      	ldr	r3, [pc, #80]	; (13b98 <z_arm_init_arch_hw_at_boot+0x60>)
   13b48:	f04f 32ff 	mov.w	r2, #4294967295
   13b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   13b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   13b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   13b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   13b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   13b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   13b64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   13b68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13b6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13b70:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   13b74:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   13b78:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   13b7c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   13b80:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   13b84:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   13b88:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   13b8c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13b8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13b92:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13b96:	bd08      	pop	{r3, pc}
   13b98:	e000e100 	.word	0xe000e100

00013b9c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   13b9c:	4b08      	ldr	r3, [pc, #32]	; (13bc0 <z_impl_k_thread_abort+0x24>)
   13b9e:	689b      	ldr	r3, [r3, #8]
   13ba0:	4283      	cmp	r3, r0
   13ba2:	d10b      	bne.n	13bbc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13ba4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13ba8:	b143      	cbz	r3, 13bbc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13baa:	4b06      	ldr	r3, [pc, #24]	; (13bc4 <z_impl_k_thread_abort+0x28>)
   13bac:	685a      	ldr	r2, [r3, #4]
   13bae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13bb2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   13bba:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   13bbc:	f009 bb38 	b.w	1d230 <z_thread_abort>
   13bc0:	20002f5c 	.word	0x20002f5c
   13bc4:	e000ed00 	.word	0xe000ed00

00013bc8 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13bc8:	4b02      	ldr	r3, [pc, #8]	; (13bd4 <z_arm_configure_static_mpu_regions+0xc>)
   13bca:	4a03      	ldr	r2, [pc, #12]	; (13bd8 <z_arm_configure_static_mpu_regions+0x10>)
   13bcc:	4803      	ldr	r0, [pc, #12]	; (13bdc <z_arm_configure_static_mpu_regions+0x14>)
   13bce:	2101      	movs	r1, #1
   13bd0:	f000 b898 	b.w	13d04 <arm_core_mpu_configure_static_mpu_regions>
   13bd4:	20020000 	.word	0x20020000
   13bd8:	20000000 	.word	0x20000000
   13bdc:	00022064 	.word	0x00022064

00013be0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13be0:	b510      	push	{r4, lr}
   13be2:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   13be4:	f7ff fbd0 	bl	13388 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13be8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   13bea:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13bec:	4805      	ldr	r0, [pc, #20]	; (13c04 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
   13bee:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
   13bf0:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13bf4:	4b04      	ldr	r3, [pc, #16]	; (13c08 <z_arm_configure_dynamic_mpu_regions+0x28>)
   13bf6:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   13bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13bfc:	2101      	movs	r1, #1
   13bfe:	f000 b88b 	b.w	13d18 <arm_core_mpu_configure_dynamic_mpu_regions>
   13c02:	bf00      	nop
   13c04:	20002b60 	.word	0x20002b60
   13c08:	150b0000 	.word	0x150b0000

00013c0c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13c10:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 13cd4 <mpu_configure_regions+0xc8>
   13c14:	469c      	mov	ip, r3
   13c16:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   13c18:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   13c1a:	2300      	movs	r3, #0
   13c1c:	428b      	cmp	r3, r1
   13c1e:	da1a      	bge.n	13c56 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   13c20:	6844      	ldr	r4, [r0, #4]
   13c22:	2c00      	cmp	r4, #0
   13c24:	d04d      	beq.n	13cc2 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   13c26:	f1bc 0f00 	cmp.w	ip, #0
   13c2a:	d01d      	beq.n	13c68 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13c2c:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13c2e:	4234      	tst	r4, r6
   13c30:	d015      	beq.n	13c5e <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   13c32:	466c      	mov	r4, sp
   13c34:	b088      	sub	sp, #32
   13c36:	466a      	mov	r2, sp
   13c38:	4923      	ldr	r1, [pc, #140]	; (13cc8 <mpu_configure_regions+0xbc>)
   13c3a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13c3e:	2303      	movs	r3, #3
   13c40:	f842 3f10 	str.w	r3, [r2, #16]!
   13c44:	4821      	ldr	r0, [pc, #132]	; (13ccc <mpu_configure_regions+0xc0>)
   13c46:	2300      	movs	r3, #0
   13c48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13c4c:	f7fe fcfe 	bl	1264c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   13c50:	f06f 0515 	mvn.w	r5, #21
   13c54:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13c56:	4628      	mov	r0, r5
   13c58:	46bd      	mov	sp, r7
   13c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   13c5e:	2c1f      	cmp	r4, #31
   13c60:	d9e7      	bls.n	13c32 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   13c62:	6802      	ldr	r2, [r0, #0]
		&&
   13c64:	4216      	tst	r6, r2
   13c66:	d1e4      	bne.n	13c32 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13c68:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   13c6a:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13c6c:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13c6e:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   13c72:	d914      	bls.n	13c9e <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   13c74:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13c78:	d813      	bhi.n	13ca2 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13c7a:	3c01      	subs	r4, #1
   13c7c:	fab4 f484 	clz	r4, r4
   13c80:	f1c4 041f 	rsb	r4, r4, #31
   13c84:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13c86:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13c8a:	ea46 0604 	orr.w	r6, r6, r4
   13c8e:	d90a      	bls.n	13ca6 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13c90:	466c      	mov	r4, sp
   13c92:	b088      	sub	sp, #32
   13c94:	466a      	mov	r2, sp
   13c96:	4b0e      	ldr	r3, [pc, #56]	; (13cd0 <mpu_configure_regions+0xc4>)
   13c98:	e9c2 3505 	strd	r3, r5, [r2, #20]
   13c9c:	e7cf      	b.n	13c3e <mpu_configure_regions+0x32>
		return REGION_32B;
   13c9e:	2408      	movs	r4, #8
   13ca0:	e7f1      	b.n	13c86 <mpu_configure_regions+0x7a>
		return REGION_4G;
   13ca2:	243e      	movs	r4, #62	; 0x3e
   13ca4:	e7ef      	b.n	13c86 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13ca6:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   13caa:	432a      	orrs	r2, r5
   13cac:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13cb0:	f046 0601 	orr.w	r6, r6, #1
   13cb4:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13cb8:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   13cbc:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13cbe:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   13cc2:	3301      	adds	r3, #1
   13cc4:	300c      	adds	r0, #12
   13cc6:	e7a9      	b.n	13c1c <mpu_configure_regions+0x10>
   13cc8:	00022e11 	.word	0x00022e11
   13ccc:	00021edc 	.word	0x00021edc
   13cd0:	00022e34 	.word	0x00022e34
   13cd4:	e000ed00 	.word	0xe000ed00

00013cd8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13cd8:	4b04      	ldr	r3, [pc, #16]	; (13cec <arm_core_mpu_enable+0x14>)
   13cda:	2205      	movs	r2, #5
   13cdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13ce0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13ce4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13ce8:	4770      	bx	lr
   13cea:	bf00      	nop
   13cec:	e000ed00 	.word	0xe000ed00

00013cf0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13cf0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13cf4:	4b02      	ldr	r3, [pc, #8]	; (13d00 <arm_core_mpu_disable+0x10>)
   13cf6:	2200      	movs	r2, #0
   13cf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13cfc:	4770      	bx	lr
   13cfe:	bf00      	nop
   13d00:	e000ed00 	.word	0xe000ed00

00013d04 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13d04:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13d06:	4c03      	ldr	r4, [pc, #12]	; (13d14 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13d08:	2301      	movs	r3, #1
   13d0a:	7822      	ldrb	r2, [r4, #0]
   13d0c:	f7ff ff7e 	bl	13c0c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13d10:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13d12:	bd10      	pop	{r4, pc}
   13d14:	20002fc8 	.word	0x20002fc8

00013d18 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   13d18:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13d1a:	4a09      	ldr	r2, [pc, #36]	; (13d40 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13d1c:	2300      	movs	r3, #0
   13d1e:	7812      	ldrb	r2, [r2, #0]
   13d20:	f7ff ff74 	bl	13c0c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13d24:	f110 0f16 	cmn.w	r0, #22
   13d28:	d003      	beq.n	13d32 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   13d2a:	4b06      	ldr	r3, [pc, #24]	; (13d44 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   13d2c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13d2e:	2807      	cmp	r0, #7
   13d30:	dd00      	ble.n	13d34 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13d32:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   13d34:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   13d38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   13d3c:	3001      	adds	r0, #1
   13d3e:	e7f6      	b.n	13d2e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13d40:	20002fc8 	.word	0x20002fc8
   13d44:	e000ed00 	.word	0xe000ed00

00013d48 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13d48:	4914      	ldr	r1, [pc, #80]	; (13d9c <z_arm_mpu_init+0x54>)
   13d4a:	6808      	ldr	r0, [r1, #0]
   13d4c:	2808      	cmp	r0, #8
{
   13d4e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13d50:	d821      	bhi.n	13d96 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13d52:	f7ff ffcd 	bl	13cf0 <arm_core_mpu_disable>
   13d56:	4c12      	ldr	r4, [pc, #72]	; (13da0 <z_arm_mpu_init+0x58>)
   13d58:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13d5a:	2200      	movs	r2, #0
   13d5c:	4290      	cmp	r0, r2
   13d5e:	f101 010c 	add.w	r1, r1, #12
   13d62:	d105      	bne.n	13d70 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13d64:	4b0f      	ldr	r3, [pc, #60]	; (13da4 <z_arm_mpu_init+0x5c>)
   13d66:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   13d68:	f7ff ffb6 	bl	13cd8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13d6c:	2000      	movs	r0, #0
}
   13d6e:	bd10      	pop	{r4, pc}
   13d70:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13d74:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   13d78:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13d7c:	4313      	orrs	r3, r2
   13d7e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13d82:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13d8a:	f043 0301 	orr.w	r3, r3, #1
   13d8e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13d92:	3201      	adds	r2, #1
   13d94:	e7e2      	b.n	13d5c <z_arm_mpu_init+0x14>
		return -1;
   13d96:	f04f 30ff 	mov.w	r0, #4294967295
   13d9a:	e7e8      	b.n	13d6e <z_arm_mpu_init+0x26>
   13d9c:	00022070 	.word	0x00022070
   13da0:	e000ed00 	.word	0xe000ed00
   13da4:	20002fc8 	.word	0x20002fc8

00013da8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   13da8:	4b01      	ldr	r3, [pc, #4]	; (13db0 <__stdout_hook_install+0x8>)
   13daa:	6018      	str	r0, [r3, #0]
}
   13dac:	4770      	bx	lr
   13dae:	bf00      	nop
   13db0:	20000524 	.word	0x20000524

00013db4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13db4:	f04f 0340 	mov.w	r3, #64	; 0x40
   13db8:	f3ef 8211 	mrs	r2, BASEPRI
   13dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   13dc0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13dc4:	4906      	ldr	r1, [pc, #24]	; (13de0 <nordicsemi_nrf52_init+0x2c>)
   13dc6:	2301      	movs	r3, #1
   13dc8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13dcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13dd0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   13dd4:	f382 8811 	msr	BASEPRI, r2
   13dd8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13ddc:	2000      	movs	r0, #0
   13dde:	4770      	bx	lr
   13de0:	4001e000 	.word	0x4001e000

00013de4 <sys_arch_reboot>:
    *p_gpregret = val;
   13de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13de8:	b2c0      	uxtb	r0, r0
   13dea:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13dee:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13df2:	4905      	ldr	r1, [pc, #20]	; (13e08 <sys_arch_reboot+0x24>)
   13df4:	4b05      	ldr	r3, [pc, #20]	; (13e0c <sys_arch_reboot+0x28>)
   13df6:	68ca      	ldr	r2, [r1, #12]
   13df8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13dfc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13dfe:	60cb      	str	r3, [r1, #12]
   13e00:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13e04:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13e06:	e7fd      	b.n	13e04 <sys_arch_reboot+0x20>
   13e08:	e000ed00 	.word	0xe000ed00
   13e0c:	05fa0004 	.word	0x05fa0004

00013e10 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13e10:	b120      	cbz	r0, 13e1c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13e12:	4b03      	ldr	r3, [pc, #12]	; (13e20 <arch_busy_wait+0x10>)
   13e14:	0180      	lsls	r0, r0, #6
   13e16:	f043 0301 	orr.w	r3, r3, #1
   13e1a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13e1c:	4770      	bx	lr
   13e1e:	bf00      	nop
   13e20:	00021f70 	.word	0x00021f70

00013e24 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13e24:	4b0e      	ldr	r3, [pc, #56]	; (13e60 <bt_hex+0x3c>)
   13e26:	2940      	cmp	r1, #64	; 0x40
{
   13e28:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   13e2a:	bf28      	it	cs
   13e2c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   13e2e:	4c0d      	ldr	r4, [pc, #52]	; (13e64 <bt_hex+0x40>)
   13e30:	1846      	adds	r6, r0, r1
   13e32:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   13e34:	42b0      	cmp	r0, r6
   13e36:	f103 0302 	add.w	r3, r3, #2
   13e3a:	d104      	bne.n	13e46 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   13e3c:	2300      	movs	r3, #0
   13e3e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   13e42:	4807      	ldr	r0, [pc, #28]	; (13e60 <bt_hex+0x3c>)
   13e44:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   13e46:	7802      	ldrb	r2, [r0, #0]
   13e48:	0912      	lsrs	r2, r2, #4
   13e4a:	5ca2      	ldrb	r2, [r4, r2]
   13e4c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13e50:	f810 2b01 	ldrb.w	r2, [r0], #1
   13e54:	f002 020f 	and.w	r2, r2, #15
   13e58:	5ca2      	ldrb	r2, [r4, r2]
   13e5a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   13e5e:	e7e9      	b.n	13e34 <bt_hex+0x10>
   13e60:	20002fe7 	.word	0x20002fe7
   13e64:	00022ec5 	.word	0x00022ec5

00013e68 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   13e68:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   13e6a:	7803      	ldrb	r3, [r0, #0]
   13e6c:	b08b      	sub	sp, #44	; 0x2c
   13e6e:	4604      	mov	r4, r0
   13e70:	ad07      	add	r5, sp, #28
   13e72:	2b03      	cmp	r3, #3
   13e74:	d821      	bhi.n	13eba <bt_addr_le_str+0x52>
   13e76:	e8df f003 	tbb	[pc, r3]
   13e7a:	1a02      	.short	0x1a02
   13e7c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   13e7e:	4912      	ldr	r1, [pc, #72]	; (13ec8 <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   13e80:	4628      	mov	r0, r5
   13e82:	f00b f940 	bl	1f106 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13e86:	9505      	str	r5, [sp, #20]
   13e88:	7863      	ldrb	r3, [r4, #1]
   13e8a:	9304      	str	r3, [sp, #16]
   13e8c:	78a3      	ldrb	r3, [r4, #2]
   13e8e:	9303      	str	r3, [sp, #12]
   13e90:	78e3      	ldrb	r3, [r4, #3]
   13e92:	9302      	str	r3, [sp, #8]
   13e94:	7923      	ldrb	r3, [r4, #4]
   13e96:	9301      	str	r3, [sp, #4]
   13e98:	7963      	ldrb	r3, [r4, #5]
   13e9a:	9300      	str	r3, [sp, #0]
   13e9c:	79a3      	ldrb	r3, [r4, #6]
   13e9e:	4a0b      	ldr	r2, [pc, #44]	; (13ecc <bt_addr_le_str+0x64>)
   13ea0:	480b      	ldr	r0, [pc, #44]	; (13ed0 <bt_addr_le_str+0x68>)
   13ea2:	211e      	movs	r1, #30
   13ea4:	f00a f8eb 	bl	1e07e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13ea8:	4809      	ldr	r0, [pc, #36]	; (13ed0 <bt_addr_le_str+0x68>)
   13eaa:	b00b      	add	sp, #44	; 0x2c
   13eac:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   13eae:	4909      	ldr	r1, [pc, #36]	; (13ed4 <bt_addr_le_str+0x6c>)
   13eb0:	e7e6      	b.n	13e80 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   13eb2:	4909      	ldr	r1, [pc, #36]	; (13ed8 <bt_addr_le_str+0x70>)
   13eb4:	e7e4      	b.n	13e80 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   13eb6:	4909      	ldr	r1, [pc, #36]	; (13edc <bt_addr_le_str+0x74>)
   13eb8:	e7e2      	b.n	13e80 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13eba:	4a09      	ldr	r2, [pc, #36]	; (13ee0 <bt_addr_le_str+0x78>)
   13ebc:	210a      	movs	r1, #10
   13ebe:	4628      	mov	r0, r5
   13ec0:	f00a f8dd 	bl	1e07e <snprintk>
		break;
   13ec4:	e7df      	b.n	13e86 <bt_addr_le_str+0x1e>
   13ec6:	bf00      	nop
   13ec8:	00022e87 	.word	0x00022e87
   13ecc:	00022ea2 	.word	0x00022ea2
   13ed0:	20002fc9 	.word	0x20002fc9
   13ed4:	0002264a 	.word	0x0002264a
   13ed8:	00022e8e 	.word	0x00022e8e
   13edc:	00022e98 	.word	0x00022e98
   13ee0:	00023b24 	.word	0x00023b24

00013ee4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   13ee4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   13ee6:	4d0a      	ldr	r5, [pc, #40]	; (13f10 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13ee8:	4b0a      	ldr	r3, [pc, #40]	; (13f14 <long_wq_init+0x30>)
{
   13eea:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13eec:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   13eee:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13ef0:	9302      	str	r3, [sp, #8]
   13ef2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   13ef4:	f00d faa5 	bl	21442 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   13ef8:	ab02      	add	r3, sp, #8
   13efa:	9300      	str	r3, [sp, #0]
   13efc:	4628      	mov	r0, r5
   13efe:	4906      	ldr	r1, [pc, #24]	; (13f18 <long_wq_init+0x34>)
   13f00:	230a      	movs	r3, #10
   13f02:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   13f06:	f008 fe0f 	bl	1cb28 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   13f0a:	4620      	mov	r0, r4
   13f0c:	b005      	add	sp, #20
   13f0e:	bd30      	pop	{r4, r5, pc}
   13f10:	20001ac0 	.word	0x20001ac0
   13f14:	00022ed6 	.word	0x00022ed6
   13f18:	20003900 	.word	0x20003900

00013f1c <bt_long_wq_schedule>:
{
   13f1c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   13f1e:	4801      	ldr	r0, [pc, #4]	; (13f24 <bt_long_wq_schedule+0x8>)
   13f20:	f008 be3a 	b.w	1cb98 <k_work_schedule_for_queue>
   13f24:	20001ac0 	.word	0x20001ac0

00013f28 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13f28:	b430      	push	{r4, r5}
   13f2a:	4603      	mov	r3, r0
   13f2c:	4608      	mov	r0, r1
	switch (src->type) {
   13f2e:	781a      	ldrb	r2, [r3, #0]
   13f30:	2a01      	cmp	r2, #1
   13f32:	d013      	beq.n	13f5c <uuid_to_uuid128+0x34>
   13f34:	2a02      	cmp	r2, #2
   13f36:	d026      	beq.n	13f86 <uuid_to_uuid128+0x5e>
   13f38:	b972      	cbnz	r2, 13f58 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13f3a:	4a15      	ldr	r2, [pc, #84]	; (13f90 <uuid_to_uuid128+0x68>)
   13f3c:	f102 0410 	add.w	r4, r2, #16
   13f40:	f852 5b04 	ldr.w	r5, [r2], #4
   13f44:	f841 5b04 	str.w	r5, [r1], #4
   13f48:	42a2      	cmp	r2, r4
   13f4a:	d1f9      	bne.n	13f40 <uuid_to_uuid128+0x18>
   13f4c:	7812      	ldrb	r2, [r2, #0]
   13f4e:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13f50:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13f52:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13f54:	0a1b      	lsrs	r3, r3, #8
   13f56:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13f58:	bc30      	pop	{r4, r5}
   13f5a:	4770      	bx	lr
		*dst = uuid128_base;
   13f5c:	4a0c      	ldr	r2, [pc, #48]	; (13f90 <uuid_to_uuid128+0x68>)
   13f5e:	f102 0410 	add.w	r4, r2, #16
   13f62:	f852 5b04 	ldr.w	r5, [r2], #4
   13f66:	f841 5b04 	str.w	r5, [r1], #4
   13f6a:	42a2      	cmp	r2, r4
   13f6c:	d1f9      	bne.n	13f62 <uuid_to_uuid128+0x3a>
   13f6e:	7812      	ldrb	r2, [r2, #0]
   13f70:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13f72:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   13f74:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13f76:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13f7a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13f7c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   13f7e:	0a1b      	lsrs	r3, r3, #8
   13f80:	7382      	strb	r2, [r0, #14]
   13f82:	7403      	strb	r3, [r0, #16]
}
   13f84:	e7e8      	b.n	13f58 <uuid_to_uuid128+0x30>
}
   13f86:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   13f88:	2211      	movs	r2, #17
   13f8a:	4619      	mov	r1, r3
   13f8c:	f00b b905 	b.w	1f19a <memcpy>
   13f90:	00022edf 	.word	0x00022edf

00013f94 <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   13f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13f98:	4604      	mov	r4, r0
   13f9a:	460e      	mov	r6, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   13f9c:	f00b f8d1 	bl	1f142 <strlen>
   13fa0:	2811      	cmp	r0, #17
   13fa2:	d004      	beq.n	13fae <bt_addr_from_str+0x1a>
		return -EINVAL;
   13fa4:	f06f 0015 	mvn.w	r0, #21

		addr->val[i] |= tmp;
	}

	return 0;
}
   13fa8:	b002      	add	sp, #8
   13faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fae:	f8df 804c 	ldr.w	r8, [pc, #76]	; 13ffc <bt_addr_from_str+0x68>
   13fb2:	1e67      	subs	r7, r4, #1
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   13fb4:	2505      	movs	r5, #5
   13fb6:	f1c4 0402 	rsb	r4, r4, #2
   13fba:	19e3      	adds	r3, r4, r7
   13fbc:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   13fc0:	2800      	cmp	r0, #0
   13fc2:	d0f1      	beq.n	13fa8 <bt_addr_from_str+0x14>
		if (!(j % 3) && (*str != ':')) {
   13fc4:	fb08 f303 	mul.w	r3, r8, r3
   13fc8:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
   13fcc:	d803      	bhi.n	13fd6 <bt_addr_from_str+0x42>
   13fce:	283a      	cmp	r0, #58	; 0x3a
   13fd0:	d1e8      	bne.n	13fa4 <bt_addr_from_str+0x10>
			i--;
   13fd2:	3d01      	subs	r5, #1
			continue;
   13fd4:	e7f1      	b.n	13fba <bt_addr_from_str+0x26>
		} else if (*str == ':') {
   13fd6:	283a      	cmp	r0, #58	; 0x3a
   13fd8:	d0fb      	beq.n	13fd2 <bt_addr_from_str+0x3e>
		addr->val[i] = addr->val[i] << 4;
   13fda:	5d73      	ldrb	r3, [r6, r5]
   13fdc:	011b      	lsls	r3, r3, #4
   13fde:	5573      	strb	r3, [r6, r5]
		if (char2hex(*str, &tmp) < 0) {
   13fe0:	f10d 0107 	add.w	r1, sp, #7
   13fe4:	7838      	ldrb	r0, [r7, #0]
   13fe6:	f00a f80e 	bl	1e006 <char2hex>
   13fea:	2800      	cmp	r0, #0
   13fec:	dbda      	blt.n	13fa4 <bt_addr_from_str+0x10>
		addr->val[i] |= tmp;
   13fee:	5d73      	ldrb	r3, [r6, r5]
   13ff0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13ff4:	4313      	orrs	r3, r2
   13ff6:	5573      	strb	r3, [r6, r5]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   13ff8:	e7df      	b.n	13fba <bt_addr_from_str+0x26>
   13ffa:	bf00      	nop
   13ffc:	aaaaaaab 	.word	0xaaaaaaab

00014000 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   14000:	b538      	push	{r3, r4, r5, lr}
   14002:	460c      	mov	r4, r1
	int err;

	err = bt_addr_from_str(str, &addr->a);
   14004:	1c51      	adds	r1, r2, #1
{
   14006:	4615      	mov	r5, r2
	err = bt_addr_from_str(str, &addr->a);
   14008:	f7ff ffc4 	bl	13f94 <bt_addr_from_str>
	if (err < 0) {
   1400c:	2800      	cmp	r0, #0
   1400e:	db07      	blt.n	14020 <bt_addr_le_from_str+0x20>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   14010:	491c      	ldr	r1, [pc, #112]	; (14084 <bt_addr_le_from_str+0x84>)
   14012:	4620      	mov	r0, r4
   14014:	f00b f8a5 	bl	1f162 <strcmp>
   14018:	b918      	cbnz	r0, 14022 <bt_addr_le_from_str+0x22>
		addr->type = BT_ADDR_LE_PUBLIC;
   1401a:	2300      	movs	r3, #0
   1401c:	702b      	strb	r3, [r5, #0]
		addr->type = BT_ADDR_LE_RANDOM_ID;
	} else {
		return -EINVAL;
	}

	return 0;
   1401e:	2000      	movs	r0, #0
}
   14020:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   14022:	4919      	ldr	r1, [pc, #100]	; (14088 <bt_addr_le_from_str+0x88>)
   14024:	4620      	mov	r0, r4
   14026:	f00b f89c 	bl	1f162 <strcmp>
   1402a:	2800      	cmp	r0, #0
   1402c:	d0f5      	beq.n	1401a <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   1402e:	4917      	ldr	r1, [pc, #92]	; (1408c <bt_addr_le_from_str+0x8c>)
   14030:	4620      	mov	r0, r4
   14032:	f00b f896 	bl	1f162 <strcmp>
   14036:	b908      	cbnz	r0, 1403c <bt_addr_le_from_str+0x3c>
		addr->type = BT_ADDR_LE_RANDOM;
   14038:	2301      	movs	r3, #1
   1403a:	e7ef      	b.n	1401c <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   1403c:	4914      	ldr	r1, [pc, #80]	; (14090 <bt_addr_le_from_str+0x90>)
   1403e:	4620      	mov	r0, r4
   14040:	f00b f88f 	bl	1f162 <strcmp>
   14044:	2800      	cmp	r0, #0
   14046:	d0f7      	beq.n	14038 <bt_addr_le_from_str+0x38>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   14048:	4912      	ldr	r1, [pc, #72]	; (14094 <bt_addr_le_from_str+0x94>)
   1404a:	4620      	mov	r0, r4
   1404c:	f00b f889 	bl	1f162 <strcmp>
   14050:	b908      	cbnz	r0, 14056 <bt_addr_le_from_str+0x56>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   14052:	2302      	movs	r3, #2
   14054:	e7e2      	b.n	1401c <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   14056:	4910      	ldr	r1, [pc, #64]	; (14098 <bt_addr_le_from_str+0x98>)
   14058:	4620      	mov	r0, r4
   1405a:	f00b f882 	bl	1f162 <strcmp>
   1405e:	2800      	cmp	r0, #0
   14060:	d0f7      	beq.n	14052 <bt_addr_le_from_str+0x52>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   14062:	490e      	ldr	r1, [pc, #56]	; (1409c <bt_addr_le_from_str+0x9c>)
   14064:	4620      	mov	r0, r4
   14066:	f00b f87c 	bl	1f162 <strcmp>
   1406a:	b908      	cbnz	r0, 14070 <bt_addr_le_from_str+0x70>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   1406c:	2303      	movs	r3, #3
   1406e:	e7d5      	b.n	1401c <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   14070:	490b      	ldr	r1, [pc, #44]	; (140a0 <bt_addr_le_from_str+0xa0>)
   14072:	4620      	mov	r0, r4
   14074:	f00b f875 	bl	1f162 <strcmp>
   14078:	2800      	cmp	r0, #0
   1407a:	d0f7      	beq.n	1406c <bt_addr_le_from_str+0x6c>
		return -EINVAL;
   1407c:	f06f 0015 	mvn.w	r0, #21
   14080:	e7ce      	b.n	14020 <bt_addr_le_from_str+0x20>
   14082:	bf00      	nop
   14084:	00022e87 	.word	0x00022e87
   14088:	00022ef0 	.word	0x00022ef0
   1408c:	0002264a 	.word	0x0002264a
   14090:	00022ef9 	.word	0x00022ef9
   14094:	00022e8e 	.word	0x00022e8e
   14098:	00022f02 	.word	0x00022f02
   1409c:	00022e98 	.word	0x00022e98
   140a0:	00022f0e 	.word	0x00022f0e

000140a4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   140a4:	b538      	push	{r3, r4, r5, lr}
   140a6:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   140a8:	4805      	ldr	r0, [pc, #20]	; (140c0 <bt_buf_get_rx+0x1c>)
   140aa:	f00c fbe1 	bl	20870 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   140ae:	4604      	mov	r4, r0
   140b0:	b120      	cbz	r0, 140bc <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   140b2:	2100      	movs	r1, #0
   140b4:	300c      	adds	r0, #12
   140b6:	f00c fbe2 	bl	2087e <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   140ba:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   140bc:	4620      	mov	r0, r4
   140be:	bd38      	pop	{r3, r4, r5, pc}
   140c0:	2000093c 	.word	0x2000093c

000140c4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   140c4:	b510      	push	{r4, lr}
   140c6:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   140c8:	490a      	ldr	r1, [pc, #40]	; (140f4 <bt_buf_get_cmd_complete+0x30>)
{
   140ca:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   140cc:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
   140d0:	b920      	cbnz	r0, 140dc <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   140d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   140d6:	2001      	movs	r0, #1
   140d8:	f7ff bfe4 	b.w	140a4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   140dc:	f00c fc02 	bl	208e4 <net_buf_ref>
   140e0:	2301      	movs	r3, #1
		buf->len = 0U;
   140e2:	2100      	movs	r1, #0
   140e4:	7603      	strb	r3, [r0, #24]
   140e6:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   140e8:	4604      	mov	r4, r0
   140ea:	300c      	adds	r0, #12
   140ec:	f00c fbc7 	bl	2087e <net_buf_simple_reserve>
}
   140f0:	4620      	mov	r0, r4
   140f2:	bd10      	pop	{r4, pc}
   140f4:	20000388 	.word	0x20000388

000140f8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   140f8:	b570      	push	{r4, r5, r6, lr}
   140fa:	4604      	mov	r4, r0
	switch (evt) {
   140fc:	2c0f      	cmp	r4, #15
{
   140fe:	460d      	mov	r5, r1
   14100:	4610      	mov	r0, r2
   14102:	4619      	mov	r1, r3
	switch (evt) {
   14104:	d805      	bhi.n	14112 <bt_buf_get_evt+0x1a>
   14106:	2c0d      	cmp	r4, #13
   14108:	d90d      	bls.n	14126 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1410a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1410e:	f7ff bfd9 	b.w	140c4 <bt_buf_get_cmd_complete>
	switch (evt) {
   14112:	2c13      	cmp	r4, #19
   14114:	d107      	bne.n	14126 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   14116:	480c      	ldr	r0, [pc, #48]	; (14148 <bt_buf_get_evt+0x50>)
   14118:	f00c fbaa 	bl	20870 <net_buf_alloc_fixed>
			if (buf) {
   1411c:	4604      	mov	r4, r0
   1411e:	b938      	cbnz	r0, 14130 <bt_buf_get_evt+0x38>
{
   14120:	2400      	movs	r4, #0
}
   14122:	4620      	mov	r0, r4
   14124:	bd70      	pop	{r4, r5, r6, pc}
   14126:	4602      	mov	r2, r0
   14128:	460b      	mov	r3, r1
		if (discardable) {
   1412a:	b145      	cbz	r5, 1413e <bt_buf_get_evt+0x46>
   1412c:	4807      	ldr	r0, [pc, #28]	; (1414c <bt_buf_get_evt+0x54>)
   1412e:	e7f3      	b.n	14118 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   14130:	2100      	movs	r1, #0
   14132:	300c      	adds	r0, #12
   14134:	f00c fba3 	bl	2087e <net_buf_simple_reserve>
   14138:	2301      	movs	r3, #1
   1413a:	7623      	strb	r3, [r4, #24]
}
   1413c:	e7f1      	b.n	14122 <bt_buf_get_evt+0x2a>
}
   1413e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14142:	2001      	movs	r0, #1
   14144:	f7ff bfae 	b.w	140a4 <bt_buf_get_rx>
   14148:	20000968 	.word	0x20000968
   1414c:	200008b8 	.word	0x200008b8

00014150 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   14150:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14152:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14154:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   14158:	781b      	ldrb	r3, [r3, #0]
   1415a:	b963      	cbnz	r3, 14176 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   1415c:	4620      	mov	r0, r4
   1415e:	f002 fba3 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   14162:	4605      	mov	r5, r0
   14164:	b940      	cbnz	r0, 14178 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   14166:	4b08      	ldr	r3, [pc, #32]	; (14188 <hci_disconn_complete_prio+0x38>)
   14168:	881a      	ldrh	r2, [r3, #0]
   1416a:	b922      	cbnz	r2, 14176 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1416c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   14170:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   14174:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   14176:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14178:	2101      	movs	r1, #1
   1417a:	f002 fb9d 	bl	168b8 <bt_conn_set_state>
	bt_conn_unref(conn);
   1417e:	4628      	mov	r0, r5
}
   14180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14184:	f00b bacf 	b.w	1f726 <bt_conn_unref>
   14188:	20002fa4 	.word	0x20002fa4

0001418c <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1418c:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1418e:	4c08      	ldr	r4, [pc, #32]	; (141b0 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14190:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14192:	2205      	movs	r2, #5
   14194:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   14198:	f002 fd90 	bl	16cbc <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
   1419c:	b938      	cbnz	r0, 141ae <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1419e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   141a2:	4904      	ldr	r1, [pc, #16]	; (141b4 <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
   141a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   141a8:	2204      	movs	r2, #4
   141aa:	f002 bd87 	b.w	16cbc <bt_conn_lookup_state_le>
}
   141ae:	bd10      	pop	{r4, pc}
   141b0:	20000388 	.word	0x20000388
   141b4:	00022e6d 	.word	0x00022e6d

000141b8 <hci_data_buf_overflow>:
{
   141b8:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   141ba:	68c3      	ldr	r3, [r0, #12]
{
   141bc:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   141be:	b088      	sub	sp, #32
   141c0:	781b      	ldrb	r3, [r3, #0]
   141c2:	466a      	mov	r2, sp
   141c4:	4906      	ldr	r1, [pc, #24]	; (141e0 <hci_data_buf_overflow+0x28>)
   141c6:	4807      	ldr	r0, [pc, #28]	; (141e4 <hci_data_buf_overflow+0x2c>)
   141c8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   141cc:	2303      	movs	r3, #3
   141ce:	f842 3f10 	str.w	r3, [r2, #16]!
   141d2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   141d6:	f00b f885 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
}
   141da:	46bd      	mov	sp, r7
   141dc:	bd80      	pop	{r7, pc}
   141de:	bf00      	nop
   141e0:	00022f1a 	.word	0x00022f1a
   141e4:	00021e64 	.word	0x00021e64

000141e8 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   141e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		LOG_ERR("Unable to allocate buffer");
   141ea:	4b06      	ldr	r3, [pc, #24]	; (14204 <le_conn_param_neg_reply.part.0+0x1c>)
   141ec:	9305      	str	r3, [sp, #20]
   141ee:	4806      	ldr	r0, [pc, #24]	; (14208 <le_conn_param_neg_reply.part.0+0x20>)
   141f0:	2302      	movs	r3, #2
   141f2:	aa04      	add	r2, sp, #16
   141f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   141f8:	9304      	str	r3, [sp, #16]
   141fa:	f00b f873 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
   141fe:	b007      	add	sp, #28
   14200:	f85d fb04 	ldr.w	pc, [sp], #4
   14204:	00022f42 	.word	0x00022f42
   14208:	00021e64 	.word	0x00021e64

0001420c <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   1420c:	b598      	push	{r3, r4, r7, lr}
   1420e:	4601      	mov	r1, r0
   14210:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   14212:	480d      	ldr	r0, [pc, #52]	; (14248 <rx_queue_put+0x3c>)
   14214:	f00c fb37 	bl	20886 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   14218:	490c      	ldr	r1, [pc, #48]	; (1424c <rx_queue_put+0x40>)
   1421a:	480d      	ldr	r0, [pc, #52]	; (14250 <rx_queue_put+0x44>)
   1421c:	f00d f900 	bl	21420 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   14220:	2800      	cmp	r0, #0
   14222:	da0e      	bge.n	14242 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   14224:	466c      	mov	r4, sp
   14226:	b088      	sub	sp, #32
   14228:	466a      	mov	r2, sp
   1422a:	4b0a      	ldr	r3, [pc, #40]	; (14254 <rx_queue_put+0x48>)
   1422c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14230:	2303      	movs	r3, #3
   14232:	f842 3f10 	str.w	r3, [r2, #16]!
   14236:	4808      	ldr	r0, [pc, #32]	; (14258 <rx_queue_put+0x4c>)
   14238:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1423c:	f00b f852 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14240:	46a5      	mov	sp, r4
	}
}
   14242:	46bd      	mov	sp, r7
   14244:	bd98      	pop	{r3, r4, r7, pc}
   14246:	bf00      	nop
   14248:	200004bc 	.word	0x200004bc
   1424c:	20000564 	.word	0x20000564
   14250:	20001c70 	.word	0x20001c70
   14254:	00022f5c 	.word	0x00022f5c
   14258:	00021e64 	.word	0x00021e64

0001425c <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1425c:	b5b0      	push	{r4, r5, r7, lr}
   1425e:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   14260:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   14262:	af00      	add	r7, sp, #0
   14264:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   14266:	4629      	mov	r1, r5
   14268:	68d8      	ldr	r0, [r3, #12]
   1426a:	f7ff fddb 	bl	13e24 <bt_hex>
   1426e:	b08a      	sub	sp, #40	; 0x28
   14270:	466a      	mov	r2, sp
   14272:	4b09      	ldr	r3, [pc, #36]	; (14298 <handle_event.part.0+0x3c>)
   14274:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14278:	f240 4302 	movw	r3, #1026	; 0x402
   1427c:	8493      	strh	r3, [r2, #36]	; 0x24
   1427e:	4b07      	ldr	r3, [pc, #28]	; (1429c <handle_event.part.0+0x40>)
   14280:	e9c2 5007 	strd	r5, r0, [r2, #28]
   14284:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   14288:	f842 3f10 	str.w	r3, [r2, #16]!
   1428c:	4804      	ldr	r0, [pc, #16]	; (142a0 <handle_event.part.0+0x44>)
   1428e:	f00b f829 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
}
   14292:	46bd      	mov	sp, r7
   14294:	bdb0      	pop	{r4, r5, r7, pc}
   14296:	bf00      	nop
   14298:	00022f79 	.word	0x00022f79
   1429c:	01000005 	.word	0x01000005
   142a0:	00021e64 	.word	0x00021e64

000142a4 <hci_hardware_error>:
{
   142a4:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   142a6:	2101      	movs	r1, #1
   142a8:	af00      	add	r7, sp, #0
   142aa:	300c      	adds	r0, #12
   142ac:	f00c fb67 	bl	2097e <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   142b0:	b088      	sub	sp, #32
   142b2:	7803      	ldrb	r3, [r0, #0]
   142b4:	466a      	mov	r2, sp
   142b6:	4906      	ldr	r1, [pc, #24]	; (142d0 <hci_hardware_error+0x2c>)
   142b8:	4806      	ldr	r0, [pc, #24]	; (142d4 <hci_hardware_error+0x30>)
   142ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
   142be:	2303      	movs	r3, #3
   142c0:	f842 3f10 	str.w	r3, [r2, #16]!
   142c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   142c8:	f00b f80c 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
}
   142cc:	46bd      	mov	sp, r7
   142ce:	bd80      	pop	{r7, pc}
   142d0:	00022f9b 	.word	0x00022f9b
   142d4:	00021e64 	.word	0x00021e64

000142d8 <le_data_len_change>:
{
   142d8:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   142da:	68c3      	ldr	r3, [r0, #12]
   142dc:	881c      	ldrh	r4, [r3, #0]
{
   142de:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   142e0:	4620      	mov	r0, r4
   142e2:	f002 fae1 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   142e6:	b980      	cbnz	r0, 1430a <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   142e8:	466d      	mov	r5, sp
   142ea:	b088      	sub	sp, #32
   142ec:	466a      	mov	r2, sp
   142ee:	4b08      	ldr	r3, [pc, #32]	; (14310 <le_data_len_change+0x38>)
   142f0:	4808      	ldr	r0, [pc, #32]	; (14314 <le_data_len_change+0x3c>)
   142f2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   142f6:	2303      	movs	r3, #3
   142f8:	f842 3f10 	str.w	r3, [r2, #16]!
   142fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14300:	f00a fff0 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14304:	46ad      	mov	sp, r5
}
   14306:	46bd      	mov	sp, r7
   14308:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1430a:	f00b fa0c 	bl	1f726 <bt_conn_unref>
   1430e:	e7fa      	b.n	14306 <le_data_len_change+0x2e>
   14310:	00022fbd 	.word	0x00022fbd
   14314:	00021e64 	.word	0x00021e64

00014318 <le_phy_update_complete>:
{
   14318:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1431a:	68c3      	ldr	r3, [r0, #12]
   1431c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   14320:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   14322:	4620      	mov	r0, r4
   14324:	f002 fac0 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   14328:	b980      	cbnz	r0, 1434c <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1432a:	466d      	mov	r5, sp
   1432c:	b088      	sub	sp, #32
   1432e:	466a      	mov	r2, sp
   14330:	4b08      	ldr	r3, [pc, #32]	; (14354 <le_phy_update_complete+0x3c>)
   14332:	4809      	ldr	r0, [pc, #36]	; (14358 <le_phy_update_complete+0x40>)
   14334:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14338:	2303      	movs	r3, #3
   1433a:	f842 3f10 	str.w	r3, [r2, #16]!
   1433e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14342:	f00a ffcf 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14346:	46ad      	mov	sp, r5
}
   14348:	46bd      	mov	sp, r7
   1434a:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1434c:	f00b f9eb 	bl	1f726 <bt_conn_unref>
   14350:	e7fa      	b.n	14348 <le_phy_update_complete+0x30>
   14352:	bf00      	nop
   14354:	00022fbd 	.word	0x00022fbd
   14358:	00021e64 	.word	0x00021e64

0001435c <hci_disconn_complete>:
{
   1435c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14360:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   14362:	782e      	ldrb	r6, [r5, #0]
{
   14364:	af00      	add	r7, sp, #0
	if (evt->status) {
   14366:	b9ae      	cbnz	r6, 14394 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14368:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1436c:	4640      	mov	r0, r8
   1436e:	f002 fa9b 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   14372:	4604      	mov	r4, r0
   14374:	b988      	cbnz	r0, 1439a <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   14376:	466c      	mov	r4, sp
   14378:	b088      	sub	sp, #32
   1437a:	466a      	mov	r2, sp
   1437c:	4b0b      	ldr	r3, [pc, #44]	; (143ac <hci_disconn_complete+0x50>)
   1437e:	480c      	ldr	r0, [pc, #48]	; (143b0 <hci_disconn_complete+0x54>)
   14380:	e9c2 3805 	strd	r3, r8, [r2, #20]
   14384:	2303      	movs	r3, #3
   14386:	f842 3f10 	str.w	r3, [r2, #16]!
   1438a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1438e:	f00a ffa9 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14392:	46a5      	mov	sp, r4
}
   14394:	46bd      	mov	sp, r7
   14396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   1439a:	78eb      	ldrb	r3, [r5, #3]
   1439c:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1439e:	4631      	mov	r1, r6
   143a0:	f002 fa8a 	bl	168b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   143a4:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   143a6:	f00b f9be 	bl	1f726 <bt_conn_unref>
   143aa:	e7f3      	b.n	14394 <hci_disconn_complete+0x38>
   143ac:	00022fe1 	.word	0x00022fe1
   143b0:	00021e64 	.word	0x00021e64

000143b4 <handle_event>:
{
   143b4:	b5b0      	push	{r4, r5, r7, lr}
   143b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   143ba:	af00      	add	r7, sp, #0
   143bc:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   143be:	4293      	cmp	r3, r2
   143c0:	d103      	bne.n	143ca <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   143c2:	4620      	mov	r0, r4
   143c4:	f7ff ff4a 	bl	1425c <handle_event.part.0>
}
   143c8:	e018      	b.n	143fc <handle_event+0x48>
		if (handler->event != event) {
   143ca:	4610      	mov	r0, r2
   143cc:	f810 5b08 	ldrb.w	r5, [r0], #8
   143d0:	42a5      	cmp	r5, r4
   143d2:	d119      	bne.n	14408 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   143d4:	8a0b      	ldrh	r3, [r1, #16]
   143d6:	7850      	ldrb	r0, [r2, #1]
   143d8:	4298      	cmp	r0, r3
   143da:	d911      	bls.n	14400 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   143dc:	466d      	mov	r5, sp
   143de:	b088      	sub	sp, #32
   143e0:	466a      	mov	r2, sp
   143e2:	490a      	ldr	r1, [pc, #40]	; (1440c <handle_event+0x58>)
   143e4:	61d4      	str	r4, [r2, #28]
   143e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   143ea:	2304      	movs	r3, #4
   143ec:	f842 3f10 	str.w	r3, [r2, #16]!
   143f0:	4807      	ldr	r0, [pc, #28]	; (14410 <handle_event+0x5c>)
   143f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   143f6:	f00a ff75 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   143fa:	46ad      	mov	sp, r5
}
   143fc:	46bd      	mov	sp, r7
   143fe:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   14400:	6853      	ldr	r3, [r2, #4]
   14402:	4608      	mov	r0, r1
   14404:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   14406:	e7f9      	b.n	143fc <handle_event+0x48>
   14408:	4602      	mov	r2, r0
   1440a:	e7d8      	b.n	143be <handle_event+0xa>
   1440c:	00023007 	.word	0x00023007
   14410:	00021e64 	.word	0x00021e64

00014414 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   14414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   14416:	4855      	ldr	r0, [pc, #340]	; (1456c <rx_work_handler+0x158>)
{
   14418:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1441a:	f00c fa4a 	bl	208b2 <net_buf_slist_get>
	if (!buf) {
   1441e:	4604      	mov	r4, r0
   14420:	2800      	cmp	r0, #0
   14422:	d06a      	beq.n	144fa <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14424:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   14426:	2b01      	cmp	r3, #1
   14428:	d069      	beq.n	144fe <rx_work_handler+0xea>
   1442a:	2b03      	cmp	r3, #3
   1442c:	f040 8099 	bne.w	14562 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14430:	8a03      	ldrh	r3, [r0, #16]
   14432:	2b03      	cmp	r3, #3
   14434:	d80c      	bhi.n	14450 <rx_work_handler+0x3c>
   14436:	4a4e      	ldr	r2, [pc, #312]	; (14570 <rx_work_handler+0x15c>)
   14438:	494e      	ldr	r1, [pc, #312]	; (14574 <rx_work_handler+0x160>)
   1443a:	484f      	ldr	r0, [pc, #316]	; (14578 <rx_work_handler+0x164>)
   1443c:	f240 13ed 	movw	r3, #493	; 0x1ed
   14440:	f00a f96e 	bl	1e720 <assert_print>
   14444:	4040      	eors	r0, r0
   14446:	f380 8811 	msr	BASEPRI, r0
   1444a:	f04f 0003 	mov.w	r0, #3
   1444e:	df02      	svc	2
   14450:	2104      	movs	r1, #4
   14452:	f104 000c 	add.w	r0, r4, #12
   14456:	f00c fa92 	bl	2097e <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1445a:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   1445c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1445e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14460:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   14462:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   14466:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   14468:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1446a:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   1446c:	d010      	beq.n	14490 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1446e:	466d      	mov	r5, sp
   14470:	b088      	sub	sp, #32
   14472:	466a      	mov	r2, sp
   14474:	4841      	ldr	r0, [pc, #260]	; (1457c <rx_work_handler+0x168>)
   14476:	61d3      	str	r3, [r2, #28]
   14478:	2304      	movs	r3, #4
   1447a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1447e:	f842 3f10 	str.w	r3, [r2, #16]!
   14482:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14486:	483e      	ldr	r0, [pc, #248]	; (14580 <rx_work_handler+0x16c>)
   14488:	f00a ff2c 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   1448c:	46ad      	mov	sp, r5
   1448e:	e064      	b.n	1455a <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14490:	f002 fa0a 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   14494:	4605      	mov	r5, r0
   14496:	b960      	cbnz	r0, 144b2 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14498:	466d      	mov	r5, sp
   1449a:	b088      	sub	sp, #32
   1449c:	8b63      	ldrh	r3, [r4, #26]
   1449e:	466a      	mov	r2, sp
   144a0:	4938      	ldr	r1, [pc, #224]	; (14584 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   144a2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   144a6:	2303      	movs	r3, #3
   144a8:	f842 3f10 	str.w	r3, [r2, #16]!
   144ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   144b0:	e7e9      	b.n	14486 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   144b2:	f002 faf7 	bl	16aa4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   144b6:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   144b8:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   144ba:	4621      	mov	r1, r4
   144bc:	4628      	mov	r0, r5
   144be:	f002 f8ad 	bl	1661c <bt_conn_recv>
	bt_conn_unref(conn);
   144c2:	4628      	mov	r0, r5
   144c4:	f00b f92f 	bl	1f726 <bt_conn_unref>
	return list->head;
   144c8:	4b2f      	ldr	r3, [pc, #188]	; (14588 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   144ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   144ce:	b1a3      	cbz	r3, 144fa <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   144d0:	492e      	ldr	r1, [pc, #184]	; (1458c <rx_work_handler+0x178>)
   144d2:	482f      	ldr	r0, [pc, #188]	; (14590 <rx_work_handler+0x17c>)
   144d4:	f00c ffa4 	bl	21420 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   144d8:	2800      	cmp	r0, #0
   144da:	da0e      	bge.n	144fa <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   144dc:	466c      	mov	r4, sp
   144de:	b088      	sub	sp, #32
   144e0:	466a      	mov	r2, sp
   144e2:	4b2c      	ldr	r3, [pc, #176]	; (14594 <rx_work_handler+0x180>)
   144e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   144e8:	2303      	movs	r3, #3
   144ea:	f842 3f10 	str.w	r3, [r2, #16]!
   144ee:	4824      	ldr	r0, [pc, #144]	; (14580 <rx_work_handler+0x16c>)
   144f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   144f4:	f00a fef6 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   144f8:	46a5      	mov	sp, r4
		}
	}
}
   144fa:	46bd      	mov	sp, r7
   144fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   144fe:	8a03      	ldrh	r3, [r0, #16]
   14500:	2b01      	cmp	r3, #1
   14502:	d80c      	bhi.n	1451e <rx_work_handler+0x10a>
   14504:	4a1a      	ldr	r2, [pc, #104]	; (14570 <rx_work_handler+0x15c>)
   14506:	491b      	ldr	r1, [pc, #108]	; (14574 <rx_work_handler+0x160>)
   14508:	481b      	ldr	r0, [pc, #108]	; (14578 <rx_work_handler+0x164>)
   1450a:	f640 136d 	movw	r3, #2413	; 0x96d
   1450e:	f00a f907 	bl	1e720 <assert_print>
   14512:	4040      	eors	r0, r0
   14514:	f380 8811 	msr	BASEPRI, r0
   14518:	f04f 0003 	mov.w	r0, #3
   1451c:	df02      	svc	2
   1451e:	2102      	movs	r1, #2
   14520:	f104 000c 	add.w	r0, r4, #12
   14524:	f00c fa2b 	bl	2097e <net_buf_simple_pull_mem>
   14528:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1452a:	7800      	ldrb	r0, [r0, #0]
   1452c:	f00a feb5 	bl	1f29a <bt_hci_evt_get_flags>
   14530:	0783      	lsls	r3, r0, #30
   14532:	d40c      	bmi.n	1454e <rx_work_handler+0x13a>
   14534:	4a0e      	ldr	r2, [pc, #56]	; (14570 <rx_work_handler+0x15c>)
   14536:	4918      	ldr	r1, [pc, #96]	; (14598 <rx_work_handler+0x184>)
   14538:	480f      	ldr	r0, [pc, #60]	; (14578 <rx_work_handler+0x164>)
   1453a:	f640 1371 	movw	r3, #2417	; 0x971
   1453e:	f00a f8ef 	bl	1e720 <assert_print>
   14542:	4040      	eors	r0, r0
   14544:	f380 8811 	msr	BASEPRI, r0
   14548:	f04f 0003 	mov.w	r0, #3
   1454c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1454e:	4a13      	ldr	r2, [pc, #76]	; (1459c <rx_work_handler+0x188>)
   14550:	7828      	ldrb	r0, [r5, #0]
   14552:	2304      	movs	r3, #4
   14554:	4621      	mov	r1, r4
   14556:	f7ff ff2d 	bl	143b4 <handle_event>
		net_buf_unref(buf);
   1455a:	4620      	mov	r0, r4
   1455c:	f004 fe4a 	bl	191f4 <net_buf_unref>
		break;
   14560:	e7b2      	b.n	144c8 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14562:	466d      	mov	r5, sp
   14564:	b088      	sub	sp, #32
   14566:	466a      	mov	r2, sp
   14568:	490d      	ldr	r1, [pc, #52]	; (145a0 <rx_work_handler+0x18c>)
   1456a:	e79a      	b.n	144a2 <rx_work_handler+0x8e>
   1456c:	200004bc 	.word	0x200004bc
   14570:	00023029 	.word	0x00023029
   14574:	0002305d 	.word	0x0002305d
   14578:	00023076 	.word	0x00023076
   1457c:	00023093 	.word	0x00023093
   14580:	00021e64 	.word	0x00021e64
   14584:	000230b7 	.word	0x000230b7
   14588:	20000388 	.word	0x20000388
   1458c:	20000564 	.word	0x20000564
   14590:	20001c70 	.word	0x20001c70
   14594:	00022f5c 	.word	0x00022f5c
   14598:	000230d9 	.word	0x000230d9
   1459c:	000220e8 	.word	0x000220e8
   145a0:	00023107 	.word	0x00023107

000145a4 <hci_le_meta_event>:
{
   145a4:	b510      	push	{r4, lr}
   145a6:	2101      	movs	r1, #1
   145a8:	4604      	mov	r4, r0
   145aa:	300c      	adds	r0, #12
   145ac:	f00c f9e7 	bl	2097e <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   145b0:	4621      	mov	r1, r4
   145b2:	4a03      	ldr	r2, [pc, #12]	; (145c0 <hci_le_meta_event+0x1c>)
   145b4:	7800      	ldrb	r0, [r0, #0]
}
   145b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   145ba:	2307      	movs	r3, #7
   145bc:	f7ff befa 	b.w	143b4 <handle_event>
   145c0:	00022108 	.word	0x00022108

000145c4 <le_remote_feat_complete>:
{
   145c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   145c6:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   145c8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   145cc:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   145ce:	4630      	mov	r0, r6
   145d0:	f002 f96a 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   145d4:	4604      	mov	r4, r0
   145d6:	b980      	cbnz	r0, 145fa <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   145d8:	466c      	mov	r4, sp
   145da:	b088      	sub	sp, #32
   145dc:	466a      	mov	r2, sp
   145de:	4b0f      	ldr	r3, [pc, #60]	; (1461c <le_remote_feat_complete+0x58>)
   145e0:	480f      	ldr	r0, [pc, #60]	; (14620 <le_remote_feat_complete+0x5c>)
   145e2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   145e6:	2303      	movs	r3, #3
   145e8:	f842 3f10 	str.w	r3, [r2, #16]!
   145ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   145f0:	f00a fe78 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   145f4:	46a5      	mov	sp, r4
}
   145f6:	46bd      	mov	sp, r7
   145f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   145fa:	782b      	ldrb	r3, [r5, #0]
   145fc:	b923      	cbnz	r3, 14608 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   145fe:	2208      	movs	r2, #8
   14600:	1ce9      	adds	r1, r5, #3
   14602:	30ad      	adds	r0, #173	; 0xad
   14604:	f00a fdc9 	bl	1f19a <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1460c:	1d20      	adds	r0, r4, #4
   1460e:	f00a fe5a 	bl	1f2c6 <atomic_or>
	bt_conn_unref(conn);
   14612:	4620      	mov	r0, r4
   14614:	f00b f887 	bl	1f726 <bt_conn_unref>
   14618:	e7ed      	b.n	145f6 <le_remote_feat_complete+0x32>
   1461a:	bf00      	nop
   1461c:	00022fbd 	.word	0x00022fbd
   14620:	00021e64 	.word	0x00021e64

00014624 <hci_cmd_done>:
{
   14624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14628:	4606      	mov	r6, r0
   1462a:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1462c:	7a90      	ldrb	r0, [r2, #10]
   1462e:	4d43      	ldr	r5, [pc, #268]	; (1473c <hci_cmd_done+0x118>)
{
   14630:	4688      	mov	r8, r1
   14632:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14634:	f004 fd1c 	bl	19070 <net_buf_pool_get>
   14638:	4285      	cmp	r5, r0
   1463a:	d018      	beq.n	1466e <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1463c:	7aa4      	ldrb	r4, [r4, #10]
   1463e:	4620      	mov	r0, r4
   14640:	f004 fd16 	bl	19070 <net_buf_pool_get>
   14644:	46e8      	mov	r8, sp
   14646:	b08a      	sub	sp, #40	; 0x28
   14648:	466a      	mov	r2, sp
   1464a:	4b3d      	ldr	r3, [pc, #244]	; (14740 <hci_cmd_done+0x11c>)
   1464c:	6255      	str	r5, [r2, #36]	; 0x24
   1464e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14652:	2306      	movs	r3, #6
   14654:	e9c2 4007 	strd	r4, r0, [r2, #28]
   14658:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   1465c:	f842 3f10 	str.w	r3, [r2, #16]!
   14660:	4838      	ldr	r0, [pc, #224]	; (14744 <hci_cmd_done+0x120>)
   14662:	f00a fe3f 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14666:	46c5      	mov	sp, r8
}
   14668:	46bd      	mov	sp, r7
   1466a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1466e:	4620      	mov	r0, r4
   14670:	f004 fd06 	bl	19080 <net_buf_id>
   14674:	4d34      	ldr	r5, [pc, #208]	; (14748 <hci_cmd_done+0x124>)
   14676:	f04f 090c 	mov.w	r9, #12
   1467a:	fb09 5000 	mla	r0, r9, r0, r5
   1467e:	8843      	ldrh	r3, [r0, #2]
   14680:	42b3      	cmp	r3, r6
   14682:	d016      	beq.n	146b2 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   14684:	4620      	mov	r0, r4
   14686:	f004 fcfb 	bl	19080 <net_buf_id>
   1468a:	fb09 5000 	mla	r0, r9, r0, r5
   1468e:	466c      	mov	r4, sp
   14690:	b088      	sub	sp, #32
   14692:	8843      	ldrh	r3, [r0, #2]
   14694:	466a      	mov	r2, sp
   14696:	492d      	ldr	r1, [pc, #180]	; (1474c <hci_cmd_done+0x128>)
   14698:	61d3      	str	r3, [r2, #28]
   1469a:	2304      	movs	r3, #4
   1469c:	e9c2 1605 	strd	r1, r6, [r2, #20]
   146a0:	4828      	ldr	r0, [pc, #160]	; (14744 <hci_cmd_done+0x120>)
   146a2:	f842 3f10 	str.w	r3, [r2, #16]!
   146a6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   146aa:	f00a fe1b 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   146ae:	46a5      	mov	sp, r4
		return;
   146b0:	e7da      	b.n	14668 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   146b2:	4e27      	ldr	r6, [pc, #156]	; (14750 <hci_cmd_done+0x12c>)
   146b4:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   146b8:	b120      	cbz	r0, 146c4 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   146ba:	f004 fd9b 	bl	191f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   146be:	2300      	movs	r3, #0
   146c0:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   146c4:	4620      	mov	r0, r4
   146c6:	f004 fcdb 	bl	19080 <net_buf_id>
   146ca:	260c      	movs	r6, #12
   146cc:	fb06 5000 	mla	r0, r6, r0, r5
   146d0:	6843      	ldr	r3, [r0, #4]
   146d2:	b1ab      	cbz	r3, 14700 <hci_cmd_done+0xdc>
   146d4:	f1b8 0f00 	cmp.w	r8, #0
   146d8:	d112      	bne.n	14700 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   146da:	4620      	mov	r0, r4
   146dc:	f004 fcd0 	bl	19080 <net_buf_id>
   146e0:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   146e4:	2101      	movs	r1, #1
   146e6:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   146e8:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   146ec:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   146ee:	f003 061f 	and.w	r6, r3, #31
   146f2:	40b1      	lsls	r1, r6
	if (val) {
   146f4:	095b      	lsrs	r3, r3, #5
   146f6:	b1da      	cbz	r2, 14730 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   146f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   146fc:	f00a fde3 	bl	1f2c6 <atomic_or>
	if (cmd(buf)->sync) {
   14700:	4620      	mov	r0, r4
   14702:	f004 fcbd 	bl	19080 <net_buf_id>
   14706:	260c      	movs	r6, #12
   14708:	fb06 5000 	mla	r0, r6, r0, r5
   1470c:	6883      	ldr	r3, [r0, #8]
   1470e:	2b00      	cmp	r3, #0
   14710:	d0aa      	beq.n	14668 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   14712:	4620      	mov	r0, r4
   14714:	f004 fcb4 	bl	19080 <net_buf_id>
   14718:	4370      	muls	r0, r6
   1471a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1471e:	4620      	mov	r0, r4
   14720:	f004 fcae 	bl	19080 <net_buf_id>
   14724:	fb06 5500 	mla	r5, r6, r0, r5
   14728:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1472a:	f008 f917 	bl	1c95c <z_impl_k_sem_give>
}
   1472e:	e79b      	b.n	14668 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14730:	43c9      	mvns	r1, r1
   14732:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14736:	f00a fdd8 	bl	1f2ea <atomic_and.isra.0>
   1473a:	e7e1      	b.n	14700 <hci_cmd_done+0xdc>
   1473c:	20000910 	.word	0x20000910
   14740:	0002311b 	.word	0x0002311b
   14744:	00021e64 	.word	0x00021e64
   14748:	20002b6c 	.word	0x20002b6c
   1474c:	00023150 	.word	0x00023150
   14750:	20000388 	.word	0x20000388

00014754 <hci_cmd_status>:
{
   14754:	b538      	push	{r3, r4, r5, lr}
   14756:	2104      	movs	r1, #4
   14758:	4604      	mov	r4, r0
   1475a:	300c      	adds	r0, #12
   1475c:	f00c f90f 	bl	2097e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14760:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   14762:	7801      	ldrb	r1, [r0, #0]
   14764:	8840      	ldrh	r0, [r0, #2]
   14766:	4622      	mov	r2, r4
   14768:	f7ff ff5c 	bl	14624 <hci_cmd_done>
	if (ncmd) {
   1476c:	b125      	cbz	r5, 14778 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   1476e:	4803      	ldr	r0, [pc, #12]	; (1477c <hci_cmd_status+0x28>)
}
   14770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14774:	f008 b8f2 	b.w	1c95c <z_impl_k_sem_give>
   14778:	bd38      	pop	{r3, r4, r5, pc}
   1477a:	bf00      	nop
   1477c:	200004a0 	.word	0x200004a0

00014780 <hci_cmd_complete>:
{
   14780:	b538      	push	{r3, r4, r5, lr}
   14782:	2103      	movs	r1, #3
   14784:	4604      	mov	r4, r0
   14786:	300c      	adds	r0, #12
   14788:	f00c f8f9 	bl	2097e <net_buf_simple_pull_mem>
	status = buf->data[0];
   1478c:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   1478e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   14790:	7819      	ldrb	r1, [r3, #0]
   14792:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14796:	4622      	mov	r2, r4
   14798:	f7ff ff44 	bl	14624 <hci_cmd_done>
	if (ncmd) {
   1479c:	b125      	cbz	r5, 147a8 <hci_cmd_complete+0x28>
   1479e:	4803      	ldr	r0, [pc, #12]	; (147ac <hci_cmd_complete+0x2c>)
}
   147a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   147a4:	f008 b8da 	b.w	1c95c <z_impl_k_sem_give>
   147a8:	bd38      	pop	{r3, r4, r5, pc}
   147aa:	bf00      	nop
   147ac:	200004a0 	.word	0x200004a0

000147b0 <hci_num_completed_packets>:
{
   147b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147b4:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   147b6:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   147b8:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   147bc:	f8df a104 	ldr.w	sl, [pc, #260]	; 148c4 <hci_num_completed_packets+0x114>
{
   147c0:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   147c2:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   147c4:	f898 3000 	ldrb.w	r3, [r8]
   147c8:	429d      	cmp	r5, r3
   147ca:	db03      	blt.n	147d4 <hci_num_completed_packets+0x24>
}
   147cc:	371c      	adds	r7, #28
   147ce:	46bd      	mov	sp, r7
   147d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   147d4:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   147d8:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   147dc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   147e0:	4658      	mov	r0, fp
   147e2:	f002 f861 	bl	168a8 <bt_conn_lookup_handle>
		if (!conn) {
   147e6:	4604      	mov	r4, r0
   147e8:	b1d8      	cbz	r0, 14822 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   147ea:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   147ee:	2e00      	cmp	r6, #0
   147f0:	d039      	beq.n	14866 <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   147f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   147f6:	f3ef 8211 	mrs	r2, BASEPRI
   147fa:	f383 8812 	msr	BASEPRI_MAX, r3
   147fe:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14802:	69e3      	ldr	r3, [r4, #28]
   14804:	b1f3      	cbz	r3, 14844 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   14806:	3b01      	subs	r3, #1
   14808:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1480a:	f382 8811 	msr	BASEPRI, r2
   1480e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   14812:	4620      	mov	r0, r4
   14814:	f001 fecc 	bl	165b0 <bt_conn_get_pkts>
   14818:	3e01      	subs	r6, #1
   1481a:	f008 f89f 	bl	1c95c <z_impl_k_sem_give>
   1481e:	b2b6      	uxth	r6, r6
   14820:	e7e5      	b.n	147ee <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   14822:	466c      	mov	r4, sp
   14824:	b088      	sub	sp, #32
   14826:	466a      	mov	r2, sp
   14828:	4b24      	ldr	r3, [pc, #144]	; (148bc <hci_num_completed_packets+0x10c>)
   1482a:	4825      	ldr	r0, [pc, #148]	; (148c0 <hci_num_completed_packets+0x110>)
   1482c:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   14830:	2303      	movs	r3, #3
   14832:	f842 3f10 	str.w	r3, [r2, #16]!
   14836:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1483a:	f00a fd53 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   1483e:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   14840:	3501      	adds	r5, #1
   14842:	e7bf      	b.n	147c4 <hci_num_completed_packets+0x14>
   14844:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14846:	b993      	cbnz	r3, 1486e <hci_num_completed_packets+0xbe>
   14848:	f382 8811 	msr	BASEPRI, r2
   1484c:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   14850:	2302      	movs	r3, #2
   14852:	481b      	ldr	r0, [pc, #108]	; (148c0 <hci_num_completed_packets+0x110>)
   14854:	f8c7 a014 	str.w	sl, [r7, #20]
   14858:	613b      	str	r3, [r7, #16]
   1485a:	f107 0210 	add.w	r2, r7, #16
   1485e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14862:	f00a fd3f 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   14866:	4620      	mov	r0, r4
   14868:	f00a ff5d 	bl	1f726 <bt_conn_unref>
   1486c:	e7e8      	b.n	14840 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1486e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   14870:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   14872:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14874:	428b      	cmp	r3, r1
	list->tail = node;
   14876:	bf08      	it	eq
   14878:	61a0      	streq	r0, [r4, #24]
   1487a:	f382 8811 	msr	BASEPRI, r2
   1487e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14882:	f04f 0240 	mov.w	r2, #64	; 0x40
   14886:	f3ef 8111 	mrs	r1, BASEPRI
   1488a:	f382 8812 	msr	BASEPRI_MAX, r2
   1488e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14892:	68da      	ldr	r2, [r3, #12]
   14894:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   14896:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   1489a:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   1489e:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   148a0:	b94a      	cbnz	r2, 148b6 <hci_num_completed_packets+0x106>
	list->head = node;
   148a2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   148a6:	f381 8811 	msr	BASEPRI, r1
   148aa:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   148ae:	4658      	mov	r0, fp
   148b0:	f008 f934 	bl	1cb1c <k_work_submit>
   148b4:	e7ad      	b.n	14812 <hci_num_completed_packets+0x62>
	parent->next = child;
   148b6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   148b8:	6263      	str	r3, [r4, #36]	; 0x24
}
   148ba:	e7f4      	b.n	148a6 <hci_num_completed_packets+0xf6>
   148bc:	00023183 	.word	0x00023183
   148c0:	00021e64 	.word	0x00021e64
   148c4:	0002319f 	.word	0x0002319f

000148c8 <le_conn_update_complete>:
{
   148c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   148ca:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   148cc:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   148ce:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   148d2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   148d4:	4630      	mov	r0, r6
   148d6:	f001 ffe7 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   148da:	4604      	mov	r4, r0
   148dc:	b988      	cbnz	r0, 14902 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   148de:	466c      	mov	r4, sp
   148e0:	b088      	sub	sp, #32
   148e2:	466a      	mov	r2, sp
   148e4:	4b2d      	ldr	r3, [pc, #180]	; (1499c <le_conn_update_complete+0xd4>)
   148e6:	482e      	ldr	r0, [pc, #184]	; (149a0 <le_conn_update_complete+0xd8>)
   148e8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   148ec:	2303      	movs	r3, #3
   148ee:	f842 3f10 	str.w	r3, [r2, #16]!
   148f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   148f6:	f00a fcf5 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   148fa:	46a5      	mov	sp, r4
}
   148fc:	370c      	adds	r7, #12
   148fe:	46bd      	mov	sp, r7
   14900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14902:	782b      	ldrb	r3, [r5, #0]
   14904:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   14906:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1490a:	d117      	bne.n	1493c <le_conn_update_complete+0x74>
   1490c:	78c3      	ldrb	r3, [r0, #3]
   1490e:	2b01      	cmp	r3, #1
   14910:	d128      	bne.n	14964 <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14912:	f44f 6180 	mov.w	r1, #1024	; 0x400
   14916:	4630      	mov	r0, r6
   14918:	f00a fcd5 	bl	1f2c6 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1491c:	0542      	lsls	r2, r0, #21
   1491e:	d40d      	bmi.n	1493c <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   14920:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14924:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   14926:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1492a:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1492c:	4639      	mov	r1, r7
   1492e:	4620      	mov	r0, r4
   14930:	f002 fcc2 	bl	172b8 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   14934:	4620      	mov	r0, r4
   14936:	f00a fef6 	bl	1f726 <bt_conn_unref>
   1493a:	e7df      	b.n	148fc <le_conn_update_complete+0x34>
		if (!evt->status) {
   1493c:	782b      	ldrb	r3, [r5, #0]
   1493e:	b98b      	cbnz	r3, 14964 <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   14940:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   14944:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   14948:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1494c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14950:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   14954:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14958:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1495c:	4630      	mov	r0, r6
   1495e:	f00a fcc4 	bl	1f2ea <atomic_and.isra.0>
}
   14962:	e017      	b.n	14994 <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14964:	f3bf 8f5b 	dmb	ish
   14968:	6863      	ldr	r3, [r4, #4]
   1496a:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   1496e:	05db      	lsls	r3, r3, #23
   14970:	d5f2      	bpl.n	14958 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   14972:	782b      	ldrb	r3, [r5, #0]
   14974:	2b20      	cmp	r3, #32
   14976:	d1ef      	bne.n	14958 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   14978:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1497c:	2b00      	cmp	r3, #0
   1497e:	d0eb      	beq.n	14958 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   14980:	3b01      	subs	r3, #1
   14982:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   14986:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1498a:	2300      	movs	r3, #0
   1498c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14990:	f008 f92c 	bl	1cbec <k_work_schedule>
		notify_le_param_updated(conn);
   14994:	4620      	mov	r0, r4
   14996:	f002 f8a7 	bl	16ae8 <notify_le_param_updated>
   1499a:	e7cb      	b.n	14934 <le_conn_update_complete+0x6c>
   1499c:	00022fbd 	.word	0x00022fbd
   149a0:	00021e64 	.word	0x00021e64

000149a4 <bt_hci_cmd_state_set_init>:
{
   149a4:	b510      	push	{r4, lr}
	state->bit = bit;
   149a6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   149aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   149ae:	720b      	strb	r3, [r1, #8]
{
   149b0:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   149b2:	f004 fb65 	bl	19080 <net_buf_id>
   149b6:	4b03      	ldr	r3, [pc, #12]	; (149c4 <bt_hci_cmd_state_set_init+0x20>)
   149b8:	220c      	movs	r2, #12
   149ba:	fb02 3300 	mla	r3, r2, r0, r3
   149be:	605c      	str	r4, [r3, #4]
}
   149c0:	bd10      	pop	{r4, pc}
   149c2:	bf00      	nop
   149c4:	20002b6c 	.word	0x20002b6c

000149c8 <bt_hci_cmd_create>:
{
   149c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   149cc:	f04f 32ff 	mov.w	r2, #4294967295
   149d0:	f04f 33ff 	mov.w	r3, #4294967295
   149d4:	4606      	mov	r6, r0
   149d6:	4817      	ldr	r0, [pc, #92]	; (14a34 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   149d8:	4d17      	ldr	r5, [pc, #92]	; (14a38 <bt_hci_cmd_create+0x70>)
{
   149da:	460f      	mov	r7, r1
   149dc:	f00b ff48 	bl	20870 <net_buf_alloc_fixed>
   149e0:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   149e2:	f100 0a0c 	add.w	sl, r0, #12
   149e6:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   149e8:	f04f 0800 	mov.w	r8, #0
   149ec:	4650      	mov	r0, sl
   149ee:	f00b ff46 	bl	2087e <net_buf_simple_reserve>
   149f2:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   149f6:	4620      	mov	r0, r4
   149f8:	f004 fb42 	bl	19080 <net_buf_id>
   149fc:	f04f 090c 	mov.w	r9, #12
   14a00:	fb09 5000 	mla	r0, r9, r0, r5
   14a04:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   14a06:	4620      	mov	r0, r4
   14a08:	f004 fb3a 	bl	19080 <net_buf_id>
   14a0c:	fb09 5000 	mla	r0, r9, r0, r5
   14a10:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   14a14:	4620      	mov	r0, r4
   14a16:	f004 fb33 	bl	19080 <net_buf_id>
   14a1a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   14a1e:	2103      	movs	r1, #3
   14a20:	f8c5 8004 	str.w	r8, [r5, #4]
   14a24:	4650      	mov	r0, sl
   14a26:	f00b ff83 	bl	20930 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   14a2a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   14a2c:	7087      	strb	r7, [r0, #2]
}
   14a2e:	4620      	mov	r0, r4
   14a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a34:	20000910 	.word	0x20000910
   14a38:	20002b6c 	.word	0x20002b6c

00014a3c <bt_hci_cmd_send_sync>:
{
   14a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a40:	b087      	sub	sp, #28
   14a42:	4680      	mov	r8, r0
   14a44:	af00      	add	r7, sp, #0
   14a46:	4615      	mov	r5, r2
	if (!buf) {
   14a48:	460c      	mov	r4, r1
   14a4a:	b921      	cbnz	r1, 14a56 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   14a4c:	f7ff ffbc 	bl	149c8 <bt_hci_cmd_create>
		if (!buf) {
   14a50:	4604      	mov	r4, r0
   14a52:	2800      	cmp	r0, #0
   14a54:	d05a      	beq.n	14b0c <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14a56:	2201      	movs	r2, #1
   14a58:	2100      	movs	r1, #0
   14a5a:	4638      	mov	r0, r7
   14a5c:	f00c fc31 	bl	212c2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14a60:	4620      	mov	r0, r4
   14a62:	f004 fb0d 	bl	19080 <net_buf_id>
   14a66:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 14b30 <bt_hci_cmd_send_sync+0xf4>
   14a6a:	230c      	movs	r3, #12
   14a6c:	fb03 9000 	mla	r0, r3, r0, r9
   14a70:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14a72:	4620      	mov	r0, r4
   14a74:	f00b ff36 	bl	208e4 <net_buf_ref>
   14a78:	4601      	mov	r1, r0
   14a7a:	4826      	ldr	r0, [pc, #152]	; (14b14 <bt_hci_cmd_send_sync+0xd8>)
   14a7c:	f00b ff30 	bl	208e0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14a80:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14a84:	2300      	movs	r3, #0
   14a86:	4638      	mov	r0, r7
   14a88:	f007 ff8e 	bl	1c9a8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14a8c:	4606      	mov	r6, r0
   14a8e:	b180      	cbz	r0, 14ab2 <bt_hci_cmd_send_sync+0x76>
   14a90:	4a21      	ldr	r2, [pc, #132]	; (14b18 <bt_hci_cmd_send_sync+0xdc>)
   14a92:	4922      	ldr	r1, [pc, #136]	; (14b1c <bt_hci_cmd_send_sync+0xe0>)
   14a94:	4822      	ldr	r0, [pc, #136]	; (14b20 <bt_hci_cmd_send_sync+0xe4>)
   14a96:	f240 1349 	movw	r3, #329	; 0x149
   14a9a:	f009 fe41 	bl	1e720 <assert_print>
   14a9e:	4821      	ldr	r0, [pc, #132]	; (14b24 <bt_hci_cmd_send_sync+0xe8>)
   14aa0:	4631      	mov	r1, r6
   14aa2:	f009 fe3d 	bl	1e720 <assert_print>
   14aa6:	4040      	eors	r0, r0
   14aa8:	f380 8811 	msr	BASEPRI, r0
   14aac:	f04f 0003 	mov.w	r0, #3
   14ab0:	df02      	svc	2
	status = cmd(buf)->status;
   14ab2:	4620      	mov	r0, r4
   14ab4:	f004 fae4 	bl	19080 <net_buf_id>
   14ab8:	230c      	movs	r3, #12
   14aba:	4358      	muls	r0, r3
   14abc:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   14ac0:	b1e6      	cbz	r6, 14afc <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   14ac2:	466d      	mov	r5, sp
   14ac4:	b088      	sub	sp, #32
   14ac6:	466a      	mov	r2, sp
   14ac8:	4b17      	ldr	r3, [pc, #92]	; (14b28 <bt_hci_cmd_send_sync+0xec>)
   14aca:	61d6      	str	r6, [r2, #28]
   14acc:	e9c2 3805 	strd	r3, r8, [r2, #20]
   14ad0:	2304      	movs	r3, #4
   14ad2:	f842 3f10 	str.w	r3, [r2, #16]!
   14ad6:	4815      	ldr	r0, [pc, #84]	; (14b2c <bt_hci_cmd_send_sync+0xf0>)
   14ad8:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14adc:	f00a fc02 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   14ae0:	4620      	mov	r0, r4
   14ae2:	46ad      	mov	sp, r5
   14ae4:	f004 fb86 	bl	191f4 <net_buf_unref>
			return -ECONNREFUSED;
   14ae8:	2e09      	cmp	r6, #9
   14aea:	bf14      	ite	ne
   14aec:	f06f 0004 	mvnne.w	r0, #4
   14af0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   14af4:	371c      	adds	r7, #28
   14af6:	46bd      	mov	sp, r7
   14af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   14afc:	b115      	cbz	r5, 14b04 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   14afe:	602c      	str	r4, [r5, #0]
	return 0;
   14b00:	2000      	movs	r0, #0
   14b02:	e7f7      	b.n	14af4 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   14b04:	4620      	mov	r0, r4
   14b06:	f004 fb75 	bl	191f4 <net_buf_unref>
   14b0a:	e7f9      	b.n	14b00 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   14b0c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14b10:	e7f0      	b.n	14af4 <bt_hci_cmd_send_sync+0xb8>
   14b12:	bf00      	nop
   14b14:	200004c4 	.word	0x200004c4
   14b18:	00023029 	.word	0x00023029
   14b1c:	000231b6 	.word	0x000231b6
   14b20:	00023076 	.word	0x00023076
   14b24:	000231bf 	.word	0x000231bf
   14b28:	000231df 	.word	0x000231df
   14b2c:	00021e64 	.word	0x00021e64
   14b30:	20002b6c 	.word	0x20002b6c

00014b34 <hci_le_read_max_data_len>:
{
   14b34:	b570      	push	{r4, r5, r6, lr}
   14b36:	b088      	sub	sp, #32
   14b38:	4606      	mov	r6, r0
   14b3a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   14b3c:	aa01      	add	r2, sp, #4
   14b3e:	2100      	movs	r1, #0
   14b40:	f242 002f 	movw	r0, #8239	; 0x202f
   14b44:	f7ff ff7a 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   14b48:	4604      	mov	r4, r0
   14b4a:	b160      	cbz	r0, 14b66 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   14b4c:	4b0b      	ldr	r3, [pc, #44]	; (14b7c <hci_le_read_max_data_len+0x48>)
   14b4e:	9307      	str	r3, [sp, #28]
   14b50:	480b      	ldr	r0, [pc, #44]	; (14b80 <hci_le_read_max_data_len+0x4c>)
   14b52:	2302      	movs	r3, #2
   14b54:	aa06      	add	r2, sp, #24
   14b56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14b5a:	9306      	str	r3, [sp, #24]
   14b5c:	f00a fbc2 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
}
   14b60:	4620      	mov	r0, r4
   14b62:	b008      	add	sp, #32
   14b64:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   14b66:	9801      	ldr	r0, [sp, #4]
   14b68:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   14b6a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14b6e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   14b70:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   14b74:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   14b76:	f004 fb3d 	bl	191f4 <net_buf_unref>
	return 0;
   14b7a:	e7f1      	b.n	14b60 <hci_le_read_max_data_len+0x2c>
   14b7c:	000231fb 	.word	0x000231fb
   14b80:	00021e64 	.word	0x00021e64

00014b84 <bt_hci_le_rand>:
{
   14b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   14b86:	4b14      	ldr	r3, [pc, #80]	; (14bd8 <bt_hci_le_rand+0x54>)
   14b88:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   14b8c:	2b00      	cmp	r3, #0
{
   14b8e:	4605      	mov	r5, r0
   14b90:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   14b92:	da1d      	bge.n	14bd0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   14b94:	b914      	cbnz	r4, 14b9c <bt_hci_le_rand+0x18>
	return 0;
   14b96:	4620      	mov	r0, r4
}
   14b98:	b003      	add	sp, #12
   14b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   14b9c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   14b9e:	aa01      	add	r2, sp, #4
   14ba0:	f04f 0100 	mov.w	r1, #0
   14ba4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   14ba8:	4626      	mov	r6, r4
   14baa:	bf28      	it	cs
   14bac:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   14bae:	f7ff ff45 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   14bb2:	2800      	cmp	r0, #0
   14bb4:	d1f0      	bne.n	14b98 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   14bb6:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   14bb8:	68f9      	ldr	r1, [r7, #12]
   14bba:	4632      	mov	r2, r6
   14bbc:	3101      	adds	r1, #1
   14bbe:	4628      	mov	r0, r5
   14bc0:	f00a faeb 	bl	1f19a <memcpy>
		net_buf_unref(rsp);
   14bc4:	4638      	mov	r0, r7
   14bc6:	f004 fb15 	bl	191f4 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   14bca:	4435      	add	r5, r6
		len -= count;
   14bcc:	1ba4      	subs	r4, r4, r6
   14bce:	e7e1      	b.n	14b94 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   14bd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14bd4:	e7e0      	b.n	14b98 <bt_hci_le_rand+0x14>
   14bd6:	bf00      	nop
   14bd8:	20000388 	.word	0x20000388

00014bdc <bt_hci_le_enh_conn_complete>:
{
   14bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be0:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14be2:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14be6:	4aae      	ldr	r2, [pc, #696]	; (14ea0 <bt_hci_le_enh_conn_complete+0x2c4>)
	handle |= ~BT_ACL_HANDLE_MASK;
   14be8:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   14bec:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   14bee:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   14bf2:	b29b      	uxth	r3, r3
   14bf4:	4299      	cmp	r1, r3
   14bf6:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   14bfa:	bf08      	it	eq
   14bfc:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
   14bfe:	7804      	ldrb	r4, [r0, #0]
{
   14c00:	af02      	add	r7, sp, #8
   14c02:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14c04:	fa1f f889 	uxth.w	r8, r9
			return true;
   14c08:	bf08      	it	eq
   14c0a:	2601      	moveq	r6, #1
	if (evt->status) {
   14c0c:	b3a4      	cbz	r4, 14c78 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14c0e:	2c3c      	cmp	r4, #60	; 0x3c
   14c10:	d122      	bne.n	14c58 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14c12:	f001 f995 	bl	15f40 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14c16:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14c1a:	3010      	adds	r0, #16
   14c1c:	f00a fb65 	bl	1f2ea <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   14c20:	2000      	movs	r0, #0
   14c22:	f7ff fab3 	bl	1418c <find_pending_connect.part.0>
		if (!conn) {
   14c26:	4605      	mov	r5, r0
   14c28:	b970      	cbnz	r0, 14c48 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   14c2a:	4b9e      	ldr	r3, [pc, #632]	; (14ea4 <bt_hci_le_enh_conn_complete+0x2c8>)
   14c2c:	627b      	str	r3, [r7, #36]	; 0x24
   14c2e:	2302      	movs	r3, #2
   14c30:	489d      	ldr	r0, [pc, #628]	; (14ea8 <bt_hci_le_enh_conn_complete+0x2cc>)
   14c32:	623b      	str	r3, [r7, #32]
   14c34:	f107 0220 	add.w	r2, r7, #32
   14c38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c3c:	f00a fb52 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
}
   14c40:	372c      	adds	r7, #44	; 0x2c
   14c42:	46bd      	mov	sp, r7
   14c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   14c48:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14c4a:	2100      	movs	r1, #0
   14c4c:	f001 fe34 	bl	168b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   14c50:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   14c52:	f00a fd68 	bl	1f726 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14c56:	e7f3      	b.n	14c40 <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   14c58:	466d      	mov	r5, sp
   14c5a:	b088      	sub	sp, #32
   14c5c:	aa02      	add	r2, sp, #8
   14c5e:	4b93      	ldr	r3, [pc, #588]	; (14eac <bt_hci_le_enh_conn_complete+0x2d0>)
   14c60:	4891      	ldr	r0, [pc, #580]	; (14ea8 <bt_hci_le_enh_conn_complete+0x2cc>)
   14c62:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14c66:	2303      	movs	r3, #3
   14c68:	f842 3f10 	str.w	r3, [r2, #16]!
   14c6c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14c70:	f00a fb38 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14c74:	46ad      	mov	sp, r5
		return;
   14c76:	e7e3      	b.n	14c40 <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14c78:	7903      	ldrb	r3, [r0, #4]
   14c7a:	3b02      	subs	r3, #2
   14c7c:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14c7e:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14c82:	d82d      	bhi.n	14ce0 <bt_hci_le_enh_conn_complete+0x104>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14c84:	4651      	mov	r1, sl
   14c86:	f107 0010 	add.w	r0, r7, #16
   14c8a:	f00a fb19 	bl	1f2c0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14c8e:	7c3b      	ldrb	r3, [r7, #16]
   14c90:	3b02      	subs	r3, #2
   14c92:	743b      	strb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
   14c94:	2206      	movs	r2, #6
   14c96:	f105 0111 	add.w	r1, r5, #17
   14c9a:	f107 0009 	add.w	r0, r7, #9
   14c9e:	f00a fa7c 	bl	1f19a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14ca2:	2301      	movs	r3, #1
   14ca4:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   14ca6:	78eb      	ldrb	r3, [r5, #3]
   14ca8:	2b01      	cmp	r3, #1
   14caa:	d02e      	beq.n	14d0a <bt_hci_le_enh_conn_complete+0x12e>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   14cac:	4650      	mov	r0, sl
   14cae:	f7ff f8db 	bl	13e68 <bt_addr_le_str>
   14cb2:	466c      	mov	r4, sp
   14cb4:	b088      	sub	sp, #32
   14cb6:	aa02      	add	r2, sp, #8
   14cb8:	4b7d      	ldr	r3, [pc, #500]	; (14eb0 <bt_hci_le_enh_conn_complete+0x2d4>)
   14cba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
   14cc2:	8393      	strh	r3, [r2, #28]
   14cc4:	4b7b      	ldr	r3, [pc, #492]	; (14eb4 <bt_hci_le_enh_conn_complete+0x2d8>)
   14cc6:	f842 3f10 	str.w	r3, [r2, #16]!
   14cca:	4877      	ldr	r0, [pc, #476]	; (14ea8 <bt_hci_le_enh_conn_complete+0x2cc>)
   14ccc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   14cd0:	f00a fb08 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14cd4:	211f      	movs	r1, #31
   14cd6:	46a5      	mov	sp, r4
   14cd8:	4640      	mov	r0, r8
   14cda:	f00a fb12 	bl	1f302 <bt_hci_disconnect>
		return;
   14cde:	e7af      	b.n	14c40 <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14ce0:	78c3      	ldrb	r3, [r0, #3]
   14ce2:	2b01      	cmp	r3, #1
   14ce4:	bf04      	itt	eq
   14ce6:	4b74      	ldreq	r3, [pc, #464]	; (14eb8 <bt_hci_le_enh_conn_complete+0x2dc>)
   14ce8:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   14cec:	4651      	mov	r1, sl
   14cee:	4620      	mov	r0, r4
   14cf0:	f00a fbb7 	bl	1f462 <bt_lookup_id_addr>
   14cf4:	4601      	mov	r1, r0
   14cf6:	f107 0010 	add.w	r0, r7, #16
   14cfa:	f00a fae1 	bl	1f2c0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   14cfe:	4651      	mov	r1, sl
   14d00:	f107 0008 	add.w	r0, r7, #8
   14d04:	f00a fadc 	bl	1f2c0 <bt_addr_le_copy>
   14d08:	e7cd      	b.n	14ca6 <bt_hci_le_enh_conn_complete+0xca>
   14d0a:	f107 0010 	add.w	r0, r7, #16
   14d0e:	f7ff fa3d 	bl	1418c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d12:	78eb      	ldrb	r3, [r5, #3]
   14d14:	2b01      	cmp	r3, #1
   14d16:	4604      	mov	r4, r0
   14d18:	d10a      	bne.n	14d30 <bt_hci_le_enh_conn_complete+0x154>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14d1a:	f001 f911 	bl	15f40 <bt_le_adv_lookup_legacy>
   14d1e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14d22:	4683      	mov	fp, r0
   14d24:	3010      	adds	r0, #16
   14d26:	f00a fae0 	bl	1f2ea <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   14d2a:	4658      	mov	r0, fp
   14d2c:	f00a fcaa 	bl	1f684 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   14d30:	2c00      	cmp	r4, #0
   14d32:	d0bb      	beq.n	14cac <bt_hci_le_enh_conn_complete+0xd0>
	conn->handle = handle;
   14d34:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   14d36:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
   14d3a:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   14d3e:	f00a fabf 	bl	1f2c0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14d42:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   14d46:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14d4a:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   14d4e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14d52:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   14d56:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   14d5a:	78eb      	ldrb	r3, [r5, #3]
   14d5c:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   14d5e:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d60:	2b01      	cmp	r3, #1
	conn->err = 0U;
   14d62:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d64:	d116      	bne.n	14d94 <bt_hci_le_enh_conn_complete+0x1b8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   14d66:	f107 0108 	add.w	r1, r7, #8
   14d6a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   14d6e:	f00a faa7 	bl	1f2c0 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14d72:	f001 f8e5 	bl	15f40 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   14d76:	7a21      	ldrb	r1, [r4, #8]
   14d78:	4d4f      	ldr	r5, [pc, #316]	; (14eb8 <bt_hci_le_enh_conn_complete+0x2dc>)
   14d7a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   14d7e:	4429      	add	r1, r5
   14d80:	f104 0096 	add.w	r0, r4, #150	; 0x96
   14d84:	f00a fa9c 	bl	1f2c0 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   14d88:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   14d8c:	065d      	lsls	r5, r3, #25
   14d8e:	d501      	bpl.n	14d94 <bt_hci_le_enh_conn_complete+0x1b8>
			bt_le_adv_resume();
   14d90:	f001 faa0 	bl	162d4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14d94:	2107      	movs	r1, #7
   14d96:	4620      	mov	r0, r4
   14d98:	f001 fd8e 	bl	168b8 <bt_conn_set_state>
	if (is_disconnected) {
   14d9c:	b11e      	cbz	r6, 14da6 <bt_hci_le_enh_conn_complete+0x1ca>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14d9e:	2101      	movs	r1, #1
   14da0:	4620      	mov	r0, r4
   14da2:	f001 fd89 	bl	168b8 <bt_conn_set_state>
	bt_conn_connected(conn);
   14da6:	4620      	mov	r0, r4
   14da8:	f00a fcfb 	bl	1f7a2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   14dac:	7aa3      	ldrb	r3, [r4, #10]
   14dae:	2b07      	cmp	r3, #7
   14db0:	d170      	bne.n	14e94 <bt_hci_le_enh_conn_complete+0x2b8>
   14db2:	f3bf 8f5b 	dmb	ish
   14db6:	6863      	ldr	r3, [r4, #4]
   14db8:	4d3f      	ldr	r5, [pc, #252]	; (14eb8 <bt_hci_le_enh_conn_complete+0x2dc>)
   14dba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14dbe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   14dc2:	d129      	bne.n	14e18 <bt_hci_le_enh_conn_complete+0x23c>
   14dc4:	78e3      	ldrb	r3, [r4, #3]
   14dc6:	b11b      	cbz	r3, 14dd0 <bt_hci_le_enh_conn_complete+0x1f4>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14dc8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   14dcc:	0718      	lsls	r0, r3, #28
   14dce:	d523      	bpl.n	14e18 <bt_hci_le_enh_conn_complete+0x23c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   14dd0:	2102      	movs	r1, #2
   14dd2:	f242 0016 	movw	r0, #8214	; 0x2016
   14dd6:	f7ff fdf7 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   14dda:	4606      	mov	r6, r0
   14ddc:	2800      	cmp	r0, #0
   14dde:	d05b      	beq.n	14e98 <bt_hci_le_enh_conn_complete+0x2bc>
   14de0:	2102      	movs	r1, #2
   14de2:	300c      	adds	r0, #12
   14de4:	f00b fda4 	bl	20930 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   14de8:	8823      	ldrh	r3, [r4, #0]
   14dea:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   14dec:	2200      	movs	r2, #0
   14dee:	4631      	mov	r1, r6
   14df0:	f242 0016 	movw	r0, #8214	; 0x2016
   14df4:	f7ff fe22 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   14df8:	b170      	cbz	r0, 14e18 <bt_hci_le_enh_conn_complete+0x23c>
			LOG_ERR("Failed read remote features (%d)", err);
   14dfa:	466e      	mov	r6, sp
   14dfc:	b088      	sub	sp, #32
   14dfe:	aa02      	add	r2, sp, #8
   14e00:	4b2e      	ldr	r3, [pc, #184]	; (14ebc <bt_hci_le_enh_conn_complete+0x2e0>)
   14e02:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14e06:	2303      	movs	r3, #3
   14e08:	f842 3f10 	str.w	r3, [r2, #16]!
   14e0c:	4826      	ldr	r0, [pc, #152]	; (14ea8 <bt_hci_le_enh_conn_complete+0x2cc>)
   14e0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e12:	f00a fa67 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14e16:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14e18:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   14e1c:	07d9      	lsls	r1, r3, #31
   14e1e:	d516      	bpl.n	14e4e <bt_hci_le_enh_conn_complete+0x272>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   14e20:	2100      	movs	r1, #0
   14e22:	2302      	movs	r3, #2
   14e24:	9100      	str	r1, [sp, #0]
   14e26:	461a      	mov	r2, r3
   14e28:	4620      	mov	r0, r4
   14e2a:	f00a faa3 	bl	1f374 <bt_le_set_phy>
		if (err) {
   14e2e:	b170      	cbz	r0, 14e4e <bt_hci_le_enh_conn_complete+0x272>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   14e30:	466e      	mov	r6, sp
   14e32:	b088      	sub	sp, #32
   14e34:	aa02      	add	r2, sp, #8
   14e36:	4b22      	ldr	r3, [pc, #136]	; (14ec0 <bt_hci_le_enh_conn_complete+0x2e4>)
   14e38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14e3c:	2303      	movs	r3, #3
   14e3e:	f842 3f10 	str.w	r3, [r2, #16]!
   14e42:	4819      	ldr	r0, [pc, #100]	; (14ea8 <bt_hci_le_enh_conn_complete+0x2cc>)
   14e44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e48:	f00a fa4c 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14e4c:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14e4e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   14e52:	069a      	lsls	r2, r3, #26
   14e54:	d51e      	bpl.n	14e94 <bt_hci_le_enh_conn_complete+0x2b8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14e56:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   14e5a:	689b      	ldr	r3, [r3, #8]
   14e5c:	079b      	lsls	r3, r3, #30
   14e5e:	d519      	bpl.n	14e94 <bt_hci_le_enh_conn_complete+0x2b8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14e60:	1db9      	adds	r1, r7, #6
   14e62:	1d38      	adds	r0, r7, #4
   14e64:	f7ff fe66 	bl	14b34 <hci_le_read_max_data_len>
			if (!err) {
   14e68:	b9a0      	cbnz	r0, 14e94 <bt_hci_le_enh_conn_complete+0x2b8>
				err = bt_le_set_data_len(conn,
   14e6a:	88fa      	ldrh	r2, [r7, #6]
   14e6c:	88b9      	ldrh	r1, [r7, #4]
   14e6e:	4620      	mov	r0, r4
   14e70:	f00a fa62 	bl	1f338 <bt_le_set_data_len>
				if (err) {
   14e74:	b170      	cbz	r0, 14e94 <bt_hci_le_enh_conn_complete+0x2b8>
					LOG_ERR("Failed to set data len (%d)", err);
   14e76:	466d      	mov	r5, sp
   14e78:	b088      	sub	sp, #32
   14e7a:	aa02      	add	r2, sp, #8
   14e7c:	4b11      	ldr	r3, [pc, #68]	; (14ec4 <bt_hci_le_enh_conn_complete+0x2e8>)
   14e7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14e82:	2303      	movs	r3, #3
   14e84:	f842 3f10 	str.w	r3, [r2, #16]!
   14e88:	4807      	ldr	r0, [pc, #28]	; (14ea8 <bt_hci_le_enh_conn_complete+0x2cc>)
   14e8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e8e:	f00a fa29 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   14e92:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   14e94:	4620      	mov	r0, r4
   14e96:	e6dc      	b.n	14c52 <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   14e98:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14e9c:	e7ad      	b.n	14dfa <bt_hci_le_enh_conn_complete+0x21e>
   14e9e:	bf00      	nop
   14ea0:	20002fa4 	.word	0x20002fa4
   14ea4:	0002321b 	.word	0x0002321b
   14ea8:	00021e64 	.word	0x00021e64
   14eac:	0002323c 	.word	0x0002323c
   14eb0:	00023255 	.word	0x00023255
   14eb4:	01000003 	.word	0x01000003
   14eb8:	20000388 	.word	0x20000388
   14ebc:	00023271 	.word	0x00023271
   14ec0:	00023292 	.word	0x00023292
   14ec4:	000232a9 	.word	0x000232a9

00014ec8 <le_legacy_conn_complete>:
{
   14ec8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   14eca:	68c1      	ldr	r1, [r0, #12]
   14ecc:	4c17      	ldr	r4, [pc, #92]	; (14f2c <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   14ece:	780b      	ldrb	r3, [r1, #0]
{
   14ed0:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   14ed2:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   14ed4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   14ed8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   14edc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   14ee0:	78cb      	ldrb	r3, [r1, #3]
   14ee2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   14ee6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   14eea:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   14eee:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   14ef2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   14ef6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   14efa:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   14efe:	7c4b      	ldrb	r3, [r1, #17]
   14f00:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   14f04:	3104      	adds	r1, #4
   14f06:	f00a f9db 	bl	1f2c0 <bt_addr_le_copy>
   14f0a:	4621      	mov	r1, r4
   14f0c:	2206      	movs	r2, #6
   14f0e:	f10d 000b 	add.w	r0, sp, #11
   14f12:	f00a f942 	bl	1f19a <memcpy>
   14f16:	2206      	movs	r2, #6
   14f18:	4621      	mov	r1, r4
   14f1a:	f10d 0011 	add.w	r0, sp, #17
   14f1e:	f00a f93c 	bl	1f19a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   14f22:	4668      	mov	r0, sp
   14f24:	f7ff fe5a 	bl	14bdc <bt_hci_le_enh_conn_complete>
}
   14f28:	b008      	add	sp, #32
   14f2a:	bd10      	pop	{r4, pc}
   14f2c:	00022e81 	.word	0x00022e81

00014f30 <bt_send>:
	return bt_dev.drv->send(buf);
   14f30:	4b02      	ldr	r3, [pc, #8]	; (14f3c <bt_send+0xc>)
   14f32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14f36:	695b      	ldr	r3, [r3, #20]
   14f38:	4718      	bx	r3
   14f3a:	bf00      	nop
   14f3c:	20000388 	.word	0x20000388

00014f40 <bt_hci_cmd_send>:
{
   14f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f42:	4605      	mov	r5, r0
   14f44:	af00      	add	r7, sp, #0
	if (!buf) {
   14f46:	460c      	mov	r4, r1
   14f48:	b919      	cbnz	r1, 14f52 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   14f4a:	f7ff fd3d 	bl	149c8 <bt_hci_cmd_create>
		if (!buf) {
   14f4e:	4604      	mov	r4, r0
   14f50:	b318      	cbz	r0, 14f9a <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14f52:	f640 4335 	movw	r3, #3125	; 0xc35
   14f56:	429d      	cmp	r5, r3
   14f58:	d119      	bne.n	14f8e <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   14f5a:	4620      	mov	r0, r4
   14f5c:	f7ff ffe8 	bl	14f30 <bt_send>
		if (err) {
   14f60:	4605      	mov	r5, r0
   14f62:	b188      	cbz	r0, 14f88 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   14f64:	466e      	mov	r6, sp
   14f66:	b088      	sub	sp, #32
   14f68:	466a      	mov	r2, sp
   14f6a:	4b0d      	ldr	r3, [pc, #52]	; (14fa0 <bt_hci_cmd_send+0x60>)
   14f6c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14f70:	2303      	movs	r3, #3
   14f72:	480c      	ldr	r0, [pc, #48]	; (14fa4 <bt_hci_cmd_send+0x64>)
   14f74:	f842 3f10 	str.w	r3, [r2, #16]!
   14f78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f7c:	f00a f9b2 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   14f80:	4620      	mov	r0, r4
   14f82:	46b5      	mov	sp, r6
   14f84:	f004 f936 	bl	191f4 <net_buf_unref>
}
   14f88:	4628      	mov	r0, r5
   14f8a:	46bd      	mov	sp, r7
   14f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14f8e:	4806      	ldr	r0, [pc, #24]	; (14fa8 <bt_hci_cmd_send+0x68>)
   14f90:	4621      	mov	r1, r4
   14f92:	f00b fca5 	bl	208e0 <net_buf_put>
	return 0;
   14f96:	2500      	movs	r5, #0
   14f98:	e7f6      	b.n	14f88 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   14f9a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14f9e:	e7f3      	b.n	14f88 <bt_hci_cmd_send+0x48>
   14fa0:	000232c5 	.word	0x000232c5
   14fa4:	00021e64 	.word	0x00021e64
   14fa8:	200004c4 	.word	0x200004c4

00014fac <le_conn_param_req>:
{
   14fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fb0:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   14fb2:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14fb4:	78d9      	ldrb	r1, [r3, #3]
   14fb6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   14fb8:	f8b3 8000 	ldrh.w	r8, [r3]
{
   14fbc:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14fbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14fc2:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14fc4:	7959      	ldrb	r1, [r3, #5]
   14fc6:	791a      	ldrb	r2, [r3, #4]
   14fc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14fcc:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14fce:	799a      	ldrb	r2, [r3, #6]
   14fd0:	79d9      	ldrb	r1, [r3, #7]
   14fd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14fd6:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14fd8:	7a1a      	ldrb	r2, [r3, #8]
   14fda:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   14fdc:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14fe0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   14fe4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14fe6:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   14fe8:	f001 fc5e 	bl	168a8 <bt_conn_lookup_handle>
	if (!conn) {
   14fec:	4606      	mov	r6, r0
   14fee:	b9b0      	cbnz	r0, 1501e <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14ff0:	466d      	mov	r5, sp
   14ff2:	b088      	sub	sp, #32
   14ff4:	466a      	mov	r2, sp
   14ff6:	4b20      	ldr	r3, [pc, #128]	; (15078 <le_conn_param_req+0xcc>)
   14ff8:	4820      	ldr	r0, [pc, #128]	; (1507c <le_conn_param_req+0xd0>)
   14ffa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14ffe:	2303      	movs	r3, #3
   15000:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15004:	f842 3f10 	str.w	r3, [r2, #16]!
   15008:	f00a f96c 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1500c:	2102      	movs	r1, #2
   1500e:	46ad      	mov	sp, r5
   15010:	4620      	mov	r0, r4
   15012:	f00a f9fb 	bl	1f40c <le_conn_param_neg_reply>
}
   15016:	3708      	adds	r7, #8
   15018:	46bd      	mov	sp, r7
   1501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   1501e:	4639      	mov	r1, r7
   15020:	f001 fdae 	bl	16b80 <le_param_req>
   15024:	b938      	cbnz	r0, 15036 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   15026:	211e      	movs	r1, #30
   15028:	4620      	mov	r0, r4
   1502a:	f00a f9ef 	bl	1f40c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1502e:	4630      	mov	r0, r6
   15030:	f00a fb79 	bl	1f726 <bt_conn_unref>
   15034:	e7ef      	b.n	15016 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   15036:	210e      	movs	r1, #14
   15038:	f242 0020 	movw	r0, #8224	; 0x2020
   1503c:	f7ff fcc4 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   15040:	4605      	mov	r5, r0
   15042:	2800      	cmp	r0, #0
   15044:	d0f3      	beq.n	1502e <le_conn_param_req+0x82>
   15046:	210e      	movs	r1, #14
   15048:	300c      	adds	r0, #12
   1504a:	f00b fc71 	bl	20930 <net_buf_simple_add>
   1504e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   15050:	220e      	movs	r2, #14
   15052:	2100      	movs	r1, #0
   15054:	f00a f8ac 	bl	1f1b0 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   15058:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1505c:	883b      	ldrh	r3, [r7, #0]
   1505e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   15060:	887b      	ldrh	r3, [r7, #2]
   15062:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   15064:	88bb      	ldrh	r3, [r7, #4]
   15066:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15068:	88fb      	ldrh	r3, [r7, #6]
   1506a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1506c:	4629      	mov	r1, r5
   1506e:	f242 0020 	movw	r0, #8224	; 0x2020
   15072:	f7ff ff65 	bl	14f40 <bt_hci_cmd_send>
   15076:	e7da      	b.n	1502e <le_conn_param_req+0x82>
   15078:	00022fbd 	.word	0x00022fbd
   1507c:	00021e64 	.word	0x00021e64

00015080 <hci_tx_thread>:
{
   15080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   15084:	f8df 8158 	ldr.w	r8, [pc, #344]	; 151e0 <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
   15088:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1520c <hci_tx_thread+0x18c>
{
   1508c:	b087      	sub	sp, #28
   1508e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   15090:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15094:	4851      	ldr	r0, [pc, #324]	; (151dc <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   15096:	f36f 3394 	bfc	r3, #14, #7
   1509a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1509e:	f001 fbc1 	bl	16824 <bt_conn_prepare_events>
   150a2:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   150a4:	484e      	ldr	r0, [pc, #312]	; (151e0 <hci_tx_thread+0x160>)
   150a6:	f04f 32ff 	mov.w	r2, #4294967295
   150aa:	f04f 33ff 	mov.w	r3, #4294967295
   150ae:	4629      	mov	r1, r5
   150b0:	f008 fb40 	bl	1d734 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   150b4:	b160      	cbz	r0, 150d0 <hci_tx_thread+0x50>
   150b6:	494b      	ldr	r1, [pc, #300]	; (151e4 <hci_tx_thread+0x164>)
   150b8:	484b      	ldr	r0, [pc, #300]	; (151e8 <hci_tx_thread+0x168>)
   150ba:	f640 13e6 	movw	r3, #2534	; 0x9e6
   150be:	464a      	mov	r2, r9
   150c0:	f009 fb2e 	bl	1e720 <assert_print>
   150c4:	4040      	eors	r0, r0
   150c6:	f380 8811 	msr	BASEPRI, r0
   150ca:	f04f 0003 	mov.w	r0, #3
   150ce:	df02      	svc	2
{
   150d0:	4e43      	ldr	r6, [pc, #268]	; (151e0 <hci_tx_thread+0x160>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   150d2:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   150d6:	b915      	cbnz	r5, 150de <hci_tx_thread+0x5e>
	z_impl_k_yield();
   150d8:	f008 f808 	bl	1d0ec <z_impl_k_yield>
	while (1) {
   150dc:	e7d8      	b.n	15090 <hci_tx_thread+0x10>
		switch (ev->state) {
   150de:	68f3      	ldr	r3, [r6, #12]
   150e0:	f3c3 3386 	ubfx	r3, r3, #14, #7
   150e4:	2b01      	cmp	r3, #1
   150e6:	d960      	bls.n	151aa <hci_tx_thread+0x12a>
   150e8:	2b04      	cmp	r3, #4
   150ea:	d168      	bne.n	151be <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   150ec:	7b33      	ldrb	r3, [r6, #12]
   150ee:	2b00      	cmp	r3, #0
   150f0:	d15e      	bne.n	151b0 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   150f2:	483e      	ldr	r0, [pc, #248]	; (151ec <hci_tx_thread+0x16c>)
   150f4:	2200      	movs	r2, #0
   150f6:	2300      	movs	r3, #0
   150f8:	f00b fbbf 	bl	2087a <net_buf_get>
	BT_ASSERT(buf);
   150fc:	4604      	mov	r4, r0
   150fe:	b960      	cbnz	r0, 1511a <hci_tx_thread+0x9a>
   15100:	493b      	ldr	r1, [pc, #236]	; (151f0 <hci_tx_thread+0x170>)
   15102:	4839      	ldr	r0, [pc, #228]	; (151e8 <hci_tx_thread+0x168>)
   15104:	f44f 6318 	mov.w	r3, #2432	; 0x980
   15108:	464a      	mov	r2, r9
   1510a:	f009 fb09 	bl	1e720 <assert_print>
   1510e:	4040      	eors	r0, r0
   15110:	f380 8811 	msr	BASEPRI, r0
   15114:	f04f 0003 	mov.w	r0, #3
   15118:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   1511a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 15210 <hci_tx_thread+0x190>
	return z_impl_k_sem_take(sem, timeout);
   1511e:	4835      	ldr	r0, [pc, #212]	; (151f4 <hci_tx_thread+0x174>)
   15120:	f04f 33ff 	mov.w	r3, #4294967295
   15124:	f04f 32ff 	mov.w	r2, #4294967295
   15128:	f007 fc3e 	bl	1c9a8 <z_impl_k_sem_take>
   1512c:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
   15130:	b18b      	cbz	r3, 15156 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   15132:	4b31      	ldr	r3, [pc, #196]	; (151f8 <hci_tx_thread+0x178>)
   15134:	617b      	str	r3, [r7, #20]
   15136:	2302      	movs	r3, #2
   15138:	613b      	str	r3, [r7, #16]
   1513a:	4830      	ldr	r0, [pc, #192]	; (151fc <hci_tx_thread+0x17c>)
   1513c:	f107 0210 	add.w	r2, r7, #16
   15140:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15144:	f00a f8ce 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   15148:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
   1514c:	f004 f852 	bl	191f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15150:	2300      	movs	r3, #0
   15152:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   15156:	4620      	mov	r0, r4
   15158:	f00b fbc4 	bl	208e4 <net_buf_ref>
   1515c:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
   15160:	4620      	mov	r0, r4
   15162:	f7ff fee5 	bl	14f30 <bt_send>
	if (err) {
   15166:	b300      	cbz	r0, 151aa <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   15168:	46eb      	mov	fp, sp
   1516a:	b088      	sub	sp, #32
   1516c:	466a      	mov	r2, sp
   1516e:	4b24      	ldr	r3, [pc, #144]	; (15200 <hci_tx_thread+0x180>)
   15170:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15174:	2303      	movs	r3, #3
   15176:	f842 3f10 	str.w	r3, [r2, #16]!
   1517a:	4820      	ldr	r0, [pc, #128]	; (151fc <hci_tx_thread+0x17c>)
   1517c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15180:	f00a f8b0 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   15184:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   15186:	481b      	ldr	r0, [pc, #108]	; (151f4 <hci_tx_thread+0x174>)
   15188:	f007 fbe8 	bl	1c95c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1518c:	4620      	mov	r0, r4
   1518e:	f003 ff77 	bl	19080 <net_buf_id>
   15192:	4b1c      	ldr	r3, [pc, #112]	; (15204 <hci_tx_thread+0x184>)
   15194:	220c      	movs	r2, #12
   15196:	fb02 3000 	mla	r0, r2, r0, r3
   1519a:	211f      	movs	r1, #31
   1519c:	8840      	ldrh	r0, [r0, #2]
   1519e:	4622      	mov	r2, r4
   151a0:	f7ff fa40 	bl	14624 <hci_cmd_done>
		net_buf_unref(buf);
   151a4:	4620      	mov	r0, r4
   151a6:	f004 f825 	bl	191f4 <net_buf_unref>
	for (; count; ev++, count--) {
   151aa:	3614      	adds	r6, #20
   151ac:	3d01      	subs	r5, #1
   151ae:	e792      	b.n	150d6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   151b0:	2b01      	cmp	r3, #1
   151b2:	d1fa      	bne.n	151aa <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   151b4:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   151b6:	3838      	subs	r0, #56	; 0x38
   151b8:	f001 feae 	bl	16f18 <bt_conn_process_tx>
   151bc:	e7f5      	b.n	151aa <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   151be:	466c      	mov	r4, sp
   151c0:	b088      	sub	sp, #32
   151c2:	466a      	mov	r2, sp
   151c4:	4910      	ldr	r1, [pc, #64]	; (15208 <hci_tx_thread+0x188>)
   151c6:	480d      	ldr	r0, [pc, #52]	; (151fc <hci_tx_thread+0x17c>)
		switch (ev->state) {
   151c8:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   151cc:	f842 af10 	str.w	sl, [r2, #16]!
   151d0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   151d4:	f00a f886 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   151d8:	46a5      	mov	sp, r4
   151da:	e7e6      	b.n	151aa <hci_tx_thread+0x12a>
   151dc:	2000053c 	.word	0x2000053c
   151e0:	20000528 	.word	0x20000528
   151e4:	000231b6 	.word	0x000231b6
   151e8:	00023076 	.word	0x00023076
   151ec:	200004c4 	.word	0x200004c4
   151f0:	00023d62 	.word	0x00023d62
   151f4:	200004a0 	.word	0x200004a0
   151f8:	000232e7 	.word	0x000232e7
   151fc:	00021e64 	.word	0x00021e64
   15200:	000232c5 	.word	0x000232c5
   15204:	20002b6c 	.word	0x20002b6c
   15208:	00023302 	.word	0x00023302
   1520c:	00023029 	.word	0x00023029
   15210:	20000388 	.word	0x20000388

00015214 <hci_event_prio>:
{
   15214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15218:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1521a:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1521e:	4630      	mov	r0, r6
   15220:	f00b fbbd 	bl	2099e <net_buf_simple_headroom>
	state->len = buf->len;
   15224:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15228:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   1522c:	4605      	mov	r5, r0
   1522e:	d80c      	bhi.n	1524a <hci_event_prio+0x36>
   15230:	4a1c      	ldr	r2, [pc, #112]	; (152a4 <hci_event_prio+0x90>)
   15232:	491d      	ldr	r1, [pc, #116]	; (152a8 <hci_event_prio+0x94>)
   15234:	481d      	ldr	r0, [pc, #116]	; (152ac <hci_event_prio+0x98>)
   15236:	f640 537b 	movw	r3, #3451	; 0xd7b
   1523a:	f009 fa71 	bl	1e720 <assert_print>
   1523e:	4040      	eors	r0, r0
   15240:	f380 8811 	msr	BASEPRI, r0
   15244:	f04f 0003 	mov.w	r0, #3
   15248:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1524a:	4630      	mov	r0, r6
   1524c:	2102      	movs	r1, #2
   1524e:	f00b fb96 	bl	2097e <net_buf_simple_pull_mem>
   15252:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15254:	7800      	ldrb	r0, [r0, #0]
   15256:	f00a f820 	bl	1f29a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1525a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1525c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1525e:	d40c      	bmi.n	1527a <hci_event_prio+0x66>
   15260:	4a10      	ldr	r2, [pc, #64]	; (152a4 <hci_event_prio+0x90>)
   15262:	4913      	ldr	r1, [pc, #76]	; (152b0 <hci_event_prio+0x9c>)
   15264:	4811      	ldr	r0, [pc, #68]	; (152ac <hci_event_prio+0x98>)
   15266:	f640 537f 	movw	r3, #3455	; 0xd7f
   1526a:	f009 fa59 	bl	1e720 <assert_print>
   1526e:	4040      	eors	r0, r0
   15270:	f380 8811 	msr	BASEPRI, r0
   15274:	f04f 0003 	mov.w	r0, #3
   15278:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1527a:	2305      	movs	r3, #5
   1527c:	4a0d      	ldr	r2, [pc, #52]	; (152b4 <hci_event_prio+0xa0>)
   1527e:	7838      	ldrb	r0, [r7, #0]
   15280:	4621      	mov	r1, r4
   15282:	f7ff f897 	bl	143b4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15286:	07b3      	lsls	r3, r6, #30
   15288:	d507      	bpl.n	1529a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1528a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1528c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15290:	fa13 f585 	uxtah	r5, r3, r5
   15294:	60e5      	str	r5, [r4, #12]
}
   15296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1529a:	4620      	mov	r0, r4
}
   1529c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   152a0:	f003 bfa8 	b.w	191f4 <net_buf_unref>
   152a4:	00023029 	.word	0x00023029
   152a8:	0002305d 	.word	0x0002305d
   152ac:	00023076 	.word	0x00023076
   152b0:	00023323 	.word	0x00023323
   152b4:	000220c0 	.word	0x000220c0

000152b8 <bt_recv>:
{
   152b8:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   152ba:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   152bc:	2b01      	cmp	r3, #1
{
   152be:	af00      	add	r7, sp, #0
   152c0:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   152c2:	d006      	beq.n	152d2 <bt_recv+0x1a>
   152c4:	2b03      	cmp	r3, #3
   152c6:	d112      	bne.n	152ee <bt_recv+0x36>
			rx_queue_put(buf);
   152c8:	f7fe ffa0 	bl	1420c <rx_queue_put>
		return 0;
   152cc:	2000      	movs	r0, #0
}
   152ce:	46bd      	mov	sp, r7
   152d0:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   152d2:	68c3      	ldr	r3, [r0, #12]
   152d4:	7818      	ldrb	r0, [r3, #0]
   152d6:	f009 ffe0 	bl	1f29a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   152da:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   152dc:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   152de:	d502      	bpl.n	152e6 <bt_recv+0x2e>
			hci_event_prio(buf);
   152e0:	4620      	mov	r0, r4
   152e2:	f7ff ff97 	bl	15214 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   152e6:	07ab      	lsls	r3, r5, #30
   152e8:	d5f0      	bpl.n	152cc <bt_recv+0x14>
			rx_queue_put(buf);
   152ea:	4620      	mov	r0, r4
   152ec:	e7ec      	b.n	152c8 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   152ee:	466d      	mov	r5, sp
   152f0:	b088      	sub	sp, #32
   152f2:	466a      	mov	r2, sp
   152f4:	4908      	ldr	r1, [pc, #32]	; (15318 <bt_recv+0x60>)
   152f6:	4809      	ldr	r0, [pc, #36]	; (1531c <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   152f8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   152fc:	2303      	movs	r3, #3
   152fe:	f842 3f10 	str.w	r3, [r2, #16]!
   15302:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15306:	f009 ffed 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1530a:	4620      	mov	r0, r4
   1530c:	46ad      	mov	sp, r5
   1530e:	f003 ff71 	bl	191f4 <net_buf_unref>
		return -EINVAL;
   15312:	f06f 0015 	mvn.w	r0, #21
   15316:	e7da      	b.n	152ce <bt_recv+0x16>
   15318:	0002333c 	.word	0x0002333c
   1531c:	00021e64 	.word	0x00021e64

00015320 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15320:	4a08      	ldr	r2, [pc, #32]	; (15344 <bt_hci_driver_register+0x24>)
{
   15322:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   15324:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   15328:	b930      	cbnz	r0, 15338 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1532a:	68d9      	ldr	r1, [r3, #12]
   1532c:	b139      	cbz	r1, 1533e <bt_hci_driver_register+0x1e>
   1532e:	6959      	ldr	r1, [r3, #20]
   15330:	b129      	cbz	r1, 1533e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   15332:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   15336:	4770      	bx	lr
		return -EALREADY;
   15338:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1533c:	4770      	bx	lr
		return -EINVAL;
   1533e:	f06f 0015 	mvn.w	r0, #21
}
   15342:	4770      	bx	lr
   15344:	20000388 	.word	0x20000388

00015348 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15348:	4801      	ldr	r0, [pc, #4]	; (15350 <bt_finalize_init+0x8>)
   1534a:	2104      	movs	r1, #4
   1534c:	f009 bfbb 	b.w	1f2c6 <atomic_or>
   15350:	20000454 	.word	0x20000454

00015354 <bt_init>:
{
   15354:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   15356:	4dba      	ldr	r5, [pc, #744]	; (15640 <bt_init+0x2ec>)
   15358:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   1535c:	6899      	ldr	r1, [r3, #8]
   1535e:	f011 0101 	ands.w	r1, r1, #1
{
   15362:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   15364:	d121      	bne.n	153aa <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   15366:	aa02      	add	r2, sp, #8
   15368:	f640 4003 	movw	r0, #3075	; 0xc03
   1536c:	f7ff fb66 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   15370:	4604      	mov	r4, r0
   15372:	2800      	cmp	r0, #0
   15374:	d16c      	bne.n	15450 <bt_init+0xfc>
		hci_reset_complete(rsp);
   15376:	9802      	ldr	r0, [sp, #8]
	uint8_t status = buf->data[0];
   15378:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   1537a:	781b      	ldrb	r3, [r3, #0]
   1537c:	b99b      	cbnz	r3, 153a6 <bt_init+0x52>
   1537e:	f3bf 8f5b 	dmb	ish
   15382:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   15386:	f3bf 8f5b 	dmb	ish
   1538a:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1538e:	f003 0309 	and.w	r3, r3, #9
   15392:	f3bf 8f5b 	dmb	ish
   15396:	e852 1f00 	ldrex	r1, [r2]
   1539a:	e842 3400 	strex	r4, r3, [r2]
   1539e:	2c00      	cmp	r4, #0
   153a0:	d1f9      	bne.n	15396 <bt_init+0x42>
   153a2:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   153a6:	f003 ff25 	bl	191f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   153aa:	aa02      	add	r2, sp, #8
   153ac:	2100      	movs	r1, #0
   153ae:	f241 0003 	movw	r0, #4099	; 0x1003
   153b2:	f7ff fb43 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   153b6:	4604      	mov	r4, r0
   153b8:	2800      	cmp	r0, #0
   153ba:	d149      	bne.n	15450 <bt_init+0xfc>
	read_local_features_complete(rsp);
   153bc:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   153be:	48a1      	ldr	r0, [pc, #644]	; (15644 <bt_init+0x2f0>)
   153c0:	68f1      	ldr	r1, [r6, #12]
   153c2:	2208      	movs	r2, #8
   153c4:	3101      	adds	r1, #1
   153c6:	f009 fee8 	bl	1f19a <memcpy>
	net_buf_unref(rsp);
   153ca:	4630      	mov	r0, r6
   153cc:	f003 ff12 	bl	191f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   153d0:	4621      	mov	r1, r4
   153d2:	aa02      	add	r2, sp, #8
   153d4:	f241 0001 	movw	r0, #4097	; 0x1001
   153d8:	f7ff fb30 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   153dc:	4604      	mov	r4, r0
   153de:	2800      	cmp	r0, #0
   153e0:	d136      	bne.n	15450 <bt_init+0xfc>
	read_local_ver_complete(rsp);
   153e2:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   153e4:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   153e6:	785a      	ldrb	r2, [r3, #1]
   153e8:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   153ec:	885a      	ldrh	r2, [r3, #2]
   153ee:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   153f2:	791a      	ldrb	r2, [r3, #4]
   153f4:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   153f8:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   153fc:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   15400:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   15404:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   15408:	f003 fef4 	bl	191f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1540c:	4621      	mov	r1, r4
   1540e:	aa02      	add	r2, sp, #8
   15410:	f241 0002 	movw	r0, #4098	; 0x1002
   15414:	f7ff fb12 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   15418:	4604      	mov	r4, r0
   1541a:	b9c8      	cbnz	r0, 15450 <bt_init+0xfc>
	read_supported_commands_complete(rsp);
   1541c:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   1541e:	488a      	ldr	r0, [pc, #552]	; (15648 <bt_init+0x2f4>)
   15420:	68f1      	ldr	r1, [r6, #12]
   15422:	2240      	movs	r2, #64	; 0x40
   15424:	3101      	adds	r1, #1
   15426:	f009 feb8 	bl	1f19a <memcpy>
	net_buf_unref(rsp);
   1542a:	4630      	mov	r0, r6
   1542c:	f003 fee2 	bl	191f4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   15430:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   15434:	065e      	lsls	r6, r3, #25
   15436:	d40e      	bmi.n	15456 <bt_init+0x102>
		LOG_ERR("Non-LE capable controller detected!");
   15438:	4b84      	ldr	r3, [pc, #528]	; (1564c <bt_init+0x2f8>)
   1543a:	9307      	str	r3, [sp, #28]
   1543c:	4884      	ldr	r0, [pc, #528]	; (15650 <bt_init+0x2fc>)
   1543e:	2302      	movs	r3, #2
   15440:	aa06      	add	r2, sp, #24
   15442:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   15446:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   1544a:	9306      	str	r3, [sp, #24]
   1544c:	f009 ff4a 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
}
   15450:	4620      	mov	r0, r4
   15452:	b009      	add	sp, #36	; 0x24
   15454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   15456:	4621      	mov	r1, r4
   15458:	aa02      	add	r2, sp, #8
   1545a:	f242 0003 	movw	r0, #8195	; 0x2003
   1545e:	f7ff faed 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   15462:	4604      	mov	r4, r0
   15464:	2800      	cmp	r0, #0
   15466:	d1f3      	bne.n	15450 <bt_init+0xfc>
	read_le_features_complete(rsp);
   15468:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1546a:	487a      	ldr	r0, [pc, #488]	; (15654 <bt_init+0x300>)
   1546c:	68f1      	ldr	r1, [r6, #12]
   1546e:	2208      	movs	r2, #8
   15470:	3101      	adds	r1, #1
   15472:	f009 fe92 	bl	1f19a <memcpy>
	net_buf_unref(rsp);
   15476:	4630      	mov	r0, r6
   15478:	f003 febc 	bl	191f4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1547c:	4621      	mov	r1, r4
   1547e:	aa02      	add	r2, sp, #8
   15480:	f242 0002 	movw	r0, #8194	; 0x2002
   15484:	f7ff fada 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   15488:	4604      	mov	r4, r0
   1548a:	2800      	cmp	r0, #0
   1548c:	d1e0      	bne.n	15450 <bt_init+0xfc>
		le_read_buffer_size_complete(rsp);
   1548e:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   15490:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   15492:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15496:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1549a:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1549c:	b121      	cbz	r1, 154a8 <bt_init+0x154>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1549e:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   154a0:	486d      	ldr	r0, [pc, #436]	; (15658 <bt_init+0x304>)
   154a2:	4611      	mov	r1, r2
   154a4:	f00b ff0d 	bl	212c2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   154a8:	4620      	mov	r0, r4
   154aa:	f003 fea3 	bl	191f4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   154ae:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   154b2:	f016 0620 	ands.w	r6, r6, #32
   154b6:	d118      	bne.n	154ea <bt_init+0x196>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   154b8:	2102      	movs	r1, #2
   154ba:	f640 406d 	movw	r0, #3181	; 0xc6d
   154be:	f7ff fa83 	bl	149c8 <bt_hci_cmd_create>
		if (!buf) {
   154c2:	4604      	mov	r4, r0
   154c4:	2800      	cmp	r0, #0
   154c6:	f000 80a9 	beq.w	1561c <bt_init+0x2c8>
	return net_buf_simple_add(&buf->b, len);
   154ca:	2102      	movs	r1, #2
   154cc:	300c      	adds	r0, #12
   154ce:	f00b fa2f 	bl	20930 <net_buf_simple_add>
		cp_le->le = 0x01;
   154d2:	2301      	movs	r3, #1
   154d4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   154d6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   154d8:	4621      	mov	r1, r4
   154da:	4632      	mov	r2, r6
   154dc:	f640 406d 	movw	r0, #3181	; 0xc6d
   154e0:	f7ff faac 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   154e4:	4604      	mov	r4, r0
   154e6:	2800      	cmp	r0, #0
   154e8:	d1b2      	bne.n	15450 <bt_init+0xfc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   154ea:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   154ee:	071c      	lsls	r4, r3, #28
   154f0:	d512      	bpl.n	15518 <bt_init+0x1c4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   154f2:	aa02      	add	r2, sp, #8
   154f4:	2100      	movs	r1, #0
   154f6:	f242 001c 	movw	r0, #8220	; 0x201c
   154fa:	f7ff fa9f 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   154fe:	4604      	mov	r4, r0
   15500:	2800      	cmp	r0, #0
   15502:	d1a5      	bne.n	15450 <bt_init+0xfc>
		le_read_supp_states_complete(rsp);
   15504:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   15506:	68c3      	ldr	r3, [r0, #12]
   15508:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1550c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   15510:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   15514:	f003 fe6e 	bl	191f4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   15518:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1551c:	0698      	lsls	r0, r3, #26
   1551e:	d523      	bpl.n	15568 <bt_init+0x214>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15520:	a901      	add	r1, sp, #4
   15522:	f10d 0002 	add.w	r0, sp, #2
   15526:	f7ff fb05 	bl	14b34 <hci_le_read_max_data_len>
		if (err) {
   1552a:	4604      	mov	r4, r0
   1552c:	2800      	cmp	r0, #0
   1552e:	d18f      	bne.n	15450 <bt_init+0xfc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15530:	2104      	movs	r1, #4
   15532:	f242 0024 	movw	r0, #8228	; 0x2024
   15536:	f7ff fa47 	bl	149c8 <bt_hci_cmd_create>
		if (!buf) {
   1553a:	4606      	mov	r6, r0
   1553c:	2800      	cmp	r0, #0
   1553e:	d06d      	beq.n	1561c <bt_init+0x2c8>
   15540:	2104      	movs	r1, #4
   15542:	300c      	adds	r0, #12
   15544:	f00b f9f4 	bl	20930 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   15548:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1554c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1554e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15552:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15554:	4622      	mov	r2, r4
   15556:	4631      	mov	r1, r6
   15558:	f242 0024 	movw	r0, #8228	; 0x2024
   1555c:	f7ff fa6e 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   15560:	4604      	mov	r4, r0
   15562:	2800      	cmp	r0, #0
   15564:	f47f af74 	bne.w	15450 <bt_init+0xfc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   15568:	2108      	movs	r1, #8
   1556a:	f242 0001 	movw	r0, #8193	; 0x2001
   1556e:	f7ff fa2b 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   15572:	4604      	mov	r4, r0
   15574:	2800      	cmp	r0, #0
   15576:	d051      	beq.n	1561c <bt_init+0x2c8>
   15578:	2108      	movs	r1, #8
   1557a:	300c      	adds	r0, #12
   1557c:	f00b f9d8 	bl	20930 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   15580:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   15584:	f012 0f02 	tst.w	r2, #2
   15588:	bf14      	ite	ne
   1558a:	232f      	movne	r3, #47	; 0x2f
   1558c:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1558e:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   15590:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   15594:	bf48      	it	mi
   15596:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1559a:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1559e:	bf18      	it	ne
   155a0:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   155a4:	2200      	movs	r2, #0
   155a6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   155a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   155ac:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   155ae:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   155b0:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   155b2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   155b4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   155b6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   155b8:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   155ba:	4621      	mov	r1, r4
   155bc:	f242 0001 	movw	r0, #8193	; 0x2001
   155c0:	f7ff fa3c 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   155c4:	4604      	mov	r4, r0
   155c6:	2800      	cmp	r0, #0
   155c8:	f47f af42 	bne.w	15450 <bt_init+0xfc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   155cc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   155d0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   155d4:	069a      	lsls	r2, r3, #26
   155d6:	d424      	bmi.n	15622 <bt_init+0x2ce>
	if (bt_dev.le.acl_mtu) {
   155d8:	b9c9      	cbnz	r1, 1560e <bt_init+0x2ba>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   155da:	aa02      	add	r2, sp, #8
   155dc:	f241 0005 	movw	r0, #4101	; 0x1005
   155e0:	f7ff fa2c 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   155e4:	4604      	mov	r4, r0
   155e6:	2800      	cmp	r0, #0
   155e8:	f47f af32 	bne.w	15450 <bt_init+0xfc>
	if (bt_dev.le.acl_mtu) {
   155ec:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   155f0:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
   155f2:	b94b      	cbnz	r3, 15608 <bt_init+0x2b4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   155f4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   155f6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   155fa:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   155fe:	889a      	ldrh	r2, [r3, #4]
   15600:	4815      	ldr	r0, [pc, #84]	; (15658 <bt_init+0x304>)
   15602:	4611      	mov	r1, r2
   15604:	f00b fe5d 	bl	212c2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   15608:	4620      	mov	r0, r4
   1560a:	f003 fdf3 	bl	191f4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1560e:	2108      	movs	r1, #8
   15610:	f640 4001 	movw	r0, #3073	; 0xc01
   15614:	f7ff f9d8 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   15618:	4604      	mov	r4, r0
   1561a:	bb08      	cbnz	r0, 15660 <bt_init+0x30c>
		return -ENOBUFS;
   1561c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15620:	e716      	b.n	15450 <bt_init+0xfc>
	else if (!bt_dev.le.acl_mtu) {
   15622:	2900      	cmp	r1, #0
   15624:	d1f3      	bne.n	1560e <bt_init+0x2ba>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   15626:	4b0d      	ldr	r3, [pc, #52]	; (1565c <bt_init+0x308>)
   15628:	9307      	str	r3, [sp, #28]
   1562a:	4809      	ldr	r0, [pc, #36]	; (15650 <bt_init+0x2fc>)
   1562c:	2302      	movs	r3, #2
   1562e:	aa06      	add	r2, sp, #24
   15630:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15634:	9306      	str	r3, [sp, #24]
		return -EIO;
   15636:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1563a:	f009 fe53 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
	if (err) {
   1563e:	e707      	b.n	15450 <bt_init+0xfc>
   15640:	20000388 	.word	0x20000388
   15644:	200003f8 	.word	0x200003f8
   15648:	20000400 	.word	0x20000400
   1564c:	00023350 	.word	0x00023350
   15650:	00021e64 	.word	0x00021e64
   15654:	20000458 	.word	0x20000458
   15658:	20000488 	.word	0x20000488
   1565c:	00023374 	.word	0x00023374
   15660:	2108      	movs	r1, #8
   15662:	300c      	adds	r0, #12
   15664:	f00b f964 	bl	20930 <net_buf_simple_add>
	dst[0] = val;
   15668:	2310      	movs	r3, #16
   1566a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1566c:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   1566e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   15670:	7043      	strb	r3, [r0, #1]
   15672:	2602      	movs	r6, #2
   15674:	2320      	movs	r3, #32
	dst[0] = val;
   15676:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   15678:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   1567a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1567c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1567e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   15680:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   15682:	4621      	mov	r1, r4
   15684:	f640 4001 	movw	r0, #3073	; 0xc01
   15688:	f7ff f9d8 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   1568c:	4604      	mov	r4, r0
   1568e:	2800      	cmp	r0, #0
   15690:	f47f aede 	bne.w	15450 <bt_init+0xfc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   15694:	4601      	mov	r1, r0
   15696:	aa01      	add	r2, sp, #4
   15698:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1569c:	f7ff f9ce 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   156a0:	4604      	mov	r4, r0
   156a2:	b1b8      	cbz	r0, 156d4 <bt_init+0x380>
		LOG_WRN("Vendor HCI extensions not available");
   156a4:	4b23      	ldr	r3, [pc, #140]	; (15734 <bt_init+0x3e0>)
			LOG_WRN("Failed to read supported vendor features");
   156a6:	4824      	ldr	r0, [pc, #144]	; (15738 <bt_init+0x3e4>)
   156a8:	aa06      	add	r2, sp, #24
   156aa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   156ae:	e9cd 6306 	strd	r6, r3, [sp, #24]
   156b2:	f009 fe17 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   156b6:	f000 fb2b 	bl	15d10 <bt_id_init>
	if (err) {
   156ba:	4604      	mov	r4, r0
   156bc:	2800      	cmp	r0, #0
   156be:	f47f aec7 	bne.w	15450 <bt_init+0xfc>
		err = bt_conn_init();
   156c2:	f001 fc99 	bl	16ff8 <bt_conn_init>
		if (err) {
   156c6:	4604      	mov	r4, r0
   156c8:	2800      	cmp	r0, #0
   156ca:	f47f aec1 	bne.w	15450 <bt_init+0xfc>
	bt_finalize_init();
   156ce:	f7ff fe3b 	bl	15348 <bt_finalize_init>
	return 0;
   156d2:	e6bd      	b.n	15450 <bt_init+0xfc>
	net_buf_unref(rsp);
   156d4:	9801      	ldr	r0, [sp, #4]
   156d6:	f003 fd8d 	bl	191f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   156da:	4621      	mov	r1, r4
   156dc:	aa01      	add	r2, sp, #4
   156de:	f64f 4002 	movw	r0, #64514	; 0xfc02
   156e2:	f7ff f9ab 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   156e6:	4604      	mov	r4, r0
   156e8:	b108      	cbz	r0, 156ee <bt_init+0x39a>
		LOG_WRN("Failed to read supported vendor commands");
   156ea:	4b14      	ldr	r3, [pc, #80]	; (1573c <bt_init+0x3e8>)
   156ec:	e7db      	b.n	156a6 <bt_init+0x352>
	rp.cmds = (void *)rsp->data;
   156ee:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   156f0:	4813      	ldr	r0, [pc, #76]	; (15740 <bt_init+0x3ec>)
   156f2:	68f9      	ldr	r1, [r7, #12]
   156f4:	4632      	mov	r2, r6
   156f6:	3101      	adds	r1, #1
   156f8:	f009 fd4f 	bl	1f19a <memcpy>
	net_buf_unref(rsp);
   156fc:	4638      	mov	r0, r7
   156fe:	f003 fd79 	bl	191f4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   15702:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   15706:	075b      	lsls	r3, r3, #29
   15708:	d5d5      	bpl.n	156b6 <bt_init+0x362>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1570a:	aa01      	add	r2, sp, #4
   1570c:	4621      	mov	r1, r4
   1570e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   15712:	f7ff f993 	bl	14a3c <bt_hci_cmd_send_sync>
		if (err) {
   15716:	b108      	cbz	r0, 1571c <bt_init+0x3c8>
			LOG_WRN("Failed to read supported vendor features");
   15718:	4b0a      	ldr	r3, [pc, #40]	; (15744 <bt_init+0x3f0>)
   1571a:	e7c4      	b.n	156a6 <bt_init+0x352>
		rp.feat = (void *)rsp->data;
   1571c:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1571e:	480a      	ldr	r0, [pc, #40]	; (15748 <bt_init+0x3f4>)
   15720:	68e1      	ldr	r1, [r4, #12]
   15722:	2201      	movs	r2, #1
   15724:	4411      	add	r1, r2
   15726:	f009 fd38 	bl	1f19a <memcpy>
		net_buf_unref(rsp);
   1572a:	4620      	mov	r0, r4
   1572c:	f003 fd62 	bl	191f4 <net_buf_unref>
   15730:	e7c1      	b.n	156b6 <bt_init+0x362>
   15732:	bf00      	nop
   15734:	00023397 	.word	0x00023397
   15738:	00021e64 	.word	0x00021e64
   1573c:	000233bb 	.word	0x000233bb
   15740:	20000441 	.word	0x20000441
   15744:	000233e4 	.word	0x000233e4
   15748:	20000440 	.word	0x20000440

0001574c <init_work>:
{
   1574c:	b510      	push	{r4, lr}
	err = bt_init();
   1574e:	f7ff fe01 	bl	15354 <bt_init>
	if (ready_cb) {
   15752:	4b03      	ldr	r3, [pc, #12]	; (15760 <init_work+0x14>)
   15754:	681b      	ldr	r3, [r3, #0]
   15756:	b113      	cbz	r3, 1575e <init_work+0x12>
}
   15758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1575c:	4718      	bx	r3
}
   1575e:	bd10      	pop	{r4, pc}
   15760:	20002b84 	.word	0x20002b84

00015764 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15764:	4b04      	ldr	r3, [pc, #16]	; (15778 <bt_is_ready+0x14>)
   15766:	f3bf 8f5b 	dmb	ish
   1576a:	6818      	ldr	r0, [r3, #0]
   1576c:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   15770:	f3c0 0080 	ubfx	r0, r0, #2, #1
   15774:	4770      	bx	lr
   15776:	bf00      	nop
   15778:	20000454 	.word	0x20000454

0001577c <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   1577c:	b538      	push	{r3, r4, r5, lr}
   1577e:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   15780:	f009 fcdf 	bl	1f142 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   15784:	281c      	cmp	r0, #28
	size_t len = strlen(name);
   15786:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   15788:	d810      	bhi.n	157ac <bt_set_name+0x30>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   1578a:	480a      	ldr	r0, [pc, #40]	; (157b4 <bt_set_name+0x38>)
   1578c:	4629      	mov	r1, r5
   1578e:	f009 fce8 	bl	1f162 <strcmp>
   15792:	b148      	cbz	r0, 157a8 <bt_set_name+0x2c>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   15794:	4622      	mov	r2, r4
   15796:	4807      	ldr	r0, [pc, #28]	; (157b4 <bt_set_name+0x38>)
   15798:	4629      	mov	r1, r5
   1579a:	f009 fcbe 	bl	1f11a <strncpy>
	bt_dev.name[len] = '\0';
   1579e:	4b06      	ldr	r3, [pc, #24]	; (157b8 <bt_set_name+0x3c>)
   157a0:	4423      	add	r3, r4
   157a2:	2200      	movs	r2, #0
   157a4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		return 0;
   157a8:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   157aa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   157ac:	f06f 000b 	mvn.w	r0, #11
   157b0:	e7fb      	b.n	157aa <bt_set_name+0x2e>
   157b2:	bf00      	nop
   157b4:	200004e0 	.word	0x200004e0
   157b8:	20000388 	.word	0x20000388

000157bc <bt_enable>:
{
   157bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.drv) {
   157be:	4e44      	ldr	r6, [pc, #272]	; (158d0 <bt_enable+0x114>)
{
   157c0:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   157c2:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
{
   157c6:	af08      	add	r7, sp, #32
   157c8:	4605      	mov	r5, r0
	if (!bt_dev.drv) {
   157ca:	b983      	cbnz	r3, 157ee <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   157cc:	4b41      	ldr	r3, [pc, #260]	; (158d4 <bt_enable+0x118>)
   157ce:	617b      	str	r3, [r7, #20]
   157d0:	2302      	movs	r3, #2
   157d2:	4841      	ldr	r0, [pc, #260]	; (158d8 <bt_enable+0x11c>)
   157d4:	613b      	str	r3, [r7, #16]
   157d6:	f107 0210 	add.w	r2, r7, #16
   157da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   157de:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   157e2:	f009 fd7f 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
}
   157e6:	4620      	mov	r0, r4
   157e8:	371c      	adds	r7, #28
   157ea:	46bd      	mov	sp, r7
   157ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   157ee:	f06f 0102 	mvn.w	r1, #2
   157f2:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   157f6:	f009 fd78 	bl	1f2ea <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   157fa:	2101      	movs	r1, #1
   157fc:	f009 fd63 	bl	1f2c6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15800:	07c3      	lsls	r3, r0, #31
   15802:	d462      	bmi.n	158ca <bt_enable+0x10e>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   15804:	4835      	ldr	r0, [pc, #212]	; (158dc <bt_enable+0x120>)
   15806:	f7ff ffb9 	bl	1577c <bt_set_name>
		if (err) {
   1580a:	b170      	cbz	r0, 1582a <bt_enable+0x6e>
			LOG_WRN("Failed to set device name (%d)", err);
   1580c:	466c      	mov	r4, sp
   1580e:	4622      	mov	r2, r4
   15810:	b088      	sub	sp, #32
   15812:	4b33      	ldr	r3, [pc, #204]	; (158e0 <bt_enable+0x124>)
   15814:	e9c4 3005 	strd	r3, r0, [r4, #20]
   15818:	2303      	movs	r3, #3
   1581a:	f842 3f10 	str.w	r3, [r2, #16]!
   1581e:	482e      	ldr	r0, [pc, #184]	; (158d8 <bt_enable+0x11c>)
   15820:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15824:	f009 fd5e 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   15828:	46a5      	mov	sp, r4
	ready_cb = cb;
   1582a:	4b2e      	ldr	r3, [pc, #184]	; (158e4 <bt_enable+0x128>)
   1582c:	601d      	str	r5, [r3, #0]
   1582e:	2201      	movs	r2, #1
   15830:	4611      	mov	r1, r2
   15832:	482d      	ldr	r0, [pc, #180]	; (158e8 <bt_enable+0x12c>)
   15834:	f00b fd45 	bl	212c2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   15838:	482c      	ldr	r0, [pc, #176]	; (158ec <bt_enable+0x130>)
   1583a:	f00b fd21 	bl	21280 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1583e:	2200      	movs	r2, #0
   15840:	2300      	movs	r3, #0
   15842:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15846:	2400      	movs	r4, #0
   15848:	f06f 0308 	mvn.w	r3, #8
   1584c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   15850:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15854:	4b26      	ldr	r3, [pc, #152]	; (158f0 <bt_enable+0x134>)
   15856:	4927      	ldr	r1, [pc, #156]	; (158f4 <bt_enable+0x138>)
   15858:	9400      	str	r4, [sp, #0]
   1585a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1585e:	4826      	ldr	r0, [pc, #152]	; (158f8 <bt_enable+0x13c>)
   15860:	f006 feee 	bl	1c640 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15864:	4925      	ldr	r1, [pc, #148]	; (158fc <bt_enable+0x140>)
   15866:	4824      	ldr	r0, [pc, #144]	; (158f8 <bt_enable+0x13c>)
   15868:	f00b fc82 	bl	21170 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1586c:	4824      	ldr	r0, [pc, #144]	; (15900 <bt_enable+0x144>)
   1586e:	f00b fde8 	bl	21442 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   15872:	4924      	ldr	r1, [pc, #144]	; (15904 <bt_enable+0x148>)
   15874:	4822      	ldr	r0, [pc, #136]	; (15900 <bt_enable+0x144>)
   15876:	9400      	str	r4, [sp, #0]
   15878:	f06f 0307 	mvn.w	r3, #7
   1587c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15880:	f007 f952 	bl	1cb28 <k_work_queue_start>
   15884:	4920      	ldr	r1, [pc, #128]	; (15908 <bt_enable+0x14c>)
   15886:	481e      	ldr	r0, [pc, #120]	; (15900 <bt_enable+0x144>)
   15888:	f00b fc72 	bl	21170 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1588c:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   15890:	68db      	ldr	r3, [r3, #12]
   15892:	4798      	blx	r3
	if (err) {
   15894:	4604      	mov	r4, r0
   15896:	b178      	cbz	r0, 158b8 <bt_enable+0xfc>
		LOG_ERR("HCI driver open failed (%d)", err);
   15898:	466d      	mov	r5, sp
   1589a:	462a      	mov	r2, r5
   1589c:	b088      	sub	sp, #32
   1589e:	4b1b      	ldr	r3, [pc, #108]	; (1590c <bt_enable+0x150>)
   158a0:	e9c5 3005 	strd	r3, r0, [r5, #20]
   158a4:	2303      	movs	r3, #3
   158a6:	f842 3f10 	str.w	r3, [r2, #16]!
   158aa:	480b      	ldr	r0, [pc, #44]	; (158d8 <bt_enable+0x11c>)
   158ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   158b0:	f009 fd18 	bl	1f2e4 <z_log_msg_static_create.constprop.0>
   158b4:	46ad      	mov	sp, r5
		return err;
   158b6:	e796      	b.n	157e6 <bt_enable+0x2a>
	if (!cb) {
   158b8:	b91d      	cbnz	r5, 158c2 <bt_enable+0x106>
		return bt_init();
   158ba:	f7ff fd4b 	bl	15354 <bt_init>
   158be:	4604      	mov	r4, r0
   158c0:	e791      	b.n	157e6 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   158c2:	4813      	ldr	r0, [pc, #76]	; (15910 <bt_enable+0x154>)
   158c4:	f007 f92a 	bl	1cb1c <k_work_submit>
	return 0;
   158c8:	e78d      	b.n	157e6 <bt_enable+0x2a>
		return -EALREADY;
   158ca:	f06f 0477 	mvn.w	r4, #119	; 0x77
   158ce:	e78a      	b.n	157e6 <bt_enable+0x2a>
   158d0:	20000388 	.word	0x20000388
   158d4:	0002340d 	.word	0x0002340d
   158d8:	00021e64 	.word	0x00021e64
   158dc:	00023443 	.word	0x00023443
   158e0:	00023459 	.word	0x00023459
   158e4:	20002b84 	.word	0x20002b84
   158e8:	200004a0 	.word	0x200004a0
   158ec:	200004c4 	.word	0x200004c4
   158f0:	00015081 	.word	0x00015081
   158f4:	20003e80 	.word	0x20003e80
   158f8:	20001ba8 	.word	0x20001ba8
   158fc:	00023478 	.word	0x00023478
   15900:	20001c70 	.word	0x20001c70
   15904:	20004500 	.word	0x20004500
   15908:	0002347e 	.word	0x0002347e
   1590c:	00023484 	.word	0x00023484
   15910:	20000444 	.word	0x20000444

00015914 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15914:	4800      	ldr	r0, [pc, #0]	; (15918 <bt_get_name+0x4>)
   15916:	4770      	bx	lr
   15918:	200004e0 	.word	0x200004e0

0001591c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1591e:	4f0a      	ldr	r7, [pc, #40]	; (15948 <id_find+0x2c>)
{
   15920:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   15922:	2500      	movs	r5, #0
   15924:	79fb      	ldrb	r3, [r7, #7]
   15926:	b2ec      	uxtb	r4, r5
   15928:	42a3      	cmp	r3, r4
   1592a:	d802      	bhi.n	15932 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1592c:	f06f 0001 	mvn.w	r0, #1
   15930:	e009      	b.n	15946 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   15932:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   15936:	4439      	add	r1, r7
   15938:	4630      	mov	r0, r6
   1593a:	f009 fd87 	bl	1f44c <bt_addr_le_eq>
   1593e:	3501      	adds	r5, #1
   15940:	2800      	cmp	r0, #0
   15942:	d0ef      	beq.n	15924 <id_find+0x8>
   15944:	4620      	mov	r0, r4
}
   15946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15948:	20000388 	.word	0x20000388

0001594c <set_random_address>:
{
   1594c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1594e:	4913      	ldr	r1, [pc, #76]	; (1599c <set_random_address+0x50>)
   15950:	2206      	movs	r2, #6
   15952:	4605      	mov	r5, r0
   15954:	f009 fc11 	bl	1f17a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15958:	b1d8      	cbz	r0, 15992 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1595a:	2106      	movs	r1, #6
   1595c:	f242 0005 	movw	r0, #8197	; 0x2005
   15960:	f7ff f832 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   15964:	4604      	mov	r4, r0
   15966:	b1b0      	cbz	r0, 15996 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15968:	2206      	movs	r2, #6
   1596a:	4629      	mov	r1, r5
   1596c:	300c      	adds	r0, #12
   1596e:	f00a ffe5 	bl	2093c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15972:	2200      	movs	r2, #0
   15974:	4621      	mov	r1, r4
   15976:	f242 0005 	movw	r0, #8197	; 0x2005
   1597a:	f7ff f85f 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   1597e:	b948      	cbnz	r0, 15994 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   15980:	2206      	movs	r2, #6
   15982:	4806      	ldr	r0, [pc, #24]	; (1599c <set_random_address+0x50>)
   15984:	4629      	mov	r1, r5
   15986:	f009 fc08 	bl	1f19a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1598a:	4b05      	ldr	r3, [pc, #20]	; (159a0 <set_random_address+0x54>)
   1598c:	2201      	movs	r2, #1
   1598e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   15992:	2000      	movs	r0, #0
}
   15994:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   15996:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1599a:	e7fb      	b.n	15994 <set_random_address+0x48>
   1599c:	200003e9 	.word	0x200003e9
   159a0:	20000388 	.word	0x20000388

000159a4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   159a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   159a6:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   159a8:	460d      	mov	r5, r1
   159aa:	b179      	cbz	r1, 159cc <id_create.constprop.0+0x28>
   159ac:	4914      	ldr	r1, [pc, #80]	; (15a00 <id_create.constprop.0+0x5c>)
   159ae:	4628      	mov	r0, r5
   159b0:	f009 fd4c 	bl	1f44c <bt_addr_le_eq>
   159b4:	b950      	cbnz	r0, 159cc <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   159b6:	4813      	ldr	r0, [pc, #76]	; (15a04 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   159b8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   159bc:	2207      	movs	r2, #7
   159be:	4629      	mov	r1, r5
   159c0:	4420      	add	r0, r4
   159c2:	f009 fbea 	bl	1f19a <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   159c6:	2000      	movs	r0, #0
}
   159c8:	b003      	add	sp, #12
   159ca:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   159cc:	4668      	mov	r0, sp
   159ce:	f009 fc56 	bl	1f27e <bt_addr_le_create_static>
			if (err) {
   159d2:	2800      	cmp	r0, #0
   159d4:	d1f8      	bne.n	159c8 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   159d6:	4668      	mov	r0, sp
   159d8:	f7ff ffa0 	bl	1591c <id_find>
   159dc:	2800      	cmp	r0, #0
   159de:	daf5      	bge.n	159cc <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   159e0:	4b08      	ldr	r3, [pc, #32]	; (15a04 <id_create.constprop.0+0x60>)
   159e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   159e6:	441c      	add	r4, r3
   159e8:	2207      	movs	r2, #7
   159ea:	4669      	mov	r1, sp
   159ec:	4620      	mov	r0, r4
   159ee:	f009 fbd4 	bl	1f19a <memcpy>
		if (addr) {
   159f2:	2d00      	cmp	r5, #0
   159f4:	d0e7      	beq.n	159c6 <id_create.constprop.0+0x22>
   159f6:	2207      	movs	r2, #7
   159f8:	4621      	mov	r1, r4
   159fa:	4628      	mov	r0, r5
   159fc:	e7e1      	b.n	159c2 <id_create.constprop.0+0x1e>
   159fe:	bf00      	nop
   15a00:	00022e74 	.word	0x00022e74
   15a04:	20000388 	.word	0x20000388

00015a08 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15a08:	b570      	push	{r4, r5, r6, lr}
   15a0a:	460d      	mov	r5, r1
   15a0c:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15a0e:	4604      	mov	r4, r0
   15a10:	b920      	cbnz	r0, 15a1c <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15a12:	b31d      	cbz	r5, 15a5c <bt_id_create+0x54>
			return -EINVAL;
   15a14:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   15a18:	b006      	add	sp, #24
   15a1a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15a1c:	4921      	ldr	r1, [pc, #132]	; (15aa4 <bt_id_create+0x9c>)
   15a1e:	f009 fd15 	bl	1f44c <bt_addr_le_eq>
   15a22:	2800      	cmp	r0, #0
   15a24:	d1f5      	bne.n	15a12 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15a26:	7823      	ldrb	r3, [r4, #0]
   15a28:	2b01      	cmp	r3, #1
   15a2a:	d104      	bne.n	15a36 <bt_id_create+0x2e>
   15a2c:	79a3      	ldrb	r3, [r4, #6]
   15a2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15a32:	2bc0      	cmp	r3, #192	; 0xc0
   15a34:	d00a      	beq.n	15a4c <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   15a36:	4b1c      	ldr	r3, [pc, #112]	; (15aa8 <bt_id_create+0xa0>)
   15a38:	9305      	str	r3, [sp, #20]
   15a3a:	481c      	ldr	r0, [pc, #112]	; (15aac <bt_id_create+0xa4>)
   15a3c:	2302      	movs	r3, #2
   15a3e:	aa04      	add	r2, sp, #16
   15a40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a44:	9304      	str	r3, [sp, #16]
   15a46:	f009 fd09 	bl	1f45c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   15a4a:	e7e3      	b.n	15a14 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   15a4c:	4620      	mov	r0, r4
   15a4e:	f7ff ff65 	bl	1591c <id_find>
   15a52:	2800      	cmp	r0, #0
   15a54:	dbdd      	blt.n	15a12 <bt_id_create+0xa>
			return -EALREADY;
   15a56:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15a5a:	e7dd      	b.n	15a18 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   15a5c:	4d14      	ldr	r5, [pc, #80]	; (15ab0 <bt_id_create+0xa8>)
   15a5e:	79eb      	ldrb	r3, [r5, #7]
   15a60:	2b01      	cmp	r3, #1
   15a62:	d01c      	beq.n	15a9e <bt_id_create+0x96>
   15a64:	f3bf 8f5b 	dmb	ish
   15a68:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   15a6c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15a70:	07db      	lsls	r3, r3, #31
   15a72:	d50b      	bpl.n	15a8c <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   15a74:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   15a76:	4621      	mov	r1, r4
   15a78:	4630      	mov	r0, r6
   15a7a:	f7ff ff93 	bl	159a4 <id_create.constprop.0>
	if (err) {
   15a7e:	2800      	cmp	r0, #0
   15a80:	d1ca      	bne.n	15a18 <bt_id_create+0x10>
		bt_dev.id_count++;
   15a82:	79eb      	ldrb	r3, [r5, #7]
   15a84:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   15a86:	4630      	mov	r0, r6
		bt_dev.id_count++;
   15a88:	71eb      	strb	r3, [r5, #7]
	return new_id;
   15a8a:	e7c5      	b.n	15a18 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   15a8c:	2c00      	cmp	r4, #0
   15a8e:	d0c1      	beq.n	15a14 <bt_id_create+0xc>
   15a90:	4904      	ldr	r1, [pc, #16]	; (15aa4 <bt_id_create+0x9c>)
   15a92:	4620      	mov	r0, r4
   15a94:	f009 fcda 	bl	1f44c <bt_addr_le_eq>
   15a98:	2800      	cmp	r0, #0
   15a9a:	d0eb      	beq.n	15a74 <bt_id_create+0x6c>
   15a9c:	e7ba      	b.n	15a14 <bt_id_create+0xc>
		return -ENOMEM;
   15a9e:	f06f 000b 	mvn.w	r0, #11
   15aa2:	e7b9      	b.n	15a18 <bt_id_create+0x10>
   15aa4:	00022e74 	.word	0x00022e74
   15aa8:	000234ac 	.word	0x000234ac
   15aac:	00021e6c 	.word	0x00021e6c
   15ab0:	20000388 	.word	0x20000388

00015ab4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   15ab4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   15ab6:	4604      	mov	r4, r0
{
   15ab8:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   15aba:	b960      	cbnz	r0, 15ad6 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   15abc:	4b1a      	ldr	r3, [pc, #104]	; (15b28 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   15abe:	9307      	str	r3, [sp, #28]
   15ac0:	481a      	ldr	r0, [pc, #104]	; (15b2c <bt_id_read_public_addr+0x78>)
   15ac2:	2302      	movs	r3, #2
   15ac4:	aa06      	add	r2, sp, #24
   15ac6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15aca:	9306      	str	r3, [sp, #24]
   15acc:	f009 fcc6 	bl	1f45c <z_log_msg_static_create.constprop.0>
		return 0U;
   15ad0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   15ad2:	b008      	add	sp, #32
   15ad4:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   15ad6:	aa01      	add	r2, sp, #4
   15ad8:	2100      	movs	r1, #0
   15ada:	f241 0009 	movw	r0, #4105	; 0x1009
   15ade:	f7fe ffad 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   15ae2:	4606      	mov	r6, r0
   15ae4:	b108      	cbz	r0, 15aea <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   15ae6:	4b12      	ldr	r3, [pc, #72]	; (15b30 <bt_id_read_public_addr+0x7c>)
   15ae8:	e7e9      	b.n	15abe <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   15aea:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   15aec:	4911      	ldr	r1, [pc, #68]	; (15b34 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15aee:	68dd      	ldr	r5, [r3, #12]
   15af0:	3501      	adds	r5, #1
   15af2:	2206      	movs	r2, #6
   15af4:	4628      	mov	r0, r5
   15af6:	f009 fb40 	bl	1f17a <memcmp>
   15afa:	b918      	cbnz	r0, 15b04 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   15afc:	9801      	ldr	r0, [sp, #4]
   15afe:	f003 fb79 	bl	191f4 <net_buf_unref>
		return 0U;
   15b02:	e7e5      	b.n	15ad0 <bt_id_read_public_addr+0x1c>
   15b04:	490c      	ldr	r1, [pc, #48]	; (15b38 <bt_id_read_public_addr+0x84>)
   15b06:	2206      	movs	r2, #6
   15b08:	4628      	mov	r0, r5
   15b0a:	f009 fb36 	bl	1f17a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15b0e:	2800      	cmp	r0, #0
   15b10:	d0f4      	beq.n	15afc <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   15b12:	2206      	movs	r2, #6
   15b14:	4629      	mov	r1, r5
   15b16:	1c60      	adds	r0, r4, #1
   15b18:	f009 fb3f 	bl	1f19a <memcpy>
	net_buf_unref(rsp);
   15b1c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   15b1e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   15b20:	f003 fb68 	bl	191f4 <net_buf_unref>
	return 1U;
   15b24:	2001      	movs	r0, #1
   15b26:	e7d4      	b.n	15ad2 <bt_id_read_public_addr+0x1e>
   15b28:	000234da 	.word	0x000234da
   15b2c:	00021e6c 	.word	0x00021e6c
   15b30:	000234f3 	.word	0x000234f3
   15b34:	00022e81 	.word	0x00022e81
   15b38:	00022e7b 	.word	0x00022e7b

00015b3c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   15b3c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   15b3e:	4668      	mov	r0, sp
   15b40:	f7ff ffb8 	bl	15ab4 <bt_id_read_public_addr>
   15b44:	4b04      	ldr	r3, [pc, #16]	; (15b58 <bt_setup_public_id_addr+0x1c>)
   15b46:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   15b48:	b118      	cbz	r0, 15b52 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   15b4a:	4669      	mov	r1, sp
   15b4c:	2000      	movs	r0, #0
   15b4e:	f7ff ff29 	bl	159a4 <id_create.constprop.0>
}
   15b52:	b003      	add	sp, #12
   15b54:	f85d fb04 	ldr.w	pc, [sp], #4
   15b58:	20000388 	.word	0x20000388

00015b5c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   15b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15b60:	4b22      	ldr	r3, [pc, #136]	; (15bec <bt_read_static_addr+0x90>)
   15b62:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   15b66:	07db      	lsls	r3, r3, #31
{
   15b68:	b088      	sub	sp, #32
   15b6a:	4607      	mov	r7, r0
   15b6c:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15b6e:	d40e      	bmi.n	15b8e <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   15b70:	4b1f      	ldr	r3, [pc, #124]	; (15bf0 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   15b72:	9307      	str	r3, [sp, #28]
   15b74:	481f      	ldr	r0, [pc, #124]	; (15bf4 <bt_read_static_addr+0x98>)
   15b76:	2302      	movs	r3, #2
   15b78:	aa06      	add	r2, sp, #24
   15b7a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   15b7e:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   15b80:	9306      	str	r3, [sp, #24]
   15b82:	f009 fc6b 	bl	1f45c <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   15b86:	4628      	mov	r0, r5
   15b88:	b008      	add	sp, #32
   15b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   15b8e:	aa01      	add	r2, sp, #4
   15b90:	2100      	movs	r1, #0
   15b92:	f64f 4009 	movw	r0, #64521	; 0xfc09
   15b96:	f7fe ff51 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   15b9a:	4604      	mov	r4, r0
   15b9c:	b108      	cbz	r0, 15ba2 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   15b9e:	4b16      	ldr	r3, [pc, #88]	; (15bf8 <bt_read_static_addr+0x9c>)
   15ba0:	e7e7      	b.n	15b72 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   15ba2:	9b01      	ldr	r3, [sp, #4]
   15ba4:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   15ba6:	7875      	ldrb	r5, [r6, #1]
   15ba8:	4545      	cmp	r5, r8
   15baa:	bf28      	it	cs
   15bac:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   15bae:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   15bb0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   15bb4:	42a5      	cmp	r5, r4
   15bb6:	dc0f      	bgt.n	15bd8 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   15bb8:	9801      	ldr	r0, [sp, #4]
   15bba:	f003 fb1b 	bl	191f4 <net_buf_unref>
	if (!cnt) {
   15bbe:	2d00      	cmp	r5, #0
   15bc0:	d1e1      	bne.n	15b86 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   15bc2:	4b0e      	ldr	r3, [pc, #56]	; (15bfc <bt_read_static_addr+0xa0>)
   15bc4:	9307      	str	r3, [sp, #28]
   15bc6:	480b      	ldr	r0, [pc, #44]	; (15bf4 <bt_read_static_addr+0x98>)
   15bc8:	2302      	movs	r3, #2
   15bca:	aa06      	add	r2, sp, #24
   15bcc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15bd0:	9306      	str	r3, [sp, #24]
   15bd2:	f009 fc43 	bl	1f45c <z_log_msg_static_create.constprop.0>
   15bd6:	e7d6      	b.n	15b86 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   15bd8:	4631      	mov	r1, r6
   15bda:	fb08 7004 	mla	r0, r8, r4, r7
   15bde:	2216      	movs	r2, #22
   15be0:	f009 fadb 	bl	1f19a <memcpy>
	for (i = 0; i < cnt; i++) {
   15be4:	3401      	adds	r4, #1
   15be6:	3616      	adds	r6, #22
   15be8:	e7e4      	b.n	15bb4 <bt_read_static_addr+0x58>
   15bea:	bf00      	nop
   15bec:	20000388 	.word	0x20000388
   15bf0:	00023511 	.word	0x00023511
   15bf4:	00021e6c 	.word	0x00021e6c
   15bf8:	0002353d 	.word	0x0002353d
   15bfc:	0002355d 	.word	0x0002355d

00015c00 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   15c00:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   15c02:	4e15      	ldr	r6, [pc, #84]	; (15c58 <bt_setup_random_id_addr+0x58>)
   15c04:	79f4      	ldrb	r4, [r6, #7]
{
   15c06:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   15c08:	b92c      	cbnz	r4, 15c16 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15c0a:	2101      	movs	r1, #1
   15c0c:	a802      	add	r0, sp, #8
   15c0e:	f7ff ffa5 	bl	15b5c <bt_read_static_addr>
   15c12:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   15c14:	b9c8      	cbnz	r0, 15c4a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15c16:	2100      	movs	r1, #0
   15c18:	4608      	mov	r0, r1
}
   15c1a:	b009      	add	sp, #36	; 0x24
   15c1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   15c20:	f7ff bef2 	b.w	15a08 <bt_id_create>
   15c24:	ab02      	add	r3, sp, #8
   15c26:	fb07 3105 	mla	r1, r7, r5, r3
   15c2a:	2206      	movs	r2, #6
   15c2c:	f10d 0001 	add.w	r0, sp, #1
   15c30:	f009 fab3 	bl	1f19a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   15c34:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   15c36:	4669      	mov	r1, sp
   15c38:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   15c3a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   15c3e:	f7ff feb1 	bl	159a4 <id_create.constprop.0>
				if (err) {
   15c42:	3401      	adds	r4, #1
   15c44:	b110      	cbz	r0, 15c4c <bt_setup_random_id_addr+0x4c>
}
   15c46:	b009      	add	sp, #36	; 0x24
   15c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15c4a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15c4c:	79f3      	ldrb	r3, [r6, #7]
   15c4e:	b2e5      	uxtb	r5, r4
   15c50:	42ab      	cmp	r3, r5
   15c52:	d8e7      	bhi.n	15c24 <bt_setup_random_id_addr+0x24>
			return 0;
   15c54:	2000      	movs	r0, #0
   15c56:	e7f6      	b.n	15c46 <bt_setup_random_id_addr+0x46>
   15c58:	20000388 	.word	0x20000388

00015c5c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   15c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c60:	4690      	mov	r8, r2
   15c62:	460e      	mov	r6, r1
   15c64:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   15c66:	4602      	mov	r2, r0
   15c68:	2800      	cmp	r0, #0
   15c6a:	d04b      	beq.n	15d04 <bt_id_set_adv_own_addr+0xa8>
   15c6c:	2b00      	cmp	r3, #0
   15c6e:	d049      	beq.n	15d04 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15c70:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   15c72:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15c74:	d531      	bpl.n	15cda <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   15c76:	4f25      	ldr	r7, [pc, #148]	; (15d0c <bt_id_set_adv_own_addr+0xb0>)
   15c78:	f1b8 0f00 	cmp.w	r8, #0
   15c7c:	d013      	beq.n	15ca6 <bt_id_set_adv_own_addr+0x4a>
   15c7e:	0688      	lsls	r0, r1, #26
   15c80:	d40a      	bmi.n	15c98 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15c82:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   15c86:	5cfb      	ldrb	r3, [r7, r3]
   15c88:	2b01      	cmp	r3, #1
   15c8a:	d015      	beq.n	15cb8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   15c8c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15c8e:	06b2      	lsls	r2, r6, #26
   15c90:	d50f      	bpl.n	15cb2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15c92:	f043 0302 	orr.w	r3, r3, #2
   15c96:	e00b      	b.n	15cb0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   15c98:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   15c9c:	0659      	lsls	r1, r3, #25
   15c9e:	d4f0      	bmi.n	15c82 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   15ca0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15ca4:	e006      	b.n	15cb4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15ca6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   15caa:	5cfb      	ldrb	r3, [r7, r3]
   15cac:	2b01      	cmp	r3, #1
   15cae:	d003      	beq.n	15cb8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   15cb0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   15cb2:	2000      	movs	r0, #0
}
   15cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   15cb8:	2107      	movs	r1, #7
   15cba:	fb01 7104 	mla	r1, r1, r4, r7
   15cbe:	3101      	adds	r1, #1
   15cc0:	4610      	mov	r0, r2
   15cc2:	f009 fbd3 	bl	1f46c <bt_id_set_adv_random_addr>
				if (err) {
   15cc6:	2800      	cmp	r0, #0
   15cc8:	d1f4      	bne.n	15cb4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   15cca:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15cce:	5d3b      	ldrb	r3, [r7, r4]
   15cd0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15cd2:	f1b8 0f00 	cmp.w	r8, #0
   15cd6:	d0ec      	beq.n	15cb2 <bt_id_set_adv_own_addr+0x56>
   15cd8:	e7d9      	b.n	15c8e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   15cda:	074b      	lsls	r3, r1, #29
   15cdc:	d50e      	bpl.n	15cfc <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15cde:	4e0b      	ldr	r6, [pc, #44]	; (15d0c <bt_id_set_adv_own_addr+0xb0>)
   15ce0:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   15ce4:	5df3      	ldrb	r3, [r6, r7]
   15ce6:	2b01      	cmp	r3, #1
   15ce8:	d1e2      	bne.n	15cb0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   15cea:	2107      	movs	r1, #7
   15cec:	fb11 3104 	smlabb	r1, r1, r4, r3
   15cf0:	4431      	add	r1, r6
   15cf2:	f009 fbbb 	bl	1f46c <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   15cf6:	5df3      	ldrb	r3, [r6, r7]
   15cf8:	702b      	strb	r3, [r5, #0]
		if (err) {
   15cfa:	e7db      	b.n	15cb4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   15cfc:	f009 fbbe 	bl	1f47c <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15d00:	2301      	movs	r3, #1
   15d02:	e7f9      	b.n	15cf8 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   15d04:	f06f 0015 	mvn.w	r0, #21
   15d08:	e7d4      	b.n	15cb4 <bt_id_set_adv_own_addr+0x58>
   15d0a:	bf00      	nop
   15d0c:	20000388 	.word	0x20000388

00015d10 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   15d10:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15d12:	4d13      	ldr	r5, [pc, #76]	; (15d60 <bt_id_init+0x50>)
   15d14:	79eb      	ldrb	r3, [r5, #7]
{
   15d16:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15d18:	b11b      	cbz	r3, 15d22 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   15d1a:	2400      	movs	r4, #0
}
   15d1c:	4620      	mov	r0, r4
   15d1e:	b007      	add	sp, #28
   15d20:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   15d22:	f7ff ff0b 	bl	15b3c <bt_setup_public_id_addr>
		if (err) {
   15d26:	4604      	mov	r4, r0
   15d28:	b150      	cbz	r0, 15d40 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   15d2a:	4b0e      	ldr	r3, [pc, #56]	; (15d64 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   15d2c:	9305      	str	r3, [sp, #20]
   15d2e:	480e      	ldr	r0, [pc, #56]	; (15d68 <bt_id_init+0x58>)
   15d30:	2302      	movs	r3, #2
   15d32:	aa04      	add	r2, sp, #16
   15d34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15d38:	9304      	str	r3, [sp, #16]
   15d3a:	f009 fb8f 	bl	1f45c <z_log_msg_static_create.constprop.0>
			return err;
   15d3e:	e7ed      	b.n	15d1c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15d40:	79eb      	ldrb	r3, [r5, #7]
   15d42:	2b00      	cmp	r3, #0
   15d44:	d1e9      	bne.n	15d1a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   15d46:	f7ff ff5b 	bl	15c00 <bt_setup_random_id_addr>
		if (err) {
   15d4a:	4604      	mov	r4, r0
   15d4c:	2800      	cmp	r0, #0
   15d4e:	d1ec      	bne.n	15d2a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   15d50:	1c68      	adds	r0, r5, #1
   15d52:	f7ff fdfb 	bl	1594c <set_random_address>
		if (err) {
   15d56:	4604      	mov	r4, r0
   15d58:	2800      	cmp	r0, #0
   15d5a:	d0df      	beq.n	15d1c <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   15d5c:	4b03      	ldr	r3, [pc, #12]	; (15d6c <bt_id_init+0x5c>)
   15d5e:	e7e5      	b.n	15d2c <bt_id_init+0x1c>
   15d60:	20000388 	.word	0x20000388
   15d64:	00023586 	.word	0x00023586
   15d68:	00021e6c 	.word	0x00021e6c
   15d6c:	000235a5 	.word	0x000235a5

00015d70 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   15d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d74:	b089      	sub	sp, #36	; 0x24
   15d76:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15d78:	2120      	movs	r1, #32
{
   15d7a:	9000      	str	r0, [sp, #0]
   15d7c:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15d7e:	f7fe fe23 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   15d82:	4605      	mov	r5, r0
   15d84:	2800      	cmp	r0, #0
   15d86:	d05b      	beq.n	15e40 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   15d88:	2120      	movs	r1, #32
   15d8a:	300c      	adds	r0, #12
   15d8c:	f00a fdd0 	bl	20930 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   15d90:	2220      	movs	r2, #32
   15d92:	2100      	movs	r1, #0
   15d94:	4681      	mov	r9, r0
   15d96:	f009 fa0b 	bl	1f1b0 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   15d9a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   15d9e:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   15da2:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   15da4:	f8d4 8000 	ldr.w	r8, [r4]
   15da8:	2300      	movs	r3, #0
   15daa:	6862      	ldr	r2, [r4, #4]
   15dac:	4293      	cmp	r3, r2
   15dae:	d30c      	bcc.n	15dca <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   15db0:	3408      	adds	r4, #8
   15db2:	45a2      	cmp	sl, r4
   15db4:	d1f6      	bne.n	15da4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15db6:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   15db8:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15dbc:	2200      	movs	r2, #0
   15dbe:	4629      	mov	r1, r5
}
   15dc0:	b009      	add	sp, #36	; 0x24
   15dc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15dc6:	f7fe be39 	b.w	14a3c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   15dca:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   15dce:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   15dd2:	1cb0      	adds	r0, r6, #2
   15dd4:	1811      	adds	r1, r2, r0
   15dd6:	291f      	cmp	r1, #31
   15dd8:	d91b      	bls.n	15e12 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   15dda:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   15dde:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   15de2:	d101      	bne.n	15de8 <hci_set_ad+0x78>
   15de4:	2a00      	cmp	r2, #0
   15de6:	dc12      	bgt.n	15e0e <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   15de8:	4b17      	ldr	r3, [pc, #92]	; (15e48 <hci_set_ad+0xd8>)
   15dea:	9307      	str	r3, [sp, #28]
   15dec:	2302      	movs	r3, #2
   15dee:	9306      	str	r3, [sp, #24]
   15df0:	4816      	ldr	r0, [pc, #88]	; (15e4c <hci_set_ad+0xdc>)
   15df2:	2300      	movs	r3, #0
   15df4:	aa06      	add	r2, sp, #24
   15df6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15dfa:	f7fc fc27 	bl	1264c <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   15dfe:	4628      	mov	r0, r5
   15e00:	f003 f9f8 	bl	191f4 <net_buf_unref>
					return -EINVAL;
   15e04:	f06f 0015 	mvn.w	r0, #21
}
   15e08:	b009      	add	sp, #36	; 0x24
   15e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   15e0e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   15e12:	b2d7      	uxtb	r7, r2
   15e14:	1c79      	adds	r1, r7, #1
   15e16:	f80b 1006 	strb.w	r1, [fp, r6]
   15e1a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   15e1c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   15e1e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   15e22:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   15e26:	f8d8 1004 	ldr.w	r1, [r8, #4]
   15e2a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   15e2c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   15e2e:	f009 f9b4 	bl	1f19a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   15e32:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   15e34:	4437      	add	r7, r6
   15e36:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   15e38:	3301      	adds	r3, #1
   15e3a:	f108 0808 	add.w	r8, r8, #8
   15e3e:	e7b4      	b.n	15daa <hci_set_ad+0x3a>
		return -ENOBUFS;
   15e40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15e44:	e7e0      	b.n	15e08 <hci_set_ad+0x98>
   15e46:	bf00      	nop
   15e48:	000235c8 	.word	0x000235c8
   15e4c:	00021e44 	.word	0x00021e44

00015e50 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   15e50:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   15e52:	4605      	mov	r5, r0
   15e54:	4b16      	ldr	r3, [pc, #88]	; (15eb0 <le_adv_start_add_conn+0x60>)
   15e56:	f815 2b09 	ldrb.w	r2, [r5], #9
   15e5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   15e5e:	4604      	mov	r4, r0
   15e60:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   15e62:	2207      	movs	r2, #7
   15e64:	4913      	ldr	r1, [pc, #76]	; (15eb4 <le_adv_start_add_conn+0x64>)
   15e66:	4628      	mov	r0, r5
   15e68:	f009 f987 	bl	1f17a <memcmp>
   15e6c:	4603      	mov	r3, r0
   15e6e:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15e70:	b96b      	cbnz	r3, 15e8e <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   15e72:	4911      	ldr	r1, [pc, #68]	; (15eb8 <le_adv_start_add_conn+0x68>)
   15e74:	f000 febe 	bl	16bf4 <bt_conn_add_le>
		if (!conn) {
   15e78:	4604      	mov	r4, r0
   15e7a:	b910      	cbnz	r0, 15e82 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   15e7c:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   15e80:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   15e82:	2104      	movs	r1, #4
   15e84:	f000 fd18 	bl	168b8 <bt_conn_set_state>
		*out_conn = conn;
   15e88:	6034      	str	r4, [r6, #0]
		return 0;
   15e8a:	2000      	movs	r0, #0
   15e8c:	e7f8      	b.n	15e80 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15e8e:	4629      	mov	r1, r5
   15e90:	f000 fee4 	bl	16c5c <bt_conn_exists_le>
   15e94:	b940      	cbnz	r0, 15ea8 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   15e96:	7820      	ldrb	r0, [r4, #0]
   15e98:	4629      	mov	r1, r5
   15e9a:	f000 feab 	bl	16bf4 <bt_conn_add_le>
	if (!conn) {
   15e9e:	4604      	mov	r4, r0
   15ea0:	2800      	cmp	r0, #0
   15ea2:	d0eb      	beq.n	15e7c <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   15ea4:	2105      	movs	r1, #5
   15ea6:	e7ed      	b.n	15e84 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   15ea8:	f06f 0015 	mvn.w	r0, #21
   15eac:	e7e8      	b.n	15e80 <le_adv_start_add_conn+0x30>
   15eae:	bf00      	nop
   15eb0:	20000388 	.word	0x20000388
   15eb4:	00022e74 	.word	0x00022e74
   15eb8:	00022e6d 	.word	0x00022e6d

00015ebc <valid_adv_param>:
{
   15ebc:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15ebe:	6843      	ldr	r3, [r0, #4]
{
   15ec0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15ec2:	0558      	lsls	r0, r3, #21
   15ec4:	d501      	bpl.n	15eca <valid_adv_param+0xe>
		return false;
   15ec6:	2000      	movs	r0, #0
}
   15ec8:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15eca:	6922      	ldr	r2, [r4, #16]
   15ecc:	b10a      	cbz	r2, 15ed2 <valid_adv_param+0x16>
   15ece:	07d9      	lsls	r1, r3, #31
   15ed0:	d5f9      	bpl.n	15ec6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   15ed2:	4d19      	ldr	r5, [pc, #100]	; (15f38 <valid_adv_param+0x7c>)
   15ed4:	7820      	ldrb	r0, [r4, #0]
   15ed6:	79eb      	ldrb	r3, [r5, #7]
   15ed8:	4283      	cmp	r3, r0
   15eda:	d9f4      	bls.n	15ec6 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   15edc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15ee0:	4916      	ldr	r1, [pc, #88]	; (15f3c <valid_adv_param+0x80>)
   15ee2:	2207      	movs	r2, #7
   15ee4:	4428      	add	r0, r5
   15ee6:	f009 f948 	bl	1f17a <memcmp>
	if (param->id >= bt_dev.id_count ||
   15eea:	2800      	cmp	r0, #0
   15eec:	d0eb      	beq.n	15ec6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15eee:	6860      	ldr	r0, [r4, #4]
   15ef0:	07c2      	lsls	r2, r0, #31
   15ef2:	d406      	bmi.n	15f02 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   15ef4:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   15ef8:	2b08      	cmp	r3, #8
   15efa:	d802      	bhi.n	15f02 <valid_adv_param+0x46>
   15efc:	68a3      	ldr	r3, [r4, #8]
   15efe:	2b9f      	cmp	r3, #159	; 0x9f
   15f00:	d9e1      	bls.n	15ec6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   15f02:	f010 0f30 	tst.w	r0, #48	; 0x30
   15f06:	d002      	beq.n	15f0e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   15f08:	6923      	ldr	r3, [r4, #16]
   15f0a:	2b00      	cmp	r3, #0
   15f0c:	d0db      	beq.n	15ec6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15f0e:	06c3      	lsls	r3, r0, #27
   15f10:	d401      	bmi.n	15f16 <valid_adv_param+0x5a>
   15f12:	6923      	ldr	r3, [r4, #16]
   15f14:	b943      	cbnz	r3, 15f28 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   15f16:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   15f1a:	429a      	cmp	r2, r3
   15f1c:	d8d3      	bhi.n	15ec6 <valid_adv_param+0xa>
   15f1e:	2a1f      	cmp	r2, #31
   15f20:	d9d1      	bls.n	15ec6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   15f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15f26:	d8ce      	bhi.n	15ec6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   15f28:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   15f2c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   15f30:	bf18      	it	ne
   15f32:	2001      	movne	r0, #1
   15f34:	e7c8      	b.n	15ec8 <valid_adv_param+0xc>
   15f36:	bf00      	nop
   15f38:	20000388 	.word	0x20000388
   15f3c:	00022e74 	.word	0x00022e74

00015f40 <bt_le_adv_lookup_legacy>:
}
   15f40:	4800      	ldr	r0, [pc, #0]	; (15f44 <bt_le_adv_lookup_legacy+0x4>)
   15f42:	4770      	bx	lr
   15f44:	200003a0 	.word	0x200003a0

00015f48 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   15f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f4c:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   15f4e:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   15f52:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   15f54:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   15f56:	ebba 0403 	subs.w	r4, sl, r3
{
   15f5a:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15f5c:	4892      	ldr	r0, [pc, #584]	; (161a8 <bt_le_adv_start_legacy+0x260>)
	struct bt_conn *conn = NULL;
   15f5e:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   15f60:	bf18      	it	ne
   15f62:	2401      	movne	r4, #1
   15f64:	f009 fab4 	bl	1f4d0 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15f68:	0747      	lsls	r7, r0, #29
{
   15f6a:	460d      	mov	r5, r1
   15f6c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15f6e:	f140 8112 	bpl.w	16196 <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15f72:	4608      	mov	r0, r1
   15f74:	f7ff ffa2 	bl	15ebc <valid_adv_param>
   15f78:	b928      	cbnz	r0, 15f86 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   15f7a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   15f7e:	4620      	mov	r0, r4
   15f80:	b013      	add	sp, #76	; 0x4c
   15f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   15f86:	4628      	mov	r0, r5
   15f88:	f009 fa8f 	bl	1f4aa <bt_id_adv_random_addr_check>
   15f8c:	4681      	mov	r9, r0
   15f8e:	2800      	cmp	r0, #0
   15f90:	d0f3      	beq.n	15f7a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15f92:	f106 0810 	add.w	r8, r6, #16
   15f96:	4640      	mov	r0, r8
   15f98:	f009 fa9a 	bl	1f4d0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15f9c:	f3c0 17c0 	ubfx	r7, r0, #7, #1
   15fa0:	0600      	lsls	r0, r0, #24
   15fa2:	f100 80fb 	bmi.w	1619c <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
   15fa6:	220f      	movs	r2, #15
   15fa8:	4639      	mov	r1, r7
   15faa:	a808      	add	r0, sp, #32
   15fac:	f009 f900 	bl	1f1b0 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15fb0:	68ab      	ldr	r3, [r5, #8]
   15fb2:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15fb6:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15fb8:	68eb      	ldr	r3, [r5, #12]
   15fba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   15fbe:	f009 fa78 	bl	1f4b2 <get_adv_channel_map>
	if (adv->id != param->id) {
   15fc2:	7832      	ldrb	r2, [r6, #0]
   15fc4:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15fc6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   15fca:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   15fcc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   15fd0:	d004      	beq.n	15fdc <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15fd2:	4875      	ldr	r0, [pc, #468]	; (161a8 <bt_le_adv_start_legacy+0x260>)
   15fd4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   15fd8:	f009 fa80 	bl	1f4dc <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   15fdc:	4a73      	ldr	r2, [pc, #460]	; (161ac <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
   15fde:	782b      	ldrb	r3, [r5, #0]
   15fe0:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   15fe2:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   15fe6:	6869      	ldr	r1, [r5, #4]
   15fe8:	4622      	mov	r2, r4
   15fea:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   15fee:	4630      	mov	r0, r6
   15ff0:	f7ff fe34 	bl	15c5c <bt_id_set_adv_own_addr>
	if (err) {
   15ff4:	4604      	mov	r4, r0
   15ff6:	2800      	cmp	r0, #0
   15ff8:	d1c1      	bne.n	15f7e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   15ffa:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   15ffe:	2207      	movs	r2, #7
	if (dir_adv) {
   16000:	f1ba 0f00 	cmp.w	sl, #0
   16004:	d013      	beq.n	1602e <bt_le_adv_start_legacy+0xe6>
   16006:	6929      	ldr	r1, [r5, #16]
   16008:	f009 f8c7 	bl	1f19a <memcpy>
	name_type = get_adv_name_type_param(param);
   1600c:	4628      	mov	r0, r5
   1600e:	f009 fb04 	bl	1f61a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16012:	686b      	ldr	r3, [r5, #4]
   16014:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   16016:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16018:	d416      	bmi.n	16048 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1601a:	059b      	lsls	r3, r3, #22
   1601c:	d403      	bmi.n	16026 <bt_le_adv_start_legacy+0xde>
   1601e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16020:	b90b      	cbnz	r3, 16026 <bt_le_adv_start_legacy+0xde>
   16022:	2f02      	cmp	r7, #2
   16024:	d15a      	bne.n	160dc <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   16026:	2302      	movs	r3, #2
   16028:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1602c:	e01a      	b.n	16064 <bt_le_adv_start_legacy+0x11c>
   1602e:	4960      	ldr	r1, [pc, #384]	; (161b0 <bt_le_adv_start_legacy+0x268>)
   16030:	f009 f8b3 	bl	1f19a <memcpy>
	name_type = get_adv_name_type_param(param);
   16034:	4628      	mov	r0, r5
   16036:	f009 faf0 	bl	1f61a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1603a:	686b      	ldr	r3, [r5, #4]
   1603c:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   1603e:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16040:	d5eb      	bpl.n	1601a <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   16042:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   16046:	e00d      	b.n	16064 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   16048:	f013 0f10 	tst.w	r3, #16
   1604c:	bf0c      	ite	eq
   1604e:	2301      	moveq	r3, #1
   16050:	2304      	movne	r3, #4
   16052:	6929      	ldr	r1, [r5, #16]
   16054:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16058:	2207      	movs	r2, #7
   1605a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1605e:	f009 f89c 	bl	1f19a <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   16062:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   16064:	210f      	movs	r1, #15
   16066:	f242 0006 	movw	r0, #8198	; 0x2006
   1606a:	f7fe fcad 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   1606e:	4604      	mov	r4, r0
   16070:	2800      	cmp	r0, #0
   16072:	f000 8096 	beq.w	161a2 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16076:	220f      	movs	r2, #15
   16078:	a908      	add	r1, sp, #32
   1607a:	300c      	adds	r0, #12
   1607c:	f00a fc5e 	bl	2093c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   16080:	4621      	mov	r1, r4
   16082:	2200      	movs	r2, #0
   16084:	f242 0006 	movw	r0, #8198	; 0x2006
   16088:	f7fe fcd8 	bl	14a3c <bt_hci_cmd_send_sync>
	if (err) {
   1608c:	4604      	mov	r4, r0
   1608e:	2800      	cmp	r0, #0
   16090:	f47f af75 	bne.w	15f7e <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   16094:	f1ba 0f00 	cmp.w	sl, #0
   16098:	d026      	beq.n	160e8 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1609a:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1609c:	07dc      	lsls	r4, r3, #31
   1609e:	d431      	bmi.n	16104 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
   160a0:	2101      	movs	r1, #1
   160a2:	4630      	mov	r0, r6
   160a4:	f009 fac9 	bl	1f63a <bt_le_adv_set_enable_legacy>
	if (err) {
   160a8:	4604      	mov	r4, r0
   160aa:	2800      	cmp	r0, #0
   160ac:	d06b      	beq.n	16186 <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
   160ae:	4b41      	ldr	r3, [pc, #260]	; (161b4 <bt_le_adv_start_legacy+0x26c>)
   160b0:	9311      	str	r3, [sp, #68]	; 0x44
   160b2:	2302      	movs	r3, #2
   160b4:	9310      	str	r3, [sp, #64]	; 0x40
   160b6:	4840      	ldr	r0, [pc, #256]	; (161b8 <bt_le_adv_start_legacy+0x270>)
   160b8:	2300      	movs	r3, #0
   160ba:	aa10      	add	r2, sp, #64	; 0x40
   160bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   160c0:	f7fc fac4 	bl	1264c <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   160c4:	9d07      	ldr	r5, [sp, #28]
   160c6:	2d00      	cmp	r5, #0
   160c8:	f43f af59 	beq.w	15f7e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   160cc:	4628      	mov	r0, r5
   160ce:	2100      	movs	r1, #0
   160d0:	f000 fbf2 	bl	168b8 <bt_conn_set_state>
			bt_conn_unref(conn);
   160d4:	4628      	mov	r0, r5
   160d6:	f009 fb26 	bl	1f726 <bt_conn_unref>
   160da:	e750      	b.n	15f7e <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   160dc:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   160de:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   160e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   160e6:	e7bd      	b.n	16064 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   160e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   160ea:	9300      	str	r3, [sp, #0]
   160ec:	e9cd 9701 	strd	r9, r7, [sp, #4]
   160f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   160f2:	9a05      	ldr	r2, [sp, #20]
   160f4:	4659      	mov	r1, fp
   160f6:	4630      	mov	r0, r6
   160f8:	f009 fa18 	bl	1f52c <le_adv_update.constprop.0>
		if (err) {
   160fc:	4604      	mov	r4, r0
   160fe:	2800      	cmp	r0, #0
   16100:	d0cb      	beq.n	1609a <bt_le_adv_start_legacy+0x152>
   16102:	e73c      	b.n	15f7e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   16104:	a907      	add	r1, sp, #28
   16106:	4630      	mov	r0, r6
   16108:	f7ff fea2 	bl	15e50 <le_adv_start_add_conn>
		if (err) {
   1610c:	4604      	mov	r4, r0
   1610e:	2800      	cmp	r0, #0
   16110:	d0c6      	beq.n	160a0 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   16112:	f110 0f0c 	cmn.w	r0, #12
   16116:	f47f af32 	bne.w	15f7e <bt_le_adv_start_legacy+0x36>
   1611a:	f1ba 0f00 	cmp.w	sl, #0
   1611e:	f47f af2e 	bne.w	15f7e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   16122:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   16124:	0798      	lsls	r0, r3, #30
   16126:	f53f af2a 	bmi.w	15f7e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1612a:	686c      	ldr	r4, [r5, #4]
   1612c:	f084 0402 	eor.w	r4, r4, #2
   16130:	f3c4 0440 	ubfx	r4, r4, #1, #1
   16134:	f004 0201 	and.w	r2, r4, #1
   16138:	210e      	movs	r1, #14
   1613a:	4640      	mov	r0, r8
   1613c:	f009 f9dd 	bl	1f4fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   16140:	1e7b      	subs	r3, r7, #1
   16142:	425a      	negs	r2, r3
   16144:	415a      	adcs	r2, r3
   16146:	2108      	movs	r1, #8
   16148:	4640      	mov	r0, r8
   1614a:	f009 f9d6 	bl	1f4fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1614e:	1eb9      	subs	r1, r7, #2
   16150:	424a      	negs	r2, r1
   16152:	414a      	adcs	r2, r1
   16154:	4640      	mov	r0, r8
   16156:	2109      	movs	r1, #9
   16158:	f009 f9cf 	bl	1f4fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1615c:	686a      	ldr	r2, [r5, #4]
   1615e:	210a      	movs	r1, #10
   16160:	f002 0201 	and.w	r2, r2, #1
   16164:	4640      	mov	r0, r8
   16166:	f009 f9c8 	bl	1f4fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1616a:	464a      	mov	r2, r9
   1616c:	210b      	movs	r1, #11
   1616e:	4640      	mov	r0, r8
   16170:	f009 f9c3 	bl	1f4fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   16174:	686a      	ldr	r2, [r5, #4]
   16176:	210d      	movs	r1, #13
   16178:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1617c:	4640      	mov	r0, r8
   1617e:	f009 f9bc 	bl	1f4fa <atomic_set_bit_to>
	return 0;
   16182:	2400      	movs	r4, #0
   16184:	e6fb      	b.n	15f7e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16186:	9807      	ldr	r0, [sp, #28]
   16188:	b108      	cbz	r0, 1618e <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
   1618a:	f009 facc 	bl	1f726 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1618e:	f1ba 0f00 	cmp.w	sl, #0
   16192:	d1cf      	bne.n	16134 <bt_le_adv_start_legacy+0x1ec>
   16194:	e7c9      	b.n	1612a <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
   16196:	f06f 040a 	mvn.w	r4, #10
   1619a:	e6f0      	b.n	15f7e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1619c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   161a0:	e6ed      	b.n	15f7e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   161a2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   161a6:	e6ea      	b.n	15f7e <bt_le_adv_start_legacy+0x36>
   161a8:	20000454 	.word	0x20000454
   161ac:	20000388 	.word	0x20000388
   161b0:	00022e74 	.word	0x00022e74
   161b4:	000235e1 	.word	0x000235e1
   161b8:	00021e44 	.word	0x00021e44

000161bc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   161bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   161be:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   161c0:	9a06      	ldr	r2, [sp, #24]
{
   161c2:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   161c4:	e9cd 3200 	strd	r3, r2, [sp]
   161c8:	462b      	mov	r3, r5
   161ca:	460a      	mov	r2, r1
   161cc:	4601      	mov	r1, r0
   161ce:	4811      	ldr	r0, [pc, #68]	; (16214 <bt_le_adv_start+0x58>)
   161d0:	f7ff feba 	bl	15f48 <bt_le_adv_start_legacy>
   161d4:	4621      	mov	r1, r4
   161d6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   161d8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   161da:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   161de:	429d      	cmp	r5, r3
   161e0:	d102      	bne.n	161e8 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   161e2:	4630      	mov	r0, r6
   161e4:	b002      	add	sp, #8
   161e6:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   161e8:	880a      	ldrh	r2, [r1, #0]
   161ea:	4282      	cmp	r2, r0
   161ec:	d104      	bne.n	161f8 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   161ee:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   161f0:	b112      	cbz	r2, 161f8 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   161f2:	7812      	ldrb	r2, [r2, #0]
   161f4:	07d2      	lsls	r2, r2, #31
   161f6:	d402      	bmi.n	161fe <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   161f8:	3301      	adds	r3, #1
   161fa:	3108      	adds	r1, #8
   161fc:	e7ef      	b.n	161de <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   161fe:	4906      	ldr	r1, [pc, #24]	; (16218 <bt_le_adv_start+0x5c>)
   16200:	4806      	ldr	r0, [pc, #24]	; (1621c <bt_le_adv_start+0x60>)
   16202:	f00b f924 	bl	2144e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16206:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1620a:	2300      	movs	r3, #0
   1620c:	4803      	ldr	r0, [pc, #12]	; (1621c <bt_le_adv_start+0x60>)
   1620e:	f006 fd21 	bl	1cc54 <k_work_reschedule>
   16212:	e7e6      	b.n	161e2 <bt_le_adv_start+0x26>
   16214:	200003a0 	.word	0x200003a0
   16218:	000162a5 	.word	0x000162a5
   1621c:	200003b8 	.word	0x200003b8

00016220 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16220:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   16222:	481a      	ldr	r0, [pc, #104]	; (1628c <bt_le_adv_stop+0x6c>)
   16224:	f009 fa2e 	bl	1f684 <bt_le_lim_adv_cancel_timeout>
   16228:	4819      	ldr	r0, [pc, #100]	; (16290 <bt_le_adv_stop+0x70>)
   1622a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1622e:	f009 f955 	bl	1f4dc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16232:	4817      	ldr	r0, [pc, #92]	; (16290 <bt_le_adv_stop+0x70>)
   16234:	f009 f94c 	bl	1f4d0 <atomic_get>
   16238:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1623a:	061a      	lsls	r2, r3, #24
   1623c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   16240:	d523      	bpl.n	1628a <bt_le_adv_stop+0x6a>
   16242:	4813      	ldr	r0, [pc, #76]	; (16290 <bt_le_adv_stop+0x70>)
   16244:	f009 f944 	bl	1f4d0 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16248:	0543      	lsls	r3, r0, #21
   1624a:	d514      	bpl.n	16276 <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   1624c:	4911      	ldr	r1, [pc, #68]	; (16294 <bt_le_adv_stop+0x74>)
   1624e:	4812      	ldr	r0, [pc, #72]	; (16298 <bt_le_adv_stop+0x78>)
   16250:	2207      	movs	r2, #7
   16252:	f008 ff92 	bl	1f17a <memcmp>
   16256:	4b11      	ldr	r3, [pc, #68]	; (1629c <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16258:	b998      	cbnz	r0, 16282 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1625a:	4911      	ldr	r1, [pc, #68]	; (162a0 <bt_le_adv_stop+0x80>)
   1625c:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1625e:	7e18      	ldrb	r0, [r3, #24]
   16260:	f000 fd2c 	bl	16cbc <bt_conn_lookup_state_le>
   16264:	4604      	mov	r4, r0
	if (conn) {
   16266:	b130      	cbz	r0, 16276 <bt_le_adv_stop+0x56>
		conn->err = status;
   16268:	2100      	movs	r1, #0
   1626a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1626c:	f000 fb24 	bl	168b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   16270:	4620      	mov	r0, r4
   16272:	f009 fa58 	bl	1f726 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1627a:	4804      	ldr	r0, [pc, #16]	; (1628c <bt_le_adv_stop+0x6c>)
   1627c:	2100      	movs	r1, #0
   1627e:	f009 b9dc 	b.w	1f63a <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16282:	2205      	movs	r2, #5
   16284:	f103 0121 	add.w	r1, r3, #33	; 0x21
   16288:	e7e9      	b.n	1625e <bt_le_adv_stop+0x3e>
}
   1628a:	bd10      	pop	{r4, pc}
   1628c:	200003a0 	.word	0x200003a0
   16290:	200003b0 	.word	0x200003b0
   16294:	00022e74 	.word	0x00022e74
   16298:	200003a9 	.word	0x200003a9
   1629c:	20000388 	.word	0x20000388
   162a0:	00022e6d 	.word	0x00022e6d

000162a4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   162a4:	b580      	push	{r7, lr}
   162a6:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   162a8:	f7ff ffba 	bl	16220 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   162ac:	b088      	sub	sp, #32
   162ae:	466a      	mov	r2, sp
   162b0:	4b06      	ldr	r3, [pc, #24]	; (162cc <adv_timeout+0x28>)
   162b2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   162b6:	2303      	movs	r3, #3
   162b8:	f842 3f10 	str.w	r3, [r2, #16]!
   162bc:	4804      	ldr	r0, [pc, #16]	; (162d0 <adv_timeout+0x2c>)
   162be:	2300      	movs	r3, #0
   162c0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   162c4:	f7fc f9c2 	bl	1264c <z_impl_z_log_msg_static_create>
}
   162c8:	46bd      	mov	sp, r7
   162ca:	bd80      	pop	{r7, pc}
   162cc:	000235fc 	.word	0x000235fc
   162d0:	00021e44 	.word	0x00021e44

000162d4 <bt_le_adv_resume>:
{
   162d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   162d6:	4c20      	ldr	r4, [pc, #128]	; (16358 <bt_le_adv_resume+0x84>)
   162d8:	4620      	mov	r0, r4
   162da:	f009 f8f9 	bl	1f4d0 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   162de:	0440      	lsls	r0, r0, #17
   162e0:	d538      	bpl.n	16354 <bt_le_adv_resume+0x80>
   162e2:	4620      	mov	r0, r4
   162e4:	f009 f8f4 	bl	1f4d0 <atomic_get>
   162e8:	0601      	lsls	r1, r0, #24
   162ea:	d433      	bmi.n	16354 <bt_le_adv_resume+0x80>
   162ec:	4620      	mov	r0, r4
   162ee:	f009 f8ef 	bl	1f4d0 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   162f2:	0542      	lsls	r2, r0, #21
   162f4:	d52e      	bpl.n	16354 <bt_le_adv_resume+0x80>
	err = le_adv_start_add_conn(adv, &conn);
   162f6:	a901      	add	r1, sp, #4
   162f8:	f1a4 0010 	sub.w	r0, r4, #16
   162fc:	f7ff fda8 	bl	15e50 <le_adv_start_add_conn>
	if (err) {
   16300:	4605      	mov	r5, r0
   16302:	bb38      	cbnz	r0, 16354 <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16304:	2101      	movs	r1, #1
   16306:	f1a4 0010 	sub.w	r0, r4, #16
   1630a:	f009 f996 	bl	1f63a <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1630e:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   16310:	b928      	cbnz	r0, 1631e <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   16312:	4630      	mov	r0, r6
}
   16314:	b002      	add	sp, #8
   16316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1631a:	f009 ba04 	b.w	1f726 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1631e:	4629      	mov	r1, r5
   16320:	4630      	mov	r0, r6
   16322:	f000 fac9 	bl	168b8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16326:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1632a:	4620      	mov	r0, r4
   1632c:	f009 f8d6 	bl	1f4dc <atomic_and>
   16330:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   16332:	4630      	mov	r0, r6
   16334:	f009 f9f7 	bl	1f726 <bt_conn_unref>
	if (persist_paused) {
   16338:	046b      	lsls	r3, r5, #17
   1633a:	d50b      	bpl.n	16354 <bt_le_adv_resume+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1633c:	f3bf 8f5b 	dmb	ish
   16340:	e854 3f00 	ldrex	r3, [r4]
   16344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   16348:	e844 3200 	strex	r2, r3, [r4]
   1634c:	2a00      	cmp	r2, #0
   1634e:	d1f7      	bne.n	16340 <bt_le_adv_resume+0x6c>
   16350:	f3bf 8f5b 	dmb	ish
}
   16354:	b002      	add	sp, #8
   16356:	bd70      	pop	{r4, r5, r6, pc}
   16358:	200003b0 	.word	0x200003b0

0001635c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1635c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1635e:	4b0b      	ldr	r3, [pc, #44]	; (1638c <notify_connected+0x30>)
   16360:	681d      	ldr	r5, [r3, #0]
{
   16362:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16364:	b925      	cbnz	r5, 16370 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16366:	4d0a      	ldr	r5, [pc, #40]	; (16390 <notify_connected+0x34>)
   16368:	4e0a      	ldr	r6, [pc, #40]	; (16394 <notify_connected+0x38>)
   1636a:	42b5      	cmp	r5, r6
   1636c:	d307      	bcc.n	1637e <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1636e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   16370:	682b      	ldr	r3, [r5, #0]
   16372:	b113      	cbz	r3, 1637a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   16374:	7a61      	ldrb	r1, [r4, #9]
   16376:	4620      	mov	r0, r4
   16378:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1637a:	692d      	ldr	r5, [r5, #16]
   1637c:	e7f2      	b.n	16364 <notify_connected+0x8>
		if (cb->connected) {
   1637e:	682b      	ldr	r3, [r5, #0]
   16380:	b113      	cbz	r3, 16388 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   16382:	7a61      	ldrb	r1, [r4, #9]
   16384:	4620      	mov	r0, r4
   16386:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16388:	3514      	adds	r5, #20
   1638a:	e7ee      	b.n	1636a <notify_connected+0xe>
   1638c:	20002bb8 	.word	0x20002bb8
   16390:	00021e08 	.word	0x00021e08
   16394:	00021e1c 	.word	0x00021e1c

00016398 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   16398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
   1639a:	4b07      	ldr	r3, [pc, #28]	; (163b8 <bt_conn_create_pdu_timeout.part.0+0x20>)
   1639c:	9305      	str	r3, [sp, #20]
   1639e:	4807      	ldr	r0, [pc, #28]	; (163bc <bt_conn_create_pdu_timeout.part.0+0x24>)
   163a0:	2302      	movs	r3, #2
   163a2:	aa04      	add	r2, sp, #16
   163a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   163a8:	9304      	str	r3, [sp, #16]
   163aa:	f009 f96e 	bl	1f68a <z_log_msg_static_create.constprop.0>
}
   163ae:	2000      	movs	r0, #0
   163b0:	b007      	add	sp, #28
   163b2:	f85d fb04 	ldr.w	pc, [sp], #4
   163b6:	bf00      	nop
   163b8:	00023622 	.word	0x00023622
   163bc:	00021e54 	.word	0x00021e54

000163c0 <tx_notify>:
{
   163c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   163c4:	4f15      	ldr	r7, [pc, #84]	; (1641c <tx_notify+0x5c>)
{
   163c6:	4604      	mov	r4, r0
	tx->cb = NULL;
   163c8:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   163cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   163d0:	f3ef 8311 	mrs	r3, BASEPRI
   163d4:	f382 8812 	msr	BASEPRI_MAX, r2
   163d8:	f3bf 8f6f 	isb	sy
	return list->head;
   163dc:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   163de:	b929      	cbnz	r1, 163ec <tx_notify+0x2c>
	__asm__ volatile(
   163e0:	f383 8811 	msr	BASEPRI, r3
   163e4:	f3bf 8f6f 	isb	sy
}
   163e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   163ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   163ee:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   163f0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   163f2:	4281      	cmp	r1, r0
	list->tail = node;
   163f4:	bf08      	it	eq
   163f6:	6262      	streq	r2, [r4, #36]	; 0x24
   163f8:	f383 8811 	msr	BASEPRI, r3
   163fc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   16400:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   16404:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   16408:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1640c:	4638      	mov	r0, r7
   1640e:	f00a ff43 	bl	21298 <k_queue_append>
		cb(conn, user_data, 0);
   16412:	2200      	movs	r2, #0
   16414:	4631      	mov	r1, r6
   16416:	4620      	mov	r0, r4
   16418:	47a8      	blx	r5
	while (1) {
   1641a:	e7d7      	b.n	163cc <tx_notify+0xc>
   1641c:	20000874 	.word	0x20000874

00016420 <conn_tx_destroy>:
{
   16420:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   16422:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   16426:	2200      	movs	r2, #0
	tx->user_data = NULL;
   16428:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   1642c:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   1642e:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   16430:	4805      	ldr	r0, [pc, #20]	; (16448 <conn_tx_destroy+0x28>)
   16432:	f00a ff31 	bl	21298 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   16436:	4631      	mov	r1, r6
   16438:	4620      	mov	r0, r4
   1643a:	462b      	mov	r3, r5
   1643c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   16440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   16444:	4718      	bx	r3
   16446:	bf00      	nop
   16448:	20000874 	.word	0x20000874

0001644c <send_frag>:
{
   1644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16450:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16452:	698d      	ldr	r5, [r1, #24]
{
   16454:	af00      	add	r7, sp, #0
   16456:	460e      	mov	r6, r1
   16458:	4692      	mov	sl, r2
   1645a:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   1645c:	f04f 33ff 	mov.w	r3, #4294967295
   16460:	4850      	ldr	r0, [pc, #320]	; (165a4 <send_frag+0x158>)
   16462:	f04f 32ff 	mov.w	r2, #4294967295
   16466:	f006 fa9f 	bl	1c9a8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1646a:	7aa3      	ldrb	r3, [r4, #10]
   1646c:	2b07      	cmp	r3, #7
   1646e:	f040 808c 	bne.w	1658a <send_frag+0x13e>
	__asm__ volatile(
   16472:	f04f 0340 	mov.w	r3, #64	; 0x40
   16476:	f3ef 8211 	mrs	r2, BASEPRI
   1647a:	f383 8812 	msr	BASEPRI_MAX, r3
   1647e:	f3bf 8f6f 	isb	sy
	if (tx) {
   16482:	2d00      	cmp	r5, #0
   16484:	d058      	beq.n	16538 <send_frag+0xec>
	parent->next = child;
   16486:	2300      	movs	r3, #0
   16488:	602b      	str	r3, [r5, #0]
	return list->tail;
   1648a:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1648c:	2b00      	cmp	r3, #0
   1648e:	d150      	bne.n	16532 <send_frag+0xe6>
	list->head = node;
   16490:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   16494:	f382 8811 	msr	BASEPRI, r2
   16498:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1649c:	2104      	movs	r1, #4
   1649e:	f106 000c 	add.w	r0, r6, #12
   164a2:	f00a fa5c 	bl	2095e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   164a6:	8823      	ldrh	r3, [r4, #0]
   164a8:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   164ac:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   164b0:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   164b4:	8a33      	ldrh	r3, [r6, #16]
   164b6:	3b04      	subs	r3, #4
   164b8:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   164ba:	2302      	movs	r3, #2
   164bc:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   164be:	4630      	mov	r0, r6
   164c0:	f7fe fd36 	bl	14f30 <bt_send>
	if (err) {
   164c4:	2800      	cmp	r0, #0
   164c6:	d06a      	beq.n	1659e <send_frag+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   164c8:	46ea      	mov	sl, sp
   164ca:	b088      	sub	sp, #32
   164cc:	466a      	mov	r2, sp
   164ce:	4b36      	ldr	r3, [pc, #216]	; (165a8 <send_frag+0x15c>)
   164d0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   164d4:	2303      	movs	r3, #3
   164d6:	f842 3f10 	str.w	r3, [r2, #16]!
   164da:	4834      	ldr	r0, [pc, #208]	; (165ac <send_frag+0x160>)
   164dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   164e0:	f009 f8d3 	bl	1f68a <z_log_msg_static_create.constprop.0>
   164e4:	46d5      	mov	sp, sl
	__asm__ volatile(
   164e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   164ea:	f3ef 8111 	mrs	r1, BASEPRI
   164ee:	f383 8812 	msr	BASEPRI_MAX, r3
   164f2:	f3bf 8f6f 	isb	sy
		if (tx) {
   164f6:	2d00      	cmp	r5, #0
   164f8:	d034      	beq.n	16564 <send_frag+0x118>
	return list->head;
   164fa:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   164fc:	2200      	movs	r2, #0
   164fe:	b153      	cbz	r3, 16516 <send_frag+0xca>
   16500:	429d      	cmp	r5, r3
   16502:	d12c      	bne.n	1655e <send_frag+0x112>
	return node->next;
   16504:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   16506:	bb22      	cbnz	r2, 16552 <send_frag+0x106>
   16508:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1650a:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1650c:	4295      	cmp	r5, r2
   1650e:	d100      	bne.n	16512 <send_frag+0xc6>
	list->tail = node;
   16510:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   16512:	2300      	movs	r3, #0
   16514:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   16516:	f381 8811 	msr	BASEPRI, r1
   1651a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1651e:	4821      	ldr	r0, [pc, #132]	; (165a4 <send_frag+0x158>)
   16520:	f006 fa1c 	bl	1c95c <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   16524:	2300      	movs	r3, #0
   16526:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   16528:	4629      	mov	r1, r5
   1652a:	4620      	mov	r0, r4
   1652c:	f7ff ff78 	bl	16420 <conn_tx_destroy>
   16530:	e024      	b.n	1657c <send_frag+0x130>
   16532:	601d      	str	r5, [r3, #0]
	list->tail = node;
   16534:	61a5      	str	r5, [r4, #24]
}
   16536:	e7ad      	b.n	16494 <send_frag+0x48>
	return list->tail;
   16538:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1653a:	b133      	cbz	r3, 1654a <send_frag+0xfe>
			pending_no_cb = &tail_tx->pending_no_cb;
   1653c:	f103 080c 	add.w	r8, r3, #12
   16540:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   16542:	3301      	adds	r3, #1
   16544:	f8c8 3000 	str.w	r3, [r8]
   16548:	e7a4      	b.n	16494 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   1654a:	69e3      	ldr	r3, [r4, #28]
   1654c:	f104 081c 	add.w	r8, r4, #28
   16550:	e7f7      	b.n	16542 <send_frag+0xf6>
	parent->next = child;
   16552:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   16554:	69a3      	ldr	r3, [r4, #24]
   16556:	429d      	cmp	r5, r3
	list->tail = node;
   16558:	bf08      	it	eq
   1655a:	61a2      	streq	r2, [r4, #24]
}
   1655c:	e7d9      	b.n	16512 <send_frag+0xc6>
	return node->next;
   1655e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16560:	681b      	ldr	r3, [r3, #0]
   16562:	e7cc      	b.n	164fe <send_frag+0xb2>
			(*pending_no_cb)--;
   16564:	f8d8 3000 	ldr.w	r3, [r8]
   16568:	3b01      	subs	r3, #1
   1656a:	f8c8 3000 	str.w	r3, [r8]
   1656e:	f381 8811 	msr	BASEPRI, r1
   16572:	f3bf 8f6f 	isb	sy
   16576:	480b      	ldr	r0, [pc, #44]	; (165a4 <send_frag+0x158>)
   16578:	f006 f9f0 	bl	1c95c <z_impl_k_sem_give>
	if (always_consume) {
   1657c:	f1b9 0f00 	cmp.w	r9, #0
   16580:	d109      	bne.n	16596 <send_frag+0x14a>
	return false;
   16582:	2000      	movs	r0, #0
}
   16584:	46bd      	mov	sp, r7
   16586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1658a:	4806      	ldr	r0, [pc, #24]	; (165a4 <send_frag+0x158>)
   1658c:	f006 f9e6 	bl	1c95c <z_impl_k_sem_give>
	if (tx) {
   16590:	2d00      	cmp	r5, #0
   16592:	d1c7      	bne.n	16524 <send_frag+0xd8>
   16594:	e7f2      	b.n	1657c <send_frag+0x130>
		net_buf_unref(buf);
   16596:	4630      	mov	r0, r6
   16598:	f002 fe2c 	bl	191f4 <net_buf_unref>
   1659c:	e7f1      	b.n	16582 <send_frag+0x136>
	return true;
   1659e:	2001      	movs	r0, #1
   165a0:	e7f0      	b.n	16584 <send_frag+0x138>
   165a2:	bf00      	nop
   165a4:	20000488 	.word	0x20000488
   165a8:	000232c5 	.word	0x000232c5
   165ac:	00021e54 	.word	0x00021e54

000165b0 <bt_conn_get_pkts>:
}
   165b0:	4800      	ldr	r0, [pc, #0]	; (165b4 <bt_conn_get_pkts+0x4>)
   165b2:	4770      	bx	lr
   165b4:	20000488 	.word	0x20000488

000165b8 <bt_conn_new>:
{
   165b8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   165ba:	2200      	movs	r2, #0
   165bc:	4604      	mov	r4, r0
   165be:	428a      	cmp	r2, r1
   165c0:	d102      	bne.n	165c8 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   165c2:	2400      	movs	r4, #0
}
   165c4:	4620      	mov	r0, r4
   165c6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   165c8:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   165cc:	2001      	movs	r0, #1
   165ce:	f3bf 8f5b 	dmb	ish
   165d2:	e853 5f00 	ldrex	r5, [r3]
   165d6:	2d00      	cmp	r5, #0
   165d8:	d104      	bne.n	165e4 <bt_conn_new+0x2c>
   165da:	e843 0c00 	strex	ip, r0, [r3]
   165de:	f1bc 0f00 	cmp.w	ip, #0
   165e2:	d1f6      	bne.n	165d2 <bt_conn_new+0x1a>
   165e4:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   165e8:	d002      	beq.n	165f0 <bt_conn_new+0x38>
   165ea:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   165ec:	4402      	add	r2, r0
   165ee:	e7e6      	b.n	165be <bt_conn_new+0x6>
	if (!conn) {
   165f0:	2c00      	cmp	r4, #0
   165f2:	d0e6      	beq.n	165c2 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   165f4:	22bc      	movs	r2, #188	; 0xbc
   165f6:	2100      	movs	r1, #0
   165f8:	4620      	mov	r0, r4
   165fa:	f008 fdd9 	bl	1f1b0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   165fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16602:	4904      	ldr	r1, [pc, #16]	; (16614 <bt_conn_new+0x5c>)
   16604:	f00a ff23 	bl	2144e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   16608:	4903      	ldr	r1, [pc, #12]	; (16618 <bt_conn_new+0x60>)
   1660a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1660e:	f00a feda 	bl	213c6 <k_work_init>
	return conn;
   16612:	e7d7      	b.n	165c4 <bt_conn_new+0xc>
   16614:	00016d6d 	.word	0x00016d6d
   16618:	0001f691 	.word	0x0001f691

0001661c <bt_conn_recv>:
{
   1661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16620:	b086      	sub	sp, #24
   16622:	4616      	mov	r6, r2
   16624:	af00      	add	r7, sp, #0
   16626:	4604      	mov	r4, r0
   16628:	460d      	mov	r5, r1
	tx_notify(conn);
   1662a:	f7ff fec9 	bl	163c0 <tx_notify>
	switch (flags) {
   1662e:	2e01      	cmp	r6, #1
   16630:	d030      	beq.n	16694 <bt_conn_recv+0x78>
   16632:	2e02      	cmp	r6, #2
   16634:	d16a      	bne.n	1670c <bt_conn_recv+0xf0>
		if (conn->rx) {
   16636:	6923      	ldr	r3, [r4, #16]
   16638:	b163      	cbz	r3, 16654 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   1663a:	4b40      	ldr	r3, [pc, #256]	; (1673c <bt_conn_recv+0x120>)
   1663c:	4840      	ldr	r0, [pc, #256]	; (16740 <bt_conn_recv+0x124>)
   1663e:	e9c7 6304 	strd	r6, r3, [r7, #16]
   16642:	f107 0210 	add.w	r2, r7, #16
   16646:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1664a:	f009 f81e 	bl	1f68a <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1664e:	4620      	mov	r0, r4
   16650:	f009 f821 	bl	1f696 <bt_conn_reset_rx_state>
		conn->rx = buf;
   16654:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16656:	6921      	ldr	r1, [r4, #16]
   16658:	8a08      	ldrh	r0, [r1, #16]
   1665a:	2801      	cmp	r0, #1
   1665c:	d930      	bls.n	166c0 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1665e:	68cb      	ldr	r3, [r1, #12]
   16660:	881b      	ldrh	r3, [r3, #0]
   16662:	3304      	adds	r3, #4
   16664:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   16666:	4298      	cmp	r0, r3
   16668:	d32a      	bcc.n	166c0 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   1666a:	d95f      	bls.n	1672c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1666c:	466d      	mov	r5, sp
   1666e:	b088      	sub	sp, #32
   16670:	466a      	mov	r2, sp
   16672:	4934      	ldr	r1, [pc, #208]	; (16744 <bt_conn_recv+0x128>)
   16674:	61d3      	str	r3, [r2, #28]
   16676:	2304      	movs	r3, #4
   16678:	e9c2 1005 	strd	r1, r0, [r2, #20]
   1667c:	f842 3f10 	str.w	r3, [r2, #16]!
   16680:	482f      	ldr	r0, [pc, #188]	; (16740 <bt_conn_recv+0x124>)
   16682:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16686:	f009 f800 	bl	1f68a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1668a:	4620      	mov	r0, r4
   1668c:	46ad      	mov	sp, r5
   1668e:	f009 f802 	bl	1f696 <bt_conn_reset_rx_state>
		return;
   16692:	e015      	b.n	166c0 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   16694:	6920      	ldr	r0, [r4, #16]
   16696:	b970      	cbnz	r0, 166b6 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   16698:	4b2b      	ldr	r3, [pc, #172]	; (16748 <bt_conn_recv+0x12c>)
   1669a:	617b      	str	r3, [r7, #20]
   1669c:	2302      	movs	r3, #2
   1669e:	4828      	ldr	r0, [pc, #160]	; (16740 <bt_conn_recv+0x124>)
   166a0:	613b      	str	r3, [r7, #16]
   166a2:	f107 0210 	add.w	r2, r7, #16
   166a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   166aa:	f008 ffee 	bl	1f68a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   166ae:	4620      	mov	r0, r4
   166b0:	f008 fff1 	bl	1f696 <bt_conn_reset_rx_state>
   166b4:	e001      	b.n	166ba <bt_conn_recv+0x9e>
		if (!buf->len) {
   166b6:	8a2e      	ldrh	r6, [r5, #16]
   166b8:	b936      	cbnz	r6, 166c8 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   166ba:	4628      	mov	r0, r5
   166bc:	f002 fd9a 	bl	191f4 <net_buf_unref>
}
   166c0:	3718      	adds	r7, #24
   166c2:	46bd      	mov	sp, r7
   166c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   166c8:	300c      	adds	r0, #12
   166ca:	f00a f96c 	bl	209a6 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   166ce:	4286      	cmp	r6, r0
   166d0:	d912      	bls.n	166f8 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   166d2:	4b1e      	ldr	r3, [pc, #120]	; (1674c <bt_conn_recv+0x130>)
   166d4:	617b      	str	r3, [r7, #20]
   166d6:	2302      	movs	r3, #2
   166d8:	613b      	str	r3, [r7, #16]
   166da:	4819      	ldr	r0, [pc, #100]	; (16740 <bt_conn_recv+0x124>)
   166dc:	f107 0210 	add.w	r2, r7, #16
   166e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   166e4:	f008 ffd1 	bl	1f68a <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   166e8:	2200      	movs	r2, #0
   166ea:	6921      	ldr	r1, [r4, #16]
   166ec:	4620      	mov	r0, r4
   166ee:	f000 fda5 	bl	1723c <bt_l2cap_recv>
			conn->rx = NULL;
   166f2:	2300      	movs	r3, #0
   166f4:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   166f6:	e7e0      	b.n	166ba <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   166f8:	6920      	ldr	r0, [r4, #16]
   166fa:	8a2a      	ldrh	r2, [r5, #16]
   166fc:	68e9      	ldr	r1, [r5, #12]
   166fe:	300c      	adds	r0, #12
   16700:	f00a f91c 	bl	2093c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16704:	4628      	mov	r0, r5
   16706:	f002 fd75 	bl	191f4 <net_buf_unref>
		break;
   1670a:	e7a4      	b.n	16656 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1670c:	46e8      	mov	r8, sp
   1670e:	b088      	sub	sp, #32
   16710:	466a      	mov	r2, sp
   16712:	4b0f      	ldr	r3, [pc, #60]	; (16750 <bt_conn_recv+0x134>)
   16714:	480a      	ldr	r0, [pc, #40]	; (16740 <bt_conn_recv+0x124>)
	switch (flags) {
   16716:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1671a:	2303      	movs	r3, #3
   1671c:	f842 3f10 	str.w	r3, [r2, #16]!
   16720:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16724:	f008 ffb1 	bl	1f68a <z_log_msg_static_create.constprop.0>
   16728:	46c5      	mov	sp, r8
   1672a:	e7c0      	b.n	166ae <bt_conn_recv+0x92>
	conn->rx = NULL;
   1672c:	2300      	movs	r3, #0
   1672e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16730:	2201      	movs	r2, #1
   16732:	4620      	mov	r0, r4
   16734:	f000 fd82 	bl	1723c <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   16738:	e7c2      	b.n	166c0 <bt_conn_recv+0xa4>
   1673a:	bf00      	nop
   1673c:	0002364b 	.word	0x0002364b
   16740:	00021e54 	.word	0x00021e54
   16744:	000236cb 	.word	0x000236cb
   16748:	00023668 	.word	0x00023668
   1674c:	00023686 	.word	0x00023686
   16750:	000236ad 	.word	0x000236ad

00016754 <bt_conn_send_cb>:
{
   16754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16758:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1675a:	7a83      	ldrb	r3, [r0, #10]
   1675c:	2b07      	cmp	r3, #7
{
   1675e:	b086      	sub	sp, #24
   16760:	4605      	mov	r5, r0
   16762:	460f      	mov	r7, r1
   16764:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   16766:	d00c      	beq.n	16782 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   16768:	4b28      	ldr	r3, [pc, #160]	; (1680c <bt_conn_send_cb+0xb8>)
   1676a:	9305      	str	r3, [sp, #20]
   1676c:	4828      	ldr	r0, [pc, #160]	; (16810 <bt_conn_send_cb+0xbc>)
   1676e:	2302      	movs	r3, #2
   16770:	aa04      	add	r2, sp, #16
   16772:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16776:	9304      	str	r3, [sp, #16]
   16778:	f008 ff87 	bl	1f68a <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   1677c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16780:	e01d      	b.n	167be <bt_conn_send_cb+0x6a>
	if (cb) {
   16782:	2a00      	cmp	r2, #0
   16784:	d040      	beq.n	16808 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   16786:	f006 fd4d 	bl	1d224 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1678a:	4b22      	ldr	r3, [pc, #136]	; (16814 <bt_conn_send_cb+0xc0>)
   1678c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1678e:	4822      	ldr	r0, [pc, #136]	; (16818 <bt_conn_send_cb+0xc4>)
   16790:	bf07      	ittee	eq
   16792:	2200      	moveq	r2, #0
   16794:	2300      	moveq	r3, #0
   16796:	f04f 32ff 	movne.w	r2, #4294967295
   1679a:	f04f 33ff 	movne.w	r3, #4294967295
   1679e:	f006 f8a9 	bl	1c8f4 <z_impl_k_queue_get>
   167a2:	4604      	mov	r4, r0
		if (!tx) {
   167a4:	b970      	cbnz	r0, 167c4 <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   167a6:	4b1d      	ldr	r3, [pc, #116]	; (1681c <bt_conn_send_cb+0xc8>)
   167a8:	4819      	ldr	r0, [pc, #100]	; (16810 <bt_conn_send_cb+0xbc>)
   167aa:	9305      	str	r3, [sp, #20]
   167ac:	aa04      	add	r2, sp, #16
   167ae:	2302      	movs	r3, #2
   167b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   167b4:	9304      	str	r3, [sp, #16]
   167b6:	f008 ff68 	bl	1f68a <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   167ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   167be:	b006      	add	sp, #24
   167c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   167c4:	7aab      	ldrb	r3, [r5, #10]
   167c6:	2b07      	cmp	r3, #7
   167c8:	d012      	beq.n	167f0 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   167ca:	4b15      	ldr	r3, [pc, #84]	; (16820 <bt_conn_send_cb+0xcc>)
   167cc:	9305      	str	r3, [sp, #20]
   167ce:	4810      	ldr	r0, [pc, #64]	; (16810 <bt_conn_send_cb+0xbc>)
   167d0:	2302      	movs	r3, #2
   167d2:	aa04      	add	r2, sp, #16
   167d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   167d8:	9304      	str	r3, [sp, #16]
   167da:	f008 ff56 	bl	1f68a <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   167de:	2300      	movs	r3, #0
	tx->user_data = NULL;
   167e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   167e4:	480c      	ldr	r0, [pc, #48]	; (16818 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   167e6:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   167e8:	4621      	mov	r1, r4
   167ea:	f00a fd55 	bl	21298 <k_queue_append>
}
   167ee:	e7c5      	b.n	1677c <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   167f0:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   167f4:	2300      	movs	r3, #0
   167f6:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   167f8:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   167fc:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   167fe:	4639      	mov	r1, r7
   16800:	f00a f86e 	bl	208e0 <net_buf_put>
	return 0;
   16804:	2000      	movs	r0, #0
   16806:	e7da      	b.n	167be <bt_conn_send_cb+0x6a>
   16808:	4614      	mov	r4, r2
   1680a:	e7f5      	b.n	167f8 <bt_conn_send_cb+0xa4>
   1680c:	000236e6 	.word	0x000236e6
   16810:	00021e54 	.word	0x00021e54
   16814:	20002a18 	.word	0x20002a18
   16818:	20000874 	.word	0x20000874
   1681c:	000236f5 	.word	0x000236f5
   16820:	00023713 	.word	0x00023713

00016824 <bt_conn_prepare_events>:
{
   16824:	b570      	push	{r4, r5, r6, lr}
   16826:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   16828:	481c      	ldr	r0, [pc, #112]	; (1689c <bt_conn_prepare_events+0x78>)
   1682a:	f00b f95d 	bl	21ae8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1682e:	4b1b      	ldr	r3, [pc, #108]	; (1689c <bt_conn_prepare_events+0x78>)
   16830:	2200      	movs	r2, #0
   16832:	4620      	mov	r0, r4
   16834:	2101      	movs	r1, #1
   16836:	f00b f93a 	bl	21aae <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1683a:	f3bf 8f5b 	dmb	ish
   1683e:	4a18      	ldr	r2, [pc, #96]	; (168a0 <bt_conn_prepare_events+0x7c>)
   16840:	6813      	ldr	r3, [r2, #0]
   16842:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   16846:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   1684a:	b90b      	cbnz	r3, 16850 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1684c:	2001      	movs	r0, #1
}
   1684e:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16850:	f1a2 03bc 	sub.w	r3, r2, #188	; 0xbc
   16854:	f812 2cb2 	ldrb.w	r2, [r2, #-178]
   16858:	b992      	cbnz	r2, 16880 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1685a:	f3bf 8f5b 	dmb	ish
   1685e:	1d1a      	adds	r2, r3, #4
   16860:	e852 1f00 	ldrex	r1, [r2]
   16864:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   16868:	e842 5600 	strex	r6, r5, [r2]
   1686c:	2e00      	cmp	r6, #0
   1686e:	d1f7      	bne.n	16860 <bt_conn_prepare_events+0x3c>
   16870:	f3bf 8f5b 	dmb	ish
   16874:	064a      	lsls	r2, r1, #25
   16876:	d503      	bpl.n	16880 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   16878:	4618      	mov	r0, r3
   1687a:	f008 ff15 	bl	1f6a8 <conn_cleanup>
		return -ENOTCONN;
   1687e:	e7e5      	b.n	1684c <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   16880:	7a9b      	ldrb	r3, [r3, #10]
   16882:	2b07      	cmp	r3, #7
   16884:	d1e2      	bne.n	1684c <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   16886:	4b07      	ldr	r3, [pc, #28]	; (168a4 <bt_conn_prepare_events+0x80>)
   16888:	2200      	movs	r2, #0
   1688a:	2104      	movs	r1, #4
   1688c:	f00b f90f 	bl	21aae <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   16890:	2301      	movs	r3, #1
   16892:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   16896:	2002      	movs	r0, #2
	return ev_count;
   16898:	e7d9      	b.n	1684e <bt_conn_prepare_events+0x2a>
   1689a:	bf00      	nop
   1689c:	20000574 	.word	0x20000574
   168a0:	20001e14 	.word	0x20001e14
   168a4:	20001d90 	.word	0x20001d90

000168a8 <bt_conn_lookup_handle>:
{
   168a8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   168aa:	2101      	movs	r1, #1
   168ac:	4801      	ldr	r0, [pc, #4]	; (168b4 <bt_conn_lookup_handle+0xc>)
   168ae:	f008 bf56 	b.w	1f75e <conn_lookup_handle>
   168b2:	bf00      	nop
   168b4:	20001d58 	.word	0x20001d58

000168b8 <bt_conn_set_state>:
{
   168b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   168ba:	7a86      	ldrb	r6, [r0, #10]
   168bc:	428e      	cmp	r6, r1
{
   168be:	af00      	add	r7, sp, #0
   168c0:	4604      	mov	r4, r0
   168c2:	460d      	mov	r5, r1
	if (conn->state == state) {
   168c4:	d118      	bne.n	168f8 <bt_conn_set_state+0x40>
	switch (state) {
   168c6:	2e08      	cmp	r6, #8
   168c8:	bf96      	itet	ls
   168ca:	4b6d      	ldrls	r3, [pc, #436]	; (16a80 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   168cc:	4b6d      	ldrhi	r3, [pc, #436]	; (16a84 <bt_conn_set_state+0x1cc>)
   168ce:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   168d2:	466c      	mov	r4, sp
   168d4:	b088      	sub	sp, #32
   168d6:	466a      	mov	r2, sp
   168d8:	496b      	ldr	r1, [pc, #428]	; (16a88 <bt_conn_set_state+0x1d0>)
   168da:	e9c2 1305 	strd	r1, r3, [r2, #20]
   168de:	f44f 7300 	mov.w	r3, #512	; 0x200
   168e2:	8393      	strh	r3, [r2, #28]
   168e4:	4b69      	ldr	r3, [pc, #420]	; (16a8c <bt_conn_set_state+0x1d4>)
   168e6:	f842 3f10 	str.w	r3, [r2, #16]!
   168ea:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   168ee:	4868      	ldr	r0, [pc, #416]	; (16a90 <bt_conn_set_state+0x1d8>)
   168f0:	f008 fecb 	bl	1f68a <z_log_msg_static_create.constprop.0>
   168f4:	46a5      	mov	sp, r4
   168f6:	e043      	b.n	16980 <bt_conn_set_state+0xc8>
	conn->state = state;
   168f8:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   168fa:	b926      	cbnz	r6, 16906 <bt_conn_set_state+0x4e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   168fc:	7883      	ldrb	r3, [r0, #2]
   168fe:	2b08      	cmp	r3, #8
   16900:	d001      	beq.n	16906 <bt_conn_set_state+0x4e>
			bt_conn_ref(conn);
   16902:	f008 fef4 	bl	1f6ee <bt_conn_ref>
	switch (conn->state) {
   16906:	7aa3      	ldrb	r3, [r4, #10]
   16908:	2b08      	cmp	r3, #8
   1690a:	f200 80b3 	bhi.w	16a74 <bt_conn_set_state+0x1bc>
   1690e:	e8df f003 	tbb	[pc, r3]
   16912:	0539      	.short	0x0539
   16914:	37373737 	.word	0x37373737
   16918:	1c37      	.short	0x1c37
   1691a:	37          	.byte	0x37
   1691b:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   1691c:	4d5d      	ldr	r5, [pc, #372]	; (16a94 <bt_conn_set_state+0x1dc>)
		tx->pending_no_cb = 0U;
   1691e:	2600      	movs	r6, #0
	__asm__ volatile(
   16920:	f04f 0240 	mov.w	r2, #64	; 0x40
   16924:	f3ef 8311 	mrs	r3, BASEPRI
   16928:	f382 8812 	msr	BASEPRI_MAX, r2
   1692c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   16930:	69e2      	ldr	r2, [r4, #28]
   16932:	2a00      	cmp	r2, #0
   16934:	d07a      	beq.n	16a2c <bt_conn_set_state+0x174>
			conn->pending_no_cb--;
   16936:	3a01      	subs	r2, #1
   16938:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1693a:	f383 8811 	msr	BASEPRI, r3
   1693e:	f3bf 8f6f 	isb	sy
   16942:	4628      	mov	r0, r5
   16944:	f006 f80a 	bl	1c95c <z_impl_k_sem_give>
}
   16948:	e7ea      	b.n	16920 <bt_conn_set_state+0x68>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1694a:	78a3      	ldrb	r3, [r4, #2]
   1694c:	2b04      	cmp	r3, #4
   1694e:	d017      	beq.n	16980 <bt_conn_set_state+0xc8>
	z_impl_k_queue_init(queue);
   16950:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16954:	f00a fc94 	bl	21280 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   16958:	484f      	ldr	r0, [pc, #316]	; (16a98 <bt_conn_set_state+0x1e0>)
   1695a:	2100      	movs	r1, #0
   1695c:	f006 ff46 	bl	1d7ec <z_impl_k_poll_signal_raise>
	list->head = NULL;
   16960:	2300      	movs	r3, #0
	list->tail = NULL;
   16962:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16966:	78e3      	ldrb	r3, [r4, #3]
   16968:	2b01      	cmp	r3, #1
   1696a:	d109      	bne.n	16980 <bt_conn_set_state+0xc8>
			conn->le.conn_param_retry_countdown =
   1696c:	2303      	movs	r3, #3
   1696e:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   16972:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   16976:	2300      	movs	r3, #0
   16978:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1697c:	f006 f936 	bl	1cbec <k_work_schedule>
}
   16980:	46bd      	mov	sp, r7
   16982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   16984:	78a3      	ldrb	r3, [r4, #2]
   16986:	2b04      	cmp	r3, #4
   16988:	d103      	bne.n	16992 <bt_conn_set_state+0xda>
			bt_conn_unref(conn);
   1698a:	4620      	mov	r0, r4
   1698c:	f008 fecb 	bl	1f726 <bt_conn_unref>
			break;
   16990:	e7f6      	b.n	16980 <bt_conn_set_state+0xc8>
		switch (old_state) {
   16992:	2e08      	cmp	r6, #8
   16994:	d8f4      	bhi.n	16980 <bt_conn_set_state+0xc8>
   16996:	a301      	add	r3, pc, #4	; (adr r3, 1699c <bt_conn_set_state+0xe4>)
   16998:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1699c:	00016a15 	.word	0x00016a15
   169a0:	000169c1 	.word	0x000169c1
   169a4:	00016a07 	.word	0x00016a07
   169a8:	0001698b 	.word	0x0001698b
   169ac:	0001698b 	.word	0x0001698b
   169b0:	00016a07 	.word	0x00016a07
   169b4:	00016a07 	.word	0x00016a07
   169b8:	00016981 	.word	0x00016981
   169bc:	00016a15 	.word	0x00016a15
			tx_notify(conn);
   169c0:	4620      	mov	r0, r4
   169c2:	f7ff fcfd 	bl	163c0 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   169c6:	78a3      	ldrb	r3, [r4, #2]
   169c8:	2b01      	cmp	r3, #1
   169ca:	d10a      	bne.n	169e2 <bt_conn_set_state+0x12a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   169cc:	f104 0558 	add.w	r5, r4, #88	; 0x58
   169d0:	4628      	mov	r0, r5
   169d2:	f00a fd48 	bl	21466 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   169d6:	f010 0f0c 	tst.w	r0, #12
   169da:	d002      	beq.n	169e2 <bt_conn_set_state+0x12a>
				k_work_cancel_delayable(&conn->deferred_work);
   169dc:	4628      	mov	r0, r5
   169de:	f00a fd44 	bl	2146a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   169e2:	f3bf 8f5b 	dmb	ish
   169e6:	3404      	adds	r4, #4
   169e8:	e854 3f00 	ldrex	r3, [r4]
   169ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   169f0:	e844 3200 	strex	r2, r3, [r4]
   169f4:	2a00      	cmp	r2, #0
   169f6:	d1f7      	bne.n	169e8 <bt_conn_set_state+0x130>
   169f8:	f3bf 8f5b 	dmb	ish
   169fc:	2100      	movs	r1, #0
   169fe:	4826      	ldr	r0, [pc, #152]	; (16a98 <bt_conn_set_state+0x1e0>)
   16a00:	f006 fef4 	bl	1d7ec <z_impl_k_poll_signal_raise>
   16a04:	e7bc      	b.n	16980 <bt_conn_set_state+0xc8>
			if (conn->err) {
   16a06:	7a63      	ldrb	r3, [r4, #9]
   16a08:	2b00      	cmp	r3, #0
   16a0a:	d0be      	beq.n	1698a <bt_conn_set_state+0xd2>
				notify_connected(conn);
   16a0c:	4620      	mov	r0, r4
   16a0e:	f7ff fca5 	bl	1635c <notify_connected>
   16a12:	e7ba      	b.n	1698a <bt_conn_set_state+0xd2>
			LOG_WRN("Invalid (%u) old state", state);
   16a14:	466c      	mov	r4, sp
   16a16:	b088      	sub	sp, #32
   16a18:	466a      	mov	r2, sp
   16a1a:	4b20      	ldr	r3, [pc, #128]	; (16a9c <bt_conn_set_state+0x1e4>)
		LOG_WRN("no valid (%u) state was set", state);
   16a1c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   16a20:	2303      	movs	r3, #3
   16a22:	f842 3f10 	str.w	r3, [r2, #16]!
   16a26:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16a2a:	e760      	b.n	168ee <bt_conn_set_state+0x36>
	return list->head;
   16a2c:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16a2e:	b921      	cbnz	r1, 16a3a <bt_conn_set_state+0x182>
   16a30:	f383 8811 	msr	BASEPRI, r3
   16a34:	f3bf 8f6f 	isb	sy
		if (!node) {
   16a38:	e7a2      	b.n	16980 <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16a3a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   16a3c:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   16a3e:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16a40:	4281      	cmp	r1, r0
	list->tail = node;
   16a42:	bf08      	it	eq
   16a44:	61a2      	streq	r2, [r4, #24]
   16a46:	f383 8811 	msr	BASEPRI, r3
   16a4a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16a4e:	f04f 0240 	mov.w	r2, #64	; 0x40
   16a52:	f3ef 8311 	mrs	r3, BASEPRI
   16a56:	f382 8812 	msr	BASEPRI_MAX, r2
   16a5a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   16a5e:	68ca      	ldr	r2, [r1, #12]
   16a60:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   16a62:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   16a64:	f383 8811 	msr	BASEPRI, r3
   16a68:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   16a6c:	4620      	mov	r0, r4
   16a6e:	f7ff fcd7 	bl	16420 <conn_tx_destroy>
   16a72:	e766      	b.n	16942 <bt_conn_set_state+0x8a>
		LOG_WRN("no valid (%u) state was set", state);
   16a74:	466c      	mov	r4, sp
   16a76:	b088      	sub	sp, #32
   16a78:	466a      	mov	r2, sp
   16a7a:	4b09      	ldr	r3, [pc, #36]	; (16aa0 <bt_conn_set_state+0x1e8>)
   16a7c:	e7ce      	b.n	16a1c <bt_conn_set_state+0x164>
   16a7e:	bf00      	nop
   16a80:	00022150 	.word	0x00022150
   16a84:	00023739 	.word	0x00023739
   16a88:	00023743 	.word	0x00023743
   16a8c:	01000003 	.word	0x01000003
   16a90:	00021e54 	.word	0x00021e54
   16a94:	20000488 	.word	0x20000488
   16a98:	20000574 	.word	0x20000574
   16a9c:	00023754 	.word	0x00023754
   16aa0:	0002376b 	.word	0x0002376b

00016aa4 <bt_conn_index>:
		index = conn - acl_conns;
   16aa4:	4b03      	ldr	r3, [pc, #12]	; (16ab4 <bt_conn_index+0x10>)
   16aa6:	1ac0      	subs	r0, r0, r3
   16aa8:	4b03      	ldr	r3, [pc, #12]	; (16ab8 <bt_conn_index+0x14>)
   16aaa:	1180      	asrs	r0, r0, #6
   16aac:	4358      	muls	r0, r3
}
   16aae:	b2c0      	uxtb	r0, r0
   16ab0:	4770      	bx	lr
   16ab2:	bf00      	nop
   16ab4:	20001d58 	.word	0x20001d58
   16ab8:	aaaaaaab 	.word	0xaaaaaaab

00016abc <bt_conn_create_pdu_timeout>:
{
   16abc:	b538      	push	{r3, r4, r5, lr}
   16abe:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   16ac0:	4908      	ldr	r1, [pc, #32]	; (16ae4 <bt_conn_create_pdu_timeout+0x28>)
   16ac2:	2800      	cmp	r0, #0
   16ac4:	bf08      	it	eq
   16ac6:	4608      	moveq	r0, r1
   16ac8:	f009 fed2 	bl	20870 <net_buf_alloc_fixed>
	if (!buf) {
   16acc:	4604      	mov	r4, r0
   16ace:	b918      	cbnz	r0, 16ad8 <bt_conn_create_pdu_timeout+0x1c>
}
   16ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16ad4:	f7ff bc60 	b.w	16398 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   16ad8:	1d29      	adds	r1, r5, #4
   16ada:	300c      	adds	r0, #12
   16adc:	f009 fecf 	bl	2087e <net_buf_simple_reserve>
   16ae0:	4620      	mov	r0, r4
   16ae2:	bd38      	pop	{r3, r4, r5, pc}
   16ae4:	2000088c 	.word	0x2000088c

00016ae8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   16ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16aea:	f3bf 8f5b 	dmb	ish
   16aee:	6842      	ldr	r2, [r0, #4]
   16af0:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16af4:	0592      	lsls	r2, r2, #22
{
   16af6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16af8:	f100 0304 	add.w	r3, r0, #4
   16afc:	d519      	bpl.n	16b32 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   16afe:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16b02:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   16b06:	4291      	cmp	r1, r2
   16b08:	d813      	bhi.n	16b32 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   16b0a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   16b0e:	4291      	cmp	r1, r2
   16b10:	d30f      	bcc.n	16b32 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   16b12:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   16b16:	4291      	cmp	r1, r2
   16b18:	d10b      	bne.n	16b32 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16b1a:	f3bf 8f5b 	dmb	ish
   16b1e:	e853 1f00 	ldrex	r1, [r3]
   16b22:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   16b26:	e843 1200 	strex	r2, r1, [r3]
   16b2a:	2a00      	cmp	r2, #0
   16b2c:	d1f7      	bne.n	16b1e <notify_le_param_updated+0x36>
   16b2e:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   16b32:	4b10      	ldr	r3, [pc, #64]	; (16b74 <notify_le_param_updated+0x8c>)
   16b34:	681d      	ldr	r5, [r3, #0]
   16b36:	b925      	cbnz	r5, 16b42 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b38:	4d0f      	ldr	r5, [pc, #60]	; (16b78 <notify_le_param_updated+0x90>)
   16b3a:	4f10      	ldr	r7, [pc, #64]	; (16b7c <notify_le_param_updated+0x94>)
   16b3c:	42bd      	cmp	r5, r7
   16b3e:	d30c      	bcc.n	16b5a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   16b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   16b42:	68ee      	ldr	r6, [r5, #12]
   16b44:	b13e      	cbz	r6, 16b56 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   16b46:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   16b4a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   16b4e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   16b52:	4620      	mov	r0, r4
   16b54:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   16b56:	692d      	ldr	r5, [r5, #16]
   16b58:	e7ed      	b.n	16b36 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   16b5a:	68ee      	ldr	r6, [r5, #12]
   16b5c:	b13e      	cbz	r6, 16b6e <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   16b5e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   16b62:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   16b66:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   16b6a:	4620      	mov	r0, r4
   16b6c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b6e:	3514      	adds	r5, #20
   16b70:	e7e4      	b.n	16b3c <notify_le_param_updated+0x54>
   16b72:	bf00      	nop
   16b74:	20002bb8 	.word	0x20002bb8
   16b78:	00021e08 	.word	0x00021e08
   16b7c:	00021e1c 	.word	0x00021e1c

00016b80 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   16b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b84:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   16b86:	4608      	mov	r0, r1
{
   16b88:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   16b8a:	f008 fc1e 	bl	1f3ca <bt_le_conn_params_valid>
   16b8e:	4605      	mov	r5, r0
   16b90:	b918      	cbnz	r0, 16b9a <le_param_req+0x1a>
		return false;
   16b92:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   16b94:	4628      	mov	r0, r5
   16b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   16b9a:	4b13      	ldr	r3, [pc, #76]	; (16be8 <le_param_req+0x68>)
   16b9c:	681e      	ldr	r6, [r3, #0]
   16b9e:	b946      	cbnz	r6, 16bb2 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16ba0:	4e12      	ldr	r6, [pc, #72]	; (16bec <le_param_req+0x6c>)
   16ba2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 16bf0 <le_param_req+0x70>
   16ba6:	4546      	cmp	r6, r8
   16ba8:	d2f4      	bcs.n	16b94 <le_param_req+0x14>
		if (!cb->le_param_req) {
   16baa:	68b3      	ldr	r3, [r6, #8]
   16bac:	b983      	cbnz	r3, 16bd0 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16bae:	3614      	adds	r6, #20
   16bb0:	e7f9      	b.n	16ba6 <le_param_req+0x26>
		if (!cb->le_param_req) {
   16bb2:	68b3      	ldr	r3, [r6, #8]
   16bb4:	b90b      	cbnz	r3, 16bba <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   16bb6:	6936      	ldr	r6, [r6, #16]
   16bb8:	e7f1      	b.n	16b9e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   16bba:	4621      	mov	r1, r4
   16bbc:	4638      	mov	r0, r7
   16bbe:	4798      	blx	r3
   16bc0:	2800      	cmp	r0, #0
   16bc2:	d0e6      	beq.n	16b92 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16bc4:	4620      	mov	r0, r4
   16bc6:	f008 fc00 	bl	1f3ca <bt_le_conn_params_valid>
   16bca:	2800      	cmp	r0, #0
   16bcc:	d1f3      	bne.n	16bb6 <le_param_req+0x36>
   16bce:	e7e0      	b.n	16b92 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   16bd0:	4621      	mov	r1, r4
   16bd2:	4638      	mov	r0, r7
   16bd4:	4798      	blx	r3
   16bd6:	2800      	cmp	r0, #0
   16bd8:	d0db      	beq.n	16b92 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16bda:	4620      	mov	r0, r4
   16bdc:	f008 fbf5 	bl	1f3ca <bt_le_conn_params_valid>
   16be0:	2800      	cmp	r0, #0
   16be2:	d1e4      	bne.n	16bae <le_param_req+0x2e>
   16be4:	e7d5      	b.n	16b92 <le_param_req+0x12>
   16be6:	bf00      	nop
   16be8:	20002bb8 	.word	0x20002bb8
   16bec:	00021e08 	.word	0x00021e08
   16bf0:	00021e1c 	.word	0x00021e1c

00016bf4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   16bf4:	b570      	push	{r4, r5, r6, lr}
   16bf6:	4606      	mov	r6, r0
   16bf8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   16bfa:	4809      	ldr	r0, [pc, #36]	; (16c20 <bt_conn_add_le+0x2c>)
   16bfc:	2101      	movs	r1, #1
   16bfe:	f7ff fcdb 	bl	165b8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   16c02:	4604      	mov	r4, r0
   16c04:	b150      	cbz	r0, 16c1c <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   16c06:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   16c08:	2207      	movs	r2, #7
   16c0a:	4629      	mov	r1, r5
   16c0c:	3088      	adds	r0, #136	; 0x88
   16c0e:	f008 fac4 	bl	1f19a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   16c12:	2301      	movs	r3, #1
   16c14:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   16c16:	4b03      	ldr	r3, [pc, #12]	; (16c24 <bt_conn_add_le+0x30>)
   16c18:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   16c1c:	4620      	mov	r0, r4
   16c1e:	bd70      	pop	{r4, r5, r6, pc}
   16c20:	20001d58 	.word	0x20001d58
   16c24:	00280018 	.word	0x00280018

00016c28 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   16c28:	b570      	push	{r4, r5, r6, lr}
   16c2a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16c2c:	480a      	ldr	r0, [pc, #40]	; (16c58 <bt_conn_lookup_addr_le+0x30>)
{
   16c2e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16c30:	f008 fd5d 	bl	1f6ee <bt_conn_ref>
   16c34:	4604      	mov	r4, r0

		if (!conn) {
   16c36:	b120      	cbz	r0, 16c42 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16c38:	7883      	ldrb	r3, [r0, #2]
   16c3a:	2b01      	cmp	r3, #1
   16c3c:	d004      	beq.n	16c48 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   16c3e:	f008 fd72 	bl	1f726 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16c42:	2400      	movs	r4, #0
}
   16c44:	4620      	mov	r0, r4
   16c46:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   16c48:	4632      	mov	r2, r6
   16c4a:	4629      	mov	r1, r5
   16c4c:	f008 fdb4 	bl	1f7b8 <bt_conn_is_peer_addr_le>
   16c50:	2800      	cmp	r0, #0
   16c52:	d1f7      	bne.n	16c44 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   16c54:	4620      	mov	r0, r4
   16c56:	e7f2      	b.n	16c3e <bt_conn_lookup_addr_le+0x16>
   16c58:	20001d58 	.word	0x20001d58

00016c5c <bt_conn_exists_le>:
{
   16c5c:	b5b0      	push	{r4, r5, r7, lr}
   16c5e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   16c60:	f7ff ffe2 	bl	16c28 <bt_conn_lookup_addr_le>
	if (conn) {
   16c64:	4604      	mov	r4, r0
   16c66:	b1e0      	cbz	r0, 16ca2 <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   16c68:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   16c6a:	2b08      	cmp	r3, #8
   16c6c:	bf96      	itet	ls
   16c6e:	4a0e      	ldrls	r2, [pc, #56]	; (16ca8 <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   16c70:	4b0e      	ldrhi	r3, [pc, #56]	; (16cac <bt_conn_exists_le+0x50>)
   16c72:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   16c76:	466d      	mov	r5, sp
   16c78:	b088      	sub	sp, #32
   16c7a:	466a      	mov	r2, sp
   16c7c:	490c      	ldr	r1, [pc, #48]	; (16cb0 <bt_conn_exists_le+0x54>)
   16c7e:	480d      	ldr	r0, [pc, #52]	; (16cb4 <bt_conn_exists_le+0x58>)
   16c80:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16c84:	f44f 7300 	mov.w	r3, #512	; 0x200
   16c88:	8393      	strh	r3, [r2, #28]
   16c8a:	4b0b      	ldr	r3, [pc, #44]	; (16cb8 <bt_conn_exists_le+0x5c>)
   16c8c:	f842 3f10 	str.w	r3, [r2, #16]!
   16c90:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   16c94:	f008 fcf9 	bl	1f68a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   16c98:	4620      	mov	r0, r4
   16c9a:	46ad      	mov	sp, r5
   16c9c:	f008 fd43 	bl	1f726 <bt_conn_unref>
		return true;
   16ca0:	2001      	movs	r0, #1
}
   16ca2:	46bd      	mov	sp, r7
   16ca4:	bdb0      	pop	{r4, r5, r7, pc}
   16ca6:	bf00      	nop
   16ca8:	00022150 	.word	0x00022150
   16cac:	00023739 	.word	0x00023739
   16cb0:	00023787 	.word	0x00023787
   16cb4:	00021e54 	.word	0x00021e54
   16cb8:	01000003 	.word	0x01000003

00016cbc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cbe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16cc0:	480e      	ldr	r0, [pc, #56]	; (16cfc <bt_conn_lookup_state_le+0x40>)
{
   16cc2:	460e      	mov	r6, r1
   16cc4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16cc6:	f008 fd12 	bl	1f6ee <bt_conn_ref>

		if (!conn) {
   16cca:	4604      	mov	r4, r0
   16ccc:	b120      	cbz	r0, 16cd8 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16cce:	7883      	ldrb	r3, [r0, #2]
   16cd0:	2b01      	cmp	r3, #1
   16cd2:	d003      	beq.n	16cdc <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   16cd4:	f008 fd27 	bl	1f726 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16cd8:	2400      	movs	r4, #0
   16cda:	e00d      	b.n	16cf8 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   16cdc:	b136      	cbz	r6, 16cec <bt_conn_lookup_state_le+0x30>
   16cde:	4632      	mov	r2, r6
   16ce0:	4629      	mov	r1, r5
   16ce2:	f008 fd69 	bl	1f7b8 <bt_conn_is_peer_addr_le>
   16ce6:	b908      	cbnz	r0, 16cec <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   16ce8:	4620      	mov	r0, r4
   16cea:	e7f3      	b.n	16cd4 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   16cec:	7aa3      	ldrb	r3, [r4, #10]
   16cee:	42bb      	cmp	r3, r7
   16cf0:	d1fa      	bne.n	16ce8 <bt_conn_lookup_state_le+0x2c>
   16cf2:	7a23      	ldrb	r3, [r4, #8]
   16cf4:	42ab      	cmp	r3, r5
   16cf6:	d1f7      	bne.n	16ce8 <bt_conn_lookup_state_le+0x2c>
}
   16cf8:	4620      	mov	r0, r4
   16cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16cfc:	20001d58 	.word	0x20001d58

00016d00 <send_conn_le_param_update>:
{
   16d00:	b538      	push	{r3, r4, r5, lr}
   16d02:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   16d04:	4608      	mov	r0, r1
{
   16d06:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   16d08:	f008 fb5f 	bl	1f3ca <bt_le_conn_params_valid>
   16d0c:	b348      	cbz	r0, 16d62 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16d0e:	4b16      	ldr	r3, [pc, #88]	; (16d68 <send_conn_le_param_update+0x68>)
   16d10:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   16d14:	0799      	lsls	r1, r3, #30
   16d16:	d407      	bmi.n	16d28 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   16d18:	78e3      	ldrb	r3, [r4, #3]
   16d1a:	b183      	cbz	r3, 16d3e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   16d1c:	4629      	mov	r1, r5
   16d1e:	4620      	mov	r0, r4
}
   16d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   16d24:	f000 bac8 	b.w	172b8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16d28:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   16d2c:	079a      	lsls	r2, r3, #30
   16d2e:	d5f3      	bpl.n	16d18 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d30:	f3bf 8f5b 	dmb	ish
   16d34:	6863      	ldr	r3, [r4, #4]
   16d36:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   16d3a:	055b      	lsls	r3, r3, #21
   16d3c:	d4ec      	bmi.n	16d18 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   16d3e:	4629      	mov	r1, r5
   16d40:	4620      	mov	r0, r4
   16d42:	f008 fd59 	bl	1f7f8 <bt_conn_le_conn_update>
		if (rc == 0) {
   16d46:	b958      	cbnz	r0, 16d60 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   16d48:	882b      	ldrh	r3, [r5, #0]
   16d4a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   16d4e:	886b      	ldrh	r3, [r5, #2]
   16d50:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   16d54:	88ab      	ldrh	r3, [r5, #4]
   16d56:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   16d5a:	88eb      	ldrh	r3, [r5, #6]
   16d5c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   16d60:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16d62:	f06f 0015 	mvn.w	r0, #21
   16d66:	e7fb      	b.n	16d60 <send_conn_le_param_update+0x60>
   16d68:	20000388 	.word	0x20000388

00016d6c <deferred_work>:
{
   16d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d70:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   16d72:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   16d76:	af00      	add	r7, sp, #0
   16d78:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   16d7a:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   16d7e:	bb0b      	cbnz	r3, 16dc4 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   16d80:	4630      	mov	r0, r6
   16d82:	f008 fd96 	bl	1f8b2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   16d86:	4b3f      	ldr	r3, [pc, #252]	; (16e84 <deferred_work+0x118>)
   16d88:	681d      	ldr	r5, [r3, #0]
   16d8a:	b95d      	cbnz	r5, 16da4 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16d8c:	4d3e      	ldr	r5, [pc, #248]	; (16e88 <deferred_work+0x11c>)
   16d8e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 16e9c <deferred_work+0x130>
   16d92:	4545      	cmp	r5, r8
   16d94:	d30e      	bcc.n	16db4 <deferred_work+0x48>
		bt_conn_unref(conn);
   16d96:	4630      	mov	r0, r6
   16d98:	f008 fcc5 	bl	1f726 <bt_conn_unref>
}
   16d9c:	3708      	adds	r7, #8
   16d9e:	46bd      	mov	sp, r7
   16da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   16da4:	686b      	ldr	r3, [r5, #4]
   16da6:	b11b      	cbz	r3, 16db0 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   16da8:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   16dac:	4630      	mov	r0, r6
   16dae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16db0:	692d      	ldr	r5, [r5, #16]
   16db2:	e7ea      	b.n	16d8a <deferred_work+0x1e>
		if (cb->disconnected) {
   16db4:	686b      	ldr	r3, [r5, #4]
   16db6:	b11b      	cbz	r3, 16dc0 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   16db8:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   16dbc:	4630      	mov	r0, r6
   16dbe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16dc0:	3514      	adds	r5, #20
   16dc2:	e7e6      	b.n	16d92 <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   16dc4:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   16dc8:	2b01      	cmp	r3, #1
   16dca:	d1e7      	bne.n	16d9c <deferred_work+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16dcc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   16dd0:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   16dd4:	e855 3f00 	ldrex	r3, [r5]
   16dd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   16ddc:	e845 2100 	strex	r1, r2, [r5]
   16de0:	2900      	cmp	r1, #0
   16de2:	d1f7      	bne.n	16dd4 <deferred_work+0x68>
   16de4:	f3bf 8f5b 	dmb	ish
   16de8:	0599      	lsls	r1, r3, #22
   16dea:	d531      	bpl.n	16e50 <deferred_work+0xe4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16dec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16dee:	603b      	str	r3, [r7, #0]
   16df0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16df2:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   16df4:	4639      	mov	r1, r7
   16df6:	4630      	mov	r0, r6
   16df8:	f7ff ff82 	bl	16d00 <send_conn_le_param_update>
		if (!err) {
   16dfc:	b9c0      	cbnz	r0, 16e30 <deferred_work+0xc4>
   16dfe:	f3bf 8f5b 	dmb	ish
   16e02:	e855 3f00 	ldrex	r3, [r5]
   16e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   16e0a:	e845 3200 	strex	r2, r3, [r5]
   16e0e:	2a00      	cmp	r2, #0
   16e10:	d1f7      	bne.n	16e02 <deferred_work+0x96>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16e12:	f3bf 8f5b 	dmb	ish
   16e16:	f3bf 8f5b 	dmb	ish
   16e1a:	e855 3f00 	ldrex	r3, [r5]
   16e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16e22:	e845 3200 	strex	r2, r3, [r5]
   16e26:	2a00      	cmp	r2, #0
   16e28:	d1f7      	bne.n	16e1a <deferred_work+0xae>
   16e2a:	f3bf 8f5b 	dmb	ish
   16e2e:	e7b5      	b.n	16d9c <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   16e30:	466c      	mov	r4, sp
   16e32:	b088      	sub	sp, #32
   16e34:	466a      	mov	r2, sp
   16e36:	4b15      	ldr	r3, [pc, #84]	; (16e8c <deferred_work+0x120>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   16e38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16e3c:	2303      	movs	r3, #3
   16e3e:	f842 3f10 	str.w	r3, [r2, #16]!
   16e42:	4813      	ldr	r0, [pc, #76]	; (16e90 <deferred_work+0x124>)
   16e44:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16e48:	f008 fc1f 	bl	1f68a <z_log_msg_static_create.constprop.0>
   16e4c:	46a5      	mov	sp, r4
   16e4e:	e7e2      	b.n	16e16 <deferred_work+0xaa>
		param = BT_LE_CONN_PARAM(
   16e50:	4a10      	ldr	r2, [pc, #64]	; (16e94 <deferred_work+0x128>)
   16e52:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   16e56:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   16e5a:	4639      	mov	r1, r7
   16e5c:	4630      	mov	r0, r6
   16e5e:	f7ff ff4f 	bl	16d00 <send_conn_le_param_update>
		if (!err) {
   16e62:	b950      	cbnz	r0, 16e7a <deferred_work+0x10e>
   16e64:	f3bf 8f5b 	dmb	ish
   16e68:	e855 3f00 	ldrex	r3, [r5]
   16e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16e70:	e845 3200 	strex	r2, r3, [r5]
   16e74:	2a00      	cmp	r2, #0
   16e76:	d0cc      	beq.n	16e12 <deferred_work+0xa6>
   16e78:	e7f6      	b.n	16e68 <deferred_work+0xfc>
			LOG_WRN("Send auto LE param update failed (err %d)",
   16e7a:	466c      	mov	r4, sp
   16e7c:	b088      	sub	sp, #32
   16e7e:	466a      	mov	r2, sp
   16e80:	4b05      	ldr	r3, [pc, #20]	; (16e98 <deferred_work+0x12c>)
   16e82:	e7d9      	b.n	16e38 <deferred_work+0xcc>
   16e84:	20002bb8 	.word	0x20002bb8
   16e88:	00021e08 	.word	0x00021e08
   16e8c:	000237aa 	.word	0x000237aa
   16e90:	00021e54 	.word	0x00021e54
   16e94:	00280018 	.word	0x00280018
   16e98:	000237cf 	.word	0x000237cf
   16e9c:	00021e1c 	.word	0x00021e1c

00016ea0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   16ea0:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16ea2:	4801      	ldr	r0, [pc, #4]	; (16ea8 <bt_conn_create_frag_timeout+0x8>)
   16ea4:	f7ff be0a 	b.w	16abc <bt_conn_create_pdu_timeout>
   16ea8:	200008e4 	.word	0x200008e4

00016eac <create_frag>:
{
   16eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16eb0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   16eb2:	f04f 33ff 	mov.w	r3, #4294967295
   16eb6:	f04f 32ff 	mov.w	r2, #4294967295
   16eba:	2000      	movs	r0, #0
{
   16ebc:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   16ebe:	f7ff ffef 	bl	16ea0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   16ec2:	7ab3      	ldrb	r3, [r6, #10]
   16ec4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   16ec6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16ec8:	f04f 0600 	mov.w	r6, #0
   16ecc:	d005      	beq.n	16eda <create_frag+0x2e>
		net_buf_unref(frag);
   16ece:	f002 f991 	bl	191f4 <net_buf_unref>
		return NULL;
   16ed2:	4635      	mov	r5, r6
}
   16ed4:	4628      	mov	r0, r5
   16ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   16eda:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   16edc:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   16ee0:	4e0c      	ldr	r6, [pc, #48]	; (16f14 <create_frag+0x68>)
   16ee2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16ee4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   16ee8:	f009 fd5d 	bl	209a6 <net_buf_simple_tailroom>
   16eec:	4580      	cmp	r8, r0
   16eee:	d20c      	bcs.n	16f0a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   16ef0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16ef4:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   16ef8:	4632      	mov	r2, r6
   16efa:	4638      	mov	r0, r7
   16efc:	f009 fd1e 	bl	2093c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16f00:	4631      	mov	r1, r6
   16f02:	4620      	mov	r0, r4
   16f04:	f009 fd33 	bl	2096e <net_buf_simple_pull>
   16f08:	e7e4      	b.n	16ed4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   16f0a:	4638      	mov	r0, r7
   16f0c:	f009 fd4b 	bl	209a6 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16f10:	b286      	uxth	r6, r0
   16f12:	e7ef      	b.n	16ef4 <create_frag+0x48>
   16f14:	20000388 	.word	0x20000388

00016f18 <bt_conn_process_tx>:
{
   16f18:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16f1a:	7a83      	ldrb	r3, [r0, #10]
{
   16f1c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   16f1e:	b993      	cbnz	r3, 16f46 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f20:	f3bf 8f5b 	dmb	ish
   16f24:	1d03      	adds	r3, r0, #4
   16f26:	e853 2f00 	ldrex	r2, [r3]
   16f2a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   16f2e:	e843 1500 	strex	r5, r1, [r3]
   16f32:	2d00      	cmp	r5, #0
   16f34:	d1f7      	bne.n	16f26 <bt_conn_process_tx+0xe>
   16f36:	f3bf 8f5b 	dmb	ish
   16f3a:	0653      	lsls	r3, r2, #25
   16f3c:	d503      	bpl.n	16f46 <bt_conn_process_tx+0x2e>
}
   16f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   16f42:	f008 bbb1 	b.w	1f6a8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16f46:	2200      	movs	r2, #0
   16f48:	2300      	movs	r3, #0
   16f4a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16f4e:	f009 fc94 	bl	2087a <net_buf_get>
	BT_ASSERT(buf);
   16f52:	4605      	mov	r5, r0
   16f54:	b960      	cbnz	r0, 16f70 <bt_conn_process_tx+0x58>
   16f56:	4a24      	ldr	r2, [pc, #144]	; (16fe8 <bt_conn_process_tx+0xd0>)
   16f58:	4924      	ldr	r1, [pc, #144]	; (16fec <bt_conn_process_tx+0xd4>)
   16f5a:	4825      	ldr	r0, [pc, #148]	; (16ff0 <bt_conn_process_tx+0xd8>)
   16f5c:	f240 331a 	movw	r3, #794	; 0x31a
   16f60:	f007 fbde 	bl	1e720 <assert_print>
   16f64:	4040      	eors	r0, r0
   16f66:	f380 8811 	msr	BASEPRI, r0
   16f6a:	f04f 0003 	mov.w	r0, #3
   16f6e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   16f70:	4e20      	ldr	r6, [pc, #128]	; (16ff4 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
   16f72:	8a2a      	ldrh	r2, [r5, #16]
   16f74:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16f78:	429a      	cmp	r2, r3
   16f7a:	d807      	bhi.n	16f8c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   16f7c:	2300      	movs	r3, #0
   16f7e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   16f80:	4629      	mov	r1, r5
   16f82:	4620      	mov	r0, r4
   16f84:	f7ff fa62 	bl	1644c <send_frag>
	if (!send_buf(conn, buf)) {
   16f88:	b968      	cbnz	r0, 16fa6 <bt_conn_process_tx+0x8e>
   16f8a:	e005      	b.n	16f98 <bt_conn_process_tx+0x80>
	frag = create_frag(conn, buf);
   16f8c:	4629      	mov	r1, r5
   16f8e:	4620      	mov	r0, r4
   16f90:	f7ff ff8c 	bl	16eac <create_frag>
	if (!frag) {
   16f94:	4601      	mov	r1, r0
   16f96:	b938      	cbnz	r0, 16fa8 <bt_conn_process_tx+0x90>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   16f98:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   16f9a:	2300      	movs	r3, #0
   16f9c:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   16f9e:	4628      	mov	r0, r5
   16fa0:	f002 f928 	bl	191f4 <net_buf_unref>
		if (tx) {
   16fa4:	b9ce      	cbnz	r6, 16fda <bt_conn_process_tx+0xc2>
}
   16fa6:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16fa8:	2301      	movs	r3, #1
   16faa:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16fac:	4620      	mov	r0, r4
   16fae:	f7ff fa4d 	bl	1644c <send_frag>
   16fb2:	2800      	cmp	r0, #0
   16fb4:	d0f0      	beq.n	16f98 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   16fb6:	8a2a      	ldrh	r2, [r5, #16]
   16fb8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16fbc:	429a      	cmp	r2, r3
   16fbe:	d802      	bhi.n	16fc6 <bt_conn_process_tx+0xae>
	return send_frag(conn, buf, FRAG_END, false);
   16fc0:	2300      	movs	r3, #0
   16fc2:	2203      	movs	r2, #3
   16fc4:	e7dc      	b.n	16f80 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   16fc6:	4629      	mov	r1, r5
   16fc8:	4620      	mov	r0, r4
   16fca:	f7ff ff6f 	bl	16eac <create_frag>
		if (!frag) {
   16fce:	4601      	mov	r1, r0
   16fd0:	2800      	cmp	r0, #0
   16fd2:	d0e1      	beq.n	16f98 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16fd4:	2301      	movs	r3, #1
   16fd6:	461a      	mov	r2, r3
   16fd8:	e7e8      	b.n	16fac <bt_conn_process_tx+0x94>
			conn_tx_destroy(conn, tx);
   16fda:	4631      	mov	r1, r6
   16fdc:	4620      	mov	r0, r4
}
   16fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   16fe2:	f7ff ba1d 	b.w	16420 <conn_tx_destroy>
   16fe6:	bf00      	nop
   16fe8:	000237f9 	.word	0x000237f9
   16fec:	00023d62 	.word	0x00023d62
   16ff0:	00023076 	.word	0x00023076
   16ff4:	20000388 	.word	0x20000388

00016ff8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16ff8:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   16ffa:	480c      	ldr	r0, [pc, #48]	; (1702c <bt_conn_init+0x34>)
   16ffc:	f00a f940 	bl	21280 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17000:	490b      	ldr	r1, [pc, #44]	; (17030 <bt_conn_init+0x38>)
   17002:	480a      	ldr	r0, [pc, #40]	; (1702c <bt_conn_init+0x34>)
   17004:	f00a f948 	bl	21298 <k_queue_append>
   17008:	490a      	ldr	r1, [pc, #40]	; (17034 <bt_conn_init+0x3c>)
   1700a:	4808      	ldr	r0, [pc, #32]	; (1702c <bt_conn_init+0x34>)
   1700c:	f00a f944 	bl	21298 <k_queue_append>
   17010:	4909      	ldr	r1, [pc, #36]	; (17038 <bt_conn_init+0x40>)
   17012:	4806      	ldr	r0, [pc, #24]	; (1702c <bt_conn_init+0x34>)
   17014:	f00a f940 	bl	21298 <k_queue_append>
	}

	bt_att_init();
   17018:	f001 f8a4 	bl	18164 <bt_att_init>

	err = bt_smp_init();
   1701c:	f009 fc25 	bl	2086a <bt_smp_init>
	if (err) {
   17020:	4604      	mov	r4, r0
   17022:	b908      	cbnz	r0, 17028 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   17024:	f008 fc83 	bl	1f92e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17028:	4620      	mov	r0, r4
   1702a:	bd10      	pop	{r4, pc}
   1702c:	20000874 	.word	0x20000874
   17030:	20002b88 	.word	0x20002b88
   17034:	20002b98 	.word	0x20002b98
   17038:	20002ba8 	.word	0x20002ba8

0001703c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1703c:	b580      	push	{r7, lr}
   1703e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   17040:	b088      	sub	sp, #32
   17042:	466a      	mov	r2, sp
   17044:	4b06      	ldr	r3, [pc, #24]	; (17060 <l2cap_create_le_sig_pdu.part.0+0x24>)
   17046:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1704a:	2303      	movs	r3, #3
   1704c:	f842 3f10 	str.w	r3, [r2, #16]!
   17050:	4804      	ldr	r0, [pc, #16]	; (17064 <l2cap_create_le_sig_pdu.part.0+0x28>)
   17052:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17056:	f008 fbf8 	bl	1f84a <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1705a:	2000      	movs	r0, #0
   1705c:	46bd      	mov	sp, r7
   1705e:	bd80      	pop	{r7, pc}
   17060:	000238a2 	.word	0x000238a2
   17064:	00021e74 	.word	0x00021e74

00017068 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   17068:	b580      	push	{r7, lr}
   1706a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   1706c:	b088      	sub	sp, #32
   1706e:	466a      	mov	r2, sp
   17070:	4b07      	ldr	r3, [pc, #28]	; (17090 <l2cap_accept.part.0+0x28>)
   17072:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17076:	2303      	movs	r3, #3
   17078:	f842 3f10 	str.w	r3, [r2, #16]!
   1707c:	4805      	ldr	r0, [pc, #20]	; (17094 <l2cap_accept.part.0+0x2c>)
   1707e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17082:	f008 fbe2 	bl	1f84a <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   17086:	f06f 000b 	mvn.w	r0, #11
   1708a:	46bd      	mov	sp, r7
   1708c:	bd80      	pop	{r7, pc}
   1708e:	bf00      	nop
   17090:	000238ca 	.word	0x000238ca
   17094:	00021e74 	.word	0x00021e74

00017098 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   17098:	4b04      	ldr	r3, [pc, #16]	; (170ac <l2cap_accept+0x14>)
   1709a:	681a      	ldr	r2, [r3, #0]
   1709c:	b10a      	cbz	r2, 170a2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1709e:	f7ff bfe3 	b.w	17068 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   170a2:	4803      	ldr	r0, [pc, #12]	; (170b0 <l2cap_accept+0x18>)
   170a4:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   170a6:	600b      	str	r3, [r1, #0]
}
   170a8:	4610      	mov	r0, r2
   170aa:	4770      	bx	lr
   170ac:	20002bbc 	.word	0x20002bbc
   170b0:	00022194 	.word	0x00022194

000170b4 <bt_l2cap_connected>:
{
   170b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   170b6:	4d24      	ldr	r5, [pc, #144]	; (17148 <bt_l2cap_connected+0x94>)
   170b8:	4f24      	ldr	r7, [pc, #144]	; (1714c <bt_l2cap_connected+0x98>)
{
   170ba:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   170bc:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   170be:	42bd      	cmp	r5, r7
   170c0:	d301      	bcc.n	170c6 <bt_l2cap_connected+0x12>
}
   170c2:	b003      	add	sp, #12
   170c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   170c6:	686b      	ldr	r3, [r5, #4]
   170c8:	a901      	add	r1, sp, #4
   170ca:	4620      	mov	r0, r4
   170cc:	4798      	blx	r3
   170ce:	2800      	cmp	r0, #0
   170d0:	db34      	blt.n	1713c <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   170d2:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   170d4:	882a      	ldrh	r2, [r5, #0]
   170d6:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   170d8:	849a      	strh	r2, [r3, #36]	; 0x24
   170da:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   170de:	68a8      	ldr	r0, [r5, #8]
   170e0:	f3bf 8f5b 	dmb	ish
   170e4:	e852 1f00 	ldrex	r1, [r2]
   170e8:	e842 6c00 	strex	ip, r6, [r2]
   170ec:	f1bc 0f00 	cmp.w	ip, #0
   170f0:	d1f8      	bne.n	170e4 <bt_l2cap_connected+0x30>
   170f2:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   170f6:	609e      	str	r6, [r3, #8]
	return list->tail;
   170f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   170fa:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   170fe:	b9f9      	cbnz	r1, 17140 <bt_l2cap_connected+0x8c>
	list->head = node;
   17100:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   17104:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   17106:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   17108:	9801      	ldr	r0, [sp, #4]
   1710a:	6843      	ldr	r3, [r0, #4]
   1710c:	681b      	ldr	r3, [r3, #0]
   1710e:	b103      	cbz	r3, 17112 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   17110:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17112:	9b01      	ldr	r3, [sp, #4]
   17114:	f3bf 8f5b 	dmb	ish
   17118:	3310      	adds	r3, #16
   1711a:	e853 1f00 	ldrex	r1, [r3]
   1711e:	f041 0101 	orr.w	r1, r1, #1
   17122:	e843 1200 	strex	r2, r1, [r3]
   17126:	2a00      	cmp	r2, #0
   17128:	d1f7      	bne.n	1711a <bt_l2cap_connected+0x66>
   1712a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1712e:	9801      	ldr	r0, [sp, #4]
   17130:	6843      	ldr	r3, [r0, #4]
   17132:	69db      	ldr	r3, [r3, #28]
   17134:	b113      	cbz	r3, 1713c <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   17136:	f100 0110 	add.w	r1, r0, #16
   1713a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1713c:	350c      	adds	r5, #12
   1713e:	e7be      	b.n	170be <bt_l2cap_connected+0xa>
	parent->next = child;
   17140:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17142:	6562      	str	r2, [r4, #84]	; 0x54
}
   17144:	e7de      	b.n	17104 <bt_l2cap_connected+0x50>
   17146:	bf00      	nop
   17148:	00021de4 	.word	0x00021de4
   1714c:	00021e08 	.word	0x00021e08

00017150 <l2cap_recv>:
{
   17150:	b5f0      	push	{r4, r5, r6, r7, lr}
   17152:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   17154:	8a0b      	ldrh	r3, [r1, #16]
   17156:	2b03      	cmp	r3, #3
{
   17158:	af02      	add	r7, sp, #8
   1715a:	4606      	mov	r6, r0
   1715c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1715e:	d80b      	bhi.n	17178 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   17160:	4b30      	ldr	r3, [pc, #192]	; (17224 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   17162:	617b      	str	r3, [r7, #20]
   17164:	2302      	movs	r3, #2
   17166:	4830      	ldr	r0, [pc, #192]	; (17228 <l2cap_recv+0xd8>)
   17168:	613b      	str	r3, [r7, #16]
   1716a:	f107 0210 	add.w	r2, r7, #16
   1716e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17172:	f008 fb6a 	bl	1f84a <z_log_msg_static_create.constprop.0>
		return 0;
   17176:	e019      	b.n	171ac <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   17178:	2104      	movs	r1, #4
   1717a:	f105 000c 	add.w	r0, r5, #12
   1717e:	f009 fbfe 	bl	2097e <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17182:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   17184:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   17186:	4299      	cmp	r1, r3
   17188:	4604      	mov	r4, r0
   1718a:	d013      	beq.n	171b4 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1718c:	466c      	mov	r4, sp
   1718e:	b088      	sub	sp, #32
   17190:	aa02      	add	r2, sp, #8
   17192:	4826      	ldr	r0, [pc, #152]	; (1722c <l2cap_recv+0xdc>)
   17194:	61d3      	str	r3, [r2, #28]
   17196:	2304      	movs	r3, #4
   17198:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1719c:	f842 3f10 	str.w	r3, [r2, #16]!
   171a0:	4821      	ldr	r0, [pc, #132]	; (17228 <l2cap_recv+0xd8>)
   171a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   171a6:	f008 fb50 	bl	1f84a <z_log_msg_static_create.constprop.0>
   171aa:	46a5      	mov	sp, r4
}
   171ac:	2000      	movs	r0, #0
   171ae:	371c      	adds	r7, #28
   171b0:	46bd      	mov	sp, r7
   171b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   171b4:	7843      	ldrb	r3, [r0, #1]
   171b6:	b90b      	cbnz	r3, 171bc <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   171b8:	4b1d      	ldr	r3, [pc, #116]	; (17230 <l2cap_recv+0xe0>)
   171ba:	e7d2      	b.n	17162 <l2cap_recv+0x12>
	switch (hdr->code) {
   171bc:	7803      	ldrb	r3, [r0, #0]
   171be:	2b01      	cmp	r3, #1
   171c0:	d0f4      	beq.n	171ac <l2cap_recv+0x5c>
   171c2:	2b13      	cmp	r3, #19
   171c4:	d103      	bne.n	171ce <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   171c6:	2901      	cmp	r1, #1
   171c8:	d8f0      	bhi.n	171ac <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   171ca:	4b1a      	ldr	r3, [pc, #104]	; (17234 <l2cap_recv+0xe4>)
   171cc:	e7c9      	b.n	17162 <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   171ce:	466d      	mov	r5, sp
   171d0:	b088      	sub	sp, #32
   171d2:	aa02      	add	r2, sp, #8
   171d4:	4918      	ldr	r1, [pc, #96]	; (17238 <l2cap_recv+0xe8>)
   171d6:	4814      	ldr	r0, [pc, #80]	; (17228 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   171d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   171dc:	2303      	movs	r3, #3
   171de:	f842 3f10 	str.w	r3, [r2, #16]!
   171e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   171e6:	f008 fb30 	bl	1f84a <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   171ea:	2202      	movs	r2, #2
   171ec:	7861      	ldrb	r1, [r4, #1]
   171ee:	46ad      	mov	sp, r5
   171f0:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   171f2:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   171f4:	f008 fb2c 	bl	1f850 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   171f8:	4604      	mov	r4, r0
   171fa:	2800      	cmp	r0, #0
   171fc:	d0d6      	beq.n	171ac <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   171fe:	2102      	movs	r1, #2
   17200:	300c      	adds	r0, #12
   17202:	f009 fb95 	bl	20930 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   17206:	2300      	movs	r3, #0
   17208:	7003      	strb	r3, [r0, #0]
   1720a:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1720c:	4622      	mov	r2, r4
   1720e:	9300      	str	r3, [sp, #0]
   17210:	2105      	movs	r1, #5
   17212:	4628      	mov	r0, r5
   17214:	f008 fb68 	bl	1f8e8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17218:	2800      	cmp	r0, #0
   1721a:	d0c7      	beq.n	171ac <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1721c:	4620      	mov	r0, r4
   1721e:	f001 ffe9 	bl	191f4 <net_buf_unref>
   17222:	e7c3      	b.n	171ac <l2cap_recv+0x5c>
   17224:	000238f1 	.word	0x000238f1
   17228:	00021e74 	.word	0x00021e74
   1722c:	0002390f 	.word	0x0002390f
   17230:	00023930 	.word	0x00023930
   17234:	00023951 	.word	0x00023951
   17238:	0002396d 	.word	0x0002396d

0001723c <bt_l2cap_recv>:
{
   1723c:	b5b0      	push	{r4, r5, r7, lr}
   1723e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   17240:	8a0b      	ldrh	r3, [r1, #16]
   17242:	2b03      	cmp	r3, #3
{
   17244:	af00      	add	r7, sp, #0
   17246:	4605      	mov	r5, r0
   17248:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1724a:	d810      	bhi.n	1726e <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   1724c:	4b17      	ldr	r3, [pc, #92]	; (172ac <bt_l2cap_recv+0x70>)
   1724e:	617b      	str	r3, [r7, #20]
   17250:	2302      	movs	r3, #2
   17252:	4817      	ldr	r0, [pc, #92]	; (172b0 <bt_l2cap_recv+0x74>)
   17254:	613b      	str	r3, [r7, #16]
   17256:	f107 0210 	add.w	r2, r7, #16
   1725a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1725e:	f008 faf4 	bl	1f84a <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   17262:	4620      	mov	r0, r4
   17264:	f001 ffc6 	bl	191f4 <net_buf_unref>
}
   17268:	3718      	adds	r7, #24
   1726a:	46bd      	mov	sp, r7
   1726c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1726e:	2104      	movs	r1, #4
   17270:	f104 000c 	add.w	r0, r4, #12
   17274:	f009 fb83 	bl	2097e <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   17278:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1727a:	4628      	mov	r0, r5
   1727c:	f008 fb4d 	bl	1f91a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17280:	b978      	cbnz	r0, 172a2 <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   17282:	466d      	mov	r5, sp
   17284:	b088      	sub	sp, #32
   17286:	466a      	mov	r2, sp
   17288:	4b0a      	ldr	r3, [pc, #40]	; (172b4 <bt_l2cap_recv+0x78>)
   1728a:	4809      	ldr	r0, [pc, #36]	; (172b0 <bt_l2cap_recv+0x74>)
   1728c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   17290:	2303      	movs	r3, #3
   17292:	f842 3f10 	str.w	r3, [r2, #16]!
   17296:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1729a:	f008 fad6 	bl	1f84a <z_log_msg_static_create.constprop.0>
   1729e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   172a0:	e7df      	b.n	17262 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   172a2:	6843      	ldr	r3, [r0, #4]
   172a4:	4621      	mov	r1, r4
   172a6:	695b      	ldr	r3, [r3, #20]
   172a8:	4798      	blx	r3
   172aa:	e7da      	b.n	17262 <bt_l2cap_recv+0x26>
   172ac:	00023995 	.word	0x00023995
   172b0:	00021e74 	.word	0x00021e74
   172b4:	000239b2 	.word	0x000239b2

000172b8 <bt_l2cap_update_conn_param>:
{
   172b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   172ba:	4b17      	ldr	r3, [pc, #92]	; (17318 <bt_l2cap_update_conn_param+0x60>)
{
   172bc:	460e      	mov	r6, r1
	ident++;
   172be:	7819      	ldrb	r1, [r3, #0]
   172c0:	3101      	adds	r1, #1
   172c2:	b2c9      	uxtb	r1, r1
   172c4:	2901      	cmp	r1, #1
   172c6:	bf38      	it	cc
   172c8:	2101      	movcc	r1, #1
{
   172ca:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   172cc:	2208      	movs	r2, #8
   172ce:	2012      	movs	r0, #18
	ident++;
   172d0:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   172d2:	f008 fabd 	bl	1f850 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   172d6:	4604      	mov	r4, r0
   172d8:	b1d0      	cbz	r0, 17310 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   172da:	2108      	movs	r1, #8
   172dc:	300c      	adds	r0, #12
   172de:	f009 fb27 	bl	20930 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   172e2:	8833      	ldrh	r3, [r6, #0]
   172e4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   172e6:	8873      	ldrh	r3, [r6, #2]
   172e8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   172ea:	88b3      	ldrh	r3, [r6, #4]
   172ec:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   172ee:	88f3      	ldrh	r3, [r6, #6]
   172f0:	80c3      	strh	r3, [r0, #6]
   172f2:	2300      	movs	r3, #0
   172f4:	4628      	mov	r0, r5
   172f6:	9300      	str	r3, [sp, #0]
   172f8:	4622      	mov	r2, r4
   172fa:	2105      	movs	r1, #5
   172fc:	f008 faf4 	bl	1f8e8 <bt_l2cap_send_cb>
	if (err) {
   17300:	4605      	mov	r5, r0
   17302:	b110      	cbz	r0, 1730a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   17304:	4620      	mov	r0, r4
   17306:	f001 ff75 	bl	191f4 <net_buf_unref>
}
   1730a:	4628      	mov	r0, r5
   1730c:	b002      	add	sp, #8
   1730e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   17310:	f06f 050b 	mvn.w	r5, #11
   17314:	e7f9      	b.n	1730a <bt_l2cap_update_conn_param+0x52>
   17316:	bf00      	nop
   17318:	20003068 	.word	0x20003068

0001731c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1731c:	2823      	cmp	r0, #35	; 0x23
   1731e:	d81f      	bhi.n	17360 <att_op_get_type+0x44>
   17320:	281a      	cmp	r0, #26
   17322:	d804      	bhi.n	1732e <att_op_get_type+0x12>
   17324:	1e43      	subs	r3, r0, #1
   17326:	2b18      	cmp	r3, #24
   17328:	d90e      	bls.n	17348 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1732a:	2006      	movs	r0, #6
   1732c:	4770      	bx	lr
	switch (op) {
   1732e:	f1a0 031b 	sub.w	r3, r0, #27
   17332:	2b08      	cmp	r3, #8
   17334:	d81e      	bhi.n	17374 <att_op_get_type+0x58>
   17336:	e8df f003 	tbb	[pc, r3]
   1733a:	1d05      	.short	0x1d05
   1733c:	191d231b 	.word	0x191d231b
   17340:	1d25      	.short	0x1d25
   17342:	05          	.byte	0x05
   17343:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   17344:	2003      	movs	r0, #3
   17346:	4770      	bx	lr
	switch (op) {
   17348:	4a0f      	ldr	r2, [pc, #60]	; (17388 <att_op_get_type+0x6c>)
   1734a:	2301      	movs	r3, #1
   1734c:	4083      	lsls	r3, r0
   1734e:	401a      	ands	r2, r3
   17350:	b9c2      	cbnz	r2, 17384 <att_op_get_type+0x68>
   17352:	4a0e      	ldr	r2, [pc, #56]	; (1738c <att_op_get_type+0x70>)
   17354:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   17356:	2a00      	cmp	r2, #0
   17358:	bf14      	ite	ne
   1735a:	2001      	movne	r0, #1
   1735c:	2006      	moveq	r0, #6
   1735e:	4770      	bx	lr
	switch (op) {
   17360:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   17364:	2b52      	cmp	r3, #82	; 0x52
   17366:	d105      	bne.n	17374 <att_op_get_type+0x58>
		return ATT_COMMAND;
   17368:	2000      	movs	r0, #0
}
   1736a:	4770      	bx	lr
		return ATT_REQUEST;
   1736c:	2001      	movs	r0, #1
   1736e:	4770      	bx	lr
		return ATT_INDICATION;
   17370:	2005      	movs	r0, #5
   17372:	4770      	bx	lr
		return ATT_COMMAND;
   17374:	f010 0f40 	tst.w	r0, #64	; 0x40
   17378:	bf0c      	ite	eq
   1737a:	2006      	moveq	r0, #6
   1737c:	2000      	movne	r0, #0
   1737e:	4770      	bx	lr
	switch (op) {
   17380:	2004      	movs	r0, #4
   17382:	4770      	bx	lr
		return ATT_RESPONSE;
   17384:	2002      	movs	r0, #2
   17386:	4770      	bx	lr
   17388:	028aaaaa 	.word	0x028aaaaa
   1738c:	01455554 	.word	0x01455554

00017390 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   17390:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17392:	3804      	subs	r0, #4
   17394:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   17396:	a901      	add	r1, sp, #4
   17398:	4802      	ldr	r0, [pc, #8]	; (173a4 <bt_att_released+0x14>)
   1739a:	f009 feba 	bl	21112 <k_mem_slab_free>
}
   1739e:	b003      	add	sp, #12
   173a0:	f85d fb04 	ldr.w	pc, [sp], #4
   173a4:	200007e4 	.word	0x200007e4

000173a8 <tx_meta_data_free>:
{
   173a8:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   173aa:	2100      	movs	r1, #0
{
   173ac:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   173ae:	2214      	movs	r2, #20
   173b0:	f007 fefe 	bl	1f1b0 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   173b4:	4621      	mov	r1, r4
   173b6:	4802      	ldr	r0, [pc, #8]	; (173c0 <tx_meta_data_free+0x18>)
}
   173b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   173bc:	f009 bf6c 	b.w	21298 <k_queue_append>
   173c0:	2000085c 	.word	0x2000085c

000173c4 <find_type_cb>:
{
   173c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173c8:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   173ca:	f8d2 a000 	ldr.w	sl, [r2]
{
   173ce:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   173d0:	f8da 3004 	ldr.w	r3, [sl, #4]
   173d4:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   173d6:	2500      	movs	r5, #0
   173d8:	f642 0301 	movw	r3, #10241	; 0x2801
{
   173dc:	4680      	mov	r8, r0
   173de:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   173e0:	6800      	ldr	r0, [r0, #0]
   173e2:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   173e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
   173e8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   173ec:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   173ee:	f007 fefd 	bl	1f1ec <bt_uuid_cmp>
   173f2:	2800      	cmp	r0, #0
   173f4:	d070      	beq.n	174d8 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   173f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   173fa:	f8d8 0000 	ldr.w	r0, [r8]
   173fe:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   17402:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17404:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   17408:	f007 fef0 	bl	1f1ec <bt_uuid_cmp>
   1740c:	b138      	cbz	r0, 1741e <find_type_cb+0x5a>
		if (data->group &&
   1740e:	68a3      	ldr	r3, [r4, #8]
   17410:	b11b      	cbz	r3, 1741a <find_type_cb+0x56>
   17412:	885a      	ldrh	r2, [r3, #2]
   17414:	42b2      	cmp	r2, r6
   17416:	d200      	bcs.n	1741a <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   17418:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1741a:	2001      	movs	r0, #1
   1741c:	e009      	b.n	17432 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1741e:	6861      	ldr	r1, [r4, #4]
   17420:	4608      	mov	r0, r1
   17422:	f008 fa8f 	bl	1f944 <net_buf_frags_len>
   17426:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1742a:	1a1b      	subs	r3, r3, r0
   1742c:	2b03      	cmp	r3, #3
   1742e:	d804      	bhi.n	1743a <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   17430:	2000      	movs	r0, #0
}
   17432:	3744      	adds	r7, #68	; 0x44
   17434:	46bd      	mov	sp, r7
   17436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1743a:	4608      	mov	r0, r1
   1743c:	f009 fa56 	bl	208ec <net_buf_frag_last>
   17440:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   17442:	6860      	ldr	r0, [r4, #4]
   17444:	f008 fa7e 	bl	1f944 <net_buf_frags_len>
   17448:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1744c:	f105 090c 	add.w	r9, r5, #12
   17450:	ebab 0b00 	sub.w	fp, fp, r0
   17454:	4648      	mov	r0, r9
   17456:	f009 faa6 	bl	209a6 <net_buf_simple_tailroom>
   1745a:	4558      	cmp	r0, fp
   1745c:	d93f      	bls.n	174de <find_type_cb+0x11a>
   1745e:	6860      	ldr	r0, [r4, #4]
   17460:	f008 fa70 	bl	1f944 <net_buf_frags_len>
   17464:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   17468:	1a18      	subs	r0, r3, r0
	if (!len) {
   1746a:	b970      	cbnz	r0, 1748a <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1746c:	6863      	ldr	r3, [r4, #4]
   1746e:	7a98      	ldrb	r0, [r3, #10]
   17470:	f001 fdfe 	bl	19070 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   17474:	2200      	movs	r2, #0
   17476:	2300      	movs	r3, #0
   17478:	f009 f9fa 	bl	20870 <net_buf_alloc_fixed>
		if (!frag) {
   1747c:	4605      	mov	r5, r0
   1747e:	2800      	cmp	r0, #0
   17480:	d0d6      	beq.n	17430 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   17482:	4601      	mov	r1, r0
   17484:	6860      	ldr	r0, [r4, #4]
   17486:	f009 fa42 	bl	2090e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1748a:	2300      	movs	r3, #0
   1748c:	9300      	str	r3, [sp, #0]
   1748e:	f8d8 a004 	ldr.w	sl, [r8, #4]
   17492:	6878      	ldr	r0, [r7, #4]
   17494:	4641      	mov	r1, r8
   17496:	2310      	movs	r3, #16
   17498:	f107 0208 	add.w	r2, r7, #8
   1749c:	47d0      	blx	sl
	if (read < 0) {
   1749e:	f1b0 0800 	subs.w	r8, r0, #0
   174a2:	db19      	blt.n	174d8 <find_type_cb+0x114>
	if (read != data->value_len) {
   174a4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   174a6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   174a8:	4542      	cmp	r2, r8
   174aa:	d03f      	beq.n	1752c <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   174ac:	4601      	mov	r1, r0
   174ae:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   174b2:	f007 fec9 	bl	1f248 <bt_uuid_create>
   174b6:	b9b0      	cbnz	r0, 174e6 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   174b8:	466d      	mov	r5, sp
   174ba:	b088      	sub	sp, #32
   174bc:	7c23      	ldrb	r3, [r4, #16]
   174be:	aa02      	add	r2, sp, #8
   174c0:	491d      	ldr	r1, [pc, #116]	; (17538 <find_type_cb+0x174>)
   174c2:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   174c6:	2303      	movs	r3, #3
   174c8:	f842 3f10 	str.w	r3, [r2, #16]!
   174cc:	481b      	ldr	r0, [pc, #108]	; (1753c <find_type_cb+0x178>)
   174ce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   174d2:	f008 fb25 	bl	1fb20 <z_log_msg_static_create.constprop.0>
   174d6:	46ad      	mov	sp, r5
	data->group = NULL;
   174d8:	2300      	movs	r3, #0
   174da:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   174dc:	e79d      	b.n	1741a <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   174de:	4648      	mov	r0, r9
   174e0:	f009 fa61 	bl	209a6 <net_buf_simple_tailroom>
   174e4:	e7c1      	b.n	1746a <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   174e6:	fa5f f288 	uxtb.w	r2, r8
   174ea:	f107 0108 	add.w	r1, r7, #8
   174ee:	f107 0018 	add.w	r0, r7, #24
   174f2:	f007 fea9 	bl	1f248 <bt_uuid_create>
   174f6:	b930      	cbnz	r0, 17506 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   174f8:	466d      	mov	r5, sp
   174fa:	b088      	sub	sp, #32
   174fc:	aa02      	add	r2, sp, #8
   174fe:	4b10      	ldr	r3, [pc, #64]	; (17540 <find_type_cb+0x17c>)
   17500:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17504:	e7df      	b.n	174c6 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17506:	f107 0118 	add.w	r1, r7, #24
   1750a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1750e:	f007 fe6d 	bl	1f1ec <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   17512:	2800      	cmp	r0, #0
   17514:	d1e0      	bne.n	174d8 <find_type_cb+0x114>
	data->err = 0x00;
   17516:	2300      	movs	r3, #0
   17518:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1751a:	2104      	movs	r1, #4
   1751c:	f105 000c 	add.w	r0, r5, #12
   17520:	f009 fa06 	bl	20930 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   17524:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17526:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17528:	68a3      	ldr	r3, [r4, #8]
   1752a:	e775      	b.n	17418 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1752c:	f107 0108 	add.w	r1, r7, #8
   17530:	f007 fe23 	bl	1f17a <memcmp>
   17534:	e7ed      	b.n	17512 <find_type_cb+0x14e>
   17536:	bf00      	nop
   17538:	000239ee 	.word	0x000239ee
   1753c:	00021e4c 	.word	0x00021e4c
   17540:	00023a0d 	.word	0x00023a0d

00017544 <chan_send>:
{
   17544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17548:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1754a:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1754e:	68cb      	ldr	r3, [r1, #12]
{
   17550:	b089      	sub	sp, #36	; 0x24
   17552:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   17554:	3090      	adds	r0, #144	; 0x90
   17556:	2102      	movs	r1, #2
   17558:	f008 fa0e 	bl	1f978 <atomic_test_bit>
   1755c:	2800      	cmp	r0, #0
   1755e:	d043      	beq.n	175e8 <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   17560:	781b      	ldrb	r3, [r3, #0]
   17562:	2bd2      	cmp	r3, #210	; 0xd2
   17564:	d11a      	bne.n	1759c <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   17566:	6833      	ldr	r3, [r6, #0]
   17568:	4621      	mov	r1, r4
   1756a:	6818      	ldr	r0, [r3, #0]
   1756c:	f009 f97a 	bl	20864 <bt_smp_sign>
		if (err) {
   17570:	4605      	mov	r5, r0
   17572:	b198      	cbz	r0, 1759c <chan_send+0x58>
			LOG_ERR("Error signing data");
   17574:	4b1e      	ldr	r3, [pc, #120]	; (175f0 <chan_send+0xac>)
   17576:	481f      	ldr	r0, [pc, #124]	; (175f4 <chan_send+0xb0>)
   17578:	9307      	str	r3, [sp, #28]
   1757a:	aa06      	add	r2, sp, #24
   1757c:	2302      	movs	r3, #2
   1757e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17582:	9306      	str	r3, [sp, #24]
   17584:	f008 facc 	bl	1fb20 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   17588:	69a0      	ldr	r0, [r4, #24]
   1758a:	f7ff ff0d 	bl	173a8 <tx_meta_data_free>
			net_buf_unref(buf);
   1758e:	4620      	mov	r0, r4
   17590:	f001 fe30 	bl	191f4 <net_buf_unref>
}
   17594:	4628      	mov	r0, r5
   17596:	b009      	add	sp, #36	; 0x24
   17598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1759c:	f104 000c 	add.w	r0, r4, #12
   175a0:	f009 f9fd 	bl	2099e <net_buf_simple_headroom>
	state->len = buf->len;
   175a4:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   175a8:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   175ac:	6833      	ldr	r3, [r6, #0]
   175ae:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   175b0:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   175b2:	4607      	mov	r7, r0
   175b4:	7818      	ldrb	r0, [r3, #0]
   175b6:	f7ff feb1 	bl	1731c <att_op_get_type>
	switch (op_type) {
   175ba:	2805      	cmp	r0, #5
   175bc:	bf96      	itet	ls
   175be:	4b0e      	ldrls	r3, [pc, #56]	; (175f8 <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   175c0:	4b0e      	ldrhi	r3, [pc, #56]	; (175fc <chan_send+0xb8>)
   175c2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   175c6:	f8cd 9000 	str.w	r9, [sp]
   175ca:	4628      	mov	r0, r5
   175cc:	4622      	mov	r2, r4
   175ce:	2104      	movs	r1, #4
   175d0:	f008 f98a 	bl	1f8e8 <bt_l2cap_send_cb>
	if (err) {
   175d4:	4605      	mov	r5, r0
   175d6:	2800      	cmp	r0, #0
   175d8:	d0dc      	beq.n	17594 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   175da:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   175dc:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   175e0:	fa13 f787 	uxtah	r7, r3, r7
   175e4:	60e7      	str	r7, [r4, #12]
}
   175e6:	e7d5      	b.n	17594 <chan_send+0x50>
		return -EINVAL;
   175e8:	f06f 0515 	mvn.w	r5, #21
   175ec:	e7d2      	b.n	17594 <chan_send+0x50>
   175ee:	bf00      	nop
   175f0:	00023a2c 	.word	0x00023a2c
   175f4:	00021e4c 	.word	0x00021e4c
   175f8:	000221bc 	.word	0x000221bc
   175fc:	0001ff15 	.word	0x0001ff15

00017600 <att_get>:
{
   17600:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   17602:	7a83      	ldrb	r3, [r0, #10]
   17604:	2b07      	cmp	r3, #7
   17606:	d00d      	beq.n	17624 <att_get+0x24>
		LOG_WRN("Not connected");
   17608:	4b0e      	ldr	r3, [pc, #56]	; (17644 <att_get+0x44>)
   1760a:	9305      	str	r3, [sp, #20]
   1760c:	2302      	movs	r3, #2
   1760e:	9304      	str	r3, [sp, #16]
   17610:	aa04      	add	r2, sp, #16
   17612:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   17616:	480c      	ldr	r0, [pc, #48]	; (17648 <att_get+0x48>)
   17618:	f008 fa82 	bl	1fb20 <z_log_msg_static_create.constprop.0>
		return NULL;
   1761c:	2000      	movs	r0, #0
}
   1761e:	b007      	add	sp, #28
   17620:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   17624:	2104      	movs	r1, #4
   17626:	f008 f978 	bl	1f91a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1762a:	b938      	cbnz	r0, 1763c <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   1762c:	4b07      	ldr	r3, [pc, #28]	; (1764c <att_get+0x4c>)
   1762e:	9305      	str	r3, [sp, #20]
   17630:	2302      	movs	r3, #2
   17632:	9304      	str	r3, [sp, #16]
   17634:	aa04      	add	r2, sp, #16
   17636:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1763a:	e7ec      	b.n	17616 <att_get+0x16>
	return att_chan->att;
   1763c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   17640:	e7ed      	b.n	1761e <att_get+0x1e>
   17642:	bf00      	nop
   17644:	00023a3f 	.word	0x00023a3f
   17648:	00021e4c 	.word	0x00021e4c
   1764c:	00023a4d 	.word	0x00023a4d

00017650 <bt_att_connected>:
{
   17650:	b510      	push	{r4, lr}
   17652:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   17656:	4604      	mov	r4, r0
   17658:	f3bf 8f5b 	dmb	ish
   1765c:	e853 1f00 	ldrex	r1, [r3]
   17660:	f041 0104 	orr.w	r1, r1, #4
   17664:	e843 1200 	strex	r2, r1, [r3]
   17668:	2a00      	cmp	r2, #0
   1766a:	d1f7      	bne.n	1765c <bt_att_connected+0xc>
   1766c:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   17670:	2317      	movs	r3, #23
   17672:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   17674:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   17676:	1f20      	subs	r0, r4, #4
   17678:	f008 fa0f 	bl	1fa9a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1767c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   17680:	4903      	ldr	r1, [pc, #12]	; (17690 <bt_att_connected+0x40>)
   17682:	f009 fee4 	bl	2144e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   17686:	6820      	ldr	r0, [r4, #0]
}
   17688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1768c:	f001 bc82 	b.w	18f94 <bt_gatt_connected>
   17690:	00018369 	.word	0x00018369

00017694 <read_group_cb>:
{
   17694:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17698:	4605      	mov	r5, r0
   1769a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1769c:	f04f 0800 	mov.w	r8, #0
   176a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   176a4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   176a6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   176a8:	f88d 8008 	strb.w	r8, [sp, #8]
   176ac:	a902      	add	r1, sp, #8
{
   176ae:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   176b0:	f8ad 300a 	strh.w	r3, [sp, #10]
   176b4:	f007 fd9a 	bl	1f1ec <bt_uuid_cmp>
   176b8:	b1a0      	cbz	r0, 176e4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   176ba:	f642 0301 	movw	r3, #10241	; 0x2801
   176be:	6828      	ldr	r0, [r5, #0]
   176c0:	f88d 800c 	strb.w	r8, [sp, #12]
   176c4:	a903      	add	r1, sp, #12
   176c6:	f8ad 300e 	strh.w	r3, [sp, #14]
   176ca:	f007 fd8f 	bl	1f1ec <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   176ce:	b148      	cbz	r0, 176e4 <read_group_cb+0x50>
		if (data->group &&
   176d0:	6923      	ldr	r3, [r4, #16]
   176d2:	b11b      	cbz	r3, 176dc <read_group_cb+0x48>
   176d4:	885a      	ldrh	r2, [r3, #2]
   176d6:	42b2      	cmp	r2, r6
   176d8:	d200      	bcs.n	176dc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   176da:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   176dc:	2001      	movs	r0, #1
}
   176de:	b004      	add	sp, #16
   176e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   176e4:	6861      	ldr	r1, [r4, #4]
   176e6:	6828      	ldr	r0, [r5, #0]
   176e8:	f007 fd80 	bl	1f1ec <bt_uuid_cmp>
   176ec:	b110      	cbz	r0, 176f4 <read_group_cb+0x60>
		data->group = NULL;
   176ee:	2300      	movs	r3, #0
   176f0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   176f2:	e7f3      	b.n	176dc <read_group_cb+0x48>
	if (data->rsp->len &&
   176f4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   176f6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   176f8:	781a      	ldrb	r2, [r3, #0]
   176fa:	b132      	cbz	r2, 1770a <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   176fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   176fe:	8a01      	ldrh	r1, [r0, #16]
   17700:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   17702:	4293      	cmp	r3, r2
   17704:	da01      	bge.n	1770a <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   17706:	2000      	movs	r0, #0
   17708:	e7e9      	b.n	176de <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1770a:	2104      	movs	r1, #4
   1770c:	300c      	adds	r0, #12
   1770e:	f009 f90f 	bl	20930 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   17712:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17714:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17716:	6923      	ldr	r3, [r4, #16]
   17718:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1771a:	4b08      	ldr	r3, [pc, #32]	; (1773c <read_group_cb+0xa8>)
   1771c:	9300      	str	r3, [sp, #0]
   1771e:	9401      	str	r4, [sp, #4]
   17720:	68a2      	ldr	r2, [r4, #8]
   17722:	2300      	movs	r3, #0
   17724:	4629      	mov	r1, r5
   17726:	4638      	mov	r0, r7
   17728:	f008 fa3e 	bl	1fba8 <att_chan_read>
	if (read < 0) {
   1772c:	2800      	cmp	r0, #0
   1772e:	dbea      	blt.n	17706 <read_group_cb+0x72>
	if (!data->group) {
   17730:	6920      	ldr	r0, [r4, #16]
   17732:	3800      	subs	r0, #0
   17734:	bf18      	it	ne
   17736:	2001      	movne	r0, #1
   17738:	e7d1      	b.n	176de <read_group_cb+0x4a>
   1773a:	bf00      	nop
   1773c:	0001fb01 	.word	0x0001fb01

00017740 <read_type_cb>:
{
   17740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   17744:	6817      	ldr	r7, [r2, #0]
{
   17746:	4605      	mov	r5, r0
   17748:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1774a:	6800      	ldr	r0, [r0, #0]
   1774c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1774e:	687e      	ldr	r6, [r7, #4]
{
   17750:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17752:	f007 fd4b 	bl	1f1ec <bt_uuid_cmp>
   17756:	4681      	mov	r9, r0
   17758:	2800      	cmp	r0, #0
   1775a:	d13c      	bne.n	177d6 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1775c:	4630      	mov	r0, r6
   1775e:	2295      	movs	r2, #149	; 0x95
   17760:	4629      	mov	r1, r5
   17762:	f008 ff65 	bl	20630 <bt_gatt_check_perm>
   17766:	4606      	mov	r6, r0
   17768:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1776a:	b140      	cbz	r0, 1777e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1776c:	68e3      	ldr	r3, [r4, #12]
   1776e:	781b      	ldrb	r3, [r3, #0]
   17770:	b10b      	cbz	r3, 17776 <read_type_cb+0x36>
			data->err = 0x00;
   17772:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   17776:	2000      	movs	r0, #0
}
   17778:	b003      	add	sp, #12
   1777a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1777e:	68a0      	ldr	r0, [r4, #8]
   17780:	f009 f8b4 	bl	208ec <net_buf_frag_last>
   17784:	2102      	movs	r1, #2
   17786:	300c      	adds	r0, #12
   17788:	f009 f8d2 	bl	20930 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1778c:	4b13      	ldr	r3, [pc, #76]	; (177dc <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1778e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   17790:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   17794:	9300      	str	r3, [sp, #0]
   17796:	9401      	str	r4, [sp, #4]
   17798:	68a2      	ldr	r2, [r4, #8]
   1779a:	4633      	mov	r3, r6
   1779c:	4629      	mov	r1, r5
   1779e:	4638      	mov	r0, r7
   177a0:	f008 fa02 	bl	1fba8 <att_chan_read>
	if (read < 0) {
   177a4:	2800      	cmp	r0, #0
   177a6:	da07      	bge.n	177b8 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   177a8:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   177ac:	bf26      	itte	cs
   177ae:	4240      	negcs	r0, r0
   177b0:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   177b2:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   177b4:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   177b6:	e7de      	b.n	17776 <read_type_cb+0x36>
	if (!data->item) {
   177b8:	6923      	ldr	r3, [r4, #16]
   177ba:	2b00      	cmp	r3, #0
   177bc:	d0db      	beq.n	17776 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   177be:	68a0      	ldr	r0, [r4, #8]
   177c0:	f008 f8c0 	bl	1f944 <net_buf_frags_len>
   177c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   177c6:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   177c8:	68e3      	ldr	r3, [r4, #12]
   177ca:	781b      	ldrb	r3, [r3, #0]
   177cc:	4298      	cmp	r0, r3
   177ce:	bf94      	ite	ls
   177d0:	2000      	movls	r0, #0
   177d2:	2001      	movhi	r0, #1
   177d4:	e7d0      	b.n	17778 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   177d6:	2001      	movs	r0, #1
   177d8:	e7ce      	b.n	17778 <read_type_cb+0x38>
   177da:	bf00      	nop
   177dc:	0001f955 	.word	0x0001f955

000177e0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   177e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177e4:	b082      	sub	sp, #8
   177e6:	af00      	add	r7, sp, #0
   177e8:	4604      	mov	r4, r0
   177ea:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   177ec:	483b      	ldr	r0, [pc, #236]	; (178dc <bt_att_accept+0xfc>)
   177ee:	2200      	movs	r2, #0
   177f0:	2300      	movs	r3, #0
   177f2:	4639      	mov	r1, r7
   177f4:	f004 fec4 	bl	1c580 <k_mem_slab_alloc>
   177f8:	4605      	mov	r5, r0
   177fa:	b1a8      	cbz	r0, 17828 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   177fc:	466d      	mov	r5, sp
   177fe:	b088      	sub	sp, #32
   17800:	466a      	mov	r2, sp
   17802:	4b37      	ldr	r3, [pc, #220]	; (178e0 <bt_att_accept+0x100>)
   17804:	4837      	ldr	r0, [pc, #220]	; (178e4 <bt_att_accept+0x104>)
   17806:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1780a:	2303      	movs	r3, #3
   1780c:	f842 3f10 	str.w	r3, [r2, #16]!
   17810:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17814:	f008 f984 	bl	1fb20 <z_log_msg_static_create.constprop.0>
   17818:	46ad      	mov	sp, r5
		return -ENOMEM;
   1781a:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1781e:	4628      	mov	r0, r5
   17820:	3708      	adds	r7, #8
   17822:	46bd      	mov	sp, r7
   17824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   17828:	f005 fcfc 	bl	1d224 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1782c:	4b2e      	ldr	r3, [pc, #184]	; (178e8 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1782e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   17830:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   17832:	222c      	movs	r2, #44	; 0x2c
   17834:	6838      	ldr	r0, [r7, #0]
   17836:	f007 fcbb 	bl	1f1b0 <memset>
	att->conn = conn;
   1783a:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1783c:	482b      	ldr	r0, [pc, #172]	; (178ec <bt_att_accept+0x10c>)
	att->conn = conn;
   1783e:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   17840:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17842:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   17844:	e9c4 5501 	strd	r5, r5, [r4, #4]
   17848:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1784c:	2200      	movs	r2, #0
   1784e:	2300      	movs	r3, #0
   17850:	1d39      	adds	r1, r7, #4
   17852:	f004 fe95 	bl	1c580 <k_mem_slab_alloc>
   17856:	4605      	mov	r5, r0
   17858:	b180      	cbz	r0, 1787c <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1785a:	6823      	ldr	r3, [r4, #0]
   1785c:	466c      	mov	r4, sp
   1785e:	b088      	sub	sp, #32
   17860:	466a      	mov	r2, sp
   17862:	4923      	ldr	r1, [pc, #140]	; (178f0 <bt_att_accept+0x110>)
   17864:	481f      	ldr	r0, [pc, #124]	; (178e4 <bt_att_accept+0x104>)
   17866:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1786a:	2303      	movs	r3, #3
   1786c:	f842 3f10 	str.w	r3, [r2, #16]!
   17870:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17874:	f008 f954 	bl	1fb20 <z_log_msg_static_create.constprop.0>
   17878:	46a5      	mov	sp, r4
	if (!chan) {
   1787a:	e7ce      	b.n	1781a <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   1787c:	4601      	mov	r1, r0
   1787e:	22e8      	movs	r2, #232	; 0xe8
   17880:	6878      	ldr	r0, [r7, #4]
   17882:	f007 fc95 	bl	1f1b0 <memset>
	chan->chan.chan.ops = &ops;
   17886:	6878      	ldr	r0, [r7, #4]
   17888:	4b1a      	ldr	r3, [pc, #104]	; (178f4 <bt_att_accept+0x114>)
   1788a:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1788c:	3098      	adds	r0, #152	; 0x98
   1788e:	f009 fcf7 	bl	21280 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17892:	687b      	ldr	r3, [r7, #4]
   17894:	f3bf 8f5b 	dmb	ish
   17898:	3390      	adds	r3, #144	; 0x90
   1789a:	e853 2f00 	ldrex	r2, [r3]
   1789e:	e843 5100 	strex	r1, r5, [r3]
   178a2:	2900      	cmp	r1, #0
   178a4:	d1f9      	bne.n	1789a <bt_att_accept+0xba>
   178a6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   178aa:	687b      	ldr	r3, [r7, #4]
   178ac:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   178ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   178b0:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   178b4:	b91b      	cbnz	r3, 178be <bt_att_accept+0xde>
   178b6:	f104 000c 	add.w	r0, r4, #12
   178ba:	f009 fce1 	bl	21280 <z_impl_k_queue_init>
	return list->head;
   178be:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   178c0:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   178c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   178c6:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   178ca:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   178cc:	b902      	cbnz	r2, 178d0 <bt_att_accept+0xf0>
	list->tail = node;
   178ce:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   178d0:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   178d2:	2b00      	cmp	r3, #0
   178d4:	d0a1      	beq.n	1781a <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   178d6:	3304      	adds	r3, #4
   178d8:	6033      	str	r3, [r6, #0]
	return 0;
   178da:	e7a0      	b.n	1781e <bt_att_accept+0x3e>
   178dc:	200007c8 	.word	0x200007c8
   178e0:	00023a68 	.word	0x00023a68
   178e4:	00021e4c 	.word	0x00021e4c
   178e8:	20002c84 	.word	0x20002c84
   178ec:	200007e4 	.word	0x200007e4
   178f0:	00023a8d 	.word	0x00023a8d
   178f4:	20000584 	.word	0x20000584

000178f8 <bt_att_chan_create_pdu>:
{
   178f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   178fc:	b086      	sub	sp, #24
   178fe:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17900:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   17902:	1c53      	adds	r3, r2, #1
   17904:	428b      	cmp	r3, r1
{
   17906:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17908:	d915      	bls.n	17936 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1790a:	466c      	mov	r4, sp
   1790c:	b088      	sub	sp, #32
   1790e:	466a      	mov	r2, sp
   17910:	4829      	ldr	r0, [pc, #164]	; (179b8 <bt_att_chan_create_pdu+0xc0>)
   17912:	61d3      	str	r3, [r2, #28]
   17914:	2304      	movs	r3, #4
   17916:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1791a:	f842 3f10 	str.w	r3, [r2, #16]!
   1791e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   17922:	4826      	ldr	r0, [pc, #152]	; (179bc <bt_att_chan_create_pdu+0xc4>)
   17924:	f008 f8fc 	bl	1fb20 <z_log_msg_static_create.constprop.0>
   17928:	46a5      	mov	sp, r4
		return NULL;
   1792a:	2400      	movs	r4, #0
}
   1792c:	4620      	mov	r0, r4
   1792e:	3718      	adds	r7, #24
   17930:	46bd      	mov	sp, r7
   17932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   17936:	4628      	mov	r0, r5
   17938:	f7ff fcf0 	bl	1731c <att_op_get_type>
   1793c:	2802      	cmp	r0, #2
   1793e:	d019      	beq.n	17974 <bt_att_chan_create_pdu+0x7c>
   17940:	2804      	cmp	r0, #4
   17942:	d017      	beq.n	17974 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   17944:	f04f 38ff 	mov.w	r8, #4294967295
   17948:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1794c:	2100      	movs	r1, #0
   1794e:	4642      	mov	r2, r8
   17950:	464b      	mov	r3, r9
   17952:	4608      	mov	r0, r1
   17954:	f007 ffc5 	bl	1f8e2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   17958:	4604      	mov	r4, r0
   1795a:	b980      	cbnz	r0, 1797e <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1795c:	466c      	mov	r4, sp
   1795e:	b088      	sub	sp, #32
   17960:	466a      	mov	r2, sp
   17962:	4b17      	ldr	r3, [pc, #92]	; (179c0 <bt_att_chan_create_pdu+0xc8>)
   17964:	e9c2 3505 	strd	r3, r5, [r2, #20]
   17968:	2303      	movs	r3, #3
   1796a:	f842 3f10 	str.w	r3, [r2, #16]!
   1796e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17972:	e7d6      	b.n	17922 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   17974:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   17978:	f04f 0900 	mov.w	r9, #0
   1797c:	e7e6      	b.n	1794c <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   1797e:	4811      	ldr	r0, [pc, #68]	; (179c4 <bt_att_chan_create_pdu+0xcc>)
   17980:	4642      	mov	r2, r8
   17982:	464b      	mov	r3, r9
   17984:	f004 ffb6 	bl	1c8f4 <z_impl_k_queue_get>
	if (!data) {
   17988:	b970      	cbnz	r0, 179a8 <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   1798a:	4b0f      	ldr	r3, [pc, #60]	; (179c8 <bt_att_chan_create_pdu+0xd0>)
   1798c:	617b      	str	r3, [r7, #20]
   1798e:	2302      	movs	r3, #2
   17990:	480a      	ldr	r0, [pc, #40]	; (179bc <bt_att_chan_create_pdu+0xc4>)
   17992:	613b      	str	r3, [r7, #16]
   17994:	f107 0210 	add.w	r2, r7, #16
   17998:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1799c:	f008 f8c0 	bl	1fb20 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   179a0:	4620      	mov	r0, r4
   179a2:	f001 fc27 	bl	191f4 <net_buf_unref>
		return NULL;
   179a6:	e7c0      	b.n	1792a <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   179a8:	61a0      	str	r0, [r4, #24]
   179aa:	2101      	movs	r1, #1
   179ac:	f104 000c 	add.w	r0, r4, #12
   179b0:	f008 ffbe 	bl	20930 <net_buf_simple_add>
	hdr->code = op;
   179b4:	7005      	strb	r5, [r0, #0]
	return buf;
   179b6:	e7b9      	b.n	1792c <bt_att_chan_create_pdu+0x34>
   179b8:	00023ab2 	.word	0x00023ab2
   179bc:	00021e4c 	.word	0x00021e4c
   179c0:	000238a2 	.word	0x000238a2
   179c4:	2000085c 	.word	0x2000085c
   179c8:	00023ad7 	.word	0x00023ad7

000179cc <bt_att_recv>:
{
   179cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179d0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   179d2:	8a0b      	ldrh	r3, [r1, #16]
{
   179d4:	af00      	add	r7, sp, #0
   179d6:	4682      	mov	sl, r0
   179d8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   179da:	b97b      	cbnz	r3, 179fc <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   179dc:	4b4c      	ldr	r3, [pc, #304]	; (17b10 <bt_att_recv+0x144>)
   179de:	617b      	str	r3, [r7, #20]
   179e0:	2302      	movs	r3, #2
   179e2:	613b      	str	r3, [r7, #16]
   179e4:	f107 0210 	add.w	r2, r7, #16
   179e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   179ec:	4849      	ldr	r0, [pc, #292]	; (17b14 <bt_att_recv+0x148>)
   179ee:	f008 f897 	bl	1fb20 <z_log_msg_static_create.constprop.0>
}
   179f2:	2000      	movs	r0, #0
   179f4:	371c      	adds	r7, #28
   179f6:	46bd      	mov	sp, r7
   179f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   179fc:	2101      	movs	r1, #1
   179fe:	f104 000c 	add.w	r0, r4, #12
   17a02:	f008 ffbc 	bl	2097e <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   17a06:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   17a0a:	4605      	mov	r5, r0
   17a0c:	2b00      	cmp	r3, #0
   17a0e:	d0f0      	beq.n	179f2 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   17a10:	7801      	ldrb	r1, [r0, #0]
   17a12:	f8df 8114 	ldr.w	r8, [pc, #276]	; 17b28 <bt_att_recv+0x15c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   17a16:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17a1a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   17a1c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   17a20:	4288      	cmp	r0, r1
   17a22:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   17a26:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   17a2a:	d114      	bne.n	17a56 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   17a2c:	f892 9002 	ldrb.w	r9, [r2, #2]
   17a30:	f1b9 0f01 	cmp.w	r9, #1
   17a34:	d131      	bne.n	17a9a <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   17a36:	2100      	movs	r1, #0
   17a38:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   17a3c:	f008 f95a 	bl	1fcf4 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   17a40:	2800      	cmp	r0, #0
   17a42:	d035      	beq.n	17ab0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   17a44:	4b34      	ldr	r3, [pc, #208]	; (17b18 <bt_att_recv+0x14c>)
   17a46:	617b      	str	r3, [r7, #20]
   17a48:	2302      	movs	r3, #2
   17a4a:	613b      	str	r3, [r7, #16]
   17a4c:	f107 0210 	add.w	r2, r7, #16
   17a50:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17a54:	e7ca      	b.n	179ec <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17a56:	3301      	adds	r3, #1
   17a58:	2b0e      	cmp	r3, #14
   17a5a:	d1df      	bne.n	17a1c <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   17a5c:	466c      	mov	r4, sp
   17a5e:	b088      	sub	sp, #32
   17a60:	466a      	mov	r2, sp
   17a62:	4b2e      	ldr	r3, [pc, #184]	; (17b1c <bt_att_recv+0x150>)
   17a64:	482b      	ldr	r0, [pc, #172]	; (17b14 <bt_att_recv+0x148>)
   17a66:	e9c2 3105 	strd	r3, r1, [r2, #20]
   17a6a:	2303      	movs	r3, #3
   17a6c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17a70:	f842 3f10 	str.w	r3, [r2, #16]!
   17a74:	f008 f854 	bl	1fb20 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   17a78:	7829      	ldrb	r1, [r5, #0]
   17a7a:	46a5      	mov	sp, r4
   17a7c:	4608      	mov	r0, r1
   17a7e:	f7ff fc4d 	bl	1731c <att_op_get_type>
   17a82:	2800      	cmp	r0, #0
   17a84:	d0b5      	beq.n	179f2 <bt_att_recv+0x26>
   17a86:	2805      	cmp	r0, #5
   17a88:	d0b3      	beq.n	179f2 <bt_att_recv+0x26>
	if (!req) {
   17a8a:	2900      	cmp	r1, #0
   17a8c:	d0b1      	beq.n	179f2 <bt_att_recv+0x26>
   17a8e:	2306      	movs	r3, #6
   17a90:	2200      	movs	r2, #0
   17a92:	4630      	mov	r0, r6
   17a94:	f008 faac 	bl	1fff0 <send_err_rsp.part.0>
   17a98:	e7ab      	b.n	179f2 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   17a9a:	f1b9 0f05 	cmp.w	r9, #5
   17a9e:	d107      	bne.n	17ab0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   17aa0:	2101      	movs	r1, #1
   17aa2:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   17aa6:	f008 f925 	bl	1fcf4 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   17aaa:	b108      	cbz	r0, 17ab0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   17aac:	4b1c      	ldr	r3, [pc, #112]	; (17b20 <bt_att_recv+0x154>)
   17aae:	e7ca      	b.n	17a46 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   17ab0:	44d8      	add	r8, fp
   17ab2:	8a23      	ldrh	r3, [r4, #16]
   17ab4:	f898 2001 	ldrb.w	r2, [r8, #1]
   17ab8:	429a      	cmp	r2, r3
   17aba:	d916      	bls.n	17aea <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   17abc:	46e9      	mov	r9, sp
   17abe:	b088      	sub	sp, #32
   17ac0:	7829      	ldrb	r1, [r5, #0]
   17ac2:	466a      	mov	r2, sp
   17ac4:	4817      	ldr	r0, [pc, #92]	; (17b24 <bt_att_recv+0x158>)
   17ac6:	61d1      	str	r1, [r2, #28]
   17ac8:	2404      	movs	r4, #4
   17aca:	e9c2 0305 	strd	r0, r3, [r2, #20]
   17ace:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17ad2:	f842 4f10 	str.w	r4, [r2, #16]!
   17ad6:	480f      	ldr	r0, [pc, #60]	; (17b14 <bt_att_recv+0x148>)
   17ad8:	f008 f822 	bl	1fb20 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   17adc:	f898 3002 	ldrb.w	r3, [r8, #2]
   17ae0:	2b01      	cmp	r3, #1
   17ae2:	46cd      	mov	sp, r9
   17ae4:	d185      	bne.n	179f2 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   17ae6:	4623      	mov	r3, r4
   17ae8:	e00c      	b.n	17b04 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   17aea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17aee:	4621      	mov	r1, r4
   17af0:	4630      	mov	r0, r6
   17af2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   17af4:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   17af8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   17afa:	f47f af7a 	bne.w	179f2 <bt_att_recv+0x26>
   17afe:	2800      	cmp	r0, #0
   17b00:	f43f af77 	beq.w	179f2 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   17b04:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   17b06:	2900      	cmp	r1, #0
   17b08:	f43f af73 	beq.w	179f2 <bt_att_recv+0x26>
   17b0c:	e7c0      	b.n	17a90 <bt_att_recv+0xc4>
   17b0e:	bf00      	nop
   17b10:	00023af6 	.word	0x00023af6
   17b14:	00021e4c 	.word	0x00021e4c
   17b18:	00023b2b 	.word	0x00023b2b
   17b1c:	00023b11 	.word	0x00023b11
   17b20:	00023b47 	.word	0x00023b47
   17b24:	00023b66 	.word	0x00023b66
   17b28:	000221d4 	.word	0x000221d4

00017b2c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   17b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b2e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17b30:	6803      	ldr	r3, [r0, #0]
   17b32:	460d      	mov	r5, r1
   17b34:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   17b36:	b087      	sub	sp, #28
   17b38:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17b3a:	bf18      	it	ne
   17b3c:	2101      	movne	r1, #1
   17b3e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   17b40:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17b42:	f008 fe22 	bl	2078a <bt_gatt_change_aware>
   17b46:	b948      	cbnz	r0, 17b5c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17b48:	2105      	movs	r1, #5
   17b4a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   17b4e:	f008 f8d1 	bl	1fcf4 <atomic_test_and_set_bit>
   17b52:	2800      	cmp	r0, #0
   17b54:	d048      	beq.n	17be8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   17b56:	2000      	movs	r0, #0
}
   17b58:	b007      	add	sp, #28
   17b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   17b5c:	2e00      	cmp	r6, #0
   17b5e:	d045      	beq.n	17bec <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   17b60:	2218      	movs	r2, #24
   17b62:	2100      	movs	r1, #0
   17b64:	4668      	mov	r0, sp
   17b66:	f007 fb23 	bl	1f1b0 <memset>
	if (rsp) {
   17b6a:	bb67      	cbnz	r7, 17bc6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   17b6c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17b6e:	4a20      	ldr	r2, [pc, #128]	; (17bf0 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   17b70:	681b      	ldr	r3, [r3, #0]
   17b72:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   17b74:	2300      	movs	r3, #0
   17b76:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   17b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17b7c:	9303      	str	r3, [sp, #12]
	data.len = len;
   17b7e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   17b82:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17b86:	2301      	movs	r3, #1
   17b88:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17b8c:	4631      	mov	r1, r6
   17b8e:	466b      	mov	r3, sp
   17b90:	4630      	mov	r0, r6
	data.req = req;
   17b92:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17b96:	f007 ff29 	bl	1f9ec <bt_gatt_foreach_attr>
	if (data.err) {
   17b9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   17b9e:	b1e3      	cbz	r3, 17bda <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   17ba0:	2f00      	cmp	r7, #0
   17ba2:	d0d8      	beq.n	17b56 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17ba4:	9b01      	ldr	r3, [sp, #4]
   17ba6:	6998      	ldr	r0, [r3, #24]
   17ba8:	f7ff fbfe 	bl	173a8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17bac:	9801      	ldr	r0, [sp, #4]
   17bae:	f001 fb21 	bl	191f4 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   17bb2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   17bb6:	2d00      	cmp	r5, #0
   17bb8:	d0cd      	beq.n	17b56 <att_write_rsp.constprop.0+0x2a>
   17bba:	4632      	mov	r2, r6
   17bbc:	4629      	mov	r1, r5
   17bbe:	4620      	mov	r0, r4
   17bc0:	f008 fa16 	bl	1fff0 <send_err_rsp.part.0>
   17bc4:	e7c7      	b.n	17b56 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   17bc6:	2200      	movs	r2, #0
   17bc8:	4639      	mov	r1, r7
   17bca:	4620      	mov	r0, r4
   17bcc:	f7ff fe94 	bl	178f8 <bt_att_chan_create_pdu>
   17bd0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   17bd2:	2800      	cmp	r0, #0
   17bd4:	d1ca      	bne.n	17b6c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   17bd6:	200e      	movs	r0, #14
   17bd8:	e7be      	b.n	17b58 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   17bda:	9901      	ldr	r1, [sp, #4]
   17bdc:	2900      	cmp	r1, #0
   17bde:	d0ba      	beq.n	17b56 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   17be0:	4620      	mov	r0, r4
   17be2:	f007 ffd3 	bl	1fb8c <bt_att_chan_send_rsp>
   17be6:	e7b6      	b.n	17b56 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17be8:	2012      	movs	r0, #18
   17bea:	e7b5      	b.n	17b58 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   17bec:	2001      	movs	r0, #1
   17bee:	e7b3      	b.n	17b58 <att_write_rsp.constprop.0+0x2c>
   17bf0:	0001f98b 	.word	0x0001f98b

00017bf4 <bt_att_create_pdu>:
{
   17bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17bf6:	af00      	add	r7, sp, #0
   17bf8:	460e      	mov	r6, r1
   17bfa:	4615      	mov	r5, r2
	att = att_get(conn);
   17bfc:	f7ff fd00 	bl	17600 <att_get>
	if (!att) {
   17c00:	b1e0      	cbz	r0, 17c3c <bt_att_create_pdu+0x48>
	return list->head;
   17c02:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17c04:	4618      	mov	r0, r3
   17c06:	b11b      	cbz	r3, 17c10 <bt_att_create_pdu+0x1c>
	return node->next;
   17c08:	f850 39e0 	ldr.w	r3, [r0], #-224
   17c0c:	b103      	cbz	r3, 17c10 <bt_att_create_pdu+0x1c>
   17c0e:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17c10:	1c6c      	adds	r4, r5, #1
   17c12:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17c14:	b118      	cbz	r0, 17c1e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17c16:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   17c18:	42a1      	cmp	r1, r4
   17c1a:	d21a      	bcs.n	17c52 <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17c1c:	b983      	cbnz	r3, 17c40 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   17c1e:	466d      	mov	r5, sp
   17c20:	b088      	sub	sp, #32
   17c22:	466a      	mov	r2, sp
   17c24:	4b0f      	ldr	r3, [pc, #60]	; (17c64 <bt_att_create_pdu+0x70>)
   17c26:	4810      	ldr	r0, [pc, #64]	; (17c68 <bt_att_create_pdu+0x74>)
   17c28:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17c2c:	2303      	movs	r3, #3
   17c2e:	f842 3f10 	str.w	r3, [r2, #16]!
   17c32:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17c36:	f007 ff73 	bl	1fb20 <z_log_msg_static_create.constprop.0>
   17c3a:	46ad      	mov	sp, r5
		return NULL;
   17c3c:	2000      	movs	r0, #0
   17c3e:	e00c      	b.n	17c5a <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17c40:	4618      	mov	r0, r3
   17c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   17c46:	b153      	cbz	r3, 17c5e <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17c48:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   17c4a:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17c4c:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17c50:	d8f6      	bhi.n	17c40 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   17c52:	462a      	mov	r2, r5
   17c54:	4631      	mov	r1, r6
   17c56:	f7ff fe4f 	bl	178f8 <bt_att_chan_create_pdu>
}
   17c5a:	46bd      	mov	sp, r7
   17c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17c5e:	4614      	mov	r4, r2
   17c60:	e7d9      	b.n	17c16 <bt_att_create_pdu+0x22>
   17c62:	bf00      	nop
   17c64:	00023b85 	.word	0x00023b85
   17c68:	00021e4c 	.word	0x00021e4c

00017c6c <att_read_group_req>:
{
   17c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17c70:	8a0e      	ldrh	r6, [r1, #16]
   17c72:	3e04      	subs	r6, #4
   17c74:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   17c76:	2e02      	cmp	r6, #2
{
   17c78:	4604      	mov	r4, r0
   17c7a:	b08c      	sub	sp, #48	; 0x30
   17c7c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17c7e:	d001      	beq.n	17c84 <att_read_group_req+0x18>
   17c80:	2e10      	cmp	r6, #16
   17c82:	d16a      	bne.n	17d5a <att_read_group_req+0xee>
   17c84:	2104      	movs	r1, #4
   17c86:	300c      	adds	r0, #12
   17c88:	f008 fe79 	bl	2097e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17c8c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   17c90:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17c92:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17c94:	1d01      	adds	r1, r0, #4
   17c96:	4632      	mov	r2, r6
   17c98:	4640      	mov	r0, r8
   17c9a:	f007 fad5 	bl	1f248 <bt_uuid_create>
   17c9e:	2800      	cmp	r0, #0
   17ca0:	d05d      	beq.n	17d5e <att_read_group_req+0xf2>
	if (!start || !end) {
   17ca2:	2d00      	cmp	r5, #0
   17ca4:	d03a      	beq.n	17d1c <att_read_group_req+0xb0>
   17ca6:	2600      	movs	r6, #0
   17ca8:	2f00      	cmp	r7, #0
   17caa:	d036      	beq.n	17d1a <att_read_group_req+0xae>
	if (start > end) {
   17cac:	42bd      	cmp	r5, r7
   17cae:	d835      	bhi.n	17d1c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17cb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17cb4:	a901      	add	r1, sp, #4
   17cb6:	4640      	mov	r0, r8
   17cb8:	f88d 6004 	strb.w	r6, [sp, #4]
   17cbc:	f8ad 3006 	strh.w	r3, [sp, #6]
   17cc0:	f007 fa94 	bl	1f1ec <bt_uuid_cmp>
   17cc4:	bb70      	cbnz	r0, 17d24 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   17cc6:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17cc8:	2214      	movs	r2, #20
   17cca:	2100      	movs	r1, #0
   17ccc:	a807      	add	r0, sp, #28
   17cce:	f007 fa6f 	bl	1f1b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17cd2:	2201      	movs	r2, #1
   17cd4:	2111      	movs	r1, #17
   17cd6:	4630      	mov	r0, r6
   17cd8:	f7ff ff8c 	bl	17bf4 <bt_att_create_pdu>
   17cdc:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   17cde:	2800      	cmp	r0, #0
   17ce0:	d03d      	beq.n	17d5e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   17ce2:	2101      	movs	r1, #1
   17ce4:	300c      	adds	r0, #12
	data.uuid = uuid;
   17ce6:	e9cd 4807 	strd	r4, r8, [sp, #28]
   17cea:	f008 fe21 	bl	20930 <net_buf_simple_add>
	data.rsp->len = 0U;
   17cee:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17cf0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17cf2:	4a1c      	ldr	r2, [pc, #112]	; (17d64 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   17cf4:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17cf6:	4639      	mov	r1, r7
	data.group = NULL;
   17cf8:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17cfa:	4628      	mov	r0, r5
   17cfc:	ab07      	add	r3, sp, #28
   17cfe:	f007 fe75 	bl	1f9ec <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   17d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17d04:	781b      	ldrb	r3, [r3, #0]
   17d06:	bb1b      	cbnz	r3, 17d50 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d0a:	6998      	ldr	r0, [r3, #24]
   17d0c:	f7ff fb4c 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17d10:	9809      	ldr	r0, [sp, #36]	; 0x24
   17d12:	f001 fa6f 	bl	191f4 <net_buf_unref>
	if (!req) {
   17d16:	230a      	movs	r3, #10
   17d18:	e001      	b.n	17d1e <att_read_group_req+0xb2>
			*err = 0U;
   17d1a:	463d      	mov	r5, r7
	if (!req) {
   17d1c:	2301      	movs	r3, #1
   17d1e:	462a      	mov	r2, r5
   17d20:	2110      	movs	r1, #16
   17d22:	e00e      	b.n	17d42 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   17d24:	f642 0301 	movw	r3, #10241	; 0x2801
   17d28:	a907      	add	r1, sp, #28
   17d2a:	4640      	mov	r0, r8
   17d2c:	f88d 601c 	strb.w	r6, [sp, #28]
   17d30:	f8ad 301e 	strh.w	r3, [sp, #30]
   17d34:	f007 fa5a 	bl	1f1ec <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17d38:	2800      	cmp	r0, #0
   17d3a:	d0c4      	beq.n	17cc6 <att_read_group_req+0x5a>
	if (!req) {
   17d3c:	2310      	movs	r3, #16
   17d3e:	462a      	mov	r2, r5
   17d40:	4619      	mov	r1, r3
   17d42:	4620      	mov	r0, r4
   17d44:	f008 f954 	bl	1fff0 <send_err_rsp.part.0>
		return 0;
   17d48:	2000      	movs	r0, #0
}
   17d4a:	b00c      	add	sp, #48	; 0x30
   17d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   17d50:	9909      	ldr	r1, [sp, #36]	; 0x24
   17d52:	4620      	mov	r0, r4
   17d54:	f007 ff1a 	bl	1fb8c <bt_att_chan_send_rsp>
	return 0;
   17d58:	e7f6      	b.n	17d48 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   17d5a:	2004      	movs	r0, #4
   17d5c:	e7f5      	b.n	17d4a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   17d5e:	200e      	movs	r0, #14
   17d60:	e7f3      	b.n	17d4a <att_read_group_req+0xde>
   17d62:	bf00      	nop
   17d64:	00017695 	.word	0x00017695

00017d68 <att_read_mult_vl_req>:
{
   17d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17d6c:	6846      	ldr	r6, [r0, #4]
{
   17d6e:	b085      	sub	sp, #20
   17d70:	4604      	mov	r4, r0
   17d72:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17d74:	4630      	mov	r0, r6
   17d76:	2101      	movs	r1, #1
   17d78:	f008 fd07 	bl	2078a <bt_gatt_change_aware>
   17d7c:	b950      	cbnz	r0, 17d94 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17d7e:	2105      	movs	r1, #5
   17d80:	f104 0090 	add.w	r0, r4, #144	; 0x90
   17d84:	f007 ffb6 	bl	1fcf4 <atomic_test_and_set_bit>
   17d88:	2800      	cmp	r0, #0
   17d8a:	d13b      	bne.n	17e04 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17d8c:	2012      	movs	r0, #18
}
   17d8e:	b005      	add	sp, #20
   17d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17d94:	2210      	movs	r2, #16
   17d96:	2100      	movs	r1, #0
   17d98:	4668      	mov	r0, sp
   17d9a:	f007 fa09 	bl	1f1b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   17d9e:	2200      	movs	r2, #0
   17da0:	2121      	movs	r1, #33	; 0x21
   17da2:	4630      	mov	r0, r6
   17da4:	f7ff ff26 	bl	17bf4 <bt_att_create_pdu>
   17da8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17daa:	b368      	cbz	r0, 17e08 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17dac:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17e0c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   17db0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   17db2:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17db6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   17dba:	8a2b      	ldrh	r3, [r5, #16]
   17dbc:	2b01      	cmp	r3, #1
   17dbe:	d804      	bhi.n	17dca <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17dc0:	9902      	ldr	r1, [sp, #8]
   17dc2:	4620      	mov	r0, r4
   17dc4:	f007 fee2 	bl	1fb8c <bt_att_chan_send_rsp>
	return 0;
   17dc8:	e01c      	b.n	17e04 <att_read_mult_vl_req+0x9c>
   17dca:	4638      	mov	r0, r7
   17dcc:	f008 fddf 	bl	2098e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17dd0:	466b      	mov	r3, sp
   17dd2:	464a      	mov	r2, r9
   17dd4:	4601      	mov	r1, r0
   17dd6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17dd8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17ddc:	f007 fe06 	bl	1f9ec <bt_gatt_foreach_attr>
		if (data.err) {
   17de0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17de4:	2b00      	cmp	r3, #0
   17de6:	d0e8      	beq.n	17dba <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17de8:	9b02      	ldr	r3, [sp, #8]
   17dea:	6998      	ldr	r0, [r3, #24]
   17dec:	f7ff fadc 	bl	173a8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17df0:	9802      	ldr	r0, [sp, #8]
   17df2:	f001 f9ff 	bl	191f4 <net_buf_unref>
	if (!req) {
   17df6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17dfa:	4632      	mov	r2, r6
   17dfc:	2120      	movs	r1, #32
   17dfe:	4620      	mov	r0, r4
   17e00:	f008 f8f6 	bl	1fff0 <send_err_rsp.part.0>
			return 0;
   17e04:	2000      	movs	r0, #0
   17e06:	e7c2      	b.n	17d8e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   17e08:	200e      	movs	r0, #14
   17e0a:	e7c0      	b.n	17d8e <att_read_mult_vl_req+0x26>
   17e0c:	0001fd65 	.word	0x0001fd65

00017e10 <att_read_mult_req>:
{
   17e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17e14:	6846      	ldr	r6, [r0, #4]
{
   17e16:	b085      	sub	sp, #20
   17e18:	4604      	mov	r4, r0
   17e1a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17e1c:	4630      	mov	r0, r6
   17e1e:	2101      	movs	r1, #1
   17e20:	f008 fcb3 	bl	2078a <bt_gatt_change_aware>
   17e24:	b950      	cbnz	r0, 17e3c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17e26:	2105      	movs	r1, #5
   17e28:	f104 0090 	add.w	r0, r4, #144	; 0x90
   17e2c:	f007 ff62 	bl	1fcf4 <atomic_test_and_set_bit>
   17e30:	2800      	cmp	r0, #0
   17e32:	d13b      	bne.n	17eac <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17e34:	2012      	movs	r0, #18
}
   17e36:	b005      	add	sp, #20
   17e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17e3c:	2210      	movs	r2, #16
   17e3e:	2100      	movs	r1, #0
   17e40:	4668      	mov	r0, sp
   17e42:	f007 f9b5 	bl	1f1b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17e46:	2200      	movs	r2, #0
   17e48:	210f      	movs	r1, #15
   17e4a:	4630      	mov	r0, r6
   17e4c:	f7ff fed2 	bl	17bf4 <bt_att_create_pdu>
   17e50:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17e52:	b368      	cbz	r0, 17eb0 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17e54:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17eb4 <att_read_mult_req+0xa4>
	data.chan = chan;
   17e58:	9400      	str	r4, [sp, #0]
   17e5a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17e5e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   17e62:	8a2b      	ldrh	r3, [r5, #16]
   17e64:	2b01      	cmp	r3, #1
   17e66:	d804      	bhi.n	17e72 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17e68:	9902      	ldr	r1, [sp, #8]
   17e6a:	4620      	mov	r0, r4
   17e6c:	f007 fe8e 	bl	1fb8c <bt_att_chan_send_rsp>
	return 0;
   17e70:	e01c      	b.n	17eac <att_read_mult_req+0x9c>
   17e72:	4638      	mov	r0, r7
   17e74:	f008 fd8b 	bl	2098e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17e78:	466b      	mov	r3, sp
   17e7a:	464a      	mov	r2, r9
   17e7c:	4601      	mov	r1, r0
   17e7e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17e80:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17e84:	f007 fdb2 	bl	1f9ec <bt_gatt_foreach_attr>
		if (data.err) {
   17e88:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17e8c:	2b00      	cmp	r3, #0
   17e8e:	d0e8      	beq.n	17e62 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17e90:	9b02      	ldr	r3, [sp, #8]
   17e92:	6998      	ldr	r0, [r3, #24]
   17e94:	f7ff fa88 	bl	173a8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17e98:	9802      	ldr	r0, [sp, #8]
   17e9a:	f001 f9ab 	bl	191f4 <net_buf_unref>
	if (!req) {
   17e9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17ea2:	4632      	mov	r2, r6
   17ea4:	210e      	movs	r1, #14
   17ea6:	4620      	mov	r0, r4
   17ea8:	f008 f8a2 	bl	1fff0 <send_err_rsp.part.0>
			return 0;
   17eac:	2000      	movs	r0, #0
   17eae:	e7c2      	b.n	17e36 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   17eb0:	200e      	movs	r0, #14
   17eb2:	e7c0      	b.n	17e36 <att_read_mult_req+0x26>
   17eb4:	0001fd1f 	.word	0x0001fd1f

00017eb8 <att_read_rsp>:
{
   17eb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17ebc:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   17ec0:	4604      	mov	r4, r0
   17ec2:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17ec4:	4640      	mov	r0, r8
   17ec6:	2101      	movs	r1, #1
{
   17ec8:	4617      	mov	r7, r2
   17eca:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   17ecc:	f008 fc5d 	bl	2078a <bt_gatt_change_aware>
   17ed0:	b948      	cbnz	r0, 17ee6 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17ed2:	2105      	movs	r1, #5
   17ed4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   17ed8:	f007 ff0c 	bl	1fcf4 <atomic_test_and_set_bit>
   17edc:	bb78      	cbnz	r0, 17f3e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17ede:	2012      	movs	r0, #18
}
   17ee0:	b004      	add	sp, #16
   17ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   17ee6:	b38d      	cbz	r5, 17f4c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   17ee8:	2210      	movs	r2, #16
   17eea:	2100      	movs	r1, #0
   17eec:	4668      	mov	r0, sp
   17eee:	f007 f95f 	bl	1f1b0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17ef2:	2200      	movs	r2, #0
   17ef4:	4639      	mov	r1, r7
   17ef6:	4640      	mov	r0, r8
   17ef8:	f7ff fe7c 	bl	17bf4 <bt_att_create_pdu>
   17efc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17efe:	b338      	cbz	r0, 17f50 <att_read_rsp+0x98>
	data.offset = offset;
   17f00:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17f04:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17f08:	2301      	movs	r3, #1
   17f0a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17f0e:	4a11      	ldr	r2, [pc, #68]	; (17f54 <att_read_rsp+0x9c>)
	data.chan = chan;
   17f10:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17f12:	466b      	mov	r3, sp
   17f14:	4629      	mov	r1, r5
   17f16:	4628      	mov	r0, r5
   17f18:	f007 fd68 	bl	1f9ec <bt_gatt_foreach_attr>
	if (data.err) {
   17f1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17f20:	b17b      	cbz	r3, 17f42 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17f22:	9b02      	ldr	r3, [sp, #8]
   17f24:	6998      	ldr	r0, [r3, #24]
   17f26:	f7ff fa3f 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17f2a:	9802      	ldr	r0, [sp, #8]
   17f2c:	f001 f962 	bl	191f4 <net_buf_unref>
	if (!req) {
   17f30:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17f34:	462a      	mov	r2, r5
   17f36:	4631      	mov	r1, r6
   17f38:	4620      	mov	r0, r4
   17f3a:	f008 f859 	bl	1fff0 <send_err_rsp.part.0>
			return 0;
   17f3e:	2000      	movs	r0, #0
   17f40:	e7ce      	b.n	17ee0 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   17f42:	9902      	ldr	r1, [sp, #8]
   17f44:	4620      	mov	r0, r4
   17f46:	f007 fe21 	bl	1fb8c <bt_att_chan_send_rsp>
	return 0;
   17f4a:	e7f8      	b.n	17f3e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   17f4c:	2001      	movs	r0, #1
   17f4e:	e7c7      	b.n	17ee0 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   17f50:	200e      	movs	r0, #14
   17f52:	e7c5      	b.n	17ee0 <att_read_rsp+0x28>
   17f54:	0001fd1f 	.word	0x0001fd1f

00017f58 <att_read_type_req>:
{
   17f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17f5c:	8a0d      	ldrh	r5, [r1, #16]
   17f5e:	3d04      	subs	r5, #4
   17f60:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   17f62:	2d02      	cmp	r5, #2
{
   17f64:	4604      	mov	r4, r0
   17f66:	b08c      	sub	sp, #48	; 0x30
   17f68:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17f6a:	d001      	beq.n	17f70 <att_read_type_req+0x18>
   17f6c:	2d10      	cmp	r5, #16
   17f6e:	d150      	bne.n	18012 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   17f70:	2104      	movs	r1, #4
   17f72:	300c      	adds	r0, #12
   17f74:	f008 fd03 	bl	2097e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17f78:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   17f7c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17f7e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17f80:	1d01      	adds	r1, r0, #4
   17f82:	462a      	mov	r2, r5
   17f84:	4640      	mov	r0, r8
   17f86:	f007 f95f 	bl	1f248 <bt_uuid_create>
   17f8a:	b188      	cbz	r0, 17fb0 <att_read_type_req+0x58>
	if (!start || !end) {
   17f8c:	b19e      	cbz	r6, 17fb6 <att_read_type_req+0x5e>
   17f8e:	b18f      	cbz	r7, 17fb4 <att_read_type_req+0x5c>
	if (start > end) {
   17f90:	42b7      	cmp	r7, r6
   17f92:	d310      	bcc.n	17fb6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   17f94:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   17f96:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17f98:	2100      	movs	r1, #0
   17f9a:	eb0d 0002 	add.w	r0, sp, r2
   17f9e:	f007 f907 	bl	1f1b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   17fa2:	2201      	movs	r2, #1
   17fa4:	2109      	movs	r1, #9
   17fa6:	4628      	mov	r0, r5
   17fa8:	f7ff fe24 	bl	17bf4 <bt_att_create_pdu>
   17fac:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   17fae:	b960      	cbnz	r0, 17fca <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   17fb0:	200e      	movs	r0, #14
   17fb2:	e007      	b.n	17fc4 <att_read_type_req+0x6c>
			*err = 0U;
   17fb4:	463e      	mov	r6, r7
	if (!req) {
   17fb6:	2301      	movs	r3, #1
   17fb8:	4632      	mov	r2, r6
   17fba:	2108      	movs	r1, #8
   17fbc:	4620      	mov	r0, r4
   17fbe:	f008 f817 	bl	1fff0 <send_err_rsp.part.0>
		return 0;
   17fc2:	2000      	movs	r0, #0
}
   17fc4:	b00c      	add	sp, #48	; 0x30
   17fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   17fca:	2101      	movs	r1, #1
   17fcc:	300c      	adds	r0, #12
	data.uuid = uuid;
   17fce:	e9cd 4806 	strd	r4, r8, [sp, #24]
   17fd2:	f008 fcad 	bl	20930 <net_buf_simple_add>
	data.rsp->len = 0U;
   17fd6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17fd8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   17fda:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17fdc:	230a      	movs	r3, #10
   17fde:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17fe2:	4a0d      	ldr	r2, [pc, #52]	; (18018 <att_read_type_req+0xc0>)
   17fe4:	ab06      	add	r3, sp, #24
   17fe6:	4639      	mov	r1, r7
   17fe8:	4630      	mov	r0, r6
   17fea:	f007 fcff 	bl	1f9ec <bt_gatt_foreach_attr>
	if (data.err) {
   17fee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   17ff2:	b14b      	cbz	r3, 18008 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17ff4:	9b08      	ldr	r3, [sp, #32]
   17ff6:	6998      	ldr	r0, [r3, #24]
   17ff8:	f7ff f9d6 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17ffc:	9808      	ldr	r0, [sp, #32]
   17ffe:	f001 f8f9 	bl	191f4 <net_buf_unref>
	if (!req) {
   18002:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18006:	e7d7      	b.n	17fb8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   18008:	9908      	ldr	r1, [sp, #32]
   1800a:	4620      	mov	r0, r4
   1800c:	f007 fdbe 	bl	1fb8c <bt_att_chan_send_rsp>
	return 0;
   18010:	e7d7      	b.n	17fc2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   18012:	2004      	movs	r0, #4
   18014:	e7d6      	b.n	17fc4 <att_read_type_req+0x6c>
   18016:	bf00      	nop
   18018:	00017741 	.word	0x00017741

0001801c <att_find_type_req>:
{
   1801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18020:	460f      	mov	r7, r1
   18022:	b086      	sub	sp, #24
   18024:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18026:	2106      	movs	r1, #6
   18028:	f107 000c 	add.w	r0, r7, #12
   1802c:	f008 fca7 	bl	2097e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18030:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18032:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   18036:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   18038:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1803c:	b1c5      	cbz	r5, 18070 <att_find_type_req+0x54>
   1803e:	2300      	movs	r3, #0
   18040:	f1b8 0f00 	cmp.w	r8, #0
   18044:	d013      	beq.n	1806e <att_find_type_req+0x52>
	if (start > end) {
   18046:	4545      	cmp	r5, r8
   18048:	d812      	bhi.n	18070 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1804a:	f88d 3000 	strb.w	r3, [sp]
   1804e:	f88d 3004 	strb.w	r3, [sp, #4]
   18052:	a901      	add	r1, sp, #4
   18054:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18058:	4668      	mov	r0, sp
   1805a:	f8ad 2002 	strh.w	r2, [sp, #2]
   1805e:	f8ad 3006 	strh.w	r3, [sp, #6]
   18062:	f007 f8c3 	bl	1f1ec <bt_uuid_cmp>
   18066:	4606      	mov	r6, r0
   18068:	b160      	cbz	r0, 18084 <att_find_type_req+0x68>
	if (!req) {
   1806a:	230a      	movs	r3, #10
   1806c:	e001      	b.n	18072 <att_find_type_req+0x56>
			*err = 0U;
   1806e:	4645      	mov	r5, r8
	if (!req) {
   18070:	2301      	movs	r3, #1
   18072:	462a      	mov	r2, r5
   18074:	2106      	movs	r1, #6
   18076:	4620      	mov	r0, r4
   18078:	f007 ffba 	bl	1fff0 <send_err_rsp.part.0>
		return 0;
   1807c:	2000      	movs	r0, #0
}
   1807e:	b006      	add	sp, #24
   18080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   18084:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18088:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1808a:	4601      	mov	r1, r0
   1808c:	2214      	movs	r2, #20
   1808e:	a801      	add	r0, sp, #4
   18090:	f007 f88e 	bl	1f1b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18094:	4632      	mov	r2, r6
   18096:	2107      	movs	r1, #7
   18098:	4650      	mov	r0, sl
   1809a:	f7ff fdab 	bl	17bf4 <bt_att_create_pdu>
   1809e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   180a0:	b1f8      	cbz	r0, 180e2 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   180a2:	230a      	movs	r3, #10
   180a4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   180a8:	4a0f      	ldr	r2, [pc, #60]	; (180e8 <att_find_type_req+0xcc>)
	data.chan = chan;
   180aa:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   180ac:	ab01      	add	r3, sp, #4
   180ae:	4641      	mov	r1, r8
   180b0:	4628      	mov	r0, r5
	data.value = value;
   180b2:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   180b6:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   180ba:	f007 fc97 	bl	1f9ec <bt_gatt_foreach_attr>
	if (data.err) {
   180be:	f89d 3015 	ldrb.w	r3, [sp, #21]
   180c2:	b14b      	cbz	r3, 180d8 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   180c4:	9b02      	ldr	r3, [sp, #8]
   180c6:	6998      	ldr	r0, [r3, #24]
   180c8:	f7ff f96e 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   180cc:	9802      	ldr	r0, [sp, #8]
   180ce:	f001 f891 	bl	191f4 <net_buf_unref>
	if (!req) {
   180d2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   180d6:	e7cc      	b.n	18072 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   180d8:	9902      	ldr	r1, [sp, #8]
   180da:	4620      	mov	r0, r4
   180dc:	f007 fd56 	bl	1fb8c <bt_att_chan_send_rsp>
	return 0;
   180e0:	e7cc      	b.n	1807c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   180e2:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   180e4:	e7cb      	b.n	1807e <att_find_type_req+0x62>
   180e6:	bf00      	nop
   180e8:	000173c5 	.word	0x000173c5

000180ec <att_find_info_req>:
{
   180ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   180ee:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   180f0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   180f2:	885e      	ldrh	r6, [r3, #2]
{
   180f4:	b085      	sub	sp, #20
   180f6:	4604      	mov	r4, r0
	if (!start || !end) {
   180f8:	b195      	cbz	r5, 18120 <att_find_info_req+0x34>
   180fa:	b186      	cbz	r6, 1811e <att_find_info_req+0x32>
	if (start > end) {
   180fc:	42b5      	cmp	r5, r6
   180fe:	d80f      	bhi.n	18120 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18100:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   18102:	2210      	movs	r2, #16
   18104:	2100      	movs	r1, #0
   18106:	4668      	mov	r0, sp
   18108:	f007 f852 	bl	1f1b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1810c:	2200      	movs	r2, #0
   1810e:	2105      	movs	r1, #5
   18110:	4638      	mov	r0, r7
   18112:	f7ff fd6f 	bl	17bf4 <bt_att_create_pdu>
   18116:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18118:	b958      	cbnz	r0, 18132 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1811a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1811c:	e007      	b.n	1812e <att_find_info_req+0x42>
			*err = 0U;
   1811e:	4635      	mov	r5, r6
	if (!req) {
   18120:	2301      	movs	r3, #1
   18122:	462a      	mov	r2, r5
   18124:	2104      	movs	r1, #4
   18126:	4620      	mov	r0, r4
   18128:	f007 ff62 	bl	1fff0 <send_err_rsp.part.0>
		return 0;
   1812c:	2000      	movs	r0, #0
}
   1812e:	b005      	add	sp, #20
   18130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18132:	466b      	mov	r3, sp
   18134:	4a0a      	ldr	r2, [pc, #40]	; (18160 <att_find_info_req+0x74>)
	data.chan = chan;
   18136:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18138:	4631      	mov	r1, r6
   1813a:	4628      	mov	r0, r5
   1813c:	f007 fc56 	bl	1f9ec <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18140:	9b02      	ldr	r3, [sp, #8]
   18142:	b943      	cbnz	r3, 18156 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18144:	9b01      	ldr	r3, [sp, #4]
   18146:	6998      	ldr	r0, [r3, #24]
   18148:	f7ff f92e 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1814c:	9801      	ldr	r0, [sp, #4]
   1814e:	f001 f851 	bl	191f4 <net_buf_unref>
	if (!req) {
   18152:	230a      	movs	r3, #10
   18154:	e7e5      	b.n	18122 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   18156:	9901      	ldr	r1, [sp, #4]
   18158:	4620      	mov	r0, r4
   1815a:	f007 fd17 	bl	1fb8c <bt_att_chan_send_rsp>
	return 0;
   1815e:	e7e5      	b.n	1812c <att_find_info_req+0x40>
   18160:	0001fa03 	.word	0x0001fa03

00018164 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   18164:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   18166:	4c0b      	ldr	r4, [pc, #44]	; (18194 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   18168:	4d0b      	ldr	r5, [pc, #44]	; (18198 <bt_att_init+0x34>)
   1816a:	4620      	mov	r0, r4
   1816c:	f009 f888 	bl	21280 <z_impl_k_queue_init>
   18170:	4629      	mov	r1, r5
   18172:	4620      	mov	r0, r4
   18174:	f009 f890 	bl	21298 <k_queue_append>
   18178:	f105 0114 	add.w	r1, r5, #20
   1817c:	4620      	mov	r0, r4
   1817e:	f009 f88b 	bl	21298 <k_queue_append>
   18182:	f105 0128 	add.w	r1, r5, #40	; 0x28
   18186:	4620      	mov	r0, r4
   18188:	f009 f886 	bl	21298 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1818c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   18190:	f000 bae4 	b.w	1875c <bt_gatt_init>
   18194:	2000085c 	.word	0x2000085c
   18198:	20002c48 	.word	0x20002c48

0001819c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1819c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1819e:	2300      	movs	r3, #0
{
   181a0:	4605      	mov	r5, r0
   181a2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   181a4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   181a6:	f005 f83d 	bl	1d224 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   181aa:	4b0b      	ldr	r3, [pc, #44]	; (181d8 <bt_att_req_alloc+0x3c>)
   181ac:	681b      	ldr	r3, [r3, #0]
   181ae:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   181b0:	bf04      	itt	eq
   181b2:	2500      	moveq	r5, #0
   181b4:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   181b6:	a901      	add	r1, sp, #4
   181b8:	4808      	ldr	r0, [pc, #32]	; (181dc <bt_att_req_alloc+0x40>)
   181ba:	462a      	mov	r2, r5
   181bc:	4623      	mov	r3, r4
   181be:	f004 f9df 	bl	1c580 <k_mem_slab_alloc>
   181c2:	4601      	mov	r1, r0
   181c4:	b930      	cbnz	r0, 181d4 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   181c6:	9801      	ldr	r0, [sp, #4]
   181c8:	2210      	movs	r2, #16
   181ca:	f006 fff1 	bl	1f1b0 <memset>

	return req;
   181ce:	9801      	ldr	r0, [sp, #4]
}
   181d0:	b003      	add	sp, #12
   181d2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   181d4:	2000      	movs	r0, #0
   181d6:	e7fb      	b.n	181d0 <bt_att_req_alloc+0x34>
   181d8:	20002c84 	.word	0x20002c84
   181dc:	20000800 	.word	0x20000800

000181e0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   181e0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   181e2:	6883      	ldr	r3, [r0, #8]
{
   181e4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   181e6:	b14b      	cbz	r3, 181fc <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   181e8:	6998      	ldr	r0, [r3, #24]
   181ea:	f7ff f8dd 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(req->buf);
   181ee:	9b01      	ldr	r3, [sp, #4]
   181f0:	6898      	ldr	r0, [r3, #8]
   181f2:	f000 ffff 	bl	191f4 <net_buf_unref>
		req->buf = NULL;
   181f6:	9b01      	ldr	r3, [sp, #4]
   181f8:	2200      	movs	r2, #0
   181fa:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   181fc:	4803      	ldr	r0, [pc, #12]	; (1820c <bt_att_req_free+0x2c>)
   181fe:	a901      	add	r1, sp, #4
   18200:	f008 ff87 	bl	21112 <k_mem_slab_free>
}
   18204:	b003      	add	sp, #12
   18206:	f85d fb04 	ldr.w	pc, [sp], #4
   1820a:	bf00      	nop
   1820c:	20000800 	.word	0x20000800

00018210 <att_handle_rsp>:
{
   18210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18214:	4604      	mov	r4, r0
   18216:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   18218:	30b0      	adds	r0, #176	; 0xb0
{
   1821a:	460e      	mov	r6, r1
   1821c:	4617      	mov	r7, r2
   1821e:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18220:	f009 f923 	bl	2146a <k_work_cancel_delayable>
	if (!chan->req) {
   18224:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   18228:	b980      	cbnz	r0, 1824c <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   1822a:	4b1a      	ldr	r3, [pc, #104]	; (18294 <att_handle_rsp+0x84>)
   1822c:	9307      	str	r3, [sp, #28]
   1822e:	481a      	ldr	r0, [pc, #104]	; (18298 <att_handle_rsp+0x88>)
   18230:	2302      	movs	r3, #2
   18232:	aa06      	add	r2, sp, #24
   18234:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18238:	9306      	str	r3, [sp, #24]
   1823a:	f007 fc71 	bl	1fb20 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1823e:	6820      	ldr	r0, [r4, #0]
   18240:	f007 fdfc 	bl	1fe3c <att_req_send_process>
}
   18244:	2000      	movs	r0, #0
   18246:	b008      	add	sp, #32
   18248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1824c:	4b13      	ldr	r3, [pc, #76]	; (1829c <att_handle_rsp+0x8c>)
   1824e:	4298      	cmp	r0, r3
   18250:	f04f 0800 	mov.w	r8, #0
   18254:	d102      	bne.n	1825c <att_handle_rsp+0x4c>
		chan->req = NULL;
   18256:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   1825a:	e7f0      	b.n	1823e <att_handle_rsp+0x2e>
	func = chan->req->func;
   1825c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   18260:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   18264:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   18268:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1826c:	f7ff ffb8 	bl	181e0 <bt_att_req_free>
	att_req_send_process(chan->att);
   18270:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   18272:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   18276:	f007 fde1 	bl	1fe3c <att_req_send_process>
	if (func) {
   1827a:	f1b9 0f00 	cmp.w	r9, #0
   1827e:	d0e1      	beq.n	18244 <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   18280:	6820      	ldr	r0, [r4, #0]
   18282:	f8cd a000 	str.w	sl, [sp]
   18286:	6800      	ldr	r0, [r0, #0]
   18288:	463b      	mov	r3, r7
   1828a:	4632      	mov	r2, r6
   1828c:	4629      	mov	r1, r5
   1828e:	47c8      	blx	r9
   18290:	e7d8      	b.n	18244 <att_handle_rsp+0x34>
   18292:	bf00      	nop
   18294:	00023ba0 	.word	0x00023ba0
   18298:	00021e4c 	.word	0x00021e4c
   1829c:	20002c88 	.word	0x20002c88

000182a0 <bt_att_disconnected>:
{
   182a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   182a4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   182a8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   182aa:	2e00      	cmp	r6, #0
   182ac:	d056      	beq.n	1835c <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   182ae:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   182b2:	f106 0024 	add.w	r0, r6, #36	; 0x24
   182b6:	f007 fd02 	bl	1fcbe <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   182ba:	1f27      	subs	r7, r4, #4
   182bc:	f104 0894 	add.w	r8, r4, #148	; 0x94
   182c0:	2200      	movs	r2, #0
   182c2:	2300      	movs	r3, #0
   182c4:	4640      	mov	r0, r8
   182c6:	f008 fad8 	bl	2087a <net_buf_get>
   182ca:	4605      	mov	r5, r0
   182cc:	bb28      	cbnz	r0, 1831a <bt_att_disconnected+0x7a>
	if (chan->req) {
   182ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   182d2:	b12b      	cbz	r3, 182e0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   182d4:	4602      	mov	r2, r0
   182d6:	4601      	mov	r1, r0
   182d8:	230e      	movs	r3, #14
   182da:	4638      	mov	r0, r7
   182dc:	f7ff ff98 	bl	18210 <att_handle_rsp>
	chan->att = NULL;
   182e0:	2300      	movs	r3, #0
   182e2:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   182e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   182e8:	2b00      	cmp	r3, #0
   182ea:	d137      	bne.n	1835c <bt_att_disconnected+0xbc>
	att_reset(att);
   182ec:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   182ee:	9803      	ldr	r0, [sp, #12]
   182f0:	2200      	movs	r2, #0
   182f2:	2300      	movs	r3, #0
   182f4:	300c      	adds	r0, #12
   182f6:	f008 fac0 	bl	2087a <net_buf_get>
   182fa:	4605      	mov	r5, r0
   182fc:	b9a0      	cbnz	r0, 18328 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   182fe:	9803      	ldr	r0, [sp, #12]
	return list->head;
   18300:	6845      	ldr	r5, [r0, #4]
   18302:	b9c5      	cbnz	r5, 18336 <bt_att_disconnected+0x96>
	att->conn = NULL;
   18304:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   18306:	a903      	add	r1, sp, #12
   18308:	4816      	ldr	r0, [pc, #88]	; (18364 <bt_att_disconnected+0xc4>)
   1830a:	f008 ff02 	bl	21112 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1830e:	6820      	ldr	r0, [r4, #0]
}
   18310:	b004      	add	sp, #16
   18312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   18316:	f000 be61 	b.w	18fdc <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1831a:	69a8      	ldr	r0, [r5, #24]
   1831c:	f7ff f844 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(buf);
   18320:	4628      	mov	r0, r5
   18322:	f000 ff67 	bl	191f4 <net_buf_unref>
   18326:	e7cb      	b.n	182c0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18328:	69a8      	ldr	r0, [r5, #24]
   1832a:	f7ff f83d 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(buf);
   1832e:	4628      	mov	r0, r5
   18330:	f000 ff60 	bl	191f4 <net_buf_unref>
   18334:	e7db      	b.n	182ee <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18336:	6882      	ldr	r2, [r0, #8]
	return node->next;
   18338:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1833a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1833c:	4295      	cmp	r5, r2
	list->tail = node;
   1833e:	bf08      	it	eq
   18340:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   18342:	686e      	ldr	r6, [r5, #4]
   18344:	b136      	cbz	r6, 18354 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   18346:	68eb      	ldr	r3, [r5, #12]
   18348:	9300      	str	r3, [sp, #0]
   1834a:	2300      	movs	r3, #0
   1834c:	6800      	ldr	r0, [r0, #0]
   1834e:	461a      	mov	r2, r3
   18350:	210e      	movs	r1, #14
   18352:	47b0      	blx	r6
		bt_att_req_free(req);
   18354:	4628      	mov	r0, r5
   18356:	f7ff ff43 	bl	181e0 <bt_att_req_free>
   1835a:	e7d0      	b.n	182fe <bt_att_disconnected+0x5e>
}
   1835c:	b004      	add	sp, #16
   1835e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18362:	bf00      	nop
   18364:	200007c8 	.word	0x200007c8

00018368 <att_timeout>:
{
   18368:	b510      	push	{r4, lr}
   1836a:	4604      	mov	r4, r0
   1836c:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1836e:	4b08      	ldr	r3, [pc, #32]	; (18390 <att_timeout+0x28>)
   18370:	9305      	str	r3, [sp, #20]
   18372:	4808      	ldr	r0, [pc, #32]	; (18394 <att_timeout+0x2c>)
   18374:	2302      	movs	r3, #2
   18376:	aa04      	add	r2, sp, #16
   18378:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1837c:	9304      	str	r3, [sp, #16]
   1837e:	f007 fbcf 	bl	1fb20 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   18382:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   18386:	b006      	add	sp, #24
   18388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1838c:	f7ff bf88 	b.w	182a0 <bt_att_disconnected>
   18390:	00023bb7 	.word	0x00023bb7
   18394:	00021e4c 	.word	0x00021e4c

00018398 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   18398:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1839a:	b930      	cbnz	r0, 183aa <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1839c:	4907      	ldr	r1, [pc, #28]	; (183bc <find_cf_cfg+0x24>)
   1839e:	4808      	ldr	r0, [pc, #32]	; (183c0 <find_cf_cfg+0x28>)
   183a0:	f007 ffd0 	bl	20344 <bt_addr_le_eq>
   183a4:	b138      	cbz	r0, 183b6 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   183a6:	4807      	ldr	r0, [pc, #28]	; (183c4 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   183a8:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   183aa:	4a05      	ldr	r2, [pc, #20]	; (183c0 <find_cf_cfg+0x28>)
   183ac:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   183b0:	f007 fa02 	bl	1f7b8 <bt_conn_is_peer_addr_le>
   183b4:	e7f6      	b.n	183a4 <find_cf_cfg+0xc>
	return NULL;
   183b6:	2000      	movs	r0, #0
   183b8:	e7f6      	b.n	183a8 <find_cf_cfg+0x10>
   183ba:	bf00      	nop
   183bc:	00022e74 	.word	0x00022e74
   183c0:	20002cb1 	.word	0x20002cb1
   183c4:	20002cb0 	.word	0x20002cb0

000183c8 <find_sc_cfg>:
{
   183c8:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   183ca:	4c06      	ldr	r4, [pc, #24]	; (183e4 <find_sc_cfg+0x1c>)
   183cc:	7823      	ldrb	r3, [r4, #0]
   183ce:	4283      	cmp	r3, r0
   183d0:	d103      	bne.n	183da <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   183d2:	1c60      	adds	r0, r4, #1
   183d4:	f007 ffb6 	bl	20344 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   183d8:	b908      	cbnz	r0, 183de <find_sc_cfg+0x16>
	return NULL;
   183da:	2000      	movs	r0, #0
}
   183dc:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   183de:	4620      	mov	r0, r4
   183e0:	e7fc      	b.n	183dc <find_sc_cfg+0x14>
   183e2:	bf00      	nop
   183e4:	20002fa6 	.word	0x20002fa6

000183e8 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   183e8:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   183ea:	1c4a      	adds	r2, r1, #1
{
   183ec:	460c      	mov	r4, r1
		if (conn) {
   183ee:	b138      	cbz	r0, 18400 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   183f0:	7809      	ldrb	r1, [r1, #0]
   183f2:	f007 f9e1 	bl	1f7b8 <bt_conn_is_peer_addr_le>
   183f6:	b108      	cbz	r0, 183fc <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   183f8:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   183fa:	bd10      	pop	{r4, pc}
	return NULL;
   183fc:	2000      	movs	r0, #0
   183fe:	e7fc      	b.n	183fa <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18400:	4902      	ldr	r1, [pc, #8]	; (1840c <find_ccc_cfg+0x24>)
   18402:	4610      	mov	r0, r2
   18404:	f007 ff9e 	bl	20344 <bt_addr_le_eq>
   18408:	e7f5      	b.n	183f6 <find_ccc_cfg+0xe>
   1840a:	bf00      	nop
   1840c:	00022e74 	.word	0x00022e74

00018410 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   18410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18414:	b087      	sub	sp, #28
   18416:	461e      	mov	r6, r3
   18418:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1841c:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   18420:	4681      	mov	r9, r0
   18422:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   18424:	2b00      	cmp	r3, #0
   18426:	d14b      	bne.n	184c0 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   18428:	1e73      	subs	r3, r6, #1
   1842a:	2b01      	cmp	r3, #1
   1842c:	d84b      	bhi.n	184c6 <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1842e:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   18430:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   18432:	7815      	ldrb	r5, [r2, #0]
   18434:	bf18      	it	ne
   18436:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   18438:	f7ff ffd6 	bl	183e8 <find_ccc_cfg>
	if (!cfg) {
   1843c:	4604      	mov	r4, r0
   1843e:	b9f0      	cbnz	r0, 1847e <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   18440:	b91d      	cbnz	r5, 1844a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   18442:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   18444:	b007      	add	sp, #28
   18446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1844a:	4641      	mov	r1, r8
   1844c:	f7ff ffcc 	bl	183e8 <find_ccc_cfg>
		if (!cfg) {
   18450:	4604      	mov	r4, r0
   18452:	b960      	cbnz	r0, 1846e <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   18454:	4b1d      	ldr	r3, [pc, #116]	; (184cc <bt_gatt_attr_write_ccc+0xbc>)
   18456:	481e      	ldr	r0, [pc, #120]	; (184d0 <bt_gatt_attr_write_ccc+0xc0>)
   18458:	9305      	str	r3, [sp, #20]
   1845a:	aa04      	add	r2, sp, #16
   1845c:	2302      	movs	r3, #2
   1845e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18462:	9304      	str	r3, [sp, #16]
   18464:	f007 ff76 	bl	20354 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18468:	f06f 0010 	mvn.w	r0, #16
   1846c:	e7ea      	b.n	18444 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1846e:	f109 0188 	add.w	r1, r9, #136	; 0x88
   18472:	3001      	adds	r0, #1
   18474:	f007 feee 	bl	20254 <bt_addr_le_copy>
		cfg->id = conn->id;
   18478:	f899 3008 	ldrb.w	r3, [r9, #8]
   1847c:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1847e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   18482:	b98b      	cbnz	r3, 184a8 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   18484:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   18486:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1848a:	42ab      	cmp	r3, r5
   1848c:	d003      	beq.n	18496 <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   1848e:	4641      	mov	r1, r8
   18490:	4638      	mov	r0, r7
   18492:	f007 febe 	bl	20212 <gatt_ccc_changed>
	if (!value) {
   18496:	2d00      	cmp	r5, #0
   18498:	d1d3      	bne.n	18442 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1849a:	490e      	ldr	r1, [pc, #56]	; (184d4 <bt_gatt_attr_write_ccc+0xc4>)
   1849c:	1c60      	adds	r0, r4, #1
   1849e:	f007 fed9 	bl	20254 <bt_addr_le_copy>
	cfg->id = 0U;
   184a2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   184a4:	8125      	strh	r5, [r4, #8]
}
   184a6:	e7cc      	b.n	18442 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   184a8:	462a      	mov	r2, r5
   184aa:	4639      	mov	r1, r7
   184ac:	4648      	mov	r0, r9
   184ae:	4798      	blx	r3
		if (write < 0) {
   184b0:	2800      	cmp	r0, #0
   184b2:	dbc7      	blt.n	18444 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   184b4:	3801      	subs	r0, #1
   184b6:	2801      	cmp	r0, #1
   184b8:	d9e4      	bls.n	18484 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   184ba:	f06f 000d 	mvn.w	r0, #13
   184be:	e7c1      	b.n	18444 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   184c0:	f06f 0006 	mvn.w	r0, #6
   184c4:	e7be      	b.n	18444 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   184c6:	f06f 000c 	mvn.w	r0, #12
   184ca:	e7bb      	b.n	18444 <bt_gatt_attr_write_ccc+0x34>
   184cc:	00023bca 	.word	0x00023bca
   184d0:	00021e5c 	.word	0x00021e5c
   184d4:	00022e74 	.word	0x00022e74

000184d8 <clear_cf_cfg>:
{
   184d8:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   184da:	490c      	ldr	r1, [pc, #48]	; (1850c <clear_cf_cfg+0x34>)
{
   184dc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   184de:	3001      	adds	r0, #1
   184e0:	f007 feb8 	bl	20254 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   184e4:	f104 0008 	add.w	r0, r4, #8
   184e8:	2201      	movs	r2, #1
   184ea:	2100      	movs	r1, #0
   184ec:	f006 fe60 	bl	1f1b0 <memset>
   184f0:	f3bf 8f5b 	dmb	ish
   184f4:	340c      	adds	r4, #12
   184f6:	2300      	movs	r3, #0
   184f8:	e854 2f00 	ldrex	r2, [r4]
   184fc:	e844 3100 	strex	r1, r3, [r4]
   18500:	2900      	cmp	r1, #0
   18502:	d1f9      	bne.n	184f8 <clear_cf_cfg+0x20>
   18504:	f3bf 8f5b 	dmb	ish
}
   18508:	bd10      	pop	{r4, pc}
   1850a:	bf00      	nop
   1850c:	00022e74 	.word	0x00022e74

00018510 <sc_save>:
{
   18510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18514:	b086      	sub	sp, #24
   18516:	4680      	mov	r8, r0
   18518:	460f      	mov	r7, r1
   1851a:	4616      	mov	r6, r2
   1851c:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1851e:	f7ff ff53 	bl	183c8 <find_sc_cfg>
	if (!cfg) {
   18522:	4604      	mov	r4, r0
   18524:	b9b0      	cbnz	r0, 18554 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   18526:	4912      	ldr	r1, [pc, #72]	; (18570 <sc_save+0x60>)
   18528:	f7ff ff4e 	bl	183c8 <find_sc_cfg>
		if (!cfg) {
   1852c:	4604      	mov	r4, r0
   1852e:	b960      	cbnz	r0, 1854a <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   18530:	4b10      	ldr	r3, [pc, #64]	; (18574 <sc_save+0x64>)
   18532:	9305      	str	r3, [sp, #20]
   18534:	4810      	ldr	r0, [pc, #64]	; (18578 <sc_save+0x68>)
   18536:	2302      	movs	r3, #2
   18538:	aa04      	add	r2, sp, #16
   1853a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1853e:	9304      	str	r3, [sp, #16]
   18540:	f007 ff08 	bl	20354 <z_log_msg_static_create.constprop.0>
}
   18544:	b006      	add	sp, #24
   18546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1854a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1854e:	4639      	mov	r1, r7
   18550:	f007 fe80 	bl	20254 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   18554:	8922      	ldrh	r2, [r4, #8]
   18556:	8963      	ldrh	r3, [r4, #10]
   18558:	b91a      	cbnz	r2, 18562 <sc_save+0x52>
   1855a:	b92b      	cbnz	r3, 18568 <sc_save+0x58>
		cfg->data.start = start;
   1855c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1855e:	8165      	strh	r5, [r4, #10]
   18560:	e7f0      	b.n	18544 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   18562:	4296      	cmp	r6, r2
		*start = new_start;
   18564:	bf38      	it	cc
   18566:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   18568:	429d      	cmp	r5, r3
   1856a:	d9eb      	bls.n	18544 <sc_save+0x34>
   1856c:	e7f7      	b.n	1855e <sc_save+0x4e>
   1856e:	bf00      	nop
   18570:	00022e74 	.word	0x00022e74
   18574:	00023be4 	.word	0x00023be4
   18578:	00021e5c 	.word	0x00021e5c

0001857c <cf_write>:
{
   1857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18580:	b086      	sub	sp, #24
   18582:	461f      	mov	r7, r3
   18584:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   18588:	2b01      	cmp	r3, #1
{
   1858a:	4606      	mov	r6, r0
   1858c:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1858e:	d83c      	bhi.n	1860a <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   18590:	443b      	add	r3, r7
   18592:	2b01      	cmp	r3, #1
   18594:	463d      	mov	r5, r7
   18596:	dc3b      	bgt.n	18610 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   18598:	f7ff fefe 	bl	18398 <find_cf_cfg>
	if (!cfg) {
   1859c:	4604      	mov	r4, r0
   1859e:	b998      	cbnz	r0, 185c8 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   185a0:	f7ff fefa 	bl	18398 <find_cf_cfg>
	if (!cfg) {
   185a4:	4604      	mov	r4, r0
   185a6:	b978      	cbnz	r0, 185c8 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   185a8:	4b1c      	ldr	r3, [pc, #112]	; (1861c <cf_write+0xa0>)
   185aa:	9305      	str	r3, [sp, #20]
   185ac:	481c      	ldr	r0, [pc, #112]	; (18620 <cf_write+0xa4>)
   185ae:	2302      	movs	r3, #2
   185b0:	aa04      	add	r2, sp, #16
   185b2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   185b6:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   185ba:	9304      	str	r3, [sp, #16]
   185bc:	f007 feca 	bl	20354 <z_log_msg_static_create.constprop.0>
}
   185c0:	4628      	mov	r0, r5
   185c2:	b006      	add	sp, #24
   185c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   185c8:	b197      	cbz	r7, 185f0 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   185ca:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   185cc:	f898 2000 	ldrb.w	r2, [r8]
   185d0:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   185d2:	fa21 f003 	lsr.w	r0, r1, r3
   185d6:	07c7      	lsls	r7, r0, #31
   185d8:	d503      	bpl.n	185e2 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   185da:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   185de:	07c0      	lsls	r0, r0, #31
   185e0:	d519      	bpl.n	18616 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   185e2:	3301      	adds	r3, #1
   185e4:	2b03      	cmp	r3, #3
   185e6:	d1f4      	bne.n	185d2 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   185e8:	f002 0207 	and.w	r2, r2, #7
   185ec:	4311      	orrs	r1, r2
   185ee:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   185f0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   185f4:	1c60      	adds	r0, r4, #1
   185f6:	f007 fe2d 	bl	20254 <bt_addr_le_copy>
	cfg->id = conn->id;
   185fa:	4620      	mov	r0, r4
   185fc:	7a33      	ldrb	r3, [r6, #8]
   185fe:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   18602:	2100      	movs	r1, #0
   18604:	f007 fea9 	bl	2035a <atomic_set_bit>
	return len;
   18608:	e7da      	b.n	185c0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1860a:	f06f 0506 	mvn.w	r5, #6
   1860e:	e7d7      	b.n	185c0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18610:	f06f 050c 	mvn.w	r5, #12
   18614:	e7d4      	b.n	185c0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18616:	f06f 0512 	mvn.w	r5, #18
   1861a:	e7d1      	b.n	185c0 <cf_write+0x44>
   1861c:	00023c03 	.word	0x00023c03
   18620:	00021e5c 	.word	0x00021e5c

00018624 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   18624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   18628:	4b23      	ldr	r3, [pc, #140]	; (186b8 <disconnected_cb+0x94>)
{
   1862a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1862c:	6882      	ldr	r2, [r0, #8]
   1862e:	429a      	cmp	r2, r3
{
   18630:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18632:	d102      	bne.n	1863a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   18634:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   18636:	8963      	ldrh	r3, [r4, #10]
   18638:	bb33      	cbnz	r3, 18688 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1863a:	2001      	movs	r0, #1
   1863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   18640:	f007 f871 	bl	1f726 <bt_conn_unref>
		if (ccc->cfg_changed) {
   18644:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   18646:	2100      	movs	r1, #0
   18648:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1864a:	2b00      	cmp	r3, #0
   1864c:	d0f5      	beq.n	1863a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1864e:	4638      	mov	r0, r7
   18650:	4798      	blx	r3
   18652:	e7f2      	b.n	1863a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18654:	f105 0888 	add.w	r8, r5, #136	; 0x88
   18658:	7a28      	ldrb	r0, [r5, #8]
   1865a:	4641      	mov	r1, r8
   1865c:	f006 fef4 	bl	1f448 <bt_addr_le_is_bonded>
   18660:	b968      	cbnz	r0, 1867e <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   18662:	4b16      	ldr	r3, [pc, #88]	; (186bc <disconnected_cb+0x98>)
   18664:	429c      	cmp	r4, r3
   18666:	d102      	bne.n	1866e <disconnected_cb+0x4a>
					sc_clear(conn);
   18668:	4628      	mov	r0, r5
   1866a:	f007 fea4 	bl	203b6 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1866e:	4914      	ldr	r1, [pc, #80]	; (186c0 <disconnected_cb+0x9c>)
   18670:	4630      	mov	r0, r6
   18672:	f007 fdef 	bl	20254 <bt_addr_le_copy>
	cfg->id = 0U;
   18676:	2300      	movs	r3, #0
   18678:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1867a:	8123      	strh	r3, [r4, #8]
}
   1867c:	e7e2      	b.n	18644 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1867e:	4641      	mov	r1, r8
   18680:	4630      	mov	r0, r6
   18682:	f007 fde7 	bl	20254 <bt_addr_le_copy>
   18686:	e7dd      	b.n	18644 <disconnected_cb+0x20>
		if (!cfg->value) {
   18688:	8923      	ldrh	r3, [r4, #8]
   1868a:	2b00      	cmp	r3, #0
   1868c:	d0da      	beq.n	18644 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1868e:	4626      	mov	r6, r4
   18690:	4628      	mov	r0, r5
   18692:	f816 1b01 	ldrb.w	r1, [r6], #1
   18696:	4632      	mov	r2, r6
   18698:	f007 f88e 	bl	1f7b8 <bt_conn_is_peer_addr_le>
   1869c:	2800      	cmp	r0, #0
   1869e:	d1d9      	bne.n	18654 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   186a0:	7820      	ldrb	r0, [r4, #0]
   186a2:	4631      	mov	r1, r6
   186a4:	f7fe fac0 	bl	16c28 <bt_conn_lookup_addr_le>
			if (tmp) {
   186a8:	2800      	cmp	r0, #0
   186aa:	d0cb      	beq.n	18644 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   186ac:	7a83      	ldrb	r3, [r0, #10]
   186ae:	2b07      	cmp	r3, #7
   186b0:	d1c6      	bne.n	18640 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   186b2:	f007 f838 	bl	1f726 <bt_conn_unref>
	if (!value_used) {
   186b6:	e7c0      	b.n	1863a <disconnected_cb+0x16>
   186b8:	00018411 	.word	0x00018411
   186bc:	200005c4 	.word	0x200005c4
   186c0:	00022e74 	.word	0x00022e74

000186c4 <read_ppcp>:
{
   186c4:	b513      	push	{r0, r1, r4, lr}
   186c6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   186ca:	4c0b      	ldr	r4, [pc, #44]	; (186f8 <read_ppcp+0x34>)
{
   186cc:	4610      	mov	r0, r2
	if (offset > value_len) {
   186ce:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   186d0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   186d4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   186d8:	d80b      	bhi.n	186f2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   186da:	f1c1 0408 	rsb	r4, r1, #8
   186de:	429c      	cmp	r4, r3
   186e0:	bfa8      	it	ge
   186e2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   186e4:	4622      	mov	r2, r4
   186e6:	4469      	add	r1, sp
   186e8:	f006 fd57 	bl	1f19a <memcpy>
}
   186ec:	4620      	mov	r0, r4
   186ee:	b002      	add	sp, #8
   186f0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   186f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   186f6:	e7f9      	b.n	186ec <read_ppcp+0x28>
   186f8:	00280018 	.word	0x00280018

000186fc <sc_indicate_rsp>:
{
   186fc:	b510      	push	{r4, lr}
   186fe:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18700:	4815      	ldr	r0, [pc, #84]	; (18758 <sc_indicate_rsp+0x5c>)
   18702:	f3bf 8f5b 	dmb	ish
   18706:	e850 3f00 	ldrex	r3, [r0]
   1870a:	f023 0302 	bic.w	r3, r3, #2
   1870e:	e840 3200 	strex	r2, r3, [r0]
   18712:	2a00      	cmp	r2, #0
   18714:	d1f7      	bne.n	18706 <sc_indicate_rsp+0xa>
   18716:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1871a:	f3bf 8f5b 	dmb	ish
   1871e:	6803      	ldr	r3, [r0, #0]
   18720:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18724:	07da      	lsls	r2, r3, #31
   18726:	d504      	bpl.n	18732 <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   18728:	2200      	movs	r2, #0
   1872a:	2300      	movs	r3, #0
   1872c:	3830      	subs	r0, #48	; 0x30
   1872e:	f004 fa91 	bl	1cc54 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   18732:	4620      	mov	r0, r4
   18734:	f007 fd3c 	bl	201b0 <bt_att_fixed_chan_only>
   18738:	b160      	cbz	r0, 18754 <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   1873a:	4620      	mov	r0, r4
   1873c:	f7ff fe2c 	bl	18398 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   18740:	b140      	cbz	r0, 18754 <sc_indicate_rsp+0x58>
   18742:	7a03      	ldrb	r3, [r0, #8]
   18744:	07db      	lsls	r3, r3, #31
   18746:	d505      	bpl.n	18754 <sc_indicate_rsp+0x58>
}
   18748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1874c:	2100      	movs	r1, #0
   1874e:	300c      	adds	r0, #12
   18750:	f007 be03 	b.w	2035a <atomic_set_bit>
}
   18754:	bd10      	pop	{r4, pc}
   18756:	bf00      	nop
   18758:	20001ed0 	.word	0x20001ed0

0001875c <bt_gatt_init>:
{
   1875c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1875e:	4b20      	ldr	r3, [pc, #128]	; (187e0 <bt_gatt_init+0x84>)
   18760:	f3bf 8f5b 	dmb	ish
   18764:	2201      	movs	r2, #1
   18766:	e853 1f00 	ldrex	r1, [r3]
   1876a:	2900      	cmp	r1, #0
   1876c:	d103      	bne.n	18776 <bt_gatt_init+0x1a>
   1876e:	e843 2000 	strex	r0, r2, [r3]
   18772:	2800      	cmp	r0, #0
   18774:	d1f7      	bne.n	18766 <bt_gatt_init+0xa>
   18776:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1877a:	d130      	bne.n	187de <bt_gatt_init+0x82>
   1877c:	f3bf 8f5b 	dmb	ish
   18780:	4b18      	ldr	r3, [pc, #96]	; (187e4 <bt_gatt_init+0x88>)
   18782:	e853 1f00 	ldrex	r1, [r3]
   18786:	2900      	cmp	r1, #0
   18788:	d103      	bne.n	18792 <bt_gatt_init+0x36>
   1878a:	e843 2000 	strex	r0, r2, [r3]
   1878e:	2800      	cmp	r0, #0
   18790:	d1f7      	bne.n	18782 <bt_gatt_init+0x26>
   18792:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   18796:	d108      	bne.n	187aa <bt_gatt_init+0x4e>
   18798:	4913      	ldr	r1, [pc, #76]	; (187e8 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1879a:	4a14      	ldr	r2, [pc, #80]	; (187ec <bt_gatt_init+0x90>)
   1879c:	880b      	ldrh	r3, [r1, #0]
   1879e:	4c14      	ldr	r4, [pc, #80]	; (187f0 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   187a0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   187a2:	42a2      	cmp	r2, r4
   187a4:	d315      	bcc.n	187d2 <bt_gatt_init+0x76>
   187a6:	b100      	cbz	r0, 187aa <bt_gatt_init+0x4e>
   187a8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   187aa:	4b12      	ldr	r3, [pc, #72]	; (187f4 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   187ac:	4912      	ldr	r1, [pc, #72]	; (187f8 <bt_gatt_init+0x9c>)
   187ae:	4813      	ldr	r0, [pc, #76]	; (187fc <bt_gatt_init+0xa0>)
   187b0:	2200      	movs	r2, #0
	list->tail = NULL;
   187b2:	e9c3 2200 	strd	r2, r2, [r3]
   187b6:	f008 fe4a 	bl	2144e <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   187ba:	4810      	ldr	r0, [pc, #64]	; (187fc <bt_gatt_init+0xa0>)
   187bc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   187c0:	2300      	movs	r3, #0
   187c2:	f7fb fbab 	bl	13f1c <bt_long_wq_schedule>
}
   187c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   187ca:	490d      	ldr	r1, [pc, #52]	; (18800 <bt_gatt_init+0xa4>)
   187cc:	480d      	ldr	r0, [pc, #52]	; (18804 <bt_gatt_init+0xa8>)
   187ce:	f008 be3e 	b.w	2144e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   187d2:	6850      	ldr	r0, [r2, #4]
   187d4:	4403      	add	r3, r0
   187d6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   187d8:	3208      	adds	r2, #8
   187da:	2001      	movs	r0, #1
   187dc:	e7e1      	b.n	187a2 <bt_gatt_init+0x46>
}
   187de:	bd10      	pop	{r4, pc}
   187e0:	20002cc4 	.word	0x20002cc4
   187e4:	20002cc0 	.word	0x20002cc0
   187e8:	20002fb2 	.word	0x20002fb2
   187ec:	00021e1c 	.word	0x00021e1c
   187f0:	00021e34 	.word	0x00021e34
   187f4:	20002cc8 	.word	0x20002cc8
   187f8:	0002062d 	.word	0x0002062d
   187fc:	20001e28 	.word	0x20001e28
   18800:	00018c55 	.word	0x00018c55
   18804:	20001ea0 	.word	0x20001ea0

00018808 <bt_gatt_attr_get_handle>:
{
   18808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1880c:	4603      	mov	r3, r0
   1880e:	b148      	cbz	r0, 18824 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   18810:	8a00      	ldrh	r0, [r0, #16]
   18812:	b938      	cbnz	r0, 18824 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18814:	4912      	ldr	r1, [pc, #72]	; (18860 <bt_gatt_attr_get_handle+0x58>)
   18816:	f8df e04c 	ldr.w	lr, [pc, #76]	; 18864 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1881a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1881c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18820:	4571      	cmp	r1, lr
   18822:	d301      	bcc.n	18828 <bt_gatt_attr_get_handle+0x20>
}
   18824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18828:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1882c:	42bb      	cmp	r3, r7
   1882e:	d304      	bcc.n	1883a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18830:	fb0c 7206 	mla	r2, ip, r6, r7
   18834:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   18836:	4293      	cmp	r3, r2
   18838:	d90e      	bls.n	18858 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1883a:	4434      	add	r4, r6
   1883c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1883e:	3108      	adds	r1, #8
   18840:	4614      	mov	r4, r2
   18842:	e7ed      	b.n	18820 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   18844:	fb0c 7805 	mla	r8, ip, r5, r7
   18848:	4543      	cmp	r3, r8
   1884a:	d007      	beq.n	1885c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1884c:	3501      	adds	r5, #1
   1884e:	1962      	adds	r2, r4, r5
   18850:	42b5      	cmp	r5, r6
   18852:	b292      	uxth	r2, r2
   18854:	d1f6      	bne.n	18844 <bt_gatt_attr_get_handle+0x3c>
   18856:	e7f2      	b.n	1883e <bt_gatt_attr_get_handle+0x36>
   18858:	2500      	movs	r5, #0
   1885a:	e7f8      	b.n	1884e <bt_gatt_attr_get_handle+0x46>
   1885c:	4610      	mov	r0, r2
   1885e:	e7e1      	b.n	18824 <bt_gatt_attr_get_handle+0x1c>
   18860:	00021e1c 	.word	0x00021e1c
   18864:	00021e34 	.word	0x00021e34

00018868 <bt_gatt_foreach_attr_type>:
{
   18868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1886c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   18870:	9100      	str	r1, [sp, #0]
   18872:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   18874:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18878:	2d00      	cmp	r5, #0
   1887a:	bf08      	it	eq
   1887c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1887e:	4b24      	ldr	r3, [pc, #144]	; (18910 <bt_gatt_foreach_attr_type+0xa8>)
   18880:	881b      	ldrh	r3, [r3, #0]
   18882:	4283      	cmp	r3, r0
{
   18884:	4607      	mov	r7, r0
   18886:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   18888:	d23c      	bcs.n	18904 <bt_gatt_foreach_attr_type+0x9c>
}
   1888a:	b003      	add	sp, #12
   1888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   18890:	6873      	ldr	r3, [r6, #4]
   18892:	4423      	add	r3, r4
   18894:	42bb      	cmp	r3, r7
   18896:	d232      	bcs.n	188fe <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   18898:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1889a:	3608      	adds	r6, #8
   1889c:	4b1d      	ldr	r3, [pc, #116]	; (18914 <bt_gatt_foreach_attr_type+0xac>)
   1889e:	429e      	cmp	r6, r3
   188a0:	d3f6      	bcc.n	18890 <bt_gatt_foreach_attr_type+0x28>
   188a2:	e7f2      	b.n	1888a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   188a4:	5889      	ldr	r1, [r1, r2]
   188a6:	9301      	str	r3, [sp, #4]
   188a8:	4640      	mov	r0, r8
   188aa:	f006 fc9f 	bl	1f1ec <bt_uuid_cmp>
   188ae:	9b01      	ldr	r3, [sp, #4]
   188b0:	b190      	cbz	r0, 188d8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   188b2:	3401      	adds	r4, #1
   188b4:	f10a 0a01 	add.w	sl, sl, #1
   188b8:	b2a4      	uxth	r4, r4
   188ba:	6873      	ldr	r3, [r6, #4]
   188bc:	4553      	cmp	r3, sl
   188be:	d9ec      	bls.n	1889a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   188c0:	9b00      	ldr	r3, [sp, #0]
   188c2:	429c      	cmp	r4, r3
   188c4:	d8e1      	bhi.n	1888a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   188c6:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   188c8:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   188ca:	d3f2      	bcc.n	188b2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   188cc:	fb0b f20a 	mul.w	r2, fp, sl
   188d0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   188d2:	f1b8 0f00 	cmp.w	r8, #0
   188d6:	d1e5      	bne.n	188a4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   188d8:	f1b9 0f00 	cmp.w	r9, #0
   188dc:	d10b      	bne.n	188f6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   188de:	3d01      	subs	r5, #1
   188e0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   188e2:	4618      	mov	r0, r3
   188e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   188e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   188e8:	4621      	mov	r1, r4
   188ea:	4798      	blx	r3
	if (!*num_matches) {
   188ec:	2d00      	cmp	r5, #0
   188ee:	d0cc      	beq.n	1888a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   188f0:	2800      	cmp	r0, #0
   188f2:	d1de      	bne.n	188b2 <bt_gatt_foreach_attr_type+0x4a>
   188f4:	e7c9      	b.n	1888a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   188f6:	68da      	ldr	r2, [r3, #12]
   188f8:	4591      	cmp	r9, r2
   188fa:	d1da      	bne.n	188b2 <bt_gatt_foreach_attr_type+0x4a>
   188fc:	e7ef      	b.n	188de <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   188fe:	f04f 0a00 	mov.w	sl, #0
   18902:	e7da      	b.n	188ba <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18904:	4e04      	ldr	r6, [pc, #16]	; (18918 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   18906:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18908:	f04f 0b14 	mov.w	fp, #20
   1890c:	e7c6      	b.n	1889c <bt_gatt_foreach_attr_type+0x34>
   1890e:	bf00      	nop
   18910:	20002fb2 	.word	0x20002fb2
   18914:	00021e34 	.word	0x00021e34
   18918:	00021e1c 	.word	0x00021e1c

0001891c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   1891c:	b510      	push	{r4, lr}
   1891e:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   18920:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   18922:	aa22      	add	r2, sp, #136	; 0x88
   18924:	4669      	mov	r1, sp
   18926:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   18928:	e9cd 3300 	strd	r3, r3, [sp]
   1892c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   18930:	f006 fb0d 	bl	1ef4e <tc_cmac_setup>
   18934:	b958      	cbnz	r0, 1894e <db_hash_gen.constprop.0+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   18936:	4b1a      	ldr	r3, [pc, #104]	; (189a0 <db_hash_gen.constprop.0+0x84>)
		LOG_ERR("Unable to calculate hash");
   18938:	9309      	str	r3, [sp, #36]	; 0x24
   1893a:	481a      	ldr	r0, [pc, #104]	; (189a4 <db_hash_gen.constprop.0+0x88>)
   1893c:	2302      	movs	r3, #2
   1893e:	aa08      	add	r2, sp, #32
   18940:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18944:	9308      	str	r3, [sp, #32]
   18946:	f007 fd05 	bl	20354 <z_log_msg_static_create.constprop.0>
}
   1894a:	b04e      	add	sp, #312	; 0x138
   1894c:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1894e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18952:	2001      	movs	r0, #1
   18954:	4a14      	ldr	r2, [pc, #80]	; (189a8 <db_hash_gen.constprop.0+0x8c>)
   18956:	ab0a      	add	r3, sp, #40	; 0x28
   18958:	f007 fe5d 	bl	20616 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1895c:	4813      	ldr	r0, [pc, #76]	; (189ac <db_hash_gen.constprop.0+0x90>)
   1895e:	a90a      	add	r1, sp, #40	; 0x28
   18960:	f006 fb8a 	bl	1f078 <tc_cmac_final>
   18964:	b908      	cbnz	r0, 1896a <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   18966:	4b12      	ldr	r3, [pc, #72]	; (189b0 <db_hash_gen.constprop.0+0x94>)
   18968:	e7e6      	b.n	18938 <db_hash_gen.constprop.0+0x1c>
   1896a:	4b10      	ldr	r3, [pc, #64]	; (189ac <db_hash_gen.constprop.0+0x90>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1896c:	2208      	movs	r2, #8
   1896e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   18972:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   18974:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   18978:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1897c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1897e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   18980:	d1f7      	bne.n	18972 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18982:	f3bf 8f5b 	dmb	ish
   18986:	4b0b      	ldr	r3, [pc, #44]	; (189b4 <db_hash_gen.constprop.0+0x98>)
   18988:	e853 1f00 	ldrex	r1, [r3]
   1898c:	f041 0104 	orr.w	r1, r1, #4
   18990:	e843 1200 	strex	r2, r1, [r3]
   18994:	2a00      	cmp	r2, #0
   18996:	d1f7      	bne.n	18988 <db_hash_gen.constprop.0+0x6c>
   18998:	f3bf 8f5b 	dmb	ish
   1899c:	e7d5      	b.n	1894a <db_hash_gen.constprop.0+0x2e>
   1899e:	bf00      	nop
   189a0:	00023c2f 	.word	0x00023c2f
   189a4:	00021e5c 	.word	0x00021e5c
   189a8:	0002029f 	.word	0x0002029f
   189ac:	20001e18 	.word	0x20001e18
   189b0:	00023c48 	.word	0x00023c48
   189b4:	20001ed0 	.word	0x20001ed0

000189b8 <db_hash_read>:
{
   189b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   189ba:	491d      	ldr	r1, [pc, #116]	; (18a30 <db_hash_read+0x78>)
{
   189bc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   189c0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   189c2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   189c6:	461f      	mov	r7, r3
   189c8:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   189ca:	f008 fd62 	bl	21492 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   189ce:	f3bf 8f5b 	dmb	ish
   189d2:	4b18      	ldr	r3, [pc, #96]	; (18a34 <db_hash_read+0x7c>)
   189d4:	681b      	ldr	r3, [r3, #0]
   189d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   189da:	0759      	lsls	r1, r3, #29
   189dc:	d401      	bmi.n	189e2 <db_hash_read+0x2a>
		db_hash_gen(true);
   189de:	f7ff ff9d 	bl	1891c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   189e2:	4620      	mov	r0, r4
   189e4:	f7ff fcd8 	bl	18398 <find_cf_cfg>
	if (cfg &&
   189e8:	4601      	mov	r1, r0
   189ea:	b170      	cbz	r0, 18a0a <db_hash_read+0x52>
   189ec:	7a03      	ldrb	r3, [r0, #8]
   189ee:	07da      	lsls	r2, r3, #31
   189f0:	d50b      	bpl.n	18a0a <db_hash_read+0x52>
   189f2:	f3bf 8f5b 	dmb	ish
   189f6:	68cb      	ldr	r3, [r1, #12]
   189f8:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   189fc:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   189fe:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   18a02:	d402      	bmi.n	18a0a <db_hash_read+0x52>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   18a04:	2101      	movs	r1, #1
   18a06:	f007 fca8 	bl	2035a <atomic_set_bit>
	if (offset > value_len) {
   18a0a:	2e10      	cmp	r6, #16
   18a0c:	d80c      	bhi.n	18a28 <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
   18a0e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   18a12:	4909      	ldr	r1, [pc, #36]	; (18a38 <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
   18a14:	42bc      	cmp	r4, r7
   18a16:	bfa8      	it	ge
   18a18:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18a1a:	4622      	mov	r2, r4
   18a1c:	4431      	add	r1, r6
   18a1e:	4628      	mov	r0, r5
   18a20:	f006 fbbb 	bl	1f19a <memcpy>
}
   18a24:	4620      	mov	r0, r4
   18a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18a28:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18a2c:	e7fa      	b.n	18a24 <db_hash_read+0x6c>
   18a2e:	bf00      	nop
   18a30:	20001e58 	.word	0x20001e58
   18a34:	20001ed0 	.word	0x20001ed0
   18a38:	20001e18 	.word	0x20001e18

00018a3c <bt_gatt_attr_next>:
{
   18a3c:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   18a3e:	2300      	movs	r3, #0
   18a40:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   18a42:	f7ff fee1 	bl	18808 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   18a46:	1c41      	adds	r1, r0, #1
   18a48:	b289      	uxth	r1, r1
   18a4a:	4608      	mov	r0, r1
   18a4c:	4a03      	ldr	r2, [pc, #12]	; (18a5c <bt_gatt_attr_next+0x20>)
   18a4e:	ab01      	add	r3, sp, #4
   18a50:	f007 fde1 	bl	20616 <bt_gatt_foreach_attr>
}
   18a54:	9801      	ldr	r0, [sp, #4]
   18a56:	b003      	add	sp, #12
   18a58:	f85d fb04 	ldr.w	pc, [sp], #4
   18a5c:	0002020d 	.word	0x0002020d

00018a60 <gatt_indicate>:
{
   18a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a64:	4615      	mov	r5, r2
   18a66:	b086      	sub	sp, #24
   18a68:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18a6a:	2294      	movs	r2, #148	; 0x94
   18a6c:	6869      	ldr	r1, [r5, #4]
{
   18a6e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18a70:	f007 fdde 	bl	20630 <bt_gatt_check_perm>
   18a74:	4680      	mov	r8, r0
   18a76:	b178      	cbz	r0, 18a98 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   18a78:	4b34      	ldr	r3, [pc, #208]	; (18b4c <gatt_indicate+0xec>)
   18a7a:	9305      	str	r3, [sp, #20]
   18a7c:	4834      	ldr	r0, [pc, #208]	; (18b50 <gatt_indicate+0xf0>)
   18a7e:	2302      	movs	r3, #2
   18a80:	aa04      	add	r2, sp, #16
   18a82:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   18a86:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   18a8a:	9304      	str	r3, [sp, #16]
   18a8c:	f007 fc62 	bl	20354 <z_log_msg_static_create.constprop.0>
}
   18a90:	4628      	mov	r0, r5
   18a92:	b006      	add	sp, #24
   18a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   18a98:	6869      	ldr	r1, [r5, #4]
   18a9a:	2202      	movs	r2, #2
   18a9c:	4630      	mov	r0, r6
   18a9e:	f007 fdf0 	bl	20682 <bt_gatt_is_subscribed>
   18aa2:	b960      	cbnz	r0, 18abe <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   18aa4:	4b2b      	ldr	r3, [pc, #172]	; (18b54 <gatt_indicate+0xf4>)
   18aa6:	9305      	str	r3, [sp, #20]
   18aa8:	4829      	ldr	r0, [pc, #164]	; (18b50 <gatt_indicate+0xf0>)
   18aaa:	2302      	movs	r3, #2
   18aac:	aa04      	add	r2, sp, #16
   18aae:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18ab2:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   18ab4:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   18ab8:	f007 fc4c 	bl	20354 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   18abc:	e7e8      	b.n	18a90 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18abe:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   18ac2:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   18ac4:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18ac6:	f7ff fb69 	bl	1819c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   18aca:	3702      	adds	r7, #2
	if (!req) {
   18acc:	4604      	mov	r4, r0
   18ace:	b1b0      	cbz	r0, 18afe <gatt_indicate+0x9e>
	req->func = func;
   18ad0:	4b21      	ldr	r3, [pc, #132]	; (18b58 <gatt_indicate+0xf8>)
   18ad2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   18ad4:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   18ad6:	463a      	mov	r2, r7
   18ad8:	211d      	movs	r1, #29
   18ada:	4630      	mov	r0, r6
   18adc:	f7ff f88a 	bl	17bf4 <bt_att_create_pdu>
	if (!buf) {
   18ae0:	4607      	mov	r7, r0
   18ae2:	b978      	cbnz	r0, 18b04 <gatt_indicate+0xa4>
		LOG_WRN("No buffer available to send indication");
   18ae4:	4b1d      	ldr	r3, [pc, #116]	; (18b5c <gatt_indicate+0xfc>)
   18ae6:	481a      	ldr	r0, [pc, #104]	; (18b50 <gatt_indicate+0xf0>)
   18ae8:	9305      	str	r3, [sp, #20]
   18aea:	aa04      	add	r2, sp, #16
   18aec:	2302      	movs	r3, #2
   18aee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18af2:	9304      	str	r3, [sp, #16]
   18af4:	f007 fc2e 	bl	20354 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   18af8:	4620      	mov	r0, r4
   18afa:	f7ff fb71 	bl	181e0 <bt_att_req_free>
		return -ENOMEM;
   18afe:	f06f 050b 	mvn.w	r5, #11
   18b02:	e7c5      	b.n	18a90 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   18b04:	2301      	movs	r3, #1
   18b06:	4642      	mov	r2, r8
   18b08:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   18b0a:	f107 0a0c 	add.w	sl, r7, #12
   18b0e:	f007 fb76 	bl	201fe <bt_att_set_tx_meta_data>
   18b12:	2102      	movs	r1, #2
   18b14:	4650      	mov	r0, sl
   18b16:	f007 ff0b 	bl	20930 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   18b1a:	4680      	mov	r8, r0
   18b1c:	4650      	mov	r0, sl
   18b1e:	f828 9b02 	strh.w	r9, [r8], #2
   18b22:	8aa9      	ldrh	r1, [r5, #20]
   18b24:	f007 ff04 	bl	20930 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   18b28:	8aaa      	ldrh	r2, [r5, #20]
   18b2a:	6929      	ldr	r1, [r5, #16]
   18b2c:	4640      	mov	r0, r8
   18b2e:	f006 fb34 	bl	1f19a <memcpy>
	req->buf = buf;
   18b32:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   18b34:	4621      	mov	r1, r4
   18b36:	4630      	mov	r0, r6
   18b38:	f007 fb25 	bl	20186 <bt_att_req_send>
	if (err) {
   18b3c:	4605      	mov	r5, r0
   18b3e:	2800      	cmp	r0, #0
   18b40:	d0a6      	beq.n	18a90 <gatt_indicate+0x30>
		bt_att_req_free(req);
   18b42:	4620      	mov	r0, r4
   18b44:	f7ff fb4c 	bl	181e0 <bt_att_req_free>
   18b48:	e7a2      	b.n	18a90 <gatt_indicate+0x30>
   18b4a:	bf00      	nop
   18b4c:	00023c61 	.word	0x00023c61
   18b50:	00021e5c 	.word	0x00021e5c
   18b54:	00023c77 	.word	0x00023c77
   18b58:	00020227 	.word	0x00020227
   18b5c:	00023ca2 	.word	0x00023ca2

00018b60 <bt_gatt_indicate>:
{
   18b60:	b530      	push	{r4, r5, lr}
   18b62:	4b39      	ldr	r3, [pc, #228]	; (18c48 <bt_gatt_indicate+0xe8>)
   18b64:	f3bf 8f5b 	dmb	ish
   18b68:	681b      	ldr	r3, [r3, #0]
   18b6a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18b6e:	075a      	lsls	r2, r3, #29
{
   18b70:	b08b      	sub	sp, #44	; 0x2c
   18b72:	4604      	mov	r4, r0
   18b74:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18b76:	d561      	bpl.n	18c3c <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18b78:	b110      	cbz	r0, 18b80 <bt_gatt_indicate+0x20>
   18b7a:	7a83      	ldrb	r3, [r0, #10]
   18b7c:	2b07      	cmp	r3, #7
   18b7e:	d160      	bne.n	18c42 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   18b80:	6868      	ldr	r0, [r5, #4]
   18b82:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18b84:	f7ff fe40 	bl	18808 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   18b88:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18b8a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   18b8e:	b33a      	cbz	r2, 18be0 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18b90:	a905      	add	r1, sp, #20
   18b92:	9102      	str	r1, [sp, #8]
   18b94:	492d      	ldr	r1, [pc, #180]	; (18c4c <bt_gatt_indicate+0xec>)
   18b96:	9101      	str	r1, [sp, #4]
   18b98:	2101      	movs	r1, #1
	found->attr = NULL;
   18b9a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18b9c:	9100      	str	r1, [sp, #0]
   18b9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   18ba2:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18ba4:	f7ff fe60 	bl	18868 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   18ba8:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   18baa:	b91b      	cbnz	r3, 18bb4 <bt_gatt_indicate+0x54>
			return -ENOENT;
   18bac:	f06f 0001 	mvn.w	r0, #1
}
   18bb0:	b00b      	add	sp, #44	; 0x2c
   18bb2:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   18bb4:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   18bb6:	9b05      	ldr	r3, [sp, #20]
   18bb8:	6818      	ldr	r0, [r3, #0]
   18bba:	2300      	movs	r3, #0
   18bbc:	f88d 3010 	strb.w	r3, [sp, #16]
   18bc0:	a904      	add	r1, sp, #16
   18bc2:	f642 0303 	movw	r3, #10243	; 0x2803
   18bc6:	f8ad 3012 	strh.w	r3, [sp, #18]
   18bca:	f006 fb0f 	bl	1f1ec <bt_uuid_cmp>
   18bce:	b970      	cbnz	r0, 18bee <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   18bd0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   18bd2:	68c3      	ldr	r3, [r0, #12]
   18bd4:	799b      	ldrb	r3, [r3, #6]
   18bd6:	069b      	lsls	r3, r3, #26
   18bd8:	d405      	bmi.n	18be6 <bt_gatt_indicate+0x86>
			return -EINVAL;
   18bda:	f06f 0015 	mvn.w	r0, #21
   18bde:	e7e7      	b.n	18bb0 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   18be0:	2800      	cmp	r0, #0
   18be2:	d1e8      	bne.n	18bb6 <bt_gatt_indicate+0x56>
   18be4:	e7e2      	b.n	18bac <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   18be6:	f007 fcc8 	bl	2057a <bt_gatt_attr_value_handle>
   18bea:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   18bee:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   18bf2:	b13c      	cbz	r4, 18c04 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   18bf4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   18bf6:	4601      	mov	r1, r0
		params->_ref = 1;
   18bf8:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   18bfa:	462a      	mov	r2, r5
   18bfc:	4620      	mov	r0, r4
   18bfe:	f7ff ff2f 	bl	18a60 <gatt_indicate>
   18c02:	e7d5      	b.n	18bb0 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   18c04:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18c08:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   18c0a:	2302      	movs	r3, #2
   18c0c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18c10:	f642 1302 	movw	r3, #10498	; 0x2902
   18c14:	f8ad 3012 	strh.w	r3, [sp, #18]
   18c18:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   18c1a:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18c1c:	9302      	str	r3, [sp, #8]
   18c1e:	4b0c      	ldr	r3, [pc, #48]	; (18c50 <bt_gatt_indicate+0xf0>)
   18c20:	9301      	str	r3, [sp, #4]
   18c22:	2301      	movs	r3, #1
   18c24:	9300      	str	r3, [sp, #0]
   18c26:	aa04      	add	r2, sp, #16
   18c28:	4623      	mov	r3, r4
   18c2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   18c2e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18c30:	f88d 4010 	strb.w	r4, [sp, #16]
   18c34:	f7ff fe18 	bl	18868 <bt_gatt_foreach_attr_type>
	return data.err;
   18c38:	9807      	ldr	r0, [sp, #28]
   18c3a:	e7b9      	b.n	18bb0 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   18c3c:	f06f 000a 	mvn.w	r0, #10
   18c40:	e7b6      	b.n	18bb0 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   18c42:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18c46:	e7b3      	b.n	18bb0 <bt_gatt_indicate+0x50>
   18c48:	20000454 	.word	0x20000454
   18c4c:	0002024d 	.word	0x0002024d
   18c50:	00018e7d 	.word	0x00018e7d

00018c54 <sc_process>:
{
   18c54:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   18c56:	f850 2c08 	ldr.w	r2, [r0, #-8]
   18c5a:	9201      	str	r2, [sp, #4]
{
   18c5c:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   18c5e:	f1a0 0120 	sub.w	r1, r0, #32
   18c62:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18c66:	f3bf 8f5b 	dmb	ish
   18c6a:	e854 2f00 	ldrex	r2, [r4]
   18c6e:	f022 0201 	bic.w	r2, r2, #1
   18c72:	e844 2000 	strex	r0, r2, [r4]
   18c76:	2800      	cmp	r0, #0
   18c78:	d1f7      	bne.n	18c6a <sc_process+0x16>
   18c7a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   18c7e:	4a0d      	ldr	r2, [pc, #52]	; (18cb4 <sc_process+0x60>)
   18c80:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   18c84:	4a0c      	ldr	r2, [pc, #48]	; (18cb8 <sc_process+0x64>)
   18c86:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   18c8a:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   18c8c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   18c8e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   18c92:	2204      	movs	r2, #4
	sc->start = 0U;
   18c94:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   18c98:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   18c9c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   18ca0:	f7ff ff5e 	bl	18b60 <bt_gatt_indicate>
   18ca4:	b918      	cbnz	r0, 18cae <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   18ca6:	2101      	movs	r1, #1
   18ca8:	4620      	mov	r0, r4
   18caa:	f007 fb56 	bl	2035a <atomic_set_bit>
}
   18cae:	b002      	add	sp, #8
   18cb0:	bd10      	pop	{r4, pc}
   18cb2:	bf00      	nop
   18cb4:	0002226c 	.word	0x0002226c
   18cb8:	000186fd 	.word	0x000186fd

00018cbc <update_ccc>:
{
   18cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18cbe:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   18cc0:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   18cc2:	4b31      	ldr	r3, [pc, #196]	; (18d88 <update_ccc+0xcc>)
   18cc4:	6882      	ldr	r2, [r0, #8]
   18cc6:	429a      	cmp	r2, r3
{
   18cc8:	af00      	add	r7, sp, #0
   18cca:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18ccc:	d11e      	bne.n	18d0c <update_ccc+0x50>
	ccc = attr->user_data;
   18cce:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   18cd0:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18cd2:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   18cd4:	b1d3      	cbz	r3, 18d0c <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18cd6:	7831      	ldrb	r1, [r6, #0]
   18cd8:	4628      	mov	r0, r5
   18cda:	f006 fd6d 	bl	1f7b8 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18cde:	b1a8      	cbz	r0, 18d0c <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18ce0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   18ce4:	4621      	mov	r1, r4
   18ce6:	4628      	mov	r0, r5
   18ce8:	f007 fca2 	bl	20630 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18cec:	2803      	cmp	r0, #3
   18cee:	d111      	bne.n	18d14 <update_ccc+0x58>
				LOG_WRN("CCC %p not writable", attr);
   18cf0:	466d      	mov	r5, sp
   18cf2:	b088      	sub	sp, #32
   18cf4:	466a      	mov	r2, sp
   18cf6:	4b25      	ldr	r3, [pc, #148]	; (18d8c <update_ccc+0xd0>)
   18cf8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18cfc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   18d00:	f842 0f10 	str.w	r0, [r2, #16]!
   18d04:	4822      	ldr	r0, [pc, #136]	; (18d90 <update_ccc+0xd4>)
   18d06:	f007 fb25 	bl	20354 <z_log_msg_static_create.constprop.0>
   18d0a:	46ad      	mov	sp, r5
}
   18d0c:	2001      	movs	r0, #1
   18d0e:	3724      	adds	r7, #36	; 0x24
   18d10:	46bd      	mov	sp, r7
   18d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   18d14:	4631      	mov	r1, r6
   18d16:	4620      	mov	r0, r4
   18d18:	f007 fa7b 	bl	20212 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   18d1c:	4b1d      	ldr	r3, [pc, #116]	; (18d94 <update_ccc+0xd8>)
   18d1e:	429e      	cmp	r6, r3
   18d20:	d1f4      	bne.n	18d0c <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18d22:	7a28      	ldrb	r0, [r5, #8]
   18d24:	f105 0188 	add.w	r1, r5, #136	; 0x88
   18d28:	f7ff fb4e 	bl	183c8 <find_sc_cfg>
	if (!cfg) {
   18d2c:	2800      	cmp	r0, #0
   18d2e:	d0ed      	beq.n	18d0c <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   18d30:	8902      	ldrh	r2, [r0, #8]
   18d32:	8943      	ldrh	r3, [r0, #10]
   18d34:	ea52 0103 	orrs.w	r1, r2, r3
   18d38:	d0e8      	beq.n	18d0c <update_ccc+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   18d3a:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   18d3c:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   18d3e:	4628      	mov	r0, r5
   18d40:	f7fd feb0 	bl	16aa4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18d44:	4914      	ldr	r1, [pc, #80]	; (18d98 <update_ccc+0xdc>)
   18d46:	4a15      	ldr	r2, [pc, #84]	; (18d9c <update_ccc+0xe0>)
   18d48:	2318      	movs	r3, #24
   18d4a:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d4e:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18d50:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   18d52:	4a13      	ldr	r2, [pc, #76]	; (18da0 <update_ccc+0xe4>)
   18d54:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   18d56:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   18d5c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   18d5e:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d60:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   18d64:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d66:	4628      	mov	r0, r5
   18d68:	f7ff fefa 	bl	18b60 <bt_gatt_indicate>
   18d6c:	2800      	cmp	r0, #0
   18d6e:	d0cd      	beq.n	18d0c <update_ccc+0x50>
		LOG_ERR("SC restore indication failed");
   18d70:	4b0c      	ldr	r3, [pc, #48]	; (18da4 <update_ccc+0xe8>)
   18d72:	61fb      	str	r3, [r7, #28]
   18d74:	2302      	movs	r3, #2
   18d76:	4806      	ldr	r0, [pc, #24]	; (18d90 <update_ccc+0xd4>)
   18d78:	61bb      	str	r3, [r7, #24]
   18d7a:	f107 0218 	add.w	r2, r7, #24
   18d7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18d82:	f007 fae7 	bl	20354 <z_log_msg_static_create.constprop.0>
   18d86:	e7c1      	b.n	18d0c <update_ccc+0x50>
   18d88:	00018411 	.word	0x00018411
   18d8c:	00023cc9 	.word	0x00023cc9
   18d90:	00021e5c 	.word	0x00021e5c
   18d94:	200005c4 	.word	0x200005c4
   18d98:	20002c98 	.word	0x20002c98
   18d9c:	0002226c 	.word	0x0002226c
   18da0:	00020377 	.word	0x00020377
   18da4:	00023cdd 	.word	0x00023cdd

00018da8 <gatt_notify>:
{
   18da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18dac:	4614      	mov	r4, r2
   18dae:	b087      	sub	sp, #28
   18db0:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18db2:	2294      	movs	r2, #148	; 0x94
   18db4:	6861      	ldr	r1, [r4, #4]
{
   18db6:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18db8:	f007 fc3a 	bl	20630 <bt_gatt_check_perm>
   18dbc:	b170      	cbz	r0, 18ddc <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   18dbe:	4b2b      	ldr	r3, [pc, #172]	; (18e6c <gatt_notify+0xc4>)
   18dc0:	482b      	ldr	r0, [pc, #172]	; (18e70 <gatt_notify+0xc8>)
   18dc2:	9305      	str	r3, [sp, #20]
   18dc4:	aa04      	add	r2, sp, #16
   18dc6:	2302      	movs	r3, #2
   18dc8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18dcc:	9304      	str	r3, [sp, #16]
   18dce:	f007 fac1 	bl	20354 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   18dd2:	f04f 30ff 	mov.w	r0, #4294967295
}
   18dd6:	b007      	add	sp, #28
   18dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   18ddc:	6861      	ldr	r1, [r4, #4]
   18dde:	2201      	movs	r2, #1
   18de0:	4630      	mov	r0, r6
   18de2:	f007 fc4e 	bl	20682 <bt_gatt_is_subscribed>
   18de6:	b960      	cbnz	r0, 18e02 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   18de8:	4b22      	ldr	r3, [pc, #136]	; (18e74 <gatt_notify+0xcc>)
   18dea:	4821      	ldr	r0, [pc, #132]	; (18e70 <gatt_notify+0xc8>)
   18dec:	9305      	str	r3, [sp, #20]
   18dee:	aa04      	add	r2, sp, #16
   18df0:	2302      	movs	r3, #2
   18df2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18df6:	9304      	str	r3, [sp, #16]
   18df8:	f007 faac 	bl	20354 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   18dfc:	f06f 0015 	mvn.w	r0, #21
   18e00:	e7e9      	b.n	18dd6 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   18e02:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   18e04:	211b      	movs	r1, #27
   18e06:	3202      	adds	r2, #2
   18e08:	4630      	mov	r0, r6
   18e0a:	f7fe fef3 	bl	17bf4 <bt_att_create_pdu>
	if (!buf) {
   18e0e:	4605      	mov	r5, r0
   18e10:	b960      	cbnz	r0, 18e2c <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   18e12:	4b19      	ldr	r3, [pc, #100]	; (18e78 <gatt_notify+0xd0>)
   18e14:	4816      	ldr	r0, [pc, #88]	; (18e70 <gatt_notify+0xc8>)
   18e16:	9305      	str	r3, [sp, #20]
   18e18:	aa04      	add	r2, sp, #16
   18e1a:	2302      	movs	r3, #2
   18e1c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18e20:	9304      	str	r3, [sp, #16]
   18e22:	f007 fa97 	bl	20354 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   18e26:	f06f 000b 	mvn.w	r0, #11
   18e2a:	e7d4      	b.n	18dd6 <gatt_notify+0x2e>
   18e2c:	f100 090c 	add.w	r9, r0, #12
   18e30:	2102      	movs	r1, #2
   18e32:	4648      	mov	r0, r9
   18e34:	f007 fd7c 	bl	20930 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   18e38:	4607      	mov	r7, r0
   18e3a:	4648      	mov	r0, r9
   18e3c:	f827 8b02 	strh.w	r8, [r7], #2
   18e40:	89a1      	ldrh	r1, [r4, #12]
   18e42:	f007 fd75 	bl	20930 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   18e46:	89a2      	ldrh	r2, [r4, #12]
   18e48:	68a1      	ldr	r1, [r4, #8]
   18e4a:	4638      	mov	r0, r7
   18e4c:	f006 f9a5 	bl	1f19a <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   18e50:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   18e54:	4628      	mov	r0, r5
   18e56:	2301      	movs	r3, #1
   18e58:	f007 f9d1 	bl	201fe <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   18e5c:	4629      	mov	r1, r5
   18e5e:	4630      	mov	r0, r6
}
   18e60:	b007      	add	sp, #28
   18e62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   18e66:	f007 b950 	b.w	2010a <bt_att_send>
   18e6a:	bf00      	nop
   18e6c:	00023c61 	.word	0x00023c61
   18e70:	00021e5c 	.word	0x00021e5c
   18e74:	00023c77 	.word	0x00023c77
   18e78:	00023cfa 	.word	0x00023cfa

00018e7c <notify_cb>:
{
   18e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18e7e:	4b3f      	ldr	r3, [pc, #252]	; (18f7c <notify_cb+0x100>)
{
   18e80:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18e82:	6882      	ldr	r2, [r0, #8]
   18e84:	429a      	cmp	r2, r3
{
   18e86:	b087      	sub	sp, #28
   18e88:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18e8a:	d003      	beq.n	18e94 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   18e8c:	2701      	movs	r7, #1
}
   18e8e:	4638      	mov	r0, r7
   18e90:	b007      	add	sp, #28
   18e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   18e94:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18e96:	4b3a      	ldr	r3, [pc, #232]	; (18f80 <notify_cb+0x104>)
   18e98:	429e      	cmp	r6, r3
   18e9a:	d056      	beq.n	18f4a <notify_cb+0xce>
		if (cfg->value != data->type) {
   18e9c:	8932      	ldrh	r2, [r6, #8]
   18e9e:	89ab      	ldrh	r3, [r5, #12]
   18ea0:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18ea2:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   18ea6:	d1f1      	bne.n	18e8c <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18ea8:	7830      	ldrb	r0, [r6, #0]
   18eaa:	f7fd febd 	bl	16c28 <bt_conn_lookup_addr_le>
		if (!conn) {
   18eae:	4604      	mov	r4, r0
   18eb0:	2800      	cmp	r0, #0
   18eb2:	d0eb      	beq.n	18e8c <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   18eb4:	7a83      	ldrb	r3, [r0, #10]
   18eb6:	2b07      	cmp	r3, #7
   18eb8:	d005      	beq.n	18ec6 <notify_cb+0x4a>
			bt_conn_unref(conn);
   18eba:	f006 fc34 	bl	1f726 <bt_conn_unref>
			continue;
   18ebe:	e7e5      	b.n	18e8c <notify_cb+0x10>
			bt_conn_unref(conn);
   18ec0:	f006 fc31 	bl	1f726 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18ec4:	e7ea      	b.n	18e9c <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18ec6:	6973      	ldr	r3, [r6, #20]
   18ec8:	b123      	cbz	r3, 18ed4 <notify_cb+0x58>
   18eca:	4639      	mov	r1, r7
   18ecc:	4798      	blx	r3
   18ece:	b908      	cbnz	r0, 18ed4 <notify_cb+0x58>
			bt_conn_unref(conn);
   18ed0:	4620      	mov	r0, r4
   18ed2:	e7f2      	b.n	18eba <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18ed4:	4639      	mov	r1, r7
   18ed6:	2294      	movs	r2, #148	; 0x94
   18ed8:	4620      	mov	r0, r4
   18eda:	f007 fba9 	bl	20630 <bt_gatt_check_perm>
   18ede:	4607      	mov	r7, r0
   18ee0:	b150      	cbz	r0, 18ef8 <notify_cb+0x7c>
			LOG_WRN("Link is not encrypted");
   18ee2:	4b28      	ldr	r3, [pc, #160]	; (18f84 <notify_cb+0x108>)
   18ee4:	9305      	str	r3, [sp, #20]
   18ee6:	4828      	ldr	r0, [pc, #160]	; (18f88 <notify_cb+0x10c>)
   18ee8:	2302      	movs	r3, #2
   18eea:	aa04      	add	r2, sp, #16
   18eec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18ef0:	9304      	str	r3, [sp, #16]
   18ef2:	f007 fa2f 	bl	20354 <z_log_msg_static_create.constprop.0>
   18ef6:	e7eb      	b.n	18ed0 <notify_cb+0x54>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   18ef8:	89ab      	ldrh	r3, [r5, #12]
   18efa:	2b02      	cmp	r3, #2
   18efc:	d114      	bne.n	18f28 <notify_cb+0xac>
   18efe:	8933      	ldrh	r3, [r6, #8]
   18f00:	079a      	lsls	r2, r3, #30
   18f02:	d405      	bmi.n	18f10 <notify_cb+0x94>
		bt_conn_unref(conn);
   18f04:	4620      	mov	r0, r4
   18f06:	f006 fc0e 	bl	1f726 <bt_conn_unref>
		data->err = 0;
   18f0a:	2300      	movs	r3, #0
   18f0c:	60ab      	str	r3, [r5, #8]
   18f0e:	e7bd      	b.n	18e8c <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   18f10:	692a      	ldr	r2, [r5, #16]
   18f12:	88a9      	ldrh	r1, [r5, #4]
   18f14:	4620      	mov	r0, r4
   18f16:	f7ff fda3 	bl	18a60 <gatt_indicate>
			if (err == 0) {
   18f1a:	4606      	mov	r6, r0
   18f1c:	b978      	cbnz	r0, 18f3e <notify_cb+0xc2>
				data->ind_params->_ref++;
   18f1e:	692a      	ldr	r2, [r5, #16]
   18f20:	7d93      	ldrb	r3, [r2, #22]
   18f22:	3301      	adds	r3, #1
   18f24:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18f26:	e7ed      	b.n	18f04 <notify_cb+0x88>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   18f28:	2b01      	cmp	r3, #1
   18f2a:	d1eb      	bne.n	18f04 <notify_cb+0x88>
   18f2c:	8933      	ldrh	r3, [r6, #8]
   18f2e:	07db      	lsls	r3, r3, #31
   18f30:	d5e8      	bpl.n	18f04 <notify_cb+0x88>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18f32:	692a      	ldr	r2, [r5, #16]
   18f34:	88a9      	ldrh	r1, [r5, #4]
   18f36:	4620      	mov	r0, r4
   18f38:	f7ff ff36 	bl	18da8 <gatt_notify>
   18f3c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   18f3e:	4620      	mov	r0, r4
   18f40:	f006 fbf1 	bl	1f726 <bt_conn_unref>
		if (err < 0) {
   18f44:	2e00      	cmp	r6, #0
   18f46:	dba2      	blt.n	18e8e <notify_cb+0x12>
   18f48:	e7df      	b.n	18f0a <notify_cb+0x8e>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18f4a:	4c10      	ldr	r4, [pc, #64]	; (18f8c <notify_cb+0x110>)
   18f4c:	4910      	ldr	r1, [pc, #64]	; (18f90 <notify_cb+0x114>)
   18f4e:	4620      	mov	r0, r4
   18f50:	f007 f9f8 	bl	20344 <bt_addr_le_eq>
   18f54:	2800      	cmp	r0, #0
   18f56:	d1a1      	bne.n	18e9c <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   18f58:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   18f5c:	2207      	movs	r2, #7
   18f5e:	4621      	mov	r1, r4
   18f60:	f7fd feac 	bl	16cbc <bt_conn_lookup_state_le>
			if (!conn) {
   18f64:	2800      	cmp	r0, #0
   18f66:	d1ab      	bne.n	18ec0 <notify_cb+0x44>
				sc = (struct sc_data *)data->ind_params->data;
   18f68:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   18f6a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   18f6e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   18f70:	4621      	mov	r1, r4
   18f72:	8853      	ldrh	r3, [r2, #2]
   18f74:	8812      	ldrh	r2, [r2, #0]
   18f76:	f7ff facb 	bl	18510 <sc_save>
				continue;
   18f7a:	e78f      	b.n	18e9c <notify_cb+0x20>
   18f7c:	00018411 	.word	0x00018411
   18f80:	200005c4 	.word	0x200005c4
   18f84:	00023c61 	.word	0x00023c61
   18f88:	00021e5c 	.word	0x00021e5c
   18f8c:	20002fa7 	.word	0x20002fa7
   18f90:	00022e74 	.word	0x00022e74

00018f94 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   18f94:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18f96:	4a06      	ldr	r2, [pc, #24]	; (18fb0 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   18f98:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18f9a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   18f9c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18f9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   18fa2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18fa6:	f007 fb36 	bl	20616 <bt_gatt_foreach_attr>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   18faa:	b003      	add	sp, #12
   18fac:	f85d fb04 	ldr.w	pc, [sp], #4
   18fb0:	00018cbd 	.word	0x00018cbd

00018fb4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   18fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   18fb6:	4b08      	ldr	r3, [pc, #32]	; (18fd8 <bt_gatt_att_max_mtu_changed+0x24>)
   18fb8:	681c      	ldr	r4, [r3, #0]
   18fba:	4605      	mov	r5, r0
   18fbc:	460e      	mov	r6, r1
   18fbe:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18fc0:	b14c      	cbz	r4, 18fd6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   18fc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18fc6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   18fc8:	b11b      	cbz	r3, 18fd2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   18fca:	463a      	mov	r2, r7
   18fcc:	4631      	mov	r1, r6
   18fce:	4628      	mov	r0, r5
   18fd0:	4798      	blx	r3
	return node->next;
   18fd2:	6864      	ldr	r4, [r4, #4]
   18fd4:	e7f4      	b.n	18fc0 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   18fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18fd8:	20002cc8 	.word	0x20002cc8

00018fdc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18fdc:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18fde:	4603      	mov	r3, r0
   18fe0:	4a0f      	ldr	r2, [pc, #60]	; (19020 <bt_gatt_disconnected+0x44>)
{
   18fe2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18fe8:	2001      	movs	r0, #1
   18fea:	f007 fb14 	bl	20616 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18fee:	4620      	mov	r0, r4
   18ff0:	f7ff f9d2 	bl	18398 <find_cf_cfg>
	if (!cfg) {
   18ff4:	4605      	mov	r5, r0
   18ff6:	b188      	cbz	r0, 1901c <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18ff8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   18ffc:	7a20      	ldrb	r0, [r4, #8]
   18ffe:	4631      	mov	r1, r6
   19000:	f006 fa22 	bl	1f448 <bt_addr_le_is_bonded>
   19004:	b920      	cbnz	r0, 19010 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   19006:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1900c:	f7ff ba64 	b.w	184d8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19010:	4631      	mov	r1, r6
   19012:	1c68      	adds	r0, r5, #1
}
   19014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19018:	f007 b91c 	b.w	20254 <bt_addr_le_copy>
}
   1901c:	bd70      	pop	{r4, r5, r6, pc}
   1901e:	bf00      	nop
   19020:	00018625 	.word	0x00018625

00019024 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   19024:	b580      	push	{r7, lr}
   19026:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   19028:	b088      	sub	sp, #32
   1902a:	466a      	mov	r2, sp
   1902c:	4b07      	ldr	r3, [pc, #28]	; (1904c <bt_smp_accept.part.0+0x28>)
   1902e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19032:	2303      	movs	r3, #3
   19034:	f842 3f10 	str.w	r3, [r2, #16]!
   19038:	4805      	ldr	r0, [pc, #20]	; (19050 <bt_smp_accept.part.0+0x2c>)
   1903a:	2300      	movs	r3, #0
   1903c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19040:	f7f9 fb04 	bl	1264c <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   19044:	f06f 000b 	mvn.w	r0, #11
   19048:	46bd      	mov	sp, r7
   1904a:	bd80      	pop	{r7, pc}
   1904c:	00023d32 	.word	0x00023d32
   19050:	00021e94 	.word	0x00021e94

00019054 <bt_smp_accept>:
		if (smp->chan.conn) {
   19054:	4b04      	ldr	r3, [pc, #16]	; (19068 <bt_smp_accept+0x14>)
   19056:	681a      	ldr	r2, [r3, #0]
   19058:	b10a      	cbz	r2, 1905e <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1905a:	f7ff bfe3 	b.w	19024 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1905e:	4803      	ldr	r0, [pc, #12]	; (1906c <bt_smp_accept+0x18>)
   19060:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   19062:	600b      	str	r3, [r1, #0]
}
   19064:	4610      	mov	r0, r2
   19066:	4770      	bx	lr
   19068:	20002cd0 	.word	0x20002cd0
   1906c:	00022370 	.word	0x00022370

00019070 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19070:	4b02      	ldr	r3, [pc, #8]	; (1907c <net_buf_pool_get+0xc>)
   19072:	222c      	movs	r2, #44	; 0x2c
   19074:	fb02 3000 	mla	r0, r2, r0, r3
   19078:	4770      	bx	lr
   1907a:	bf00      	nop
   1907c:	2000088c 	.word	0x2000088c

00019080 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19080:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19082:	4b06      	ldr	r3, [pc, #24]	; (1909c <net_buf_id+0x1c>)
   19084:	212c      	movs	r1, #44	; 0x2c
   19086:	fb01 3302 	mla	r3, r1, r2, r3
   1908a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1908c:	7f1b      	ldrb	r3, [r3, #28]
   1908e:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19090:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19092:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   19096:	fbb0 f0f3 	udiv	r0, r0, r3
   1909a:	4770      	bx	lr
   1909c:	2000088c 	.word	0x2000088c

000190a0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   190a0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   190a2:	4b0a      	ldr	r3, [pc, #40]	; (190cc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   190a4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   190a6:	242c      	movs	r4, #44	; 0x2c
   190a8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   190ac:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   190ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   190b0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   190b2:	681a      	ldr	r2, [r3, #0]
   190b4:	4294      	cmp	r4, r2
   190b6:	bf94      	ite	ls
   190b8:	600c      	strls	r4, [r1, #0]
   190ba:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   190bc:	e9d3 5400 	ldrd	r5, r4, [r3]
   190c0:	f7ff ffde 	bl	19080 <net_buf_id>
}
   190c4:	fb05 4000 	mla	r0, r5, r0, r4
   190c8:	bd38      	pop	{r3, r4, r5, pc}
   190ca:	bf00      	nop
   190cc:	2000088c 	.word	0x2000088c

000190d0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   190d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190d4:	4605      	mov	r5, r0
   190d6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   190d8:	4610      	mov	r0, r2
   190da:	4619      	mov	r1, r3
{
   190dc:	4691      	mov	r9, r2
   190de:	4698      	mov	r8, r3
   190e0:	4617      	mov	r7, r2
   190e2:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   190e4:	f008 fb67 	bl	217b6 <sys_clock_timeout_end_calc>
   190e8:	4682      	mov	sl, r0
   190ea:	468b      	mov	fp, r1
	__asm__ volatile(
   190ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   190f0:	f3ef 8111 	mrs	r1, BASEPRI
   190f4:	f383 8812 	msr	BASEPRI_MAX, r3
   190f8:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   190fc:	8b6b      	ldrh	r3, [r5, #26]
   190fe:	2b00      	cmp	r3, #0
   19100:	d058      	beq.n	191b4 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19102:	8b2a      	ldrh	r2, [r5, #24]
   19104:	429a      	cmp	r2, r3
   19106:	d93c      	bls.n	19182 <net_buf_alloc_len+0xb2>
   19108:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1910a:	2200      	movs	r2, #0
   1910c:	2300      	movs	r3, #0
   1910e:	4628      	mov	r0, r5
   19110:	f003 fbf0 	bl	1c8f4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19114:	9900      	ldr	r1, [sp, #0]
   19116:	4604      	mov	r4, r0
   19118:	2800      	cmp	r0, #0
   1911a:	d032      	beq.n	19182 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1911c:	f381 8811 	msr	BASEPRI, r1
   19120:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19124:	9b01      	ldr	r3, [sp, #4]
   19126:	2b00      	cmp	r3, #0
   19128:	d055      	beq.n	191d6 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1912a:	ea58 0309 	orrs.w	r3, r8, r9
   1912e:	d00f      	beq.n	19150 <net_buf_alloc_len+0x80>
   19130:	f1b8 3fff 	cmp.w	r8, #4294967295
   19134:	bf08      	it	eq
   19136:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1913a:	d009      	beq.n	19150 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1913c:	f004 fa2a 	bl	1d594 <sys_clock_tick_get>
   19140:	ebba 0700 	subs.w	r7, sl, r0
   19144:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   19148:	2e00      	cmp	r6, #0
   1914a:	bfbc      	itt	lt
   1914c:	2700      	movlt	r7, #0
   1914e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19150:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19152:	4d26      	ldr	r5, [pc, #152]	; (191ec <net_buf_alloc_len+0x11c>)
   19154:	f04f 082c 	mov.w	r8, #44	; 0x2c
   19158:	fb08 5303 	mla	r3, r8, r3, r5
   1915c:	463a      	mov	r2, r7
   1915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19160:	681b      	ldr	r3, [r3, #0]
   19162:	a901      	add	r1, sp, #4
   19164:	f8d3 9000 	ldr.w	r9, [r3]
   19168:	4620      	mov	r0, r4
   1916a:	4633      	mov	r3, r6
   1916c:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1916e:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   19170:	2800      	cmp	r0, #0
   19172:	d131      	bne.n	191d8 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   19174:	7aa0      	ldrb	r0, [r4, #10]
   19176:	4621      	mov	r1, r4
   19178:	fb00 5008 	mla	r0, r0, r8, r5
   1917c:	f008 f897 	bl	212ae <k_queue_prepend>
}
   19180:	e024      	b.n	191cc <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   19182:	8b68      	ldrh	r0, [r5, #26]
   19184:	1e43      	subs	r3, r0, #1
   19186:	836b      	strh	r3, [r5, #26]
   19188:	f381 8811 	msr	BASEPRI, r1
   1918c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19190:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19192:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19194:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19196:	331b      	adds	r3, #27
   19198:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1919c:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1919e:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   191a2:	4b12      	ldr	r3, [pc, #72]	; (191ec <net_buf_alloc_len+0x11c>)
   191a4:	4a12      	ldr	r2, [pc, #72]	; (191f0 <net_buf_alloc_len+0x120>)
   191a6:	1aeb      	subs	r3, r5, r3
   191a8:	109b      	asrs	r3, r3, #2
   191aa:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   191ac:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   191ae:	7f2b      	ldrb	r3, [r5, #28]
   191b0:	72e3      	strb	r3, [r4, #11]
		goto success;
   191b2:	e7b7      	b.n	19124 <net_buf_alloc_len+0x54>
   191b4:	f381 8811 	msr	BASEPRI, r1
   191b8:	f3bf 8f6f 	isb	sy
   191bc:	464a      	mov	r2, r9
   191be:	4643      	mov	r3, r8
   191c0:	4628      	mov	r0, r5
   191c2:	f003 fb97 	bl	1c8f4 <z_impl_k_queue_get>
	if (!buf) {
   191c6:	4604      	mov	r4, r0
   191c8:	2800      	cmp	r0, #0
   191ca:	d1ab      	bne.n	19124 <net_buf_alloc_len+0x54>
		return NULL;
   191cc:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   191ce:	4620      	mov	r0, r4
   191d0:	b003      	add	sp, #12
   191d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   191d6:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   191d8:	2300      	movs	r3, #0
	buf->ref   = 1U;
   191da:	2201      	movs	r2, #1
	buf->frags = NULL;
   191dc:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   191de:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   191e0:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   191e2:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   191e4:	6963      	ldr	r3, [r4, #20]
   191e6:	8262      	strh	r2, [r4, #18]
   191e8:	60e3      	str	r3, [r4, #12]
	return buf;
   191ea:	e7f0      	b.n	191ce <net_buf_alloc_len+0xfe>
   191ec:	2000088c 	.word	0x2000088c
   191f0:	ba2e8ba3 	.word	0xba2e8ba3

000191f4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   191f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191f8:	4d16      	ldr	r5, [pc, #88]	; (19254 <net_buf_unref+0x60>)
   191fa:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   191fc:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   191fe:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   19200:	b90c      	cbnz	r4, 19206 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   19206:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   19208:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1920c:	3b01      	subs	r3, #1
   1920e:	b2db      	uxtb	r3, r3
   19210:	7223      	strb	r3, [r4, #8]
   19212:	2b00      	cmp	r3, #0
   19214:	d1f5      	bne.n	19202 <net_buf_unref+0xe>
		if (buf->__buf) {
   19216:	6961      	ldr	r1, [r4, #20]
   19218:	b159      	cbz	r1, 19232 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1921a:	7a63      	ldrb	r3, [r4, #9]
   1921c:	07db      	lsls	r3, r3, #31
   1921e:	d407      	bmi.n	19230 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19220:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   19222:	fb07 5303 	mla	r3, r7, r3, r5
   19226:	4620      	mov	r0, r4
   19228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1922a:	681b      	ldr	r3, [r3, #0]
   1922c:	689b      	ldr	r3, [r3, #8]
   1922e:	4798      	blx	r3
			buf->__buf = NULL;
   19230:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   19232:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   19234:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   19236:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1923a:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   1923c:	6a1b      	ldr	r3, [r3, #32]
   1923e:	b11b      	cbz	r3, 19248 <net_buf_unref+0x54>
			pool->destroy(buf);
   19240:	4620      	mov	r0, r4
   19242:	4798      	blx	r3
{
   19244:	4644      	mov	r4, r8
   19246:	e7db      	b.n	19200 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   19248:	4621      	mov	r1, r4
   1924a:	fb00 5007 	mla	r0, r0, r7, r5
   1924e:	f008 f82e 	bl	212ae <k_queue_prepend>
}
   19252:	e7f7      	b.n	19244 <net_buf_unref+0x50>
   19254:	2000088c 	.word	0x2000088c

00019258 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   19258:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1925a:	4804      	ldr	r0, [pc, #16]	; (1926c <xoshiro128_initialize+0x14>)
   1925c:	f007 fec1 	bl	20fe2 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   19260:	2800      	cmp	r0, #0
}
   19262:	bf0c      	ite	eq
   19264:	f06f 0012 	mvneq.w	r0, #18
   19268:	2000      	movne	r0, #0
   1926a:	bd08      	pop	{r3, pc}
   1926c:	00021bf8 	.word	0x00021bf8

00019270 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   19270:	4b08      	ldr	r3, [pc, #32]	; (19294 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19272:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   19274:	1ac3      	subs	r3, r0, r3
{
   19276:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19278:	4907      	ldr	r1, [pc, #28]	; (19298 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1927a:	109b      	asrs	r3, r3, #2
{
   1927c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1927e:	4359      	muls	r1, r3
   19280:	4806      	ldr	r0, [pc, #24]	; (1929c <onoff_stop+0x2c>)
   19282:	2240      	movs	r2, #64	; 0x40
   19284:	f007 fbb3 	bl	209ee <stop>
	notify(mgr, res);
   19288:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1928a:	4601      	mov	r1, r0
	notify(mgr, res);
   1928c:	4620      	mov	r0, r4
}
   1928e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   19292:	4718      	bx	r3
   19294:	20002d70 	.word	0x20002d70
   19298:	b6db6db7 	.word	0xb6db6db7
   1929c:	00021bb0 	.word	0x00021bb0

000192a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   192a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   192a2:	4c0c      	ldr	r4, [pc, #48]	; (192d4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   192a4:	4a0c      	ldr	r2, [pc, #48]	; (192d8 <onoff_start+0x38>)
   192a6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   192a8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   192aa:	9300      	str	r3, [sp, #0]
{
   192ac:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   192ae:	460b      	mov	r3, r1
   192b0:	490a      	ldr	r1, [pc, #40]	; (192dc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   192b2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   192b4:	4361      	muls	r1, r4
{
   192b6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   192b8:	4809      	ldr	r0, [pc, #36]	; (192e0 <onoff_start+0x40>)
   192ba:	f007 fbc4 	bl	20a46 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   192be:	1e01      	subs	r1, r0, #0
   192c0:	da05      	bge.n	192ce <onoff_start+0x2e>
		notify(mgr, err);
   192c2:	4630      	mov	r0, r6
   192c4:	462b      	mov	r3, r5
	}
}
   192c6:	b002      	add	sp, #8
   192c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   192cc:	4718      	bx	r3
}
   192ce:	b002      	add	sp, #8
   192d0:	bd70      	pop	{r4, r5, r6, pc}
   192d2:	bf00      	nop
   192d4:	20002d70 	.word	0x20002d70
   192d8:	00020ab1 	.word	0x00020ab1
   192dc:	b6db6db7 	.word	0xb6db6db7
   192e0:	00021bb0 	.word	0x00021bb0

000192e4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   192e4:	2200      	movs	r2, #0
{
   192e6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   192e8:	2101      	movs	r1, #1
{
   192ea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   192ec:	4610      	mov	r0, r2
   192ee:	f7f9 ff4f 	bl	13190 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   192f2:	480f      	ldr	r0, [pc, #60]	; (19330 <clk_init+0x4c>)
   192f4:	f001 ffb6 	bl	1b264 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   192f8:	4b0e      	ldr	r3, [pc, #56]	; (19334 <clk_init+0x50>)
   192fa:	4298      	cmp	r0, r3
   192fc:	d115      	bne.n	1932a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   192fe:	f007 fd17 	bl	20d30 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   19302:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   19304:	490c      	ldr	r1, [pc, #48]	; (19338 <clk_init+0x54>)
   19306:	4630      	mov	r0, r6
   19308:	f005 f8e6 	bl	1e4d8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1930c:	2800      	cmp	r0, #0
   1930e:	db0b      	blt.n	19328 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19310:	2501      	movs	r5, #1
   19312:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   19314:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19316:	4908      	ldr	r1, [pc, #32]	; (19338 <clk_init+0x54>)
   19318:	f104 001c 	add.w	r0, r4, #28
   1931c:	f005 f8dc 	bl	1e4d8 <onoff_manager_init>
		if (err < 0) {
   19320:	2800      	cmp	r0, #0
   19322:	db01      	blt.n	19328 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19324:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   19326:	2000      	movs	r0, #0
}
   19328:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1932a:	f06f 0004 	mvn.w	r0, #4
   1932e:	e7fb      	b.n	19328 <clk_init+0x44>
   19330:	00019371 	.word	0x00019371
   19334:	0bad0000 	.word	0x0bad0000
   19338:	000223a4 	.word	0x000223a4

0001933c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1933c:	b570      	push	{r4, r5, r6, lr}
   1933e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   19340:	230c      	movs	r3, #12
   19342:	4809      	ldr	r0, [pc, #36]	; (19368 <clkstarted_handle.constprop.0+0x2c>)
   19344:	434b      	muls	r3, r1
   19346:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   19348:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1934c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1934e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   19350:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   19352:	4418      	add	r0, r3
   19354:	f007 fb38 	bl	209c8 <set_on_state>
	if (callback) {
   19358:	b12d      	cbz	r5, 19366 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1935a:	4632      	mov	r2, r6
   1935c:	462b      	mov	r3, r5
   1935e:	4803      	ldr	r0, [pc, #12]	; (1936c <clkstarted_handle.constprop.0+0x30>)
}
   19360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   19364:	4718      	bx	r3
}
   19366:	bd70      	pop	{r4, r5, r6, pc}
   19368:	20002d70 	.word	0x20002d70
   1936c:	00021bb0 	.word	0x00021bb0

00019370 <clock_event_handler>:
	switch (event) {
   19370:	b110      	cbz	r0, 19378 <clock_event_handler+0x8>
   19372:	2801      	cmp	r0, #1
   19374:	d004      	beq.n	19380 <clock_event_handler+0x10>
   19376:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   19378:	4b03      	ldr	r3, [pc, #12]	; (19388 <clock_event_handler+0x18>)
   1937a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1937c:	075b      	lsls	r3, r3, #29
   1937e:	d101      	bne.n	19384 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19380:	f7ff bfdc 	b.w	1933c <clkstarted_handle.constprop.0>
}
   19384:	4770      	bx	lr
   19386:	bf00      	nop
   19388:	20002d70 	.word	0x20002d70

0001938c <generic_hfclk_start>:
{
   1938c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1938e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19392:	f3ef 8111 	mrs	r1, BASEPRI
   19396:	f383 8812 	msr	BASEPRI_MAX, r3
   1939a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1939e:	4a12      	ldr	r2, [pc, #72]	; (193e8 <generic_hfclk_start+0x5c>)
   193a0:	6813      	ldr	r3, [r2, #0]
   193a2:	f043 0002 	orr.w	r0, r3, #2
   193a6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   193a8:	07da      	lsls	r2, r3, #31
   193aa:	d408      	bmi.n	193be <generic_hfclk_start+0x32>
	__asm__ volatile(
   193ac:	f381 8811 	msr	BASEPRI, r1
   193b0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   193b4:	2001      	movs	r0, #1
}
   193b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   193ba:	f001 bf43 	b.w	1b244 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   193be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   193c2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   193c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   193ca:	07d3      	lsls	r3, r2, #31
   193cc:	d5ee      	bpl.n	193ac <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   193ce:	4807      	ldr	r0, [pc, #28]	; (193ec <generic_hfclk_start+0x60>)
   193d0:	f007 fafa 	bl	209c8 <set_on_state>
   193d4:	f381 8811 	msr	BASEPRI, r1
   193d8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   193dc:	2000      	movs	r0, #0
}
   193de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   193e2:	f7ff bfab 	b.w	1933c <clkstarted_handle.constprop.0>
   193e6:	bf00      	nop
   193e8:	20002dc0 	.word	0x20002dc0
   193ec:	20002db0 	.word	0x20002db0

000193f0 <api_blocking_start>:
{
   193f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   193f2:	2200      	movs	r2, #0
   193f4:	2301      	movs	r3, #1
   193f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   193fa:	ab04      	add	r3, sp, #16
   193fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19400:	4a09      	ldr	r2, [pc, #36]	; (19428 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19402:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19406:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19408:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1940c:	f007 fb49 	bl	20aa2 <api_start>
	if (err < 0) {
   19410:	2800      	cmp	r0, #0
   19412:	db05      	blt.n	19420 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   19414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19418:	2300      	movs	r3, #0
   1941a:	4668      	mov	r0, sp
   1941c:	f003 fac4 	bl	1c9a8 <z_impl_k_sem_take>
}
   19420:	b007      	add	sp, #28
   19422:	f85d fb04 	ldr.w	pc, [sp], #4
   19426:	bf00      	nop
   19428:	00020ad1 	.word	0x00020ad1

0001942c <generic_hfclk_stop>:
{
   1942c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1942e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19432:	f3ef 8411 	mrs	r4, BASEPRI
   19436:	f383 8812 	msr	BASEPRI_MAX, r3
   1943a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1943e:	4a07      	ldr	r2, [pc, #28]	; (1945c <generic_hfclk_stop+0x30>)
   19440:	6813      	ldr	r3, [r2, #0]
   19442:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   19446:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   19448:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1944a:	d402      	bmi.n	19452 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1944c:	2001      	movs	r0, #1
   1944e:	f007 fc6a 	bl	20d26 <nrfx_clock_stop>
	__asm__ volatile(
   19452:	f384 8811 	msr	BASEPRI, r4
   19456:	f3bf 8f6f 	isb	sy
}
   1945a:	bd10      	pop	{r4, pc}
   1945c:	20002dc0 	.word	0x20002dc0

00019460 <z_nrf_clock_control_lf_on>:
{
   19460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19464:	4938      	ldr	r1, [pc, #224]	; (19548 <z_nrf_clock_control_lf_on+0xe8>)
   19466:	f3bf 8f5b 	dmb	ish
   1946a:	4607      	mov	r7, r0
   1946c:	2201      	movs	r2, #1
   1946e:	e851 3f00 	ldrex	r3, [r1]
   19472:	e841 2000 	strex	r0, r2, [r1]
   19476:	2800      	cmp	r0, #0
   19478:	d1f9      	bne.n	1946e <z_nrf_clock_control_lf_on+0xe>
   1947a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1947e:	b933      	cbnz	r3, 1948e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19480:	4932      	ldr	r1, [pc, #200]	; (1954c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   19482:	4833      	ldr	r0, [pc, #204]	; (19550 <z_nrf_clock_control_lf_on+0xf0>)
   19484:	604b      	str	r3, [r1, #4]
   19486:	60cb      	str	r3, [r1, #12]
   19488:	608a      	str	r2, [r1, #8]
   1948a:	f005 f838 	bl	1e4fe <onoff_request>
	switch (start_mode) {
   1948e:	1e7b      	subs	r3, r7, #1
   19490:	2b01      	cmp	r3, #1
   19492:	d82b      	bhi.n	194ec <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   19494:	2f01      	cmp	r7, #1
   19496:	d107      	bne.n	194a8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1949c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   194a0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   194a4:	2b01      	cmp	r3, #1
   194a6:	d021      	beq.n	194ec <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   194a8:	f007 fe5c 	bl	21164 <k_is_in_isr>
   194ac:	4605      	mov	r5, r0
   194ae:	b9f8      	cbnz	r0, 194f0 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   194b0:	4b28      	ldr	r3, [pc, #160]	; (19554 <z_nrf_clock_control_lf_on+0xf4>)
   194b2:	781b      	ldrb	r3, [r3, #0]
   194b4:	b1e3      	cbz	r3, 194f0 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   194b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   194ba:	2202      	movs	r2, #2
   194bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   194c0:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   194c2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 19558 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   194c6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   194ca:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   194ce:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   194d2:	03d2      	lsls	r2, r2, #15
   194d4:	d516      	bpl.n	19504 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   194d6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   194da:	2b01      	cmp	r3, #1
   194dc:	d001      	beq.n	194e2 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   194de:	2f01      	cmp	r7, #1
   194e0:	d110      	bne.n	19504 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   194e2:	b35d      	cbz	r5, 1953c <z_nrf_clock_control_lf_on+0xdc>
   194e4:	f386 8811 	msr	BASEPRI, r6
   194e8:	f3bf 8f6f 	isb	sy
}
   194ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   194f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   194f4:	f3ef 8611 	mrs	r6, BASEPRI
   194f8:	f383 8812 	msr	BASEPRI_MAX, r3
   194fc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19500:	2501      	movs	r5, #1
   19502:	e7de      	b.n	194c2 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19504:	b1ad      	cbz	r5, 19532 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   19506:	4630      	mov	r0, r6
   19508:	f7f9 fd56 	bl	12fb8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1950c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19510:	2b00      	cmp	r3, #0
   19512:	d1da      	bne.n	194ca <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19514:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   19518:	2a00      	cmp	r2, #0
   1951a:	d0d6      	beq.n	194ca <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1951c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   19520:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   19524:	2301      	movs	r3, #1
   19526:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1952a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1952e:	60a3      	str	r3, [r4, #8]
}
   19530:	e7cb      	b.n	194ca <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   19532:	2100      	movs	r1, #0
   19534:	2021      	movs	r0, #33	; 0x21
   19536:	f003 fe5b 	bl	1d1f0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1953a:	e7e7      	b.n	1950c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   1953c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19540:	2202      	movs	r2, #2
   19542:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19546:	e7d1      	b.n	194ec <z_nrf_clock_control_lf_on+0x8c>
   19548:	20002d6c 	.word	0x20002d6c
   1954c:	20002d5c 	.word	0x20002d5c
   19550:	20002d8c 	.word	0x20002d8c
   19554:	20003567 	.word	0x20003567
   19558:	e000e100 	.word	0xe000e100

0001955c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1955c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
   1955e:	4c04      	ldr	r4, [pc, #16]	; (19570 <rtt_console_init+0x14>)
   19560:	4620      	mov	r0, r4
   19562:	f7f8 fcb5 	bl	11ed0 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
   19566:	4620      	mov	r0, r4
   19568:	f7fa fc1e 	bl	13da8 <__stdout_hook_install>

	return 0;
}
   1956c:	2000      	movs	r0, #0
   1956e:	bd10      	pop	{r4, pc}
   19570:	00019575 	.word	0x00019575

00019574 <rtt_console_out>:
{
   19574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19576:	4e13      	ldr	r6, [pc, #76]	; (195c4 <rtt_console_out+0x50>)
	char c = (char)character;
   19578:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1957c:	4604      	mov	r4, r0
	char c = (char)character;
   1957e:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   19580:	f002 fe5c 	bl	1c23c <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   19584:	2201      	movs	r2, #1
   19586:	f10d 0107 	add.w	r1, sp, #7
   1958a:	2000      	movs	r0, #0
   1958c:	f002 fe20 	bl	1c1d0 <SEGGER_RTT_WriteNoLock>
   19590:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
   19592:	f002 fe5d 	bl	1c250 <zephyr_rtt_mutex_unlock>
		if (cnt) {
   19596:	b127      	cbz	r7, 195a2 <rtt_console_out+0x2e>
			host_present = true;
   19598:	2301      	movs	r3, #1
   1959a:	7033      	strb	r3, [r6, #0]
}
   1959c:	4620      	mov	r0, r4
   1959e:	b003      	add	sp, #12
   195a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   195a2:	7833      	ldrb	r3, [r6, #0]
   195a4:	2b00      	cmp	r3, #0
   195a6:	d0f9      	beq.n	1959c <rtt_console_out+0x28>
			if (max_cnt) {
   195a8:	3d01      	subs	r5, #1
   195aa:	d008      	beq.n	195be <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   195ac:	f007 fdda 	bl	21164 <k_is_in_isr>
   195b0:	2800      	cmp	r0, #0
   195b2:	d1e5      	bne.n	19580 <rtt_console_out+0xc>
   195b4:	2100      	movs	r1, #0
   195b6:	2042      	movs	r0, #66	; 0x42
   195b8:	f003 fe1a 	bl	1d1f0 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   195bc:	e7e0      	b.n	19580 <rtt_console_out+0xc>
				host_present = false;
   195be:	7035      	strb	r5, [r6, #0]
   195c0:	e7ec      	b.n	1959c <rtt_console_out+0x28>
   195c2:	bf00      	nop
   195c4:	20003069 	.word	0x20003069

000195c8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   195c8:	b530      	push	{r4, r5, lr}
	return port->config;
   195ca:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   195cc:	7b05      	ldrb	r5, [r0, #12]
   195ce:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   195d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   195d6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   195d8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   195dc:	d105      	bne.n	195ea <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   195de:	4620      	mov	r0, r4
   195e0:	f002 f986 	bl	1b8f0 <nrfx_gpiote_trigger_disable>

		return 0;
   195e4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   195e6:	b005      	add	sp, #20
   195e8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   195ea:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   195ec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   195f0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   195f4:	d114      	bne.n	19620 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   195f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   195fa:	bf0c      	ite	eq
   195fc:	2304      	moveq	r3, #4
   195fe:	2305      	movne	r3, #5
   19600:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19604:	2300      	movs	r3, #0
   19606:	4619      	mov	r1, r3
   19608:	aa02      	add	r2, sp, #8
   1960a:	4620      	mov	r0, r4
   1960c:	f001 ffae 	bl	1b56c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19610:	4b1f      	ldr	r3, [pc, #124]	; (19690 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   19612:	4298      	cmp	r0, r3
   19614:	d139      	bne.n	1968a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   19616:	2101      	movs	r1, #1
   19618:	4620      	mov	r0, r4
   1961a:	f002 f921 	bl	1b860 <nrfx_gpiote_trigger_enable>
	return 0;
   1961e:	e7e1      	b.n	195e4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19620:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   19624:	d026      	beq.n	19674 <gpio_nrfx_pin_interrupt_configure+0xac>
   19626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1962a:	bf14      	ite	ne
   1962c:	2301      	movne	r3, #1
   1962e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19630:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   19634:	6883      	ldr	r3, [r0, #8]
   19636:	40cb      	lsrs	r3, r1
   19638:	07d9      	lsls	r1, r3, #31
   1963a:	d4e3      	bmi.n	19604 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1963c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   19640:	d1e0      	bne.n	19604 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   19642:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   19644:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   19646:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   1964a:	4a12      	ldr	r2, [pc, #72]	; (19694 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1964c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   19650:	bf18      	it	ne
   19652:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1965a:	07db      	lsls	r3, r3, #31
   1965c:	d4d2      	bmi.n	19604 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1965e:	f10d 0507 	add.w	r5, sp, #7
   19662:	4629      	mov	r1, r5
   19664:	4620      	mov	r0, r4
   19666:	f002 f8a7 	bl	1b7b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1966a:	4b0b      	ldr	r3, [pc, #44]	; (19698 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1966c:	4298      	cmp	r0, r3
   1966e:	d003      	beq.n	19678 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   19670:	9503      	str	r5, [sp, #12]
   19672:	e7c7      	b.n	19604 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19674:	2303      	movs	r3, #3
   19676:	e7db      	b.n	19630 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   19678:	4628      	mov	r0, r5
   1967a:	f002 f8eb 	bl	1b854 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1967e:	4b04      	ldr	r3, [pc, #16]	; (19690 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   19680:	4298      	cmp	r0, r3
   19682:	d0f5      	beq.n	19670 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   19684:	f06f 000b 	mvn.w	r0, #11
   19688:	e7ad      	b.n	195e6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1968a:	f06f 0015 	mvn.w	r0, #21
   1968e:	e7aa      	b.n	195e6 <gpio_nrfx_pin_interrupt_configure+0x1e>
   19690:	0bad0000 	.word	0x0bad0000
   19694:	50000300 	.word	0x50000300
   19698:	0bad0004 	.word	0x0bad0004

0001969c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1969c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1969e:	f002 f8c9 	bl	1b834 <nrfx_gpiote_is_init>
   196a2:	4604      	mov	r4, r0
   196a4:	b968      	cbnz	r0, 196c2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   196a6:	f002 f89d 	bl	1b7e4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   196aa:	4b08      	ldr	r3, [pc, #32]	; (196cc <gpio_nrfx_init+0x30>)
   196ac:	4298      	cmp	r0, r3
   196ae:	d10a      	bne.n	196c6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   196b0:	4807      	ldr	r0, [pc, #28]	; (196d0 <gpio_nrfx_init+0x34>)
   196b2:	4621      	mov	r1, r4
   196b4:	f002 f87a 	bl	1b7ac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   196b8:	4622      	mov	r2, r4
   196ba:	2105      	movs	r1, #5
   196bc:	2006      	movs	r0, #6
   196be:	f7f9 fd67 	bl	13190 <z_arm_irq_priority_set>
		return 0;
   196c2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   196c4:	bd10      	pop	{r4, pc}
		return -EIO;
   196c6:	f06f 0004 	mvn.w	r0, #4
   196ca:	e7fb      	b.n	196c4 <gpio_nrfx_init+0x28>
   196cc:	0bad0000 	.word	0x0bad0000
   196d0:	000196d5 	.word	0x000196d5

000196d4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   196d4:	0942      	lsrs	r2, r0, #5
{
   196d6:	b570      	push	{r4, r5, r6, lr}
   196d8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   196da:	d002      	beq.n	196e2 <nrfx_gpio_handler+0xe>
   196dc:	2a01      	cmp	r2, #1
   196de:	d017      	beq.n	19710 <nrfx_gpio_handler+0x3c>
}
   196e0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   196e2:	4e0d      	ldr	r6, [pc, #52]	; (19718 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   196e4:	6932      	ldr	r2, [r6, #16]
   196e6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   196e8:	2900      	cmp	r1, #0
   196ea:	d0f9      	beq.n	196e0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   196ec:	f003 031f 	and.w	r3, r3, #31
   196f0:	2501      	movs	r5, #1
   196f2:	680c      	ldr	r4, [r1, #0]
   196f4:	409d      	lsls	r5, r3
   196f6:	2900      	cmp	r1, #0
   196f8:	d0f2      	beq.n	196e0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   196fa:	688a      	ldr	r2, [r1, #8]
   196fc:	402a      	ands	r2, r5
   196fe:	d002      	beq.n	19706 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   19700:	684b      	ldr	r3, [r1, #4]
   19702:	4630      	mov	r0, r6
   19704:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19706:	b12c      	cbz	r4, 19714 <nrfx_gpio_handler+0x40>
   19708:	6823      	ldr	r3, [r4, #0]
   1970a:	4621      	mov	r1, r4
   1970c:	461c      	mov	r4, r3
   1970e:	e7f2      	b.n	196f6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19710:	4e02      	ldr	r6, [pc, #8]	; (1971c <nrfx_gpio_handler+0x48>)
   19712:	e7e7      	b.n	196e4 <nrfx_gpio_handler+0x10>
   19714:	4623      	mov	r3, r4
   19716:	e7f8      	b.n	1970a <nrfx_gpio_handler+0x36>
   19718:	00021be0 	.word	0x00021be0
   1971c:	00021bc8 	.word	0x00021bc8

00019720 <gpio_nrfx_pin_configure>:
{
   19720:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   19724:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19726:	7b3b      	ldrb	r3, [r7, #12]
   19728:	f001 051f 	and.w	r5, r1, #31
   1972c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   19730:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19732:	4628      	mov	r0, r5
   19734:	f10d 0103 	add.w	r1, sp, #3
{
   19738:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1973a:	f002 f83d 	bl	1b7b8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1973e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19742:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   19744:	d10b      	bne.n	1975e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   19746:	4628      	mov	r0, r5
   19748:	f002 f8fa 	bl	1b940 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1974c:	4b3d      	ldr	r3, [pc, #244]	; (19844 <gpio_nrfx_pin_configure+0x124>)
   1974e:	4598      	cmp	r8, r3
   19750:	d103      	bne.n	1975a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   19752:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19756:	f002 f877 	bl	1b848 <nrfx_gpiote_channel_free>
		return 0;
   1975a:	2000      	movs	r0, #0
   1975c:	e00c      	b.n	19778 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1975e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19760:	4619      	mov	r1, r3
   19762:	aa02      	add	r2, sp, #8
   19764:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   19766:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1976a:	f001 feff 	bl	1b56c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1976e:	4b35      	ldr	r3, [pc, #212]	; (19844 <gpio_nrfx_pin_configure+0x124>)
   19770:	4298      	cmp	r0, r3
   19772:	d004      	beq.n	1977e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   19774:	f06f 0015 	mvn.w	r0, #21
}
   19778:	b004      	add	sp, #16
   1977a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1977e:	4580      	cmp	r8, r0
   19780:	d103      	bne.n	1978a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   19782:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19786:	f002 f85f 	bl	1b848 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1978a:	03a3      	lsls	r3, r4, #14
   1978c:	d54b      	bpl.n	19826 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1978e:	f240 3306 	movw	r3, #774	; 0x306
   19792:	4023      	ands	r3, r4
   19794:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   19798:	d019      	beq.n	197ce <gpio_nrfx_pin_configure+0xae>
   1979a:	d80c      	bhi.n	197b6 <gpio_nrfx_pin_configure+0x96>
   1979c:	2b06      	cmp	r3, #6
   1979e:	d017      	beq.n	197d0 <gpio_nrfx_pin_configure+0xb0>
   197a0:	d804      	bhi.n	197ac <gpio_nrfx_pin_configure+0x8c>
   197a2:	b1ab      	cbz	r3, 197d0 <gpio_nrfx_pin_configure+0xb0>
   197a4:	2b02      	cmp	r3, #2
   197a6:	d1e5      	bne.n	19774 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   197a8:	2304      	movs	r3, #4
   197aa:	e011      	b.n	197d0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   197ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   197b0:	d1e0      	bne.n	19774 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   197b2:	2301      	movs	r3, #1
   197b4:	e00c      	b.n	197d0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   197b6:	f240 2202 	movw	r2, #514	; 0x202
   197ba:	4293      	cmp	r3, r2
   197bc:	d027      	beq.n	1980e <gpio_nrfx_pin_configure+0xee>
   197be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   197c2:	d026      	beq.n	19812 <gpio_nrfx_pin_configure+0xf2>
   197c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   197c8:	d1d4      	bne.n	19774 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   197ca:	2302      	movs	r3, #2
   197cc:	e000      	b.n	197d0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   197ce:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   197d0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   197d4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   197d8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   197dc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   197de:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   197e2:	bf54      	ite	pl
   197e4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   197e8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   197ea:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   197ec:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   197f0:	d511      	bpl.n	19816 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   197f2:	687a      	ldr	r2, [r7, #4]
   197f4:	2301      	movs	r3, #1
   197f6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   197f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   197fc:	2200      	movs	r2, #0
   197fe:	a901      	add	r1, sp, #4
   19800:	4628      	mov	r0, r5
   19802:	f001 ff61 	bl	1b6c8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   19806:	4b0f      	ldr	r3, [pc, #60]	; (19844 <gpio_nrfx_pin_configure+0x124>)
   19808:	4298      	cmp	r0, r3
   1980a:	d0a6      	beq.n	1975a <gpio_nrfx_pin_configure+0x3a>
   1980c:	e7b2      	b.n	19774 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1980e:	2305      	movs	r3, #5
   19810:	e7de      	b.n	197d0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19812:	2303      	movs	r3, #3
   19814:	e7dc      	b.n	197d0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   19816:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   19818:	bf41      	itttt	mi
   1981a:	2301      	movmi	r3, #1
   1981c:	687a      	ldrmi	r2, [r7, #4]
   1981e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   19820:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   19824:	e7ea      	b.n	197fc <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   19826:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19828:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1982c:	bf54      	ite	pl
   1982e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   19832:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19834:	461a      	mov	r2, r3
   19836:	a901      	add	r1, sp, #4
   19838:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1983a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1983e:	f001 fe95 	bl	1b56c <nrfx_gpiote_input_configure>
   19842:	e7e0      	b.n	19806 <gpio_nrfx_pin_configure+0xe6>
   19844:	0bad0000 	.word	0x0bad0000

00019848 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   19848:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
   1984a:	6843      	ldr	r3, [r0, #4]
   1984c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
   1984e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
   19852:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   19856:	f002 fbdf 	bl	1c018 <nrfx_twi_twim_bus_recover>
	scl_pin = config->config.scl;
	sda_pin = config->config.sda;
#endif

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1985a:	4b03      	ldr	r3, [pc, #12]	; (19868 <i2c_nrfx_twi_recover_bus+0x20>)
   1985c:	4298      	cmp	r0, r3
}
   1985e:	bf14      	ite	ne
   19860:	f06f 000f 	mvnne.w	r0, #15
   19864:	2000      	moveq	r0, #0
   19866:	bd08      	pop	{r3, pc}
   19868:	0bad0000 	.word	0x0bad0000

0001986c <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1986c:	b5b0      	push	{r4, r5, r7, lr}
   1986e:	4604      	mov	r4, r0
   19870:	b082      	sub	sp, #8
   19872:	2200      	movs	r2, #0
   19874:	af00      	add	r7, sp, #0
   19876:	2101      	movs	r1, #1
   19878:	2003      	movs	r0, #3
   1987a:	f7f9 fc89 	bl	13190 <z_arm_irq_priority_set>
   1987e:	6863      	ldr	r3, [r4, #4]
   19880:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   19882:	1d3a      	adds	r2, r7, #4
   19884:	2100      	movs	r1, #0
   19886:	4628      	mov	r0, r5
   19888:	f007 f99c 	bl	20bc4 <pinctrl_lookup_state>
	if (ret < 0) {
   1988c:	2800      	cmp	r0, #0
   1988e:	db27      	blt.n	198e0 <twi_0_init+0x74>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   19890:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   19892:	682a      	ldr	r2, [r5, #0]
   19894:	7919      	ldrb	r1, [r3, #4]
   19896:	6818      	ldr	r0, [r3, #0]
   19898:	f000 fc7e 	bl	1a198 <pinctrl_configure_pins>
   1989c:	2800      	cmp	r0, #0
   1989e:	db1f      	blt.n	198e0 <twi_0_init+0x74>
	const struct i2c_nrfx_twi_config *config = dev->config;
   198a0:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   198a2:	6923      	ldr	r3, [r4, #16]
   198a4:	4a11      	ldr	r2, [pc, #68]	; (198ec <twi_0_init+0x80>)
   198a6:	f100 0108 	add.w	r1, r0, #8
   198aa:	f002 fa3f 	bl	1bd2c <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   198ae:	4b10      	ldr	r3, [pc, #64]	; (198f0 <twi_0_init+0x84>)
   198b0:	4298      	cmp	r0, r3
   198b2:	d018      	beq.n	198e6 <twi_0_init+0x7a>
		LOG_ERR("Failed to initialize device: %s",
   198b4:	6823      	ldr	r3, [r4, #0]
   198b6:	466c      	mov	r4, sp
   198b8:	b088      	sub	sp, #32
   198ba:	466a      	mov	r2, sp
   198bc:	490d      	ldr	r1, [pc, #52]	; (198f4 <twi_0_init+0x88>)
   198be:	e9c2 1305 	strd	r1, r3, [r2, #20]
   198c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   198c6:	8393      	strh	r3, [r2, #28]
   198c8:	4b0b      	ldr	r3, [pc, #44]	; (198f8 <twi_0_init+0x8c>)
   198ca:	f842 3f10 	str.w	r3, [r2, #16]!
   198ce:	480b      	ldr	r0, [pc, #44]	; (198fc <twi_0_init+0x90>)
   198d0:	2300      	movs	r3, #0
   198d2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   198d6:	f7f8 feb9 	bl	1264c <z_impl_z_log_msg_static_create>
		return -EBUSY;
   198da:	f06f 000f 	mvn.w	r0, #15
   198de:	46a5      	mov	sp, r4
I2C_NRFX_TWI_DEVICE(0);
   198e0:	3708      	adds	r7, #8
   198e2:	46bd      	mov	sp, r7
   198e4:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   198e6:	2000      	movs	r0, #0
   198e8:	e7fa      	b.n	198e0 <twi_0_init+0x74>
   198ea:	bf00      	nop
   198ec:	00019901 	.word	0x00019901
   198f0:	0bad0000 	.word	0x0bad0000
   198f4:	00023daf 	.word	0x00023daf
   198f8:	01000003 	.word	0x01000003
   198fc:	00021ebc 	.word	0x00021ebc

00019900 <event_handler>:
	switch (p_event->type) {
   19900:	7803      	ldrb	r3, [r0, #0]
   19902:	2b01      	cmp	r3, #1
   19904:	d008      	beq.n	19918 <event_handler+0x18>
   19906:	2b02      	cmp	r3, #2
   19908:	d008      	beq.n	1991c <event_handler+0x1c>
   1990a:	b94b      	cbnz	r3, 19920 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1990c:	4b05      	ldr	r3, [pc, #20]	; (19924 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1990e:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   19910:	f101 0018 	add.w	r0, r1, #24
   19914:	f003 b822 	b.w	1c95c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   19918:	4b03      	ldr	r3, [pc, #12]	; (19928 <event_handler+0x28>)
   1991a:	e7f8      	b.n	1990e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1991c:	4b03      	ldr	r3, [pc, #12]	; (1992c <event_handler+0x2c>)
   1991e:	e7f6      	b.n	1990e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   19920:	4b03      	ldr	r3, [pc, #12]	; (19930 <event_handler+0x30>)
   19922:	e7f4      	b.n	1990e <event_handler+0xe>
   19924:	0bad0000 	.word	0x0bad0000
   19928:	0bae0001 	.word	0x0bae0001
   1992c:	0bae0002 	.word	0x0bae0002
   19930:	0bad0001 	.word	0x0bad0001

00019934 <i2c_nrfx_twi_configure>:
{
   19934:	b510      	push	{r4, lr}
	if (I2C_ADDR_10_BITS & dev_config) {
   19936:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twi_config *config = dev->config;
   1993a:	6842      	ldr	r2, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   1993c:	6904      	ldr	r4, [r0, #16]
{
   1993e:	b086      	sub	sp, #24
	if (I2C_ADDR_10_BITS & dev_config) {
   19940:	d10f      	bne.n	19962 <i2c_nrfx_twi_configure+0x2e>
	switch (I2C_SPEED_GET(dev_config)) {
   19942:	f3c1 0042 	ubfx	r0, r1, #1, #3
   19946:	2801      	cmp	r0, #1
   19948:	d00e      	beq.n	19968 <i2c_nrfx_twi_configure+0x34>
   1994a:	2802      	cmp	r0, #2
   1994c:	d015      	beq.n	1997a <i2c_nrfx_twi_configure+0x46>
		LOG_ERR("unsupported speed");
   1994e:	4a0d      	ldr	r2, [pc, #52]	; (19984 <i2c_nrfx_twi_configure+0x50>)
   19950:	9205      	str	r2, [sp, #20]
   19952:	2202      	movs	r2, #2
   19954:	9204      	str	r2, [sp, #16]
   19956:	480c      	ldr	r0, [pc, #48]	; (19988 <i2c_nrfx_twi_configure+0x54>)
   19958:	aa04      	add	r2, sp, #16
   1995a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1995e:	f7f8 fe75 	bl	1264c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   19962:	f06f 0015 	mvn.w	r0, #21
   19966:	e006      	b.n	19976 <i2c_nrfx_twi_configure+0x42>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   19968:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1996a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1996e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   19972:	2000      	movs	r0, #0
	data->dev_config = dev_config;
   19974:	6361      	str	r1, [r4, #52]	; 0x34
}
   19976:	b006      	add	sp, #24
   19978:	bd10      	pop	{r4, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1997a:	6813      	ldr	r3, [r2, #0]
   1997c:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   19980:	e7f5      	b.n	1996e <i2c_nrfx_twi_configure+0x3a>
   19982:	bf00      	nop
   19984:	00023dcf 	.word	0x00023dcf
   19988:	00021ebc 	.word	0x00021ebc

0001998c <i2c_nrfx_twi_transfer>:
{
   1998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19990:	b08b      	sub	sp, #44	; 0x2c
   19992:	af00      	add	r7, sp, #0
   19994:	4606      	mov	r6, r0
   19996:	460c      	mov	r4, r1
   19998:	4692      	mov	sl, r2
   1999a:	60bb      	str	r3, [r7, #8]
	const struct i2c_nrfx_twi_config *config = dev->config;
   1999c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   199a0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   199a4:	f04f 32ff 	mov.w	r2, #4294967295
   199a8:	f04f 33ff 	mov.w	r3, #4294967295
   199ac:	4640      	mov	r0, r8
   199ae:	f002 fffb 	bl	1c9a8 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
   199b2:	f108 0318 	add.w	r3, r8, #24
   199b6:	60fb      	str	r3, [r7, #12]
   199b8:	2200      	movs	r2, #0
   199ba:	2300      	movs	r3, #0
   199bc:	68f8      	ldr	r0, [r7, #12]
		if (res != NRFX_SUCCESS) {
   199be:	f8df b11c 	ldr.w	fp, [pc, #284]	; 19adc <i2c_nrfx_twi_transfer+0x150>
   199c2:	f002 fff1 	bl	1c9a8 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
   199c6:	4648      	mov	r0, r9
   199c8:	f002 fa12 	bl	1bdf0 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   199cc:	2500      	movs	r5, #0
   199ce:	4555      	cmp	r5, sl
   199d0:	d301      	bcc.n	199d6 <i2c_nrfx_twi_transfer+0x4a>
   199d2:	2400      	movs	r4, #0
   199d4:	e053      	b.n	19a7e <i2c_nrfx_twi_transfer+0xf2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   199d6:	7a23      	ldrb	r3, [r4, #8]
   199d8:	603b      	str	r3, [r7, #0]
   199da:	f013 0108 	ands.w	r1, r3, #8
   199de:	d172      	bne.n	19ac6 <i2c_nrfx_twi_transfer+0x13a>
		nrfx_twi_xfer_desc_t cur_xfer = {
   199e0:	2212      	movs	r2, #18
   199e2:	f107 0016 	add.w	r0, r7, #22
   199e6:	6079      	str	r1, [r7, #4]
   199e8:	f005 fbe2 	bl	1f1b0 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   199ec:	683b      	ldr	r3, [r7, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
   199ee:	6860      	ldr	r0, [r4, #4]
   199f0:	68b9      	ldr	r1, [r7, #8]
   199f2:	61b8      	str	r0, [r7, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   199f4:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   199f8:	6820      	ldr	r0, [r4, #0]
   199fa:	7579      	strb	r1, [r7, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   199fc:	f013 0f02 	tst.w	r3, #2
   19a00:	6879      	ldr	r1, [r7, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
   19a02:	753a      	strb	r2, [r7, #20]
   19a04:	6238      	str	r0, [r7, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   19a06:	d116      	bne.n	19a36 <i2c_nrfx_twi_transfer+0xaa>
			if ((i < (num_msgs - 1)) &&
   19a08:	f10a 33ff 	add.w	r3, sl, #4294967295
   19a0c:	42ab      	cmp	r3, r5
   19a0e:	d902      	bls.n	19a16 <i2c_nrfx_twi_transfer+0x8a>
   19a10:	7d23      	ldrb	r3, [r4, #20]
   19a12:	075b      	lsls	r3, r3, #29
   19a14:	d511      	bpl.n	19a3a <i2c_nrfx_twi_transfer+0xae>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   19a16:	2a00      	cmp	r2, #0
   19a18:	d155      	bne.n	19ac6 <i2c_nrfx_twi_transfer+0x13a>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   19a1a:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
   19a1c:	f107 0114 	add.w	r1, r7, #20
   19a20:	4648      	mov	r0, r9
   19a22:	f002 fa11 	bl	1be48 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   19a26:	4558      	cmp	r0, fp
   19a28:	d009      	beq.n	19a3e <i2c_nrfx_twi_transfer+0xb2>
			if (res == NRFX_ERROR_BUSY) {
   19a2a:	4b28      	ldr	r3, [pc, #160]	; (19acc <i2c_nrfx_twi_transfer+0x140>)
   19a2c:	4298      	cmp	r0, r3
   19a2e:	d124      	bne.n	19a7a <i2c_nrfx_twi_transfer+0xee>
				ret = -EBUSY;
   19a30:	f06f 040f 	mvn.w	r4, #15
   19a34:	e023      	b.n	19a7e <i2c_nrfx_twi_transfer+0xf2>
		uint32_t xfer_flags = 0;
   19a36:	460a      	mov	r2, r1
   19a38:	e7f0      	b.n	19a1c <i2c_nrfx_twi_transfer+0x90>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   19a3a:	2240      	movs	r2, #64	; 0x40
   19a3c:	e7ee      	b.n	19a1c <i2c_nrfx_twi_transfer+0x90>
   19a3e:	2300      	movs	r3, #0
   19a40:	68f8      	ldr	r0, [r7, #12]
   19a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19a46:	f002 ffaf 	bl	1c9a8 <z_impl_k_sem_take>
		if (ret != 0) {
   19a4a:	4603      	mov	r3, r0
   19a4c:	b310      	cbz	r0, 19a94 <i2c_nrfx_twi_transfer+0x108>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   19a4e:	466c      	mov	r4, sp
   19a50:	b088      	sub	sp, #32
   19a52:	466a      	mov	r2, sp
   19a54:	4b1e      	ldr	r3, [pc, #120]	; (19ad0 <i2c_nrfx_twi_transfer+0x144>)
   19a56:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19a5a:	2303      	movs	r3, #3
   19a5c:	f842 3f10 	str.w	r3, [r2, #16]!
   19a60:	481c      	ldr	r0, [pc, #112]	; (19ad4 <i2c_nrfx_twi_transfer+0x148>)
   19a62:	2300      	movs	r3, #0
   19a64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19a68:	f7f8 fdf0 	bl	1264c <z_impl_z_log_msg_static_create>
			nrfx_twi_disable(&config->twi);
   19a6c:	4648      	mov	r0, r9
   19a6e:	46a5      	mov	sp, r4
   19a70:	f002 f9ce 	bl	1be10 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
   19a74:	4630      	mov	r0, r6
   19a76:	f7ff fee7 	bl	19848 <i2c_nrfx_twi_recover_bus>
				ret = -EIO;
   19a7a:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
   19a7e:	4648      	mov	r0, r9
   19a80:	f002 f9c6 	bl	1be10 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
   19a84:	4640      	mov	r0, r8
   19a86:	f002 ff69 	bl	1c95c <z_impl_k_sem_give>
}
   19a8a:	4620      	mov	r0, r4
   19a8c:	372c      	adds	r7, #44	; 0x2c
   19a8e:	46bd      	mov	sp, r7
   19a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = data->res;
   19a94:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   19a98:	4559      	cmp	r1, fp
   19a9a:	f104 040c 	add.w	r4, r4, #12
   19a9e:	d010      	beq.n	19ac2 <i2c_nrfx_twi_transfer+0x136>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   19aa0:	466c      	mov	r4, sp
   19aa2:	b088      	sub	sp, #32
   19aa4:	466a      	mov	r2, sp
   19aa6:	480c      	ldr	r0, [pc, #48]	; (19ad8 <i2c_nrfx_twi_transfer+0x14c>)
   19aa8:	61d5      	str	r5, [r2, #28]
   19aaa:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19aae:	2104      	movs	r1, #4
   19ab0:	f842 1f10 	str.w	r1, [r2, #16]!
   19ab4:	4807      	ldr	r0, [pc, #28]	; (19ad4 <i2c_nrfx_twi_transfer+0x148>)
   19ab6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19aba:	f7f8 fdc7 	bl	1264c <z_impl_z_log_msg_static_create>
   19abe:	46a5      	mov	sp, r4
			break;
   19ac0:	e7db      	b.n	19a7a <i2c_nrfx_twi_transfer+0xee>
	for (size_t i = 0; i < num_msgs; i++) {
   19ac2:	3501      	adds	r5, #1
   19ac4:	e783      	b.n	199ce <i2c_nrfx_twi_transfer+0x42>
			ret = -ENOTSUP;
   19ac6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   19aca:	e7d8      	b.n	19a7e <i2c_nrfx_twi_transfer+0xf2>
   19acc:	0bad000b 	.word	0x0bad000b
   19ad0:	00023de1 	.word	0x00023de1
   19ad4:	00021ebc 	.word	0x00021ebc
   19ad8:	00023e0b 	.word	0x00023e0b
   19adc:	0bad0000 	.word	0x0bad0000

00019ae0 <random_byte_get>:
   19ae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ae4:	f3ef 8211 	mrs	r2, BASEPRI
   19ae8:	f383 8812 	msr	BASEPRI_MAX, r3
   19aec:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19af0:	4b09      	ldr	r3, [pc, #36]	; (19b18 <random_byte_get+0x38>)
   19af2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   19af6:	b161      	cbz	r1, 19b12 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19af8:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   19afa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19afe:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   19b02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   19b06:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   19b08:	f382 8811 	msr	BASEPRI, r2
   19b0c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   19b10:	4770      	bx	lr
	int retval = -EAGAIN;
   19b12:	f06f 000a 	mvn.w	r0, #10
   19b16:	e7f7      	b.n	19b08 <random_byte_get+0x28>
   19b18:	4000d000 	.word	0x4000d000

00019b1c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   19b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b1e:	4603      	mov	r3, r0
   19b20:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   19b22:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   19b24:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   19b28:	f04f 0540 	mov.w	r5, #64	; 0x40
   19b2c:	f3ef 8211 	mrs	r2, BASEPRI
   19b30:	f385 8812 	msr	BASEPRI_MAX, r5
   19b34:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   19b38:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   19b3a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   19b3e:	1be4      	subs	r4, r4, r7
   19b40:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   19b44:	42a0      	cmp	r0, r4
		len = available;
   19b46:	bf88      	it	hi
   19b48:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   19b4a:	183e      	adds	r6, r7, r0
   19b4c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   19b50:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   19b52:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   19b54:	f382 8811 	msr	BASEPRI, r2
   19b58:	f3bf 8f6f 	isb	sy
   19b5c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   19b5e:	428a      	cmp	r2, r1
   19b60:	d117      	bne.n	19b92 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   19b62:	4577      	cmp	r7, lr
   19b64:	d10d      	bne.n	19b82 <rng_pool_get+0x66>
	__asm__ volatile(
   19b66:	f04f 0140 	mov.w	r1, #64	; 0x40
   19b6a:	f3ef 8211 	mrs	r2, BASEPRI
   19b6e:	f381 8812 	msr	BASEPRI_MAX, r1
   19b72:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   19b76:	7819      	ldrb	r1, [r3, #0]
   19b78:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   19b7a:	f382 8811 	msr	BASEPRI, r2
   19b7e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   19b82:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   19b84:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   19b86:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19b88:	bf22      	ittt	cs
   19b8a:	4b06      	ldrcs	r3, [pc, #24]	; (19ba4 <rng_pool_get+0x88>)
   19b8c:	2201      	movcs	r2, #1
   19b8e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   19b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   19b92:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   19b94:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   19b96:	7976      	ldrb	r6, [r6, #5]
   19b98:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   19b9c:	ea05 050c 	and.w	r5, r5, ip
   19ba0:	e7dd      	b.n	19b5e <rng_pool_get+0x42>
   19ba2:	bf00      	nop
   19ba4:	4000d000 	.word	0x4000d000

00019ba8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19ba8:	43db      	mvns	r3, r3
{
   19baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19bae:	f013 0501 	ands.w	r5, r3, #1
{
   19bb2:	460e      	mov	r6, r1
   19bb4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19bb6:	d004      	beq.n	19bc2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   19bb8:	4823      	ldr	r0, [pc, #140]	; (19c48 <entropy_nrf5_get_entropy_isr+0xa0>)
   19bba:	f7ff ffaf 	bl	19b1c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   19bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   19bc2:	b3a2      	cbz	r2, 19c2e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   19bc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   19bc8:	f3ef 8811 	mrs	r8, BASEPRI
   19bcc:	f383 8812 	msr	BASEPRI_MAX, r3
   19bd0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   19bd4:	200d      	movs	r0, #13
   19bd6:	f7f9 facd 	bl	13174 <arch_irq_is_enabled>
   19bda:	4607      	mov	r7, r0
		irq_disable(IRQN);
   19bdc:	200d      	movs	r0, #13
   19bde:	f7f9 fab5 	bl	1314c <arch_irq_disable>
	__asm__ volatile(
   19be2:	f388 8811 	msr	BASEPRI, r8
   19be6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19bea:	f8df a060 	ldr.w	sl, [pc, #96]	; 19c4c <entropy_nrf5_get_entropy_isr+0xa4>
   19bee:	f8df 8060 	ldr.w	r8, [pc, #96]	; 19c50 <entropy_nrf5_get_entropy_isr+0xa8>
   19bf2:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   19bf6:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   19bfa:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19bfe:	2301      	movs	r3, #1
   19c00:	f8ca 3000 	str.w	r3, [sl]
   19c04:	4625      	mov	r5, r4
   19c06:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19c0a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   19c0e:	b183      	cbz	r3, 19c32 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   19c10:	f7ff ff66 	bl	19ae0 <random_byte_get>
			if (byte < 0) {
   19c14:	1e03      	subs	r3, r0, #0
   19c16:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   19c1a:	dbf6      	blt.n	19c0a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   19c1c:	3d01      	subs	r5, #1
   19c1e:	b2ad      	uxth	r5, r5
   19c20:	5573      	strb	r3, [r6, r5]
		} while (len);
   19c22:	2d00      	cmp	r5, #0
   19c24:	d1f1      	bne.n	19c0a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   19c26:	b117      	cbz	r7, 19c2e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   19c28:	200d      	movs	r0, #13
   19c2a:	f7f9 fa81 	bl	13130 <arch_irq_enable>
	return cnt;
   19c2e:	4620      	mov	r0, r4
   19c30:	e7c5      	b.n	19bbe <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   19c32:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c36:	f3ef 8011 	mrs	r0, BASEPRI
   19c3a:	f383 8812 	msr	BASEPRI_MAX, r3
   19c3e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   19c42:	f7f9 f9b9 	bl	12fb8 <arch_cpu_atomic_idle>
}
   19c46:	e7e0      	b.n	19c0a <entropy_nrf5_get_entropy_isr+0x62>
   19c48:	20002e0c 	.word	0x20002e0c
   19c4c:	4000d000 	.word	0x4000d000
   19c50:	e000e100 	.word	0xe000e100

00019c54 <entropy_nrf5_get_entropy>:
{
   19c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   19c58:	4f12      	ldr	r7, [pc, #72]	; (19ca4 <entropy_nrf5_get_entropy+0x50>)
   19c5a:	460d      	mov	r5, r1
   19c5c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19c5e:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   19c62:	b914      	cbnz	r4, 19c6a <entropy_nrf5_get_entropy+0x16>
}
   19c64:	4620      	mov	r0, r4
   19c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c6a:	f04f 33ff 	mov.w	r3, #4294967295
   19c6e:	f04f 32ff 	mov.w	r2, #4294967295
   19c72:	4638      	mov	r0, r7
   19c74:	f002 fe98 	bl	1c9a8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19c78:	4622      	mov	r2, r4
   19c7a:	4629      	mov	r1, r5
   19c7c:	4640      	mov	r0, r8
   19c7e:	f7ff ff4d 	bl	19b1c <rng_pool_get>
   19c82:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   19c84:	4638      	mov	r0, r7
   19c86:	f002 fe69 	bl	1c95c <z_impl_k_sem_give>
		if (bytes == 0U) {
   19c8a:	b93e      	cbnz	r6, 19c9c <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   19c8c:	f04f 32ff 	mov.w	r2, #4294967295
   19c90:	f04f 33ff 	mov.w	r3, #4294967295
   19c94:	4804      	ldr	r0, [pc, #16]	; (19ca8 <entropy_nrf5_get_entropy+0x54>)
   19c96:	f002 fe87 	bl	1c9a8 <z_impl_k_sem_take>
	while (len) {
   19c9a:	e7e6      	b.n	19c6a <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   19c9c:	1ba4      	subs	r4, r4, r6
   19c9e:	b2a4      	uxth	r4, r4
		buf += bytes;
   19ca0:	4435      	add	r5, r6
   19ca2:	e7de      	b.n	19c62 <entropy_nrf5_get_entropy+0xe>
   19ca4:	20002ddc 	.word	0x20002ddc
   19ca8:	20002df4 	.word	0x20002df4

00019cac <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19cac:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   19cae:	4c19      	ldr	r4, [pc, #100]	; (19d14 <entropy_nrf5_init+0x68>)
   19cb0:	2201      	movs	r2, #1
   19cb2:	4611      	mov	r1, r2
   19cb4:	4620      	mov	r0, r4
   19cb6:	f007 fb04 	bl	212c2 <z_impl_k_sem_init>
   19cba:	2201      	movs	r2, #1
   19cbc:	2100      	movs	r1, #0
   19cbe:	f104 0018 	add.w	r0, r4, #24
   19cc2:	f007 fafe 	bl	212c2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   19cc6:	f240 4307 	movw	r3, #1031	; 0x407
   19cca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   19cce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19cd2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   19cd4:	230c      	movs	r3, #12
   19cd6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   19cda:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   19cdc:	4b0e      	ldr	r3, [pc, #56]	; (19d18 <entropy_nrf5_init+0x6c>)
   19cde:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   19ce2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   19ce6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19cea:	f022 0201 	bic.w	r2, r2, #1
   19cee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   19cf2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19cf4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   19cf8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   19cfc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   19d00:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19d02:	6019      	str	r1, [r3, #0]
   19d04:	200d      	movs	r0, #13
   19d06:	f7f9 fa43 	bl	13190 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   19d0a:	200d      	movs	r0, #13
   19d0c:	f7f9 fa10 	bl	13130 <arch_irq_enable>

	return 0;
}
   19d10:	4628      	mov	r0, r5
   19d12:	bd38      	pop	{r3, r4, r5, pc}
   19d14:	20002ddc 	.word	0x20002ddc
   19d18:	4000d000 	.word	0x4000d000

00019d1c <isr>:
{
   19d1c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   19d1e:	f7ff fedf 	bl	19ae0 <random_byte_get>
	if (byte < 0) {
   19d22:	2800      	cmp	r0, #0
   19d24:	db20      	blt.n	19d68 <isr+0x4c>
	uint8_t last  = rngp->last;
   19d26:	4b17      	ldr	r3, [pc, #92]	; (19d84 <isr+0x68>)
   19d28:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   19d2c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   19d30:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   19d34:	1b14      	subs	r4, r2, r4
   19d36:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   19d3a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   19d3c:	d10d      	bne.n	19d5a <isr+0x3e>
	uint8_t last  = rngp->last;
   19d3e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   19d42:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   19d46:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   19d4a:	1b14      	subs	r4, r2, r4
   19d4c:	ea31 0404 	bics.w	r4, r1, r4
   19d50:	d10b      	bne.n	19d6a <isr+0x4e>
   19d52:	4b0d      	ldr	r3, [pc, #52]	; (19d88 <isr+0x6c>)
   19d54:	2201      	movs	r2, #1
   19d56:	605a      	str	r2, [r3, #4]
}
   19d58:	e00e      	b.n	19d78 <isr+0x5c>
	rngp->buffer[last] = byte;
   19d5a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   19d5c:	3201      	adds	r2, #1
   19d5e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   19d60:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   19d64:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   19d68:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   19d6a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   19d6c:	3201      	adds	r2, #1
   19d6e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   19d70:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   19d74:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   19d78:	4804      	ldr	r0, [pc, #16]	; (19d8c <isr+0x70>)
}
   19d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19d7e:	f002 bded 	b.w	1c95c <z_impl_k_sem_give>
   19d82:	bf00      	nop
   19d84:	20002ddc 	.word	0x20002ddc
   19d88:	4000d000 	.word	0x4000d000
   19d8c:	20002df4 	.word	0x20002df4

00019d90 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   19d90:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   19d92:	2301      	movs	r3, #1
   19d94:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19d96:	4a0e      	ldr	r2, [pc, #56]	; (19dd0 <compare_int_lock+0x40>)
   19d98:	f3bf 8f5b 	dmb	ish
   19d9c:	43dc      	mvns	r4, r3
   19d9e:	e852 1f00 	ldrex	r1, [r2]
   19da2:	ea01 0504 	and.w	r5, r1, r4
   19da6:	e842 5600 	strex	r6, r5, [r2]
   19daa:	2e00      	cmp	r6, #0
   19dac:	d1f7      	bne.n	19d9e <compare_int_lock+0xe>
   19dae:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19db6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19db8:	4806      	ldr	r0, [pc, #24]	; (19dd4 <compare_int_lock+0x44>)
   19dba:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   19dbe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19dc2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   19dc6:	420b      	tst	r3, r1
}
   19dc8:	bf14      	ite	ne
   19dca:	2001      	movne	r0, #1
   19dcc:	2000      	moveq	r0, #0
   19dce:	bd70      	pop	{r4, r5, r6, pc}
   19dd0:	20002e34 	.word	0x20002e34
   19dd4:	40011000 	.word	0x40011000

00019dd8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   19dd8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   19dda:	490e      	ldr	r1, [pc, #56]	; (19e14 <sys_clock_timeout_handler+0x3c>)
   19ddc:	e9d1 3400 	ldrd	r3, r4, [r1]
   19de0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   19de2:	18c3      	adds	r3, r0, r3
   19de4:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   19de8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   19dec:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   19df0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   19df4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   19df8:	d209      	bcs.n	19e0e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   19dfa:	4b07      	ldr	r3, [pc, #28]	; (19e18 <sys_clock_timeout_handler+0x40>)
   19dfc:	681b      	ldr	r3, [r3, #0]
   19dfe:	0a1a      	lsrs	r2, r3, #8
   19e00:	061b      	lsls	r3, r3, #24
   19e02:	199c      	adds	r4, r3, r6
   19e04:	4b05      	ldr	r3, [pc, #20]	; (19e1c <sys_clock_timeout_handler+0x44>)
   19e06:	f142 0500 	adc.w	r5, r2, #0
   19e0a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   19e0e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   19e10:	f003 bb66 	b.w	1d4e0 <sys_clock_announce>
   19e14:	20001ee8 	.word	0x20001ee8
   19e18:	20002e38 	.word	0x20002e38
   19e1c:	20001ef0 	.word	0x20001ef0

00019e20 <compare_int_unlock>:
	if (key) {
   19e20:	b311      	cbz	r1, 19e68 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19e22:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   19e26:	2301      	movs	r3, #1
   19e28:	4a10      	ldr	r2, [pc, #64]	; (19e6c <compare_int_unlock+0x4c>)
   19e2a:	4083      	lsls	r3, r0
   19e2c:	e852 cf00 	ldrex	ip, [r2]
   19e30:	ea4c 0c03 	orr.w	ip, ip, r3
   19e34:	e842 c100 	strex	r1, ip, [r2]
   19e38:	2900      	cmp	r1, #0
   19e3a:	d1f7      	bne.n	19e2c <compare_int_unlock+0xc>
   19e3c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   19e40:	4a0b      	ldr	r2, [pc, #44]	; (19e70 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19e46:	4083      	lsls	r3, r0
   19e48:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19e4c:	4b09      	ldr	r3, [pc, #36]	; (19e74 <compare_int_unlock+0x54>)
   19e4e:	f3bf 8f5b 	dmb	ish
   19e52:	681b      	ldr	r3, [r3, #0]
   19e54:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   19e58:	40c3      	lsrs	r3, r0
   19e5a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19e5c:	bf42      	ittt	mi
   19e5e:	4b06      	ldrmi	r3, [pc, #24]	; (19e78 <compare_int_unlock+0x58>)
   19e60:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   19e64:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   19e68:	4770      	bx	lr
   19e6a:	bf00      	nop
   19e6c:	20002e34 	.word	0x20002e34
   19e70:	40011000 	.word	0x40011000
   19e74:	20002e30 	.word	0x20002e30
   19e78:	e000e100 	.word	0xe000e100

00019e7c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   19e7c:	4b0d      	ldr	r3, [pc, #52]	; (19eb4 <z_nrf_rtc_timer_read+0x38>)
   19e7e:	6818      	ldr	r0, [r3, #0]
   19e80:	0a01      	lsrs	r1, r0, #8
   19e82:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   19e84:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   19e88:	4b0b      	ldr	r3, [pc, #44]	; (19eb8 <z_nrf_rtc_timer_read+0x3c>)
   19e8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   19e8e:	1818      	adds	r0, r3, r0
   19e90:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   19e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19e98:	d20a      	bcs.n	19eb0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   19e9a:	4b08      	ldr	r3, [pc, #32]	; (19ebc <z_nrf_rtc_timer_read+0x40>)
   19e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19ea0:	4290      	cmp	r0, r2
   19ea2:	eb71 0303 	sbcs.w	r3, r1, r3
   19ea6:	d203      	bcs.n	19eb0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   19ea8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   19eac:	f141 0100 	adc.w	r1, r1, #0
}
   19eb0:	4770      	bx	lr
   19eb2:	bf00      	nop
   19eb4:	20002e38 	.word	0x20002e38
   19eb8:	40011000 	.word	0x40011000
   19ebc:	20001ef0 	.word	0x20001ef0

00019ec0 <compare_set>:
{
   19ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ec4:	4616      	mov	r6, r2
   19ec6:	461f      	mov	r7, r3
   19ec8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   19eca:	f7ff ff61 	bl	19d90 <compare_int_lock>
   19ece:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   19ed0:	f7ff ffd4 	bl	19e7c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   19ed4:	42b0      	cmp	r0, r6
   19ed6:	eb71 0307 	sbcs.w	r3, r1, r7
   19eda:	d251      	bcs.n	19f80 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   19edc:	4b3a      	ldr	r3, [pc, #232]	; (19fc8 <compare_set+0x108>)
   19ede:	1a30      	subs	r0, r6, r0
   19ee0:	eb67 0101 	sbc.w	r1, r7, r1
   19ee4:	4298      	cmp	r0, r3
   19ee6:	f171 0100 	sbcs.w	r1, r1, #0
   19eea:	d26a      	bcs.n	19fc2 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   19eec:	4b37      	ldr	r3, [pc, #220]	; (19fcc <compare_set+0x10c>)
   19eee:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   19ef2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   19ef6:	429f      	cmp	r7, r3
   19ef8:	bf08      	it	eq
   19efa:	4296      	cmpeq	r6, r2
   19efc:	d04e      	beq.n	19f9c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   19efe:	4934      	ldr	r1, [pc, #208]	; (19fd0 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19f00:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19f04:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19f08:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19f0c:	00ad      	lsls	r5, r5, #2
   19f0e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   19f12:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f14:	b2ad      	uxth	r5, r5
   19f16:	f006 fe45 	bl	20ba4 <event_clear>
	return absolute_time & COUNTER_MAX;
   19f1a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   19f1e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   19f22:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   19f26:	4a2b      	ldr	r2, [pc, #172]	; (19fd4 <compare_set+0x114>)
   19f28:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f2a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   19f2e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   19f30:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   19f34:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   19f36:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   19f3a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   19f3e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   19f42:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   19f46:	f06f 0002 	mvn.w	r0, #2
   19f4a:	eba0 0008 	sub.w	r0, r0, r8
   19f4e:	4460      	add	r0, ip
   19f50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   19f54:	4290      	cmp	r0, r2
   19f56:	d921      	bls.n	19f9c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f58:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   19f5a:	b160      	cbz	r0, 19f76 <compare_set+0xb6>
     return p_reg->COUNTER;
   19f5c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   19f60:	eba8 000b 	sub.w	r0, r8, fp
   19f64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   19f68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19f6c:	d916      	bls.n	19f9c <compare_set+0xdc>
					event_clear(chan);
   19f6e:	4620      	mov	r0, r4
   19f70:	f006 fe18 	bl	20ba4 <event_clear>
   19f74:	4a17      	ldr	r2, [pc, #92]	; (19fd4 <compare_set+0x114>)
			cc_val = now + cc_inc;
   19f76:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   19f7a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   19f7e:	e7d9      	b.n	19f34 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   19f80:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19f82:	4a15      	ldr	r2, [pc, #84]	; (19fd8 <compare_set+0x118>)
   19f84:	f3bf 8f5b 	dmb	ish
   19f88:	40a3      	lsls	r3, r4
   19f8a:	e852 0f00 	ldrex	r0, [r2]
   19f8e:	4318      	orrs	r0, r3
   19f90:	e842 0100 	strex	r1, r0, [r2]
   19f94:	2900      	cmp	r1, #0
   19f96:	d1f8      	bne.n	19f8a <compare_set+0xca>
   19f98:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   19f9c:	490b      	ldr	r1, [pc, #44]	; (19fcc <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   19f9e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   19fa0:	0123      	lsls	r3, r4, #4
   19fa2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   19fa6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   19faa:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   19fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19fae:	6053      	str	r3, [r2, #4]
	return ret;
   19fb0:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   19fb2:	4620      	mov	r0, r4
   19fb4:	9900      	ldr	r1, [sp, #0]
   19fb6:	f7ff ff33 	bl	19e20 <compare_int_unlock>
}
   19fba:	4628      	mov	r0, r5
   19fbc:	b003      	add	sp, #12
   19fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   19fc2:	f06f 0515 	mvn.w	r5, #21
   19fc6:	e7f4      	b.n	19fb2 <compare_set+0xf2>
   19fc8:	00800001 	.word	0x00800001
   19fcc:	20001ed8 	.word	0x20001ed8
   19fd0:	40011000 	.word	0x40011000
   19fd4:	007ffffd 	.word	0x007ffffd
   19fd8:	20002e30 	.word	0x20002e30

00019fdc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   19fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   19fde:	4b19      	ldr	r3, [pc, #100]	; (1a044 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   19fe0:	4d19      	ldr	r5, [pc, #100]	; (1a048 <sys_clock_driver_init+0x6c>)
   19fe2:	2400      	movs	r4, #0
   19fe4:	f04f 30ff 	mov.w	r0, #4294967295
   19fe8:	f04f 31ff 	mov.w	r1, #4294967295
   19fec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   19ff0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   19ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19ff8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19ffc:	4b13      	ldr	r3, [pc, #76]	; (1a04c <sys_clock_driver_init+0x70>)
   19ffe:	2602      	movs	r6, #2
   1a000:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1a004:	2101      	movs	r1, #1
   1a006:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1a00a:	2011      	movs	r0, #17
   1a00c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1a010:	4622      	mov	r2, r4
   1a012:	f7f9 f8bd 	bl	13190 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1a016:	2011      	movs	r0, #17
   1a018:	f7f9 f88a 	bl	13130 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1a01c:	4a0c      	ldr	r2, [pc, #48]	; (1a050 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a01e:	2301      	movs	r3, #1
   1a020:	60ab      	str	r3, [r5, #8]
   1a022:	602b      	str	r3, [r5, #0]
   1a024:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1a026:	4b0b      	ldr	r3, [pc, #44]	; (1a054 <sys_clock_driver_init+0x78>)
   1a028:	4a0b      	ldr	r2, [pc, #44]	; (1a058 <sys_clock_driver_init+0x7c>)
   1a02a:	9300      	str	r3, [sp, #0]
   1a02c:	9401      	str	r4, [sp, #4]
   1a02e:	2300      	movs	r3, #0
   1a030:	4620      	mov	r0, r4
   1a032:	f7ff ff45 	bl	19ec0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1a036:	4630      	mov	r0, r6
   1a038:	f7ff fa12 	bl	19460 <z_nrf_clock_control_lf_on>

	return 0;
}
   1a03c:	4620      	mov	r0, r4
   1a03e:	b002      	add	sp, #8
   1a040:	bd70      	pop	{r4, r5, r6, pc}
   1a042:	bf00      	nop
   1a044:	20001ed8 	.word	0x20001ed8
   1a048:	40011000 	.word	0x40011000
   1a04c:	e000e100 	.word	0xe000e100
   1a050:	20002e34 	.word	0x20002e34
   1a054:	00019dd9 	.word	0x00019dd9
   1a058:	007fffff 	.word	0x007fffff

0001a05c <rtc_nrf_isr>:
{
   1a05c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1a060:	4c2b      	ldr	r4, [pc, #172]	; (1a110 <rtc_nrf_isr+0xb4>)
   1a062:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1a066:	0799      	lsls	r1, r3, #30
   1a068:	d50b      	bpl.n	1a082 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a06a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a06e:	b143      	cbz	r3, 1a082 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1a070:	4a28      	ldr	r2, [pc, #160]	; (1a114 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a072:	2300      	movs	r3, #0
   1a074:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1a078:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a07c:	6813      	ldr	r3, [r2, #0]
   1a07e:	3301      	adds	r3, #1
   1a080:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1a082:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1a086:	03da      	lsls	r2, r3, #15
   1a088:	d523      	bpl.n	1a0d2 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a08a:	f3bf 8f5b 	dmb	ish
   1a08e:	4b22      	ldr	r3, [pc, #136]	; (1a118 <rtc_nrf_isr+0xbc>)
   1a090:	e853 2f00 	ldrex	r2, [r3]
   1a094:	f022 0101 	bic.w	r1, r2, #1
   1a098:	e843 1000 	strex	r0, r1, [r3]
   1a09c:	2800      	cmp	r0, #0
   1a09e:	d1f7      	bne.n	1a090 <rtc_nrf_isr+0x34>
   1a0a0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1a0a4:	07d3      	lsls	r3, r2, #31
   1a0a6:	d402      	bmi.n	1a0ae <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a0a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1a0ac:	b18b      	cbz	r3, 1a0d2 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a0ae:	2500      	movs	r5, #0
   1a0b0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1a0b4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1a0b8:	f7ff fee0 	bl	19e7c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a0bc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a0c0:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1a0c2:	4b16      	ldr	r3, [pc, #88]	; (1a11c <rtc_nrf_isr+0xc0>)
   1a0c4:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1a0c8:	42b0      	cmp	r0, r6
   1a0ca:	41b9      	sbcs	r1, r7
   1a0cc:	d204      	bcs.n	1a0d8 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a0ce:	f382 8810 	msr	PRIMASK, r2
}
   1a0d2:	b003      	add	sp, #12
   1a0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1a0d8:	f04f 38ff 	mov.w	r8, #4294967295
   1a0dc:	f04f 39ff 	mov.w	r9, #4294967295
   1a0e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1a0e4:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1a0e8:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1a0ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a0ee:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a0f2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1a0f6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1a0fa:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1a0fe:	2900      	cmp	r1, #0
   1a100:	d0e7      	beq.n	1a0d2 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1a102:	9000      	str	r0, [sp, #0]
   1a104:	4632      	mov	r2, r6
   1a106:	463b      	mov	r3, r7
   1a108:	4628      	mov	r0, r5
   1a10a:	4788      	blx	r1
   1a10c:	e7e1      	b.n	1a0d2 <rtc_nrf_isr+0x76>
   1a10e:	bf00      	nop
   1a110:	40011000 	.word	0x40011000
   1a114:	20002e38 	.word	0x20002e38
   1a118:	20002e30 	.word	0x20002e30
   1a11c:	20001ed8 	.word	0x20001ed8

0001a120 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1a120:	1c43      	adds	r3, r0, #1
{
   1a122:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1a124:	d022      	beq.n	1a16c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1a126:	2801      	cmp	r0, #1
   1a128:	dd22      	ble.n	1a170 <sys_clock_set_timeout+0x50>
   1a12a:	4a12      	ldr	r2, [pc, #72]	; (1a174 <sys_clock_set_timeout+0x54>)
   1a12c:	4b12      	ldr	r3, [pc, #72]	; (1a178 <sys_clock_set_timeout+0x58>)
   1a12e:	4290      	cmp	r0, r2
   1a130:	bfd4      	ite	le
   1a132:	4604      	movle	r4, r0
   1a134:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1a136:	f7ff fea1 	bl	19e7c <z_nrf_rtc_timer_read>
   1a13a:	4b10      	ldr	r3, [pc, #64]	; (1a17c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1a13c:	490e      	ldr	r1, [pc, #56]	; (1a178 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a142:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1a144:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a148:	bf28      	it	cs
   1a14a:	2400      	movcs	r4, #0
	cyc += unannounced;
   1a14c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1a14e:	428c      	cmp	r4, r1
   1a150:	bf28      	it	cs
   1a152:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1a154:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1a156:	490a      	ldr	r1, [pc, #40]	; (1a180 <sys_clock_set_timeout+0x60>)
   1a158:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1a15a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1a15e:	9001      	str	r0, [sp, #4]
   1a160:	f143 0300 	adc.w	r3, r3, #0
   1a164:	f7ff feac 	bl	19ec0 <compare_set>
}
   1a168:	b002      	add	sp, #8
   1a16a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1a16c:	4c02      	ldr	r4, [pc, #8]	; (1a178 <sys_clock_set_timeout+0x58>)
   1a16e:	e7e2      	b.n	1a136 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1a170:	2401      	movs	r4, #1
   1a172:	e7e0      	b.n	1a136 <sys_clock_set_timeout+0x16>
   1a174:	007ffffe 	.word	0x007ffffe
   1a178:	007fffff 	.word	0x007fffff
   1a17c:	20001ee8 	.word	0x20001ee8
   1a180:	00019dd9 	.word	0x00019dd9

0001a184 <sys_clock_elapsed>:
{
   1a184:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1a186:	f7ff fe79 	bl	19e7c <z_nrf_rtc_timer_read>
   1a18a:	4b02      	ldr	r3, [pc, #8]	; (1a194 <sys_clock_elapsed+0x10>)
   1a18c:	681b      	ldr	r3, [r3, #0]
}
   1a18e:	1ac0      	subs	r0, r0, r3
   1a190:	bd08      	pop	{r3, pc}
   1a192:	bf00      	nop
   1a194:	20001ee8 	.word	0x20001ee8

0001a198 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1a198:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
   1a19a:	4e1c      	ldr	r6, [pc, #112]	; (1a20c <pinctrl_configure_pins+0x74>)
   1a19c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1a1a0:	4281      	cmp	r1, r0
   1a1a2:	d101      	bne.n	1a1a8 <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1a1a4:	2000      	movs	r0, #0
   1a1a6:	e010      	b.n	1a1ca <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1a1a8:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1a1aa:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
   1a1ae:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1a1b0:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
   1a1b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   1a1b8:	bf08      	it	eq
   1a1ba:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1a1be:	2b0b      	cmp	r3, #11
   1a1c0:	d004      	beq.n	1a1cc <pinctrl_configure_pins+0x34>
   1a1c2:	2b0c      	cmp	r3, #12
   1a1c4:	d01f      	beq.n	1a206 <pinctrl_configure_pins+0x6e>
   1a1c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1a1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1a1cc:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1a1d0:	b905      	cbnz	r5, 1a1d4 <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
   1a1d2:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1a1d4:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
   1a1d8:	f004 071f 	and.w	r7, r4, #31
   1a1dc:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
   1a1e0:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1a1e2:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
   1a1e6:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a1e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
   1a1ec:	bf0c      	ite	eq
   1a1ee:	46b4      	moveq	ip, r6
   1a1f0:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1a1f4:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1a1f8:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a1fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1a200:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1a204:	e7cc      	b.n	1a1a0 <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1a206:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1a20a:	e7e1      	b.n	1a1d0 <pinctrl_configure_pins+0x38>
   1a20c:	50000300 	.word	0x50000300

0001a210 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1a210:	4602      	mov	r2, r0
   1a212:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1a214:	4801      	ldr	r0, [pc, #4]	; (1a21c <multithreading_lock_acquire+0xc>)
   1a216:	f002 bab7 	b.w	1c788 <z_impl_k_mutex_lock>
   1a21a:	bf00      	nop
   1a21c:	2000081c 	.word	0x2000081c

0001a220 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1a220:	4801      	ldr	r0, [pc, #4]	; (1a228 <multithreading_lock_release+0x8>)
   1a222:	f002 bb2b 	b.w	1c87c <z_impl_k_mutex_unlock>
   1a226:	bf00      	nop
   1a228:	2000081c 	.word	0x2000081c

0001a22c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1a22c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1a22e:	f7f8 f92d 	bl	1248c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1a232:	4b07      	ldr	r3, [pc, #28]	; (1a250 <k_sys_fatal_error_handler+0x24>)
   1a234:	9305      	str	r3, [sp, #20]
   1a236:	2302      	movs	r3, #2
   1a238:	9304      	str	r3, [sp, #16]
   1a23a:	4806      	ldr	r0, [pc, #24]	; (1a254 <k_sys_fatal_error_handler+0x28>)
   1a23c:	2300      	movs	r3, #0
   1a23e:	aa04      	add	r2, sp, #16
   1a240:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a244:	f7f8 fa02 	bl	1264c <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1a248:	2000      	movs	r0, #0
   1a24a:	f7f9 fdcb 	bl	13de4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1a24e:	bf00      	nop
   1a250:	00023e69 	.word	0x00023e69
   1a254:	00021eac 	.word	0x00021eac

0001a258 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1a258:	b598      	push	{r3, r4, r7, lr}
   1a25a:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1a25c:	466c      	mov	r4, sp
   1a25e:	b08a      	sub	sp, #40	; 0x28
   1a260:	466a      	mov	r2, sp
   1a262:	4b0c      	ldr	r3, [pc, #48]	; (1a294 <sdc_assertion_handler+0x3c>)
   1a264:	61d1      	str	r1, [r2, #28]
   1a266:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a26a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a26e:	8413      	strh	r3, [r2, #32]
   1a270:	4b09      	ldr	r3, [pc, #36]	; (1a298 <sdc_assertion_handler+0x40>)
   1a272:	f842 3f10 	str.w	r3, [r2, #16]!
   1a276:	4809      	ldr	r0, [pc, #36]	; (1a29c <sdc_assertion_handler+0x44>)
   1a278:	2300      	movs	r3, #0
   1a27a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1a27e:	f7f8 f9e5 	bl	1264c <z_impl_z_log_msg_static_create>
   1a282:	46a5      	mov	sp, r4
	k_oops();
   1a284:	4040      	eors	r0, r0
   1a286:	f380 8811 	msr	BASEPRI, r0
   1a28a:	f04f 0003 	mov.w	r0, #3
   1a28e:	df02      	svc	2
}
   1a290:	46bd      	mov	sp, r7
   1a292:	bd98      	pop	{r3, r4, r7, pc}
   1a294:	00023e86 	.word	0x00023e86
   1a298:	01000004 	.word	0x01000004
   1a29c:	00021e8c 	.word	0x00021e8c

0001a2a0 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   1a2a0:	b538      	push	{r3, r4, r5, lr}
   1a2a2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1a2a4:	4807      	ldr	r0, [pc, #28]	; (1a2c4 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a2a6:	6883      	ldr	r3, [r0, #8]
   1a2a8:	685d      	ldr	r5, [r3, #4]
   1a2aa:	460a      	mov	r2, r1
   1a2ac:	b135      	cbz	r5, 1a2bc <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a2ae:	2300      	movs	r3, #0
   1a2b0:	4621      	mov	r1, r4
   1a2b2:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   1a2b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1a2b8:	b2c0      	uxtb	r0, r0
   1a2ba:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1a2bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a2c0:	e7f8      	b.n	1a2b4 <rand_prio_low_vector_get+0x14>
   1a2c2:	bf00      	nop
   1a2c4:	00021bf8 	.word	0x00021bf8

0001a2c8 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1a2c8:	4901      	ldr	r1, [pc, #4]	; (1a2d0 <receive_signal_raise+0x8>)
   1a2ca:	4802      	ldr	r0, [pc, #8]	; (1a2d4 <receive_signal_raise+0xc>)
   1a2cc:	f007 b8a8 	b.w	21420 <k_work_submit_to_queue>
   1a2d0:	20002e3c 	.word	0x20002e3c
   1a2d4:	200027a0 	.word	0x200027a0

0001a2d8 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1a2d8:	b410      	push	{r4}
   1a2da:	4603      	mov	r3, r0
   1a2dc:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1a2de:	4804      	ldr	r0, [pc, #16]	; (1a2f0 <rand_prio_low_vector_get_blocking+0x18>)
   1a2e0:	6881      	ldr	r1, [r0, #8]
   1a2e2:	680c      	ldr	r4, [r1, #0]
   1a2e4:	4619      	mov	r1, r3
   1a2e6:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1a2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a2ec:	4718      	bx	r3
   1a2ee:	bf00      	nop
   1a2f0:	00021bf8 	.word	0x00021bf8

0001a2f4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1a2f4:	b5b0      	push	{r4, r5, r7, lr}
   1a2f6:	b082      	sub	sp, #8
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1a2f8:	4835      	ldr	r0, [pc, #212]	; (1a3d0 <hci_driver_init+0xdc>)
{
   1a2fa:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1a2fc:	f7fb f810 	bl	15320 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1a300:	4834      	ldr	r0, [pc, #208]	; (1a3d4 <hci_driver_init+0xe0>)
   1a302:	f7e6 fb23 	bl	94c <sdc_init>
		err = sdc_support_adv();
   1a306:	f7e6 fb9b 	bl	a40 <sdc_support_adv>
		if (err) {
   1a30a:	b120      	cbz	r0, 1a316 <hci_driver_init+0x22>
			return -ENOTSUP;
   1a30c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1a310:	3708      	adds	r7, #8
   1a312:	46bd      	mov	sp, r7
   1a314:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1a316:	f7e6 fbc3 	bl	aa0 <sdc_support_peripheral>
		if (err) {
   1a31a:	2800      	cmp	r0, #0
   1a31c:	d1f6      	bne.n	1a30c <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1a31e:	f7e6 fb9f 	bl	a60 <sdc_support_dle_peripheral>
			if (err) {
   1a322:	2800      	cmp	r0, #0
   1a324:	d1f2      	bne.n	1a30c <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1a326:	f7e6 fbab 	bl	a80 <sdc_support_le_2m_phy>
		if (err) {
   1a32a:	2800      	cmp	r0, #0
   1a32c:	d1ee      	bne.n	1a30c <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1a32e:	f7e6 fbc7 	bl	ac0 <sdc_support_phy_update_peripheral>
			if (err) {
   1a332:	4604      	mov	r4, r0
   1a334:	2800      	cmp	r0, #0
   1a336:	d1e9      	bne.n	1a30c <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1a338:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a33a:	1d3a      	adds	r2, r7, #4
   1a33c:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1a33e:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a340:	f7e6 fa82 	bl	848 <sdc_cfg_set>
	if (required_memory < 0) {
   1a344:	2800      	cmp	r0, #0
   1a346:	dbe3      	blt.n	1a310 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1a348:	4b23      	ldr	r3, [pc, #140]	; (1a3d8 <hci_driver_init+0xe4>)
   1a34a:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a34c:	1d3a      	adds	r2, r7, #4
   1a34e:	2103      	movs	r1, #3
   1a350:	4620      	mov	r0, r4
   1a352:	f7e6 fa79 	bl	848 <sdc_cfg_set>
	if (required_memory < 0) {
   1a356:	2800      	cmp	r0, #0
   1a358:	dbda      	blt.n	1a310 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1a35a:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a35e:	1d3a      	adds	r2, r7, #4
   1a360:	2104      	movs	r1, #4
   1a362:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1a364:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a366:	f7e6 fa6f 	bl	848 <sdc_cfg_set>
	if (required_memory < 0) {
   1a36a:	2800      	cmp	r0, #0
   1a36c:	dbd0      	blt.n	1a310 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a36e:	1d3a      	adds	r2, r7, #4
   1a370:	2105      	movs	r1, #5
   1a372:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1a374:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a376:	f7e6 fa67 	bl	848 <sdc_cfg_set>
	if (required_memory < 0) {
   1a37a:	2800      	cmp	r0, #0
   1a37c:	dbc8      	blt.n	1a310 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1a37e:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a380:	1d3a      	adds	r2, r7, #4
   1a382:	2107      	movs	r1, #7
   1a384:	4620      	mov	r0, r4
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1a386:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a388:	f7e6 fa5e 	bl	848 <sdc_cfg_set>
	if (required_memory < 0) {
   1a38c:	2800      	cmp	r0, #0
   1a38e:	dbbf      	blt.n	1a310 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1a390:	f240 73dd 	movw	r3, #2013	; 0x7dd
   1a394:	4298      	cmp	r0, r3
   1a396:	dd19      	ble.n	1a3cc <hci_driver_init+0xd8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1a398:	466c      	mov	r4, sp
   1a39a:	b088      	sub	sp, #32
   1a39c:	466a      	mov	r2, sp
   1a39e:	490f      	ldr	r1, [pc, #60]	; (1a3dc <hci_driver_init+0xe8>)
   1a3a0:	61d0      	str	r0, [r2, #28]
   1a3a2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1a3a6:	2304      	movs	r3, #4
   1a3a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a3ac:	480c      	ldr	r0, [pc, #48]	; (1a3e0 <hci_driver_init+0xec>)
   1a3ae:	2300      	movs	r3, #0
   1a3b0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a3b4:	f7f8 f94a 	bl	1264c <z_impl_z_log_msg_static_create>
   1a3b8:	46a5      	mov	sp, r4
		k_panic();
   1a3ba:	4040      	eors	r0, r0
   1a3bc:	f380 8811 	msr	BASEPRI, r0
   1a3c0:	f04f 0004 	mov.w	r0, #4
   1a3c4:	df02      	svc	2
		return -ENOMEM;
   1a3c6:	f06f 000b 	mvn.w	r0, #11
   1a3ca:	e7a1      	b.n	1a310 <hci_driver_init+0x1c>
	return 0;
   1a3cc:	2000      	movs	r0, #0
	if (err) {
   1a3ce:	e79f      	b.n	1a310 <hci_driver_init+0x1c>
   1a3d0:	00022488 	.word	0x00022488
   1a3d4:	0001a259 	.word	0x0001a259
   1a3d8:	02031b1b 	.word	0x02031b1b
   1a3dc:	00023eab 	.word	0x00023eab
   1a3e0:	00021e8c 	.word	0x00021e8c

0001a3e4 <hci_driver_open>:
{
   1a3e4:	b590      	push	{r4, r7, lr}
   1a3e6:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1a3e8:	492f      	ldr	r1, [pc, #188]	; (1a4a8 <hci_driver_open+0xc4>)
   1a3ea:	4830      	ldr	r0, [pc, #192]	; (1a4ac <hci_driver_open+0xc8>)
{
   1a3ec:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1a3ee:	f006 ffea 	bl	213c6 <k_work_init>
		hci_ecdh_init();
   1a3f2:	f000 fe2d 	bl	1b050 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1a3f6:	1d38      	adds	r0, r7, #4
   1a3f8:	f7e6 fa18 	bl	82c <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1a3fc:	466c      	mov	r4, sp
   1a3fe:	b088      	sub	sp, #32
   1a400:	466a      	mov	r2, sp
   1a402:	4b2b      	ldr	r3, [pc, #172]	; (1a4b0 <hci_driver_open+0xcc>)
   1a404:	6153      	str	r3, [r2, #20]
   1a406:	4b2b      	ldr	r3, [pc, #172]	; (1a4b4 <hci_driver_open+0xd0>)
   1a408:	6193      	str	r3, [r2, #24]
   1a40a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a40e:	8393      	strh	r3, [r2, #28]
   1a410:	4b29      	ldr	r3, [pc, #164]	; (1a4b8 <hci_driver_open+0xd4>)
   1a412:	f842 3f10 	str.w	r3, [r2, #16]!
   1a416:	4929      	ldr	r1, [pc, #164]	; (1a4bc <hci_driver_open+0xd8>)
   1a418:	4829      	ldr	r0, [pc, #164]	; (1a4c0 <hci_driver_open+0xdc>)
   1a41a:	1d3b      	adds	r3, r7, #4
   1a41c:	f7f8 f916 	bl	1264c <z_impl_z_log_msg_static_create>
   1a420:	46a5      	mov	sp, r4
   1a422:	4828      	ldr	r0, [pc, #160]	; (1a4c4 <hci_driver_open+0xe0>)
   1a424:	f006 fddd 	bl	20fe2 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1a428:	4603      	mov	r3, r0
   1a42a:	b980      	cbnz	r0, 1a44e <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1a42c:	4a26      	ldr	r2, [pc, #152]	; (1a4c8 <hci_driver_open+0xe4>)
   1a42e:	62fa      	str	r2, [r7, #44]	; 0x2c
   1a430:	2202      	movs	r2, #2
   1a432:	62ba      	str	r2, [r7, #40]	; 0x28
   1a434:	4822      	ldr	r0, [pc, #136]	; (1a4c0 <hci_driver_open+0xdc>)
   1a436:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a43a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1a43e:	f06f 0412 	mvn.w	r4, #18
   1a442:	f7f8 f903 	bl	1264c <z_impl_z_log_msg_static_create>
}
   1a446:	4620      	mov	r0, r4
   1a448:	3734      	adds	r7, #52	; 0x34
   1a44a:	46bd      	mov	sp, r7
   1a44c:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1a44e:	4a1f      	ldr	r2, [pc, #124]	; (1a4cc <hci_driver_open+0xe8>)
   1a450:	ca07      	ldmia	r2, {r0, r1, r2}
   1a452:	f107 0318 	add.w	r3, r7, #24
   1a456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1a45a:	4618      	mov	r0, r3
   1a45c:	f7e6 fb86 	bl	b6c <sdc_rand_source_register>
	if (err) {
   1a460:	b188      	cbz	r0, 1a486 <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1a462:	b088      	sub	sp, #32
   1a464:	466a      	mov	r2, sp
   1a466:	4b1a      	ldr	r3, [pc, #104]	; (1a4d0 <hci_driver_open+0xec>)
   1a468:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a46c:	2303      	movs	r3, #3
   1a46e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a472:	4813      	ldr	r0, [pc, #76]	; (1a4c0 <hci_driver_open+0xdc>)
   1a474:	2300      	movs	r3, #0
   1a476:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a47a:	f7f8 f8e7 	bl	1264c <z_impl_z_log_msg_static_create>
   1a47e:	46a5      	mov	sp, r4
		return -EINVAL;
   1a480:	f06f 0415 	mvn.w	r4, #21
   1a484:	e7df      	b.n	1a446 <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1a486:	f04f 30ff 	mov.w	r0, #4294967295
   1a48a:	f04f 31ff 	mov.w	r1, #4294967295
   1a48e:	f7ff febf 	bl	1a210 <multithreading_lock_acquire>
	if (err) {
   1a492:	4604      	mov	r4, r0
   1a494:	2800      	cmp	r0, #0
   1a496:	d1d6      	bne.n	1a446 <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1a498:	490e      	ldr	r1, [pc, #56]	; (1a4d4 <hci_driver_open+0xf0>)
   1a49a:	480f      	ldr	r0, [pc, #60]	; (1a4d8 <hci_driver_open+0xf4>)
   1a49c:	f7e6 fa2c 	bl	8f8 <sdc_enable>
	if (err) {
   1a4a0:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1a4a2:	f7ff febd 	bl	1a220 <multithreading_lock_release>
	return 0;
   1a4a6:	e7ce      	b.n	1a446 <hci_driver_open+0x62>
   1a4a8:	00020c7f 	.word	0x00020c7f
   1a4ac:	20002e3c 	.word	0x20002e3c
   1a4b0:	00023dcc 	.word	0x00023dcc
   1a4b4:	00023ecd 	.word	0x00023ecd
   1a4b8:	01000003 	.word	0x01000003
   1a4bc:	00a01cc0 	.word	0x00a01cc0
   1a4c0:	00021e8c 	.word	0x00021e8c
   1a4c4:	00021bf8 	.word	0x00021bf8
   1a4c8:	00023ef4 	.word	0x00023ef4
   1a4cc:	00021f60 	.word	0x00021f60
   1a4d0:	00023f14 	.word	0x00023f14
   1a4d4:	20001ef8 	.word	0x20001ef8
   1a4d8:	0001a2c9 	.word	0x0001a2c9

0001a4dc <hci_driver_receive_process>:
{
   1a4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4de:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a4e0:	f04f 30ff 	mov.w	r0, #4294967295
{
   1a4e4:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a4e6:	f04f 31ff 	mov.w	r1, #4294967295
   1a4ea:	f7ff fe91 	bl	1a210 <multithreading_lock_acquire>
	if (!errcode) {
   1a4ee:	bb40      	cbnz	r0, 1a542 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1a4f0:	4d33      	ldr	r5, [pc, #204]	; (1a5c0 <hci_driver_receive_process+0xe4>)
   1a4f2:	1df9      	adds	r1, r7, #7
   1a4f4:	4628      	mov	r0, r5
   1a4f6:	f000 fc79 	bl	1adec <hci_internal_msg_get>
   1a4fa:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a4fc:	f7ff fe90 	bl	1a220 <multithreading_lock_release>
	if (errcode) {
   1a500:	b9fc      	cbnz	r4, 1a542 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1a502:	79fe      	ldrb	r6, [r7, #7]
   1a504:	2e04      	cmp	r6, #4
   1a506:	d133      	bne.n	1a570 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1a508:	7828      	ldrb	r0, [r5, #0]
   1a50a:	283e      	cmp	r0, #62	; 0x3e
   1a50c:	d01c      	beq.n	1a548 <hci_driver_receive_process+0x6c>
   1a50e:	28ff      	cmp	r0, #255	; 0xff
   1a510:	d021      	beq.n	1a556 <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1a512:	f04f 32ff 	mov.w	r2, #4294967295
   1a516:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a51a:	4621      	mov	r1, r4
   1a51c:	f7f9 fdec 	bl	140f8 <bt_buf_get_evt>
	if (!evt_buf) {
   1a520:	4606      	mov	r6, r0
   1a522:	b9d8      	cbnz	r0, 1a55c <hci_driver_receive_process+0x80>
		if (discardable) {
   1a524:	b95c      	cbnz	r4, 1a53e <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1a526:	4b27      	ldr	r3, [pc, #156]	; (1a5c4 <hci_driver_receive_process+0xe8>)
   1a528:	61fb      	str	r3, [r7, #28]
   1a52a:	2302      	movs	r3, #2
   1a52c:	61bb      	str	r3, [r7, #24]
   1a52e:	4826      	ldr	r0, [pc, #152]	; (1a5c8 <hci_driver_receive_process+0xec>)
   1a530:	4623      	mov	r3, r4
   1a532:	f107 0218 	add.w	r2, r7, #24
   1a536:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a53a:	f7f8 f887 	bl	1264c <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1a53e:	f7ff fec3 	bl	1a2c8 <receive_signal_raise>
}
   1a542:	3724      	adds	r7, #36	; 0x24
   1a544:	46bd      	mov	sp, r7
   1a546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1a548:	78ab      	ldrb	r3, [r5, #2]
   1a54a:	2b02      	cmp	r3, #2
		switch (subevent) {
   1a54c:	d1e1      	bne.n	1a512 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a54e:	2200      	movs	r2, #0
   1a550:	2300      	movs	r3, #0
			return true;
   1a552:	2401      	movs	r4, #1
   1a554:	e7e1      	b.n	1a51a <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1a556:	78ab      	ldrb	r3, [r5, #2]
   1a558:	2b80      	cmp	r3, #128	; 0x80
   1a55a:	e7f7      	b.n	1a54c <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1a55c:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a55e:	4918      	ldr	r1, [pc, #96]	; (1a5c0 <hci_driver_receive_process+0xe4>)
   1a560:	3202      	adds	r2, #2
   1a562:	300c      	adds	r0, #12
   1a564:	f006 f9ea 	bl	2093c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1a568:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1a56a:	f7fa fea5 	bl	152b8 <bt_recv>
   1a56e:	e7e6      	b.n	1a53e <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1a570:	2e02      	cmp	r6, #2
   1a572:	d114      	bne.n	1a59e <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1a574:	f04f 32ff 	mov.w	r2, #4294967295
   1a578:	f04f 33ff 	mov.w	r3, #4294967295
   1a57c:	2003      	movs	r0, #3
   1a57e:	f7f9 fd91 	bl	140a4 <bt_buf_get_rx>
	if (!data_buf) {
   1a582:	4604      	mov	r4, r0
   1a584:	b918      	cbnz	r0, 1a58e <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1a586:	4b11      	ldr	r3, [pc, #68]	; (1a5cc <hci_driver_receive_process+0xf0>)
   1a588:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1a58c:	e7cf      	b.n	1a52e <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1a58e:	886a      	ldrh	r2, [r5, #2]
   1a590:	4629      	mov	r1, r5
   1a592:	3204      	adds	r2, #4
   1a594:	300c      	adds	r0, #12
   1a596:	f006 f9d1 	bl	2093c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1a59a:	4620      	mov	r0, r4
   1a59c:	e7e5      	b.n	1a56a <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1a59e:	466d      	mov	r5, sp
   1a5a0:	b088      	sub	sp, #32
   1a5a2:	466a      	mov	r2, sp
   1a5a4:	4b0a      	ldr	r3, [pc, #40]	; (1a5d0 <hci_driver_receive_process+0xf4>)
   1a5a6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a5aa:	2303      	movs	r3, #3
   1a5ac:	f842 3f10 	str.w	r3, [r2, #16]!
   1a5b0:	4805      	ldr	r0, [pc, #20]	; (1a5c8 <hci_driver_receive_process+0xec>)
   1a5b2:	4623      	mov	r3, r4
   1a5b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a5b8:	f7f8 f848 	bl	1264c <z_impl_z_log_msg_static_create>
   1a5bc:	46ad      	mov	sp, r5
   1a5be:	e7be      	b.n	1a53e <hci_driver_receive_process+0x62>
   1a5c0:	2000306a 	.word	0x2000306a
   1a5c4:	00023f38 	.word	0x00023f38
   1a5c8:	00021e8c 	.word	0x00021e8c
   1a5cc:	00023f52 	.word	0x00023f52
   1a5d0:	00023f6b 	.word	0x00023f6b

0001a5d4 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1a5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1a5d6:	4cc7      	ldr	r4, [pc, #796]	; (1a8f4 <hci_internal_cmd_put+0x320>)
   1a5d8:	7823      	ldrb	r3, [r4, #0]
{
   1a5da:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1a5dc:	2b00      	cmp	r3, #0
   1a5de:	f040 8400 	bne.w	1ade2 <hci_internal_cmd_put+0x80e>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1a5e2:	2304      	movs	r3, #4
   1a5e4:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1a5e8:	4bc3      	ldr	r3, [pc, #780]	; (1a8f8 <hci_internal_cmd_put+0x324>)
   1a5ea:	8806      	ldrh	r6, [r0, #0]
   1a5ec:	681f      	ldr	r7, [r3, #0]
   1a5ee:	b1b7      	cbz	r7, 1a61e <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   1a5f0:	f10d 0306 	add.w	r3, sp, #6
   1a5f4:	f10d 0207 	add.w	r2, sp, #7
   1a5f8:	1c61      	adds	r1, r4, #1
   1a5fa:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1a5fc:	2801      	cmp	r0, #1
   1a5fe:	d00e      	beq.n	1a61e <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   1a600:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a604:	2b00      	cmp	r3, #0
   1a606:	f040 82c4 	bne.w	1ab92 <hci_internal_cmd_put+0x5be>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1a60a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1a60e:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a610:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1a612:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a614:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1a616:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1a618:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1a61a:	71a0      	strb	r0, [r4, #6]
}
   1a61c:	e2c2      	b.n	1aba4 <hci_internal_cmd_put+0x5d0>
		switch (BT_OGF(opcode)) {
   1a61e:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1a622:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1a626:	d20f      	bcs.n	1a648 <hci_internal_cmd_put+0x74>
   1a628:	2b00      	cmp	r3, #0
   1a62a:	d057      	beq.n	1a6dc <hci_internal_cmd_put+0x108>
   1a62c:	3b01      	subs	r3, #1
   1a62e:	2b07      	cmp	r3, #7
   1a630:	f200 83be 	bhi.w	1adb0 <hci_internal_cmd_put+0x7dc>
   1a634:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a638:	03bc000d 	.word	0x03bc000d
   1a63c:	0082003e 	.word	0x0082003e
   1a640:	03bc03bc 	.word	0x03bc03bc
   1a644:	013903bc 	.word	0x013903bc
   1a648:	2b3f      	cmp	r3, #63	; 0x3f
   1a64a:	f000 82ef 	beq.w	1ac2c <hci_internal_cmd_put+0x658>
	switch (opcode)	{
   1a64e:	2001      	movs	r0, #1
   1a650:	e346      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
	return ((uint16_t)src[1] << 8) | src[0];
   1a652:	4628      	mov	r0, r5
	switch (opcode)	{
   1a654:	f240 4206 	movw	r2, #1030	; 0x406
   1a658:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1a65c:	4293      	cmp	r3, r2
   1a65e:	d00f      	beq.n	1a680 <hci_internal_cmd_put+0xac>
   1a660:	f240 421d 	movw	r2, #1053	; 0x41d
   1a664:	4293      	cmp	r3, r2
   1a666:	d022      	beq.n	1a6ae <hci_internal_cmd_put+0xda>
   1a668:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1a66a:	f240 4306 	movw	r3, #1030	; 0x406
   1a66e:	429e      	cmp	r6, r3
   1a670:	f000 828f 	beq.w	1ab92 <hci_internal_cmd_put+0x5be>
   1a674:	f240 431d 	movw	r3, #1053	; 0x41d
   1a678:	429e      	cmp	r6, r3
   1a67a:	f000 828a 	beq.w	1ab92 <hci_internal_cmd_put+0x5be>
   1a67e:	e042      	b.n	1a706 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1a680:	f7f2 f952 	bl	c928 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1a684:	f242 0332 	movw	r3, #8242	; 0x2032
   1a688:	429e      	cmp	r6, r3
   1a68a:	f240 838b 	bls.w	1ada4 <hci_internal_cmd_put+0x7d0>
   1a68e:	f242 0385 	movw	r3, #8325	; 0x2085
   1a692:	429e      	cmp	r6, r3
   1a694:	d837      	bhi.n	1a706 <hci_internal_cmd_put+0x132>
   1a696:	f242 036c 	movw	r3, #8300	; 0x206c
   1a69a:	429e      	cmp	r6, r3
   1a69c:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1a6a0:	f200 838a 	bhi.w	1adb8 <hci_internal_cmd_put+0x7e4>
   1a6a4:	3b03      	subs	r3, #3
   1a6a6:	b29b      	uxth	r3, r3
   1a6a8:	2b01      	cmp	r3, #1
   1a6aa:	d82c      	bhi.n	1a706 <hci_internal_cmd_put+0x132>
   1a6ac:	e271      	b.n	1ab92 <hci_internal_cmd_put+0x5be>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1a6ae:	f7f2 f93d 	bl	c92c <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1a6b2:	e7e7      	b.n	1a684 <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a6b4:	4628      	mov	r0, r5
	switch (opcode)	{
   1a6b6:	f640 4263 	movw	r2, #3171	; 0xc63
   1a6ba:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1a6be:	4293      	cmp	r3, r2
   1a6c0:	d030      	beq.n	1a724 <hci_internal_cmd_put+0x150>
   1a6c2:	dc0d      	bgt.n	1a6e0 <hci_internal_cmd_put+0x10c>
   1a6c4:	f640 4203 	movw	r2, #3075	; 0xc03
   1a6c8:	4293      	cmp	r3, r2
   1a6ca:	d01f      	beq.n	1a70c <hci_internal_cmd_put+0x138>
   1a6cc:	f640 422d 	movw	r2, #3117	; 0xc2d
   1a6d0:	4293      	cmp	r3, r2
   1a6d2:	d01e      	beq.n	1a712 <hci_internal_cmd_put+0x13e>
   1a6d4:	f640 4201 	movw	r2, #3073	; 0xc01
   1a6d8:	4293      	cmp	r3, r2
   1a6da:	d012      	beq.n	1a702 <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   1a6dc:	2001      	movs	r0, #1
   1a6de:	e258      	b.n	1ab92 <hci_internal_cmd_put+0x5be>
	switch (opcode)	{
   1a6e0:	f640 427b 	movw	r2, #3195	; 0xc7b
   1a6e4:	4293      	cmp	r3, r2
   1a6e6:	d020      	beq.n	1a72a <hci_internal_cmd_put+0x156>
   1a6e8:	f640 427c 	movw	r2, #3196	; 0xc7c
   1a6ec:	4293      	cmp	r3, r2
   1a6ee:	d1f5      	bne.n	1a6dc <hci_internal_cmd_put+0x108>
		*param_length_out +=
   1a6f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1a6f4:	4981      	ldr	r1, [pc, #516]	; (1a8fc <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1a6f6:	3302      	adds	r3, #2
   1a6f8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1a6fc:	f7f2 f806 	bl	c70c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1a700:	e001      	b.n	1a706 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1a702:	f7f1 fff9 	bl	c6f8 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1a706:	2801      	cmp	r0, #1
   1a708:	d0e8      	beq.n	1a6dc <hci_internal_cmd_put+0x108>
   1a70a:	e77e      	b.n	1a60a <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   1a70c:	f7e6 fb34 	bl	d78 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1a710:	e7f9      	b.n	1a706 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1a712:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1a716:	4979      	ldr	r1, [pc, #484]	; (1a8fc <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1a718:	3303      	adds	r3, #3
   1a71a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1a71e:	f7f1 ffe9 	bl	c6f4 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1a722:	e7f0      	b.n	1a706 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1a724:	f7f1 ffed 	bl	c702 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1a728:	e7ed      	b.n	1a706 <hci_internal_cmd_put+0x132>
		*param_length_out +=
   1a72a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1a72e:	4973      	ldr	r1, [pc, #460]	; (1a8fc <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1a730:	3304      	adds	r3, #4
   1a732:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1a736:	f7f1 ffdb 	bl	c6f0 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1a73a:	e7e4      	b.n	1a706 <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   1a73c:	882b      	ldrh	r3, [r5, #0]
   1a73e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1a742:	3b01      	subs	r3, #1
   1a744:	2b08      	cmp	r3, #8
   1a746:	d8c9      	bhi.n	1a6dc <hci_internal_cmd_put+0x108>
   1a748:	a201      	add	r2, pc, #4	; (adr r2, 1a750 <hci_internal_cmd_put+0x17c>)
   1a74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a74e:	bf00      	nop
   1a750:	0001a775 	.word	0x0001a775
   1a754:	0001a787 	.word	0x0001a787
   1a758:	0001a877 	.word	0x0001a877
   1a75c:	0001a6dd 	.word	0x0001a6dd
   1a760:	0001a6dd 	.word	0x0001a6dd
   1a764:	0001a6dd 	.word	0x0001a6dd
   1a768:	0001a6dd 	.word	0x0001a6dd
   1a76c:	0001a6dd 	.word	0x0001a6dd
   1a770:	0001a899 	.word	0x0001a899
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1a774:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1a778:	4860      	ldr	r0, [pc, #384]	; (1a8fc <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1a77a:	3308      	adds	r3, #8
   1a77c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1a780:	f7f2 f893 	bl	c8aa <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1a784:	e7bf      	b.n	1a706 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a786:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a78a:	485c      	ldr	r0, [pc, #368]	; (1a8fc <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a78c:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1a78e:	2230      	movs	r2, #48	; 0x30
   1a790:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a792:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a796:	f004 fd0b 	bl	1f1b0 <memset>
	cmds->hci_disconnect = 1;
   1a79a:	79e3      	ldrb	r3, [r4, #7]
   1a79c:	f043 0320 	orr.w	r3, r3, #32
   1a7a0:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1a7a2:	7a63      	ldrb	r3, [r4, #9]
   1a7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a7a8:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1a7aa:	7b23      	ldrb	r3, [r4, #12]
   1a7ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a7b0:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1a7b2:	7c63      	ldrb	r3, [r4, #17]
   1a7b4:	f043 0304 	orr.w	r3, r3, #4
   1a7b8:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1a7ba:	7d63      	ldrb	r3, [r4, #21]
   1a7bc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1a7c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1a7c4:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1a7c6:	7da3      	ldrb	r3, [r4, #22]
   1a7c8:	f043 0302 	orr.w	r3, r3, #2
   1a7cc:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1a7ce:	7f63      	ldrb	r3, [r4, #29]
   1a7d0:	f043 0304 	orr.w	r3, r3, #4
   1a7d4:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1a7d6:	f894 3020 	ldrb.w	r3, [r4, #32]
   1a7da:	f063 0308 	orn	r3, r3, #8
   1a7de:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1a7e2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1a7e6:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1a7ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1a7ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1a7f2:	f063 030c 	orn	r3, r3, #12
   1a7f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1a7fa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1a7fe:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1a802:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1a806:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1a80a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1a80e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1a812:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1a816:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1a81a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1a81e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a822:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1a826:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1a82a:	f023 0307 	bic.w	r3, r3, #7
   1a82e:	f043 0307 	orr.w	r3, r3, #7
   1a832:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1a836:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1a83a:	f063 0307 	orn	r3, r3, #7
   1a83e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1a842:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1a846:	f043 0301 	orr.w	r3, r3, #1
   1a84a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1a84e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1a852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a856:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1a85a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a85e:	f043 0304 	orr.w	r3, r3, #4
   1a862:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1a866:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1a86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a86e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return 0;
   1a872:	2000      	movs	r0, #0
   1a874:	e6c9      	b.n	1a60a <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a876:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a87a:	4820      	ldr	r0, [pc, #128]	; (1a8fc <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a87c:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1a87e:	2208      	movs	r2, #8
   1a880:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a882:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a886:	f004 fc93 	bl	1f1b0 <memset>
	features->bdedr_not_supported = 1;
   1a88a:	7ae3      	ldrb	r3, [r4, #11]
   1a88c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1a890:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1a894:	72e3      	strb	r3, [r4, #11]
	if (generate_command_status_event ||
   1a896:	e7ec      	b.n	1a872 <hci_internal_cmd_put+0x29e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1a898:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1a89c:	4817      	ldr	r0, [pc, #92]	; (1a8fc <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1a89e:	3306      	adds	r3, #6
   1a8a0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1a8a4:	f7f1 ffff 	bl	c8a6 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1a8a8:	e72d      	b.n	1a706 <hci_internal_cmd_put+0x132>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a8aa:	4628      	mov	r0, r5
	switch (opcode)	{
   1a8ac:	f242 014b 	movw	r1, #8267	; 0x204b
   1a8b0:	f830 3b03 	ldrh.w	r3, [r0], #3
   1a8b4:	b21a      	sxth	r2, r3
   1a8b6:	428a      	cmp	r2, r1
   1a8b8:	f300 80c2 	bgt.w	1aa40 <hci_internal_cmd_put+0x46c>
   1a8bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a8c0:	f242 0232 	movw	r2, #8242	; 0x2032
   1a8c4:	dc1e      	bgt.n	1a904 <hci_internal_cmd_put+0x330>
	switch (hci_opcode) {
   1a8c6:	4296      	cmp	r6, r2
   1a8c8:	f43f af08 	beq.w	1a6dc <hci_internal_cmd_put+0x108>
   1a8cc:	f200 8283 	bhi.w	1add6 <hci_internal_cmd_put+0x802>
   1a8d0:	f242 0326 	movw	r3, #8230	; 0x2026
   1a8d4:	429e      	cmp	r6, r3
   1a8d6:	f63f af01 	bhi.w	1a6dc <hci_internal_cmd_put+0x108>
   1a8da:	2001      	movs	r0, #1
   1a8dc:	f242 030c 	movw	r3, #8204	; 0x200c
   1a8e0:	429e      	cmp	r6, r3
   1a8e2:	f67f aec2 	bls.w	1a66a <hci_internal_cmd_put+0x96>
   1a8e6:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1a8ea:	3b0d      	subs	r3, #13
   1a8ec:	4a04      	ldr	r2, [pc, #16]	; (1a900 <hci_internal_cmd_put+0x32c>)
   1a8ee:	b29b      	uxth	r3, r3
   1a8f0:	e265      	b.n	1adbe <hci_internal_cmd_put+0x7ea>
   1a8f2:	bf00      	nop
   1a8f4:	200030b0 	.word	0x200030b0
   1a8f8:	20002e4c 	.word	0x20002e4c
   1a8fc:	200030b7 	.word	0x200030b7
   1a900:	03001241 	.word	0x03001241
	switch (opcode)	{
   1a904:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1a908:	3b01      	subs	r3, #1
   1a90a:	2b4a      	cmp	r3, #74	; 0x4a
   1a90c:	d8db      	bhi.n	1a8c6 <hci_internal_cmd_put+0x2f2>
   1a90e:	a101      	add	r1, pc, #4	; (adr r1, 1a914 <hci_internal_cmd_put+0x340>)
   1a910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1a914:	0001aa5b 	.word	0x0001aa5b
   1a918:	0001aa6b 	.word	0x0001aa6b
   1a91c:	0001aa7d 	.word	0x0001aa7d
   1a920:	0001a8c7 	.word	0x0001a8c7
   1a924:	0001aac3 	.word	0x0001aac3
   1a928:	0001aac9 	.word	0x0001aac9
   1a92c:	0001aacf 	.word	0x0001aacf
   1a930:	0001aae1 	.word	0x0001aae1
   1a934:	0001aae7 	.word	0x0001aae7
   1a938:	0001aaed 	.word	0x0001aaed
   1a93c:	0001a8c7 	.word	0x0001a8c7
   1a940:	0001a8c7 	.word	0x0001a8c7
   1a944:	0001a8c7 	.word	0x0001a8c7
   1a948:	0001a8c7 	.word	0x0001a8c7
   1a94c:	0001aaf9 	.word	0x0001aaf9
   1a950:	0001ab0b 	.word	0x0001ab0b
   1a954:	0001ab11 	.word	0x0001ab11
   1a958:	0001ab17 	.word	0x0001ab17
   1a95c:	0001a8c7 	.word	0x0001a8c7
   1a960:	0001a8c7 	.word	0x0001a8c7
   1a964:	0001ab1d 	.word	0x0001ab1d
   1a968:	0001ab2f 	.word	0x0001ab2f
   1a96c:	0001ab35 	.word	0x0001ab35
   1a970:	0001ab47 	.word	0x0001ab47
   1a974:	0001a8c7 	.word	0x0001a8c7
   1a978:	0001ab59 	.word	0x0001ab59
   1a97c:	0001ab6b 	.word	0x0001ab6b
   1a980:	0001ab7d 	.word	0x0001ab7d
   1a984:	0001a8c7 	.word	0x0001a8c7
   1a988:	0001a8c7 	.word	0x0001a8c7
   1a98c:	0001a8c7 	.word	0x0001a8c7
   1a990:	0001a8c7 	.word	0x0001a8c7
   1a994:	0001a8c7 	.word	0x0001a8c7
   1a998:	0001abaf 	.word	0x0001abaf
   1a99c:	0001abc1 	.word	0x0001abc1
   1a9a0:	0001abd3 	.word	0x0001abd3
   1a9a4:	0001abd9 	.word	0x0001abd9
   1a9a8:	0001abdf 	.word	0x0001abdf
   1a9ac:	0001a8c7 	.word	0x0001a8c7
   1a9b0:	0001a8c7 	.word	0x0001a8c7
   1a9b4:	0001a8c7 	.word	0x0001a8c7
   1a9b8:	0001a8c7 	.word	0x0001a8c7
   1a9bc:	0001a8c7 	.word	0x0001a8c7
   1a9c0:	0001a8c7 	.word	0x0001a8c7
   1a9c4:	0001a8c7 	.word	0x0001a8c7
   1a9c8:	0001a8c7 	.word	0x0001a8c7
   1a9cc:	0001abeb 	.word	0x0001abeb
   1a9d0:	0001abfd 	.word	0x0001abfd
   1a9d4:	0001ac0f 	.word	0x0001ac0f
   1a9d8:	0001ac15 	.word	0x0001ac15
   1a9dc:	0001a8c7 	.word	0x0001a8c7
   1a9e0:	0001a8c7 	.word	0x0001a8c7
   1a9e4:	0001a8c7 	.word	0x0001a8c7
   1a9e8:	0001a8c7 	.word	0x0001a8c7
   1a9ec:	0001a8c7 	.word	0x0001a8c7
   1a9f0:	0001a8c7 	.word	0x0001a8c7
   1a9f4:	0001a8c7 	.word	0x0001a8c7
   1a9f8:	0001a8c7 	.word	0x0001a8c7
   1a9fc:	0001a8c7 	.word	0x0001a8c7
   1aa00:	0001a8c7 	.word	0x0001a8c7
   1aa04:	0001a8c7 	.word	0x0001a8c7
   1aa08:	0001a8c7 	.word	0x0001a8c7
   1aa0c:	0001a8c7 	.word	0x0001a8c7
   1aa10:	0001a8c7 	.word	0x0001a8c7
   1aa14:	0001a8c7 	.word	0x0001a8c7
   1aa18:	0001a8c7 	.word	0x0001a8c7
   1aa1c:	0001a8c7 	.word	0x0001a8c7
   1aa20:	0001a8c7 	.word	0x0001a8c7
   1aa24:	0001a8c7 	.word	0x0001a8c7
   1aa28:	0001a8c7 	.word	0x0001a8c7
   1aa2c:	0001a8c7 	.word	0x0001a8c7
   1aa30:	0001a8c7 	.word	0x0001a8c7
   1aa34:	0001a8c7 	.word	0x0001a8c7
   1aa38:	0001a8c7 	.word	0x0001a8c7
   1aa3c:	0001ac1b 	.word	0x0001ac1b
   1aa40:	f242 035e 	movw	r3, #8286	; 0x205e
   1aa44:	429a      	cmp	r2, r3
   1aa46:	f000 80cd 	beq.w	1abe4 <hci_internal_cmd_put+0x610>
   1aa4a:	f242 037c 	movw	r3, #8316	; 0x207c
   1aa4e:	429a      	cmp	r2, r3
   1aa50:	d04f      	beq.n	1aaf2 <hci_internal_cmd_put+0x51e>
	switch (hci_opcode) {
   1aa52:	f242 0332 	movw	r3, #8242	; 0x2032
   1aa56:	429e      	cmp	r6, r3
   1aa58:	e736      	b.n	1a8c8 <hci_internal_cmd_put+0x2f4>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1aa5a:	f7f1 ff58 	bl	c90e <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1aa5e:	f242 0332 	movw	r3, #8242	; 0x2032
   1aa62:	429e      	cmp	r6, r3
   1aa64:	f47f ae0e 	bne.w	1a684 <hci_internal_cmd_put+0xb0>
   1aa68:	e093      	b.n	1ab92 <hci_internal_cmd_put+0x5be>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1aa6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1aa6e:	48d1      	ldr	r0, [pc, #836]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1aa70:	3303      	adds	r3, #3
   1aa72:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1aa76:	f7f1 ff2c 	bl	c8d2 <sdc_hci_cmd_le_read_buffer_size>
   1aa7a:	e7f0      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1aa7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1aa80:	48cc      	ldr	r0, [pc, #816]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1aa82:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1aa84:	2208      	movs	r2, #8
   1aa86:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1aa88:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1aa8c:	f004 fb90 	bl	1f1b0 <memset>
	features->params.le_encryption = 1;
   1aa90:	79e3      	ldrb	r3, [r4, #7]
   1aa92:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1aa96:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1aa9a:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   1aa9c:	7a23      	ldrb	r3, [r4, #8]
   1aa9e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1aaa2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1aaa6:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1aaa8:	f242 0332 	movw	r3, #8242	; 0x2032
   1aaac:	429e      	cmp	r6, r3
   1aaae:	d06f      	beq.n	1ab90 <hci_internal_cmd_put+0x5bc>
   1aab0:	f200 818b 	bhi.w	1adca <hci_internal_cmd_put+0x7f6>
   1aab4:	f242 0326 	movw	r3, #8230	; 0x2026
   1aab8:	429e      	cmp	r6, r3
   1aaba:	f63f aeda 	bhi.w	1a872 <hci_internal_cmd_put+0x29e>
		return 0;
   1aabe:	2000      	movs	r0, #0
   1aac0:	e70c      	b.n	1a8dc <hci_internal_cmd_put+0x308>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1aac2:	f7f1 ff2b 	bl	c91c <sdc_hci_cmd_le_set_random_address>
   1aac6:	e7ca      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1aac8:	f7f1 ff19 	bl	c8fe <sdc_hci_cmd_le_set_adv_params>
   1aacc:	e7c7      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out +=
   1aace:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1aad2:	48b8      	ldr	r0, [pc, #736]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1aad4:	3301      	adds	r3, #1
   1aad6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1aada:	f7f1 fef8 	bl	c8ce <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1aade:	e7be      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1aae0:	f7f1 ff09 	bl	c8f6 <sdc_hci_cmd_le_set_adv_data>
   1aae4:	e7bb      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1aae6:	f7f1 ff1b 	bl	c920 <sdc_hci_cmd_le_set_scan_response_data>
   1aaea:	e7b8      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1aaec:	f7f1 ff05 	bl	c8fa <sdc_hci_cmd_le_set_adv_enable>
   1aaf0:	e7b5      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1aaf2:	f7f1 ff08 	bl	c906 <sdc_hci_cmd_le_set_data_related_address_changes>
   1aaf6:	e7b2      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1aaf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1aafc:	48ad      	ldr	r0, [pc, #692]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1aafe:	3301      	adds	r3, #1
   1ab00:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1ab04:	f7f1 fee9 	bl	c8da <sdc_hci_cmd_le_read_filter_accept_list_size>
   1ab08:	e7a9      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1ab0a:	f7f1 fed2 	bl	c8b2 <sdc_hci_cmd_le_clear_filter_accept_list>
   1ab0e:	e7a6      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1ab10:	f7f1 fecd 	bl	c8ae <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1ab14:	e7a3      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1ab16:	f7f1 feec 	bl	c8f2 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1ab1a:	e7a0      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1ab1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ab20:	49a4      	ldr	r1, [pc, #656]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1ab22:	3307      	adds	r3, #7
   1ab24:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ab28:	f7f1 fed5 	bl	c8d6 <sdc_hci_cmd_le_read_channel_map>
   1ab2c:	e797      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1ab2e:	f7f1 feda 	bl	c8e6 <sdc_hci_cmd_le_read_remote_features>
   1ab32:	e794      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1ab34:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ab38:	499e      	ldr	r1, [pc, #632]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1ab3a:	3310      	adds	r3, #16
   1ab3c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ab40:	f7f1 feb9 	bl	c8b6 <sdc_hci_cmd_le_encrypt>
   1ab44:	e78b      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1ab46:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1ab4a:	489a      	ldr	r0, [pc, #616]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1ab4c:	3308      	adds	r3, #8
   1ab4e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1ab52:	f7f1 feba 	bl	c8ca <sdc_hci_cmd_le_rand>
   1ab56:	e782      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1ab58:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1ab5c:	4995      	ldr	r1, [pc, #596]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1ab5e:	3302      	adds	r3, #2
   1ab60:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1ab64:	f7f1 fead 	bl	c8c2 <sdc_hci_cmd_le_long_term_key_request_reply>
   1ab68:	e779      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out +=
   1ab6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1ab6e:	4991      	ldr	r1, [pc, #580]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1ab70:	3302      	adds	r3, #2
   1ab72:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1ab76:	f7f1 fea0 	bl	c8ba <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1ab7a:	e770      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1ab7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ab80:	3308      	adds	r3, #8
   1ab82:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1ab86:	238f      	movs	r3, #143	; 0x8f
   1ab88:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1ab8a:	23c0      	movs	r3, #192	; 0xc0
   1ab8c:	72e3      	strb	r3, [r4, #11]
   1ab8e:	e78b      	b.n	1aaa8 <hci_internal_cmd_put+0x4d4>
		return 0;
   1ab90:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ab92:	230f      	movs	r3, #15
   1ab94:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ab96:	2304      	movs	r3, #4
   1ab98:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1ab9a:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1ab9c:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1ab9e:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1aba0:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1aba4:	2301      	movs	r3, #1
   1aba6:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1aba8:	2000      	movs	r0, #0
}
   1abaa:	b003      	add	sp, #12
   1abac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1abae:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1abb2:	4980      	ldr	r1, [pc, #512]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1abb4:	3302      	adds	r3, #2
   1abb6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1abba:	f7f1 fea2 	bl	c902 <sdc_hci_cmd_le_set_data_length>
   1abbe:	e74e      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out +=
   1abc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1abc4:	487b      	ldr	r0, [pc, #492]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1abc6:	3304      	adds	r3, #4
   1abc8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1abcc:	f7f1 fe8d 	bl	c8ea <sdc_hci_cmd_le_read_suggested_default_data_length>
   1abd0:	e745      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1abd2:	f7f1 fea7 	bl	c924 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1abd6:	e742      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return hci_cmd_le_read_local_p256_public_key();
   1abd8:	f000 fa6a 	bl	1b0b0 <hci_cmd_le_read_local_p256_public_key>
   1abdc:	e73f      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1abde:	f006 f85a 	bl	20c96 <hci_cmd_le_generate_dhkey>
   1abe2:	e73c      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1abe4:	f006 f85a 	bl	20c9c <hci_cmd_le_generate_dhkey_v2>
   1abe8:	e739      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1abea:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1abee:	4871      	ldr	r0, [pc, #452]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1abf0:	3308      	adds	r3, #8
   1abf2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1abf6:	f7f1 fe72 	bl	c8de <sdc_hci_cmd_le_read_max_data_length>
   1abfa:	e730      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1abfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ac00:	496c      	ldr	r1, [pc, #432]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1ac02:	3304      	adds	r3, #4
   1ac04:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ac08:	f7f1 fe6b 	bl	c8e2 <sdc_hci_cmd_le_read_phy>
   1ac0c:	e727      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1ac0e:	f7f1 fe7c 	bl	c90a <sdc_hci_cmd_le_set_default_phy>
   1ac12:	e724      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1ac14:	f7f1 fe80 	bl	c918 <sdc_hci_cmd_le_set_phy>
   1ac18:	e721      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1ac1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ac1e:	4865      	ldr	r0, [pc, #404]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1ac20:	3302      	adds	r3, #2
   1ac22:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ac26:	f7f1 fe62 	bl	c8ee <sdc_hci_cmd_le_read_transmit_power>
   1ac2a:	e718      	b.n	1aa5e <hci_internal_cmd_put+0x48a>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ac2c:	4628      	mov	r0, r5
	switch (opcode)	{
   1ac2e:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1ac32:	f830 3b03 	ldrh.w	r3, [r0], #3
   1ac36:	4293      	cmp	r3, r2
   1ac38:	d822      	bhi.n	1ac80 <hci_internal_cmd_put+0x6ac>
   1ac3a:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1ac3e:	f67f ad06 	bls.w	1a64e <hci_internal_cmd_put+0x7a>
   1ac42:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1ac46:	3b01      	subs	r3, #1
   1ac48:	2b0a      	cmp	r3, #10
   1ac4a:	f63f ad00 	bhi.w	1a64e <hci_internal_cmd_put+0x7a>
   1ac4e:	a201      	add	r2, pc, #4	; (adr r2, 1ac54 <hci_internal_cmd_put+0x680>)
   1ac50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ac54:	0001acd1 	.word	0x0001acd1
   1ac58:	0001aced 	.word	0x0001aced
   1ac5c:	0001a64f 	.word	0x0001a64f
   1ac60:	0001a64f 	.word	0x0001a64f
   1ac64:	0001a64f 	.word	0x0001a64f
   1ac68:	0001ad41 	.word	0x0001ad41
   1ac6c:	0001a64f 	.word	0x0001a64f
   1ac70:	0001a64f 	.word	0x0001a64f
   1ac74:	0001ad1d 	.word	0x0001ad1d
   1ac78:	0001ad2f 	.word	0x0001ad2f
   1ac7c:	0001ad47 	.word	0x0001ad47
   1ac80:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1ac84:	b292      	uxth	r2, r2
   1ac86:	2a0c      	cmp	r2, #12
   1ac88:	f63f ace1 	bhi.w	1a64e <hci_internal_cmd_put+0x7a>
   1ac8c:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1ac90:	2b0c      	cmp	r3, #12
   1ac92:	f63f acdc 	bhi.w	1a64e <hci_internal_cmd_put+0x7a>
   1ac96:	a201      	add	r2, pc, #4	; (adr r2, 1ac9c <hci_internal_cmd_put+0x6c8>)
   1ac98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ac9c:	0001ad59 	.word	0x0001ad59
   1aca0:	0001ad7b 	.word	0x0001ad7b
   1aca4:	0001ad81 	.word	0x0001ad81
   1aca8:	0001ad87 	.word	0x0001ad87
   1acac:	0001ad8d 	.word	0x0001ad8d
   1acb0:	0001ad93 	.word	0x0001ad93
   1acb4:	0001a64f 	.word	0x0001a64f
   1acb8:	0001a64f 	.word	0x0001a64f
   1acbc:	0001a64f 	.word	0x0001a64f
   1acc0:	0001ad99 	.word	0x0001ad99
   1acc4:	0001a64f 	.word	0x0001a64f
   1acc8:	0001a64f 	.word	0x0001a64f
   1accc:	0001ad9f 	.word	0x0001ad9f
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1acd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1acd4:	4837      	ldr	r0, [pc, #220]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1acd6:	330c      	adds	r3, #12
   1acd8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1acdc:	f7e6 f860 	bl	da0 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1ace0:	f026 0308 	bic.w	r3, r6, #8
   1ace4:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1ace8:	4293      	cmp	r3, r2
   1acea:	e4c6      	b.n	1a67a <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1acec:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1acf0:	4830      	ldr	r0, [pc, #192]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1acf2:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1acf4:	2202      	movs	r2, #2
   1acf6:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1acf8:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1acfc:	f004 fa58 	bl	1f1b0 <memset>
	cmds->read_version_info = 1;
   1ad00:	79e3      	ldrb	r3, [r4, #7]
   1ad02:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1ad06:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1ad0a:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1ad0c:	7a23      	ldrb	r3, [r4, #8]
   1ad0e:	f023 0307 	bic.w	r3, r3, #7
   1ad12:	f043 0307 	orr.w	r3, r3, #7
   1ad16:	7223      	strb	r3, [r4, #8]
		return 0;
   1ad18:	2000      	movs	r0, #0
   1ad1a:	e7e1      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1ad1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ad20:	4824      	ldr	r0, [pc, #144]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1ad22:	3317      	adds	r3, #23
   1ad24:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ad28:	f7f1 fd6c 	bl	c804 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1ad2c:	e7d8      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		*param_length_out +=
   1ad2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1ad32:	4820      	ldr	r0, [pc, #128]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1ad34:	3320      	adds	r3, #32
   1ad36:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1ad3a:	f7f1 fd16 	bl	c76a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1ad3e:	e7cf      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1ad40:	f7f1 fdaf 	bl	c8a2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1ad44:	e7cc      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1ad46:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1ad4a:	481a      	ldr	r0, [pc, #104]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1ad4c:	3301      	adds	r3, #1
   1ad4e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1ad52:	f7f1 fcf6 	bl	c742 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1ad56:	e7c3      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1ad58:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ad5c:	4815      	ldr	r0, [pc, #84]	; (1adb4 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1ad5e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1ad60:	2202      	movs	r2, #2
   1ad62:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1ad64:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ad68:	f004 fa22 	bl	1f1b0 <memset>
	cmds->read_supported_vs_commands = 1;
   1ad6c:	79e3      	ldrb	r3, [r4, #7]
   1ad6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1ad72:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1ad76:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1ad78:	e7ce      	b.n	1ad18 <hci_internal_cmd_put+0x744>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1ad7a:	f7f1 fcd5 	bl	c728 <sdc_hci_cmd_vs_llpm_mode_set>
   1ad7e:	e7af      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1ad80:	f7f1 fcce 	bl	c720 <sdc_hci_cmd_vs_conn_update>
   1ad84:	e7ac      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1ad86:	f7f1 fcc3 	bl	c710 <sdc_hci_cmd_vs_conn_event_extend>
   1ad8a:	e7a9      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1ad8c:	f7f1 fcd2 	bl	c734 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1ad90:	e7a6      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1ad92:	f7f1 fcc7 	bl	c724 <sdc_hci_cmd_vs_event_length_set>
   1ad96:	e7a3      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1ad98:	f7f1 fcc8 	bl	c72c <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1ad9c:	e7a0      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1ad9e:	f7f1 fcce 	bl	c73e <sdc_hci_cmd_vs_set_adv_randomness>
   1ada2:	e79d      	b.n	1ace0 <hci_internal_cmd_put+0x70c>
	switch (hci_opcode) {
   1ada4:	f242 0326 	movw	r3, #8230	; 0x2026
   1ada8:	429e      	cmp	r6, r3
   1adaa:	f67f ad97 	bls.w	1a8dc <hci_internal_cmd_put+0x308>
   1adae:	e4aa      	b.n	1a706 <hci_internal_cmd_put+0x132>
		switch (BT_OGF(opcode)) {
   1adb0:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1adb2:	e4a8      	b.n	1a706 <hci_internal_cmd_put+0x132>
   1adb4:	200030b7 	.word	0x200030b7
	switch (hci_opcode) {
   1adb8:	3b2d      	subs	r3, #45	; 0x2d
   1adba:	4a0b      	ldr	r2, [pc, #44]	; (1ade8 <hci_internal_cmd_put+0x814>)
   1adbc:	b29b      	uxth	r3, r3
   1adbe:	fa22 f303 	lsr.w	r3, r2, r3
   1adc2:	07db      	lsls	r3, r3, #31
   1adc4:	f57f ac9f 	bpl.w	1a706 <hci_internal_cmd_put+0x132>
   1adc8:	e6e3      	b.n	1ab92 <hci_internal_cmd_put+0x5be>
   1adca:	f242 0385 	movw	r3, #8325	; 0x2085
   1adce:	429e      	cmp	r6, r3
   1add0:	d905      	bls.n	1adde <hci_internal_cmd_put+0x80a>
		return 0;
   1add2:	2000      	movs	r0, #0
   1add4:	e497      	b.n	1a706 <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   1add6:	f242 0385 	movw	r3, #8325	; 0x2085
   1adda:	2001      	movs	r0, #1
   1addc:	e459      	b.n	1a692 <hci_internal_cmd_put+0xbe>
		return 0;
   1adde:	2000      	movs	r0, #0
   1ade0:	e459      	b.n	1a696 <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   1ade2:	f04f 30ff 	mov.w	r0, #4294967295
   1ade6:	e6e0      	b.n	1abaa <hci_internal_cmd_put+0x5d6>
   1ade8:	01000401 	.word	0x01000401

0001adec <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1adec:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1adee:	4c09      	ldr	r4, [pc, #36]	; (1ae14 <hci_internal_msg_get+0x28>)
   1adf0:	7823      	ldrb	r3, [r4, #0]
{
   1adf2:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1adf4:	b91b      	cbnz	r3, 1adfe <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1adf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1adfa:	f7f1 bc69 	b.w	c6d0 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1adfe:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1ae00:	1c61      	adds	r1, r4, #1
   1ae02:	3202      	adds	r2, #2
   1ae04:	f004 f9c9 	bl	1f19a <memcpy>
		cmd_complete_or_status.occurred = false;
   1ae08:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ae0a:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1ae0c:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ae0e:	702b      	strb	r3, [r5, #0]
}
   1ae10:	bd38      	pop	{r3, r4, r5, pc}
   1ae12:	bf00      	nop
   1ae14:	200030b0 	.word	0x200030b0

0001ae18 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1ae18:	b570      	push	{r4, r5, r6, lr}
   1ae1a:	4605      	mov	r5, r0
   1ae1c:	460e      	mov	r6, r1
   1ae1e:	4c08      	ldr	r4, [pc, #32]	; (1ae40 <bt_rand+0x28>)
   1ae20:	4620      	mov	r0, r4
   1ae22:	f006 f8de 	bl	20fe2 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1ae26:	b138      	cbz	r0, 1ae38 <bt_rand+0x20>
   1ae28:	68a3      	ldr	r3, [r4, #8]
   1ae2a:	b2b2      	uxth	r2, r6
   1ae2c:	4629      	mov	r1, r5
   1ae2e:	4620      	mov	r0, r4
   1ae30:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1ae32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ae36:	4718      	bx	r3
   1ae38:	f06f 0012 	mvn.w	r0, #18
   1ae3c:	bd70      	pop	{r4, r5, r6, pc}
   1ae3e:	bf00      	nop
   1ae40:	00021bf8 	.word	0x00021bf8

0001ae44 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ae46:	4b24      	ldr	r3, [pc, #144]	; (1aed8 <ecdh_p256_common_secret+0x94>)
   1ae48:	4924      	ldr	r1, [pc, #144]	; (1aedc <ecdh_p256_common_secret+0x98>)
   1ae4a:	f103 0220 	add.w	r2, r3, #32
   1ae4e:	2800      	cmp	r0, #0
   1ae50:	bf08      	it	eq
   1ae52:	4619      	moveq	r1, r3
{
   1ae54:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ae56:	4610      	mov	r0, r2
   1ae58:	f002 fd2a 	bl	1d8b0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1ae5c:	4604      	mov	r4, r0
   1ae5e:	b180      	cbz	r0, 1ae82 <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1ae60:	466d      	mov	r5, sp
   1ae62:	b088      	sub	sp, #32
   1ae64:	466a      	mov	r2, sp
   1ae66:	4b1e      	ldr	r3, [pc, #120]	; (1aee0 <ecdh_p256_common_secret+0x9c>)
   1ae68:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ae6c:	2303      	movs	r3, #3
   1ae6e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae72:	481c      	ldr	r0, [pc, #112]	; (1aee4 <ecdh_p256_common_secret+0xa0>)
   1ae74:	2300      	movs	r3, #0
   1ae76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae7a:	f7f7 fbe7 	bl	1264c <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1ae7e:	2412      	movs	r4, #18
   1ae80:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1ae82:	f04f 32ff 	mov.w	r2, #4294967295
   1ae86:	f04f 33ff 	mov.w	r3, #4294967295
   1ae8a:	2001      	movs	r0, #1
   1ae8c:	f7f9 f90a 	bl	140a4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1ae90:	f100 060c 	add.w	r6, r0, #12
   1ae94:	2102      	movs	r1, #2
   1ae96:	4605      	mov	r5, r0
   1ae98:	4630      	mov	r0, r6
   1ae9a:	f005 fd49 	bl	20930 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ae9e:	233e      	movs	r3, #62	; 0x3e
   1aea0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1aea2:	2322      	movs	r3, #34	; 0x22
   1aea4:	7043      	strb	r3, [r0, #1]
   1aea6:	2101      	movs	r1, #1
   1aea8:	4630      	mov	r0, r6
   1aeaa:	f005 fd41 	bl	20930 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1aeae:	2309      	movs	r3, #9
   1aeb0:	7003      	strb	r3, [r0, #0]
   1aeb2:	2121      	movs	r1, #33	; 0x21
   1aeb4:	4630      	mov	r0, r6
   1aeb6:	f005 fd3b 	bl	20930 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1aeba:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1aebe:	b134      	cbz	r4, 1aece <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1aec0:	2220      	movs	r2, #32
   1aec2:	21ff      	movs	r1, #255	; 0xff
   1aec4:	f004 f974 	bl	1f1b0 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1aec8:	4628      	mov	r0, r5
   1aeca:	46bd      	mov	sp, r7
   1aecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1aece:	4906      	ldr	r1, [pc, #24]	; (1aee8 <ecdh_p256_common_secret+0xa4>)
   1aed0:	f005 fed7 	bl	20c82 <sys_memcpy_swap.constprop.0>
   1aed4:	e7f8      	b.n	1aec8 <ecdh_p256_common_secret+0x84>
   1aed6:	bf00      	nop
   1aed8:	200030f7 	.word	0x200030f7
   1aedc:	00024018 	.word	0x00024018
   1aee0:	00023fda 	.word	0x00023fda
   1aee4:	00021e84 	.word	0x00021e84
   1aee8:	20003117 	.word	0x20003117

0001aeec <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aeee:	4c42      	ldr	r4, [pc, #264]	; (1aff8 <ecdh_cmd_process+0x10c>)
   1aef0:	f3bf 8f5b 	dmb	ish
   1aef4:	6823      	ldr	r3, [r4, #0]
   1aef6:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1aefa:	2b02      	cmp	r3, #2
{
   1aefc:	b087      	sub	sp, #28
   1aefe:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1af00:	d05a      	beq.n	1afb8 <ecdh_cmd_process+0xcc>
   1af02:	2b04      	cmp	r3, #4
   1af04:	d05d      	beq.n	1afc2 <ecdh_cmd_process+0xd6>
   1af06:	2b01      	cmp	r3, #1
   1af08:	d15d      	bne.n	1afc6 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1af0a:	4c3c      	ldr	r4, [pc, #240]	; (1affc <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1af0c:	4e3c      	ldr	r6, [pc, #240]	; (1b000 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1af0e:	2120      	movs	r1, #32
   1af10:	4620      	mov	r0, r4
   1af12:	f7ff ff81 	bl	1ae18 <bt_rand>
		if (err) {
   1af16:	2800      	cmp	r0, #0
   1af18:	d143      	bne.n	1afa2 <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1af1a:	2220      	movs	r2, #32
   1af1c:	4631      	mov	r1, r6
   1af1e:	4620      	mov	r0, r4
   1af20:	f004 f92b 	bl	1f17a <memcmp>
   1af24:	2800      	cmp	r0, #0
   1af26:	d0f2      	beq.n	1af0e <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1af28:	4836      	ldr	r0, [pc, #216]	; (1b004 <ecdh_cmd_process+0x118>)
   1af2a:	4621      	mov	r1, r4
   1af2c:	f002 fcac 	bl	1d888 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1af30:	4605      	mov	r5, r0
   1af32:	2800      	cmp	r0, #0
   1af34:	d1eb      	bne.n	1af0e <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1af36:	f04f 32ff 	mov.w	r2, #4294967295
   1af3a:	f04f 33ff 	mov.w	r3, #4294967295
   1af3e:	2001      	movs	r0, #1
   1af40:	f7f9 f8b0 	bl	140a4 <bt_buf_get_rx>
   1af44:	f100 060c 	add.w	r6, r0, #12
   1af48:	2102      	movs	r1, #2
   1af4a:	4604      	mov	r4, r0
   1af4c:	4630      	mov	r0, r6
   1af4e:	f005 fcef 	bl	20930 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1af52:	233e      	movs	r3, #62	; 0x3e
   1af54:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1af56:	2342      	movs	r3, #66	; 0x42
   1af58:	7043      	strb	r3, [r0, #1]
   1af5a:	2101      	movs	r1, #1
   1af5c:	4630      	mov	r0, r6
   1af5e:	f005 fce7 	bl	20930 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1af62:	2308      	movs	r3, #8
   1af64:	7003      	strb	r3, [r0, #0]
   1af66:	2141      	movs	r1, #65	; 0x41
   1af68:	4630      	mov	r0, r6
   1af6a:	f005 fce1 	bl	20930 <net_buf_simple_add>
   1af6e:	4606      	mov	r6, r0
	evt->status = status;
   1af70:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1af74:	b1bd      	cbz	r5, 1afa6 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1af76:	2240      	movs	r2, #64	; 0x40
   1af78:	2100      	movs	r1, #0
   1af7a:	f004 f919 	bl	1f1b0 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1af7e:	f3bf 8f5b 	dmb	ish
   1af82:	2300      	movs	r3, #0
   1af84:	e857 2f00 	ldrex	r2, [r7]
   1af88:	e847 3100 	strex	r1, r3, [r7]
   1af8c:	2900      	cmp	r1, #0
   1af8e:	d1f9      	bne.n	1af84 <ecdh_cmd_process+0x98>
   1af90:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1af94:	b36c      	cbz	r4, 1aff2 <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1af96:	4620      	mov	r0, r4
	}
}
   1af98:	b007      	add	sp, #28
   1af9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1af9e:	f7fa b98b 	b.w	152b8 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1afa2:	251f      	movs	r5, #31
   1afa4:	e7c7      	b.n	1af36 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1afa6:	4917      	ldr	r1, [pc, #92]	; (1b004 <ecdh_cmd_process+0x118>)
   1afa8:	f005 fe6b 	bl	20c82 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1afac:	3120      	adds	r1, #32
   1afae:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1afb2:	f005 fe66 	bl	20c82 <sys_memcpy_swap.constprop.0>
		break;
   1afb6:	e7e2      	b.n	1af7e <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1afb8:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1afba:	f7ff ff43 	bl	1ae44 <ecdh_p256_common_secret>
   1afbe:	4604      	mov	r4, r0
		break;
   1afc0:	e7dd      	b.n	1af7e <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1afc2:	2001      	movs	r0, #1
   1afc4:	e7f9      	b.n	1afba <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1afc6:	4b10      	ldr	r3, [pc, #64]	; (1b008 <ecdh_cmd_process+0x11c>)
   1afc8:	9305      	str	r3, [sp, #20]
   1afca:	2302      	movs	r3, #2
   1afcc:	9304      	str	r3, [sp, #16]
   1afce:	2300      	movs	r3, #0
   1afd0:	480e      	ldr	r0, [pc, #56]	; (1b00c <ecdh_cmd_process+0x120>)
   1afd2:	aa04      	add	r2, sp, #16
   1afd4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1afd8:	f7f7 fb38 	bl	1264c <z_impl_z_log_msg_static_create>
   1afdc:	f3bf 8f5b 	dmb	ish
   1afe0:	2300      	movs	r3, #0
   1afe2:	e854 2f00 	ldrex	r2, [r4]
   1afe6:	e844 3100 	strex	r1, r3, [r4]
   1afea:	2900      	cmp	r1, #0
   1afec:	d1f9      	bne.n	1afe2 <ecdh_cmd_process+0xf6>
   1afee:	f3bf 8f5b 	dmb	ish
}
   1aff2:	b007      	add	sp, #28
   1aff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aff6:	bf00      	nop
   1aff8:	20002e60 	.word	0x20002e60
   1affc:	200030f7 	.word	0x200030f7
   1b000:	00024018 	.word	0x00024018
   1b004:	20003117 	.word	0x20003117
   1b008:	00023ffb 	.word	0x00023ffb
   1b00c:	00021e84 	.word	0x00021e84

0001b010 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1b010:	b510      	push	{r4, lr}
   1b012:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1b014:	2210      	movs	r2, #16
   1b016:	2100      	movs	r1, #0
   1b018:	a801      	add	r0, sp, #4
   1b01a:	f004 f8c9 	bl	1f1b0 <memset>
   1b01e:	4c0b      	ldr	r4, [pc, #44]	; (1b04c <ecdh_thread+0x3c>)
   1b020:	9405      	str	r4, [sp, #20]
   1b022:	2301      	movs	r3, #1
   1b024:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1b028:	f04f 32ff 	mov.w	r2, #4294967295
   1b02c:	f04f 33ff 	mov.w	r3, #4294967295
   1b030:	2101      	movs	r1, #1
   1b032:	a801      	add	r0, sp, #4
   1b034:	f002 fb7e 	bl	1d734 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1b038:	4620      	mov	r0, r4
   1b03a:	f006 fd5a 	bl	21af2 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1b03e:	9b04      	ldr	r3, [sp, #16]
   1b040:	f36f 3394 	bfc	r3, #14, #7
   1b044:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1b046:	f7ff ff51 	bl	1aeec <ecdh_cmd_process>
	while (true) {
   1b04a:	e7ed      	b.n	1b028 <ecdh_thread+0x18>
   1b04c:	20002e50 	.word	0x20002e50

0001b050 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1b050:	b510      	push	{r4, lr}
   1b052:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1b054:	480e      	ldr	r0, [pc, #56]	; (1b090 <hci_ecdh_init+0x40>)
   1b056:	f006 fd47 	bl	21ae8 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b05a:	4c0e      	ldr	r4, [pc, #56]	; (1b094 <hci_ecdh_init+0x44>)
   1b05c:	490e      	ldr	r1, [pc, #56]	; (1b098 <hci_ecdh_init+0x48>)
   1b05e:	2200      	movs	r2, #0
   1b060:	2300      	movs	r3, #0
   1b062:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b066:	2300      	movs	r3, #0
   1b068:	220a      	movs	r2, #10
   1b06a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1b06e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b072:	9300      	str	r3, [sp, #0]
   1b074:	f44f 7262 	mov.w	r2, #904	; 0x388
   1b078:	4b08      	ldr	r3, [pc, #32]	; (1b09c <hci_ecdh_init+0x4c>)
   1b07a:	4620      	mov	r0, r4
   1b07c:	f001 fae0 	bl	1c640 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1b080:	4907      	ldr	r1, [pc, #28]	; (1b0a0 <hci_ecdh_init+0x50>)
   1b082:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1b084:	b008      	add	sp, #32
   1b086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b08a:	f006 b871 	b.w	21170 <z_impl_k_thread_name_set>
   1b08e:	bf00      	nop
   1b090:	20002e50 	.word	0x20002e50
   1b094:	200026d8 	.word	0x200026d8
   1b098:	20004980 	.word	0x20004980
   1b09c:	0001b011 	.word	0x0001b011
   1b0a0:	0002400b 	.word	0x0002400b

0001b0a4 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1b0a4:	4801      	ldr	r0, [pc, #4]	; (1b0ac <hci_ecdh_uninit+0x8>)
   1b0a6:	f7f8 bd79 	b.w	13b9c <z_impl_k_thread_abort>
   1b0aa:	bf00      	nop
   1b0ac:	200026d8 	.word	0x200026d8

0001b0b0 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1b0b0:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b0b2:	4b0b      	ldr	r3, [pc, #44]	; (1b0e0 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1b0b4:	f3bf 8f5b 	dmb	ish
   1b0b8:	2201      	movs	r2, #1
   1b0ba:	e853 1f00 	ldrex	r1, [r3]
   1b0be:	2900      	cmp	r1, #0
   1b0c0:	d103      	bne.n	1b0ca <hci_cmd_le_read_local_p256_public_key+0x1a>
   1b0c2:	e843 2000 	strex	r0, r2, [r3]
   1b0c6:	2800      	cmp	r0, #0
   1b0c8:	d1f7      	bne.n	1b0ba <hci_cmd_le_read_local_p256_public_key+0xa>
   1b0ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1b0ce:	d105      	bne.n	1b0dc <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1b0d0:	4804      	ldr	r0, [pc, #16]	; (1b0e4 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1b0d2:	2100      	movs	r1, #0
   1b0d4:	f002 fb8a 	bl	1d7ec <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1b0d8:	2000      	movs	r0, #0
}
   1b0da:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b0dc:	200c      	movs	r0, #12
   1b0de:	e7fc      	b.n	1b0da <hci_cmd_le_read_local_p256_public_key+0x2a>
   1b0e0:	20002e60 	.word	0x20002e60
   1b0e4:	20002e50 	.word	0x20002e50

0001b0e8 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1b0e8:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1b0ea:	2900      	cmp	r1, #0
   1b0ec:	4b11      	ldr	r3, [pc, #68]	; (1b134 <cmd_le_generate_dhkey+0x4c>)
   1b0ee:	f3bf 8f5b 	dmb	ish
{
   1b0f2:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1b0f4:	bf0c      	ite	eq
   1b0f6:	2202      	moveq	r2, #2
   1b0f8:	2204      	movne	r2, #4
   1b0fa:	e853 1f00 	ldrex	r1, [r3]
   1b0fe:	2900      	cmp	r1, #0
   1b100:	d103      	bne.n	1b10a <cmd_le_generate_dhkey+0x22>
   1b102:	e843 2000 	strex	r0, r2, [r3]
   1b106:	2800      	cmp	r0, #0
   1b108:	d1f7      	bne.n	1b0fa <cmd_le_generate_dhkey+0x12>
   1b10a:	f3bf 8f5b 	dmb	ish
   1b10e:	d10e      	bne.n	1b12e <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1b110:	4621      	mov	r1, r4
   1b112:	4809      	ldr	r0, [pc, #36]	; (1b138 <cmd_le_generate_dhkey+0x50>)
   1b114:	f005 fdb5 	bl	20c82 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1b118:	4808      	ldr	r0, [pc, #32]	; (1b13c <cmd_le_generate_dhkey+0x54>)
   1b11a:	f104 0120 	add.w	r1, r4, #32
   1b11e:	f005 fdb0 	bl	20c82 <sys_memcpy_swap.constprop.0>
   1b122:	4807      	ldr	r0, [pc, #28]	; (1b140 <cmd_le_generate_dhkey+0x58>)
   1b124:	2100      	movs	r1, #0
   1b126:	f002 fb61 	bl	1d7ec <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1b12a:	2000      	movs	r0, #0
}
   1b12c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b12e:	200c      	movs	r0, #12
   1b130:	e7fc      	b.n	1b12c <cmd_le_generate_dhkey+0x44>
   1b132:	bf00      	nop
   1b134:	20002e60 	.word	0x20002e60
   1b138:	20003117 	.word	0x20003117
   1b13c:	20003137 	.word	0x20003137
   1b140:	20002e50 	.word	0x20002e50

0001b144 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1b144:	4901      	ldr	r1, [pc, #4]	; (1b14c <mpsl_low_prio_irq_handler+0x8>)
   1b146:	4802      	ldr	r0, [pc, #8]	; (1b150 <mpsl_low_prio_irq_handler+0xc>)
   1b148:	f006 b96a 	b.w	21420 <k_work_submit_to_queue>
   1b14c:	20002e64 	.word	0x20002e64
   1b150:	200027a0 	.word	0x200027a0

0001b154 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1b154:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1b156:	2332      	movs	r3, #50	; 0x32
   1b158:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1b15c:	4a10      	ldr	r2, [pc, #64]	; (1b1a0 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1b15e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1b160:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1b162:	2119      	movs	r1, #25
   1b164:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1b166:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1b16a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1b16e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1b172:	f7f0 fcd3 	bl	bb1c <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1b176:	4604      	mov	r4, r0
   1b178:	b970      	cbnz	r0, 1b198 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b17a:	4601      	mov	r1, r0
   1b17c:	462a      	mov	r2, r5
   1b17e:	2008      	movs	r0, #8
   1b180:	f7f8 f806 	bl	13190 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b184:	462a      	mov	r2, r5
   1b186:	4621      	mov	r1, r4
   1b188:	200b      	movs	r0, #11
   1b18a:	f7f8 f801 	bl	13190 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b18e:	462a      	mov	r2, r5
   1b190:	4621      	mov	r1, r4
   1b192:	4628      	mov	r0, r5
   1b194:	f7f7 fffc 	bl	13190 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1b198:	4620      	mov	r0, r4
   1b19a:	b003      	add	sp, #12
   1b19c:	bd30      	pop	{r4, r5, pc}
   1b19e:	bf00      	nop
   1b1a0:	0001b1a5 	.word	0x0001b1a5

0001b1a4 <m_assert_handler>:
{
   1b1a4:	b598      	push	{r3, r4, r7, lr}
   1b1a6:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1b1a8:	466c      	mov	r4, sp
   1b1aa:	b08a      	sub	sp, #40	; 0x28
   1b1ac:	466a      	mov	r2, sp
   1b1ae:	4b0c      	ldr	r3, [pc, #48]	; (1b1e0 <m_assert_handler+0x3c>)
   1b1b0:	61d1      	str	r1, [r2, #28]
   1b1b2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b1b6:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b1ba:	8413      	strh	r3, [r2, #32]
   1b1bc:	4b09      	ldr	r3, [pc, #36]	; (1b1e4 <m_assert_handler+0x40>)
   1b1be:	f842 3f10 	str.w	r3, [r2, #16]!
   1b1c2:	4809      	ldr	r0, [pc, #36]	; (1b1e8 <m_assert_handler+0x44>)
   1b1c4:	2300      	movs	r3, #0
   1b1c6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1b1ca:	f7f7 fa3f 	bl	1264c <z_impl_z_log_msg_static_create>
   1b1ce:	46a5      	mov	sp, r4
	k_oops();
   1b1d0:	4040      	eors	r0, r0
   1b1d2:	f380 8811 	msr	BASEPRI, r0
   1b1d6:	f04f 0003 	mov.w	r0, #3
   1b1da:	df02      	svc	2
}
   1b1dc:	46bd      	mov	sp, r7
   1b1de:	bd98      	pop	{r3, r4, r7, pc}
   1b1e0:	00024044 	.word	0x00024044
   1b1e4:	01000004 	.word	0x01000004
   1b1e8:	00021ed4 	.word	0x00021ed4

0001b1ec <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1b1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1b1ee:	4d0d      	ldr	r5, [pc, #52]	; (1b224 <mpsl_low_prio_init+0x38>)
   1b1f0:	490d      	ldr	r1, [pc, #52]	; (1b228 <mpsl_low_prio_init+0x3c>)
   1b1f2:	2400      	movs	r4, #0
   1b1f4:	9400      	str	r4, [sp, #0]
   1b1f6:	f06f 0309 	mvn.w	r3, #9
   1b1fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b1fe:	4628      	mov	r0, r5
   1b200:	f001 fc92 	bl	1cb28 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1b204:	4909      	ldr	r1, [pc, #36]	; (1b22c <mpsl_low_prio_init+0x40>)
   1b206:	4628      	mov	r0, r5
   1b208:	f005 ffb2 	bl	21170 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1b20c:	4908      	ldr	r1, [pc, #32]	; (1b230 <mpsl_low_prio_init+0x44>)
   1b20e:	4809      	ldr	r0, [pc, #36]	; (1b234 <mpsl_low_prio_init+0x48>)
   1b210:	f006 f8d9 	bl	213c6 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1b214:	4622      	mov	r2, r4
   1b216:	2104      	movs	r1, #4
   1b218:	2019      	movs	r0, #25
   1b21a:	f7f7 ffb9 	bl	13190 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1b21e:	4620      	mov	r0, r4
   1b220:	b003      	add	sp, #12
   1b222:	bd30      	pop	{r4, r5, pc}
   1b224:	200027a0 	.word	0x200027a0
   1b228:	20004d80 	.word	0x20004d80
   1b22c:	00024058 	.word	0x00024058
   1b230:	00020ccb 	.word	0x00020ccb
   1b234:	20002e64 	.word	0x20002e64

0001b238 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1b238:	4b01      	ldr	r3, [pc, #4]	; (1b240 <mpsl_hfclk_callback+0x8>)
   1b23a:	2000      	movs	r0, #0
   1b23c:	681b      	ldr	r3, [r3, #0]
   1b23e:	4718      	bx	r3
   1b240:	20002e74 	.word	0x20002e74

0001b244 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1b244:	b120      	cbz	r0, 1b250 <nrfx_clock_start+0xc>
   1b246:	2801      	cmp	r0, #1
   1b248:	d106      	bne.n	1b258 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1b24a:	4804      	ldr	r0, [pc, #16]	; (1b25c <nrfx_clock_start+0x18>)
   1b24c:	f7f0 bac8 	b.w	b7e0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1b250:	4b03      	ldr	r3, [pc, #12]	; (1b260 <nrfx_clock_start+0x1c>)
   1b252:	2001      	movs	r0, #1
   1b254:	681b      	ldr	r3, [r3, #0]
   1b256:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1b258:	4770      	bx	lr
   1b25a:	bf00      	nop
   1b25c:	0001b239 	.word	0x0001b239
   1b260:	20002e74 	.word	0x20002e74

0001b264 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1b264:	4b01      	ldr	r3, [pc, #4]	; (1b26c <nrfx_clock_init+0x8>)
   1b266:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1b268:	4801      	ldr	r0, [pc, #4]	; (1b270 <nrfx_clock_init+0xc>)
   1b26a:	4770      	bx	lr
   1b26c:	20002e74 	.word	0x20002e74
   1b270:	0bad0000 	.word	0x0bad0000

0001b274 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1b274:	4a02      	ldr	r2, [pc, #8]	; (1b280 <nvmc_wait+0xc>)
   1b276:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	d0fb      	beq.n	1b276 <nvmc_wait+0x2>
}
   1b27e:	4770      	bx	lr
   1b280:	4001e000 	.word	0x4001e000

0001b284 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1b284:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b286:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1b28a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1b28e:	2a0d      	cmp	r2, #13
   1b290:	d155      	bne.n	1b33e <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1b292:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1b296:	2200      	movs	r2, #0
   1b298:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1b29c:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1b2a0:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1b2a4:	4a4c      	ldr	r2, [pc, #304]	; (1b3d8 <SystemInit+0x154>)
   1b2a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
   1b2aa:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1b2ae:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
   1b2b2:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1b2b6:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   1b2ba:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1b2be:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   1b2c2:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1b2c6:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
   1b2ca:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1b2ce:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
   1b2d2:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1b2d6:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
   1b2da:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1b2de:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
   1b2e2:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1b2e6:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
   1b2ea:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1b2ee:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
   1b2f2:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1b2f6:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
   1b2fa:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1b2fe:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
   1b302:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1b306:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
   1b30a:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1b30e:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
   1b312:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1b316:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
   1b31a:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1b31e:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
   1b322:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1b326:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1b32a:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1b32e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   1b332:	07db      	lsls	r3, r3, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1b334:	bf44      	itt	mi
   1b336:	f06f 0301 	mvnmi.w	r3, #1
   1b33a:	f8c1 3400 	strmi.w	r3, [r1, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1b33e:	4a27      	ldr	r2, [pc, #156]	; (1b3dc <SystemInit+0x158>)
   1b340:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1b344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1b348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1b34c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b350:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b354:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1b358:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1b35c:	2a0d      	cmp	r2, #13
   1b35e:	d10a      	bne.n	1b376 <SystemInit+0xf2>
            {
                switch(var2)
   1b360:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1b364:	b13b      	cbz	r3, 1b376 <SystemInit+0xf2>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1b366:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b36a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1b36e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b372:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b376:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b37a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b37e:	2a00      	cmp	r2, #0
   1b380:	db03      	blt.n	1b38a <SystemInit+0x106>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1b382:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b386:	2b00      	cmp	r3, #0
   1b388:	da22      	bge.n	1b3d0 <SystemInit+0x14c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b38a:	4915      	ldr	r1, [pc, #84]	; (1b3e0 <SystemInit+0x15c>)
   1b38c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b38e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b392:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b396:	2412      	movs	r4, #18
    nvmc_wait();
   1b398:	f7ff ff6c 	bl	1b274 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b39c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1b3a0:	f7ff ff68 	bl	1b274 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1b3a4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1b3a8:	f7ff ff64 	bl	1b274 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b3ac:	2300      	movs	r3, #0
   1b3ae:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1b3b2:	f7ff ff5f 	bl	1b274 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1b3b6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1b3ba:	4908      	ldr	r1, [pc, #32]	; (1b3dc <SystemInit+0x158>)
   1b3bc:	4b09      	ldr	r3, [pc, #36]	; (1b3e4 <SystemInit+0x160>)
   1b3be:	68ca      	ldr	r2, [r1, #12]
   1b3c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1b3c4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1b3c6:	60cb      	str	r3, [r1, #12]
   1b3c8:	f3bf 8f4f 	dsb	sy
    __NOP();
   1b3cc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1b3ce:	e7fd      	b.n	1b3cc <SystemInit+0x148>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1b3d0:	4b05      	ldr	r3, [pc, #20]	; (1b3e8 <SystemInit+0x164>)
   1b3d2:	4a06      	ldr	r2, [pc, #24]	; (1b3ec <SystemInit+0x168>)
   1b3d4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1b3d6:	bd10      	pop	{r4, pc}
   1b3d8:	4000c000 	.word	0x4000c000
   1b3dc:	e000ed00 	.word	0xe000ed00
   1b3e0:	4001e000 	.word	0x4001e000
   1b3e4:	05fa0004 	.word	0x05fa0004
   1b3e8:	2000062c 	.word	0x2000062c
   1b3ec:	03d09000 	.word	0x03d09000

0001b3f0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1b3f0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1b3f2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1b3f4:	6802      	ldr	r2, [r0, #0]
   1b3f6:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1b3fa:	fab2 f382 	clz	r3, r2
   1b3fe:	f1c3 031f 	rsb	r3, r3, #31
   1b402:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1b404:	fa05 f403 	lsl.w	r4, r5, r3
   1b408:	ea22 0404 	bic.w	r4, r2, r4
   1b40c:	e850 6f00 	ldrex	r6, [r0]
   1b410:	4296      	cmp	r6, r2
   1b412:	d104      	bne.n	1b41e <nrfx_flag32_alloc+0x2e>
   1b414:	e840 4c00 	strex	ip, r4, [r0]
   1b418:	f1bc 0f00 	cmp.w	ip, #0
   1b41c:	d1f6      	bne.n	1b40c <nrfx_flag32_alloc+0x1c>
   1b41e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1b422:	d1e7      	bne.n	1b3f4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1b424:	4801      	ldr	r0, [pc, #4]	; (1b42c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1b426:	700b      	strb	r3, [r1, #0]
}
   1b428:	bd70      	pop	{r4, r5, r6, pc}
   1b42a:	bf00      	nop
   1b42c:	0bad0000 	.word	0x0bad0000

0001b430 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1b430:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1b432:	6803      	ldr	r3, [r0, #0]
   1b434:	40cb      	lsrs	r3, r1
   1b436:	07db      	lsls	r3, r3, #31
   1b438:	d414      	bmi.n	1b464 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1b43a:	2301      	movs	r3, #1
   1b43c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1b43e:	6802      	ldr	r2, [r0, #0]
   1b440:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1b444:	ea43 0102 	orr.w	r1, r3, r2
   1b448:	e850 4f00 	ldrex	r4, [r0]
   1b44c:	4294      	cmp	r4, r2
   1b44e:	d104      	bne.n	1b45a <nrfx_flag32_free+0x2a>
   1b450:	e840 1c00 	strex	ip, r1, [r0]
   1b454:	f1bc 0f00 	cmp.w	ip, #0
   1b458:	d1f6      	bne.n	1b448 <nrfx_flag32_free+0x18>
   1b45a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1b45e:	d1ee      	bne.n	1b43e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1b460:	4801      	ldr	r0, [pc, #4]	; (1b468 <nrfx_flag32_free+0x38>)
}
   1b462:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b464:	4801      	ldr	r0, [pc, #4]	; (1b46c <nrfx_flag32_free+0x3c>)
   1b466:	e7fc      	b.n	1b462 <nrfx_flag32_free+0x32>
   1b468:	0bad0000 	.word	0x0bad0000
   1b46c:	0bad0004 	.word	0x0bad0004

0001b470 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1b470:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1b472:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b476:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1b478:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1b47a:	6002      	str	r2, [r0, #0]
}
   1b47c:	4802      	ldr	r0, [pc, #8]	; (1b488 <nrf_gpio_pin_port_decode+0x18>)
   1b47e:	bf18      	it	ne
   1b480:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1b484:	4770      	bx	lr
   1b486:	bf00      	nop
   1b488:	50000300 	.word	0x50000300

0001b48c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1b48c:	4b03      	ldr	r3, [pc, #12]	; (1b49c <pin_in_use_by_te+0x10>)
   1b48e:	3008      	adds	r0, #8
   1b490:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1b494:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1b498:	4770      	bx	lr
   1b49a:	bf00      	nop
   1b49c:	20000630 	.word	0x20000630

0001b4a0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1b4a0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b4a2:	f100 0308 	add.w	r3, r0, #8
   1b4a6:	4c0c      	ldr	r4, [pc, #48]	; (1b4d8 <call_handler+0x38>)
   1b4a8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1b4ac:	05da      	lsls	r2, r3, #23
{
   1b4ae:	4605      	mov	r5, r0
   1b4b0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b4b2:	d507      	bpl.n	1b4c4 <call_handler+0x24>
   1b4b4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1b4b8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1b4bc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1b4c0:	6852      	ldr	r2, [r2, #4]
   1b4c2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1b4c4:	68a3      	ldr	r3, [r4, #8]
   1b4c6:	b12b      	cbz	r3, 1b4d4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1b4c8:	68e2      	ldr	r2, [r4, #12]
   1b4ca:	4631      	mov	r1, r6
   1b4cc:	4628      	mov	r0, r5
    }
}
   1b4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1b4d2:	4718      	bx	r3
}
   1b4d4:	bd70      	pop	{r4, r5, r6, pc}
   1b4d6:	bf00      	nop
   1b4d8:	20000630 	.word	0x20000630

0001b4dc <release_handler>:
{
   1b4dc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b4de:	4a13      	ldr	r2, [pc, #76]	; (1b52c <release_handler+0x50>)
   1b4e0:	3008      	adds	r0, #8
   1b4e2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1b4e6:	05d9      	lsls	r1, r3, #23
   1b4e8:	d51c      	bpl.n	1b524 <release_handler+0x48>
   1b4ea:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1b4ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1b4f2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1b4f6:	f102 040e 	add.w	r4, r2, #14
   1b4fa:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1b4fc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1b500:	f413 7f80 	tst.w	r3, #256	; 0x100
   1b504:	d003      	beq.n	1b50e <release_handler+0x32>
   1b506:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1b50a:	4299      	cmp	r1, r3
   1b50c:	d00a      	beq.n	1b524 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1b50e:	3001      	adds	r0, #1
   1b510:	282a      	cmp	r0, #42	; 0x2a
   1b512:	d1f3      	bne.n	1b4fc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1b514:	2300      	movs	r3, #0
   1b516:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1b51a:	4805      	ldr	r0, [pc, #20]	; (1b530 <release_handler+0x54>)
}
   1b51c:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1b520:	f7ff bf86 	b.w	1b430 <nrfx_flag32_free>
}
   1b524:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b528:	4770      	bx	lr
   1b52a:	bf00      	nop
   1b52c:	20000630 	.word	0x20000630
   1b530:	20000698 	.word	0x20000698

0001b534 <pin_handler_trigger_uninit>:
{
   1b534:	b538      	push	{r3, r4, r5, lr}
   1b536:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1b538:	f7ff ffa8 	bl	1b48c <pin_in_use_by_te>
   1b53c:	4c09      	ldr	r4, [pc, #36]	; (1b564 <pin_handler_trigger_uninit+0x30>)
   1b53e:	f102 0508 	add.w	r5, r2, #8
   1b542:	b140      	cbz	r0, 1b556 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b544:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1b548:	4907      	ldr	r1, [pc, #28]	; (1b568 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1b54a:	0b5b      	lsrs	r3, r3, #13
   1b54c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1b550:	2000      	movs	r0, #0
   1b552:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1b556:	4610      	mov	r0, r2
   1b558:	f7ff ffc0 	bl	1b4dc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1b55c:	2300      	movs	r3, #0
   1b55e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1b562:	bd38      	pop	{r3, r4, r5, pc}
   1b564:	20000630 	.word	0x20000630
   1b568:	40006000 	.word	0x40006000

0001b56c <nrfx_gpiote_input_configure>:
{
   1b56c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b570:	4604      	mov	r4, r0
   1b572:	4616      	mov	r6, r2
   1b574:	461d      	mov	r5, r3
    if (p_input_config)
   1b576:	b301      	cbz	r1, 1b5ba <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b578:	4f4e      	ldr	r7, [pc, #312]	; (1b6b4 <nrfx_gpiote_input_configure+0x148>)
   1b57a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1b57e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1b582:	079b      	lsls	r3, r3, #30
   1b584:	d502      	bpl.n	1b58c <nrfx_gpiote_input_configure+0x20>
   1b586:	f7ff ff81 	bl	1b48c <pin_in_use_by_te>
   1b58a:	bb10      	cbnz	r0, 1b5d2 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1b58c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1b58e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1b592:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1b596:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1b59a:	f10d 020f 	add.w	r2, sp, #15
   1b59e:	460b      	mov	r3, r1
   1b5a0:	4620      	mov	r0, r4
   1b5a2:	f10d 010e 	add.w	r1, sp, #14
   1b5a6:	f005 fbc9 	bl	20d3c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1b5aa:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1b5ae:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1b5b2:	f043 0301 	orr.w	r3, r3, #1
   1b5b6:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   1b5ba:	b346      	cbz	r6, 1b60e <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b5bc:	4b3d      	ldr	r3, [pc, #244]	; (1b6b4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1b5be:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1b5c2:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b5c4:	f104 0708 	add.w	r7, r4, #8
   1b5c8:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   1b5cc:	0788      	lsls	r0, r1, #30
   1b5ce:	d502      	bpl.n	1b5d6 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   1b5d0:	b1aa      	cbz	r2, 1b5fe <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   1b5d2:	4839      	ldr	r0, [pc, #228]	; (1b6b8 <nrfx_gpiote_input_configure+0x14c>)
   1b5d4:	e01d      	b.n	1b612 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1b5d6:	f021 0120 	bic.w	r1, r1, #32
   1b5da:	04c9      	lsls	r1, r1, #19
   1b5dc:	0cc9      	lsrs	r1, r1, #19
   1b5de:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   1b5e2:	b162      	cbz	r2, 1b5fe <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   1b5e4:	f1bc 0f03 	cmp.w	ip, #3
   1b5e8:	d8f3      	bhi.n	1b5d2 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1b5ea:	6872      	ldr	r2, [r6, #4]
   1b5ec:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1b5ee:	f1bc 0f00 	cmp.w	ip, #0
   1b5f2:	d111      	bne.n	1b618 <nrfx_gpiote_input_configure+0xac>
   1b5f4:	4a31      	ldr	r2, [pc, #196]	; (1b6bc <nrfx_gpiote_input_configure+0x150>)
   1b5f6:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   1b5fa:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1b5fe:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   1b602:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1b606:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   1b60a:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   1b60e:	bb45      	cbnz	r5, 1b662 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   1b610:	482b      	ldr	r0, [pc, #172]	; (1b6c0 <nrfx_gpiote_input_configure+0x154>)
}
   1b612:	b004      	add	sp, #16
   1b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b618:	00b2      	lsls	r2, r6, #2
   1b61a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b61e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b622:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   1b626:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b62a:	f020 0003 	bic.w	r0, r0, #3
   1b62e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1b632:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b636:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1b63a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1b63e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b642:	0220      	lsls	r0, r4, #8
   1b644:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1b648:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1b64c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1b650:	ea40 000e 	orr.w	r0, r0, lr
   1b654:	f041 0120 	orr.w	r1, r1, #32
   1b658:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   1b65c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1b660:	e7cd      	b.n	1b5fe <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1b662:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1b666:	4620      	mov	r0, r4
   1b668:	f7ff ff38 	bl	1b4dc <release_handler>
    if (!handler)
   1b66c:	2e00      	cmp	r6, #0
   1b66e:	d0cf      	beq.n	1b610 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1b670:	4d10      	ldr	r5, [pc, #64]	; (1b6b4 <nrfx_gpiote_input_configure+0x148>)
   1b672:	e9d5 2300 	ldrd	r2, r3, [r5]
   1b676:	4296      	cmp	r6, r2
   1b678:	d101      	bne.n	1b67e <nrfx_gpiote_input_configure+0x112>
   1b67a:	429f      	cmp	r7, r3
   1b67c:	d018      	beq.n	1b6b0 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1b67e:	4811      	ldr	r0, [pc, #68]	; (1b6c4 <nrfx_gpiote_input_configure+0x158>)
   1b680:	f10d 010f 	add.w	r1, sp, #15
   1b684:	f7ff feb4 	bl	1b3f0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1b688:	4b0d      	ldr	r3, [pc, #52]	; (1b6c0 <nrfx_gpiote_input_configure+0x154>)
   1b68a:	4298      	cmp	r0, r3
   1b68c:	d1c1      	bne.n	1b612 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1b68e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1b692:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1b696:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1b69a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1b69c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1b69e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1b6a2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1b6a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b6aa:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1b6ae:	e7af      	b.n	1b610 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1b6b0:	2200      	movs	r2, #0
   1b6b2:	e7ee      	b.n	1b692 <nrfx_gpiote_input_configure+0x126>
   1b6b4:	20000630 	.word	0x20000630
   1b6b8:	0bad0004 	.word	0x0bad0004
   1b6bc:	40006000 	.word	0x40006000
   1b6c0:	0bad0000 	.word	0x0bad0000
   1b6c4:	20000698 	.word	0x20000698

0001b6c8 <nrfx_gpiote_output_configure>:
{
   1b6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6ca:	4604      	mov	r4, r0
   1b6cc:	b085      	sub	sp, #20
   1b6ce:	4615      	mov	r5, r2
    if (p_config)
   1b6d0:	b319      	cbz	r1, 1b71a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b6d2:	4e33      	ldr	r6, [pc, #204]	; (1b7a0 <nrfx_gpiote_output_configure+0xd8>)
   1b6d4:	f100 0708 	add.w	r7, r0, #8
   1b6d8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1b6dc:	0793      	lsls	r3, r2, #30
   1b6de:	d403      	bmi.n	1b6e8 <nrfx_gpiote_output_configure+0x20>
   1b6e0:	f7ff fed4 	bl	1b48c <pin_in_use_by_te>
   1b6e4:	2800      	cmp	r0, #0
   1b6e6:	d158      	bne.n	1b79a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1b6e8:	f012 0f1c 	tst.w	r2, #28
   1b6ec:	d002      	beq.n	1b6f4 <nrfx_gpiote_output_configure+0x2c>
   1b6ee:	784b      	ldrb	r3, [r1, #1]
   1b6f0:	2b01      	cmp	r3, #1
   1b6f2:	d052      	beq.n	1b79a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1b6f4:	2301      	movs	r3, #1
   1b6f6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1b6fa:	2300      	movs	r3, #0
   1b6fc:	e9cd 1300 	strd	r1, r3, [sp]
   1b700:	1c4a      	adds	r2, r1, #1
   1b702:	1c8b      	adds	r3, r1, #2
   1b704:	4620      	mov	r0, r4
   1b706:	f10d 010f 	add.w	r1, sp, #15
   1b70a:	f005 fb17 	bl	20d3c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1b70e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1b712:	f043 0303 	orr.w	r3, r3, #3
   1b716:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1b71a:	b915      	cbnz	r5, 1b722 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1b71c:	4821      	ldr	r0, [pc, #132]	; (1b7a4 <nrfx_gpiote_output_configure+0xdc>)
}
   1b71e:	b005      	add	sp, #20
   1b720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b722:	4e1f      	ldr	r6, [pc, #124]	; (1b7a0 <nrfx_gpiote_output_configure+0xd8>)
   1b724:	f104 0708 	add.w	r7, r4, #8
   1b728:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1b72c:	0783      	lsls	r3, r0, #30
   1b72e:	d534      	bpl.n	1b79a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1b730:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1b734:	4661      	mov	r1, ip
   1b736:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1b738:	f020 0020 	bic.w	r0, r0, #32
   1b73c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1b740:	04c0      	lsls	r0, r0, #19
   1b742:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1b746:	0cc0      	lsrs	r0, r0, #19
   1b748:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1b74c:	2300      	movs	r3, #0
   1b74e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1b752:	786a      	ldrb	r2, [r5, #1]
   1b754:	2a00      	cmp	r2, #0
   1b756:	d0e1      	beq.n	1b71c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1b758:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1b75c:	78ad      	ldrb	r5, [r5, #2]
   1b75e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1b762:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1b766:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b76a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1b76e:	0223      	lsls	r3, r4, #8
   1b770:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1b774:	0412      	lsls	r2, r2, #16
   1b776:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b77a:	ea43 030e 	orr.w	r3, r3, lr
   1b77e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1b780:	052a      	lsls	r2, r5, #20
   1b782:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b786:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b78a:	4313      	orrs	r3, r2
   1b78c:	f040 0020 	orr.w	r0, r0, #32
   1b790:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1b794:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1b798:	e7c0      	b.n	1b71c <nrfx_gpiote_output_configure+0x54>
{
   1b79a:	4803      	ldr	r0, [pc, #12]	; (1b7a8 <nrfx_gpiote_output_configure+0xe0>)
   1b79c:	e7bf      	b.n	1b71e <nrfx_gpiote_output_configure+0x56>
   1b79e:	bf00      	nop
   1b7a0:	20000630 	.word	0x20000630
   1b7a4:	0bad0000 	.word	0x0bad0000
   1b7a8:	0bad0004 	.word	0x0bad0004

0001b7ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1b7ac:	4b01      	ldr	r3, [pc, #4]	; (1b7b4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1b7ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1b7b2:	4770      	bx	lr
   1b7b4:	20000630 	.word	0x20000630

0001b7b8 <nrfx_gpiote_channel_get>:
{
   1b7b8:	b508      	push	{r3, lr}
   1b7ba:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1b7bc:	f7ff fe66 	bl	1b48c <pin_in_use_by_te>
   1b7c0:	b138      	cbz	r0, 1b7d2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b7c2:	4b05      	ldr	r3, [pc, #20]	; (1b7d8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1b7c4:	4805      	ldr	r0, [pc, #20]	; (1b7dc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b7c6:	3208      	adds	r2, #8
   1b7c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1b7cc:	0b5b      	lsrs	r3, r3, #13
   1b7ce:	700b      	strb	r3, [r1, #0]
}
   1b7d0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b7d2:	4803      	ldr	r0, [pc, #12]	; (1b7e0 <nrfx_gpiote_channel_get+0x28>)
   1b7d4:	e7fc      	b.n	1b7d0 <nrfx_gpiote_channel_get+0x18>
   1b7d6:	bf00      	nop
   1b7d8:	20000630 	.word	0x20000630
   1b7dc:	0bad0000 	.word	0x0bad0000
   1b7e0:	0bad0004 	.word	0x0bad0004

0001b7e4 <nrfx_gpiote_init>:
{
   1b7e4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1b7e6:	4c0f      	ldr	r4, [pc, #60]	; (1b824 <nrfx_gpiote_init+0x40>)
   1b7e8:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
   1b7ec:	b9bd      	cbnz	r5, 1b81e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1b7ee:	2254      	movs	r2, #84	; 0x54
   1b7f0:	4629      	mov	r1, r5
   1b7f2:	f104 0010 	add.w	r0, r4, #16
   1b7f6:	f003 fcdb 	bl	1f1b0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1b7fa:	2006      	movs	r0, #6
   1b7fc:	f7f7 fc98 	bl	13130 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b800:	4b09      	ldr	r3, [pc, #36]	; (1b828 <nrfx_gpiote_init+0x44>)
    return err_code;
   1b802:	480a      	ldr	r0, [pc, #40]	; (1b82c <nrfx_gpiote_init+0x48>)
   1b804:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1b808:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1b80c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b810:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1b814:	2301      	movs	r3, #1
   1b816:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1b81a:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1b81c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1b81e:	4804      	ldr	r0, [pc, #16]	; (1b830 <nrfx_gpiote_init+0x4c>)
   1b820:	e7fc      	b.n	1b81c <nrfx_gpiote_init+0x38>
   1b822:	bf00      	nop
   1b824:	20000630 	.word	0x20000630
   1b828:	40006000 	.word	0x40006000
   1b82c:	0bad0000 	.word	0x0bad0000
   1b830:	0bad0005 	.word	0x0bad0005

0001b834 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1b834:	4b03      	ldr	r3, [pc, #12]	; (1b844 <nrfx_gpiote_is_init+0x10>)
   1b836:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   1b83a:	3800      	subs	r0, #0
   1b83c:	bf18      	it	ne
   1b83e:	2001      	movne	r0, #1
   1b840:	4770      	bx	lr
   1b842:	bf00      	nop
   1b844:	20000630 	.word	0x20000630

0001b848 <nrfx_gpiote_channel_free>:
{
   1b848:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1b84a:	4801      	ldr	r0, [pc, #4]	; (1b850 <nrfx_gpiote_channel_free+0x8>)
   1b84c:	f7ff bdf0 	b.w	1b430 <nrfx_flag32_free>
   1b850:	20000694 	.word	0x20000694

0001b854 <nrfx_gpiote_channel_alloc>:
{
   1b854:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1b856:	4801      	ldr	r0, [pc, #4]	; (1b85c <nrfx_gpiote_channel_alloc+0x8>)
   1b858:	f7ff bdca 	b.w	1b3f0 <nrfx_flag32_alloc>
   1b85c:	20000694 	.word	0x20000694

0001b860 <nrfx_gpiote_trigger_enable>:
{
   1b860:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b862:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b864:	f7ff fe12 	bl	1b48c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b868:	f104 0208 	add.w	r2, r4, #8
   1b86c:	4b1e      	ldr	r3, [pc, #120]	; (1b8e8 <nrfx_gpiote_trigger_enable+0x88>)
   1b86e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b872:	b1e8      	cbz	r0, 1b8b0 <nrfx_gpiote_trigger_enable+0x50>
   1b874:	f013 0502 	ands.w	r5, r3, #2
   1b878:	d11a      	bne.n	1b8b0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b87a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1b87c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1b87e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1b882:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1b886:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b88a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b88e:	6005      	str	r5, [r0, #0]
   1b890:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1b892:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b896:	f040 0001 	orr.w	r0, r0, #1
   1b89a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1b89e:	b129      	cbz	r1, 1b8ac <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1b8a0:	2201      	movs	r2, #1
   1b8a2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1b8a6:	4a11      	ldr	r2, [pc, #68]	; (1b8ec <nrfx_gpiote_trigger_enable+0x8c>)
   1b8a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1b8ac:	b003      	add	sp, #12
   1b8ae:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b8b0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1b8b4:	2b04      	cmp	r3, #4
   1b8b6:	d012      	beq.n	1b8de <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1b8b8:	2b05      	cmp	r3, #5
   1b8ba:	d012      	beq.n	1b8e2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b8bc:	a801      	add	r0, sp, #4
   1b8be:	9401      	str	r4, [sp, #4]
   1b8c0:	f7ff fdd6 	bl	1b470 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b8c4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1b8c6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b8ca:	40d9      	lsrs	r1, r3
   1b8cc:	f001 0101 	and.w	r1, r1, #1
   1b8d0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1b8d2:	4620      	mov	r0, r4
}
   1b8d4:	b003      	add	sp, #12
   1b8d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1b8da:	f005 ba78 	b.w	20dce <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1b8de:	2103      	movs	r1, #3
   1b8e0:	e7f7      	b.n	1b8d2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1b8e2:	2102      	movs	r1, #2
   1b8e4:	e7f5      	b.n	1b8d2 <nrfx_gpiote_trigger_enable+0x72>
   1b8e6:	bf00      	nop
   1b8e8:	20000630 	.word	0x20000630
   1b8ec:	40006000 	.word	0x40006000

0001b8f0 <nrfx_gpiote_trigger_disable>:
{
   1b8f0:	b508      	push	{r3, lr}
   1b8f2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b8f4:	f7ff fdca 	bl	1b48c <pin_in_use_by_te>
   1b8f8:	b1c0      	cbz	r0, 1b92c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b8fa:	f102 0108 	add.w	r1, r2, #8
   1b8fe:	4b0e      	ldr	r3, [pc, #56]	; (1b938 <nrfx_gpiote_trigger_disable+0x48>)
   1b900:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b904:	0799      	lsls	r1, r3, #30
   1b906:	d411      	bmi.n	1b92c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b908:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1b90a:	2201      	movs	r2, #1
   1b90c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1b90e:	009b      	lsls	r3, r3, #2
   1b910:	490a      	ldr	r1, [pc, #40]	; (1b93c <nrfx_gpiote_trigger_disable+0x4c>)
   1b912:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b916:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1b91a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b91e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1b922:	f022 0203 	bic.w	r2, r2, #3
   1b926:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1b92a:	bd08      	pop	{r3, pc}
   1b92c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1b930:	2100      	movs	r1, #0
   1b932:	4610      	mov	r0, r2
   1b934:	f005 ba4b 	b.w	20dce <nrf_gpio_cfg_sense_set>
   1b938:	20000630 	.word	0x20000630
   1b93c:	40006000 	.word	0x40006000

0001b940 <nrfx_gpiote_pin_uninit>:
{
   1b940:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1b942:	4b0e      	ldr	r3, [pc, #56]	; (1b97c <nrfx_gpiote_pin_uninit+0x3c>)
   1b944:	f100 0208 	add.w	r2, r0, #8
{
   1b948:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1b94a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1b94e:	07db      	lsls	r3, r3, #31
   1b950:	d511      	bpl.n	1b976 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1b952:	f7ff ffcd 	bl	1b8f0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1b956:	4620      	mov	r0, r4
   1b958:	f7ff fdec 	bl	1b534 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b95c:	a801      	add	r0, sp, #4
   1b95e:	9401      	str	r4, [sp, #4]
   1b960:	f7ff fd86 	bl	1b470 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b964:	9b01      	ldr	r3, [sp, #4]
   1b966:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b96a:	2202      	movs	r2, #2
   1b96c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1b970:	4803      	ldr	r0, [pc, #12]	; (1b980 <nrfx_gpiote_pin_uninit+0x40>)
}
   1b972:	b002      	add	sp, #8
   1b974:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b976:	4803      	ldr	r0, [pc, #12]	; (1b984 <nrfx_gpiote_pin_uninit+0x44>)
   1b978:	e7fb      	b.n	1b972 <nrfx_gpiote_pin_uninit+0x32>
   1b97a:	bf00      	nop
   1b97c:	20000630 	.word	0x20000630
   1b980:	0bad0000 	.word	0x0bad0000
   1b984:	0bad0004 	.word	0x0bad0004

0001b988 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b98c:	4b68      	ldr	r3, [pc, #416]	; (1bb30 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1b98e:	4869      	ldr	r0, [pc, #420]	; (1bb34 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b990:	4969      	ldr	r1, [pc, #420]	; (1bb38 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1b992:	2600      	movs	r6, #0
{
   1b994:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1b996:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b998:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b99a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1b99c:	b135      	cbz	r5, 1b9ac <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1b99e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1b9a2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b9a4:	bf1e      	ittt	ne
   1b9a6:	601c      	strne	r4, [r3, #0]
   1b9a8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1b9aa:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b9ac:	3304      	adds	r3, #4
   1b9ae:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1b9b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b9b4:	d1f1      	bne.n	1b99a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b9b6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1bb34 <nrfx_gpiote_irq_handler+0x1ac>
   1b9ba:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1b9be:	2b00      	cmp	r3, #0
   1b9c0:	f000 8099 	beq.w	1baf6 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1b9c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b9c8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1b9cc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1b9ce:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1b9d2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1b9d6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1b9d8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1b9dc:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1b9e0:	f10d 0a10 	add.w	sl, sp, #16
   1b9e4:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1b9e8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1b9ea:	f04f 0b01 	mov.w	fp, #1
   1b9ee:	e049      	b.n	1ba84 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1b9f0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b9f2:	4a52      	ldr	r2, [pc, #328]	; (1bb3c <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1b9f4:	fa94 f4a4 	rbit	r4, r4
   1b9f8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1b9fc:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1b9fe:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ba00:	f104 0308 	add.w	r3, r4, #8
   1ba04:	9403      	str	r4, [sp, #12]
   1ba06:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1ba0a:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1ba0e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1ba12:	fa0b f202 	lsl.w	r2, fp, r2
   1ba16:	ea23 0302 	bic.w	r3, r3, r2
   1ba1a:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ba1e:	a803      	add	r0, sp, #12
   1ba20:	f7ff fd26 	bl	1b470 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ba24:	9b03      	ldr	r3, [sp, #12]
   1ba26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ba2a:	08b9      	lsrs	r1, r7, #2
   1ba2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1ba30:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1ba34:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ba36:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1ba38:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1ba3c:	d52c      	bpl.n	1ba98 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   1ba3e:	4620      	mov	r0, r4
   1ba40:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ba42:	b2dd      	uxtb	r5, r3
   1ba44:	f7ff fd2c 	bl	1b4a0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ba48:	a803      	add	r0, sp, #12
   1ba4a:	9403      	str	r4, [sp, #12]
   1ba4c:	f7ff fd10 	bl	1b470 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ba50:	9b03      	ldr	r3, [sp, #12]
   1ba52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ba56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1ba5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1ba5e:	429d      	cmp	r5, r3
   1ba60:	d107      	bne.n	1ba72 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ba62:	2100      	movs	r1, #0
   1ba64:	4620      	mov	r0, r4
   1ba66:	f005 f9b2 	bl	20dce <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1ba6a:	4629      	mov	r1, r5
   1ba6c:	4620      	mov	r0, r4
   1ba6e:	f005 f9ae 	bl	20dce <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ba72:	a803      	add	r0, sp, #12
   1ba74:	9403      	str	r4, [sp, #12]
   1ba76:	f7ff fcfb 	bl	1b470 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1ba7a:	9b03      	ldr	r3, [sp, #12]
   1ba7c:	fa0b f303 	lsl.w	r3, fp, r3
   1ba80:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1ba84:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1ba88:	2c00      	cmp	r4, #0
   1ba8a:	d1b1      	bne.n	1b9f0 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ba8c:	f1b8 0f00 	cmp.w	r8, #0
   1ba90:	d11d      	bne.n	1bace <nrfx_gpiote_irq_handler+0x146>
   1ba92:	f04f 0801 	mov.w	r8, #1
   1ba96:	e7a5      	b.n	1b9e4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ba98:	2b02      	cmp	r3, #2
   1ba9a:	d10c      	bne.n	1bab6 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ba9c:	2103      	movs	r1, #3
   1ba9e:	4620      	mov	r0, r4
   1baa0:	f005 f995 	bl	20dce <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1baa4:	f005 0305 	and.w	r3, r5, #5
   1baa8:	2b01      	cmp	r3, #1
   1baaa:	d1e2      	bne.n	1ba72 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1baac:	4639      	mov	r1, r7
   1baae:	4620      	mov	r0, r4
   1bab0:	f7ff fcf6 	bl	1b4a0 <call_handler>
   1bab4:	e7dd      	b.n	1ba72 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1bab6:	2102      	movs	r1, #2
   1bab8:	4620      	mov	r0, r4
   1baba:	9301      	str	r3, [sp, #4]
   1babc:	f005 f987 	bl	20dce <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1bac0:	2d03      	cmp	r5, #3
   1bac2:	d0f3      	beq.n	1baac <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1bac4:	9b01      	ldr	r3, [sp, #4]
   1bac6:	2b03      	cmp	r3, #3
   1bac8:	d1d3      	bne.n	1ba72 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1baca:	2d02      	cmp	r5, #2
   1bacc:	e7ed      	b.n	1baaa <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1bace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1bad2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1bad6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1bada:	4919      	ldr	r1, [pc, #100]	; (1bb40 <nrfx_gpiote_irq_handler+0x1b8>)
   1badc:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1bae0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1bae2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1bae6:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1baea:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1baec:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1baee:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1baf2:	f47f af73 	bne.w	1b9dc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1baf6:	2401      	movs	r4, #1
    while (mask)
   1baf8:	b916      	cbnz	r6, 1bb00 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1bafa:	b007      	add	sp, #28
   1bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1bb00:	fa96 f3a6 	rbit	r3, r6
   1bb04:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1bb08:	fa04 f203 	lsl.w	r2, r4, r3
   1bb0c:	009b      	lsls	r3, r3, #2
   1bb0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bb12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1bb16:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1bb1a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1bb1e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1bb22:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1bb26:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1bb2a:	f7ff fcb9 	bl	1b4a0 <call_handler>
   1bb2e:	e7e3      	b.n	1baf8 <nrfx_gpiote_irq_handler+0x170>
   1bb30:	40006100 	.word	0x40006100
   1bb34:	40006000 	.word	0x40006000
   1bb38:	40006120 	.word	0x40006120
   1bb3c:	20000630 	.word	0x20000630
   1bb40:	50000300 	.word	0x50000300

0001bb44 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1bb44:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1bb46:	4b3b      	ldr	r3, [pc, #236]	; (1bc34 <twi_tx_start_transfer+0xf0>)
   1bb48:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb4a:	2300      	movs	r3, #0
   1bb4c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1bb50:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1bb54:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1bb58:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1bb5c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1bb60:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1bb64:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1bb68:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1bb6c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   1bb70:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1bb72:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb76:	2301      	movs	r3, #1
   1bb78:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1bb7a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   1bb7e:	429a      	cmp	r2, r3
   1bb80:	bf18      	it	ne
   1bb82:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1bb84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1bb86:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   1bb88:	4293      	cmp	r3, r2
{
   1bb8a:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1bb8c:	d20e      	bcs.n	1bbac <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   1bb8e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
   1bb90:	5cd3      	ldrb	r3, [r2, r3]
   1bb92:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
   1bb96:	680b      	ldr	r3, [r1, #0]
   1bb98:	b303      	cbz	r3, 1bbdc <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1bb9a:	f240 2386 	movw	r3, #646	; 0x286
   1bb9e:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1bba0:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1bba2:	4825      	ldr	r0, [pc, #148]	; (1bc38 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
   1bba4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   1bba8:	b002      	add	sp, #8
   1bbaa:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
   1bbac:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   1bbb0:	b113      	cbz	r3, 1bbb8 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbb2:	2301      	movs	r3, #1
   1bbb4:	61c3      	str	r3, [r0, #28]
            return false;
   1bbb6:	e7ee      	b.n	1bb96 <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   1bbb8:	6a0b      	ldr	r3, [r1, #32]
   1bbba:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bbbe:	f04f 0301 	mov.w	r3, #1
   1bbc2:	bf16      	itet	ne
   1bbc4:	61c3      	strne	r3, [r0, #28]
   1bbc6:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   1bbc8:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
   1bbcc:	e7e3      	b.n	1bb96 <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
   1bbce:	4620      	mov	r0, r4
   1bbd0:	f005 f90c 	bl	20dec <twi_transfer>
        while ((hw_timeout > 0) &&
   1bbd4:	b128      	cbz	r0, 1bbe2 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
   1bbd6:	9b01      	ldr	r3, [sp, #4]
   1bbd8:	3b01      	subs	r3, #1
   1bbda:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1bbdc:	9b01      	ldr	r3, [sp, #4]
   1bbde:	2b00      	cmp	r3, #0
   1bbe0:	dcf5      	bgt.n	1bbce <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
   1bbe2:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   1bbe6:	b95b      	cbnz	r3, 1bc00 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1bbe8:	4813      	ldr	r0, [pc, #76]	; (1bc38 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
   1bbea:	9b01      	ldr	r3, [sp, #4]
   1bbec:	2b00      	cmp	r3, #0
   1bbee:	dcdb      	bgt.n	1bba8 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1bbf0:	2300      	movs	r3, #0
   1bbf2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1bbf6:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1bbf8:	4810      	ldr	r0, [pc, #64]	; (1bc3c <twi_tx_start_transfer+0xf8>)
   1bbfa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1bbfe:	e7d3      	b.n	1bba8 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1bc00:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1bc04:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1bc08:	b18b      	cbz	r3, 1bc2e <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1bc0a:	4a0d      	ldr	r2, [pc, #52]	; (1bc40 <twi_tx_start_transfer+0xfc>)
   1bc0c:	480b      	ldr	r0, [pc, #44]	; (1bc3c <twi_tx_start_transfer+0xf8>)
   1bc0e:	f013 0f01 	tst.w	r3, #1
   1bc12:	bf18      	it	ne
   1bc14:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1bc16:	f013 0f02 	tst.w	r3, #2
   1bc1a:	f102 0201 	add.w	r2, r2, #1
   1bc1e:	bf18      	it	ne
   1bc20:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1bc22:	f013 0f04 	tst.w	r3, #4
   1bc26:	4b07      	ldr	r3, [pc, #28]	; (1bc44 <twi_tx_start_transfer+0x100>)
   1bc28:	bf18      	it	ne
   1bc2a:	4618      	movne	r0, r3
   1bc2c:	e7dd      	b.n	1bbea <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
   1bc2e:	4803      	ldr	r0, [pc, #12]	; (1bc3c <twi_tx_start_transfer+0xf8>)
   1bc30:	e7db      	b.n	1bbea <twi_tx_start_transfer+0xa6>
   1bc32:	bf00      	nop
   1bc34:	000186a0 	.word	0x000186a0
   1bc38:	0bad0000 	.word	0x0bad0000
   1bc3c:	0bad0001 	.word	0x0bad0001
   1bc40:	0bae0000 	.word	0x0bae0000
   1bc44:	0bae0002 	.word	0x0bae0002

0001bc48 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1bc48:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1bc4a:	4b33      	ldr	r3, [pc, #204]	; (1bd18 <twi_rx_start_transfer+0xd0>)
   1bc4c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc4e:	2300      	movs	r3, #0
   1bc50:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1bc54:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1bc58:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1bc5c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1bc60:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1bc64:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1bc68:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1bc6c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1bc70:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1bc72:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1bc76:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1bc78:	2b01      	cmp	r3, #1
{
   1bc7a:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1bc7c:	d117      	bne.n	1bcae <twi_rx_start_transfer+0x66>
   1bc7e:	6a0b      	ldr	r3, [r1, #32]
   1bc80:	065b      	lsls	r3, r3, #25
   1bc82:	d414      	bmi.n	1bcae <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
   1bc84:	2302      	movs	r3, #2
   1bc86:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc8a:	2301      	movs	r3, #1
   1bc8c:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1bc8e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   1bc92:	2a02      	cmp	r2, #2
   1bc94:	bf18      	it	ne
   1bc96:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1bc98:	680b      	ldr	r3, [r1, #0]
   1bc9a:	b18b      	cbz	r3, 1bcc0 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1bc9c:	f240 2386 	movw	r3, #646	; 0x286
   1bca0:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1bca2:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1bca4:	481d      	ldr	r0, [pc, #116]	; (1bd1c <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
   1bca6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1bcaa:	b002      	add	sp, #8
   1bcac:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
   1bcae:	2301      	movs	r3, #1
   1bcb0:	e7e9      	b.n	1bc86 <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
   1bcb2:	4620      	mov	r0, r4
   1bcb4:	f005 f89a 	bl	20dec <twi_transfer>
        while ((hw_timeout > 0) &&
   1bcb8:	b128      	cbz	r0, 1bcc6 <twi_rx_start_transfer+0x7e>
               hw_timeout--;
   1bcba:	9b01      	ldr	r3, [sp, #4]
   1bcbc:	3b01      	subs	r3, #1
   1bcbe:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1bcc0:	9b01      	ldr	r3, [sp, #4]
   1bcc2:	2b00      	cmp	r3, #0
   1bcc4:	dcf5      	bgt.n	1bcb2 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
   1bcc6:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   1bcca:	b95b      	cbnz	r3, 1bce4 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1bccc:	4813      	ldr	r0, [pc, #76]	; (1bd1c <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
   1bcce:	9b01      	ldr	r3, [sp, #4]
   1bcd0:	2b00      	cmp	r3, #0
   1bcd2:	dcea      	bgt.n	1bcaa <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1bcd4:	2300      	movs	r3, #0
   1bcd6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1bcda:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1bcdc:	4810      	ldr	r0, [pc, #64]	; (1bd20 <twi_rx_start_transfer+0xd8>)
   1bcde:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1bce2:	e7e2      	b.n	1bcaa <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
   1bce4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1bce8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1bcec:	b18b      	cbz	r3, 1bd12 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1bcee:	4a0d      	ldr	r2, [pc, #52]	; (1bd24 <twi_rx_start_transfer+0xdc>)
   1bcf0:	480b      	ldr	r0, [pc, #44]	; (1bd20 <twi_rx_start_transfer+0xd8>)
   1bcf2:	f013 0f01 	tst.w	r3, #1
   1bcf6:	bf18      	it	ne
   1bcf8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1bcfa:	f013 0f02 	tst.w	r3, #2
   1bcfe:	f102 0201 	add.w	r2, r2, #1
   1bd02:	bf18      	it	ne
   1bd04:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1bd06:	f013 0f04 	tst.w	r3, #4
   1bd0a:	4b07      	ldr	r3, [pc, #28]	; (1bd28 <twi_rx_start_transfer+0xe0>)
   1bd0c:	bf18      	it	ne
   1bd0e:	4618      	movne	r0, r3
   1bd10:	e7dd      	b.n	1bcce <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
   1bd12:	4803      	ldr	r0, [pc, #12]	; (1bd20 <twi_rx_start_transfer+0xd8>)
   1bd14:	e7db      	b.n	1bcce <twi_rx_start_transfer+0x86>
   1bd16:	bf00      	nop
   1bd18:	000186a0 	.word	0x000186a0
   1bd1c:	0bad0000 	.word	0x0bad0000
   1bd20:	0bad0001 	.word	0x0bad0001
   1bd24:	0bae0000 	.word	0x0bae0000
   1bd28:	0bae0002 	.word	0x0bae0002

0001bd2c <nrfx_twi_init>:
{
   1bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1bd30:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1bd32:	4d2b      	ldr	r5, [pc, #172]	; (1bde0 <nrfx_twi_init+0xb4>)
   1bd34:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   1bd38:	fb0e fe07 	mul.w	lr, lr, r7
   1bd3c:	eb05 040e 	add.w	r4, r5, lr
   1bd40:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1bd44:	2e00      	cmp	r6, #0
   1bd46:	d149      	bne.n	1bddc <nrfx_twi_init+0xb0>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1bd48:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
   1bd4c:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
   1bd50:	60a6      	str	r6, [r4, #8]
    p_cb->p_context       = p_context;
   1bd52:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1bd54:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
   1bd58:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
   1bd5c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1bd60:	7b4b      	ldrb	r3, [r1, #13]
   1bd62:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1bd66:	7b8b      	ldrb	r3, [r1, #14]
   1bd68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   1bd6c:	b9e3      	cbnz	r3, 1bda8 <nrfx_twi_init+0x7c>
        TWI_PIN_INIT(p_config->scl);
   1bd6e:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
   1bd70:	4b1c      	ldr	r3, [pc, #112]	; (1bde4 <nrfx_twi_init+0xb8>)
    *p_pin = pin_number & 0x1F;
   1bd72:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1bd76:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   1bd78:	2c01      	cmp	r4, #1
   1bd7a:	bf08      	it	eq
   1bd7c:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   1bd7e:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
   1bd82:	bf18      	it	ne
   1bd84:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1bd88:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1bd8c:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   1bd90:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   1bd92:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1bd96:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   1bd98:	2c01      	cmp	r4, #1
   1bd9a:	bf18      	it	ne
   1bd9c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1bda0:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
   1bda4:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   1bda8:	7bcb      	ldrb	r3, [r1, #15]
   1bdaa:	b92b      	cbnz	r3, 1bdb8 <nrfx_twi_init+0x8c>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   1bdac:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1bdb0:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1bdb4:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   1bdb8:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   1bdba:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
   1bdbe:	b122      	cbz	r2, 1bdca <nrfx_twi_init+0x9e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1bdc0:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1bdc2:	f340 3007 	sbfx	r0, r0, #12, #8
   1bdc6:	f7f7 f9b3 	bl	13130 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1bdca:	233c      	movs	r3, #60	; 0x3c
   1bdcc:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   1bdd0:	4805      	ldr	r0, [pc, #20]	; (1bde8 <nrfx_twi_init+0xbc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1bdd2:	2301      	movs	r3, #1
   1bdd4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1bdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1bddc:	4803      	ldr	r0, [pc, #12]	; (1bdec <nrfx_twi_init+0xc0>)
   1bdde:	e7fb      	b.n	1bdd8 <nrfx_twi_init+0xac>
   1bde0:	20002e78 	.word	0x20002e78
   1bde4:	50000300 	.word	0x50000300
   1bde8:	0bad0000 	.word	0x0bad0000
   1bdec:	0bad0005 	.word	0x0bad0005

0001bdf0 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1bdf0:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1bdf2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1bdf4:	2105      	movs	r1, #5
   1bdf6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1bdfa:	4b04      	ldr	r3, [pc, #16]	; (1be0c <nrfx_twi_enable+0x1c>)
   1bdfc:	213c      	movs	r1, #60	; 0x3c
   1bdfe:	fb01 3302 	mla	r3, r1, r2, r3
   1be02:	2202      	movs	r2, #2
   1be04:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1be08:	4770      	bx	lr
   1be0a:	bf00      	nop
   1be0c:	20002e78 	.word	0x20002e78

0001be10 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1be10:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   1be12:	4a0b      	ldr	r2, [pc, #44]	; (1be40 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1be14:	7901      	ldrb	r1, [r0, #4]
   1be16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1be1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1be1e:	f022 0203 	bic.w	r2, r2, #3
   1be22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1be26:	2200      	movs	r2, #0
   1be28:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1be2c:	4b05      	ldr	r3, [pc, #20]	; (1be44 <nrfx_twi_disable+0x34>)
   1be2e:	203c      	movs	r0, #60	; 0x3c
   1be30:	fb00 3301 	mla	r3, r0, r1, r3
   1be34:	2101      	movs	r1, #1
   1be36:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
   1be3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
   1be3e:	4770      	bx	lr
   1be40:	00044286 	.word	0x00044286
   1be44:	20002e78 	.word	0x20002e78

0001be48 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1be48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1be4c:	4f31      	ldr	r7, [pc, #196]	; (1bf14 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1be4e:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1be50:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1be54:	233c      	movs	r3, #60	; 0x3c
   1be56:	fb03 7304 	mla	r3, r3, r4, r7
{
   1be5a:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1be5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1be60:	2b01      	cmp	r3, #1
{
   1be62:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1be64:	d104      	bne.n	1be70 <nrfx_twi_xfer+0x28>
   1be66:	780b      	ldrb	r3, [r1, #0]
   1be68:	2b01      	cmp	r3, #1
   1be6a:	d106      	bne.n	1be7a <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   1be6c:	482a      	ldr	r0, [pc, #168]	; (1bf18 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1be6e:	e011      	b.n	1be94 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1be70:	2b02      	cmp	r3, #2
   1be72:	d102      	bne.n	1be7a <nrfx_twi_xfer+0x32>
   1be74:	780b      	ldrb	r3, [r1, #0]
   1be76:	2b01      	cmp	r3, #1
   1be78:	d1f8      	bne.n	1be6c <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   1be7a:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1be7c:	4b27      	ldr	r3, [pc, #156]	; (1bf1c <nrfx_twi_xfer+0xd4>)
   1be7e:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1be82:	fb06 7604 	mla	r6, r6, r4, r7
   1be86:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1be8a:	b12b      	cbz	r3, 1be98 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1be8c:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1be8e:	4824      	ldr	r0, [pc, #144]	; (1bf20 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   1be90:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1be94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1be98:	f08c 0304 	eor.w	r3, ip, #4
   1be9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1bea0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1bea4:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1bea8:	46a8      	mov	r8, r5
   1beaa:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   1beae:	f106 0e0c 	add.w	lr, r6, #12
   1beb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1beb6:	f8d8 3000 	ldr.w	r3, [r8]
   1beba:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1bebe:	686b      	ldr	r3, [r5, #4]
   1bec0:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1bec2:	68eb      	ldr	r3, [r5, #12]
   1bec4:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   1bec6:	786b      	ldrb	r3, [r5, #1]
   1bec8:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1becc:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1bece:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1bed2:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1bed4:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1bed8:	d017      	beq.n	1bf0a <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1beda:	b99b      	cbnz	r3, 1bf04 <nrfx_twi_xfer+0xbc>
   1bedc:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1bee0:	233c      	movs	r3, #60	; 0x3c
   1bee2:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1bee6:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1bee8:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1beec:	4648      	mov	r0, r9
   1beee:	f7ff fe29 	bl	1bb44 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1bef2:	233c      	movs	r3, #60	; 0x3c
   1bef4:	435c      	muls	r4, r3
   1bef6:	193a      	adds	r2, r7, r4
   1bef8:	593b      	ldr	r3, [r7, r4]
   1befa:	2b00      	cmp	r3, #0
   1befc:	d1ca      	bne.n	1be94 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   1befe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1bf02:	e7c7      	b.n	1be94 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1bf04:	f04f 0c01 	mov.w	ip, #1
   1bf08:	e7ea      	b.n	1bee0 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1bf0a:	4651      	mov	r1, sl
   1bf0c:	4648      	mov	r0, r9
   1bf0e:	f7ff fe9b 	bl	1bc48 <twi_rx_start_transfer>
   1bf12:	e7ee      	b.n	1bef2 <nrfx_twi_xfer+0xaa>
   1bf14:	20002e78 	.word	0x20002e78
   1bf18:	0bad0005 	.word	0x0bad0005
   1bf1c:	00044286 	.word	0x00044286
   1bf20:	0bad000b 	.word	0x0bad000b

0001bf24 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1bf24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1bf26:	4c32      	ldr	r4, [pc, #200]	; (1bff0 <nrfx_twi_0_irq_handler+0xcc>)
   1bf28:	4832      	ldr	r0, [pc, #200]	; (1bff4 <nrfx_twi_0_irq_handler+0xd0>)
{
   1bf2a:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1bf2c:	4621      	mov	r1, r4
   1bf2e:	f004 ff5d 	bl	20dec <twi_transfer>
   1bf32:	2800      	cmp	r0, #0
   1bf34:	d159      	bne.n	1bfea <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
   1bf36:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   1bf3a:	b9ff      	cbnz	r7, 1bf7c <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1bf3c:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
   1bf3e:	1e93      	subs	r3, r2, #2
   1bf40:	2b01      	cmp	r3, #1
   1bf42:	d81b      	bhi.n	1bf7c <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1bf44:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1bf46:	69a3      	ldr	r3, [r4, #24]
   1bf48:	4298      	cmp	r0, r3
   1bf4a:	d117      	bne.n	1bf7c <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1bf4c:	69e3      	ldr	r3, [r4, #28]
   1bf4e:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1bf50:	6963      	ldr	r3, [r4, #20]
   1bf52:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1bf54:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1bf56:	4827      	ldr	r0, [pc, #156]	; (1bff4 <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1bf58:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1bf5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1bf60:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1bf62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1bf66:	d104      	bne.n	1bf72 <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1bf68:	b007      	add	sp, #28
   1bf6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1bf6e:	f7ff bde9 	b.w	1bb44 <twi_tx_start_transfer>
}
   1bf72:	b007      	add	sp, #28
   1bf74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1bf78:	f7ff be66 	b.w	1bc48 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   1bf7c:	4e1e      	ldr	r6, [pc, #120]	; (1bff8 <nrfx_twi_0_irq_handler+0xd4>)
   1bf7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1bf80:	ad01      	add	r5, sp, #4
   1bf82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bf84:	6833      	ldr	r3, [r6, #0]
   1bf86:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   1bf88:	b347      	cbz	r7, 1bfdc <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
   1bf8a:	4a1a      	ldr	r2, [pc, #104]	; (1bff4 <nrfx_twi_0_irq_handler+0xd0>)
   1bf8c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1bf90:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1bf94:	f013 0102 	ands.w	r1, r3, #2
   1bf98:	d006      	beq.n	1bfa8 <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1bf9a:	2301      	movs	r3, #1
   1bf9c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1bfa0:	2300      	movs	r3, #0
   1bfa2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1bfa6:	e007      	b.n	1bfb8 <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1bfa8:	f013 0204 	ands.w	r2, r3, #4
   1bfac:	d009      	beq.n	1bfc2 <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1bfae:	2302      	movs	r3, #2
   1bfb0:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1bfb4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
   1bfb8:	e9d4 3100 	ldrd	r3, r1, [r4]
   1bfbc:	4668      	mov	r0, sp
   1bfbe:	4798      	blx	r3
}
   1bfc0:	e013      	b.n	1bfea <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1bfc2:	f013 0301 	ands.w	r3, r3, #1
   1bfc6:	d005      	beq.n	1bfd4 <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
   1bfc8:	2303      	movs	r3, #3
   1bfca:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1bfce:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1bfd2:	e7f1      	b.n	1bfb8 <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1bfd4:	2204      	movs	r2, #4
   1bfd6:	f88d 2000 	strb.w	r2, [sp]
   1bfda:	e7e2      	b.n	1bfa2 <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1bfdc:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
   1bfde:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1bfe2:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
   1bfe4:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1bfe8:	d5e6      	bpl.n	1bfb8 <nrfx_twi_0_irq_handler+0x94>
}
   1bfea:	b007      	add	sp, #28
   1bfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bfee:	bf00      	nop
   1bff0:	20002e78 	.word	0x20002e78
   1bff4:	40003000 	.word	0x40003000
   1bff8:	20002e84 	.word	0x20002e84

0001bffc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1bffc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1bffe:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1c002:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1c004:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1c006:	6002      	str	r2, [r0, #0]
}
   1c008:	4802      	ldr	r0, [pc, #8]	; (1c014 <nrf_gpio_pin_port_decode+0x18>)
   1c00a:	bf18      	it	ne
   1c00c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1c010:	4770      	bx	lr
   1c012:	bf00      	nop
   1c014:	50000300 	.word	0x50000300

0001c018 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1c018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c01a:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1c01c:	f004 ff7e 	bl	20f1c <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1c020:	4608      	mov	r0, r1
   1c022:	f004 ff7b 	bl	20f1c <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c026:	a801      	add	r0, sp, #4
   1c028:	9601      	str	r6, [sp, #4]
   1c02a:	f7ff ffe7 	bl	1bffc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1c02e:	9b01      	ldr	r3, [sp, #4]
   1c030:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   1c034:	460c      	mov	r4, r1
   1c036:	f240 610d 	movw	r1, #1549	; 0x60d
   1c03a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c03e:	a801      	add	r0, sp, #4
   1c040:	9401      	str	r4, [sp, #4]
   1c042:	f7ff ffdb 	bl	1bffc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1c046:	9b01      	ldr	r3, [sp, #4]
   1c048:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1c04c:	2509      	movs	r5, #9
   1c04e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   1c052:	2004      	movs	r0, #4
   1c054:	f004 fe70 	bl	20d38 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c058:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c05a:	a801      	add	r0, sp, #4
   1c05c:	9401      	str	r4, [sp, #4]
   1c05e:	f7ff ffcd 	bl	1bffc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c062:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1c064:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c068:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1c06a:	07db      	lsls	r3, r3, #31
   1c06c:	d415      	bmi.n	1c09a <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c06e:	a801      	add	r0, sp, #4
   1c070:	9601      	str	r6, [sp, #4]
   1c072:	f7ff ffc3 	bl	1bffc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c076:	9b01      	ldr	r3, [sp, #4]
   1c078:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1c07c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1c080:	2004      	movs	r0, #4
   1c082:	f004 fe59 	bl	20d38 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1c086:	4630      	mov	r0, r6
   1c088:	f004 ff48 	bl	20f1c <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   1c08c:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   1c08e:	2004      	movs	r0, #4
   1c090:	f004 fe52 	bl	20d38 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1c094:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1c098:	d1df      	bne.n	1c05a <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c09a:	a801      	add	r0, sp, #4
   1c09c:	9401      	str	r4, [sp, #4]
   1c09e:	f7ff ffad 	bl	1bffc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c0a2:	9a01      	ldr	r2, [sp, #4]
   1c0a4:	2301      	movs	r3, #1
   1c0a6:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1c0a8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1c0ac:	2004      	movs	r0, #4
   1c0ae:	f004 fe43 	bl	20d38 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	f004 ff32 	bl	20f1c <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1c0b8:	2004      	movs	r0, #4
   1c0ba:	f004 fe3d 	bl	20d38 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c0be:	a801      	add	r0, sp, #4
   1c0c0:	9401      	str	r4, [sp, #4]
   1c0c2:	f7ff ff9b 	bl	1bffc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c0c6:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1c0c8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1c0cc:	4803      	ldr	r0, [pc, #12]	; (1c0dc <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c0ce:	40d3      	lsrs	r3, r2
   1c0d0:	f003 0301 	and.w	r3, r3, #1
   1c0d4:	1ac0      	subs	r0, r0, r3
   1c0d6:	b003      	add	sp, #12
   1c0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c0da:	bf00      	nop
   1c0dc:	0bad0001 	.word	0x0bad0001

0001c0e0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1c0e0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c0e2:	4c11      	ldr	r4, [pc, #68]	; (1c128 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1c0e4:	4a11      	ldr	r2, [pc, #68]	; (1c12c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1c0e6:	4912      	ldr	r1, [pc, #72]	; (1c130 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c0e8:	2303      	movs	r3, #3
   1c0ea:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1c0ec:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c0ee:	4b11      	ldr	r3, [pc, #68]	; (1c134 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1c0f0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c0f2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1c0f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1c0f8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1c0fa:	2300      	movs	r3, #0
   1c0fc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1c0fe:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c100:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1c102:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c104:	4a0c      	ldr	r2, [pc, #48]	; (1c138 <_DoInit+0x58>)
   1c106:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1c108:	2210      	movs	r2, #16
   1c10a:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   1c10c:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   1c10e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1c110:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c112:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1c114:	f002 fff7 	bl	1f106 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1c118:	4908      	ldr	r1, [pc, #32]	; (1c13c <_DoInit+0x5c>)
   1c11a:	4620      	mov	r0, r4
   1c11c:	f002 fff3 	bl	1f106 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1c120:	2320      	movs	r3, #32
   1c122:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1c124:	bd10      	pop	{r4, pc}
   1c126:	bf00      	nop
   1c128:	20002eb4 	.word	0x20002eb4
   1c12c:	00024081 	.word	0x00024081
   1c130:	0002408a 	.word	0x0002408a
   1c134:	20003167 	.word	0x20003167
   1c138:	20003157 	.word	0x20003157
   1c13c:	0002408e 	.word	0x0002408e

0001c140 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1c144:	4f21      	ldr	r7, [pc, #132]	; (1c1cc <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1c146:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c14a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1c14c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c150:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1c152:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1c154:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1c156:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c158:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1c15a:	d831      	bhi.n	1c1c0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1c15c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1c160:	ebaa 0905 	sub.w	r9, sl, r5
   1c164:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1c168:	4294      	cmp	r4, r2
   1c16a:	d811      	bhi.n	1c190 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c16c:	2318      	movs	r3, #24
   1c16e:	fb06 3303 	mla	r3, r6, r3, r3
   1c172:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1c174:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c176:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1c178:	4641      	mov	r1, r8
   1c17a:	4428      	add	r0, r5
   1c17c:	f003 f80d 	bl	1f19a <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1c180:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1c182:	2318      	movs	r3, #24
   1c184:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1c188:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1c18a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1c18c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1c190:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1c192:	429c      	cmp	r4, r3
   1c194:	d818      	bhi.n	1c1c8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c196:	fb00 bb0b 	mla	fp, r0, fp, fp
   1c19a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1c19c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1c19e:	f8db 0004 	ldr.w	r0, [fp, #4]
   1c1a2:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1c1a4:	4428      	add	r0, r5
   1c1a6:	f002 fff8 	bl	1f19a <memcpy>
      if (NumBytes) {
   1c1aa:	ebb4 040a 	subs.w	r4, r4, sl
   1c1ae:	d0e8      	beq.n	1c182 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1c1b0:	f8db 0004 	ldr.w	r0, [fp, #4]
   1c1b4:	4622      	mov	r2, r4
   1c1b6:	eb08 0109 	add.w	r1, r8, r9
   1c1ba:	f002 ffee 	bl	1f19a <memcpy>
      return 1;
   1c1be:	e7e0      	b.n	1c182 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1c1c0:	3b01      	subs	r3, #1
   1c1c2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1c1c4:	42a3      	cmp	r3, r4
   1c1c6:	d2d1      	bcs.n	1c16c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1c1c8:	2000      	movs	r0, #0
   1c1ca:	e7df      	b.n	1c18c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1c1cc:	20002eb4 	.word	0x20002eb4

0001c1d0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1c1d2:	4b14      	ldr	r3, [pc, #80]	; (1c224 <SEGGER_RTT_WriteNoLock+0x54>)
   1c1d4:	2718      	movs	r7, #24
   1c1d6:	fb00 7507 	mla	r5, r0, r7, r7
   1c1da:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1c1dc:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c1e0:	460e      	mov	r6, r1
  switch (pRing->Flags) {
   1c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c1e4:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1c1e6:	4614      	mov	r4, r2
  switch (pRing->Flags) {
   1c1e8:	d00a      	beq.n	1c200 <SEGGER_RTT_WriteNoLock+0x30>
   1c1ea:	2b02      	cmp	r3, #2
   1c1ec:	d014      	beq.n	1c218 <SEGGER_RTT_WriteNoLock+0x48>
   1c1ee:	b923      	cbnz	r3, 1c1fa <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1c1f0:	4628      	mov	r0, r5
   1c1f2:	f004 fea0 	bl	20f36 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1c1f6:	4284      	cmp	r4, r0
   1c1f8:	d908      	bls.n	1c20c <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
   1c1fa:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   1c1fc:	4620      	mov	r0, r4
   1c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1c200:	4628      	mov	r0, r5
   1c202:	f004 fe98 	bl	20f36 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1c206:	4284      	cmp	r4, r0
   1c208:	bf28      	it	cs
   1c20a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1c20c:	4622      	mov	r2, r4
   1c20e:	4631      	mov	r1, r6
   1c210:	4628      	mov	r0, r5
   1c212:	f004 fe99 	bl	20f48 <_WriteNoCheck>
    break;
   1c216:	e7f1      	b.n	1c1fc <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1c218:	4628      	mov	r0, r5
}
   1c21a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1c21e:	f004 beae 	b.w	20f7e <_WriteBlocking>
   1c222:	bf00      	nop
   1c224:	20002eb4 	.word	0x20002eb4

0001c228 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1c228:	4b03      	ldr	r3, [pc, #12]	; (1c238 <SEGGER_RTT_HasDataUp+0x10>)
   1c22a:	2218      	movs	r2, #24
   1c22c:	fb02 3300 	mla	r3, r2, r0, r3
   1c230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1c232:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1c234:	1a80      	subs	r0, r0, r2
   1c236:	4770      	bx	lr
   1c238:	20002eb4 	.word	0x20002eb4

0001c23c <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1c23c:	4803      	ldr	r0, [pc, #12]	; (1c24c <zephyr_rtt_mutex_lock+0x10>)
   1c23e:	f04f 32ff 	mov.w	r2, #4294967295
   1c242:	f04f 33ff 	mov.w	r3, #4294967295
   1c246:	f000 ba9f 	b.w	1c788 <z_impl_k_mutex_lock>
   1c24a:	bf00      	nop
   1c24c:	20000830 	.word	0x20000830

0001c250 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1c250:	4801      	ldr	r0, [pc, #4]	; (1c258 <zephyr_rtt_mutex_unlock+0x8>)
   1c252:	f000 bb13 	b.w	1c87c <z_impl_k_mutex_unlock>
   1c256:	bf00      	nop
   1c258:	20000830 	.word	0x20000830

0001c25c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c260:	b086      	sub	sp, #24
   1c262:	4605      	mov	r5, r0
   1c264:	af00      	add	r7, sp, #0
   1c266:	460e      	mov	r6, r1
   1c268:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c26c:	f3ef 8811 	mrs	r8, BASEPRI
   1c270:	f383 8812 	msr	BASEPRI_MAX, r3
   1c274:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1c278:	f000 ffd4 	bl	1d224 <z_impl_z_current_get>
   1c27c:	2d04      	cmp	r5, #4
   1c27e:	bf96      	itet	ls
   1c280:	4b2c      	ldrls	r3, [pc, #176]	; (1c334 <z_fatal_error+0xd8>)
   1c282:	4b2d      	ldrhi	r3, [pc, #180]	; (1c338 <z_fatal_error+0xdc>)
   1c284:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c288:	46e9      	mov	r9, sp
   1c28a:	b08a      	sub	sp, #40	; 0x28
   1c28c:	4604      	mov	r4, r0
   1c28e:	466a      	mov	r2, sp
   1c290:	492a      	ldr	r1, [pc, #168]	; (1c33c <z_fatal_error+0xe0>)
   1c292:	61d3      	str	r3, [r2, #28]
   1c294:	f240 3301 	movw	r3, #769	; 0x301
   1c298:	8493      	strh	r3, [r2, #36]	; 0x24
   1c29a:	f04f 0a00 	mov.w	sl, #0
   1c29e:	4b28      	ldr	r3, [pc, #160]	; (1c340 <z_fatal_error+0xe4>)
   1c2a0:	f8c2 a020 	str.w	sl, [r2, #32]
   1c2a4:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1c2a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2ac:	4825      	ldr	r0, [pc, #148]	; (1c344 <z_fatal_error+0xe8>)
   1c2ae:	4653      	mov	r3, sl
   1c2b0:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1c2b4:	f7f6 f9ca 	bl	1264c <z_impl_z_log_msg_static_create>
   1c2b8:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c2ba:	b17e      	cbz	r6, 1c2dc <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1c2bc:	69f3      	ldr	r3, [r6, #28]
   1c2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c2c2:	b15b      	cbz	r3, 1c2dc <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1c2c4:	4b20      	ldr	r3, [pc, #128]	; (1c348 <z_fatal_error+0xec>)
   1c2c6:	617b      	str	r3, [r7, #20]
   1c2c8:	2302      	movs	r3, #2
   1c2ca:	613b      	str	r3, [r7, #16]
   1c2cc:	481d      	ldr	r0, [pc, #116]	; (1c344 <z_fatal_error+0xe8>)
   1c2ce:	4653      	mov	r3, sl
   1c2d0:	f107 0210 	add.w	r2, r7, #16
   1c2d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c2d8:	f7f6 f9b8 	bl	1264c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1c2dc:	b12c      	cbz	r4, 1c2ea <z_fatal_error+0x8e>
   1c2de:	4620      	mov	r0, r4
   1c2e0:	f004 ff49 	bl	21176 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1c2e4:	b108      	cbz	r0, 1c2ea <z_fatal_error+0x8e>
   1c2e6:	7803      	ldrb	r3, [r0, #0]
   1c2e8:	b903      	cbnz	r3, 1c2ec <z_fatal_error+0x90>
		thread_name = "unknown";
   1c2ea:	4818      	ldr	r0, [pc, #96]	; (1c34c <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1c2ec:	46e9      	mov	r9, sp
   1c2ee:	b08a      	sub	sp, #40	; 0x28
   1c2f0:	466a      	mov	r2, sp
   1c2f2:	4b17      	ldr	r3, [pc, #92]	; (1c350 <z_fatal_error+0xf4>)
   1c2f4:	61d0      	str	r0, [r2, #28]
   1c2f6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c2fa:	f240 3301 	movw	r3, #769	; 0x301
   1c2fe:	8413      	strh	r3, [r2, #32]
   1c300:	4b14      	ldr	r3, [pc, #80]	; (1c354 <z_fatal_error+0xf8>)
   1c302:	f842 3f10 	str.w	r3, [r2, #16]!
   1c306:	2300      	movs	r3, #0
   1c308:	480e      	ldr	r0, [pc, #56]	; (1c344 <z_fatal_error+0xe8>)
   1c30a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c30e:	f7f6 f99d 	bl	1264c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1c312:	4631      	mov	r1, r6
   1c314:	46cd      	mov	sp, r9
   1c316:	4628      	mov	r0, r5
   1c318:	f7fd ff88 	bl	1a22c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1c31c:	f388 8811 	msr	BASEPRI, r8
   1c320:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c324:	4620      	mov	r0, r4
   1c326:	f7f7 fc39 	bl	13b9c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1c32a:	3718      	adds	r7, #24
   1c32c:	46bd      	mov	sp, r7
   1c32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c332:	bf00      	nop
   1c334:	000224a4 	.word	0x000224a4
   1c338:	00024095 	.word	0x00024095
   1c33c:	000240ab 	.word	0x000240ab
   1c340:	01000005 	.word	0x01000005
   1c344:	00021eec 	.word	0x00021eec
   1c348:	000240d3 	.word	0x000240d3
   1c34c:	000240a3 	.word	0x000240a3
   1c350:	000240f4 	.word	0x000240f4
   1c354:	01000004 	.word	0x01000004

0001c358 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c358:	4b0f      	ldr	r3, [pc, #60]	; (1c398 <z_sys_init_run_level+0x40>)
{
   1c35a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c35c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c360:	3001      	adds	r0, #1
   1c362:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1c366:	42a6      	cmp	r6, r4
   1c368:	d800      	bhi.n	1c36c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1c36a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1c36c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1c370:	4628      	mov	r0, r5
   1c372:	4798      	blx	r3
		if (dev != NULL) {
   1c374:	b16d      	cbz	r5, 1c392 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1c376:	b138      	cbz	r0, 1c388 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1c378:	2800      	cmp	r0, #0
   1c37a:	bfb8      	it	lt
   1c37c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1c37e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1c380:	28ff      	cmp	r0, #255	; 0xff
   1c382:	bfa8      	it	ge
   1c384:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1c386:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1c388:	68ea      	ldr	r2, [r5, #12]
   1c38a:	7853      	ldrb	r3, [r2, #1]
   1c38c:	f043 0301 	orr.w	r3, r3, #1
   1c390:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c392:	3408      	adds	r4, #8
   1c394:	e7e7      	b.n	1c366 <z_sys_init_run_level+0xe>
   1c396:	bf00      	nop
   1c398:	000224b8 	.word	0x000224b8

0001c39c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1c39c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1c39e:	4b0a      	ldr	r3, [pc, #40]	; (1c3c8 <bg_thread_main+0x2c>)
   1c3a0:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1c3a2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1c3a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1c3a6:	f7ff ffd7 	bl	1c358 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1c3aa:	f001 fa67 	bl	1d87c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1c3ae:	2004      	movs	r0, #4
   1c3b0:	f7ff ffd2 	bl	1c358 <z_sys_init_run_level>

	z_init_static_threads();
   1c3b4:	f000 f970 	bl	1c698 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1c3b8:	f7f5 f90e 	bl	115d8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c3bc:	4a03      	ldr	r2, [pc, #12]	; (1c3cc <bg_thread_main+0x30>)
   1c3be:	7b13      	ldrb	r3, [r2, #12]
   1c3c0:	f023 0301 	bic.w	r3, r3, #1
   1c3c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c3c6:	bd08      	pop	{r3, pc}
   1c3c8:	20003567 	.word	0x20003567
   1c3cc:	20002950 	.word	0x20002950

0001c3d0 <z_bss_zero>:
{
   1c3d0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1c3d2:	4803      	ldr	r0, [pc, #12]	; (1c3e0 <z_bss_zero+0x10>)
   1c3d4:	4a03      	ldr	r2, [pc, #12]	; (1c3e4 <z_bss_zero+0x14>)
   1c3d6:	2100      	movs	r1, #0
   1c3d8:	1a12      	subs	r2, r2, r0
   1c3da:	f004 fe0d 	bl	20ff8 <z_early_memset>
}
   1c3de:	bd08      	pop	{r3, pc}
   1c3e0:	20000998 	.word	0x20000998
   1c3e4:	20003568 	.word	0x20003568

0001c3e8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1c3e8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1c3ea:	4e16      	ldr	r6, [pc, #88]	; (1c444 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c3ec:	4d16      	ldr	r5, [pc, #88]	; (1c448 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1c3ee:	4917      	ldr	r1, [pc, #92]	; (1c44c <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
   1c3f0:	23c8      	movs	r3, #200	; 0xc8
{
   1c3f2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1c3f4:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1c3f8:	2201      	movs	r2, #1
   1c3fa:	2300      	movs	r3, #0
   1c3fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c400:	220f      	movs	r2, #15
   1c402:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c406:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c408:	231c      	movs	r3, #28
   1c40a:	fb03 5500 	mla	r5, r3, r0, r5
{
   1c40e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1c410:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1c414:	fb00 1104 	mla	r1, r0, r4, r1
   1c418:	4b0d      	ldr	r3, [pc, #52]	; (1c450 <z_init_cpu+0x68>)
   1c41a:	9500      	str	r5, [sp, #0]
   1c41c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c420:	4630      	mov	r0, r6
   1c422:	f000 f8db 	bl	1c5dc <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c426:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1c428:	4a0a      	ldr	r2, [pc, #40]	; (1c454 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1c42a:	60ee      	str	r6, [r5, #12]
   1c42c:	f023 0304 	bic.w	r3, r3, #4
   1c430:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1c432:	f44f 6308 	mov.w	r3, #2176	; 0x880
   1c436:	fb04 3303 	mla	r3, r4, r3, r3
   1c43a:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1c43c:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1c43e:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1c440:	b006      	add	sp, #24
   1c442:	bd70      	pop	{r4, r5, r6, pc}
   1c444:	20002888 	.word	0x20002888
   1c448:	20002f5c 	.word	0x20002f5c
   1c44c:	20005a80 	.word	0x20005a80
   1c450:	0001c751 	.word	0x0001c751
   1c454:	20005200 	.word	0x20005200

0001c458 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1c458:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1c45a:	2000      	movs	r0, #0
{
   1c45c:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1c45e:	f7ff ff7b 	bl	1c358 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1c462:	4b2e      	ldr	r3, [pc, #184]	; (1c51c <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c464:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1c468:	4d2d      	ldr	r5, [pc, #180]	; (1c520 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1c46a:	4e2e      	ldr	r6, [pc, #184]	; (1c524 <z_cstart+0xcc>)
   1c46c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c46e:	4f2e      	ldr	r7, [pc, #184]	; (1c528 <z_cstart+0xd0>)
   1c470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1c474:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c476:	23e0      	movs	r3, #224	; 0xe0
   1c478:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1c47c:	2400      	movs	r4, #0
   1c47e:	2320      	movs	r3, #32
   1c480:	77eb      	strb	r3, [r5, #31]
   1c482:	762c      	strb	r4, [r5, #24]
   1c484:	766c      	strb	r4, [r5, #25]
   1c486:	76ac      	strb	r4, [r5, #26]
   1c488:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c48c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c48e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c492:	626b      	str	r3, [r5, #36]	; 0x24
   1c494:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c498:	f7f7 faf4 	bl	13a84 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c49c:	f7f6 fd78 	bl	12f90 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c4a0:	f04f 33ff 	mov.w	r3, #4294967295
   1c4a4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c4a6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1c4a8:	f7f7 fc4e 	bl	13d48 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1c4ac:	f7f7 fb8c 	bl	13bc8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1c4b0:	f7f5 ff5c 	bl	1236c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c4b4:	f240 1301 	movw	r3, #257	; 0x101
   1c4b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1c4bc:	ab06      	add	r3, sp, #24
   1c4be:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1c4c0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1c4c4:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1c4c6:	f004 fd8b 	bl	20fe0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1c4ca:	2001      	movs	r0, #1
   1c4cc:	f7ff ff44 	bl	1c358 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1c4d0:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1c4d2:	4d16      	ldr	r5, [pc, #88]	; (1c52c <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1c4d4:	f7ff ff40 	bl	1c358 <z_sys_init_run_level>
	z_sched_init();
   1c4d8:	f000 fdfc 	bl	1d0d4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c4dc:	4b14      	ldr	r3, [pc, #80]	; (1c530 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   1c4de:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c4e0:	9305      	str	r3, [sp, #20]
   1c4e2:	2301      	movs	r3, #1
   1c4e4:	4913      	ldr	r1, [pc, #76]	; (1c534 <z_cstart+0xdc>)
   1c4e6:	9400      	str	r4, [sp, #0]
   1c4e8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1c4ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c4f0:	463b      	mov	r3, r7
   1c4f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c4f6:	4628      	mov	r0, r5
   1c4f8:	f000 f870 	bl	1c5dc <z_setup_new_thread>
   1c4fc:	7b6a      	ldrb	r2, [r5, #13]
   1c4fe:	4606      	mov	r6, r0
   1c500:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1c504:	4628      	mov	r0, r5
   1c506:	736a      	strb	r2, [r5, #13]
   1c508:	f005 f859 	bl	215be <z_ready_thread>
	z_init_cpu(0);
   1c50c:	4620      	mov	r0, r4
   1c50e:	f7ff ff6b 	bl	1c3e8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c512:	463a      	mov	r2, r7
   1c514:	4631      	mov	r1, r6
   1c516:	4628      	mov	r0, r5
   1c518:	f7f6 ff8a 	bl	13430 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c51c:	20005a80 	.word	0x20005a80
   1c520:	e000ed00 	.word	0xe000ed00
   1c524:	20002f5c 	.word	0x20002f5c
   1c528:	0001c39d 	.word	0x0001c39d
   1c52c:	20002950 	.word	0x20002950
   1c530:	00024156 	.word	0x00024156
   1c534:	20005c00 	.word	0x20005c00

0001c538 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1c538:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c53a:	4c06      	ldr	r4, [pc, #24]	; (1c554 <statics_init+0x1c>)
   1c53c:	4d06      	ldr	r5, [pc, #24]	; (1c558 <statics_init+0x20>)
   1c53e:	42ac      	cmp	r4, r5
   1c540:	d301      	bcc.n	1c546 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1c542:	2000      	movs	r0, #0
   1c544:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c546:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1c54a:	4620      	mov	r0, r4
   1c54c:	f004 fd58 	bl	21000 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c550:	3414      	adds	r4, #20
   1c552:	e7f4      	b.n	1c53e <statics_init+0x6>
   1c554:	2000081c 	.word	0x2000081c
   1c558:	2000081c 	.word	0x2000081c

0001c55c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c55c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c55e:	4c06      	ldr	r4, [pc, #24]	; (1c578 <init_mem_slab_module+0x1c>)
   1c560:	4d06      	ldr	r5, [pc, #24]	; (1c57c <init_mem_slab_module+0x20>)
	int rc = 0;
   1c562:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c564:	42ac      	cmp	r4, r5
   1c566:	d300      	bcc.n	1c56a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1c568:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1c56a:	4620      	mov	r0, r4
   1c56c:	f004 fdbb 	bl	210e6 <create_free_list>
		if (rc < 0) {
   1c570:	2800      	cmp	r0, #0
   1c572:	dbf9      	blt.n	1c568 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c574:	341c      	adds	r4, #28
   1c576:	e7f5      	b.n	1c564 <init_mem_slab_module+0x8>
   1c578:	200007c8 	.word	0x200007c8
   1c57c:	2000081c 	.word	0x2000081c

0001c580 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c580:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c582:	460c      	mov	r4, r1
	__asm__ volatile(
   1c584:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c588:	f3ef 8111 	mrs	r1, BASEPRI
   1c58c:	f385 8812 	msr	BASEPRI_MAX, r5
   1c590:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c594:	6945      	ldr	r5, [r0, #20]
   1c596:	b15d      	cbz	r5, 1c5b0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1c598:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c59a:	682b      	ldr	r3, [r5, #0]
   1c59c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1c59e:	6983      	ldr	r3, [r0, #24]
   1c5a0:	3301      	adds	r3, #1
   1c5a2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1c5a4:	2000      	movs	r0, #0
	__asm__ volatile(
   1c5a6:	f381 8811 	msr	BASEPRI, r1
   1c5aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1c5ae:	e011      	b.n	1c5d4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1c5b0:	ea52 0603 	orrs.w	r6, r2, r3
   1c5b4:	d103      	bne.n	1c5be <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1c5b6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1c5b8:	f06f 000b 	mvn.w	r0, #11
   1c5bc:	e7f3      	b.n	1c5a6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1c5be:	e9cd 2300 	strd	r2, r3, [sp]
   1c5c2:	4602      	mov	r2, r0
   1c5c4:	3008      	adds	r0, #8
   1c5c6:	f000 fc8f 	bl	1cee8 <z_pend_curr>
		if (result == 0) {
   1c5ca:	b918      	cbnz	r0, 1c5d4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1c5cc:	4b02      	ldr	r3, [pc, #8]	; (1c5d8 <k_mem_slab_alloc+0x58>)
   1c5ce:	689b      	ldr	r3, [r3, #8]
   1c5d0:	695b      	ldr	r3, [r3, #20]
   1c5d2:	6023      	str	r3, [r4, #0]
}
   1c5d4:	b002      	add	sp, #8
   1c5d6:	bd70      	pop	{r4, r5, r6, pc}
   1c5d8:	20002f5c 	.word	0x20002f5c

0001c5dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c5dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1c5e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1c5e2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1c5e4:	2604      	movs	r6, #4
   1c5e6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1c5e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1c5ea:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1c5ec:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1c5f0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c5f2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1c5f4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c5f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1c5fa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c5fc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1c600:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1c602:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1c606:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1c60a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1c60c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1c60e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c610:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c614:	9202      	str	r2, [sp, #8]
   1c616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c618:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1c61a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c61c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c61e:	9200      	str	r2, [sp, #0]
   1c620:	4642      	mov	r2, r8
{
   1c622:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c624:	f7f6 fe80 	bl	13328 <arch_new_thread>
	if (!_current) {
   1c628:	4b04      	ldr	r3, [pc, #16]	; (1c63c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1c62a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1c62c:	689b      	ldr	r3, [r3, #8]
   1c62e:	b103      	cbz	r3, 1c632 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1c630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1c632:	6763      	str	r3, [r4, #116]	; 0x74
}
   1c634:	4640      	mov	r0, r8
   1c636:	b004      	add	sp, #16
   1c638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c63c:	20002f5c 	.word	0x20002f5c

0001c640 <z_impl_k_thread_create>:
{
   1c640:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c642:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c644:	2500      	movs	r5, #0
   1c646:	9505      	str	r5, [sp, #20]
   1c648:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1c64a:	9504      	str	r5, [sp, #16]
   1c64c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1c64e:	9503      	str	r5, [sp, #12]
   1c650:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c652:	9502      	str	r5, [sp, #8]
{
   1c654:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c658:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c65a:	9501      	str	r5, [sp, #4]
   1c65c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c65e:	9500      	str	r5, [sp, #0]
{
   1c660:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c662:	f7ff ffbb 	bl	1c5dc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1c666:	f1b6 3fff 	cmp.w	r6, #4294967295
   1c66a:	bf08      	it	eq
   1c66c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1c670:	d005      	beq.n	1c67e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c672:	ea56 0307 	orrs.w	r3, r6, r7
   1c676:	d105      	bne.n	1c684 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1c678:	4620      	mov	r0, r4
   1c67a:	f000 fcab 	bl	1cfd4 <z_sched_start>
}
   1c67e:	4620      	mov	r0, r4
   1c680:	b007      	add	sp, #28
   1c682:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c684:	4903      	ldr	r1, [pc, #12]	; (1c694 <z_impl_k_thread_create+0x54>)
   1c686:	463a      	mov	r2, r7
   1c688:	4633      	mov	r3, r6
   1c68a:	f104 0018 	add.w	r0, r4, #24
   1c68e:	f000 fea9 	bl	1d3e4 <z_add_timeout>
   1c692:	e7f4      	b.n	1c67e <z_impl_k_thread_create+0x3e>
   1c694:	0002152b 	.word	0x0002152b

0001c698 <z_init_static_threads>:
{
   1c698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c69c:	4c29      	ldr	r4, [pc, #164]	; (1c744 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1c69e:	4d2a      	ldr	r5, [pc, #168]	; (1c748 <z_init_static_threads+0xb0>)
{
   1c6a0:	b087      	sub	sp, #28
   1c6a2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1c6a4:	42ae      	cmp	r6, r5
   1c6a6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1c6aa:	d30f      	bcc.n	1c6cc <z_init_static_threads+0x34>
	k_sched_lock();
   1c6ac:	f000 fce2 	bl	1d074 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c6b0:	4c24      	ldr	r4, [pc, #144]	; (1c744 <z_init_static_threads+0xac>)
   1c6b2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1c74c <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
   1c6b6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c6ba:	f240 37e7 	movw	r7, #999	; 0x3e7
   1c6be:	42ac      	cmp	r4, r5
   1c6c0:	d320      	bcc.n	1c704 <z_init_static_threads+0x6c>
}
   1c6c2:	b007      	add	sp, #28
   1c6c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1c6c8:	f000 bce8 	b.w	1d09c <k_sched_unlock>
		z_setup_new_thread(
   1c6cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c6d0:	9305      	str	r3, [sp, #20]
   1c6d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c6d6:	9304      	str	r3, [sp, #16]
   1c6d8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c6dc:	9303      	str	r3, [sp, #12]
   1c6de:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c6e2:	9302      	str	r3, [sp, #8]
   1c6e4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c6e8:	9301      	str	r3, [sp, #4]
   1c6ea:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c6ee:	9300      	str	r3, [sp, #0]
   1c6f0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c6f4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c6f8:	f7ff ff70 	bl	1c5dc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c6fc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c700:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1c702:	e7ce      	b.n	1c6a2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1c704:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c706:	1c5a      	adds	r2, r3, #1
   1c708:	d00d      	beq.n	1c726 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1c70a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c70e:	2100      	movs	r1, #0
   1c710:	4638      	mov	r0, r7
   1c712:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c716:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1c71a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c71e:	d104      	bne.n	1c72a <z_init_static_threads+0x92>
	z_sched_start(thread);
   1c720:	4640      	mov	r0, r8
   1c722:	f000 fc57 	bl	1cfd4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c726:	3430      	adds	r4, #48	; 0x30
   1c728:	e7c9      	b.n	1c6be <z_init_static_threads+0x26>
   1c72a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c72e:	2300      	movs	r3, #0
   1c730:	f7e3 fce6 	bl	100 <__aeabi_uldivmod>
   1c734:	4602      	mov	r2, r0
   1c736:	460b      	mov	r3, r1
   1c738:	f108 0018 	add.w	r0, r8, #24
   1c73c:	4649      	mov	r1, r9
   1c73e:	f000 fe51 	bl	1d3e4 <z_add_timeout>
   1c742:	e7f0      	b.n	1c726 <z_init_static_threads+0x8e>
   1c744:	00021dc0 	.word	0x00021dc0
   1c748:	00021dc0 	.word	0x00021dc0
   1c74c:	0002152b 	.word	0x0002152b

0001c750 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1c750:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1c752:	4c0b      	ldr	r4, [pc, #44]	; (1c780 <idle+0x30>)
	return !z_sys_post_kernel;
   1c754:	4d0b      	ldr	r5, [pc, #44]	; (1c784 <idle+0x34>)
	__asm__ volatile(
   1c756:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c75a:	f3ef 8311 	mrs	r3, BASEPRI
   1c75e:	f382 8812 	msr	BASEPRI_MAX, r2
   1c762:	f3bf 8f6f 	isb	sy
   1c766:	f004 fff0 	bl	2174a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1c76a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1c76c:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1c76e:	b913      	cbnz	r3, 1c776 <idle+0x26>
	arch_cpu_idle();
   1c770:	f7f6 fc14 	bl	12f9c <arch_cpu_idle>
}
   1c774:	e7ef      	b.n	1c756 <idle+0x6>
   1c776:	f7f6 fadf 	bl	12d38 <pm_system_suspend>
   1c77a:	2800      	cmp	r0, #0
   1c77c:	d1eb      	bne.n	1c756 <idle+0x6>
   1c77e:	e7f7      	b.n	1c770 <idle+0x20>
   1c780:	20002f5c 	.word	0x20002f5c
   1c784:	20003567 	.word	0x20003567

0001c788 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1c788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c78c:	4604      	mov	r4, r0
   1c78e:	4617      	mov	r7, r2
   1c790:	461e      	mov	r6, r3
   1c792:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c796:	f3ef 8811 	mrs	r8, BASEPRI
   1c79a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c79e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c7a2:	68c3      	ldr	r3, [r0, #12]
   1c7a4:	4a33      	ldr	r2, [pc, #204]	; (1c874 <z_impl_k_mutex_lock+0xec>)
   1c7a6:	b17b      	cbz	r3, 1c7c8 <z_impl_k_mutex_lock+0x40>
   1c7a8:	6880      	ldr	r0, [r0, #8]
   1c7aa:	6891      	ldr	r1, [r2, #8]
   1c7ac:	4288      	cmp	r0, r1
   1c7ae:	d019      	beq.n	1c7e4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1c7b0:	ea57 0306 	orrs.w	r3, r7, r6
   1c7b4:	d118      	bne.n	1c7e8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1c7b6:	f388 8811 	msr	BASEPRI, r8
   1c7ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1c7be:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1c7c2:	b002      	add	sp, #8
   1c7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1c7c8:	6891      	ldr	r1, [r2, #8]
   1c7ca:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c7ce:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1c7d0:	3301      	adds	r3, #1
   1c7d2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1c7d4:	6893      	ldr	r3, [r2, #8]
   1c7d6:	60a3      	str	r3, [r4, #8]
   1c7d8:	f388 8811 	msr	BASEPRI, r8
   1c7dc:	f3bf 8f6f 	isb	sy
		return 0;
   1c7e0:	2000      	movs	r0, #0
   1c7e2:	e7ee      	b.n	1c7c2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1c7e4:	6921      	ldr	r1, [r4, #16]
   1c7e6:	e7f2      	b.n	1c7ce <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c7e8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1c7ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1c7f0:	4299      	cmp	r1, r3
   1c7f2:	bfa8      	it	ge
   1c7f4:	4619      	movge	r1, r3
   1c7f6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1c7fa:	4291      	cmp	r1, r2
   1c7fc:	bfb8      	it	lt
   1c7fe:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c800:	428b      	cmp	r3, r1
   1c802:	dd2e      	ble.n	1c862 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1c804:	f004 fcc2 	bl	2118c <adjust_owner_prio.isra.0>
   1c808:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c80a:	e9cd 7600 	strd	r7, r6, [sp]
   1c80e:	481a      	ldr	r0, [pc, #104]	; (1c878 <z_impl_k_mutex_lock+0xf0>)
   1c810:	4622      	mov	r2, r4
   1c812:	4641      	mov	r1, r8
   1c814:	f000 fb68 	bl	1cee8 <z_pend_curr>
	if (got_mutex == 0) {
   1c818:	2800      	cmp	r0, #0
   1c81a:	d0e1      	beq.n	1c7e0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1c81c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c820:	f3ef 8611 	mrs	r6, BASEPRI
   1c824:	f383 8812 	msr	BASEPRI_MAX, r3
   1c828:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1c82c:	68a0      	ldr	r0, [r4, #8]
   1c82e:	b1d0      	cbz	r0, 1c866 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c830:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c832:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c834:	429c      	cmp	r4, r3
   1c836:	d00a      	beq.n	1c84e <z_impl_k_mutex_lock+0xc6>
   1c838:	b14b      	cbz	r3, 1c84e <z_impl_k_mutex_lock+0xc6>
   1c83a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c83e:	4299      	cmp	r1, r3
   1c840:	bfa8      	it	ge
   1c842:	4619      	movge	r1, r3
   1c844:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1c848:	4299      	cmp	r1, r3
   1c84a:	bfb8      	it	lt
   1c84c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c84e:	f004 fc9d 	bl	2118c <adjust_owner_prio.isra.0>
   1c852:	b140      	cbz	r0, 1c866 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1c854:	4808      	ldr	r0, [pc, #32]	; (1c878 <z_impl_k_mutex_lock+0xf0>)
   1c856:	4631      	mov	r1, r6
   1c858:	f000 fbaa 	bl	1cfb0 <z_reschedule>
	return -EAGAIN;
   1c85c:	f06f 000a 	mvn.w	r0, #10
   1c860:	e7af      	b.n	1c7c2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1c862:	2500      	movs	r5, #0
   1c864:	e7d1      	b.n	1c80a <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1c866:	2d00      	cmp	r5, #0
   1c868:	d1f4      	bne.n	1c854 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1c86a:	f386 8811 	msr	BASEPRI, r6
   1c86e:	f3bf 8f6f 	isb	sy
   1c872:	e7f3      	b.n	1c85c <z_impl_k_mutex_lock+0xd4>
   1c874:	20002f5c 	.word	0x20002f5c
   1c878:	20003568 	.word	0x20003568

0001c87c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c87c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1c87e:	6883      	ldr	r3, [r0, #8]
{
   1c880:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1c882:	b36b      	cbz	r3, 1c8e0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1c884:	4a19      	ldr	r2, [pc, #100]	; (1c8ec <z_impl_k_mutex_unlock+0x70>)
   1c886:	6892      	ldr	r2, [r2, #8]
   1c888:	4293      	cmp	r3, r2
   1c88a:	d12c      	bne.n	1c8e6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1c88c:	68c3      	ldr	r3, [r0, #12]
   1c88e:	2b01      	cmp	r3, #1
   1c890:	d903      	bls.n	1c89a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1c892:	3b01      	subs	r3, #1
   1c894:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1c896:	2000      	movs	r0, #0
}
   1c898:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c89a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c89e:	f3ef 8511 	mrs	r5, BASEPRI
   1c8a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c8a6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c8aa:	6901      	ldr	r1, [r0, #16]
   1c8ac:	6880      	ldr	r0, [r0, #8]
   1c8ae:	f004 fc6d 	bl	2118c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c8b2:	4620      	mov	r0, r4
   1c8b4:	f004 feba 	bl	2162c <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c8b8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c8ba:	b158      	cbz	r0, 1c8d4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c8bc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c8c0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c8c2:	2200      	movs	r2, #0
   1c8c4:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1c8c6:	f004 fe7a 	bl	215be <z_ready_thread>
		z_reschedule(&lock, key);
   1c8ca:	4809      	ldr	r0, [pc, #36]	; (1c8f0 <z_impl_k_mutex_unlock+0x74>)
   1c8cc:	4629      	mov	r1, r5
   1c8ce:	f000 fb6f 	bl	1cfb0 <z_reschedule>
   1c8d2:	e7e0      	b.n	1c896 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1c8d4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c8d6:	f385 8811 	msr	BASEPRI, r5
   1c8da:	f3bf 8f6f 	isb	sy
   1c8de:	e7da      	b.n	1c896 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1c8e0:	f06f 0015 	mvn.w	r0, #21
   1c8e4:	e7d8      	b.n	1c898 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1c8e6:	f04f 30ff 	mov.w	r0, #4294967295
   1c8ea:	e7d5      	b.n	1c898 <z_impl_k_mutex_unlock+0x1c>
   1c8ec:	20002f5c 	.word	0x20002f5c
   1c8f0:	20003568 	.word	0x20003568

0001c8f4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1c8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c8f6:	4611      	mov	r1, r2
	__asm__ volatile(
   1c8f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c8fc:	f3ef 8511 	mrs	r5, BASEPRI
   1c900:	f382 8812 	msr	BASEPRI_MAX, r2
   1c904:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1c908:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1c90a:	b19c      	cbz	r4, 1c934 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c90c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c90e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c910:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c914:	4294      	cmp	r4, r2
	list->head = node;
   1c916:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1c918:	bf08      	it	eq
   1c91a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1c91c:	2101      	movs	r1, #1
   1c91e:	4620      	mov	r0, r4
   1c920:	f004 fca2 	bl	21268 <z_queue_node_peek>
   1c924:	4604      	mov	r4, r0
	__asm__ volatile(
   1c926:	f385 8811 	msr	BASEPRI, r5
   1c92a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1c92e:	4620      	mov	r0, r4
   1c930:	b003      	add	sp, #12
   1c932:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c934:	ea51 0203 	orrs.w	r2, r1, r3
   1c938:	d0f5      	beq.n	1c926 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c93a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1c93e:	e9cd 1300 	strd	r1, r3, [sp]
   1c942:	4610      	mov	r0, r2
   1c944:	4629      	mov	r1, r5
   1c946:	f000 facf 	bl	1cee8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1c94a:	2800      	cmp	r0, #0
   1c94c:	d1ef      	bne.n	1c92e <z_impl_k_queue_get+0x3a>
   1c94e:	4b02      	ldr	r3, [pc, #8]	; (1c958 <z_impl_k_queue_get+0x64>)
   1c950:	689b      	ldr	r3, [r3, #8]
   1c952:	695c      	ldr	r4, [r3, #20]
   1c954:	e7eb      	b.n	1c92e <z_impl_k_queue_get+0x3a>
   1c956:	bf00      	nop
   1c958:	20002f5c 	.word	0x20002f5c

0001c95c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1c95c:	b538      	push	{r3, r4, r5, lr}
   1c95e:	4604      	mov	r4, r0
	__asm__ volatile(
   1c960:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c964:	f3ef 8511 	mrs	r5, BASEPRI
   1c968:	f383 8812 	msr	BASEPRI_MAX, r3
   1c96c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1c970:	f004 fe5c 	bl	2162c <z_unpend_first_thread>

	if (thread != NULL) {
   1c974:	b148      	cbz	r0, 1c98a <z_impl_k_sem_give+0x2e>
   1c976:	2200      	movs	r2, #0
   1c978:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1c97a:	f004 fe20 	bl	215be <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1c97e:	4629      	mov	r1, r5
   1c980:	4808      	ldr	r0, [pc, #32]	; (1c9a4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1c982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1c986:	f000 bb13 	b.w	1cfb0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c98a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1c98e:	429a      	cmp	r2, r3
   1c990:	bf18      	it	ne
   1c992:	3301      	addne	r3, #1
   1c994:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c996:	2102      	movs	r1, #2
   1c998:	f104 0010 	add.w	r0, r4, #16
   1c99c:	f005 f896 	bl	21acc <z_handle_obj_poll_events>
}
   1c9a0:	e7ed      	b.n	1c97e <z_impl_k_sem_give+0x22>
   1c9a2:	bf00      	nop
   1c9a4:	20003568 	.word	0x20003568

0001c9a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1c9a8:	b513      	push	{r0, r1, r4, lr}
   1c9aa:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c9ae:	f3ef 8111 	mrs	r1, BASEPRI
   1c9b2:	f384 8812 	msr	BASEPRI_MAX, r4
   1c9b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1c9ba:	6884      	ldr	r4, [r0, #8]
   1c9bc:	b144      	cbz	r4, 1c9d0 <z_impl_k_sem_take+0x28>
		sem->count--;
   1c9be:	3c01      	subs	r4, #1
   1c9c0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1c9c2:	f381 8811 	msr	BASEPRI, r1
   1c9c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1c9ca:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1c9cc:	b002      	add	sp, #8
   1c9ce:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c9d0:	ea52 0403 	orrs.w	r4, r2, r3
   1c9d4:	d106      	bne.n	1c9e4 <z_impl_k_sem_take+0x3c>
   1c9d6:	f381 8811 	msr	BASEPRI, r1
   1c9da:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1c9de:	f06f 000f 	mvn.w	r0, #15
   1c9e2:	e7f3      	b.n	1c9cc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c9e4:	e9cd 2300 	strd	r2, r3, [sp]
   1c9e8:	4602      	mov	r2, r0
   1c9ea:	4802      	ldr	r0, [pc, #8]	; (1c9f4 <z_impl_k_sem_take+0x4c>)
   1c9ec:	f000 fa7c 	bl	1cee8 <z_pend_curr>
	return ret;
   1c9f0:	e7ec      	b.n	1c9cc <z_impl_k_sem_take+0x24>
   1c9f2:	bf00      	nop
   1c9f4:	20003568 	.word	0x20003568

0001c9f8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1c9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1c9fa:	4b09      	ldr	r3, [pc, #36]	; (1ca20 <k_sys_work_q_init+0x28>)
   1c9fc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1c9fe:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1ca00:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1ca02:	9300      	str	r3, [sp, #0]
   1ca04:	4907      	ldr	r1, [pc, #28]	; (1ca24 <k_sys_work_q_init+0x2c>)
   1ca06:	4808      	ldr	r0, [pc, #32]	; (1ca28 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1ca08:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1ca0c:	f04f 33ff 	mov.w	r3, #4294967295
   1ca10:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ca14:	f000 f888 	bl	1cb28 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1ca18:	4620      	mov	r0, r4
   1ca1a:	b004      	add	sp, #16
   1ca1c:	bd10      	pop	{r4, pc}
   1ca1e:	bf00      	nop
   1ca20:	0002415e 	.word	0x0002415e
   1ca24:	20006080 	.word	0x20006080
   1ca28:	20002a18 	.word	0x20002a18

0001ca2c <cancel_sync_locked>:
{
   1ca2c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ca2e:	68c3      	ldr	r3, [r0, #12]
   1ca30:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1ca34:	079b      	lsls	r3, r3, #30
{
   1ca36:	4605      	mov	r5, r0
   1ca38:	460c      	mov	r4, r1
	if (ret) {
   1ca3a:	d50d      	bpl.n	1ca58 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ca3c:	2201      	movs	r2, #1
   1ca3e:	2100      	movs	r1, #0
   1ca40:	f104 0008 	add.w	r0, r4, #8
   1ca44:	f004 fc3d 	bl	212c2 <z_impl_k_sem_init>
	parent->next = child;
   1ca48:	2300      	movs	r3, #0
   1ca4a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ca4c:	4b05      	ldr	r3, [pc, #20]	; (1ca64 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1ca4e:	6065      	str	r5, [r4, #4]
   1ca50:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1ca52:	b91a      	cbnz	r2, 1ca5c <cancel_sync_locked+0x30>
	list->head = node;
   1ca54:	e9c3 4400 	strd	r4, r4, [r3]
}
   1ca58:	4630      	mov	r0, r6
   1ca5a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1ca5c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1ca5e:	605c      	str	r4, [r3, #4]
}
   1ca60:	e7fa      	b.n	1ca58 <cancel_sync_locked+0x2c>
   1ca62:	bf00      	nop
   1ca64:	20002f8c 	.word	0x20002f8c

0001ca68 <submit_to_queue_locked>:
{
   1ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ca6a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ca6c:	079a      	lsls	r2, r3, #30
{
   1ca6e:	4604      	mov	r4, r0
   1ca70:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ca72:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1ca76:	d42c      	bmi.n	1cad2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1ca78:	075b      	lsls	r3, r3, #29
   1ca7a:	d41a      	bmi.n	1cab2 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1ca7c:	680b      	ldr	r3, [r1, #0]
   1ca7e:	b90b      	cbnz	r3, 1ca84 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1ca80:	6883      	ldr	r3, [r0, #8]
   1ca82:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1ca84:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1ca86:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1ca88:	bf44      	itt	mi
   1ca8a:	68a3      	ldrmi	r3, [r4, #8]
   1ca8c:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1ca8e:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1ca90:	bf4c      	ite	mi
   1ca92:	2602      	movmi	r6, #2
		ret = 1;
   1ca94:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1ca96:	2d00      	cmp	r5, #0
   1ca98:	d03a      	beq.n	1cb10 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ca9a:	4b1f      	ldr	r3, [pc, #124]	; (1cb18 <submit_to_queue_locked+0xb0>)
   1ca9c:	689b      	ldr	r3, [r3, #8]
   1ca9e:	42ab      	cmp	r3, r5
   1caa0:	d00a      	beq.n	1cab8 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1caa2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1caa6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1caa8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1caac:	d414      	bmi.n	1cad8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1caae:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1cab2:	2300      	movs	r3, #0
   1cab4:	603b      	str	r3, [r7, #0]
	return ret;
   1cab6:	e025      	b.n	1cb04 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1cab8:	f004 fb54 	bl	21164 <k_is_in_isr>
   1cabc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   1cac0:	2800      	cmp	r0, #0
   1cac2:	d1f0      	bne.n	1caa6 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1cac4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1cac6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1caca:	d5f0      	bpl.n	1caae <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1cacc:	b152      	cbz	r2, 1cae4 <submit_to_queue_locked+0x7c>
   1cace:	075b      	lsls	r3, r3, #29
   1cad0:	d408      	bmi.n	1cae4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1cad2:	f06f 060f 	mvn.w	r6, #15
   1cad6:	e7ec      	b.n	1cab2 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1cad8:	2a00      	cmp	r2, #0
   1cada:	d1fa      	bne.n	1cad2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1cadc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1cae0:	2b00      	cmp	r3, #0
   1cae2:	d1f6      	bne.n	1cad2 <submit_to_queue_locked+0x6a>
	parent->next = child;
   1cae4:	2300      	movs	r3, #0
   1cae6:	6023      	str	r3, [r4, #0]
	return list->tail;
   1cae8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   1caec:	b963      	cbnz	r3, 1cb08 <submit_to_queue_locked+0xa0>
	list->head = node;
   1caee:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   1caf2:	4628      	mov	r0, r5
   1caf4:	f004 fc0e 	bl	21314 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1caf8:	68e3      	ldr	r3, [r4, #12]
   1cafa:	f043 0304 	orr.w	r3, r3, #4
   1cafe:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1cb00:	683b      	ldr	r3, [r7, #0]
   1cb02:	60a3      	str	r3, [r4, #8]
}
   1cb04:	4630      	mov	r0, r6
   1cb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1cb08:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cb0a:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   1cb0e:	e7f0      	b.n	1caf2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1cb10:	f06f 0615 	mvn.w	r6, #21
   1cb14:	e7cd      	b.n	1cab2 <submit_to_queue_locked+0x4a>
   1cb16:	bf00      	nop
   1cb18:	20002f5c 	.word	0x20002f5c

0001cb1c <k_work_submit>:
{
   1cb1c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1cb1e:	4801      	ldr	r0, [pc, #4]	; (1cb24 <k_work_submit+0x8>)
   1cb20:	f004 bc7e 	b.w	21420 <k_work_submit_to_queue>
   1cb24:	20002a18 	.word	0x20002a18

0001cb28 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb2a:	b089      	sub	sp, #36	; 0x24
   1cb2c:	4604      	mov	r4, r0
	list->head = NULL;
   1cb2e:	2000      	movs	r0, #0
	list->tail = NULL;
   1cb30:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   1cb34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1cb36:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   1cb3a:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   1cb3e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1cb42:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1cb46:	b31d      	cbz	r5, 1cb90 <k_work_queue_start+0x68>
   1cb48:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1cb4a:	2800      	cmp	r0, #0
   1cb4c:	f240 1001 	movw	r0, #257	; 0x101
   1cb50:	bf08      	it	eq
   1cb52:	2001      	moveq	r0, #1
	*flagp = flags;
   1cb54:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cb58:	2000      	movs	r0, #0
   1cb5a:	f04f 36ff 	mov.w	r6, #4294967295
   1cb5e:	f04f 37ff 	mov.w	r7, #4294967295
   1cb62:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1cb66:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1cb6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1cb6e:	4b09      	ldr	r3, [pc, #36]	; (1cb94 <k_work_queue_start+0x6c>)
   1cb70:	9400      	str	r4, [sp, #0]
   1cb72:	4620      	mov	r0, r4
   1cb74:	f7ff fd64 	bl	1c640 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1cb78:	b125      	cbz	r5, 1cb84 <k_work_queue_start+0x5c>
   1cb7a:	6829      	ldr	r1, [r5, #0]
   1cb7c:	b111      	cbz	r1, 1cb84 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1cb7e:	4620      	mov	r0, r4
   1cb80:	f004 faf6 	bl	21170 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1cb84:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1cb86:	b009      	add	sp, #36	; 0x24
   1cb88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1cb8c:	f004 baf5 	b.w	2117a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1cb90:	2001      	movs	r0, #1
   1cb92:	e7df      	b.n	1cb54 <k_work_queue_start+0x2c>
   1cb94:	00011389 	.word	0x00011389

0001cb98 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1cb98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cb9a:	9001      	str	r0, [sp, #4]
   1cb9c:	4608      	mov	r0, r1
	__asm__ volatile(
   1cb9e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1cba2:	f3ef 8411 	mrs	r4, BASEPRI
   1cba6:	f381 8812 	msr	BASEPRI_MAX, r1
   1cbaa:	f3bf 8f6f 	isb	sy
	return *flagp;
   1cbae:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1cbb0:	f011 0f0e 	tst.w	r1, #14
   1cbb4:	d116      	bne.n	1cbe4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cbb6:	ea53 0502 	orrs.w	r5, r3, r2
   1cbba:	d108      	bne.n	1cbce <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1cbbc:	a901      	add	r1, sp, #4
   1cbbe:	f7ff ff53 	bl	1ca68 <submit_to_queue_locked>
	__asm__ volatile(
   1cbc2:	f384 8811 	msr	BASEPRI, r4
   1cbc6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1cbca:	b003      	add	sp, #12
   1cbcc:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1cbce:	f041 0108 	orr.w	r1, r1, #8
   1cbd2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1cbd4:	9901      	ldr	r1, [sp, #4]
   1cbd6:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1cbd8:	3010      	adds	r0, #16
   1cbda:	4903      	ldr	r1, [pc, #12]	; (1cbe8 <k_work_schedule_for_queue+0x50>)
   1cbdc:	f000 fc02 	bl	1d3e4 <z_add_timeout>
	return ret;
   1cbe0:	2001      	movs	r0, #1
   1cbe2:	e7ee      	b.n	1cbc2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1cbe4:	2000      	movs	r0, #0
   1cbe6:	e7ec      	b.n	1cbc2 <k_work_schedule_for_queue+0x2a>
   1cbe8:	00021389 	.word	0x00021389

0001cbec <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1cbec:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1cbee:	4801      	ldr	r0, [pc, #4]	; (1cbf4 <k_work_schedule+0x8>)
   1cbf0:	f7ff bfd2 	b.w	1cb98 <k_work_schedule_for_queue>
   1cbf4:	20002a18 	.word	0x20002a18

0001cbf8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1cbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cbfa:	460c      	mov	r4, r1
   1cbfc:	9001      	str	r0, [sp, #4]
   1cbfe:	4616      	mov	r6, r2
   1cc00:	461d      	mov	r5, r3
	__asm__ volatile(
   1cc02:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc06:	f3ef 8711 	mrs	r7, BASEPRI
   1cc0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc0e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1cc12:	4608      	mov	r0, r1
   1cc14:	f004 fb70 	bl	212f8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cc18:	ea55 0306 	orrs.w	r3, r5, r6
   1cc1c:	d109      	bne.n	1cc32 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1cc1e:	a901      	add	r1, sp, #4
   1cc20:	4620      	mov	r0, r4
   1cc22:	f7ff ff21 	bl	1ca68 <submit_to_queue_locked>
	__asm__ volatile(
   1cc26:	f387 8811 	msr	BASEPRI, r7
   1cc2a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1cc2e:	b003      	add	sp, #12
   1cc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1cc32:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1cc34:	4906      	ldr	r1, [pc, #24]	; (1cc50 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1cc36:	f043 0308 	orr.w	r3, r3, #8
   1cc3a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1cc3c:	9b01      	ldr	r3, [sp, #4]
   1cc3e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1cc40:	f104 0010 	add.w	r0, r4, #16
   1cc44:	4632      	mov	r2, r6
   1cc46:	462b      	mov	r3, r5
   1cc48:	f000 fbcc 	bl	1d3e4 <z_add_timeout>
	return ret;
   1cc4c:	2001      	movs	r0, #1
   1cc4e:	e7ea      	b.n	1cc26 <k_work_reschedule_for_queue+0x2e>
   1cc50:	00021389 	.word	0x00021389

0001cc54 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1cc54:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1cc56:	4801      	ldr	r0, [pc, #4]	; (1cc5c <k_work_reschedule+0x8>)
   1cc58:	f7ff bfce 	b.w	1cbf8 <k_work_reschedule_for_queue>
   1cc5c:	20002a18 	.word	0x20002a18

0001cc60 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1cc60:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1cc62:	4d07      	ldr	r5, [pc, #28]	; (1cc80 <z_reset_time_slice+0x20>)
   1cc64:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1cc66:	b154      	cbz	r4, 1cc7e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1cc68:	f7fd fa8c 	bl	1a184 <sys_clock_elapsed>
   1cc6c:	4b05      	ldr	r3, [pc, #20]	; (1cc84 <z_reset_time_slice+0x24>)
   1cc6e:	4404      	add	r4, r0
   1cc70:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1cc72:	6828      	ldr	r0, [r5, #0]
   1cc74:	2100      	movs	r1, #0
	}
}
   1cc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1cc7a:	f004 bd76 	b.w	2176a <z_set_timeout_expiry>
}
   1cc7e:	bd38      	pop	{r3, r4, r5, pc}
   1cc80:	20002f9c 	.word	0x20002f9c
   1cc84:	20002f5c 	.word	0x20002f5c

0001cc88 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1cc88:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1cc8a:	4d0d      	ldr	r5, [pc, #52]	; (1ccc0 <update_cache+0x38>)
   1cc8c:	462b      	mov	r3, r5
   1cc8e:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cc92:	429c      	cmp	r4, r3
   1cc94:	d000      	beq.n	1cc98 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1cc96:	b904      	cbnz	r4, 1cc9a <update_cache+0x12>
   1cc98:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1cc9a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1cc9c:	b938      	cbnz	r0, 1ccae <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1cc9e:	7b5a      	ldrb	r2, [r3, #13]
   1cca0:	06d2      	lsls	r2, r2, #27
   1cca2:	d104      	bne.n	1ccae <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1cca4:	69a2      	ldr	r2, [r4, #24]
   1cca6:	b912      	cbnz	r2, 1ccae <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1cca8:	89da      	ldrh	r2, [r3, #14]
   1ccaa:	2a7f      	cmp	r2, #127	; 0x7f
   1ccac:	d805      	bhi.n	1ccba <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1ccae:	429c      	cmp	r4, r3
   1ccb0:	d002      	beq.n	1ccb8 <update_cache+0x30>
			z_reset_time_slice(thread);
   1ccb2:	4620      	mov	r0, r4
   1ccb4:	f7ff ffd4 	bl	1cc60 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1ccb8:	4623      	mov	r3, r4
   1ccba:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1ccbc:	bd38      	pop	{r3, r4, r5, pc}
   1ccbe:	bf00      	nop
   1ccc0:	20002f5c 	.word	0x20002f5c

0001ccc4 <move_thread_to_end_of_prio_q>:
{
   1ccc4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ccc6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ccca:	7b43      	ldrb	r3, [r0, #13]
   1cccc:	2a00      	cmp	r2, #0
{
   1ccce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ccd0:	da04      	bge.n	1ccdc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ccd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ccd6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ccd8:	f004 fc0c 	bl	214f4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ccdc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1ccde:	4a15      	ldr	r2, [pc, #84]	; (1cd34 <move_thread_to_end_of_prio_q+0x70>)
   1cce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cce4:	4610      	mov	r0, r2
   1cce6:	734b      	strb	r3, [r1, #13]
   1cce8:	f850 3f24 	ldr.w	r3, [r0, #36]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1ccec:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ccee:	4283      	cmp	r3, r0
   1ccf0:	bf08      	it	eq
   1ccf2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ccf4:	b923      	cbnz	r3, 1cd00 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1ccf6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1ccfa:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1ccfc:	6291      	str	r1, [r2, #40]	; 0x28
}
   1ccfe:	e00c      	b.n	1cd1a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1cd00:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1cd04:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1cd08:	42b5      	cmp	r5, r6
   1cd0a:	d00e      	beq.n	1cd2a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cd0c:	42ae      	cmp	r6, r5
   1cd0e:	dd0c      	ble.n	1cd2a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1cd10:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1cd12:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1cd16:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1cd18:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1cd1a:	6890      	ldr	r0, [r2, #8]
   1cd1c:	1a43      	subs	r3, r0, r1
   1cd1e:	4258      	negs	r0, r3
}
   1cd20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1cd24:	4158      	adcs	r0, r3
   1cd26:	f7ff bfaf 	b.w	1cc88 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1cd2a:	429c      	cmp	r4, r3
   1cd2c:	d0e3      	beq.n	1ccf6 <move_thread_to_end_of_prio_q+0x32>
   1cd2e:	681b      	ldr	r3, [r3, #0]
   1cd30:	e7e0      	b.n	1ccf4 <move_thread_to_end_of_prio_q+0x30>
   1cd32:	bf00      	nop
   1cd34:	20002f5c 	.word	0x20002f5c

0001cd38 <ready_thread>:
{
   1cd38:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1cd3a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1cd3e:	7b42      	ldrb	r2, [r0, #13]
   1cd40:	2b00      	cmp	r3, #0
   1cd42:	db29      	blt.n	1cd98 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cd44:	06d3      	lsls	r3, r2, #27
   1cd46:	d127      	bne.n	1cd98 <ready_thread+0x60>
	return node->next != NULL;
   1cd48:	6983      	ldr	r3, [r0, #24]
   1cd4a:	bb2b      	cbnz	r3, 1cd98 <ready_thread+0x60>
	return list->head == list;
   1cd4c:	4913      	ldr	r1, [pc, #76]	; (1cd9c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1cd4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1cd52:	7342      	strb	r2, [r0, #13]
   1cd54:	460a      	mov	r2, r1
   1cd56:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd5a:	4294      	cmp	r4, r2
   1cd5c:	bf18      	it	ne
   1cd5e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1cd60:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cd62:	b923      	cbnz	r3, 1cd6e <ready_thread+0x36>
	node->prev = tail;
   1cd64:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1cd68:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1cd6a:	6288      	str	r0, [r1, #40]	; 0x28
}
   1cd6c:	e00c      	b.n	1cd88 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1cd6e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1cd72:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1cd76:	42b5      	cmp	r5, r6
   1cd78:	d00a      	beq.n	1cd90 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cd7a:	42ae      	cmp	r6, r5
   1cd7c:	dd08      	ble.n	1cd90 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1cd7e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1cd80:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1cd84:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1cd86:	6058      	str	r0, [r3, #4]
}
   1cd88:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1cd8a:	2000      	movs	r0, #0
   1cd8c:	f7ff bf7c 	b.w	1cc88 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1cd90:	42a3      	cmp	r3, r4
   1cd92:	d0e7      	beq.n	1cd64 <ready_thread+0x2c>
   1cd94:	681b      	ldr	r3, [r3, #0]
   1cd96:	e7e4      	b.n	1cd62 <ready_thread+0x2a>
}
   1cd98:	bc70      	pop	{r4, r5, r6}
   1cd9a:	4770      	bx	lr
   1cd9c:	20002f5c 	.word	0x20002f5c

0001cda0 <unready_thread>:
{
   1cda0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1cda2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1cda6:	7b43      	ldrb	r3, [r0, #13]
   1cda8:	2a00      	cmp	r2, #0
{
   1cdaa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1cdac:	da04      	bge.n	1cdb8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cdae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cdb2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cdb4:	f004 fb9e 	bl	214f4 <sys_dlist_remove>
	update_cache(thread == _current);
   1cdb8:	4b04      	ldr	r3, [pc, #16]	; (1cdcc <unready_thread+0x2c>)
   1cdba:	6898      	ldr	r0, [r3, #8]
   1cdbc:	1a43      	subs	r3, r0, r1
   1cdbe:	4258      	negs	r0, r3
   1cdc0:	4158      	adcs	r0, r3
}
   1cdc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1cdc6:	f7ff bf5f 	b.w	1cc88 <update_cache>
   1cdca:	bf00      	nop
   1cdcc:	20002f5c 	.word	0x20002f5c

0001cdd0 <pend_locked>:
{
   1cdd0:	b570      	push	{r4, r5, r6, lr}
   1cdd2:	4615      	mov	r5, r2
   1cdd4:	461c      	mov	r4, r3
   1cdd6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1cdd8:	f004 fbc9 	bl	2156e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cddc:	f1b4 3fff 	cmp.w	r4, #4294967295
   1cde0:	bf08      	it	eq
   1cde2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1cde6:	d008      	beq.n	1cdfa <pend_locked+0x2a>
   1cde8:	462a      	mov	r2, r5
   1cdea:	4623      	mov	r3, r4
   1cdec:	f106 0018 	add.w	r0, r6, #24
   1cdf0:	4902      	ldr	r1, [pc, #8]	; (1cdfc <pend_locked+0x2c>)
}
   1cdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cdf6:	f000 baf5 	b.w	1d3e4 <z_add_timeout>
   1cdfa:	bd70      	pop	{r4, r5, r6, pc}
   1cdfc:	0002152b 	.word	0x0002152b

0001ce00 <k_sched_time_slice_set>:
{
   1ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce02:	4604      	mov	r4, r0
   1ce04:	460d      	mov	r5, r1
	__asm__ volatile(
   1ce06:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce0a:	f3ef 8711 	mrs	r7, BASEPRI
   1ce0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce12:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ce16:	2600      	movs	r6, #0
   1ce18:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1ce1c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ce20:	4631      	mov	r1, r6
   1ce22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ce26:	2300      	movs	r3, #0
   1ce28:	fbe4 010c 	umlal	r0, r1, r4, ip
   1ce2c:	f7e3 f968 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1ce30:	42b4      	cmp	r4, r6
   1ce32:	dd02      	ble.n	1ce3a <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   1ce34:	2802      	cmp	r0, #2
   1ce36:	bfb8      	it	lt
   1ce38:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1ce3a:	4a07      	ldr	r2, [pc, #28]	; (1ce58 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   1ce3c:	4b07      	ldr	r3, [pc, #28]	; (1ce5c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1ce3e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1ce40:	4a07      	ldr	r2, [pc, #28]	; (1ce60 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1ce42:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1ce44:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1ce46:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1ce48:	f7ff ff0a 	bl	1cc60 <z_reset_time_slice>
	__asm__ volatile(
   1ce4c:	f387 8811 	msr	BASEPRI, r7
   1ce50:	f3bf 8f6f 	isb	sy
}
   1ce54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ce56:	bf00      	nop
   1ce58:	20002f9c 	.word	0x20002f9c
   1ce5c:	20002f5c 	.word	0x20002f5c
   1ce60:	20002f98 	.word	0x20002f98

0001ce64 <z_time_slice>:
{
   1ce64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ce66:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce6a:	f3ef 8511 	mrs	r5, BASEPRI
   1ce6e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce72:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1ce76:	4b17      	ldr	r3, [pc, #92]	; (1ced4 <z_time_slice+0x70>)
   1ce78:	4a17      	ldr	r2, [pc, #92]	; (1ced8 <z_time_slice+0x74>)
   1ce7a:	689c      	ldr	r4, [r3, #8]
   1ce7c:	6811      	ldr	r1, [r2, #0]
   1ce7e:	428c      	cmp	r4, r1
   1ce80:	d107      	bne.n	1ce92 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1ce82:	4620      	mov	r0, r4
   1ce84:	f7ff feec 	bl	1cc60 <z_reset_time_slice>
	__asm__ volatile(
   1ce88:	f385 8811 	msr	BASEPRI, r5
   1ce8c:	f3bf 8f6f 	isb	sy
}
   1ce90:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1ce92:	2100      	movs	r1, #0
   1ce94:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1ce96:	4a11      	ldr	r2, [pc, #68]	; (1cedc <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1ce98:	6812      	ldr	r2, [r2, #0]
   1ce9a:	b1c2      	cbz	r2, 1cece <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ce9c:	89e2      	ldrh	r2, [r4, #14]
   1ce9e:	2a7f      	cmp	r2, #127	; 0x7f
   1cea0:	d815      	bhi.n	1cece <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1cea2:	7b62      	ldrb	r2, [r4, #13]
   1cea4:	06d2      	lsls	r2, r2, #27
   1cea6:	d112      	bne.n	1cece <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1cea8:	4a0d      	ldr	r2, [pc, #52]	; (1cee0 <z_time_slice+0x7c>)
   1ceaa:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1ceae:	6812      	ldr	r2, [r2, #0]
   1ceb0:	4291      	cmp	r1, r2
   1ceb2:	db0c      	blt.n	1cece <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ceb4:	4a0b      	ldr	r2, [pc, #44]	; (1cee4 <z_time_slice+0x80>)
   1ceb6:	4294      	cmp	r4, r2
   1ceb8:	d009      	beq.n	1cece <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1ceba:	691a      	ldr	r2, [r3, #16]
   1cebc:	4282      	cmp	r2, r0
   1cebe:	dc03      	bgt.n	1cec8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1cec0:	4620      	mov	r0, r4
   1cec2:	f7ff feff 	bl	1ccc4 <move_thread_to_end_of_prio_q>
   1cec6:	e7dc      	b.n	1ce82 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1cec8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1ceca:	611a      	str	r2, [r3, #16]
   1cecc:	e7dc      	b.n	1ce88 <z_time_slice+0x24>
   1cece:	2200      	movs	r2, #0
   1ced0:	e7fb      	b.n	1ceca <z_time_slice+0x66>
   1ced2:	bf00      	nop
   1ced4:	20002f5c 	.word	0x20002f5c
   1ced8:	20002f94 	.word	0x20002f94
   1cedc:	20002f9c 	.word	0x20002f9c
   1cee0:	20002f98 	.word	0x20002f98
   1cee4:	20002888 	.word	0x20002888

0001cee8 <z_pend_curr>:
{
   1cee8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1ceea:	480c      	ldr	r0, [pc, #48]	; (1cf1c <z_pend_curr+0x34>)
   1ceec:	4d0c      	ldr	r5, [pc, #48]	; (1cf20 <z_pend_curr+0x38>)
   1ceee:	6886      	ldr	r6, [r0, #8]
   1cef0:	602e      	str	r6, [r5, #0]
{
   1cef2:	460c      	mov	r4, r1
   1cef4:	4611      	mov	r1, r2
   1cef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1cefa:	f04f 0640 	mov.w	r6, #64	; 0x40
   1cefe:	f3ef 8511 	mrs	r5, BASEPRI
   1cf02:	f386 8812 	msr	BASEPRI_MAX, r6
   1cf06:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1cf0a:	6880      	ldr	r0, [r0, #8]
   1cf0c:	f7ff ff60 	bl	1cdd0 <pend_locked>
	ret = arch_swap(key);
   1cf10:	4620      	mov	r0, r4
}
   1cf12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cf16:	f7f6 b995 	b.w	13244 <arch_swap>
   1cf1a:	bf00      	nop
   1cf1c:	20002f5c 	.word	0x20002f5c
   1cf20:	20002f94 	.word	0x20002f94

0001cf24 <z_set_prio>:
{
   1cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf26:	4604      	mov	r4, r0
   1cf28:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf2c:	f3ef 8611 	mrs	r6, BASEPRI
   1cf30:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf34:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1cf38:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cf3a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1cf3c:	b249      	sxtb	r1, r1
   1cf3e:	d119      	bne.n	1cf74 <z_set_prio+0x50>
	return node->next != NULL;
   1cf40:	6985      	ldr	r5, [r0, #24]
   1cf42:	b9bd      	cbnz	r5, 1cf74 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cf44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cf48:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cf4a:	f004 fad3 	bl	214f4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1cf4e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1cf50:	4a16      	ldr	r2, [pc, #88]	; (1cfac <z_set_prio+0x88>)
				thread->base.prio = prio;
   1cf52:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1cf54:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cf58:	7343      	strb	r3, [r0, #13]
   1cf5a:	4613      	mov	r3, r2
   1cf5c:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf60:	4298      	cmp	r0, r3
   1cf62:	bf18      	it	ne
   1cf64:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1cf66:	6a90      	ldr	r0, [r2, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cf68:	b95d      	cbnz	r5, 1cf82 <z_set_prio+0x5e>
	node->prev = tail;
   1cf6a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1cf6e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1cf70:	6294      	str	r4, [r2, #40]	; 0x28
}
   1cf72:	e011      	b.n	1cf98 <z_set_prio+0x74>
			thread->base.prio = prio;
   1cf74:	73a1      	strb	r1, [r4, #14]
   1cf76:	2000      	movs	r0, #0
	__asm__ volatile(
   1cf78:	f386 8811 	msr	BASEPRI, r6
   1cf7c:	f3bf 8f6f 	isb	sy
}
   1cf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1cf82:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1cf86:	42b9      	cmp	r1, r7
   1cf88:	d00b      	beq.n	1cfa2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cf8a:	428f      	cmp	r7, r1
   1cf8c:	dd09      	ble.n	1cfa2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1cf8e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1cf90:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1cf94:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1cf96:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1cf98:	2001      	movs	r0, #1
   1cf9a:	f7ff fe75 	bl	1cc88 <update_cache>
   1cf9e:	2001      	movs	r0, #1
   1cfa0:	e7ea      	b.n	1cf78 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1cfa2:	42a8      	cmp	r0, r5
   1cfa4:	d0e1      	beq.n	1cf6a <z_set_prio+0x46>
   1cfa6:	682d      	ldr	r5, [r5, #0]
   1cfa8:	e7de      	b.n	1cf68 <z_set_prio+0x44>
   1cfaa:	bf00      	nop
   1cfac:	20002f5c 	.word	0x20002f5c

0001cfb0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1cfb0:	b949      	cbnz	r1, 1cfc6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1cfb2:	f3ef 8005 	mrs	r0, IPSR
   1cfb6:	b930      	cbnz	r0, 1cfc6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1cfb8:	4b05      	ldr	r3, [pc, #20]	; (1cfd0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1cfba:	6a1a      	ldr	r2, [r3, #32]
   1cfbc:	689b      	ldr	r3, [r3, #8]
   1cfbe:	429a      	cmp	r2, r3
   1cfc0:	d001      	beq.n	1cfc6 <z_reschedule+0x16>
   1cfc2:	f7f6 b93f 	b.w	13244 <arch_swap>
   1cfc6:	f381 8811 	msr	BASEPRI, r1
   1cfca:	f3bf 8f6f 	isb	sy
}
   1cfce:	4770      	bx	lr
   1cfd0:	20002f5c 	.word	0x20002f5c

0001cfd4 <z_sched_start>:
{
   1cfd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cfd6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1cfda:	f3ef 8411 	mrs	r4, BASEPRI
   1cfde:	f382 8812 	msr	BASEPRI_MAX, r2
   1cfe2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1cfe6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1cfe8:	0751      	lsls	r1, r2, #29
   1cfea:	d404      	bmi.n	1cff6 <z_sched_start+0x22>
	__asm__ volatile(
   1cfec:	f384 8811 	msr	BASEPRI, r4
   1cff0:	f3bf 8f6f 	isb	sy
}
   1cff4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1cff6:	f022 0204 	bic.w	r2, r2, #4
   1cffa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1cffc:	f7ff fe9c 	bl	1cd38 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d000:	4621      	mov	r1, r4
   1d002:	4802      	ldr	r0, [pc, #8]	; (1d00c <z_sched_start+0x38>)
}
   1d004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1d008:	f7ff bfd2 	b.w	1cfb0 <z_reschedule>
   1d00c:	20003568 	.word	0x20003568

0001d010 <z_impl_k_thread_suspend>:
{
   1d010:	b570      	push	{r4, r5, r6, lr}
   1d012:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1d014:	3018      	adds	r0, #24
   1d016:	f004 fb82 	bl	2171e <z_abort_timeout>
	__asm__ volatile(
   1d01a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d01e:	f3ef 8611 	mrs	r6, BASEPRI
   1d022:	f383 8812 	msr	BASEPRI_MAX, r3
   1d026:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d02a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1d02e:	7b63      	ldrb	r3, [r4, #13]
   1d030:	2a00      	cmp	r2, #0
   1d032:	da05      	bge.n	1d040 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d038:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d03a:	4620      	mov	r0, r4
   1d03c:	f004 fa5a 	bl	214f4 <sys_dlist_remove>
		update_cache(thread == _current);
   1d040:	4d0b      	ldr	r5, [pc, #44]	; (1d070 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d042:	7b63      	ldrb	r3, [r4, #13]
   1d044:	68a8      	ldr	r0, [r5, #8]
   1d046:	f043 0310 	orr.w	r3, r3, #16
   1d04a:	7363      	strb	r3, [r4, #13]
   1d04c:	1b03      	subs	r3, r0, r4
   1d04e:	4258      	negs	r0, r3
   1d050:	4158      	adcs	r0, r3
   1d052:	f7ff fe19 	bl	1cc88 <update_cache>
	__asm__ volatile(
   1d056:	f386 8811 	msr	BASEPRI, r6
   1d05a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1d05e:	68ab      	ldr	r3, [r5, #8]
   1d060:	42a3      	cmp	r3, r4
   1d062:	d103      	bne.n	1d06c <z_impl_k_thread_suspend+0x5c>
}
   1d064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1d068:	f004 bb1c 	b.w	216a4 <z_reschedule_unlocked>
}
   1d06c:	bd70      	pop	{r4, r5, r6, pc}
   1d06e:	bf00      	nop
   1d070:	20002f5c 	.word	0x20002f5c

0001d074 <k_sched_lock>:
	__asm__ volatile(
   1d074:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d078:	f3ef 8111 	mrs	r1, BASEPRI
   1d07c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d080:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1d084:	4b04      	ldr	r3, [pc, #16]	; (1d098 <k_sched_lock+0x24>)
   1d086:	689a      	ldr	r2, [r3, #8]
   1d088:	7bd3      	ldrb	r3, [r2, #15]
   1d08a:	3b01      	subs	r3, #1
   1d08c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d08e:	f381 8811 	msr	BASEPRI, r1
   1d092:	f3bf 8f6f 	isb	sy
}
   1d096:	4770      	bx	lr
   1d098:	20002f5c 	.word	0x20002f5c

0001d09c <k_sched_unlock>:
{
   1d09c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d09e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0a2:	f3ef 8411 	mrs	r4, BASEPRI
   1d0a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0aa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d0ae:	4b08      	ldr	r3, [pc, #32]	; (1d0d0 <k_sched_unlock+0x34>)
   1d0b0:	689a      	ldr	r2, [r3, #8]
   1d0b2:	7bd3      	ldrb	r3, [r2, #15]
   1d0b4:	3301      	adds	r3, #1
   1d0b6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d0b8:	2000      	movs	r0, #0
   1d0ba:	f7ff fde5 	bl	1cc88 <update_cache>
	__asm__ volatile(
   1d0be:	f384 8811 	msr	BASEPRI, r4
   1d0c2:	f3bf 8f6f 	isb	sy
}
   1d0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d0ca:	f004 baeb 	b.w	216a4 <z_reschedule_unlocked>
   1d0ce:	bf00      	nop
   1d0d0:	20002f5c 	.word	0x20002f5c

0001d0d4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1d0d4:	4b04      	ldr	r3, [pc, #16]	; (1d0e8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d0d6:	2100      	movs	r1, #0
   1d0d8:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   1d0dc:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   1d0e0:	4608      	mov	r0, r1
   1d0e2:	f7ff be8d 	b.w	1ce00 <k_sched_time_slice_set>
   1d0e6:	bf00      	nop
   1d0e8:	20002f5c 	.word	0x20002f5c

0001d0ec <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1d0ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0f2:	f3ef 8511 	mrs	r5, BASEPRI
   1d0f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0fa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1d0fe:	4919      	ldr	r1, [pc, #100]	; (1d164 <z_impl_k_yield+0x78>)
   1d100:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d102:	7b43      	ldrb	r3, [r0, #13]
   1d104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d108:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d10a:	f004 f9f3 	bl	214f4 <sys_dlist_remove>
	}
	queue_thread(_current);
   1d10e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d110:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1d112:	4608      	mov	r0, r1
   1d114:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d118:	735a      	strb	r2, [r3, #13]
   1d11a:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
   1d11e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d120:	4282      	cmp	r2, r0
   1d122:	bf08      	it	eq
   1d124:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d126:	b922      	cbnz	r2, 1d132 <z_impl_k_yield+0x46>
	node->prev = tail;
   1d128:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1d12c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1d12e:	628b      	str	r3, [r1, #40]	; 0x28
}
   1d130:	e00c      	b.n	1d14c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1d132:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1d136:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1d13a:	42be      	cmp	r6, r7
   1d13c:	d00e      	beq.n	1d15c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d13e:	42b7      	cmp	r7, r6
   1d140:	dd0c      	ble.n	1d15c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1d142:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1d144:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1d148:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1d14a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1d14c:	2001      	movs	r0, #1
   1d14e:	f7ff fd9b 	bl	1cc88 <update_cache>
   1d152:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1d154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d158:	f7f6 b874 	b.w	13244 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1d15c:	42a2      	cmp	r2, r4
   1d15e:	d0e3      	beq.n	1d128 <z_impl_k_yield+0x3c>
   1d160:	6812      	ldr	r2, [r2, #0]
   1d162:	e7e0      	b.n	1d126 <z_impl_k_yield+0x3a>
   1d164:	20002f5c 	.word	0x20002f5c

0001d168 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1d168:	ea50 0301 	orrs.w	r3, r0, r1
{
   1d16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d170:	4605      	mov	r5, r0
   1d172:	460e      	mov	r6, r1
	if (ticks == 0) {
   1d174:	d103      	bne.n	1d17e <z_tick_sleep+0x16>
	z_impl_k_yield();
   1d176:	f7ff ffb9 	bl	1d0ec <z_impl_k_yield>
		k_yield();
		return 0;
   1d17a:	2000      	movs	r0, #0
   1d17c:	e02c      	b.n	1d1d8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1d17e:	1c83      	adds	r3, r0, #2
   1d180:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1d184:	db2a      	blt.n	1d1dc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d186:	f004 fb0c 	bl	217a2 <sys_clock_tick_get_32>
   1d18a:	182c      	adds	r4, r5, r0
   1d18c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d190:	f3ef 8811 	mrs	r8, BASEPRI
   1d194:	f383 8812 	msr	BASEPRI_MAX, r3
   1d198:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1d19c:	4f11      	ldr	r7, [pc, #68]	; (1d1e4 <z_tick_sleep+0x7c>)
   1d19e:	4b12      	ldr	r3, [pc, #72]	; (1d1e8 <z_tick_sleep+0x80>)
   1d1a0:	68b8      	ldr	r0, [r7, #8]
   1d1a2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1d1a4:	f7ff fdfc 	bl	1cda0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1d1a8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d1aa:	4910      	ldr	r1, [pc, #64]	; (1d1ec <z_tick_sleep+0x84>)
   1d1ac:	462a      	mov	r2, r5
   1d1ae:	4633      	mov	r3, r6
   1d1b0:	3018      	adds	r0, #24
   1d1b2:	f000 f917 	bl	1d3e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d1b6:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d1b8:	7b53      	ldrb	r3, [r2, #13]
   1d1ba:	f043 0310 	orr.w	r3, r3, #16
   1d1be:	7353      	strb	r3, [r2, #13]
   1d1c0:	4640      	mov	r0, r8
   1d1c2:	f7f6 f83f 	bl	13244 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d1c6:	f004 faec 	bl	217a2 <sys_clock_tick_get_32>
   1d1ca:	1a20      	subs	r0, r4, r0
   1d1cc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1d1d0:	2801      	cmp	r0, #1
   1d1d2:	f173 0300 	sbcs.w	r3, r3, #0
   1d1d6:	dbd0      	blt.n	1d17a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   1d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1d1dc:	f06f 0401 	mvn.w	r4, #1
   1d1e0:	1a24      	subs	r4, r4, r0
   1d1e2:	e7d3      	b.n	1d18c <z_tick_sleep+0x24>
   1d1e4:	20002f5c 	.word	0x20002f5c
   1d1e8:	20002f94 	.word	0x20002f94
   1d1ec:	0002152b 	.word	0x0002152b

0001d1f0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d1f0:	f1b1 3fff 	cmp.w	r1, #4294967295
   1d1f4:	bf08      	it	eq
   1d1f6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d1fa:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d1fc:	d106      	bne.n	1d20c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1d1fe:	4b08      	ldr	r3, [pc, #32]	; (1d220 <z_impl_k_sleep+0x30>)
   1d200:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d202:	f7ff ff05 	bl	1d010 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1d206:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1d20a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1d20c:	f7ff ffac 	bl	1d168 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1d210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d214:	fb80 0303 	smull	r0, r3, r0, r3
   1d218:	0bc0      	lsrs	r0, r0, #15
   1d21a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1d21e:	e7f4      	b.n	1d20a <z_impl_k_sleep+0x1a>
   1d220:	20002f5c 	.word	0x20002f5c

0001d224 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1d224:	4b01      	ldr	r3, [pc, #4]	; (1d22c <z_impl_z_current_get+0x8>)
   1d226:	6898      	ldr	r0, [r3, #8]
   1d228:	4770      	bx	lr
   1d22a:	bf00      	nop
   1d22c:	20002f5c 	.word	0x20002f5c

0001d230 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1d230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d234:	4604      	mov	r4, r0
   1d236:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d23a:	f3ef 8611 	mrs	r6, BASEPRI
   1d23e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d242:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1d246:	7b03      	ldrb	r3, [r0, #12]
   1d248:	07d9      	lsls	r1, r3, #31
   1d24a:	d50b      	bpl.n	1d264 <z_thread_abort+0x34>
	__asm__ volatile(
   1d24c:	f386 8811 	msr	BASEPRI, r6
   1d250:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1d254:	4040      	eors	r0, r0
   1d256:	f380 8811 	msr	BASEPRI, r0
   1d25a:	f04f 0004 	mov.w	r0, #4
   1d25e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1d264:	7b43      	ldrb	r3, [r0, #13]
   1d266:	071a      	lsls	r2, r3, #28
   1d268:	d504      	bpl.n	1d274 <z_thread_abort+0x44>
   1d26a:	f386 8811 	msr	BASEPRI, r6
   1d26e:	f3bf 8f6f 	isb	sy
   1d272:	e7f5      	b.n	1d260 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d274:	f023 0220 	bic.w	r2, r3, #32
   1d278:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1d27c:	09d2      	lsrs	r2, r2, #7
   1d27e:	d120      	bne.n	1d2c2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d280:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1d282:	68a3      	ldr	r3, [r4, #8]
   1d284:	b113      	cbz	r3, 1d28c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1d286:	4620      	mov	r0, r4
   1d288:	f004 f93c 	bl	21504 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1d28c:	f104 0018 	add.w	r0, r4, #24
   1d290:	f004 fa45 	bl	2171e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1d294:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1d298:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1d29c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d29e:	42bd      	cmp	r5, r7
   1d2a0:	d000      	beq.n	1d2a4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d2a2:	b9b5      	cbnz	r5, 1d2d2 <z_thread_abort+0xa2>
		update_cache(1);
   1d2a4:	2001      	movs	r0, #1
   1d2a6:	f7ff fcef 	bl	1cc88 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1d2aa:	4b10      	ldr	r3, [pc, #64]	; (1d2ec <z_thread_abort+0xbc>)
   1d2ac:	689b      	ldr	r3, [r3, #8]
   1d2ae:	42a3      	cmp	r3, r4
   1d2b0:	d1db      	bne.n	1d26a <z_thread_abort+0x3a>
   1d2b2:	f3ef 8305 	mrs	r3, IPSR
   1d2b6:	2b00      	cmp	r3, #0
   1d2b8:	d1d7      	bne.n	1d26a <z_thread_abort+0x3a>
   1d2ba:	4630      	mov	r0, r6
   1d2bc:	f7f5 ffc2 	bl	13244 <arch_swap>
	return ret;
   1d2c0:	e7d3      	b.n	1d26a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d2c2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1d2c6:	f043 0308 	orr.w	r3, r3, #8
   1d2ca:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d2cc:	f004 f912 	bl	214f4 <sys_dlist_remove>
}
   1d2d0:	e7d7      	b.n	1d282 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1d2d2:	4628      	mov	r0, r5
   1d2d4:	f004 f916 	bl	21504 <unpend_thread_no_timeout>
   1d2d8:	f105 0018 	add.w	r0, r5, #24
   1d2dc:	f004 fa1f 	bl	2171e <z_abort_timeout>
   1d2e0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1d2e4:	4628      	mov	r0, r5
   1d2e6:	f7ff fd27 	bl	1cd38 <ready_thread>
   1d2ea:	e7d7      	b.n	1d29c <z_thread_abort+0x6c>
   1d2ec:	20002f5c 	.word	0x20002f5c

0001d2f0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1d2f0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d2f2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1d2f6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d2f8:	e9cd 6700 	strd	r6, r7, [sp]
   1d2fc:	f7ff fdf4 	bl	1cee8 <z_pend_curr>

	if (data != NULL) {
   1d300:	b11c      	cbz	r4, 1d30a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1d302:	4b03      	ldr	r3, [pc, #12]	; (1d310 <z_sched_wait+0x20>)
   1d304:	689b      	ldr	r3, [r3, #8]
   1d306:	695b      	ldr	r3, [r3, #20]
   1d308:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1d30a:	b002      	add	sp, #8
   1d30c:	bdd0      	pop	{r4, r6, r7, pc}
   1d30e:	bf00      	nop
   1d310:	20002f5c 	.word	0x20002f5c

0001d314 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1d314:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1d316:	4806      	ldr	r0, [pc, #24]	; (1d330 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1d318:	4a06      	ldr	r2, [pc, #24]	; (1d334 <z_data_copy+0x20>)
   1d31a:	4907      	ldr	r1, [pc, #28]	; (1d338 <z_data_copy+0x24>)
   1d31c:	1a12      	subs	r2, r2, r0
   1d31e:	f003 fe6d 	bl	20ffc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1d322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1d326:	4a05      	ldr	r2, [pc, #20]	; (1d33c <z_data_copy+0x28>)
   1d328:	4905      	ldr	r1, [pc, #20]	; (1d340 <z_data_copy+0x2c>)
   1d32a:	4806      	ldr	r0, [pc, #24]	; (1d344 <z_data_copy+0x30>)
   1d32c:	f003 be66 	b.w	20ffc <z_early_memcpy>
   1d330:	20000000 	.word	0x20000000
   1d334:	20000994 	.word	0x20000994
   1d338:	00024198 	.word	0x00024198
   1d33c:	00000000 	.word	0x00000000
   1d340:	00024198 	.word	0x00024198
   1d344:	20000000 	.word	0x20000000

0001d348 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1d348:	4b03      	ldr	r3, [pc, #12]	; (1d358 <elapsed+0x10>)
   1d34a:	681b      	ldr	r3, [r3, #0]
   1d34c:	b90b      	cbnz	r3, 1d352 <elapsed+0xa>
   1d34e:	f7fc bf19 	b.w	1a184 <sys_clock_elapsed>
}
   1d352:	2000      	movs	r0, #0
   1d354:	4770      	bx	lr
   1d356:	bf00      	nop
   1d358:	20002fa0 	.word	0x20002fa0

0001d35c <next_timeout>:

static int32_t next_timeout(void)
{
   1d35c:	b510      	push	{r4, lr}
	return list->head == list;
   1d35e:	4b11      	ldr	r3, [pc, #68]	; (1d3a4 <next_timeout+0x48>)
   1d360:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d362:	429c      	cmp	r4, r3
   1d364:	d10a      	bne.n	1d37c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1d366:	f7ff ffef 	bl	1d348 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1d36a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1d36e:	4b0e      	ldr	r3, [pc, #56]	; (1d3a8 <next_timeout+0x4c>)
   1d370:	691b      	ldr	r3, [r3, #16]
   1d372:	b113      	cbz	r3, 1d37a <next_timeout+0x1e>
   1d374:	4298      	cmp	r0, r3
   1d376:	bfa8      	it	ge
   1d378:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1d37a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1d37c:	f7ff ffe4 	bl	1d348 <elapsed>
	if ((to == NULL) ||
   1d380:	2c00      	cmp	r4, #0
   1d382:	d0f2      	beq.n	1d36a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1d384:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1d388:	1a1b      	subs	r3, r3, r0
   1d38a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1d38e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1d392:	f172 0100 	sbcs.w	r1, r2, #0
   1d396:	dae8      	bge.n	1d36a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1d398:	2a00      	cmp	r2, #0
   1d39a:	bfac      	ite	ge
   1d39c:	4618      	movge	r0, r3
   1d39e:	2000      	movlt	r0, #0
   1d3a0:	e7e5      	b.n	1d36e <next_timeout+0x12>
   1d3a2:	bf00      	nop
   1d3a4:	200006a0 	.word	0x200006a0
   1d3a8:	20002f5c 	.word	0x20002f5c

0001d3ac <remove_timeout>:
{
   1d3ac:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d3ae:	b170      	cbz	r0, 1d3ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1d3b0:	4b0b      	ldr	r3, [pc, #44]	; (1d3e0 <remove_timeout+0x34>)
   1d3b2:	685b      	ldr	r3, [r3, #4]
   1d3b4:	4298      	cmp	r0, r3
   1d3b6:	d00a      	beq.n	1d3ce <remove_timeout+0x22>
   1d3b8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1d3ba:	b143      	cbz	r3, 1d3ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1d3bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1d3c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1d3c4:	1912      	adds	r2, r2, r4
   1d3c6:	eb41 0105 	adc.w	r1, r1, r5
   1d3ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1d3ce:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1d3d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d3d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d3d6:	2300      	movs	r3, #0
	node->prev = NULL;
   1d3d8:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d3dc:	bd30      	pop	{r4, r5, pc}
   1d3de:	bf00      	nop
   1d3e0:	200006a0 	.word	0x200006a0

0001d3e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d3e8:	bf08      	it	eq
   1d3ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1d3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3f0:	4604      	mov	r4, r0
   1d3f2:	461d      	mov	r5, r3
   1d3f4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d3f6:	d061      	beq.n	1d4bc <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1d3f8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1d3fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d3fe:	f3ef 8711 	mrs	r7, BASEPRI
   1d402:	f383 8812 	msr	BASEPRI_MAX, r3
   1d406:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1d40a:	3201      	adds	r2, #1
   1d40c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1d410:	da24      	bge.n	1d45c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1d412:	4930      	ldr	r1, [pc, #192]	; (1d4d4 <z_add_timeout+0xf0>)
   1d414:	e9d1 2000 	ldrd	r2, r0, [r1]
   1d418:	f06f 0301 	mvn.w	r3, #1
   1d41c:	1a9b      	subs	r3, r3, r2
   1d41e:	f04f 32ff 	mov.w	r2, #4294967295
   1d422:	eb62 0000 	sbc.w	r0, r2, r0
   1d426:	1b9e      	subs	r6, r3, r6
   1d428:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1d42c:	2e01      	cmp	r6, #1
   1d42e:	f170 0300 	sbcs.w	r3, r0, #0
   1d432:	da01      	bge.n	1d438 <z_add_timeout+0x54>
   1d434:	2601      	movs	r6, #1
   1d436:	2000      	movs	r0, #0
   1d438:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1d43c:	4e26      	ldr	r6, [pc, #152]	; (1d4d8 <z_add_timeout+0xf4>)
   1d43e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1d442:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d444:	45b4      	cmp	ip, r6
   1d446:	bf08      	it	eq
   1d448:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1d44c:	f1bc 0f00 	cmp.w	ip, #0
   1d450:	d10d      	bne.n	1d46e <z_add_timeout+0x8a>
	node->prev = tail;
   1d452:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1d456:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1d458:	6074      	str	r4, [r6, #4]
}
   1d45a:	e01c      	b.n	1d496 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1d45c:	f7ff ff74 	bl	1d348 <elapsed>
   1d460:	3601      	adds	r6, #1
   1d462:	f145 0500 	adc.w	r5, r5, #0
   1d466:	1836      	adds	r6, r6, r0
   1d468:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1d46c:	e7e4      	b.n	1d438 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1d46e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1d472:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1d476:	4293      	cmp	r3, r2
   1d478:	eb71 0e00 	sbcs.w	lr, r1, r0
   1d47c:	da1f      	bge.n	1d4be <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1d47e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1d480:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1d484:	eb60 0001 	sbc.w	r0, r0, r1
   1d488:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   1d48c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1d490:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d492:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1d496:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d498:	42b3      	cmp	r3, r6
   1d49a:	d00b      	beq.n	1d4b4 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1d49c:	429c      	cmp	r4, r3
   1d49e:	d109      	bne.n	1d4b4 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1d4a0:	f7ff ff5c 	bl	1d35c <next_timeout>

			if (next_time == 0 ||
   1d4a4:	b118      	cbz	r0, 1d4ae <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   1d4a6:	4b0d      	ldr	r3, [pc, #52]	; (1d4dc <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   1d4a8:	691b      	ldr	r3, [r3, #16]
   1d4aa:	4283      	cmp	r3, r0
   1d4ac:	d002      	beq.n	1d4b4 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   1d4ae:	2100      	movs	r1, #0
   1d4b0:	f7fc fe36 	bl	1a120 <sys_clock_set_timeout>
	__asm__ volatile(
   1d4b4:	f387 8811 	msr	BASEPRI, r7
   1d4b8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1d4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1d4be:	1a9b      	subs	r3, r3, r2
   1d4c0:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1d4c4:	45ac      	cmp	ip, r5
   1d4c6:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1d4ca:	d0c2      	beq.n	1d452 <z_add_timeout+0x6e>
   1d4cc:	f8dc c000 	ldr.w	ip, [ip]
   1d4d0:	e7bc      	b.n	1d44c <z_add_timeout+0x68>
   1d4d2:	bf00      	nop
   1d4d4:	20002b00 	.word	0x20002b00
   1d4d8:	200006a0 	.word	0x200006a0
   1d4dc:	20002f5c 	.word	0x20002f5c

0001d4e0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d4e4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1d4e6:	f7ff fcbd 	bl	1ce64 <z_time_slice>
	__asm__ volatile(
   1d4ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d4ee:	f3ef 8611 	mrs	r6, BASEPRI
   1d4f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4f6:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1d4fa:	4f23      	ldr	r7, [pc, #140]	; (1d588 <sys_clock_announce+0xa8>)
	return list->head == list;
   1d4fc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1d590 <sys_clock_announce+0xb0>
   1d500:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1d504:	4a21      	ldr	r2, [pc, #132]	; (1d58c <sys_clock_announce+0xac>)
	announce_remaining = ticks;
   1d506:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d508:	4540      	cmp	r0, r8
		curr_tick += dt;
   1d50a:	e9d2 3e00 	ldrd	r3, lr, [r2]
   1d50e:	ea4f 71e4 	mov.w	r1, r4, asr #31
   1d512:	d00b      	beq.n	1d52c <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1d514:	b150      	cbz	r0, 1d52c <sys_clock_announce+0x4c>
   1d516:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   1d51a:	42ac      	cmp	r4, r5
   1d51c:	eb71 090c 	sbcs.w	r9, r1, ip
   1d520:	da16      	bge.n	1d550 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1d522:	1b2d      	subs	r5, r5, r4
   1d524:	eb6c 0c01 	sbc.w	ip, ip, r1
   1d528:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1d52c:	18e3      	adds	r3, r4, r3
   1d52e:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   1d532:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1d534:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1d538:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1d53a:	f7ff ff0f 	bl	1d35c <next_timeout>
   1d53e:	4621      	mov	r1, r4
   1d540:	f7fc fdee 	bl	1a120 <sys_clock_set_timeout>
	__asm__ volatile(
   1d544:	f386 8811 	msr	BASEPRI, r6
   1d548:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1d54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1d550:	18eb      	adds	r3, r5, r3
   1d552:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   1d556:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1d55a:	2200      	movs	r2, #0
   1d55c:	2300      	movs	r3, #0
   1d55e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1d562:	f7ff ff23 	bl	1d3ac <remove_timeout>
   1d566:	f386 8811 	msr	BASEPRI, r6
   1d56a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1d56e:	6883      	ldr	r3, [r0, #8]
   1d570:	4798      	blx	r3
	__asm__ volatile(
   1d572:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d576:	f3ef 8611 	mrs	r6, BASEPRI
   1d57a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d57e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1d582:	683c      	ldr	r4, [r7, #0]
   1d584:	1b64      	subs	r4, r4, r5
   1d586:	e7bb      	b.n	1d500 <sys_clock_announce+0x20>
   1d588:	20002fa0 	.word	0x20002fa0
   1d58c:	20002b00 	.word	0x20002b00
   1d590:	200006a0 	.word	0x200006a0

0001d594 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1d594:	b510      	push	{r4, lr}
   1d596:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d59a:	f3ef 8411 	mrs	r4, BASEPRI
   1d59e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5a2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1d5a6:	f7ff fecf 	bl	1d348 <elapsed>
   1d5aa:	4a06      	ldr	r2, [pc, #24]	; (1d5c4 <sys_clock_tick_get+0x30>)
   1d5ac:	4603      	mov	r3, r0
   1d5ae:	e9d2 0100 	ldrd	r0, r1, [r2]
   1d5b2:	1818      	adds	r0, r3, r0
   1d5b4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1d5b8:	f384 8811 	msr	BASEPRI, r4
   1d5bc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1d5c0:	bd10      	pop	{r4, pc}
   1d5c2:	bf00      	nop
   1d5c4:	20002b00 	.word	0x20002b00

0001d5c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1d5c8:	b570      	push	{r4, r5, r6, lr}
   1d5ca:	4604      	mov	r4, r0
	__asm__ volatile(
   1d5cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d5d0:	f3ef 8511 	mrs	r5, BASEPRI
   1d5d4:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5d8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d5dc:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1d5e0:	3301      	adds	r3, #1
   1d5e2:	f142 0200 	adc.w	r2, r2, #0
   1d5e6:	2b02      	cmp	r3, #2
   1d5e8:	f172 0200 	sbcs.w	r2, r2, #0
   1d5ec:	d322      	bcc.n	1d634 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   1d5ee:	f004 f8dc 	bl	217aa <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1d5f2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1d5f6:	3001      	adds	r0, #1
   1d5f8:	f141 0100 	adc.w	r1, r1, #0
   1d5fc:	18c0      	adds	r0, r0, r3
   1d5fe:	eb41 0102 	adc.w	r1, r1, r2
   1d602:	2801      	cmp	r0, #1
   1d604:	f171 0100 	sbcs.w	r1, r1, #0
   1d608:	db32      	blt.n	1d670 <z_timer_expiration_handler+0xa8>
   1d60a:	f004 f8ce 	bl	217aa <z_impl_k_uptime_ticks>
   1d60e:	3001      	adds	r0, #1
   1d610:	f141 0300 	adc.w	r3, r1, #0
   1d614:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   1d618:	1880      	adds	r0, r0, r2
   1d61a:	f06f 0201 	mvn.w	r2, #1
   1d61e:	eb43 0301 	adc.w	r3, r3, r1
   1d622:	1a12      	subs	r2, r2, r0
   1d624:	f04f 31ff 	mov.w	r1, #4294967295
   1d628:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d62c:	491a      	ldr	r1, [pc, #104]	; (1d698 <z_timer_expiration_handler+0xd0>)
   1d62e:	4620      	mov	r0, r4
   1d630:	f7ff fed8 	bl	1d3e4 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1d634:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d636:	3301      	adds	r3, #1
   1d638:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1d63a:	6a23      	ldr	r3, [r4, #32]
   1d63c:	b173      	cbz	r3, 1d65c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   1d63e:	f385 8811 	msr	BASEPRI, r5
   1d642:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1d646:	6a23      	ldr	r3, [r4, #32]
   1d648:	4620      	mov	r0, r4
   1d64a:	4798      	blx	r3
	__asm__ volatile(
   1d64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d650:	f3ef 8511 	mrs	r5, BASEPRI
   1d654:	f383 8812 	msr	BASEPRI_MAX, r3
   1d658:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1d65c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d660:	42a6      	cmp	r6, r4
   1d662:	d000      	beq.n	1d666 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1d664:	b94e      	cbnz	r6, 1d67a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   1d666:	f385 8811 	msr	BASEPRI, r5
   1d66a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1d66e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1d670:	f06f 0201 	mvn.w	r2, #1
   1d674:	f04f 33ff 	mov.w	r3, #4294967295
   1d678:	e7d8      	b.n	1d62c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   1d67a:	4630      	mov	r0, r6
   1d67c:	f003 ffaf 	bl	215de <z_unpend_thread_no_timeout>
   1d680:	2300      	movs	r3, #0
   1d682:	67f3      	str	r3, [r6, #124]	; 0x7c
   1d684:	f385 8811 	msr	BASEPRI, r5
   1d688:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1d68c:	4630      	mov	r0, r6
}
   1d68e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1d692:	f003 bf94 	b.w	215be <z_ready_thread>
   1d696:	bf00      	nop
   1d698:	0001d5c9 	.word	0x0001d5c9

0001d69c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1d69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d6a4:	bf08      	it	eq
   1d6a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1d6aa:	4605      	mov	r5, r0
   1d6ac:	4614      	mov	r4, r2
   1d6ae:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   1d6b2:	4619      	mov	r1, r3
   1d6b4:	4691      	mov	r9, r2
   1d6b6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d6b8:	d037      	beq.n	1d72a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1d6ba:	f1b0 3fff 	cmp.w	r0, #4294967295
   1d6be:	bf08      	it	eq
   1d6c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1d6c4:	4637      	mov	r7, r6
   1d6c6:	4682      	mov	sl, r0
   1d6c8:	d011      	beq.n	1d6ee <z_impl_k_timer_start+0x52>
   1d6ca:	ea50 0306 	orrs.w	r3, r0, r6
   1d6ce:	d00e      	beq.n	1d6ee <z_impl_k_timer_start+0x52>
   1d6d0:	1c72      	adds	r2, r6, #1
   1d6d2:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   1d6d6:	db0a      	blt.n	1d6ee <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   1d6d8:	2e02      	cmp	r6, #2
   1d6da:	4684      	mov	ip, r0
   1d6dc:	f170 0000 	sbcs.w	r0, r0, #0
   1d6e0:	bfbc      	itt	lt
   1d6e2:	2702      	movlt	r7, #2
   1d6e4:	f04f 0c00 	movlt.w	ip, #0
   1d6e8:	3f01      	subs	r7, #1
   1d6ea:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1d6ee:	1c63      	adds	r3, r4, #1
   1d6f0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1d6f4:	db0a      	blt.n	1d70c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1d6f6:	2c01      	cmp	r4, #1
   1d6f8:	f171 0300 	sbcs.w	r3, r1, #0
   1d6fc:	4622      	mov	r2, r4
   1d6fe:	bfbc      	itt	lt
   1d700:	2201      	movlt	r2, #1
   1d702:	2100      	movlt	r1, #0
   1d704:	f112 39ff 	adds.w	r9, r2, #4294967295
   1d708:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1d70c:	4628      	mov	r0, r5
   1d70e:	f004 f806 	bl	2171e <z_abort_timeout>
	timer->period = period;
   1d712:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   1d716:	2300      	movs	r3, #0
   1d718:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d71a:	464a      	mov	r2, r9
   1d71c:	4643      	mov	r3, r8
   1d71e:	4628      	mov	r0, r5
   1d720:	4903      	ldr	r1, [pc, #12]	; (1d730 <z_impl_k_timer_start+0x94>)
		     duration);
}
   1d722:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d726:	f7ff be5d 	b.w	1d3e4 <z_add_timeout>
}
   1d72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d72e:	bf00      	nop
   1d730:	0001d5c9 	.word	0x0001d5c9

0001d734 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1d734:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d738:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1d73a:	4b29      	ldr	r3, [pc, #164]	; (1d7e0 <z_impl_k_poll+0xac>)
   1d73c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1d73e:	2301      	movs	r3, #1
   1d740:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1d744:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1d748:	ea52 0305 	orrs.w	r3, r2, r5
{
   1d74c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1d74e:	bf0c      	ite	eq
   1d750:	2301      	moveq	r3, #1
   1d752:	2300      	movne	r3, #0
   1d754:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1d758:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1d75a:	f004 f8a8 	bl	218ae <register_events>
   1d75e:	4681      	mov	r9, r0
	__asm__ volatile(
   1d760:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d764:	f3ef 8a11 	mrs	sl, BASEPRI
   1d768:	f383 8812 	msr	BASEPRI_MAX, r3
   1d76c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1d770:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1d774:	b964      	cbnz	r4, 1d790 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1d776:	4601      	mov	r1, r0
   1d778:	4652      	mov	r2, sl
   1d77a:	4640      	mov	r0, r8
   1d77c:	f004 f968 	bl	21a50 <clear_event_registrations>
	__asm__ volatile(
   1d780:	f38a 8811 	msr	BASEPRI, sl
   1d784:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1d788:	4620      	mov	r0, r4
   1d78a:	b002      	add	sp, #8
   1d78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1d790:	2300      	movs	r3, #0
   1d792:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d796:	ea56 0305 	orrs.w	r3, r6, r5
   1d79a:	d106      	bne.n	1d7aa <z_impl_k_poll+0x76>
   1d79c:	f38a 8811 	msr	BASEPRI, sl
   1d7a0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d7a4:	f06f 040a 	mvn.w	r4, #10
   1d7a8:	e7ee      	b.n	1d788 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d7aa:	e9cd 6500 	strd	r6, r5, [sp]
   1d7ae:	4a0d      	ldr	r2, [pc, #52]	; (1d7e4 <z_impl_k_poll+0xb0>)
   1d7b0:	480d      	ldr	r0, [pc, #52]	; (1d7e8 <z_impl_k_poll+0xb4>)
   1d7b2:	4651      	mov	r1, sl
   1d7b4:	f7ff fb98 	bl	1cee8 <z_pend_curr>
   1d7b8:	4604      	mov	r4, r0
	__asm__ volatile(
   1d7ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7be:	f3ef 8511 	mrs	r5, BASEPRI
   1d7c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7c6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1d7ca:	462a      	mov	r2, r5
   1d7cc:	4649      	mov	r1, r9
   1d7ce:	4640      	mov	r0, r8
   1d7d0:	f004 f93e 	bl	21a50 <clear_event_registrations>
	__asm__ volatile(
   1d7d4:	f385 8811 	msr	BASEPRI, r5
   1d7d8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1d7dc:	e7d4      	b.n	1d788 <z_impl_k_poll+0x54>
   1d7de:	bf00      	nop
   1d7e0:	20002f5c 	.word	0x20002f5c
   1d7e4:	200006a8 	.word	0x200006a8
   1d7e8:	20003568 	.word	0x20003568

0001d7ec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1d7ec:	b538      	push	{r3, r4, r5, lr}
   1d7ee:	4603      	mov	r3, r0
	__asm__ volatile(
   1d7f0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d7f4:	f3ef 8511 	mrs	r5, BASEPRI
   1d7f8:	f382 8812 	msr	BASEPRI_MAX, r2
   1d7fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1d800:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1d802:	2101      	movs	r1, #1
   1d804:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1d806:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d808:	4283      	cmp	r3, r0
   1d80a:	d106      	bne.n	1d81a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1d80c:	f385 8811 	msr	BASEPRI, r5
   1d810:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1d814:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1d816:	4620      	mov	r0, r4
   1d818:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1d81a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d81e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d820:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d822:	2300      	movs	r3, #0
	node->prev = NULL;
   1d824:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d828:	f004 f8b8 	bl	2199c <signal_poll_event>
	z_reschedule(&lock, key);
   1d82c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d82e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d830:	4801      	ldr	r0, [pc, #4]	; (1d838 <z_impl_k_poll_signal_raise+0x4c>)
   1d832:	f7ff fbbd 	bl	1cfb0 <z_reschedule>
	return rc;
   1d836:	e7ee      	b.n	1d816 <z_impl_k_poll_signal_raise+0x2a>
   1d838:	20003568 	.word	0x20003568

0001d83c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d83c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d83e:	4606      	mov	r6, r0
   1d840:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d842:	f003 fc8f 	bl	21164 <k_is_in_isr>
   1d846:	b978      	cbnz	r0, 1d868 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d848:	4b0b      	ldr	r3, [pc, #44]	; (1d878 <z_thread_aligned_alloc+0x3c>)
   1d84a:	689b      	ldr	r3, [r3, #8]
   1d84c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1d84e:	b17c      	cbz	r4, 1d870 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d850:	1d2a      	adds	r2, r5, #4
   1d852:	d209      	bcs.n	1d868 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1d854:	2000      	movs	r0, #0
   1d856:	2100      	movs	r1, #0
   1d858:	e9cd 0100 	strd	r0, r1, [sp]
   1d85c:	f046 0104 	orr.w	r1, r6, #4
   1d860:	4620      	mov	r0, r4
   1d862:	f003 fbd6 	bl	21012 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d866:	b908      	cbnz	r0, 1d86c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1d868:	2400      	movs	r4, #0
	}

	return ret;
   1d86a:	e001      	b.n	1d870 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1d86c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1d86e:	1d04      	adds	r4, r0, #4
}
   1d870:	4620      	mov	r0, r4
   1d872:	b002      	add	sp, #8
   1d874:	bd70      	pop	{r4, r5, r6, pc}
   1d876:	bf00      	nop
   1d878:	20002f5c 	.word	0x20002f5c

0001d87c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1d87c:	4801      	ldr	r0, [pc, #4]	; (1d884 <boot_banner+0x8>)
   1d87e:	f000 bbf1 	b.w	1e064 <printk>
   1d882:	bf00      	nop
   1d884:	00024167 	.word	0x00024167

0001d888 <ocrypto_ecdh_p256_public_key>:
   1d888:	b530      	push	{r4, r5, lr}
   1d88a:	b099      	sub	sp, #100	; 0x64
   1d88c:	4605      	mov	r5, r0
   1d88e:	4668      	mov	r0, sp
   1d890:	f000 f828 	bl	1d8e4 <ocrypto_sc_p256_from32bytes>
   1d894:	4669      	mov	r1, sp
   1d896:	4604      	mov	r4, r0
   1d898:	a808      	add	r0, sp, #32
   1d89a:	f000 fa53 	bl	1dd44 <ocrypto_curve_p256_scalarmult_base>
   1d89e:	a908      	add	r1, sp, #32
   1d8a0:	4304      	orrs	r4, r0
   1d8a2:	4628      	mov	r0, r5
   1d8a4:	f000 f98a 	bl	1dbbc <ocrypto_curve_p256_to64bytes>
   1d8a8:	4620      	mov	r0, r4
   1d8aa:	b019      	add	sp, #100	; 0x64
   1d8ac:	bd30      	pop	{r4, r5, pc}
   1d8ae:	bf00      	nop

0001d8b0 <ocrypto_ecdh_p256_common_secret>:
   1d8b0:	b570      	push	{r4, r5, r6, lr}
   1d8b2:	b098      	sub	sp, #96	; 0x60
   1d8b4:	4605      	mov	r5, r0
   1d8b6:	4668      	mov	r0, sp
   1d8b8:	4616      	mov	r6, r2
   1d8ba:	f000 f813 	bl	1d8e4 <ocrypto_sc_p256_from32bytes>
   1d8be:	4631      	mov	r1, r6
   1d8c0:	4604      	mov	r4, r0
   1d8c2:	a808      	add	r0, sp, #32
   1d8c4:	f000 f946 	bl	1db54 <ocrypto_curve_p256_from64bytes>
   1d8c8:	a908      	add	r1, sp, #32
   1d8ca:	466a      	mov	r2, sp
   1d8cc:	4304      	orrs	r4, r0
   1d8ce:	4608      	mov	r0, r1
   1d8d0:	f000 f982 	bl	1dbd8 <ocrypto_curve_p256_scalarmult>
   1d8d4:	a908      	add	r1, sp, #32
   1d8d6:	4304      	orrs	r4, r0
   1d8d8:	4628      	mov	r0, r5
   1d8da:	f000 f96d 	bl	1dbb8 <ocrypto_curve_p256_to32bytes>
   1d8de:	4620      	mov	r0, r4
   1d8e0:	b018      	add	sp, #96	; 0x60
   1d8e2:	bd70      	pop	{r4, r5, r6, pc}

0001d8e4 <ocrypto_sc_p256_from32bytes>:
   1d8e4:	b570      	push	{r4, r5, r6, lr}
   1d8e6:	680b      	ldr	r3, [r1, #0]
   1d8e8:	4e12      	ldr	r6, [pc, #72]	; (1d934 <ocrypto_sc_p256_from32bytes+0x50>)
   1d8ea:	ba1b      	rev	r3, r3
   1d8ec:	61c3      	str	r3, [r0, #28]
   1d8ee:	684b      	ldr	r3, [r1, #4]
   1d8f0:	ba1b      	rev	r3, r3
   1d8f2:	6183      	str	r3, [r0, #24]
   1d8f4:	688b      	ldr	r3, [r1, #8]
   1d8f6:	ba1b      	rev	r3, r3
   1d8f8:	6143      	str	r3, [r0, #20]
   1d8fa:	68cb      	ldr	r3, [r1, #12]
   1d8fc:	ba1b      	rev	r3, r3
   1d8fe:	6103      	str	r3, [r0, #16]
   1d900:	690b      	ldr	r3, [r1, #16]
   1d902:	ba1b      	rev	r3, r3
   1d904:	60c3      	str	r3, [r0, #12]
   1d906:	694b      	ldr	r3, [r1, #20]
   1d908:	ba1b      	rev	r3, r3
   1d90a:	6083      	str	r3, [r0, #8]
   1d90c:	698b      	ldr	r3, [r1, #24]
   1d90e:	ba1b      	rev	r3, r3
   1d910:	6043      	str	r3, [r0, #4]
   1d912:	69cb      	ldr	r3, [r1, #28]
   1d914:	ba1b      	rev	r3, r3
   1d916:	4632      	mov	r2, r6
   1d918:	6003      	str	r3, [r0, #0]
   1d91a:	4601      	mov	r1, r0
   1d91c:	4604      	mov	r4, r0
   1d91e:	f7e2 fc29 	bl	174 <ocrypto_bigint_sub256>
   1d922:	4631      	mov	r1, r6
   1d924:	4605      	mov	r5, r0
   1d926:	4602      	mov	r2, r0
   1d928:	4620      	mov	r0, r4
   1d92a:	f7e2 fc43 	bl	1b4 <ocrypto_bigint_cadd256>
   1d92e:	1e68      	subs	r0, r5, #1
   1d930:	bd70      	pop	{r4, r5, r6, pc}
   1d932:	bf00      	nop
   1d934:	000224d0 	.word	0x000224d0

0001d938 <p256_zdblu>:
   1d938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d93c:	b088      	sub	sp, #32
   1d93e:	460c      	mov	r4, r1
   1d940:	4606      	mov	r6, r0
   1d942:	f102 0120 	add.w	r1, r2, #32
   1d946:	4668      	mov	r0, sp
   1d948:	f106 0720 	add.w	r7, r6, #32
   1d94c:	4690      	mov	r8, r2
   1d94e:	f7e2 ff27 	bl	7a0 <ocrypto_mod_p256_sqr>
   1d952:	466a      	mov	r2, sp
   1d954:	4669      	mov	r1, sp
   1d956:	4668      	mov	r0, sp
   1d958:	f7e2 fe34 	bl	5c4 <ocrypto_mod_p256_add>
   1d95c:	4669      	mov	r1, sp
   1d95e:	4638      	mov	r0, r7
   1d960:	f7e2 ff1e 	bl	7a0 <ocrypto_mod_p256_sqr>
   1d964:	463a      	mov	r2, r7
   1d966:	4639      	mov	r1, r7
   1d968:	4638      	mov	r0, r7
   1d96a:	f104 0520 	add.w	r5, r4, #32
   1d96e:	f7e2 fe29 	bl	5c4 <ocrypto_mod_p256_add>
   1d972:	466a      	mov	r2, sp
   1d974:	4669      	mov	r1, sp
   1d976:	4668      	mov	r0, sp
   1d978:	f7e2 fe24 	bl	5c4 <ocrypto_mod_p256_add>
   1d97c:	4641      	mov	r1, r8
   1d97e:	4628      	mov	r0, r5
   1d980:	f7e2 ff0e 	bl	7a0 <ocrypto_mod_p256_sqr>
   1d984:	466a      	mov	r2, sp
   1d986:	4641      	mov	r1, r8
   1d988:	4630      	mov	r0, r6
   1d98a:	f7e2 fef1 	bl	770 <ocrypto_mod_p256_mul>
   1d98e:	462a      	mov	r2, r5
   1d990:	4629      	mov	r1, r5
   1d992:	4668      	mov	r0, sp
   1d994:	f7e2 fe16 	bl	5c4 <ocrypto_mod_p256_add>
   1d998:	462a      	mov	r2, r5
   1d99a:	4669      	mov	r1, sp
   1d99c:	4668      	mov	r0, sp
   1d99e:	f7e2 fe11 	bl	5c4 <ocrypto_mod_p256_add>
   1d9a2:	4a12      	ldr	r2, [pc, #72]	; (1d9ec <p256_zdblu+0xb4>)
   1d9a4:	4669      	mov	r1, sp
   1d9a6:	4668      	mov	r0, sp
   1d9a8:	f7e2 fe0c 	bl	5c4 <ocrypto_mod_p256_add>
   1d9ac:	4669      	mov	r1, sp
   1d9ae:	4620      	mov	r0, r4
   1d9b0:	f7e2 fef6 	bl	7a0 <ocrypto_mod_p256_sqr>
   1d9b4:	4632      	mov	r2, r6
   1d9b6:	4621      	mov	r1, r4
   1d9b8:	4620      	mov	r0, r4
   1d9ba:	f7e2 fe41 	bl	640 <ocrypto_mod_p256_sub>
   1d9be:	4632      	mov	r2, r6
   1d9c0:	4621      	mov	r1, r4
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	f7e2 fe3c 	bl	640 <ocrypto_mod_p256_sub>
   1d9c8:	4622      	mov	r2, r4
   1d9ca:	4631      	mov	r1, r6
   1d9cc:	4628      	mov	r0, r5
   1d9ce:	f7e2 fe37 	bl	640 <ocrypto_mod_p256_sub>
   1d9d2:	466a      	mov	r2, sp
   1d9d4:	4629      	mov	r1, r5
   1d9d6:	4628      	mov	r0, r5
   1d9d8:	f7e2 feca 	bl	770 <ocrypto_mod_p256_mul>
   1d9dc:	463a      	mov	r2, r7
   1d9de:	4629      	mov	r1, r5
   1d9e0:	4628      	mov	r0, r5
   1d9e2:	f7e2 fe2d 	bl	640 <ocrypto_mod_p256_sub>
   1d9e6:	b008      	add	sp, #32
   1d9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d9ec:	00022570 	.word	0x00022570

0001d9f0 <p256_zaddc>:
   1d9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9f2:	b099      	sub	sp, #100	; 0x64
   1d9f4:	4604      	mov	r4, r0
   1d9f6:	460d      	mov	r5, r1
   1d9f8:	460a      	mov	r2, r1
   1d9fa:	4601      	mov	r1, r0
   1d9fc:	4668      	mov	r0, sp
   1d9fe:	f7e2 fe1f 	bl	640 <ocrypto_mod_p256_sub>
   1da02:	4669      	mov	r1, sp
   1da04:	4668      	mov	r0, sp
   1da06:	f7e2 fecb 	bl	7a0 <ocrypto_mod_p256_sqr>
   1da0a:	466a      	mov	r2, sp
   1da0c:	4621      	mov	r1, r4
   1da0e:	a808      	add	r0, sp, #32
   1da10:	f105 0620 	add.w	r6, r5, #32
   1da14:	f104 0720 	add.w	r7, r4, #32
   1da18:	f7e2 feaa 	bl	770 <ocrypto_mod_p256_mul>
   1da1c:	466a      	mov	r2, sp
   1da1e:	4629      	mov	r1, r5
   1da20:	4668      	mov	r0, sp
   1da22:	f7e2 fea5 	bl	770 <ocrypto_mod_p256_mul>
   1da26:	4632      	mov	r2, r6
   1da28:	4639      	mov	r1, r7
   1da2a:	a810      	add	r0, sp, #64	; 0x40
   1da2c:	f7e2 fdca 	bl	5c4 <ocrypto_mod_p256_add>
   1da30:	4632      	mov	r2, r6
   1da32:	4639      	mov	r1, r7
   1da34:	4630      	mov	r0, r6
   1da36:	f7e2 fe03 	bl	640 <ocrypto_mod_p256_sub>
   1da3a:	4631      	mov	r1, r6
   1da3c:	4628      	mov	r0, r5
   1da3e:	f7e2 feaf 	bl	7a0 <ocrypto_mod_p256_sqr>
   1da42:	466a      	mov	r2, sp
   1da44:	a908      	add	r1, sp, #32
   1da46:	4620      	mov	r0, r4
   1da48:	f7e2 fdbc 	bl	5c4 <ocrypto_mod_p256_add>
   1da4c:	4622      	mov	r2, r4
   1da4e:	4629      	mov	r1, r5
   1da50:	4628      	mov	r0, r5
   1da52:	f7e2 fdf5 	bl	640 <ocrypto_mod_p256_sub>
   1da56:	466a      	mov	r2, sp
   1da58:	a908      	add	r1, sp, #32
   1da5a:	4668      	mov	r0, sp
   1da5c:	f7e2 fdf0 	bl	640 <ocrypto_mod_p256_sub>
   1da60:	466a      	mov	r2, sp
   1da62:	4639      	mov	r1, r7
   1da64:	4638      	mov	r0, r7
   1da66:	f7e2 fe83 	bl	770 <ocrypto_mod_p256_mul>
   1da6a:	462a      	mov	r2, r5
   1da6c:	a908      	add	r1, sp, #32
   1da6e:	4668      	mov	r0, sp
   1da70:	f7e2 fde6 	bl	640 <ocrypto_mod_p256_sub>
   1da74:	466a      	mov	r2, sp
   1da76:	4631      	mov	r1, r6
   1da78:	4630      	mov	r0, r6
   1da7a:	f7e2 fe79 	bl	770 <ocrypto_mod_p256_mul>
   1da7e:	463a      	mov	r2, r7
   1da80:	4631      	mov	r1, r6
   1da82:	4630      	mov	r0, r6
   1da84:	f7e2 fddc 	bl	640 <ocrypto_mod_p256_sub>
   1da88:	a910      	add	r1, sp, #64	; 0x40
   1da8a:	4668      	mov	r0, sp
   1da8c:	f7e2 fe88 	bl	7a0 <ocrypto_mod_p256_sqr>
   1da90:	4622      	mov	r2, r4
   1da92:	4669      	mov	r1, sp
   1da94:	4620      	mov	r0, r4
   1da96:	f7e2 fdd3 	bl	640 <ocrypto_mod_p256_sub>
   1da9a:	a908      	add	r1, sp, #32
   1da9c:	4622      	mov	r2, r4
   1da9e:	4608      	mov	r0, r1
   1daa0:	f7e2 fdce 	bl	640 <ocrypto_mod_p256_sub>
   1daa4:	a910      	add	r1, sp, #64	; 0x40
   1daa6:	aa08      	add	r2, sp, #32
   1daa8:	4608      	mov	r0, r1
   1daaa:	f7e2 fe61 	bl	770 <ocrypto_mod_p256_mul>
   1daae:	463a      	mov	r2, r7
   1dab0:	a910      	add	r1, sp, #64	; 0x40
   1dab2:	4638      	mov	r0, r7
   1dab4:	f7e2 fdc4 	bl	640 <ocrypto_mod_p256_sub>
   1dab8:	b019      	add	sp, #100	; 0x64
   1daba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dabc <p256_zaddu>:
   1dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dac0:	b088      	sub	sp, #32
   1dac2:	460c      	mov	r4, r1
   1dac4:	4605      	mov	r5, r0
   1dac6:	4690      	mov	r8, r2
   1dac8:	460a      	mov	r2, r1
   1daca:	4601      	mov	r1, r0
   1dacc:	4668      	mov	r0, sp
   1dace:	f7e2 fdb7 	bl	640 <ocrypto_mod_p256_sub>
   1dad2:	4669      	mov	r1, sp
   1dad4:	4668      	mov	r0, sp
   1dad6:	f7e2 fe63 	bl	7a0 <ocrypto_mod_p256_sqr>
   1dada:	466a      	mov	r2, sp
   1dadc:	4629      	mov	r1, r5
   1dade:	4628      	mov	r0, r5
   1dae0:	f104 0620 	add.w	r6, r4, #32
   1dae4:	f7e2 fe44 	bl	770 <ocrypto_mod_p256_mul>
   1dae8:	f105 0720 	add.w	r7, r5, #32
   1daec:	466a      	mov	r2, sp
   1daee:	4621      	mov	r1, r4
   1daf0:	4668      	mov	r0, sp
   1daf2:	f7e2 fe3d 	bl	770 <ocrypto_mod_p256_mul>
   1daf6:	4632      	mov	r2, r6
   1daf8:	4639      	mov	r1, r7
   1dafa:	4630      	mov	r0, r6
   1dafc:	f7e2 fda0 	bl	640 <ocrypto_mod_p256_sub>
   1db00:	4631      	mov	r1, r6
   1db02:	4620      	mov	r0, r4
   1db04:	f7e2 fe4c 	bl	7a0 <ocrypto_mod_p256_sqr>
   1db08:	462a      	mov	r2, r5
   1db0a:	4621      	mov	r1, r4
   1db0c:	4620      	mov	r0, r4
   1db0e:	f7e2 fd97 	bl	640 <ocrypto_mod_p256_sub>
   1db12:	466a      	mov	r2, sp
   1db14:	4621      	mov	r1, r4
   1db16:	4620      	mov	r0, r4
   1db18:	f7e2 fd92 	bl	640 <ocrypto_mod_p256_sub>
   1db1c:	466a      	mov	r2, sp
   1db1e:	4629      	mov	r1, r5
   1db20:	4640      	mov	r0, r8
   1db22:	f7e2 fd8d 	bl	640 <ocrypto_mod_p256_sub>
   1db26:	4642      	mov	r2, r8
   1db28:	4639      	mov	r1, r7
   1db2a:	4638      	mov	r0, r7
   1db2c:	f7e2 fe20 	bl	770 <ocrypto_mod_p256_mul>
   1db30:	4622      	mov	r2, r4
   1db32:	4629      	mov	r1, r5
   1db34:	4668      	mov	r0, sp
   1db36:	f7e2 fd83 	bl	640 <ocrypto_mod_p256_sub>
   1db3a:	466a      	mov	r2, sp
   1db3c:	4631      	mov	r1, r6
   1db3e:	4630      	mov	r0, r6
   1db40:	f7e2 fe16 	bl	770 <ocrypto_mod_p256_mul>
   1db44:	463a      	mov	r2, r7
   1db46:	4631      	mov	r1, r6
   1db48:	4630      	mov	r0, r6
   1db4a:	f7e2 fd79 	bl	640 <ocrypto_mod_p256_sub>
   1db4e:	b008      	add	sp, #32
   1db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db54 <ocrypto_curve_p256_from64bytes>:
   1db54:	b570      	push	{r4, r5, r6, lr}
   1db56:	f100 0620 	add.w	r6, r0, #32
   1db5a:	b090      	sub	sp, #64	; 0x40
   1db5c:	460d      	mov	r5, r1
   1db5e:	4604      	mov	r4, r0
   1db60:	f000 f914 	bl	1dd8c <ocrypto_mod_p256_from_bytes>
   1db64:	f105 0120 	add.w	r1, r5, #32
   1db68:	4630      	mov	r0, r6
   1db6a:	f000 f90f 	bl	1dd8c <ocrypto_mod_p256_from_bytes>
   1db6e:	4621      	mov	r1, r4
   1db70:	a808      	add	r0, sp, #32
   1db72:	f7e2 fe15 	bl	7a0 <ocrypto_mod_p256_sqr>
   1db76:	a908      	add	r1, sp, #32
   1db78:	4608      	mov	r0, r1
   1db7a:	4a0d      	ldr	r2, [pc, #52]	; (1dbb0 <ocrypto_curve_p256_from64bytes+0x5c>)
   1db7c:	f7e2 fd22 	bl	5c4 <ocrypto_mod_p256_add>
   1db80:	a908      	add	r1, sp, #32
   1db82:	4622      	mov	r2, r4
   1db84:	4608      	mov	r0, r1
   1db86:	f7e2 fdf3 	bl	770 <ocrypto_mod_p256_mul>
   1db8a:	a908      	add	r1, sp, #32
   1db8c:	4a09      	ldr	r2, [pc, #36]	; (1dbb4 <ocrypto_curve_p256_from64bytes+0x60>)
   1db8e:	4608      	mov	r0, r1
   1db90:	f7e2 fd18 	bl	5c4 <ocrypto_mod_p256_add>
   1db94:	4631      	mov	r1, r6
   1db96:	4668      	mov	r0, sp
   1db98:	f7e2 fe02 	bl	7a0 <ocrypto_mod_p256_sqr>
   1db9c:	2220      	movs	r2, #32
   1db9e:	4669      	mov	r1, sp
   1dba0:	eb0d 0002 	add.w	r0, sp, r2
   1dba4:	f7e2 fce0 	bl	568 <ocrypto_constant_time_equal>
   1dba8:	3801      	subs	r0, #1
   1dbaa:	b010      	add	sp, #64	; 0x40
   1dbac:	bd70      	pop	{r4, r5, r6, pc}
   1dbae:	bf00      	nop
   1dbb0:	00022570 	.word	0x00022570
   1dbb4:	00022590 	.word	0x00022590

0001dbb8 <ocrypto_curve_p256_to32bytes>:
   1dbb8:	f000 b902 	b.w	1ddc0 <ocrypto_mod_p256_to_bytes>

0001dbbc <ocrypto_curve_p256_to64bytes>:
   1dbbc:	b538      	push	{r3, r4, r5, lr}
   1dbbe:	4604      	mov	r4, r0
   1dbc0:	460d      	mov	r5, r1
   1dbc2:	f000 f8fd 	bl	1ddc0 <ocrypto_mod_p256_to_bytes>
   1dbc6:	f105 0120 	add.w	r1, r5, #32
   1dbca:	f104 0020 	add.w	r0, r4, #32
   1dbce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1dbd2:	f000 b8f5 	b.w	1ddc0 <ocrypto_mod_p256_to_bytes>
   1dbd6:	bf00      	nop

0001dbd8 <ocrypto_curve_p256_scalarmult>:
   1dbd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dbdc:	4613      	mov	r3, r2
   1dbde:	b0bb      	sub	sp, #236	; 0xec
   1dbe0:	4a54      	ldr	r2, [pc, #336]	; (1dd34 <ocrypto_curve_p256_scalarmult+0x15c>)
   1dbe2:	4688      	mov	r8, r1
   1dbe4:	4607      	mov	r7, r0
   1dbe6:	4619      	mov	r1, r3
   1dbe8:	a812      	add	r0, sp, #72	; 0x48
   1dbea:	f7e2 fac3 	bl	174 <ocrypto_bigint_sub256>
   1dbee:	4952      	ldr	r1, [pc, #328]	; (1dd38 <ocrypto_curve_p256_scalarmult+0x160>)
   1dbf0:	4602      	mov	r2, r0
   1dbf2:	a812      	add	r0, sp, #72	; 0x48
   1dbf4:	f7e2 fade 	bl	1b4 <ocrypto_bigint_cadd256>
   1dbf8:	9d19      	ldr	r5, [sp, #100]	; 0x64
   1dbfa:	494e      	ldr	r1, [pc, #312]	; (1dd34 <ocrypto_curve_p256_scalarmult+0x15c>)
   1dbfc:	ea00 75d5 	and.w	r5, r0, r5, lsr #31
   1dc00:	4606      	mov	r6, r0
   1dc02:	f1c5 0201 	rsb	r2, r5, #1
   1dc06:	a812      	add	r0, sp, #72	; 0x48
   1dc08:	f7e2 fad4 	bl	1b4 <ocrypto_bigint_cadd256>
   1dc0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1dc0e:	4642      	mov	r2, r8
   1dc10:	ea6f 0903 	mvn.w	r9, r3
   1dc14:	a92a      	add	r1, sp, #168	; 0xa8
   1dc16:	a81a      	add	r0, sp, #104	; 0x68
   1dc18:	f7ff fe8e 	bl	1d938 <p256_zdblu>
   1dc1c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   1dc20:	a922      	add	r1, sp, #136	; 0x88
   1dc22:	f1c9 0201 	rsb	r2, r9, #1
   1dc26:	4608      	mov	r0, r1
   1dc28:	f000 f892 	bl	1dd50 <ocrypto_mod_p256_cneg>
   1dc2c:	f1c6 0601 	rsb	r6, r6, #1
   1dc30:	24fe      	movs	r4, #254	; 0xfe
   1dc32:	aa02      	add	r2, sp, #8
   1dc34:	a91a      	add	r1, sp, #104	; 0x68
   1dc36:	a82a      	add	r0, sp, #168	; 0xa8
   1dc38:	f7ff ff40 	bl	1dabc <p256_zaddu>
   1dc3c:	1162      	asrs	r2, r4, #5
   1dc3e:	ab3a      	add	r3, sp, #232	; 0xe8
   1dc40:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1dc44:	f004 011f 	and.w	r1, r4, #31
   1dc48:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1dc4c:	40cb      	lsrs	r3, r1
   1dc4e:	464a      	mov	r2, r9
   1dc50:	f003 0901 	and.w	r9, r3, #1
   1dc54:	ea89 0202 	eor.w	r2, r9, r2
   1dc58:	a92a      	add	r1, sp, #168	; 0xa8
   1dc5a:	a81a      	add	r0, sp, #104	; 0x68
   1dc5c:	9201      	str	r2, [sp, #4]
   1dc5e:	f7e2 fb05 	bl	26c <ocrypto_bigint_cswap256>
   1dc62:	9a01      	ldr	r2, [sp, #4]
   1dc64:	a932      	add	r1, sp, #200	; 0xc8
   1dc66:	a822      	add	r0, sp, #136	; 0x88
   1dc68:	f7e2 fb00 	bl	26c <ocrypto_bigint_cswap256>
   1dc6c:	3c01      	subs	r4, #1
   1dc6e:	a92a      	add	r1, sp, #168	; 0xa8
   1dc70:	a81a      	add	r0, sp, #104	; 0x68
   1dc72:	f7ff febd 	bl	1d9f0 <p256_zaddc>
   1dc76:	1c63      	adds	r3, r4, #1
   1dc78:	d1db      	bne.n	1dc32 <ocrypto_curve_p256_scalarmult+0x5a>
   1dc7a:	f1c9 0201 	rsb	r2, r9, #1
   1dc7e:	a922      	add	r1, sp, #136	; 0x88
   1dc80:	a80a      	add	r0, sp, #40	; 0x28
   1dc82:	f000 f865 	bl	1dd50 <ocrypto_mod_p256_cneg>
   1dc86:	ea85 0509 	eor.w	r5, r5, r9
   1dc8a:	aa02      	add	r2, sp, #8
   1dc8c:	a91a      	add	r1, sp, #104	; 0x68
   1dc8e:	a82a      	add	r0, sp, #168	; 0xa8
   1dc90:	f7ff ff14 	bl	1dabc <p256_zaddu>
   1dc94:	a92a      	add	r1, sp, #168	; 0xa8
   1dc96:	462a      	mov	r2, r5
   1dc98:	a81a      	add	r0, sp, #104	; 0x68
   1dc9a:	f7e2 fae7 	bl	26c <ocrypto_bigint_cswap256>
   1dc9e:	462a      	mov	r2, r5
   1dca0:	a932      	add	r1, sp, #200	; 0xc8
   1dca2:	a822      	add	r0, sp, #136	; 0x88
   1dca4:	f7e2 fae2 	bl	26c <ocrypto_bigint_cswap256>
   1dca8:	a90a      	add	r1, sp, #40	; 0x28
   1dcaa:	aa02      	add	r2, sp, #8
   1dcac:	4608      	mov	r0, r1
   1dcae:	f7e2 fd5f 	bl	770 <ocrypto_mod_p256_mul>
   1dcb2:	a90a      	add	r1, sp, #40	; 0x28
   1dcb4:	4608      	mov	r0, r1
   1dcb6:	f000 f89d 	bl	1ddf4 <ocrypto_mod_p256_inv>
   1dcba:	a90a      	add	r1, sp, #40	; 0x28
   1dcbc:	f107 0420 	add.w	r4, r7, #32
   1dcc0:	f108 0220 	add.w	r2, r8, #32
   1dcc4:	4608      	mov	r0, r1
   1dcc6:	f7e2 fd53 	bl	770 <ocrypto_mod_p256_mul>
   1dcca:	a922      	add	r1, sp, #136	; 0x88
   1dccc:	aa0a      	add	r2, sp, #40	; 0x28
   1dcce:	4620      	mov	r0, r4
   1dcd0:	f7e2 fd4e 	bl	770 <ocrypto_mod_p256_mul>
   1dcd4:	aa0a      	add	r2, sp, #40	; 0x28
   1dcd6:	a91a      	add	r1, sp, #104	; 0x68
   1dcd8:	a802      	add	r0, sp, #8
   1dcda:	f7e2 fd49 	bl	770 <ocrypto_mod_p256_mul>
   1dcde:	a902      	add	r1, sp, #8
   1dce0:	4608      	mov	r0, r1
   1dce2:	f7e2 fd5d 	bl	7a0 <ocrypto_mod_p256_sqr>
   1dce6:	aa1a      	add	r2, sp, #104	; 0x68
   1dce8:	a902      	add	r1, sp, #8
   1dcea:	a80a      	add	r0, sp, #40	; 0x28
   1dcec:	f7e2 fd40 	bl	770 <ocrypto_mod_p256_mul>
   1dcf0:	4621      	mov	r1, r4
   1dcf2:	a802      	add	r0, sp, #8
   1dcf4:	f7e2 fd54 	bl	7a0 <ocrypto_mod_p256_sqr>
   1dcf8:	aa0a      	add	r2, sp, #40	; 0x28
   1dcfa:	a902      	add	r1, sp, #8
   1dcfc:	4610      	mov	r0, r2
   1dcfe:	f7e2 fc9f 	bl	640 <ocrypto_mod_p256_sub>
   1dd02:	4a0e      	ldr	r2, [pc, #56]	; (1dd3c <ocrypto_curve_p256_scalarmult+0x164>)
   1dd04:	a90a      	add	r1, sp, #40	; 0x28
   1dd06:	a802      	add	r0, sp, #8
   1dd08:	f7e2 fc9a 	bl	640 <ocrypto_mod_p256_sub>
   1dd0c:	4620      	mov	r0, r4
   1dd0e:	2120      	movs	r1, #32
   1dd10:	f7e2 fc3e 	bl	590 <ocrypto_constant_time_is_zero>
   1dd14:	a90a      	add	r1, sp, #40	; 0x28
   1dd16:	4243      	negs	r3, r0
   1dd18:	4602      	mov	r2, r0
   1dd1a:	a802      	add	r0, sp, #8
   1dd1c:	431e      	orrs	r6, r3
   1dd1e:	f7e2 faa5 	bl	26c <ocrypto_bigint_cswap256>
   1dd22:	4638      	mov	r0, r7
   1dd24:	4a06      	ldr	r2, [pc, #24]	; (1dd40 <ocrypto_curve_p256_scalarmult+0x168>)
   1dd26:	a902      	add	r1, sp, #8
   1dd28:	f7e2 fd22 	bl	770 <ocrypto_mod_p256_mul>
   1dd2c:	4630      	mov	r0, r6
   1dd2e:	b03b      	add	sp, #236	; 0xec
   1dd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dd34:	000225b0 	.word	0x000225b0
   1dd38:	00022530 	.word	0x00022530
   1dd3c:	00022590 	.word	0x00022590
   1dd40:	00022550 	.word	0x00022550

0001dd44 <ocrypto_curve_p256_scalarmult_base>:
   1dd44:	460a      	mov	r2, r1
   1dd46:	4901      	ldr	r1, [pc, #4]	; (1dd4c <ocrypto_curve_p256_scalarmult_base+0x8>)
   1dd48:	f7ff bf46 	b.w	1dbd8 <ocrypto_curve_p256_scalarmult>
   1dd4c:	000224f0 	.word	0x000224f0

0001dd50 <ocrypto_mod_p256_cneg>:
   1dd50:	b570      	push	{r4, r5, r6, lr}
   1dd52:	b088      	sub	sp, #32
   1dd54:	4604      	mov	r4, r0
   1dd56:	460d      	mov	r5, r1
   1dd58:	4616      	mov	r6, r2
   1dd5a:	2100      	movs	r1, #0
   1dd5c:	2220      	movs	r2, #32
   1dd5e:	4668      	mov	r0, sp
   1dd60:	f001 fa26 	bl	1f1b0 <memset>
   1dd64:	2300      	movs	r3, #0
   1dd66:	4629      	mov	r1, r5
   1dd68:	2220      	movs	r2, #32
   1dd6a:	4620      	mov	r0, r4
   1dd6c:	9300      	str	r3, [sp, #0]
   1dd6e:	f001 fa14 	bl	1f19a <memcpy>
   1dd72:	462a      	mov	r2, r5
   1dd74:	4669      	mov	r1, sp
   1dd76:	4668      	mov	r0, sp
   1dd78:	f7e2 fc62 	bl	640 <ocrypto_mod_p256_sub>
   1dd7c:	4632      	mov	r2, r6
   1dd7e:	4669      	mov	r1, sp
   1dd80:	4620      	mov	r0, r4
   1dd82:	f7e2 fa73 	bl	26c <ocrypto_bigint_cswap256>
   1dd86:	b008      	add	sp, #32
   1dd88:	bd70      	pop	{r4, r5, r6, pc}
   1dd8a:	bf00      	nop

0001dd8c <ocrypto_mod_p256_from_bytes>:
   1dd8c:	680b      	ldr	r3, [r1, #0]
   1dd8e:	ba1b      	rev	r3, r3
   1dd90:	61c3      	str	r3, [r0, #28]
   1dd92:	684b      	ldr	r3, [r1, #4]
   1dd94:	ba1b      	rev	r3, r3
   1dd96:	6183      	str	r3, [r0, #24]
   1dd98:	688b      	ldr	r3, [r1, #8]
   1dd9a:	ba1b      	rev	r3, r3
   1dd9c:	6143      	str	r3, [r0, #20]
   1dd9e:	68cb      	ldr	r3, [r1, #12]
   1dda0:	ba1b      	rev	r3, r3
   1dda2:	6103      	str	r3, [r0, #16]
   1dda4:	690b      	ldr	r3, [r1, #16]
   1dda6:	ba1b      	rev	r3, r3
   1dda8:	60c3      	str	r3, [r0, #12]
   1ddaa:	694b      	ldr	r3, [r1, #20]
   1ddac:	ba1b      	rev	r3, r3
   1ddae:	6083      	str	r3, [r0, #8]
   1ddb0:	698b      	ldr	r3, [r1, #24]
   1ddb2:	ba1b      	rev	r3, r3
   1ddb4:	6043      	str	r3, [r0, #4]
   1ddb6:	69cb      	ldr	r3, [r1, #28]
   1ddb8:	ba1b      	rev	r3, r3
   1ddba:	6003      	str	r3, [r0, #0]
   1ddbc:	4770      	bx	lr
   1ddbe:	bf00      	nop

0001ddc0 <ocrypto_mod_p256_to_bytes>:
   1ddc0:	69cb      	ldr	r3, [r1, #28]
   1ddc2:	ba1b      	rev	r3, r3
   1ddc4:	6003      	str	r3, [r0, #0]
   1ddc6:	698b      	ldr	r3, [r1, #24]
   1ddc8:	ba1b      	rev	r3, r3
   1ddca:	6043      	str	r3, [r0, #4]
   1ddcc:	694b      	ldr	r3, [r1, #20]
   1ddce:	ba1b      	rev	r3, r3
   1ddd0:	6083      	str	r3, [r0, #8]
   1ddd2:	690b      	ldr	r3, [r1, #16]
   1ddd4:	ba1b      	rev	r3, r3
   1ddd6:	60c3      	str	r3, [r0, #12]
   1ddd8:	68cb      	ldr	r3, [r1, #12]
   1ddda:	ba1b      	rev	r3, r3
   1dddc:	6103      	str	r3, [r0, #16]
   1ddde:	688b      	ldr	r3, [r1, #8]
   1dde0:	ba1b      	rev	r3, r3
   1dde2:	6143      	str	r3, [r0, #20]
   1dde4:	684b      	ldr	r3, [r1, #4]
   1dde6:	ba1b      	rev	r3, r3
   1dde8:	6183      	str	r3, [r0, #24]
   1ddea:	680b      	ldr	r3, [r1, #0]
   1ddec:	ba1b      	rev	r3, r3
   1ddee:	61c3      	str	r3, [r0, #28]
   1ddf0:	4770      	bx	lr
   1ddf2:	bf00      	nop

0001ddf4 <ocrypto_mod_p256_inv>:
   1ddf4:	b570      	push	{r4, r5, r6, lr}
   1ddf6:	b098      	sub	sp, #96	; 0x60
   1ddf8:	460d      	mov	r5, r1
   1ddfa:	4606      	mov	r6, r0
   1ddfc:	a810      	add	r0, sp, #64	; 0x40
   1ddfe:	f7e2 fccf 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de02:	462a      	mov	r2, r5
   1de04:	a910      	add	r1, sp, #64	; 0x40
   1de06:	4668      	mov	r0, sp
   1de08:	f7e2 fcb2 	bl	770 <ocrypto_mod_p256_mul>
   1de0c:	4669      	mov	r1, sp
   1de0e:	a810      	add	r0, sp, #64	; 0x40
   1de10:	f7e2 fcc6 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de14:	a910      	add	r1, sp, #64	; 0x40
   1de16:	4608      	mov	r0, r1
   1de18:	f7e2 fcc2 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de1c:	466a      	mov	r2, sp
   1de1e:	a910      	add	r1, sp, #64	; 0x40
   1de20:	a808      	add	r0, sp, #32
   1de22:	f7e2 fca5 	bl	770 <ocrypto_mod_p256_mul>
   1de26:	a908      	add	r1, sp, #32
   1de28:	a810      	add	r0, sp, #64	; 0x40
   1de2a:	f7e2 fcb9 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de2e:	a910      	add	r1, sp, #64	; 0x40
   1de30:	4608      	mov	r0, r1
   1de32:	f7e2 fcb5 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de36:	a910      	add	r1, sp, #64	; 0x40
   1de38:	4608      	mov	r0, r1
   1de3a:	f7e2 fcb1 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de3e:	a910      	add	r1, sp, #64	; 0x40
   1de40:	4608      	mov	r0, r1
   1de42:	f7e2 fcad 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de46:	a910      	add	r1, sp, #64	; 0x40
   1de48:	aa08      	add	r2, sp, #32
   1de4a:	4608      	mov	r0, r1
   1de4c:	f7e2 fc90 	bl	770 <ocrypto_mod_p256_mul>
   1de50:	a910      	add	r1, sp, #64	; 0x40
   1de52:	4608      	mov	r0, r1
   1de54:	f7e2 fca4 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de58:	a910      	add	r1, sp, #64	; 0x40
   1de5a:	4608      	mov	r0, r1
   1de5c:	f7e2 fca0 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de60:	a910      	add	r1, sp, #64	; 0x40
   1de62:	466a      	mov	r2, sp
   1de64:	a808      	add	r0, sp, #32
   1de66:	f7e2 fc83 	bl	770 <ocrypto_mod_p256_mul>
   1de6a:	2405      	movs	r4, #5
   1de6c:	a908      	add	r1, sp, #32
   1de6e:	a810      	add	r0, sp, #64	; 0x40
   1de70:	f7e2 fc96 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de74:	a910      	add	r1, sp, #64	; 0x40
   1de76:	4608      	mov	r0, r1
   1de78:	f7e2 fc92 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de7c:	3c01      	subs	r4, #1
   1de7e:	a910      	add	r1, sp, #64	; 0x40
   1de80:	d1f5      	bne.n	1de6e <ocrypto_mod_p256_inv+0x7a>
   1de82:	aa08      	add	r2, sp, #32
   1de84:	4608      	mov	r0, r1
   1de86:	f7e2 fc73 	bl	770 <ocrypto_mod_p256_mul>
   1de8a:	2405      	movs	r4, #5
   1de8c:	a910      	add	r1, sp, #64	; 0x40
   1de8e:	4608      	mov	r0, r1
   1de90:	f7e2 fc86 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de94:	a910      	add	r1, sp, #64	; 0x40
   1de96:	4608      	mov	r0, r1
   1de98:	f7e2 fc82 	bl	7a0 <ocrypto_mod_p256_sqr>
   1de9c:	3c01      	subs	r4, #1
   1de9e:	d1f5      	bne.n	1de8c <ocrypto_mod_p256_inv+0x98>
   1dea0:	a910      	add	r1, sp, #64	; 0x40
   1dea2:	aa08      	add	r2, sp, #32
   1dea4:	4608      	mov	r0, r1
   1dea6:	f7e2 fc63 	bl	770 <ocrypto_mod_p256_mul>
   1deaa:	a910      	add	r1, sp, #64	; 0x40
   1deac:	a808      	add	r0, sp, #32
   1deae:	f7e2 fc77 	bl	7a0 <ocrypto_mod_p256_sqr>
   1deb2:	a908      	add	r1, sp, #32
   1deb4:	4608      	mov	r0, r1
   1deb6:	f7e2 fc73 	bl	7a0 <ocrypto_mod_p256_sqr>
   1deba:	a908      	add	r1, sp, #32
   1debc:	466a      	mov	r2, sp
   1debe:	4668      	mov	r0, sp
   1dec0:	f7e2 fc56 	bl	770 <ocrypto_mod_p256_mul>
   1dec4:	2410      	movs	r4, #16
   1dec6:	4669      	mov	r1, sp
   1dec8:	a810      	add	r0, sp, #64	; 0x40
   1deca:	f7e2 fc69 	bl	7a0 <ocrypto_mod_p256_sqr>
   1dece:	a910      	add	r1, sp, #64	; 0x40
   1ded0:	4608      	mov	r0, r1
   1ded2:	f7e2 fc65 	bl	7a0 <ocrypto_mod_p256_sqr>
   1ded6:	3c01      	subs	r4, #1
   1ded8:	a910      	add	r1, sp, #64	; 0x40
   1deda:	d1f5      	bne.n	1dec8 <ocrypto_mod_p256_inv+0xd4>
   1dedc:	462a      	mov	r2, r5
   1dede:	4608      	mov	r0, r1
   1dee0:	f7e2 fc46 	bl	770 <ocrypto_mod_p256_mul>
   1dee4:	2440      	movs	r4, #64	; 0x40
   1dee6:	a910      	add	r1, sp, #64	; 0x40
   1dee8:	4608      	mov	r0, r1
   1deea:	f7e2 fc59 	bl	7a0 <ocrypto_mod_p256_sqr>
   1deee:	a910      	add	r1, sp, #64	; 0x40
   1def0:	4608      	mov	r0, r1
   1def2:	f7e2 fc55 	bl	7a0 <ocrypto_mod_p256_sqr>
   1def6:	3c01      	subs	r4, #1
   1def8:	d1f5      	bne.n	1dee6 <ocrypto_mod_p256_inv+0xf2>
   1defa:	a910      	add	r1, sp, #64	; 0x40
   1defc:	466a      	mov	r2, sp
   1defe:	4608      	mov	r0, r1
   1df00:	f7e2 fc36 	bl	770 <ocrypto_mod_p256_mul>
   1df04:	2410      	movs	r4, #16
   1df06:	a910      	add	r1, sp, #64	; 0x40
   1df08:	4608      	mov	r0, r1
   1df0a:	f7e2 fc49 	bl	7a0 <ocrypto_mod_p256_sqr>
   1df0e:	a910      	add	r1, sp, #64	; 0x40
   1df10:	4608      	mov	r0, r1
   1df12:	f7e2 fc45 	bl	7a0 <ocrypto_mod_p256_sqr>
   1df16:	3c01      	subs	r4, #1
   1df18:	d1f5      	bne.n	1df06 <ocrypto_mod_p256_inv+0x112>
   1df1a:	a910      	add	r1, sp, #64	; 0x40
   1df1c:	466a      	mov	r2, sp
   1df1e:	4608      	mov	r0, r1
   1df20:	f7e2 fc26 	bl	770 <ocrypto_mod_p256_mul>
   1df24:	2410      	movs	r4, #16
   1df26:	a910      	add	r1, sp, #64	; 0x40
   1df28:	4608      	mov	r0, r1
   1df2a:	f7e2 fc39 	bl	7a0 <ocrypto_mod_p256_sqr>
   1df2e:	a910      	add	r1, sp, #64	; 0x40
   1df30:	4608      	mov	r0, r1
   1df32:	f7e2 fc35 	bl	7a0 <ocrypto_mod_p256_sqr>
   1df36:	3c01      	subs	r4, #1
   1df38:	d1f5      	bne.n	1df26 <ocrypto_mod_p256_inv+0x132>
   1df3a:	a910      	add	r1, sp, #64	; 0x40
   1df3c:	aa08      	add	r2, sp, #32
   1df3e:	4608      	mov	r0, r1
   1df40:	f7e2 fc16 	bl	770 <ocrypto_mod_p256_mul>
   1df44:	462a      	mov	r2, r5
   1df46:	a910      	add	r1, sp, #64	; 0x40
   1df48:	4630      	mov	r0, r6
   1df4a:	f7e2 fc11 	bl	770 <ocrypto_mod_p256_mul>
   1df4e:	b018      	add	sp, #96	; 0x60
   1df50:	bd70      	pop	{r4, r5, r6, pc}
   1df52:	bf00      	nop

0001df54 <z_log_msg_static_create.constprop.0>:
   1df54:	2300      	movs	r3, #0
   1df56:	f7f4 bb79 	b.w	1264c <z_impl_z_log_msg_static_create>

0001df5a <cbpprintf_external>:
{
   1df5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1df5e:	4606      	mov	r6, r0
   1df60:	460d      	mov	r5, r1
   1df62:	4617      	mov	r7, r2
	if (buf == NULL) {
   1df64:	4698      	mov	r8, r3
   1df66:	b32b      	cbz	r3, 1dfb4 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   1df68:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1df6c:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1df70:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1df72:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1df74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1df78:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1df7c:	441c      	add	r4, r3
   1df7e:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1df80:	f04f 0a00 	mov.w	sl, #0
   1df84:	45ca      	cmp	sl, r9
   1df86:	d309      	bcc.n	1df9c <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1df88:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1df8c:	f108 0308 	add.w	r3, r8, #8
   1df90:	4639      	mov	r1, r7
   1df92:	4630      	mov	r0, r6
   1df94:	46ac      	mov	ip, r5
}
   1df96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1df9a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1df9c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   1dfa0:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1dfa4:	4620      	mov	r0, r4
   1dfa6:	f001 f8cc 	bl	1f142 <strlen>
   1dfaa:	3001      	adds	r0, #1
   1dfac:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1dfae:	f10a 0a01 	add.w	sl, sl, #1
   1dfb2:	e7e7      	b.n	1df84 <cbpprintf_external+0x2a>
}
   1dfb4:	f06f 0015 	mvn.w	r0, #21
   1dfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001dfbc <is_ptr>:
{
   1dfbc:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1dfbe:	2500      	movs	r5, #0
{
   1dfc0:	4602      	mov	r2, r0
	bool mod = false;
   1dfc2:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1dfc4:	4614      	mov	r4, r2
   1dfc6:	f814 3b01 	ldrb.w	r3, [r4], #1
   1dfca:	b90b      	cbnz	r3, 1dfd0 <is_ptr+0x14>
					return false;
   1dfcc:	4618      	mov	r0, r3
   1dfce:	e009      	b.n	1dfe4 <is_ptr+0x28>
		if (mod) {
   1dfd0:	b198      	cbz	r0, 1dffa <is_ptr+0x3e>
			if (cnt == n) {
   1dfd2:	428d      	cmp	r5, r1
   1dfd4:	d107      	bne.n	1dfe6 <is_ptr+0x2a>
				if (c == 'p') {
   1dfd6:	2b70      	cmp	r3, #112	; 0x70
   1dfd8:	d004      	beq.n	1dfe4 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   1dfda:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1dfde:	2a3a      	cmp	r2, #58	; 0x3a
   1dfe0:	d80b      	bhi.n	1dffa <is_ptr+0x3e>
					return false;
   1dfe2:	2000      	movs	r0, #0
}
   1dfe4:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1dfe6:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   1dfea:	2e3a      	cmp	r6, #58	; 0x3a
   1dfec:	d805      	bhi.n	1dffa <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1dfee:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1dff0:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1dff2:	1c94      	adds	r4, r2, #2
   1dff4:	2b00      	cmp	r3, #0
   1dff6:	d0e9      	beq.n	1dfcc <is_ptr+0x10>
   1dff8:	2000      	movs	r0, #0
		if (c == '%') {
   1dffa:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   1dffc:	bf08      	it	eq
   1dffe:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   1e002:	4622      	mov	r2, r4
   1e004:	e7de      	b.n	1dfc4 <is_ptr+0x8>

0001e006 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1e006:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1e00a:	b2db      	uxtb	r3, r3
   1e00c:	2b09      	cmp	r3, #9
   1e00e:	d802      	bhi.n	1e016 <char2hex+0x10>
		*x = c - '0';
   1e010:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1e012:	2000      	movs	r0, #0
   1e014:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1e016:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e01a:	2b05      	cmp	r3, #5
   1e01c:	d802      	bhi.n	1e024 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1e01e:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   1e020:	b2c3      	uxtb	r3, r0
   1e022:	e7f5      	b.n	1e010 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   1e024:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1e028:	2b05      	cmp	r3, #5
   1e02a:	d801      	bhi.n	1e030 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1e02c:	3837      	subs	r0, #55	; 0x37
   1e02e:	e7f7      	b.n	1e020 <char2hex+0x1a>
		return -EINVAL;
   1e030:	f06f 0015 	mvn.w	r0, #21
}
   1e034:	4770      	bx	lr

0001e036 <arch_printk_char_out>:
}
   1e036:	2000      	movs	r0, #0
   1e038:	4770      	bx	lr

0001e03a <str_out>:
{
   1e03a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e03c:	688a      	ldr	r2, [r1, #8]
   1e03e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1e040:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e042:	b114      	cbz	r4, 1e04a <str_out+0x10>
   1e044:	684b      	ldr	r3, [r1, #4]
   1e046:	4293      	cmp	r3, r2
   1e048:	dc01      	bgt.n	1e04e <str_out+0x14>
		ctx->count++;
   1e04a:	608d      	str	r5, [r1, #8]
}
   1e04c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1e04e:	3b01      	subs	r3, #1
   1e050:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1e052:	bf08      	it	eq
   1e054:	2200      	moveq	r2, #0
   1e056:	608d      	str	r5, [r1, #8]
   1e058:	bf0c      	ite	eq
   1e05a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1e05c:	54a0      	strbne	r0, [r4, r2]
   1e05e:	e7f5      	b.n	1e04c <str_out+0x12>

0001e060 <vprintk>:
		z_log_vprintk(fmt, ap);
   1e060:	f000 bd88 	b.w	1eb74 <z_log_vprintk>

0001e064 <printk>:
{
   1e064:	b40f      	push	{r0, r1, r2, r3}
   1e066:	b507      	push	{r0, r1, r2, lr}
   1e068:	a904      	add	r1, sp, #16
   1e06a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1e06e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   1e070:	f000 fd80 	bl	1eb74 <z_log_vprintk>
}
   1e074:	b003      	add	sp, #12
   1e076:	f85d eb04 	ldr.w	lr, [sp], #4
   1e07a:	b004      	add	sp, #16
   1e07c:	4770      	bx	lr

0001e07e <snprintk>:
{
   1e07e:	b40c      	push	{r2, r3}
   1e080:	b507      	push	{r0, r1, r2, lr}
   1e082:	ab04      	add	r3, sp, #16
   1e084:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1e088:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1e08a:	f7f3 ff27 	bl	11edc <vsnprintk>
}
   1e08e:	b003      	add	sp, #12
   1e090:	f85d eb04 	ldr.w	lr, [sp], #4
   1e094:	b002      	add	sp, #8
   1e096:	4770      	bx	lr

0001e098 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1e098:	4604      	mov	r4, r0
   1e09a:	b508      	push	{r3, lr}
   1e09c:	4608      	mov	r0, r1
   1e09e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1e0a0:	461a      	mov	r2, r3
   1e0a2:	47a0      	blx	r4
	return z_impl_z_current_get();
   1e0a4:	f7ff f8be 	bl	1d224 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1e0a8:	f7f5 fd78 	bl	13b9c <z_impl_k_thread_abort>

0001e0ac <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1e0ac:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1e0b0:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1e0b2:	0840      	lsrs	r0, r0, #1
   1e0b4:	4770      	bx	lr

0001e0b6 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1e0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0b8:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e0ba:	f7ff fff7 	bl	1e0ac <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1e0be:	fab0 f080 	clz	r0, r0
   1e0c2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1e0c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1e0ca:	00ca      	lsls	r2, r1, #3
   1e0cc:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1e0d0:	1d17      	adds	r7, r2, #4
{
   1e0d2:	460c      	mov	r4, r1
   1e0d4:	3206      	adds	r2, #6
   1e0d6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1e0d8:	b956      	cbnz	r6, 1e0f0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1e0da:	2101      	movs	r1, #1
   1e0dc:	fa01 f000 	lsl.w	r0, r1, r0
   1e0e0:	68d9      	ldr	r1, [r3, #12]
   1e0e2:	4301      	orrs	r1, r0
   1e0e4:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1e0e6:	f8cc 4010 	str.w	r4, [ip, #16]
   1e0ea:	53dd      	strh	r5, [r3, r7]
   1e0ec:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1e0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1e0f0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1e0f2:	3104      	adds	r1, #4
   1e0f4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1e0f6:	53d8      	strh	r0, [r3, r7]
   1e0f8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1e0fc:	529e      	strh	r6, [r3, r2]
   1e0fe:	80c5      	strh	r5, [r0, #6]
   1e100:	525d      	strh	r5, [r3, r1]
   1e102:	e7f4      	b.n	1e0ee <free_list_add+0x38>

0001e104 <free_list_remove_bidx>:
{
   1e104:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1e106:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1e10a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1e10c:	4299      	cmp	r1, r3
   1e10e:	f102 0104 	add.w	r1, r2, #4
   1e112:	d10a      	bne.n	1e12a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1e114:	2301      	movs	r3, #1
   1e116:	fa03 f202 	lsl.w	r2, r3, r2
   1e11a:	68c3      	ldr	r3, [r0, #12]
   1e11c:	ea23 0302 	bic.w	r3, r3, r2
   1e120:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1e122:	2300      	movs	r3, #0
   1e124:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1e128:	bd10      	pop	{r4, pc}
   1e12a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1e12c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1e130:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1e134:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1e138:	80cb      	strh	r3, [r1, #6]
   1e13a:	8082      	strh	r2, [r0, #4]
}
   1e13c:	e7f4      	b.n	1e128 <free_list_remove_bidx+0x24>

0001e13e <free_list_remove>:
{
   1e13e:	b508      	push	{r3, lr}
   1e140:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e142:	f7ff ffb3 	bl	1e0ac <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1e146:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1e14a:	f1c2 021f 	rsb	r2, r2, #31
   1e14e:	4618      	mov	r0, r3
}
   1e150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1e154:	f7ff bfd6 	b.w	1e104 <free_list_remove_bidx>

0001e158 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1e158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e15c:	fab1 f581 	clz	r5, r1
   1e160:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e164:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   1e168:	4603      	mov	r3, r0
	if (b->next) {
   1e16a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1e16e:	460e      	mov	r6, r1
	if (b->next) {
   1e170:	b1c2      	cbz	r2, 1e1a4 <alloc_chunk+0x4c>
   1e172:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1e174:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1e178:	4618      	mov	r0, r3
   1e17a:	4621      	mov	r1, r4
   1e17c:	f7ff ff96 	bl	1e0ac <chunk_size>
   1e180:	42b0      	cmp	r0, r6
   1e182:	d306      	bcc.n	1e192 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1e184:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1e186:	4618      	mov	r0, r3
   1e188:	f7ff ffbc 	bl	1e104 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e18c:	4620      	mov	r0, r4
   1e18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1e192:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1e196:	3f01      	subs	r7, #1
   1e198:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   1e19a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1e19e:	d001      	beq.n	1e1a4 <alloc_chunk+0x4c>
   1e1a0:	4282      	cmp	r2, r0
   1e1a2:	d1e7      	bne.n	1e174 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1e1a4:	f1c5 0220 	rsb	r2, r5, #32
   1e1a8:	f04f 34ff 	mov.w	r4, #4294967295
   1e1ac:	4094      	lsls	r4, r2
   1e1ae:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1e1b0:	4014      	ands	r4, r2
   1e1b2:	d0eb      	beq.n	1e18c <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1e1b4:	fa94 f2a4 	rbit	r2, r4
   1e1b8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e1bc:	1d11      	adds	r1, r2, #4
   1e1be:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1e1c2:	4621      	mov	r1, r4
   1e1c4:	e7df      	b.n	1e186 <alloc_chunk+0x2e>

0001e1c6 <merge_chunks>:
{
   1e1c6:	b538      	push	{r3, r4, r5, lr}
   1e1c8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e1ca:	f7ff ff6f 	bl	1e0ac <chunk_size>
{
   1e1ce:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e1d0:	4604      	mov	r4, r0
   1e1d2:	4611      	mov	r1, r2
   1e1d4:	4618      	mov	r0, r3
   1e1d6:	f7ff ff69 	bl	1e0ac <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1e1da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1e1de:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e1e0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1e1e2:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1e1e4:	4618      	mov	r0, r3
   1e1e6:	f7ff ff61 	bl	1e0ac <chunk_size>
	void *cmem = &buf[c];
   1e1ea:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1e1ec:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1e1f0:	bd38      	pop	{r3, r4, r5, pc}

0001e1f2 <split_chunks>:
{
   1e1f2:	b538      	push	{r3, r4, r5, lr}
   1e1f4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1e1f6:	f7ff ff59 	bl	1e0ac <chunk_size>
{
   1e1fa:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1e1fc:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1e1fe:	1a51      	subs	r1, r2, r1
   1e200:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1e204:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e206:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1e208:	8060      	strh	r0, [r4, #2]
   1e20a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e20e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1e210:	8044      	strh	r4, [r0, #2]
   1e212:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1e216:	4618      	mov	r0, r3
   1e218:	4611      	mov	r1, r2
   1e21a:	f7ff ff47 	bl	1e0ac <chunk_size>
	void *cmem = &buf[c];
   1e21e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1e220:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1e224:	bd38      	pop	{r3, r4, r5, pc}

0001e226 <free_chunk>:
{
   1e226:	b538      	push	{r3, r4, r5, lr}
   1e228:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1e22a:	f7ff ff3f 	bl	1e0ac <chunk_size>
   1e22e:	460c      	mov	r4, r1
   1e230:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1e232:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e236:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1e238:	07da      	lsls	r2, r3, #31
   1e23a:	d40a      	bmi.n	1e252 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1e23c:	4628      	mov	r0, r5
   1e23e:	f7ff ff7e 	bl	1e13e <free_list_remove>
	return c + chunk_size(h, c);
   1e242:	4621      	mov	r1, r4
   1e244:	4628      	mov	r0, r5
   1e246:	f7ff ff31 	bl	1e0ac <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e24a:	1822      	adds	r2, r4, r0
   1e24c:	4628      	mov	r0, r5
   1e24e:	f7ff ffba 	bl	1e1c6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1e252:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e256:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1e258:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e25c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1e25e:	07db      	lsls	r3, r3, #31
   1e260:	d40c      	bmi.n	1e27c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1e262:	4628      	mov	r0, r5
   1e264:	f7ff ff6b 	bl	1e13e <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1e268:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1e26c:	4622      	mov	r2, r4
   1e26e:	1a61      	subs	r1, r4, r1
   1e270:	4628      	mov	r0, r5
   1e272:	f7ff ffa8 	bl	1e1c6 <merge_chunks>
   1e276:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e27a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1e27c:	4621      	mov	r1, r4
   1e27e:	4628      	mov	r0, r5
}
   1e280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1e284:	f7ff bf17 	b.w	1e0b6 <free_list_add>

0001e288 <sys_heap_free>:
	if (mem == NULL) {
   1e288:	b161      	cbz	r1, 1e2a4 <sys_heap_free+0x1c>
   1e28a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e28c:	3904      	subs	r1, #4
   1e28e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1e290:	f021 0307 	bic.w	r3, r1, #7
   1e294:	4403      	add	r3, r0
	free_chunk(h, c);
   1e296:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e298:	885a      	ldrh	r2, [r3, #2]
   1e29a:	f022 0201 	bic.w	r2, r2, #1
   1e29e:	805a      	strh	r2, [r3, #2]
   1e2a0:	f7ff bfc1 	b.w	1e226 <free_chunk>
}
   1e2a4:	4770      	bx	lr

0001e2a6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e2a6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1e2a8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1e2aa:	b909      	cbnz	r1, 1e2b0 <sys_heap_alloc+0xa>
		return NULL;
   1e2ac:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1e2ae:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1e2b0:	68ab      	ldr	r3, [r5, #8]
   1e2b2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1e2b6:	d9f9      	bls.n	1e2ac <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e2b8:	310b      	adds	r1, #11
   1e2ba:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1e2bc:	4621      	mov	r1, r4
   1e2be:	4628      	mov	r0, r5
   1e2c0:	f7ff ff4a 	bl	1e158 <alloc_chunk>
	if (c == 0U) {
   1e2c4:	4606      	mov	r6, r0
   1e2c6:	2800      	cmp	r0, #0
   1e2c8:	d0f0      	beq.n	1e2ac <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1e2ca:	4601      	mov	r1, r0
   1e2cc:	4628      	mov	r0, r5
   1e2ce:	f7ff feed 	bl	1e0ac <chunk_size>
   1e2d2:	42a0      	cmp	r0, r4
   1e2d4:	d907      	bls.n	1e2e6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1e2d6:	1932      	adds	r2, r6, r4
   1e2d8:	4628      	mov	r0, r5
   1e2da:	f7ff ff8a 	bl	1e1f2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1e2de:	4611      	mov	r1, r2
   1e2e0:	4628      	mov	r0, r5
   1e2e2:	f7ff fee8 	bl	1e0b6 <free_list_add>
	void *cmem = &buf[c];
   1e2e6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e2ea:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e2ec:	8853      	ldrh	r3, [r2, #2]
   1e2ee:	f043 0301 	orr.w	r3, r3, #1
   1e2f2:	8053      	strh	r3, [r2, #2]
   1e2f4:	3004      	adds	r0, #4
	return mem;
   1e2f6:	e7da      	b.n	1e2ae <sys_heap_alloc+0x8>

0001e2f8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1e2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e2fc:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1e300:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   1e304:	6806      	ldr	r6, [r0, #0]
{
   1e306:	460f      	mov	r7, r1
   1e308:	4614      	mov	r4, r2
	if (align != rew) {
   1e30a:	d00c      	beq.n	1e326 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1e30c:	424b      	negs	r3, r1
   1e30e:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1e310:	2b04      	cmp	r3, #4
   1e312:	461a      	mov	r2, r3
   1e314:	464f      	mov	r7, r9
   1e316:	bf28      	it	cs
   1e318:	2204      	movcs	r2, #4
	rew = align & -align;
   1e31a:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1e31c:	b964      	cbnz	r4, 1e338 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1e31e:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1e320:	4628      	mov	r0, r5
   1e322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1e326:	2904      	cmp	r1, #4
   1e328:	d804      	bhi.n	1e334 <sys_heap_aligned_alloc+0x3c>
}
   1e32a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1e32e:	4611      	mov	r1, r2
   1e330:	f7ff bfb9 	b.w	1e2a6 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1e334:	2204      	movs	r2, #4
   1e336:	e7f1      	b.n	1e31c <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1e338:	68b3      	ldr	r3, [r6, #8]
   1e33a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1e33e:	d9ee      	bls.n	1e31e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e340:	f104 010b 	add.w	r1, r4, #11
   1e344:	4439      	add	r1, r7
   1e346:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1e348:	08c9      	lsrs	r1, r1, #3
   1e34a:	4630      	mov	r0, r6
   1e34c:	f7ff ff04 	bl	1e158 <alloc_chunk>
	if (c0 == 0) {
   1e350:	4680      	mov	r8, r0
   1e352:	2800      	cmp	r0, #0
   1e354:	d0e3      	beq.n	1e31e <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1e356:	f109 0504 	add.w	r5, r9, #4
   1e35a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1e35e:	1e7b      	subs	r3, r7, #1
   1e360:	4435      	add	r5, r6
   1e362:	441d      	add	r5, r3
   1e364:	427f      	negs	r7, r7
   1e366:	403d      	ands	r5, r7
   1e368:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e36c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e36e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e370:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e372:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e374:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1e378:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1e37a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e37e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1e382:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1e386:	d208      	bcs.n	1e39a <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1e388:	4601      	mov	r1, r0
   1e38a:	463a      	mov	r2, r7
   1e38c:	4630      	mov	r0, r6
   1e38e:	f7ff ff30 	bl	1e1f2 <split_chunks>
		free_list_add(h, c0);
   1e392:	4641      	mov	r1, r8
   1e394:	4630      	mov	r0, r6
   1e396:	f7ff fe8e 	bl	1e0b6 <free_list_add>
	return c + chunk_size(h, c);
   1e39a:	4639      	mov	r1, r7
   1e39c:	4630      	mov	r0, r6
   1e39e:	f7ff fe85 	bl	1e0ac <chunk_size>
   1e3a2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1e3a4:	4284      	cmp	r4, r0
   1e3a6:	d207      	bcs.n	1e3b8 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   1e3a8:	4630      	mov	r0, r6
   1e3aa:	4622      	mov	r2, r4
   1e3ac:	f7ff ff21 	bl	1e1f2 <split_chunks>
		free_list_add(h, c_end);
   1e3b0:	4621      	mov	r1, r4
   1e3b2:	4630      	mov	r0, r6
   1e3b4:	f7ff fe7f 	bl	1e0b6 <free_list_add>
	void *cmem = &buf[c];
   1e3b8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e3bc:	8873      	ldrh	r3, [r6, #2]
   1e3be:	f043 0301 	orr.w	r3, r3, #1
   1e3c2:	8073      	strh	r3, [r6, #2]
   1e3c4:	e7ac      	b.n	1e320 <sys_heap_aligned_alloc+0x28>

0001e3c6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e3c6:	3a04      	subs	r2, #4
{
   1e3c8:	b4f0      	push	{r4, r5, r6, r7}
   1e3ca:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e3cc:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3ce:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e3d0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e3d4:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1e3d8:	1a0e      	subs	r6, r1, r0
   1e3da:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1e3dc:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   1e3de:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1e3e2:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e3e4:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   1e3e8:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   1e3ea:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e3ec:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   1e3ee:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e3f2:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1e3f4:	f1c2 0220 	rsb	r2, r2, #32
   1e3f8:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1e3fa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   1e3fe:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1e402:	4294      	cmp	r4, r2
   1e404:	d1fb      	bne.n	1e3fe <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e406:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e408:	f042 0201 	orr.w	r2, r2, #1
   1e40c:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   1e40e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1e412:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e414:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1e416:	8007      	strh	r7, [r0, #0]
   1e418:	8065      	strh	r5, [r4, #2]
   1e41a:	1984      	adds	r4, r0, r6
   1e41c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1e420:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1e424:	8067      	strh	r7, [r4, #2]
   1e426:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e428:	885a      	ldrh	r2, [r3, #2]
   1e42a:	f042 0201 	orr.w	r2, r2, #1
   1e42e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1e430:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1e432:	f7ff be40 	b.w	1e0b6 <free_list_add>

0001e436 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e436:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1e438:	f013 0307 	ands.w	r3, r3, #7
   1e43c:	d105      	bne.n	1e44a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1e43e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1e440:	2b00      	cmp	r3, #0
   1e442:	bf0c      	ite	eq
   1e444:	2000      	moveq	r0, #0
   1e446:	2003      	movne	r0, #3
   1e448:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1e44a:	2b02      	cmp	r3, #2
   1e44c:	d105      	bne.n	1e45a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1e44e:	8b40      	ldrh	r0, [r0, #26]
   1e450:	fab0 f080 	clz	r0, r0
   1e454:	0940      	lsrs	r0, r0, #5
   1e456:	0080      	lsls	r0, r0, #2
   1e458:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1e45a:	2b01      	cmp	r3, #1
   1e45c:	d105      	bne.n	1e46a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1e45e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1e460:	2b00      	cmp	r3, #0
   1e462:	bf0c      	ite	eq
   1e464:	2000      	moveq	r0, #0
   1e466:	2005      	movne	r0, #5
   1e468:	4770      	bx	lr
	int evt = EVT_NOP;
   1e46a:	2000      	movs	r0, #0
}
   1e46c:	4770      	bx	lr

0001e46e <validate_args>:
{
   1e46e:	b510      	push	{r4, lr}
   1e470:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1e472:	b100      	cbz	r0, 1e476 <validate_args+0x8>
   1e474:	b911      	cbnz	r1, 1e47c <validate_args+0xe>
		return -EINVAL;
   1e476:	f06f 0015 	mvn.w	r0, #21
}
   1e47a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1e47c:	1d08      	adds	r0, r1, #4
   1e47e:	f000 f896 	bl	1e5ae <sys_notify_validate>
	if ((rv == 0)
   1e482:	2800      	cmp	r0, #0
   1e484:	d1f9      	bne.n	1e47a <validate_args+0xc>
	    && ((cli->notify.flags
   1e486:	68a3      	ldr	r3, [r4, #8]
   1e488:	2b03      	cmp	r3, #3
   1e48a:	d9f6      	bls.n	1e47a <validate_args+0xc>
   1e48c:	e7f3      	b.n	1e476 <validate_args+0x8>

0001e48e <notify_one>:
{
   1e48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e492:	460d      	mov	r5, r1
   1e494:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e496:	4619      	mov	r1, r3
   1e498:	1d28      	adds	r0, r5, #4
{
   1e49a:	4690      	mov	r8, r2
   1e49c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e49e:	f000 f89a 	bl	1e5d6 <sys_notify_finalize>
	if (cb) {
   1e4a2:	4604      	mov	r4, r0
   1e4a4:	b138      	cbz	r0, 1e4b6 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1e4a6:	4633      	mov	r3, r6
   1e4a8:	4642      	mov	r2, r8
   1e4aa:	4629      	mov	r1, r5
   1e4ac:	4638      	mov	r0, r7
   1e4ae:	46a4      	mov	ip, r4
}
   1e4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1e4b4:	4760      	bx	ip
}
   1e4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e4ba <transition_complete>:
{
   1e4ba:	b410      	push	{r4}
	__asm__ volatile(
   1e4bc:	f04f 0440 	mov.w	r4, #64	; 0x40
   1e4c0:	f3ef 8211 	mrs	r2, BASEPRI
   1e4c4:	f384 8812 	msr	BASEPRI_MAX, r4
   1e4c8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1e4cc:	6141      	str	r1, [r0, #20]
}
   1e4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1e4d2:	2101      	movs	r1, #1
   1e4d4:	f7f3 bd18 	b.w	11f08 <process_event>

0001e4d8 <onoff_manager_init>:
{
   1e4d8:	b538      	push	{r3, r4, r5, lr}
   1e4da:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1e4dc:	4605      	mov	r5, r0
   1e4de:	b158      	cbz	r0, 1e4f8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1e4e0:	b151      	cbz	r1, 1e4f8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1e4e2:	680b      	ldr	r3, [r1, #0]
   1e4e4:	b143      	cbz	r3, 1e4f8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1e4e6:	684b      	ldr	r3, [r1, #4]
   1e4e8:	b133      	cbz	r3, 1e4f8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1e4ea:	221c      	movs	r2, #28
   1e4ec:	2100      	movs	r1, #0
   1e4ee:	f000 fe5f 	bl	1f1b0 <memset>
   1e4f2:	612c      	str	r4, [r5, #16]
	return 0;
   1e4f4:	2000      	movs	r0, #0
}
   1e4f6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e4f8:	f06f 0015 	mvn.w	r0, #21
   1e4fc:	e7fb      	b.n	1e4f6 <onoff_manager_init+0x1e>

0001e4fe <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1e4fe:	b570      	push	{r4, r5, r6, lr}
   1e500:	4605      	mov	r5, r0
   1e502:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1e504:	f7ff ffb3 	bl	1e46e <validate_args>

	if (rv < 0) {
   1e508:	1e04      	subs	r4, r0, #0
   1e50a:	db15      	blt.n	1e538 <onoff_request+0x3a>
   1e50c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e510:	f3ef 8211 	mrs	r2, BASEPRI
   1e514:	f383 8812 	msr	BASEPRI_MAX, r3
   1e518:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1e51c:	8b6b      	ldrh	r3, [r5, #26]
   1e51e:	8b2c      	ldrh	r4, [r5, #24]
   1e520:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e524:	428b      	cmp	r3, r1
   1e526:	f004 0407 	and.w	r4, r4, #7
   1e52a:	d107      	bne.n	1e53c <onoff_request+0x3e>
	__asm__ volatile(
   1e52c:	f382 8811 	msr	BASEPRI, r2
   1e530:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1e534:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1e538:	4620      	mov	r0, r4
   1e53a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1e53c:	2c02      	cmp	r4, #2
   1e53e:	d10c      	bne.n	1e55a <onoff_request+0x5c>
		mgr->refs += 1U;
   1e540:	3301      	adds	r3, #1
   1e542:	836b      	strh	r3, [r5, #26]
   1e544:	f382 8811 	msr	BASEPRI, r2
   1e548:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1e54c:	2300      	movs	r3, #0
   1e54e:	4622      	mov	r2, r4
   1e550:	4631      	mov	r1, r6
   1e552:	4628      	mov	r0, r5
   1e554:	f7ff ff9b 	bl	1e48e <notify_one>
   1e558:	e7ee      	b.n	1e538 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1e55a:	2c06      	cmp	r4, #6
   1e55c:	d814      	bhi.n	1e588 <onoff_request+0x8a>
   1e55e:	e8df f004 	tbb	[pc, r4]
   1e562:	1304      	.short	0x1304
   1e564:	1a041313 	.word	0x1a041313
   1e568:	04          	.byte	0x04
   1e569:	00          	.byte	0x00
	parent->next = child;
   1e56a:	2300      	movs	r3, #0
   1e56c:	6033      	str	r3, [r6, #0]
	return list->tail;
   1e56e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1e570:	b93b      	cbnz	r3, 1e582 <onoff_request+0x84>
	list->head = node;
   1e572:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1e576:	b9ac      	cbnz	r4, 1e5a4 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1e578:	2102      	movs	r1, #2
   1e57a:	4628      	mov	r0, r5
   1e57c:	f7f3 fcc4 	bl	11f08 <process_event>
   1e580:	e7da      	b.n	1e538 <onoff_request+0x3a>
	parent->next = child;
   1e582:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1e584:	606e      	str	r6, [r5, #4]
}
   1e586:	e7f6      	b.n	1e576 <onoff_request+0x78>
   1e588:	f382 8811 	msr	BASEPRI, r2
   1e58c:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1e590:	f06f 0404 	mvn.w	r4, #4
   1e594:	e7d0      	b.n	1e538 <onoff_request+0x3a>
   1e596:	f382 8811 	msr	BASEPRI, r2
   1e59a:	f3bf 8f6f 	isb	sy
   1e59e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e5a2:	e7c9      	b.n	1e538 <onoff_request+0x3a>
   1e5a4:	f382 8811 	msr	BASEPRI, r2
   1e5a8:	f3bf 8f6f 	isb	sy
		if (notify) {
   1e5ac:	e7c4      	b.n	1e538 <onoff_request+0x3a>

0001e5ae <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1e5ae:	4603      	mov	r3, r0
   1e5b0:	b140      	cbz	r0, 1e5c4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e5b2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e5b4:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1e5b8:	2a02      	cmp	r2, #2
   1e5ba:	d006      	beq.n	1e5ca <sys_notify_validate+0x1c>
   1e5bc:	2a03      	cmp	r2, #3
   1e5be:	d004      	beq.n	1e5ca <sys_notify_validate+0x1c>
   1e5c0:	2a01      	cmp	r2, #1
   1e5c2:	d005      	beq.n	1e5d0 <sys_notify_validate+0x22>
   1e5c4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1e5c8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1e5ca:	681a      	ldr	r2, [r3, #0]
   1e5cc:	2a00      	cmp	r2, #0
   1e5ce:	d0f9      	beq.n	1e5c4 <sys_notify_validate+0x16>
		notify->result = 0;
   1e5d0:	2000      	movs	r0, #0
   1e5d2:	6098      	str	r0, [r3, #8]
   1e5d4:	4770      	bx	lr

0001e5d6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1e5d6:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e5d8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1e5da:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e5dc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   1e5e0:	2a02      	cmp	r2, #2
{
   1e5e2:	4603      	mov	r3, r0
	switch (method) {
   1e5e4:	f04f 0400 	mov.w	r4, #0
   1e5e8:	d007      	beq.n	1e5fa <sys_notify_finalize+0x24>
   1e5ea:	2a03      	cmp	r2, #3
   1e5ec:	d002      	beq.n	1e5f4 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e5ee:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1e5f0:	2000      	movs	r0, #0
   1e5f2:	e001      	b.n	1e5f8 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1e5f4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e5f6:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1e5f8:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1e5fa:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e5fc:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1e5fe:	2800      	cmp	r0, #0
   1e600:	d0f6      	beq.n	1e5f0 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   1e602:	f7ff f8f3 	bl	1d7ec <z_impl_k_poll_signal_raise>
   1e606:	e7f3      	b.n	1e5f0 <sys_notify_finalize+0x1a>

0001e608 <_ldiv5>:
	uint32_t v_lo = *v;
   1e608:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1e60c:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1e60e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1e612:	fba2 2403 	umull	r2, r4, r2, r3
   1e616:	18d5      	adds	r5, r2, r3
   1e618:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1e61c:	fba1 1303 	umull	r1, r3, r1, r3
   1e620:	1852      	adds	r2, r2, r1
   1e622:	eb44 0403 	adc.w	r4, r4, r3
   1e626:	1952      	adds	r2, r2, r5
   1e628:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1e62c:	1889      	adds	r1, r1, r2
   1e62e:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1e632:	e9c0 1300 	strd	r1, r3, [r0]
}
   1e636:	bd30      	pop	{r4, r5, pc}

0001e638 <_get_digit>:
{
   1e638:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   1e63a:	680a      	ldr	r2, [r1, #0]
   1e63c:	2a00      	cmp	r2, #0
{
   1e63e:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1e640:	dd0f      	ble.n	1e662 <_get_digit+0x2a>
		--*digit_count;
   1e642:	3a01      	subs	r2, #1
   1e644:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1e646:	681a      	ldr	r2, [r3, #0]
   1e648:	6844      	ldr	r4, [r0, #4]
   1e64a:	200a      	movs	r0, #10
   1e64c:	fba2 1200 	umull	r1, r2, r2, r0
   1e650:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1e654:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1e656:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1e65a:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1e65e:	3030      	adds	r0, #48	; 0x30
}
   1e660:	bd10      	pop	{r4, pc}
		rval = '0';
   1e662:	2030      	movs	r0, #48	; 0x30
   1e664:	e7fc      	b.n	1e660 <_get_digit+0x28>

0001e666 <encode_uint>:
{
   1e666:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e66a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1e66c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1e66e:	2b6f      	cmp	r3, #111	; 0x6f
{
   1e670:	4680      	mov	r8, r0
   1e672:	460f      	mov	r7, r1
   1e674:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e676:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1e67a:	d029      	beq.n	1e6d0 <encode_uint+0x6a>
   1e67c:	d824      	bhi.n	1e6c8 <encode_uint+0x62>
		return 10;
   1e67e:	2b58      	cmp	r3, #88	; 0x58
   1e680:	bf0c      	ite	eq
   1e682:	2610      	moveq	r6, #16
   1e684:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1e686:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1e68a:	4632      	mov	r2, r6
   1e68c:	2300      	movs	r3, #0
   1e68e:	4640      	mov	r0, r8
   1e690:	4639      	mov	r1, r7
   1e692:	f7e1 fd35 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e696:	2a09      	cmp	r2, #9
   1e698:	b2d4      	uxtb	r4, r2
   1e69a:	d81e      	bhi.n	1e6da <encode_uint+0x74>
   1e69c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1e69e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e6a0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1e6a2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e6a6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1e6aa:	d301      	bcc.n	1e6b0 <encode_uint+0x4a>
   1e6ac:	45d1      	cmp	r9, sl
   1e6ae:	d811      	bhi.n	1e6d4 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1e6b0:	782b      	ldrb	r3, [r5, #0]
   1e6b2:	069b      	lsls	r3, r3, #26
   1e6b4:	d505      	bpl.n	1e6c2 <encode_uint+0x5c>
		if (radix == 8) {
   1e6b6:	2e08      	cmp	r6, #8
   1e6b8:	d115      	bne.n	1e6e6 <encode_uint+0x80>
			conv->altform_0 = true;
   1e6ba:	78ab      	ldrb	r3, [r5, #2]
   1e6bc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1e6c0:	70ab      	strb	r3, [r5, #2]
}
   1e6c2:	4648      	mov	r0, r9
   1e6c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1e6c8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1e6cc:	2b70      	cmp	r3, #112	; 0x70
   1e6ce:	e7d7      	b.n	1e680 <encode_uint+0x1a>
	switch (specifier) {
   1e6d0:	2608      	movs	r6, #8
   1e6d2:	e7d8      	b.n	1e686 <encode_uint+0x20>
		value /= radix;
   1e6d4:	4680      	mov	r8, r0
   1e6d6:	460f      	mov	r7, r1
   1e6d8:	e7d7      	b.n	1e68a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e6da:	f1bb 0f19 	cmp.w	fp, #25
   1e6de:	bf94      	ite	ls
   1e6e0:	3437      	addls	r4, #55	; 0x37
   1e6e2:	3457      	addhi	r4, #87	; 0x57
   1e6e4:	e7db      	b.n	1e69e <encode_uint+0x38>
		} else if (radix == 16) {
   1e6e6:	2e10      	cmp	r6, #16
   1e6e8:	d1eb      	bne.n	1e6c2 <encode_uint+0x5c>
			conv->altform_0c = true;
   1e6ea:	78ab      	ldrb	r3, [r5, #2]
   1e6ec:	f043 0310 	orr.w	r3, r3, #16
   1e6f0:	e7e6      	b.n	1e6c0 <encode_uint+0x5a>

0001e6f2 <outs>:
{
   1e6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6f6:	4607      	mov	r7, r0
   1e6f8:	4688      	mov	r8, r1
   1e6fa:	4615      	mov	r5, r2
   1e6fc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e6fe:	4614      	mov	r4, r2
   1e700:	42b4      	cmp	r4, r6
   1e702:	d305      	bcc.n	1e710 <outs+0x1e>
   1e704:	b10e      	cbz	r6, 1e70a <outs+0x18>
	return (int)count;
   1e706:	1b60      	subs	r0, r4, r5
   1e708:	e008      	b.n	1e71c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e70a:	7823      	ldrb	r3, [r4, #0]
   1e70c:	2b00      	cmp	r3, #0
   1e70e:	d0fa      	beq.n	1e706 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1e710:	f814 0b01 	ldrb.w	r0, [r4], #1
   1e714:	4641      	mov	r1, r8
   1e716:	47b8      	blx	r7
		if (rc < 0) {
   1e718:	2800      	cmp	r0, #0
   1e71a:	daf1      	bge.n	1e700 <outs+0xe>
}
   1e71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e720 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1e720:	b40f      	push	{r0, r1, r2, r3}
   1e722:	b507      	push	{r0, r1, r2, lr}
   1e724:	a904      	add	r1, sp, #16
   1e726:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1e72a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1e72c:	f7ff fc98 	bl	1e060 <vprintk>

	va_end(ap);
}
   1e730:	b003      	add	sp, #12
   1e732:	f85d eb04 	ldr.w	lr, [sp], #4
   1e736:	b004      	add	sp, #16
   1e738:	4770      	bx	lr

0001e73a <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1e73a:	68c3      	ldr	r3, [r0, #12]
   1e73c:	6802      	ldr	r2, [r0, #0]
   1e73e:	4293      	cmp	r3, r2
   1e740:	d904      	bls.n	1e74c <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1e742:	3b01      	subs	r3, #1
   1e744:	1a9a      	subs	r2, r3, r2

		return false;
   1e746:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1e748:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   1e74a:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1e74c:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   1e74e:	b913      	cbnz	r3, 1e756 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1e750:	3801      	subs	r0, #1
   1e752:	1a82      	subs	r2, r0, r2
		return false;
   1e754:	e7f7      	b.n	1e746 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   1e756:	1a82      	subs	r2, r0, r2
	return true;
   1e758:	2001      	movs	r0, #1
   1e75a:	e7f5      	b.n	1e748 <free_space+0xe>

0001e75c <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   1e75c:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   1e75e:	a901      	add	r1, sp, #4
{
   1e760:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1e762:	f7ff ffea 	bl	1e73a <free_space>
   1e766:	b120      	cbz	r0, 1e772 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1e768:	9b01      	ldr	r3, [sp, #4]
   1e76a:	68e2      	ldr	r2, [r4, #12]
   1e76c:	3b01      	subs	r3, #1
   1e76e:	4413      	add	r3, r2
   1e770:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   1e772:	6a20      	ldr	r0, [r4, #32]
   1e774:	9b01      	ldr	r3, [sp, #4]
   1e776:	1ac0      	subs	r0, r0, r3
}
   1e778:	3801      	subs	r0, #1
   1e77a:	b002      	add	sp, #8
   1e77c:	bd10      	pop	{r4, pc}

0001e77e <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   1e77e:	b510      	push	{r4, lr}
   1e780:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1e782:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1e784:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1e786:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1e788:	07d2      	lsls	r2, r2, #31
   1e78a:	d502      	bpl.n	1e792 <idx_inc+0x14>
		return i & (buffer->size - 1);
   1e78c:	3b01      	subs	r3, #1
   1e78e:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   1e790:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1e792:	4298      	cmp	r0, r3
   1e794:	bf28      	it	cs
   1e796:	1ac0      	subcs	r0, r0, r3
   1e798:	e7fa      	b.n	1e790 <idx_inc+0x12>

0001e79a <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   1e79a:	b538      	push	{r3, r4, r5, lr}
   1e79c:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1e79e:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   1e7a0:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1e7a2:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1e7a4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1e7a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1e7ac:	462a      	mov	r2, r5
   1e7ae:	6801      	ldr	r1, [r0, #0]
{
   1e7b0:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1e7b2:	f7ff ffe4 	bl	1e77e <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1e7b6:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1e7b8:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1e7ba:	462a      	mov	r2, r5
   1e7bc:	4620      	mov	r0, r4
   1e7be:	f7ff ffde 	bl	1e77e <idx_inc>
   1e7c2:	6060      	str	r0, [r4, #4]
}
   1e7c4:	bd38      	pop	{r3, r4, r5, pc}

0001e7c6 <max_utilization_update>:
{
   1e7c6:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1e7c8:	6903      	ldr	r3, [r0, #16]
   1e7ca:	075b      	lsls	r3, r3, #29
{
   1e7cc:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1e7ce:	d506      	bpl.n	1e7de <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1e7d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1e7d2:	f7ff ffc3 	bl	1e75c <get_usage>
   1e7d6:	4285      	cmp	r5, r0
   1e7d8:	bf2c      	ite	cs
   1e7da:	6265      	strcs	r5, [r4, #36]	; 0x24
   1e7dc:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   1e7de:	bd38      	pop	{r3, r4, r5, pc}

0001e7e0 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   1e7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7e4:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   1e7e6:	2300      	movs	r3, #0
   1e7e8:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1e7ea:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1e7ee:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   1e7f2:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1e7f6:	f003 0303 	and.w	r3, r3, #3
   1e7fa:	2b02      	cmp	r3, #2
{
   1e7fc:	4604      	mov	r4, r0
   1e7fe:	468b      	mov	fp, r1
   1e800:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1e802:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1e806:	d103      	bne.n	1e810 <drop_item_locked+0x30>
		return item->skip.len;
   1e808:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1e80c:	08ad      	lsrs	r5, r5, #2
   1e80e:	d12e      	bne.n	1e86e <drop_item_locked+0x8e>
   1e810:	69a3      	ldr	r3, [r4, #24]
   1e812:	4630      	mov	r0, r6
   1e814:	4798      	blx	r3
   1e816:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   1e818:	f1b8 0f00 	cmp.w	r8, #0
   1e81c:	d038      	beq.n	1e890 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   1e81e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1e822:	079b      	lsls	r3, r3, #30
   1e824:	d531      	bpl.n	1e88a <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   1e826:	f10b 0101 	add.w	r1, fp, #1
   1e82a:	4620      	mov	r0, r4
   1e82c:	f7ff ffb5 	bl	1e79a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1e830:	6861      	ldr	r1, [r4, #4]
   1e832:	462a      	mov	r2, r5
   1e834:	4620      	mov	r0, r4
   1e836:	f7ff ffa2 	bl	1e77e <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1e83a:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1e83c:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1e83e:	462a      	mov	r2, r5
   1e840:	4620      	mov	r0, r4
   1e842:	f7ff ff9c 	bl	1e77e <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1e846:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1e848:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1e84a:	68e1      	ldr	r1, [r4, #12]
   1e84c:	4620      	mov	r0, r4
   1e84e:	f7ff ff96 	bl	1e77e <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1e852:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   1e854:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   1e858:	f002 0203 	and.w	r2, r2, #3
   1e85c:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1e85e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1e862:	d10e      	bne.n	1e882 <drop_item_locked+0xa2>
		return item->skip.len;
   1e864:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   1e868:	089b      	lsrs	r3, r3, #2
   1e86a:	d00a      	beq.n	1e882 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   1e86c:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1e86e:	68e1      	ldr	r1, [r4, #12]
   1e870:	462a      	mov	r2, r5
   1e872:	4620      	mov	r0, r4
   1e874:	f7ff ff83 	bl	1e77e <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1e878:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   1e87c:	4630      	mov	r0, r6
   1e87e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   1e882:	69a3      	ldr	r3, [r4, #24]
   1e884:	4630      	mov	r0, r6
   1e886:	4798      	blx	r3
   1e888:	4405      	add	r5, r0
			*user_packet = true;
   1e88a:	2301      	movs	r3, #1
   1e88c:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1e88e:	e7ee      	b.n	1e86e <drop_item_locked+0x8e>
		item = NULL;
   1e890:	4646      	mov	r6, r8
	return item;
   1e892:	e7f3      	b.n	1e87c <drop_item_locked+0x9c>

0001e894 <mpsc_pbuf_init>:
{
   1e894:	b538      	push	{r3, r4, r5, lr}
   1e896:	460d      	mov	r5, r1
   1e898:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   1e89a:	221c      	movs	r2, #28
   1e89c:	2100      	movs	r1, #0
   1e89e:	f000 fc87 	bl	1f1b0 <memset>
	buffer->get_wlen = cfg->get_wlen;
   1e8a2:	68eb      	ldr	r3, [r5, #12]
   1e8a4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   1e8a6:	68ab      	ldr	r3, [r5, #8]
   1e8a8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   1e8aa:	682b      	ldr	r3, [r5, #0]
   1e8ac:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   1e8ae:	686b      	ldr	r3, [r5, #4]
   1e8b0:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   1e8b2:	2200      	movs	r2, #0
   1e8b4:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   1e8b6:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   1e8b8:	b123      	cbz	r3, 1e8c4 <mpsc_pbuf_init+0x30>
   1e8ba:	1e59      	subs	r1, r3, #1
   1e8bc:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1e8be:	bf08      	it	eq
   1e8c0:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   1e8c4:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e8c6:	2201      	movs	r2, #1
   1e8c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1e8cc:	2100      	movs	r1, #0
}
   1e8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e8d2:	f002 bcf6 	b.w	212c2 <z_impl_k_sem_init>

0001e8d6 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   1e8d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e8da:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   1e8dc:	6a03      	ldr	r3, [r0, #32]
   1e8de:	3b01      	subs	r3, #1
   1e8e0:	428b      	cmp	r3, r1
{
   1e8e2:	4604      	mov	r4, r0
   1e8e4:	460e      	mov	r6, r1
   1e8e6:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   1e8e8:	d351      	bcc.n	1e98e <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   1e8ea:	2500      	movs	r5, #0
	__asm__ volatile(
   1e8ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e8f0:	f3ef 8911 	mrs	r9, BASEPRI
   1e8f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8f8:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   1e8fc:	a901      	add	r1, sp, #4
   1e8fe:	4620      	mov	r0, r4
   1e900:	f7ff ff1b 	bl	1e73a <free_space>

		if (free_wlen >= wlen) {
   1e904:	f8dd a004 	ldr.w	sl, [sp, #4]
   1e908:	45b2      	cmp	sl, r6
   1e90a:	d317      	bcc.n	1e93c <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1e90c:	6822      	ldr	r2, [r4, #0]
			item =
   1e90e:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   1e910:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   1e914:	f021 0103 	bic.w	r1, r1, #3
   1e918:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   1e91c:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   1e920:	6821      	ldr	r1, [r4, #0]
   1e922:	4632      	mov	r2, r6
   1e924:	4620      	mov	r0, r4
   1e926:	f7ff ff2a 	bl	1e77e <idx_inc>
   1e92a:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   1e92c:	f389 8811 	msr	BASEPRI, r9
   1e930:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   1e934:	4628      	mov	r0, r5
   1e936:	b002      	add	sp, #8
   1e938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   1e93c:	b150      	cbz	r0, 1e954 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   1e93e:	4651      	mov	r1, sl
   1e940:	4620      	mov	r0, r4
   1e942:	f7ff ff2a 	bl	1e79a <add_skip_item>
   1e946:	f389 8811 	msr	BASEPRI, r9
   1e94a:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1e94e:	2d00      	cmp	r5, #0
   1e950:	d0cb      	beq.n	1e8ea <mpsc_pbuf_alloc+0x14>
   1e952:	e033      	b.n	1e9bc <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1e954:	ea57 0308 	orrs.w	r3, r7, r8
   1e958:	d020      	beq.n	1e99c <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   1e95a:	f002 fc03 	bl	21164 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1e95e:	b9e8      	cbnz	r0, 1e99c <mpsc_pbuf_alloc+0xc6>
   1e960:	f389 8811 	msr	BASEPRI, r9
   1e964:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   1e968:	463a      	mov	r2, r7
   1e96a:	4643      	mov	r3, r8
   1e96c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1e970:	f7fe f81a 	bl	1c9a8 <z_impl_k_sem_take>
	__asm__ volatile(
   1e974:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e978:	f3ef 8311 	mrs	r3, BASEPRI
   1e97c:	f382 8812 	msr	BASEPRI_MAX, r2
   1e980:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   1e984:	b128      	cbz	r0, 1e992 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   1e986:	f383 8811 	msr	BASEPRI, r3
   1e98a:	f3bf 8f6f 	isb	sy
		return NULL;
   1e98e:	2500      	movs	r5, #0
   1e990:	e7d0      	b.n	1e934 <mpsc_pbuf_alloc+0x5e>
   1e992:	f383 8811 	msr	BASEPRI, r3
   1e996:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1e99a:	e7d8      	b.n	1e94e <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   1e99c:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   1e99e:	f10d 0303 	add.w	r3, sp, #3
   1e9a2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1e9a6:	4651      	mov	r1, sl
   1e9a8:	4620      	mov	r0, r4
   1e9aa:	f7ff ff19 	bl	1e7e0 <drop_item_locked>
   1e9ae:	4605      	mov	r5, r0
   1e9b0:	f389 8811 	msr	BASEPRI, r9
   1e9b4:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   1e9b8:	2800      	cmp	r0, #0
   1e9ba:	d0e8      	beq.n	1e98e <mpsc_pbuf_alloc+0xb8>
   1e9bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e9c0:	2b00      	cmp	r3, #0
   1e9c2:	d093      	beq.n	1e8ec <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   1e9c4:	6963      	ldr	r3, [r4, #20]
   1e9c6:	2b00      	cmp	r3, #0
   1e9c8:	d08f      	beq.n	1e8ea <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   1e9ca:	4629      	mov	r1, r5
   1e9cc:	4620      	mov	r0, r4
   1e9ce:	4798      	blx	r3
   1e9d0:	e78b      	b.n	1e8ea <mpsc_pbuf_alloc+0x14>

0001e9d2 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1e9d2:	b570      	push	{r4, r5, r6, lr}
   1e9d4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1e9d6:	6983      	ldr	r3, [r0, #24]
   1e9d8:	4608      	mov	r0, r1
{
   1e9da:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1e9dc:	4798      	blx	r3
   1e9de:	4602      	mov	r2, r0
	__asm__ volatile(
   1e9e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e9e4:	f3ef 8611 	mrs	r6, BASEPRI
   1e9e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9ec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1e9f0:	782b      	ldrb	r3, [r5, #0]
   1e9f2:	f043 0301 	orr.w	r3, r3, #1
   1e9f6:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1e9f8:	6861      	ldr	r1, [r4, #4]
   1e9fa:	4620      	mov	r0, r4
   1e9fc:	f7ff febf 	bl	1e77e <idx_inc>
   1ea00:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1ea02:	4620      	mov	r0, r4
   1ea04:	f7ff fedf 	bl	1e7c6 <max_utilization_update>
	__asm__ volatile(
   1ea08:	f386 8811 	msr	BASEPRI, r6
   1ea0c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   1ea10:	bd70      	pop	{r4, r5, r6, pc}

0001ea12 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1ea12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea14:	4604      	mov	r4, r0
	__asm__ volatile(
   1ea16:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea1a:	f3ef 8611 	mrs	r6, BASEPRI
   1ea1e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea22:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1ea26:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1ea2a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1ea2c:	bf88      	it	hi
   1ea2e:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   1ea30:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   1ea32:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   1ea34:	b132      	cbz	r2, 1ea44 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   1ea36:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   1ea3a:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   1ea3e:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   1ea42:	d105      	bne.n	1ea50 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   1ea44:	f386 8811 	msr	BASEPRI, r6
   1ea48:	f3bf 8f6f 	isb	sy
			item = NULL;
   1ea4c:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   1ea4e:	e02e      	b.n	1eaae <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   1ea50:	2802      	cmp	r0, #2
   1ea52:	d103      	bne.n	1ea5c <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   1ea54:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   1ea58:	08ad      	lsrs	r5, r5, #2
   1ea5a:	d105      	bne.n	1ea68 <mpsc_pbuf_claim+0x56>
   1ea5c:	07d0      	lsls	r0, r2, #31
   1ea5e:	d414      	bmi.n	1ea8a <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   1ea60:	69a3      	ldr	r3, [r4, #24]
   1ea62:	4638      	mov	r0, r7
   1ea64:	4798      	blx	r3
   1ea66:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   1ea68:	68a1      	ldr	r1, [r4, #8]
   1ea6a:	462a      	mov	r2, r5
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	f7ff fe86 	bl	1e77e <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   1ea72:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   1ea74:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   1ea76:	462a      	mov	r2, r5
   1ea78:	4620      	mov	r0, r4
   1ea7a:	f7ff fe80 	bl	1e77e <idx_inc>
				buffer->rd_idx =
   1ea7e:	60e0      	str	r0, [r4, #12]
   1ea80:	f386 8811 	msr	BASEPRI, r6
   1ea84:	f3bf 8f6f 	isb	sy
	} while (cont);
   1ea88:	e7c5      	b.n	1ea16 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   1ea8a:	f042 0202 	orr.w	r2, r2, #2
   1ea8e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   1ea92:	4638      	mov	r0, r7
   1ea94:	69a3      	ldr	r3, [r4, #24]
   1ea96:	68a5      	ldr	r5, [r4, #8]
   1ea98:	4798      	blx	r3
   1ea9a:	4629      	mov	r1, r5
   1ea9c:	4602      	mov	r2, r0
   1ea9e:	4620      	mov	r0, r4
   1eaa0:	f7ff fe6d 	bl	1e77e <idx_inc>
				buffer->tmp_rd_idx =
   1eaa4:	60a0      	str	r0, [r4, #8]
   1eaa6:	f386 8811 	msr	BASEPRI, r6
   1eaaa:	f3bf 8f6f 	isb	sy
}
   1eaae:	4638      	mov	r0, r7
   1eab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eab2 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   1eab2:	b570      	push	{r4, r5, r6, lr}
   1eab4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1eab6:	6983      	ldr	r3, [r0, #24]
   1eab8:	4608      	mov	r0, r1
{
   1eaba:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1eabc:	4798      	blx	r3
   1eabe:	4602      	mov	r2, r0
	__asm__ volatile(
   1eac0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eac4:	f3ef 8611 	mrs	r6, BASEPRI
   1eac8:	f383 8812 	msr	BASEPRI_MAX, r3
   1eacc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1ead0:	782b      	ldrb	r3, [r5, #0]
   1ead2:	f36f 0300 	bfc	r3, #0, #1
   1ead6:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1ead8:	6923      	ldr	r3, [r4, #16]
   1eada:	079b      	lsls	r3, r3, #30
   1eadc:	d505      	bpl.n	1eaea <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1eade:	68e1      	ldr	r1, [r4, #12]
   1eae0:	69e3      	ldr	r3, [r4, #28]
   1eae2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1eae6:	429d      	cmp	r5, r3
   1eae8:	d112      	bne.n	1eb10 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   1eaea:	782b      	ldrb	r3, [r5, #0]
   1eaec:	f36f 0341 	bfc	r3, #1, #1
   1eaf0:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1eaf2:	68e1      	ldr	r1, [r4, #12]
   1eaf4:	4620      	mov	r0, r4
   1eaf6:	f7ff fe42 	bl	1e77e <idx_inc>
   1eafa:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1eafc:	f386 8811 	msr	BASEPRI, r6
   1eb00:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1eb04:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   1eb08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1eb0c:	f7fd bf26 	b.w	1c95c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1eb10:	682b      	ldr	r3, [r5, #0]
   1eb12:	f360 039f 	bfi	r3, r0, #2, #30
   1eb16:	602b      	str	r3, [r5, #0]
   1eb18:	e7f0      	b.n	1eafc <mpsc_pbuf_free+0x4a>

0001eb1a <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1eb1a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1eb1e:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1eb20:	bf88      	it	hi
   1eb22:	6a02      	ldrhi	r2, [r0, #32]
   1eb24:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1eb26:	1e18      	subs	r0, r3, #0
   1eb28:	bf18      	it	ne
   1eb2a:	2001      	movne	r0, #1
   1eb2c:	4770      	bx	lr

0001eb2e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1eb2e:	4770      	bx	lr

0001eb30 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1eb30:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1eb32:	075b      	lsls	r3, r3, #29
   1eb34:	d40b      	bmi.n	1eb4e <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1eb36:	6803      	ldr	r3, [r0, #0]
   1eb38:	8842      	ldrh	r2, [r0, #2]
   1eb3a:	f3c3 2349 	ubfx	r3, r3, #9, #10
   1eb3e:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   1eb42:	1898      	adds	r0, r3, r2
   1eb44:	3017      	adds	r0, #23
   1eb46:	f020 0007 	bic.w	r0, r0, #7
   1eb4a:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1eb4c:	4770      	bx	lr
	return 0;
   1eb4e:	2000      	movs	r0, #0
}
   1eb50:	4770      	bx	lr

0001eb52 <dummy_timestamp>:
}
   1eb52:	2000      	movs	r0, #0
   1eb54:	4770      	bx	lr

0001eb56 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1eb56:	f002 b831 	b.w	20bbc <sys_clock_cycle_get_32>

0001eb5a <atomic_inc>:
{
   1eb5a:	4603      	mov	r3, r0
}
   1eb5c:	f3bf 8f5b 	dmb	ish
   1eb60:	e853 0f00 	ldrex	r0, [r3]
   1eb64:	1c42      	adds	r2, r0, #1
   1eb66:	e843 2100 	strex	r1, r2, [r3]
   1eb6a:	2900      	cmp	r1, #0
   1eb6c:	d1f8      	bne.n	1eb60 <atomic_inc+0x6>
   1eb6e:	f3bf 8f5b 	dmb	ish
   1eb72:	4770      	bx	lr

0001eb74 <z_log_vprintk>:
{
   1eb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   1eb76:	2300      	movs	r3, #0
   1eb78:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1eb7c:	e9cd 3300 	strd	r3, r3, [sp]
   1eb80:	461a      	mov	r2, r3
   1eb82:	4619      	mov	r1, r3
   1eb84:	4618      	mov	r0, r3
   1eb86:	f7f3 fdb5 	bl	126f4 <z_impl_z_log_msg_runtime_vcreate>
}
   1eb8a:	b005      	add	sp, #20
   1eb8c:	f85d fb04 	ldr.w	pc, [sp], #4

0001eb90 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1eb90:	2001      	movs	r0, #1
   1eb92:	f7f3 bb9b 	b.w	122cc <z_log_dropped>

0001eb96 <z_log_get_tag>:
}
   1eb96:	2000      	movs	r0, #0
   1eb98:	4770      	bx	lr

0001eb9a <z_cbprintf_cpy>:
{
   1eb9a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1eb9c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1eba0:	1b9b      	subs	r3, r3, r6
   1eba2:	428b      	cmp	r3, r1
{
   1eba4:	460c      	mov	r4, r1
   1eba6:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1eba8:	d30a      	bcc.n	1ebc0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1ebaa:	6813      	ldr	r3, [r2, #0]
   1ebac:	460a      	mov	r2, r1
   1ebae:	4601      	mov	r1, r0
   1ebb0:	1998      	adds	r0, r3, r6
   1ebb2:	f000 faf2 	bl	1f19a <memcpy>
	desc->off += len;
   1ebb6:	68ab      	ldr	r3, [r5, #8]
   1ebb8:	4423      	add	r3, r4
   1ebba:	60ab      	str	r3, [r5, #8]
	return len;
   1ebbc:	4620      	mov	r0, r4
}
   1ebbe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1ebc0:	f06f 001b 	mvn.w	r0, #27
   1ebc4:	e7fb      	b.n	1ebbe <z_cbprintf_cpy+0x24>

0001ebc6 <z_log_msg_finalize>:
{
   1ebc6:	b570      	push	{r4, r5, r6, lr}
   1ebc8:	460e      	mov	r6, r1
   1ebca:	4615      	mov	r5, r2
   1ebcc:	4619      	mov	r1, r3
	if (!msg) {
   1ebce:	4604      	mov	r4, r0
   1ebd0:	b918      	cbnz	r0, 1ebda <z_log_msg_finalize+0x14>
}
   1ebd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1ebd6:	f7f3 bb79 	b.w	122cc <z_log_dropped>
	if (data) {
   1ebda:	b13b      	cbz	r3, 1ebec <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1ebdc:	f3c2 2349 	ubfx	r3, r2, #9, #10
   1ebe0:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   1ebe2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1ebe6:	4418      	add	r0, r3
   1ebe8:	f000 fad7 	bl	1f19a <memcpy>
	msg->hdr.source = source;
   1ebec:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1ebf0:	4620      	mov	r0, r4
}
   1ebf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1ebf6:	f7f3 bcf5 	b.w	125e4 <z_log_msg_commit>

0001ebfa <buffer_write>:
{
   1ebfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ebfc:	4606      	mov	r6, r0
   1ebfe:	460d      	mov	r5, r1
   1ec00:	4614      	mov	r4, r2
   1ec02:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ec04:	4621      	mov	r1, r4
   1ec06:	4628      	mov	r0, r5
   1ec08:	463a      	mov	r2, r7
   1ec0a:	47b0      	blx	r6
	} while (len != 0);
   1ec0c:	1a24      	subs	r4, r4, r0
		buf += processed;
   1ec0e:	4405      	add	r5, r0
	} while (len != 0);
   1ec10:	d1f8      	bne.n	1ec04 <buffer_write+0xa>
}
   1ec12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ec14 <cbvprintf>:
{
   1ec14:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1ec16:	2400      	movs	r4, #0
   1ec18:	9400      	str	r4, [sp, #0]
   1ec1a:	f7f1 fd49 	bl	106b0 <z_cbvprintf_impl>
}
   1ec1e:	b002      	add	sp, #8
   1ec20:	bd10      	pop	{r4, pc}

0001ec22 <log_output_flush>:
{
   1ec22:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1ec24:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1ec26:	6881      	ldr	r1, [r0, #8]
{
   1ec28:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1ec2a:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ec2e:	6800      	ldr	r0, [r0, #0]
   1ec30:	f7ff ffe3 	bl	1ebfa <buffer_write>
	output->control_block->offset = 0;
   1ec34:	6863      	ldr	r3, [r4, #4]
   1ec36:	2200      	movs	r2, #0
   1ec38:	601a      	str	r2, [r3, #0]
}
   1ec3a:	bd10      	pop	{r4, pc}

0001ec3c <out_func>:
{
   1ec3c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ec3e:	684b      	ldr	r3, [r1, #4]
   1ec40:	681a      	ldr	r2, [r3, #0]
   1ec42:	68cb      	ldr	r3, [r1, #12]
   1ec44:	429a      	cmp	r2, r3
{
   1ec46:	4605      	mov	r5, r0
   1ec48:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ec4a:	d102      	bne.n	1ec52 <out_func+0x16>
		log_output_flush(out_ctx);
   1ec4c:	4608      	mov	r0, r1
   1ec4e:	f7ff ffe8 	bl	1ec22 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ec52:	6863      	ldr	r3, [r4, #4]
   1ec54:	f3bf 8f5b 	dmb	ish
   1ec58:	e853 2f00 	ldrex	r2, [r3]
   1ec5c:	1c51      	adds	r1, r2, #1
   1ec5e:	e843 1000 	strex	r0, r1, [r3]
   1ec62:	2800      	cmp	r0, #0
   1ec64:	d1f8      	bne.n	1ec58 <out_func+0x1c>
   1ec66:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1ec6a:	68a3      	ldr	r3, [r4, #8]
   1ec6c:	549d      	strb	r5, [r3, r2]
}
   1ec6e:	2000      	movs	r0, #0
   1ec70:	bd38      	pop	{r3, r4, r5, pc}

0001ec72 <cr_out_func>:
	if (c == '\n') {
   1ec72:	280a      	cmp	r0, #10
{
   1ec74:	b538      	push	{r3, r4, r5, lr}
   1ec76:	4604      	mov	r4, r0
   1ec78:	460d      	mov	r5, r1
	if (c == '\n') {
   1ec7a:	d102      	bne.n	1ec82 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1ec7c:	200d      	movs	r0, #13
   1ec7e:	f7ff ffdd 	bl	1ec3c <out_func>
	out_func(c, ctx);
   1ec82:	4629      	mov	r1, r5
   1ec84:	4620      	mov	r0, r4
   1ec86:	f7ff ffd9 	bl	1ec3c <out_func>
}
   1ec8a:	2000      	movs	r0, #0
   1ec8c:	bd38      	pop	{r3, r4, r5, pc}

0001ec8e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1ec8e:	b538      	push	{r3, r4, r5, lr}
   1ec90:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1ec92:	42ab      	cmp	r3, r5
{
   1ec94:	4611      	mov	r1, r2
   1ec96:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1ec98:	d804      	bhi.n	1eca4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1ec9a:	461a      	mov	r2, r3
   1ec9c:	f000 fa7d 	bl	1f19a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1eca0:	4620      	mov	r0, r4
   1eca2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1eca4:	2400      	movs	r4, #0
   1eca6:	e7fb      	b.n	1eca0 <_copy+0x12>

0001eca8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1eca8:	f000 ba82 	b.w	1f1b0 <memset>

0001ecac <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1ecac:	09c3      	lsrs	r3, r0, #7
   1ecae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ecb2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ecb6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1ecba:	b2c0      	uxtb	r0, r0
   1ecbc:	4770      	bx	lr

0001ecbe <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1ecbe:	78cb      	ldrb	r3, [r1, #3]
   1ecc0:	7802      	ldrb	r2, [r0, #0]
   1ecc2:	4053      	eors	r3, r2
   1ecc4:	7003      	strb	r3, [r0, #0]
   1ecc6:	884b      	ldrh	r3, [r1, #2]
   1ecc8:	7842      	ldrb	r2, [r0, #1]
   1ecca:	4053      	eors	r3, r2
   1eccc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1ecce:	680a      	ldr	r2, [r1, #0]
   1ecd0:	7883      	ldrb	r3, [r0, #2]
   1ecd2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ecd6:	7083      	strb	r3, [r0, #2]
   1ecd8:	680a      	ldr	r2, [r1, #0]
   1ecda:	78c3      	ldrb	r3, [r0, #3]
   1ecdc:	4053      	eors	r3, r2
   1ecde:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1ece0:	79cb      	ldrb	r3, [r1, #7]
   1ece2:	7902      	ldrb	r2, [r0, #4]
   1ece4:	4053      	eors	r3, r2
   1ece6:	7103      	strb	r3, [r0, #4]
   1ece8:	88cb      	ldrh	r3, [r1, #6]
   1ecea:	7942      	ldrb	r2, [r0, #5]
   1ecec:	4053      	eors	r3, r2
   1ecee:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1ecf0:	684a      	ldr	r2, [r1, #4]
   1ecf2:	7983      	ldrb	r3, [r0, #6]
   1ecf4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ecf8:	7183      	strb	r3, [r0, #6]
   1ecfa:	684a      	ldr	r2, [r1, #4]
   1ecfc:	79c3      	ldrb	r3, [r0, #7]
   1ecfe:	4053      	eors	r3, r2
   1ed00:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1ed02:	7acb      	ldrb	r3, [r1, #11]
   1ed04:	7a02      	ldrb	r2, [r0, #8]
   1ed06:	4053      	eors	r3, r2
   1ed08:	7203      	strb	r3, [r0, #8]
   1ed0a:	7a42      	ldrb	r2, [r0, #9]
   1ed0c:	894b      	ldrh	r3, [r1, #10]
   1ed0e:	4053      	eors	r3, r2
   1ed10:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1ed12:	688a      	ldr	r2, [r1, #8]
   1ed14:	7a83      	ldrb	r3, [r0, #10]
   1ed16:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ed1a:	7283      	strb	r3, [r0, #10]
   1ed1c:	688a      	ldr	r2, [r1, #8]
   1ed1e:	7ac3      	ldrb	r3, [r0, #11]
   1ed20:	4053      	eors	r3, r2
   1ed22:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1ed24:	7bcb      	ldrb	r3, [r1, #15]
   1ed26:	7b02      	ldrb	r2, [r0, #12]
   1ed28:	4053      	eors	r3, r2
   1ed2a:	7303      	strb	r3, [r0, #12]
   1ed2c:	89cb      	ldrh	r3, [r1, #14]
   1ed2e:	7b42      	ldrb	r2, [r0, #13]
   1ed30:	4053      	eors	r3, r2
   1ed32:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1ed34:	68ca      	ldr	r2, [r1, #12]
   1ed36:	7b83      	ldrb	r3, [r0, #14]
   1ed38:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ed3c:	7383      	strb	r3, [r0, #14]
   1ed3e:	68ca      	ldr	r2, [r1, #12]
   1ed40:	7bc3      	ldrb	r3, [r0, #15]
   1ed42:	4053      	eors	r3, r2
   1ed44:	73c3      	strb	r3, [r0, #15]
}
   1ed46:	4770      	bx	lr

0001ed48 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1ed48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1ed4a:	7802      	ldrb	r2, [r0, #0]
   1ed4c:	f88d 2000 	strb.w	r2, [sp]
   1ed50:	7942      	ldrb	r2, [r0, #5]
   1ed52:	f88d 2001 	strb.w	r2, [sp, #1]
   1ed56:	7a82      	ldrb	r2, [r0, #10]
   1ed58:	f88d 2002 	strb.w	r2, [sp, #2]
   1ed5c:	7bc2      	ldrb	r2, [r0, #15]
   1ed5e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1ed62:	7902      	ldrb	r2, [r0, #4]
   1ed64:	f88d 2004 	strb.w	r2, [sp, #4]
   1ed68:	7a42      	ldrb	r2, [r0, #9]
   1ed6a:	f88d 2005 	strb.w	r2, [sp, #5]
   1ed6e:	7b82      	ldrb	r2, [r0, #14]
   1ed70:	f88d 2006 	strb.w	r2, [sp, #6]
   1ed74:	78c2      	ldrb	r2, [r0, #3]
   1ed76:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1ed7a:	7a02      	ldrb	r2, [r0, #8]
   1ed7c:	f88d 2008 	strb.w	r2, [sp, #8]
   1ed80:	7b42      	ldrb	r2, [r0, #13]
   1ed82:	f88d 2009 	strb.w	r2, [sp, #9]
   1ed86:	7882      	ldrb	r2, [r0, #2]
   1ed88:	f88d 200a 	strb.w	r2, [sp, #10]
   1ed8c:	79c2      	ldrb	r2, [r0, #7]
   1ed8e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1ed92:	7b02      	ldrb	r2, [r0, #12]
   1ed94:	f88d 200c 	strb.w	r2, [sp, #12]
   1ed98:	7842      	ldrb	r2, [r0, #1]
   1ed9a:	7ac3      	ldrb	r3, [r0, #11]
   1ed9c:	f88d 200d 	strb.w	r2, [sp, #13]
   1eda0:	7982      	ldrb	r2, [r0, #6]
   1eda2:	f88d 200e 	strb.w	r2, [sp, #14]
   1eda6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1edaa:	2310      	movs	r3, #16
   1edac:	466a      	mov	r2, sp
   1edae:	4619      	mov	r1, r3
   1edb0:	f7ff ff6d 	bl	1ec8e <_copy>
}
   1edb4:	b005      	add	sp, #20
   1edb6:	f85d fb04 	ldr.w	pc, [sp], #4

0001edba <mult_row_column>:
{
   1edba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1edbc:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1edbe:	7808      	ldrb	r0, [r1, #0]
{
   1edc0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1edc2:	f7ff ff73 	bl	1ecac <_double_byte>
   1edc6:	4605      	mov	r5, r0
   1edc8:	7860      	ldrb	r0, [r4, #1]
   1edca:	f7ff ff6f 	bl	1ecac <_double_byte>
   1edce:	78a2      	ldrb	r2, [r4, #2]
   1edd0:	7863      	ldrb	r3, [r4, #1]
   1edd2:	4053      	eors	r3, r2
   1edd4:	78e2      	ldrb	r2, [r4, #3]
   1edd6:	4053      	eors	r3, r2
   1edd8:	405d      	eors	r5, r3
   1edda:	4068      	eors	r0, r5
   1eddc:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1edde:	7860      	ldrb	r0, [r4, #1]
   1ede0:	7827      	ldrb	r7, [r4, #0]
   1ede2:	f7ff ff63 	bl	1ecac <_double_byte>
   1ede6:	4605      	mov	r5, r0
   1ede8:	78a0      	ldrb	r0, [r4, #2]
   1edea:	f7ff ff5f 	bl	1ecac <_double_byte>
   1edee:	78a3      	ldrb	r3, [r4, #2]
   1edf0:	405f      	eors	r7, r3
   1edf2:	78e3      	ldrb	r3, [r4, #3]
   1edf4:	405f      	eors	r7, r3
   1edf6:	407d      	eors	r5, r7
   1edf8:	4068      	eors	r0, r5
   1edfa:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1edfc:	7863      	ldrb	r3, [r4, #1]
   1edfe:	7827      	ldrb	r7, [r4, #0]
   1ee00:	78a0      	ldrb	r0, [r4, #2]
   1ee02:	405f      	eors	r7, r3
   1ee04:	f7ff ff52 	bl	1ecac <_double_byte>
   1ee08:	4605      	mov	r5, r0
   1ee0a:	78e0      	ldrb	r0, [r4, #3]
   1ee0c:	f7ff ff4e 	bl	1ecac <_double_byte>
   1ee10:	78e3      	ldrb	r3, [r4, #3]
   1ee12:	405f      	eors	r7, r3
   1ee14:	407d      	eors	r5, r7
   1ee16:	4068      	eors	r0, r5
   1ee18:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1ee1a:	7820      	ldrb	r0, [r4, #0]
   1ee1c:	f7ff ff46 	bl	1ecac <_double_byte>
   1ee20:	7862      	ldrb	r2, [r4, #1]
   1ee22:	7823      	ldrb	r3, [r4, #0]
   1ee24:	4053      	eors	r3, r2
   1ee26:	78a2      	ldrb	r2, [r4, #2]
   1ee28:	4053      	eors	r3, r2
   1ee2a:	ea80 0503 	eor.w	r5, r0, r3
   1ee2e:	78e0      	ldrb	r0, [r4, #3]
   1ee30:	f7ff ff3c 	bl	1ecac <_double_byte>
   1ee34:	b2ed      	uxtb	r5, r5
   1ee36:	4045      	eors	r5, r0
   1ee38:	70f5      	strb	r5, [r6, #3]
}
   1ee3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ee3c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1ee3c:	b570      	push	{r4, r5, r6, lr}
   1ee3e:	4614      	mov	r4, r2
   1ee40:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1ee42:	4605      	mov	r5, r0
   1ee44:	2800      	cmp	r0, #0
   1ee46:	d049      	beq.n	1eedc <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1ee48:	2900      	cmp	r1, #0
   1ee4a:	d049      	beq.n	1eee0 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1ee4c:	2a00      	cmp	r2, #0
   1ee4e:	d049      	beq.n	1eee4 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1ee50:	2310      	movs	r3, #16
   1ee52:	460a      	mov	r2, r1
   1ee54:	4668      	mov	r0, sp
   1ee56:	4619      	mov	r1, r3
   1ee58:	f7ff ff19 	bl	1ec8e <_copy>
	add_round_key(state, s->words);
   1ee5c:	4621      	mov	r1, r4
   1ee5e:	4668      	mov	r0, sp
   1ee60:	f7ff ff2d 	bl	1ecbe <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1ee64:	3410      	adds	r4, #16
   1ee66:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1ee6a:	4668      	mov	r0, sp
   1ee6c:	f7f4 f832 	bl	12ed4 <sub_bytes>
		shift_rows(state);
   1ee70:	4668      	mov	r0, sp
   1ee72:	f7ff ff69 	bl	1ed48 <shift_rows>
	mult_row_column(t, s);
   1ee76:	4669      	mov	r1, sp
   1ee78:	a804      	add	r0, sp, #16
   1ee7a:	f7ff ff9e 	bl	1edba <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1ee7e:	a901      	add	r1, sp, #4
   1ee80:	a805      	add	r0, sp, #20
   1ee82:	f7ff ff9a 	bl	1edba <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1ee86:	a902      	add	r1, sp, #8
   1ee88:	a806      	add	r0, sp, #24
   1ee8a:	f7ff ff96 	bl	1edba <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1ee8e:	a903      	add	r1, sp, #12
   1ee90:	a807      	add	r0, sp, #28
   1ee92:	f7ff ff92 	bl	1edba <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1ee96:	2310      	movs	r3, #16
   1ee98:	4619      	mov	r1, r3
   1ee9a:	eb0d 0203 	add.w	r2, sp, r3
   1ee9e:	4668      	mov	r0, sp
   1eea0:	f7ff fef5 	bl	1ec8e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1eea4:	4621      	mov	r1, r4
   1eea6:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1eea8:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1eeaa:	f7ff ff08 	bl	1ecbe <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1eeae:	42b4      	cmp	r4, r6
   1eeb0:	d1db      	bne.n	1ee6a <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1eeb2:	f7f4 f80f 	bl	12ed4 <sub_bytes>
	shift_rows(state);
   1eeb6:	4668      	mov	r0, sp
   1eeb8:	f7ff ff46 	bl	1ed48 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1eebc:	4621      	mov	r1, r4
   1eebe:	4668      	mov	r0, sp
   1eec0:	f7ff fefd 	bl	1ecbe <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1eec4:	2310      	movs	r3, #16
   1eec6:	4619      	mov	r1, r3
   1eec8:	466a      	mov	r2, sp
   1eeca:	4628      	mov	r0, r5
   1eecc:	f7ff fedf 	bl	1ec8e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1eed0:	4668      	mov	r0, sp
   1eed2:	2210      	movs	r2, #16
   1eed4:	2100      	movs	r1, #0
   1eed6:	f7ff fee7 	bl	1eca8 <_set>

	return TC_CRYPTO_SUCCESS;
   1eeda:	2001      	movs	r0, #1
}
   1eedc:	b008      	add	sp, #32
   1eede:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1eee0:	4608      	mov	r0, r1
   1eee2:	e7fb      	b.n	1eedc <tc_aes_encrypt+0xa0>
   1eee4:	4610      	mov	r0, r2
   1eee6:	e7f9      	b.n	1eedc <tc_aes_encrypt+0xa0>

0001eee8 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1eee8:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1eeea:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1eeec:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1eeee:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1eef2:	2b00      	cmp	r3, #0
   1eef4:	bfac      	ite	ge
   1eef6:	2300      	movge	r3, #0
   1eef8:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1eefa:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1eefe:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1ef02:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1ef04:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1ef08:	d002      	beq.n	1ef10 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1ef0a:	7813      	ldrb	r3, [r2, #0]
   1ef0c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1ef0e:	e7f4      	b.n	1eefa <gf_double+0x12>
	}
}
   1ef10:	bd10      	pop	{r4, pc}

0001ef12 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1ef12:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1ef14:	b120      	cbz	r0, 1ef20 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1ef16:	2258      	movs	r2, #88	; 0x58
   1ef18:	2100      	movs	r1, #0
   1ef1a:	f7ff fec5 	bl	1eca8 <_set>
   1ef1e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1ef20:	bd08      	pop	{r3, pc}

0001ef22 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1ef22:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1ef24:	4604      	mov	r4, r0
   1ef26:	b188      	cbz	r0, 1ef4c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ef28:	2210      	movs	r2, #16
   1ef2a:	2100      	movs	r1, #0
   1ef2c:	f7ff febc 	bl	1eca8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1ef30:	2210      	movs	r2, #16
   1ef32:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ef36:	2100      	movs	r1, #0
   1ef38:	f7ff feb6 	bl	1eca8 <_set>
	s->leftover_offset = 0;
   1ef3c:	2300      	movs	r3, #0
   1ef3e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1ef40:	2200      	movs	r2, #0
   1ef42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ef46:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1ef4a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1ef4c:	bd10      	pop	{r4, pc}

0001ef4e <tc_cmac_setup>:
{
   1ef4e:	b570      	push	{r4, r5, r6, lr}
   1ef50:	4604      	mov	r4, r0
   1ef52:	460d      	mov	r5, r1
   1ef54:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1ef56:	b310      	cbz	r0, 1ef9e <tc_cmac_setup+0x50>
   1ef58:	b311      	cbz	r1, 1efa0 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1ef5a:	2258      	movs	r2, #88	; 0x58
   1ef5c:	2100      	movs	r1, #0
   1ef5e:	f7ff fea3 	bl	1eca8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1ef62:	4629      	mov	r1, r5
	s->sched = sched;
   1ef64:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1ef66:	4630      	mov	r0, r6
   1ef68:	f7f3 ffc0 	bl	12eec <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ef6c:	2210      	movs	r2, #16
   1ef6e:	2100      	movs	r1, #0
   1ef70:	4620      	mov	r0, r4
   1ef72:	f7ff fe99 	bl	1eca8 <_set>
	gf_double (s->K1, s->iv);
   1ef76:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ef7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ef7c:	4621      	mov	r1, r4
   1ef7e:	4620      	mov	r0, r4
   1ef80:	f7ff ff5c 	bl	1ee3c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1ef84:	4621      	mov	r1, r4
   1ef86:	4628      	mov	r0, r5
   1ef88:	f7ff ffae 	bl	1eee8 <gf_double>
	gf_double (s->K2, s->K1);
   1ef8c:	4629      	mov	r1, r5
   1ef8e:	f104 0020 	add.w	r0, r4, #32
   1ef92:	f7ff ffa9 	bl	1eee8 <gf_double>
	tc_cmac_init(s);
   1ef96:	4620      	mov	r0, r4
   1ef98:	f7ff ffc3 	bl	1ef22 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1ef9c:	2001      	movs	r0, #1
}
   1ef9e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1efa0:	4608      	mov	r0, r1
   1efa2:	e7fc      	b.n	1ef9e <tc_cmac_setup+0x50>

0001efa4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1efa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efa8:	460e      	mov	r6, r1
   1efaa:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1efac:	4604      	mov	r4, r0
   1efae:	2800      	cmp	r0, #0
   1efb0:	d060      	beq.n	1f074 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1efb2:	b1fa      	cbz	r2, 1eff4 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1efb4:	2900      	cmp	r1, #0
   1efb6:	d05d      	beq.n	1f074 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1efb8:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1efbc:	ea53 0102 	orrs.w	r1, r3, r2
   1efc0:	d058      	beq.n	1f074 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1efc2:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1efc4:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1efc8:	f142 32ff 	adc.w	r2, r2, #4294967295
   1efcc:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1efd0:	f1b8 0f00 	cmp.w	r8, #0
   1efd4:	d02c      	beq.n	1f030 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1efd6:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1efda:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1efde:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1efe0:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1efe2:	d20a      	bcs.n	1effa <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1efe4:	462b      	mov	r3, r5
   1efe6:	4632      	mov	r2, r6
   1efe8:	4629      	mov	r1, r5
   1efea:	f7ff fe50 	bl	1ec8e <_copy>
			s->leftover_offset += data_length;
   1efee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1eff0:	442b      	add	r3, r5
   1eff2:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1eff4:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1eff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1effa:	463b      	mov	r3, r7
   1effc:	4632      	mov	r2, r6
   1effe:	4639      	mov	r1, r7
   1f000:	f7ff fe45 	bl	1ec8e <_copy>
		data_length -= remaining_space;
   1f004:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   1f006:	2300      	movs	r3, #0
   1f008:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1f00a:	4445      	add	r5, r8
		data += remaining_space;
   1f00c:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f00e:	1e63      	subs	r3, r4, #1
   1f010:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1f014:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f018:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f01c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1f01e:	ea82 0200 	eor.w	r2, r2, r0
   1f022:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f024:	d1f6      	bne.n	1f014 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1f026:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1f028:	4621      	mov	r1, r4
   1f02a:	4620      	mov	r0, r4
   1f02c:	f7ff ff06 	bl	1ee3c <tc_aes_encrypt>
   1f030:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1f034:	2d10      	cmp	r5, #16
   1f036:	d80a      	bhi.n	1f04e <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1f038:	2d00      	cmp	r5, #0
   1f03a:	d0db      	beq.n	1eff4 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1f03c:	462b      	mov	r3, r5
   1f03e:	4632      	mov	r2, r6
   1f040:	4629      	mov	r1, r5
   1f042:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1f046:	f7ff fe22 	bl	1ec8e <_copy>
		s->leftover_offset = data_length;
   1f04a:	6465      	str	r5, [r4, #68]	; 0x44
   1f04c:	e7d2      	b.n	1eff4 <tc_cmac_update+0x50>
   1f04e:	1e63      	subs	r3, r4, #1
   1f050:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1f052:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f056:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f05a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1f05c:	ea82 0200 	eor.w	r2, r2, r0
   1f060:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f062:	d1f6      	bne.n	1f052 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1f064:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1f066:	4621      	mov	r1, r4
   1f068:	4620      	mov	r0, r4
   1f06a:	f7ff fee7 	bl	1ee3c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1f06e:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1f070:	3d10      	subs	r5, #16
   1f072:	e7df      	b.n	1f034 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1f074:	2000      	movs	r0, #0
   1f076:	e7be      	b.n	1eff6 <tc_cmac_update+0x52>

0001f078 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1f078:	b570      	push	{r4, r5, r6, lr}
   1f07a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1f07c:	4605      	mov	r5, r0
   1f07e:	b1e8      	cbz	r0, 1f0bc <tc_cmac_final+0x44>
   1f080:	b369      	cbz	r1, 1f0de <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1f082:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1f084:	2a10      	cmp	r2, #16
   1f086:	d11a      	bne.n	1f0be <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1f088:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f08a:	1e63      	subs	r3, r4, #1
   1f08c:	3901      	subs	r1, #1
   1f08e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1f092:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f096:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1f09a:	4072      	eors	r2, r6
   1f09c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f0a0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1f0a2:	ea82 0206 	eor.w	r2, r2, r6
   1f0a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f0a8:	d1f3      	bne.n	1f092 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1f0aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1f0ac:	4621      	mov	r1, r4
   1f0ae:	4628      	mov	r0, r5
   1f0b0:	f7ff fec4 	bl	1ee3c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1f0b4:	4620      	mov	r0, r4
   1f0b6:	f7ff ff2c 	bl	1ef12 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1f0ba:	2001      	movs	r0, #1
}
   1f0bc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1f0be:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1f0c2:	2100      	movs	r1, #0
   1f0c4:	f1c2 0210 	rsb	r2, r2, #16
   1f0c8:	4420      	add	r0, r4
   1f0ca:	f7ff fded 	bl	1eca8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1f0ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f0d0:	4423      	add	r3, r4
   1f0d2:	2280      	movs	r2, #128	; 0x80
   1f0d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1f0d8:	f104 0120 	add.w	r1, r4, #32
   1f0dc:	e7d5      	b.n	1f08a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1f0de:	4608      	mov	r0, r1
   1f0e0:	e7ec      	b.n	1f0bc <tc_cmac_final+0x44>

0001f0e2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1f0e2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1f0e4:	6800      	ldr	r0, [r0, #0]
   1f0e6:	f7f3 bf73 	b.w	12fd0 <z_arm_fatal_error>

0001f0ea <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1f0ea:	2100      	movs	r1, #0
   1f0ec:	2001      	movs	r0, #1
   1f0ee:	f7f3 bf6f 	b.w	12fd0 <z_arm_fatal_error>

0001f0f2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1f0f2:	b508      	push	{r3, lr}
	handler();
   1f0f4:	f7f4 f874 	bl	131e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1f0f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1f0fc:	f7f4 b9dc 	b.w	134b8 <z_arm_exc_exit>

0001f100 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1f100:	2300      	movs	r3, #0
   1f102:	f7f3 baa3 	b.w	1264c <z_impl_z_log_msg_static_create>

0001f106 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1f106:	3901      	subs	r1, #1
   1f108:	4603      	mov	r3, r0
   1f10a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f10e:	b90a      	cbnz	r2, 1f114 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1f110:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1f112:	4770      	bx	lr
		*d = *s;
   1f114:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1f118:	e7f7      	b.n	1f10a <strcpy+0x4>

0001f11a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   1f11a:	b510      	push	{r4, lr}
   1f11c:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1f11e:	4603      	mov	r3, r0
   1f120:	b922      	cbnz	r2, 1f12c <strncpy+0x12>
   1f122:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1f124:	2100      	movs	r1, #0
	while (n > 0) {
   1f126:	4293      	cmp	r3, r2
   1f128:	d108      	bne.n	1f13c <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   1f12a:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   1f12c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f130:	2c00      	cmp	r4, #0
   1f132:	d0f6      	beq.n	1f122 <strncpy+0x8>
		*d = *s;
   1f134:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1f138:	3a01      	subs	r2, #1
   1f13a:	e7f1      	b.n	1f120 <strncpy+0x6>
		*d = '\0';
   1f13c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f140:	e7f1      	b.n	1f126 <strncpy+0xc>

0001f142 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1f142:	4603      	mov	r3, r0
	size_t n = 0;
   1f144:	2000      	movs	r0, #0

	while (*s != '\0') {
   1f146:	5c1a      	ldrb	r2, [r3, r0]
   1f148:	b902      	cbnz	r2, 1f14c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1f14a:	4770      	bx	lr
		n++;
   1f14c:	3001      	adds	r0, #1
   1f14e:	e7fa      	b.n	1f146 <strlen+0x4>

0001f150 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1f150:	4603      	mov	r3, r0
	size_t n = 0;
   1f152:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1f154:	5c1a      	ldrb	r2, [r3, r0]
   1f156:	b10a      	cbz	r2, 1f15c <strnlen+0xc>
   1f158:	4288      	cmp	r0, r1
   1f15a:	d100      	bne.n	1f15e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1f15c:	4770      	bx	lr
		n++;
   1f15e:	3001      	adds	r0, #1
   1f160:	e7f8      	b.n	1f154 <strnlen+0x4>

0001f162 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1f162:	1e43      	subs	r3, r0, #1
   1f164:	3901      	subs	r1, #1
   1f166:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f16a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1f16e:	4282      	cmp	r2, r0
   1f170:	d101      	bne.n	1f176 <strcmp+0x14>
   1f172:	2a00      	cmp	r2, #0
   1f174:	d1f7      	bne.n	1f166 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1f176:	1a10      	subs	r0, r2, r0
   1f178:	4770      	bx	lr

0001f17a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1f17a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1f17c:	b15a      	cbz	r2, 1f196 <memcmp+0x1c>
   1f17e:	3901      	subs	r1, #1
   1f180:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1f182:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f186:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f18a:	42a0      	cmp	r0, r4
   1f18c:	d001      	beq.n	1f192 <memcmp+0x18>
   1f18e:	429a      	cmp	r2, r3
   1f190:	d0f7      	beq.n	1f182 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1f192:	1ad0      	subs	r0, r2, r3
}
   1f194:	bd10      	pop	{r4, pc}
		return 0;
   1f196:	4610      	mov	r0, r2
   1f198:	e7fc      	b.n	1f194 <memcmp+0x1a>

0001f19a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1f19a:	b510      	push	{r4, lr}
   1f19c:	1e43      	subs	r3, r0, #1
   1f19e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1f1a0:	4291      	cmp	r1, r2
   1f1a2:	d100      	bne.n	1f1a6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1f1a4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1f1a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f1aa:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1f1ae:	e7f7      	b.n	1f1a0 <memcpy+0x6>

0001f1b0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1f1b0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1f1b2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1f1b4:	4603      	mov	r3, r0
	while (n > 0) {
   1f1b6:	4293      	cmp	r3, r2
   1f1b8:	d100      	bne.n	1f1bc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1f1ba:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1f1bc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f1c0:	e7f9      	b.n	1f1b6 <memset+0x6>

0001f1c2 <_stdout_hook_default>:
}
   1f1c2:	f04f 30ff 	mov.w	r0, #4294967295
   1f1c6:	4770      	bx	lr

0001f1c8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1f1c8:	2806      	cmp	r0, #6
   1f1ca:	d108      	bne.n	1f1de <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1f1cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f1d0:	2201      	movs	r2, #1
   1f1d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1f1d6:	f3bf 8f4f 	dsb	sy
        __WFE();
   1f1da:	bf20      	wfe
    while (true)
   1f1dc:	e7fd      	b.n	1f1da <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1f1de:	4770      	bx	lr

0001f1e0 <pm_state_exit_post_ops>:
   1f1e0:	2300      	movs	r3, #0
   1f1e2:	f383 8811 	msr	BASEPRI, r3
   1f1e6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1f1ea:	4770      	bx	lr

0001f1ec <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1f1ec:	b510      	push	{r4, lr}
   1f1ee:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1f1f0:	7801      	ldrb	r1, [r0, #0]
   1f1f2:	7822      	ldrb	r2, [r4, #0]
   1f1f4:	428a      	cmp	r2, r1
{
   1f1f6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1f1f8:	d00f      	beq.n	1f21a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1f1fa:	4669      	mov	r1, sp
   1f1fc:	f7f4 fe94 	bl	13f28 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1f200:	a905      	add	r1, sp, #20
   1f202:	4620      	mov	r0, r4
   1f204:	f7f4 fe90 	bl	13f28 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1f208:	2210      	movs	r2, #16
   1f20a:	f10d 0115 	add.w	r1, sp, #21
   1f20e:	f10d 0001 	add.w	r0, sp, #1
   1f212:	f7ff ffb2 	bl	1f17a <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1f216:	b00a      	add	sp, #40	; 0x28
   1f218:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1f21a:	2a01      	cmp	r2, #1
   1f21c:	d006      	beq.n	1f22c <bt_uuid_cmp+0x40>
   1f21e:	2a02      	cmp	r2, #2
   1f220:	d007      	beq.n	1f232 <bt_uuid_cmp+0x46>
   1f222:	b972      	cbnz	r2, 1f242 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1f224:	8840      	ldrh	r0, [r0, #2]
   1f226:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1f228:	1ac0      	subs	r0, r0, r3
   1f22a:	e7f4      	b.n	1f216 <bt_uuid_cmp+0x2a>
   1f22c:	6840      	ldr	r0, [r0, #4]
   1f22e:	6863      	ldr	r3, [r4, #4]
   1f230:	e7fa      	b.n	1f228 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1f232:	2210      	movs	r2, #16
   1f234:	1c61      	adds	r1, r4, #1
   1f236:	3001      	adds	r0, #1
}
   1f238:	b00a      	add	sp, #40	; 0x28
   1f23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1f23e:	f7ff bf9c 	b.w	1f17a <memcmp>
	switch (u1->type) {
   1f242:	f06f 0015 	mvn.w	r0, #21
   1f246:	e7e6      	b.n	1f216 <bt_uuid_cmp+0x2a>

0001f248 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1f248:	2a04      	cmp	r2, #4
{
   1f24a:	b510      	push	{r4, lr}
	switch (data_len) {
   1f24c:	d00a      	beq.n	1f264 <bt_uuid_create+0x1c>
   1f24e:	2a10      	cmp	r2, #16
   1f250:	d00d      	beq.n	1f26e <bt_uuid_create+0x26>
   1f252:	2a02      	cmp	r2, #2
   1f254:	f04f 0300 	mov.w	r3, #0
   1f258:	d10f      	bne.n	1f27a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1f25a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1f25c:	880b      	ldrh	r3, [r1, #0]
   1f25e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1f260:	2001      	movs	r0, #1
}
   1f262:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1f264:	2301      	movs	r3, #1
   1f266:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1f268:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1f26a:	6043      	str	r3, [r0, #4]
		break;
   1f26c:	e7f8      	b.n	1f260 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1f26e:	2302      	movs	r3, #2
   1f270:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1f274:	f7ff ff91 	bl	1f19a <memcpy>
		break;
   1f278:	e7f2      	b.n	1f260 <bt_uuid_create+0x18>
	switch (data_len) {
   1f27a:	4618      	mov	r0, r3
   1f27c:	e7f1      	b.n	1f262 <bt_uuid_create+0x1a>

0001f27e <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1f27e:	2301      	movs	r3, #1
{
   1f280:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1f282:	2106      	movs	r1, #6
{
   1f284:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1f286:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1f28a:	f7fb fdc5 	bl	1ae18 <bt_rand>
	if (err) {
   1f28e:	b918      	cbnz	r0, 1f298 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1f290:	79a3      	ldrb	r3, [r4, #6]
   1f292:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f296:	71a3      	strb	r3, [r4, #6]
}
   1f298:	bd10      	pop	{r4, pc}

0001f29a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1f29a:	280f      	cmp	r0, #15
   1f29c:	d807      	bhi.n	1f2ae <bt_hci_evt_get_flags+0x14>
   1f29e:	280d      	cmp	r0, #13
   1f2a0:	d80b      	bhi.n	1f2ba <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1f2a2:	2805      	cmp	r0, #5
   1f2a4:	bf08      	it	eq
   1f2a6:	2003      	moveq	r0, #3
   1f2a8:	bf18      	it	ne
   1f2aa:	2002      	movne	r0, #2
   1f2ac:	4770      	bx	lr
	switch (evt) {
   1f2ae:	2813      	cmp	r0, #19
   1f2b0:	d003      	beq.n	1f2ba <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1f2b2:	281a      	cmp	r0, #26
   1f2b4:	bf08      	it	eq
   1f2b6:	2001      	moveq	r0, #1
   1f2b8:	e7f6      	b.n	1f2a8 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1f2ba:	2001      	movs	r0, #1
	}
}
   1f2bc:	4770      	bx	lr

0001f2be <hci_vendor_event>:
}
   1f2be:	4770      	bx	lr

0001f2c0 <bt_addr_le_copy>:
   1f2c0:	2207      	movs	r2, #7
   1f2c2:	f7ff bf6a 	b.w	1f19a <memcpy>

0001f2c6 <atomic_or>:
{
   1f2c6:	b510      	push	{r4, lr}
   1f2c8:	4603      	mov	r3, r0
}
   1f2ca:	f3bf 8f5b 	dmb	ish
   1f2ce:	e853 0f00 	ldrex	r0, [r3]
   1f2d2:	ea40 0201 	orr.w	r2, r0, r1
   1f2d6:	e843 2400 	strex	r4, r2, [r3]
   1f2da:	2c00      	cmp	r4, #0
   1f2dc:	d1f7      	bne.n	1f2ce <atomic_or+0x8>
   1f2de:	f3bf 8f5b 	dmb	ish
   1f2e2:	bd10      	pop	{r4, pc}

0001f2e4 <z_log_msg_static_create.constprop.0>:
   1f2e4:	2300      	movs	r3, #0
   1f2e6:	f7f3 b9b1 	b.w	1264c <z_impl_z_log_msg_static_create>

0001f2ea <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f2ea:	f3bf 8f5b 	dmb	ish
   1f2ee:	e850 3f00 	ldrex	r3, [r0]
   1f2f2:	400b      	ands	r3, r1
   1f2f4:	e840 3200 	strex	r2, r3, [r0]
   1f2f8:	2a00      	cmp	r2, #0
   1f2fa:	d1f8      	bne.n	1f2ee <atomic_and.isra.0+0x4>
   1f2fc:	f3bf 8f5b 	dmb	ish
}
   1f300:	4770      	bx	lr

0001f302 <bt_hci_disconnect>:
{
   1f302:	b570      	push	{r4, r5, r6, lr}
   1f304:	4606      	mov	r6, r0
   1f306:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1f308:	f240 4006 	movw	r0, #1030	; 0x406
   1f30c:	2103      	movs	r1, #3
   1f30e:	f7f5 fb5b 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   1f312:	4604      	mov	r4, r0
   1f314:	b168      	cbz	r0, 1f332 <bt_hci_disconnect+0x30>
   1f316:	2103      	movs	r1, #3
   1f318:	300c      	adds	r0, #12
   1f31a:	f001 fb09 	bl	20930 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1f31e:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1f320:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1f322:	4621      	mov	r1, r4
   1f324:	2200      	movs	r2, #0
}
   1f326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1f32a:	f240 4006 	movw	r0, #1030	; 0x406
   1f32e:	f7f5 bb85 	b.w	14a3c <bt_hci_cmd_send_sync>
}
   1f332:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f336:	bd70      	pop	{r4, r5, r6, pc}

0001f338 <bt_le_set_data_len>:
{
   1f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f33a:	4607      	mov	r7, r0
   1f33c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1f33e:	f242 0022 	movw	r0, #8226	; 0x2022
   1f342:	2106      	movs	r1, #6
{
   1f344:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1f346:	f7f5 fb3f 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   1f34a:	4604      	mov	r4, r0
   1f34c:	b178      	cbz	r0, 1f36e <bt_le_set_data_len+0x36>
   1f34e:	2106      	movs	r1, #6
   1f350:	300c      	adds	r0, #12
   1f352:	f001 faed 	bl	20930 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f356:	883b      	ldrh	r3, [r7, #0]
   1f358:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1f35a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1f35c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1f35e:	4621      	mov	r1, r4
   1f360:	2200      	movs	r2, #0
}
   1f362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1f366:	f242 0022 	movw	r0, #8226	; 0x2022
   1f36a:	f7f5 bb67 	b.w	14a3c <bt_hci_cmd_send_sync>
}
   1f36e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f374 <bt_le_set_phy>:
{
   1f374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f378:	4681      	mov	r9, r0
   1f37a:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1f37c:	f242 0032 	movw	r0, #8242	; 0x2032
   1f380:	2107      	movs	r1, #7
{
   1f382:	f89d a020 	ldrb.w	sl, [sp, #32]
   1f386:	4617      	mov	r7, r2
   1f388:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1f38a:	f7f5 fb1d 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   1f38e:	4605      	mov	r5, r0
   1f390:	b1a0      	cbz	r0, 1f3bc <bt_le_set_phy+0x48>
   1f392:	2107      	movs	r1, #7
   1f394:	300c      	adds	r0, #12
   1f396:	f001 facb 	bl	20930 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f39a:	f8b9 3000 	ldrh.w	r3, [r9]
   1f39e:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   1f3a0:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1f3a4:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1f3a6:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1f3a8:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1f3ac:	4629      	mov	r1, r5
   1f3ae:	2200      	movs	r2, #0
}
   1f3b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1f3b4:	f242 0032 	movw	r0, #8242	; 0x2032
   1f3b8:	f7f5 bb40 	b.w	14a3c <bt_hci_cmd_send_sync>
}
   1f3bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f3c4 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1f3c4:	68c0      	ldr	r0, [r0, #12]
   1f3c6:	f7f5 bc09 	b.w	14bdc <bt_hci_le_enh_conn_complete>

0001f3ca <bt_le_conn_params_valid>:
{
   1f3ca:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1f3cc:	8803      	ldrh	r3, [r0, #0]
   1f3ce:	8842      	ldrh	r2, [r0, #2]
   1f3d0:	4293      	cmp	r3, r2
   1f3d2:	d819      	bhi.n	1f408 <bt_le_conn_params_valid+0x3e>
   1f3d4:	2b05      	cmp	r3, #5
   1f3d6:	d917      	bls.n	1f408 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1f3d8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1f3dc:	d814      	bhi.n	1f408 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1f3de:	8883      	ldrh	r3, [r0, #4]
   1f3e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1f3e4:	d210      	bcs.n	1f408 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1f3e6:	88c0      	ldrh	r0, [r0, #6]
   1f3e8:	f1a0 010a 	sub.w	r1, r0, #10
   1f3ec:	b289      	uxth	r1, r1
   1f3ee:	f640 4476 	movw	r4, #3190	; 0xc76
   1f3f2:	42a1      	cmp	r1, r4
   1f3f4:	d808      	bhi.n	1f408 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1f3f6:	3301      	adds	r3, #1
   1f3f8:	b29b      	uxth	r3, r3
   1f3fa:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1f3fc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1f400:	bf34      	ite	cc
   1f402:	2001      	movcc	r0, #1
   1f404:	2000      	movcs	r0, #0
}
   1f406:	bd10      	pop	{r4, pc}
		return false;
   1f408:	2000      	movs	r0, #0
   1f40a:	e7fc      	b.n	1f406 <bt_le_conn_params_valid+0x3c>

0001f40c <le_conn_param_neg_reply>:
{
   1f40c:	b570      	push	{r4, r5, r6, lr}
   1f40e:	4606      	mov	r6, r0
   1f410:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1f412:	f242 0021 	movw	r0, #8225	; 0x2021
   1f416:	2103      	movs	r1, #3
   1f418:	f7f5 fad6 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   1f41c:	4604      	mov	r4, r0
   1f41e:	b918      	cbnz	r0, 1f428 <le_conn_param_neg_reply+0x1c>
}
   1f420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f424:	f7f4 bee0 	b.w	141e8 <le_conn_param_neg_reply.part.0>
   1f428:	2103      	movs	r1, #3
   1f42a:	300c      	adds	r0, #12
   1f42c:	f001 fa80 	bl	20930 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1f430:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1f432:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1f434:	4621      	mov	r1, r4
   1f436:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1f43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1f43e:	f7f5 bd7f 	b.w	14f40 <bt_hci_cmd_send>

0001f442 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1f442:	f240 5052 	movw	r0, #1362	; 0x552
   1f446:	4770      	bx	lr

0001f448 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1f448:	2000      	movs	r0, #0
   1f44a:	4770      	bx	lr

0001f44c <bt_addr_le_eq>:
{
   1f44c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1f44e:	2207      	movs	r2, #7
   1f450:	f7ff fe93 	bl	1f17a <memcmp>
}
   1f454:	fab0 f080 	clz	r0, r0
   1f458:	0940      	lsrs	r0, r0, #5
   1f45a:	bd08      	pop	{r3, pc}

0001f45c <z_log_msg_static_create.constprop.0>:
   1f45c:	2300      	movs	r3, #0
   1f45e:	f7f3 b8f5 	b.w	1264c <z_impl_z_log_msg_static_create>

0001f462 <bt_lookup_id_addr>:
	return addr;
   1f462:	2800      	cmp	r0, #0
}
   1f464:	bf0c      	ite	eq
   1f466:	4608      	moveq	r0, r1
   1f468:	2000      	movne	r0, #0
   1f46a:	4770      	bx	lr

0001f46c <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1f46c:	b118      	cbz	r0, 1f476 <bt_id_set_adv_random_addr+0xa>
   1f46e:	b111      	cbz	r1, 1f476 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1f470:	4608      	mov	r0, r1
   1f472:	f7f6 ba6b 	b.w	1594c <set_random_address>
}
   1f476:	f06f 0015 	mvn.w	r0, #21
   1f47a:	4770      	bx	lr

0001f47c <bt_id_set_adv_private_addr>:
{
   1f47c:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1f47e:	4604      	mov	r4, r0
   1f480:	b180      	cbz	r0, 1f4a4 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1f482:	2106      	movs	r1, #6
   1f484:	4668      	mov	r0, sp
   1f486:	f7fb fcc7 	bl	1ae18 <bt_rand>
	if (err) {
   1f48a:	b948      	cbnz	r0, 1f4a0 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1f48c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1f490:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1f492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1f496:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1f498:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1f49c:	f7ff ffe6 	bl	1f46c <bt_id_set_adv_random_addr>
}
   1f4a0:	b002      	add	sp, #8
   1f4a2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1f4a4:	f06f 0015 	mvn.w	r0, #21
   1f4a8:	e7fa      	b.n	1f4a0 <bt_id_set_adv_private_addr+0x24>

0001f4aa <bt_id_adv_random_addr_check>:
}
   1f4aa:	3800      	subs	r0, #0
   1f4ac:	bf18      	it	ne
   1f4ae:	2001      	movne	r0, #1
   1f4b0:	4770      	bx	lr

0001f4b2 <get_adv_channel_map>:
{
   1f4b2:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1f4b4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1f4b8:	bf0c      	ite	eq
   1f4ba:	2007      	moveq	r0, #7
   1f4bc:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1f4be:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1f4c0:	bf48      	it	mi
   1f4c2:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1f4c6:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1f4c8:	bf48      	it	mi
   1f4ca:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1f4ce:	4770      	bx	lr

0001f4d0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f4d0:	f3bf 8f5b 	dmb	ish
   1f4d4:	6800      	ldr	r0, [r0, #0]
   1f4d6:	f3bf 8f5b 	dmb	ish
}
   1f4da:	4770      	bx	lr

0001f4dc <atomic_and>:
{
   1f4dc:	b510      	push	{r4, lr}
   1f4de:	4603      	mov	r3, r0
}
   1f4e0:	f3bf 8f5b 	dmb	ish
   1f4e4:	e853 0f00 	ldrex	r0, [r3]
   1f4e8:	ea00 0201 	and.w	r2, r0, r1
   1f4ec:	e843 2400 	strex	r4, r2, [r3]
   1f4f0:	2c00      	cmp	r4, #0
   1f4f2:	d1f7      	bne.n	1f4e4 <atomic_and+0x8>
   1f4f4:	f3bf 8f5b 	dmb	ish
   1f4f8:	bd10      	pop	{r4, pc}

0001f4fa <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f4fa:	2301      	movs	r3, #1
{
   1f4fc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f4fe:	fa03 f101 	lsl.w	r1, r3, r1
{
   1f502:	4604      	mov	r4, r0
	if (val) {
   1f504:	b16a      	cbz	r2, 1f522 <atomic_set_bit_to+0x28>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f506:	f3bf 8f5b 	dmb	ish
   1f50a:	e854 3f00 	ldrex	r3, [r4]
   1f50e:	430b      	orrs	r3, r1
   1f510:	e844 3200 	strex	r2, r3, [r4]
   1f514:	2a00      	cmp	r2, #0
   1f516:	d1f8      	bne.n	1f50a <atomic_set_bit_to+0x10>
   1f518:	f3bf 8f5b 	dmb	ish
	}
}
   1f51c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f520:	4770      	bx	lr
   1f522:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f526:	43c9      	mvns	r1, r1
   1f528:	f7ff bfd8 	b.w	1f4dc <atomic_and>

0001f52c <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f530:	b087      	sub	sp, #28
   1f532:	4605      	mov	r5, r0
   1f534:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1f538:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1f53c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1f540:	460c      	mov	r4, r1
   1f542:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1f544:	2100      	movs	r1, #0
   1f546:	2210      	movs	r2, #16
   1f548:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1f54a:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1f54c:	f7ff fe30 	bl	1f1b0 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1f550:	b9ee      	cbnz	r6, 1f58e <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   1f552:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1f556:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1f558:	a902      	add	r1, sp, #8
   1f55a:	f242 0008 	movw	r0, #8200	; 0x2008
   1f55e:	f7f6 fc07 	bl	15d70 <hci_set_ad>
		if (err) {
   1f562:	4604      	mov	r4, r0
   1f564:	b978      	cbnz	r0, 1f586 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   1f566:	f1ba 0f00 	cmp.w	sl, #0
   1f56a:	d13e      	bne.n	1f5ea <le_adv_update.constprop.0+0xbe>
   1f56c:	3510      	adds	r5, #16
   1f56e:	f3bf 8f5b 	dmb	ish
   1f572:	e855 3f00 	ldrex	r3, [r5]
   1f576:	f043 0304 	orr.w	r3, r3, #4
   1f57a:	e845 3200 	strex	r2, r3, [r5]
   1f57e:	2a00      	cmp	r2, #0
   1f580:	d1f7      	bne.n	1f572 <le_adv_update.constprop.0+0x46>
   1f582:	f3bf 8f5b 	dmb	ish
}
   1f586:	4620      	mov	r0, r4
   1f588:	b007      	add	sp, #28
   1f58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1f58e:	f7f6 f9c1 	bl	15914 <bt_get_name>
   1f592:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1f594:	b9e4      	cbnz	r4, 1f5d0 <le_adv_update.constprop.0+0xa4>
   1f596:	bb37      	cbnz	r7, 1f5e6 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1f598:	4658      	mov	r0, fp
   1f59a:	f7ff fdd2 	bl	1f142 <strlen>
   1f59e:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1f5a0:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1f5a2:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1f5a6:	f88d 3000 	strb.w	r3, [sp]
   1f5aa:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1f5ae:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1f5b2:	d1d0      	bne.n	1f556 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   1f5b4:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1f5b8:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1f5ba:	2202      	movs	r2, #2
   1f5bc:	e7cc      	b.n	1f558 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1f5be:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1f5c2:	3a08      	subs	r2, #8
   1f5c4:	2a01      	cmp	r2, #1
   1f5c6:	d925      	bls.n	1f614 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1f5c8:	3301      	adds	r3, #1
   1f5ca:	4598      	cmp	r8, r3
   1f5cc:	d1f7      	bne.n	1f5be <le_adv_update.constprop.0+0x92>
   1f5ce:	e7e2      	b.n	1f596 <le_adv_update.constprop.0+0x6a>
   1f5d0:	2300      	movs	r3, #0
   1f5d2:	e7fa      	b.n	1f5ca <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1f5d4:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1f5d8:	3a08      	subs	r2, #8
   1f5da:	2a01      	cmp	r2, #1
   1f5dc:	d91a      	bls.n	1f614 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1f5de:	3301      	adds	r3, #1
   1f5e0:	4599      	cmp	r9, r3
   1f5e2:	d1f7      	bne.n	1f5d4 <le_adv_update.constprop.0+0xa8>
   1f5e4:	e7d8      	b.n	1f598 <le_adv_update.constprop.0+0x6c>
   1f5e6:	2300      	movs	r3, #0
   1f5e8:	e7fa      	b.n	1f5e0 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1f5ea:	2e02      	cmp	r6, #2
   1f5ec:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1f5f0:	bf08      	it	eq
   1f5f2:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1f5f4:	a902      	add	r1, sp, #8
			d_len = 2;
   1f5f6:	bf08      	it	eq
   1f5f8:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1f5fa:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1f5fe:	bf08      	it	eq
   1f600:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1f604:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1f608:	f7f6 fbb2 	bl	15d70 <hci_set_ad>
		if (err) {
   1f60c:	2800      	cmp	r0, #0
   1f60e:	d0ad      	beq.n	1f56c <le_adv_update.constprop.0+0x40>
   1f610:	4604      	mov	r4, r0
   1f612:	e7b8      	b.n	1f586 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   1f614:	f06f 0415 	mvn.w	r4, #21
   1f618:	e7b5      	b.n	1f586 <le_adv_update.constprop.0+0x5a>

0001f61a <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1f61a:	6843      	ldr	r3, [r0, #4]
   1f61c:	f013 0008 	ands.w	r0, r3, #8
   1f620:	d00a      	beq.n	1f638 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1f622:	035a      	lsls	r2, r3, #13
   1f624:	d407      	bmi.n	1f636 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1f626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1f62a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1f62e:	bf14      	ite	ne
   1f630:	2002      	movne	r0, #2
   1f632:	2001      	moveq	r0, #1
   1f634:	4770      	bx	lr
   1f636:	2001      	movs	r0, #1
}
   1f638:	4770      	bx	lr

0001f63a <bt_le_adv_set_enable_legacy>:
{
   1f63a:	b570      	push	{r4, r5, r6, lr}
   1f63c:	4606      	mov	r6, r0
   1f63e:	b086      	sub	sp, #24
   1f640:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1f642:	f242 000a 	movw	r0, #8202	; 0x200a
   1f646:	2101      	movs	r1, #1
   1f648:	f7f5 f9be 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   1f64c:	4604      	mov	r4, r0
   1f64e:	b1b0      	cbz	r0, 1f67e <__kernel_ram_size+0x16>
	return net_buf_simple_add_u8(&buf->b, val);
   1f650:	300c      	adds	r0, #12
	if (enable) {
   1f652:	b195      	cbz	r5, 1f67a <__kernel_ram_size+0x12>
   1f654:	2101      	movs	r1, #1
   1f656:	f001 f97a 	bl	2094e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1f65a:	f106 0210 	add.w	r2, r6, #16
   1f65e:	a903      	add	r1, sp, #12
   1f660:	4620      	mov	r0, r4
   1f662:	9500      	str	r5, [sp, #0]
   1f664:	2307      	movs	r3, #7
   1f666:	f7f5 f99d 	bl	149a4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1f66a:	2200      	movs	r2, #0
   1f66c:	4621      	mov	r1, r4
   1f66e:	f242 000a 	movw	r0, #8202	; 0x200a
   1f672:	f7f5 f9e3 	bl	14a3c <bt_hci_cmd_send_sync>
}
   1f676:	b006      	add	sp, #24
   1f678:	bd70      	pop	{r4, r5, r6, pc}
   1f67a:	4629      	mov	r1, r5
   1f67c:	e7eb      	b.n	1f656 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1f67e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f682:	e7f8      	b.n	1f676 <__kernel_ram_size+0xe>

0001f684 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1f684:	3018      	adds	r0, #24
   1f686:	f001 bef0 	b.w	2146a <k_work_cancel_delayable>

0001f68a <z_log_msg_static_create.constprop.0>:
   1f68a:	2300      	movs	r3, #0
   1f68c:	f7f2 bfde 	b.w	1264c <z_impl_z_log_msg_static_create>

0001f690 <tx_complete_work>:
	tx_notify(conn);
   1f690:	3828      	subs	r0, #40	; 0x28
   1f692:	f7f6 be95 	b.w	163c0 <tx_notify>

0001f696 <bt_conn_reset_rx_state>:
{
   1f696:	b510      	push	{r4, lr}
   1f698:	4604      	mov	r4, r0
	if (!conn->rx) {
   1f69a:	6900      	ldr	r0, [r0, #16]
   1f69c:	b118      	cbz	r0, 1f6a6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1f69e:	f7f9 fda9 	bl	191f4 <net_buf_unref>
	conn->rx = NULL;
   1f6a2:	2300      	movs	r3, #0
   1f6a4:	6123      	str	r3, [r4, #16]
}
   1f6a6:	bd10      	pop	{r4, pc}

0001f6a8 <conn_cleanup>:
{
   1f6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6ac:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1f6ae:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1f6b0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1f6b4:	2300      	movs	r3, #0
   1f6b6:	2200      	movs	r2, #0
   1f6b8:	4630      	mov	r0, r6
   1f6ba:	f001 f8de 	bl	2087a <net_buf_get>
   1f6be:	4603      	mov	r3, r0
   1f6c0:	b950      	cbnz	r0, 1f6d8 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1f6c2:	4620      	mov	r0, r4
   1f6c4:	f7ff ffe7 	bl	1f696 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1f6c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1f6cc:	2200      	movs	r2, #0
}
   1f6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1f6d2:	2300      	movs	r3, #0
   1f6d4:	f7fd babe 	b.w	1cc54 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1f6d8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   1f6da:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   1f6dc:	f7f9 fd8a 	bl	191f4 <net_buf_unref>
		if (tx) {
   1f6e0:	2d00      	cmp	r5, #0
   1f6e2:	d0e7      	beq.n	1f6b4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1f6e4:	4629      	mov	r1, r5
   1f6e6:	4620      	mov	r0, r4
   1f6e8:	f7f6 fe9a 	bl	16420 <conn_tx_destroy>
   1f6ec:	e7e0      	b.n	1f6b0 <conn_cleanup+0x8>

0001f6ee <bt_conn_ref>:
{
   1f6ee:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f6f0:	f3bf 8f5b 	dmb	ish
   1f6f4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1f6f8:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   1f6fc:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   1f700:	b17b      	cbz	r3, 1f722 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f702:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1f706:	1c59      	adds	r1, r3, #1
   1f708:	e852 4f00 	ldrex	r4, [r2]
   1f70c:	429c      	cmp	r4, r3
   1f70e:	d104      	bne.n	1f71a <bt_conn_ref+0x2c>
   1f710:	e842 1c00 	strex	ip, r1, [r2]
   1f714:	f1bc 0f00 	cmp.w	ip, #0
   1f718:	d1f6      	bne.n	1f708 <bt_conn_ref+0x1a>
   1f71a:	f3bf 8f5b 	dmb	ish
   1f71e:	d1e7      	bne.n	1f6f0 <bt_conn_ref+0x2>
}
   1f720:	bd10      	pop	{r4, pc}
			return NULL;
   1f722:	4618      	mov	r0, r3
   1f724:	e7fc      	b.n	1f720 <bt_conn_ref+0x32>

0001f726 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1f726:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f72a:	f3bf 8f5b 	dmb	ish
   1f72e:	e853 1f00 	ldrex	r1, [r3]
   1f732:	3901      	subs	r1, #1
   1f734:	e843 1200 	strex	r2, r1, [r3]
   1f738:	2a00      	cmp	r2, #0
   1f73a:	d1f8      	bne.n	1f72e <bt_conn_unref+0x8>
   1f73c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1f740:	8842      	ldrh	r2, [r0, #2]
   1f742:	f240 1301 	movw	r3, #257	; 0x101
   1f746:	429a      	cmp	r2, r3
   1f748:	d108      	bne.n	1f75c <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f74a:	f3bf 8f5b 	dmb	ish
   1f74e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1f752:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1f756:	b90b      	cbnz	r3, 1f75c <bt_conn_unref+0x36>
		bt_le_adv_resume();
   1f758:	f7f6 bdbc 	b.w	162d4 <bt_le_adv_resume>
}
   1f75c:	4770      	bx	lr

0001f75e <conn_lookup_handle>:
{
   1f75e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f762:	4607      	mov	r7, r0
   1f764:	460e      	mov	r6, r1
   1f766:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1f768:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1f76a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1f76e:	42b4      	cmp	r4, r6
   1f770:	d103      	bne.n	1f77a <conn_lookup_handle+0x1c>
	return NULL;
   1f772:	2300      	movs	r3, #0
}
   1f774:	4618      	mov	r0, r3
   1f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1f77a:	fb09 7004 	mla	r0, r9, r4, r7
   1f77e:	f7ff ffb6 	bl	1f6ee <bt_conn_ref>
   1f782:	4603      	mov	r3, r0
		if (!conn) {
   1f784:	b158      	cbz	r0, 1f79e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1f786:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1f788:	2d01      	cmp	r5, #1
   1f78a:	d002      	beq.n	1f792 <conn_lookup_handle+0x34>
   1f78c:	3d07      	subs	r5, #7
   1f78e:	2d01      	cmp	r5, #1
   1f790:	d803      	bhi.n	1f79a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1f792:	881a      	ldrh	r2, [r3, #0]
   1f794:	4542      	cmp	r2, r8
   1f796:	d0ed      	beq.n	1f774 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1f798:	4618      	mov	r0, r3
   1f79a:	f7ff ffc4 	bl	1f726 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1f79e:	3401      	adds	r4, #1
   1f7a0:	e7e5      	b.n	1f76e <conn_lookup_handle+0x10>

0001f7a2 <bt_conn_connected>:
{
   1f7a2:	b510      	push	{r4, lr}
   1f7a4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1f7a6:	f7f7 fc85 	bl	170b4 <bt_l2cap_connected>
	notify_connected(conn);
   1f7aa:	4620      	mov	r0, r4
}
   1f7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1f7b0:	f7f6 bdd4 	b.w	1635c <notify_connected>

0001f7b4 <bt_conn_get_security>:
}
   1f7b4:	2001      	movs	r0, #1
   1f7b6:	4770      	bx	lr

0001f7b8 <bt_conn_is_peer_addr_le>:
{
   1f7b8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1f7ba:	7a03      	ldrb	r3, [r0, #8]
   1f7bc:	428b      	cmp	r3, r1
{
   1f7be:	4604      	mov	r4, r0
   1f7c0:	4615      	mov	r5, r2
	if (id != conn->id) {
   1f7c2:	d115      	bne.n	1f7f0 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1f7c4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f7c8:	2207      	movs	r2, #7
   1f7ca:	4628      	mov	r0, r5
   1f7cc:	f7ff fcd5 	bl	1f17a <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1f7d0:	b180      	cbz	r0, 1f7f4 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1f7d2:	78e3      	ldrb	r3, [r4, #3]
   1f7d4:	2207      	movs	r2, #7
   1f7d6:	b943      	cbnz	r3, 1f7ea <bt_conn_is_peer_addr_le+0x32>
   1f7d8:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1f7dc:	4628      	mov	r0, r5
   1f7de:	f7ff fccc 	bl	1f17a <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1f7e2:	fab0 f080 	clz	r0, r0
   1f7e6:	0940      	lsrs	r0, r0, #5
}
   1f7e8:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1f7ea:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1f7ee:	e7f5      	b.n	1f7dc <bt_conn_is_peer_addr_le+0x24>
		return false;
   1f7f0:	2000      	movs	r0, #0
   1f7f2:	e7f9      	b.n	1f7e8 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1f7f4:	2001      	movs	r0, #1
   1f7f6:	e7f7      	b.n	1f7e8 <bt_conn_is_peer_addr_le+0x30>

0001f7f8 <bt_conn_le_conn_update>:
{
   1f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f7fa:	4607      	mov	r7, r0
   1f7fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1f7fe:	f242 0013 	movw	r0, #8211	; 0x2013
   1f802:	210e      	movs	r1, #14
   1f804:	f7f5 f8e0 	bl	149c8 <bt_hci_cmd_create>
	if (!buf) {
   1f808:	4606      	mov	r6, r0
   1f80a:	b1d0      	cbz	r0, 1f842 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1f80c:	210e      	movs	r1, #14
   1f80e:	300c      	adds	r0, #12
   1f810:	f001 f88e 	bl	20930 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1f814:	220e      	movs	r2, #14
   1f816:	4604      	mov	r4, r0
   1f818:	2100      	movs	r1, #0
   1f81a:	f7ff fcc9 	bl	1f1b0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1f81e:	883b      	ldrh	r3, [r7, #0]
   1f820:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1f822:	882b      	ldrh	r3, [r5, #0]
   1f824:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1f826:	886b      	ldrh	r3, [r5, #2]
   1f828:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1f82a:	88ab      	ldrh	r3, [r5, #4]
   1f82c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1f82e:	88eb      	ldrh	r3, [r5, #6]
   1f830:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1f832:	4631      	mov	r1, r6
   1f834:	2200      	movs	r2, #0
}
   1f836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1f83a:	f242 0013 	movw	r0, #8211	; 0x2013
   1f83e:	f7f5 b8fd 	b.w	14a3c <bt_hci_cmd_send_sync>
}
   1f842:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f848 <l2cap_connected>:
}
   1f848:	4770      	bx	lr

0001f84a <z_log_msg_static_create.constprop.0>:
   1f84a:	2300      	movs	r3, #0
   1f84c:	f7f2 befe 	b.w	1264c <z_impl_z_log_msg_static_create>

0001f850 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f852:	4605      	mov	r5, r0
   1f854:	460f      	mov	r7, r1
   1f856:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1f858:	2300      	movs	r3, #0
   1f85a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f85e:	2104      	movs	r1, #4
   1f860:	2000      	movs	r0, #0
   1f862:	f7f7 f92b 	bl	16abc <bt_conn_create_pdu_timeout>
	if (!buf) {
   1f866:	4604      	mov	r4, r0
   1f868:	b920      	cbnz	r0, 1f874 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1f86a:	4628      	mov	r0, r5
}
   1f86c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f870:	f7f7 bbe4 	b.w	1703c <l2cap_create_le_sig_pdu.part.0>
   1f874:	2104      	movs	r1, #4
   1f876:	300c      	adds	r0, #12
   1f878:	f001 f85a 	bl	20930 <net_buf_simple_add>
	hdr->code = code;
   1f87c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1f87e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1f880:	8046      	strh	r6, [r0, #2]
}
   1f882:	4620      	mov	r0, r4
   1f884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f886 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1f886:	4770      	bx	lr

0001f888 <bt_l2cap_chan_del>:
{
   1f888:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1f88a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1f88e:	4604      	mov	r4, r0
	if (!chan->conn) {
   1f890:	b123      	cbz	r3, 1f89c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1f892:	686b      	ldr	r3, [r5, #4]
   1f894:	b103      	cbz	r3, 1f898 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1f896:	4798      	blx	r3
	chan->conn = NULL;
   1f898:	2300      	movs	r3, #0
   1f89a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1f89c:	68e3      	ldr	r3, [r4, #12]
   1f89e:	b10b      	cbz	r3, 1f8a4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1f8a0:	4620      	mov	r0, r4
   1f8a2:	4798      	blx	r3
	if (ops->released) {
   1f8a4:	6a2b      	ldr	r3, [r5, #32]
   1f8a6:	b11b      	cbz	r3, 1f8b0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1f8a8:	4620      	mov	r0, r4
}
   1f8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1f8ae:	4718      	bx	r3
}
   1f8b0:	bd70      	pop	{r4, r5, r6, pc}

0001f8b2 <bt_l2cap_disconnected>:
{
   1f8b2:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1f8b4:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f8b6:	b130      	cbz	r0, 1f8c6 <bt_l2cap_disconnected+0x14>
	return node->next;
   1f8b8:	f850 4908 	ldr.w	r4, [r0], #-8
   1f8bc:	b104      	cbz	r4, 1f8c0 <bt_l2cap_disconnected+0xe>
   1f8be:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1f8c0:	f7ff ffe2 	bl	1f888 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f8c4:	b904      	cbnz	r4, 1f8c8 <bt_l2cap_disconnected+0x16>
}
   1f8c6:	bd38      	pop	{r3, r4, r5, pc}
   1f8c8:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f8ca:	b12d      	cbz	r5, 1f8d8 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1f8cc:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f8ce:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1f8d0:	f7ff ffda 	bl	1f888 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f8d4:	462c      	mov	r4, r5
   1f8d6:	e7f7      	b.n	1f8c8 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1f8d8:	4620      	mov	r0, r4
}
   1f8da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1f8de:	f7ff bfd3 	b.w	1f888 <bt_l2cap_chan_del>

0001f8e2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1f8e2:	3104      	adds	r1, #4
   1f8e4:	f7f7 b8ea 	b.w	16abc <bt_conn_create_pdu_timeout>

0001f8e8 <bt_l2cap_send_cb>:
{
   1f8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8ec:	4614      	mov	r4, r2
   1f8ee:	4605      	mov	r5, r0
   1f8f0:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1f8f2:	f102 000c 	add.w	r0, r2, #12
   1f8f6:	2104      	movs	r1, #4
   1f8f8:	461e      	mov	r6, r3
   1f8fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1f8fe:	f001 f82e 	bl	2095e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f902:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   1f904:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f906:	3a04      	subs	r2, #4
   1f908:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f90a:	4643      	mov	r3, r8
   1f90c:	4632      	mov	r2, r6
   1f90e:	4621      	mov	r1, r4
   1f910:	4628      	mov	r0, r5
}
   1f912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f916:	f7f6 bf1d 	b.w	16754 <bt_conn_send_cb>

0001f91a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1f91a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f91c:	b130      	cbz	r0, 1f92c <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1f91e:	8983      	ldrh	r3, [r0, #12]
   1f920:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f922:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1f926:	d001      	beq.n	1f92c <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   1f928:	6880      	ldr	r0, [r0, #8]
   1f92a:	e7f7      	b.n	1f91c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1f92c:	4770      	bx	lr

0001f92e <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1f92e:	4770      	bx	lr

0001f930 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1f930:	4603      	mov	r3, r0
	return list->head;
   1f932:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1f934:	b128      	cbz	r0, 1f942 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f936:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1f938:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f93a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f93c:	4288      	cmp	r0, r1
	list->tail = node;
   1f93e:	bf08      	it	eq
   1f940:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1f942:	4770      	bx	lr

0001f944 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1f944:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f946:	2000      	movs	r0, #0

	while (buf) {
   1f948:	b903      	cbnz	r3, 1f94c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1f94a:	4770      	bx	lr
		bytes += buf->len;
   1f94c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   1f94e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   1f950:	4410      	add	r0, r2
		buf = buf->frags;
   1f952:	e7f9      	b.n	1f948 <net_buf_frags_len+0x4>

0001f954 <attr_read_type_cb>:
{
   1f954:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1f956:	68d4      	ldr	r4, [r2, #12]
   1f958:	7823      	ldrb	r3, [r4, #0]
   1f95a:	3102      	adds	r1, #2
   1f95c:	b913      	cbnz	r3, 1f964 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1f95e:	7021      	strb	r1, [r4, #0]
	return true;
   1f960:	2001      	movs	r0, #1
}
   1f962:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1f964:	428b      	cmp	r3, r1
   1f966:	d0fb      	beq.n	1f960 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1f968:	8a03      	ldrh	r3, [r0, #16]
   1f96a:	3b02      	subs	r3, #2
   1f96c:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   1f96e:	2000      	movs	r0, #0
   1f970:	6110      	str	r0, [r2, #16]
		return false;
   1f972:	e7f6      	b.n	1f962 <attr_read_type_cb+0xe>

0001f974 <att_prepare_write_req>:
}
   1f974:	2006      	movs	r0, #6
   1f976:	4770      	bx	lr

0001f978 <atomic_test_bit>:
   1f978:	f3bf 8f5b 	dmb	ish
   1f97c:	6800      	ldr	r0, [r0, #0]
   1f97e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f982:	4108      	asrs	r0, r1
}
   1f984:	f000 0001 	and.w	r0, r0, #1
   1f988:	4770      	bx	lr

0001f98a <write_cb>:
{
   1f98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f98c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f98e:	4601      	mov	r1, r0
{
   1f990:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f992:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1f996:	6820      	ldr	r0, [r4, #0]
   1f998:	f000 fe4a 	bl	20630 <bt_gatt_check_perm>
   1f99c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f99e:	bb00      	cbnz	r0, 1f9e2 <write_cb+0x58>
	if (!data->req) {
   1f9a0:	7a23      	ldrb	r3, [r4, #8]
   1f9a2:	b1b3      	cbz	r3, 1f9d2 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1f9a4:	f1a3 0218 	sub.w	r2, r3, #24
   1f9a8:	4253      	negs	r3, r2
   1f9aa:	4153      	adcs	r3, r2
   1f9ac:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1f9ae:	9301      	str	r3, [sp, #4]
   1f9b0:	8a63      	ldrh	r3, [r4, #18]
   1f9b2:	9300      	str	r3, [sp, #0]
   1f9b4:	68ae      	ldr	r6, [r5, #8]
   1f9b6:	8a23      	ldrh	r3, [r4, #16]
   1f9b8:	68e2      	ldr	r2, [r4, #12]
   1f9ba:	6820      	ldr	r0, [r4, #0]
   1f9bc:	4629      	mov	r1, r5
   1f9be:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1f9c0:	2800      	cmp	r0, #0
   1f9c2:	db08      	blt.n	1f9d6 <write_cb+0x4c>
   1f9c4:	8a23      	ldrh	r3, [r4, #16]
   1f9c6:	4298      	cmp	r0, r3
   1f9c8:	d10e      	bne.n	1f9e8 <write_cb+0x5e>
	data->err = 0U;
   1f9ca:	2300      	movs	r3, #0
   1f9cc:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f9ce:	2001      	movs	r0, #1
   1f9d0:	e008      	b.n	1f9e4 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f9d2:	2302      	movs	r3, #2
   1f9d4:	e7eb      	b.n	1f9ae <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1f9d6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1f9da:	d305      	bcc.n	1f9e8 <write_cb+0x5e>
		return -err;
   1f9dc:	4240      	negs	r0, r0
   1f9de:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1f9e0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1f9e2:	2000      	movs	r0, #0
}
   1f9e4:	b002      	add	sp, #8
   1f9e6:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f9e8:	200e      	movs	r0, #14
   1f9ea:	e7f9      	b.n	1f9e0 <write_cb+0x56>

0001f9ec <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1f9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f9ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f9f2:	2300      	movs	r3, #0
   1f9f4:	9300      	str	r3, [sp, #0]
   1f9f6:	461a      	mov	r2, r3
   1f9f8:	f7f8 ff36 	bl	18868 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1f9fc:	b005      	add	sp, #20
   1f9fe:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa02 <find_info_cb>:
{
   1fa02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1fa04:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1fa06:	6817      	ldr	r7, [r2, #0]
{
   1fa08:	4605      	mov	r5, r0
   1fa0a:	460e      	mov	r6, r1
   1fa0c:	4614      	mov	r4, r2
	if (!data->rsp) {
   1fa0e:	b963      	cbnz	r3, 1fa2a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1fa10:	6850      	ldr	r0, [r2, #4]
   1fa12:	2101      	movs	r1, #1
   1fa14:	300c      	adds	r0, #12
   1fa16:	f000 ff8b 	bl	20930 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fa1a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1fa1c:	682b      	ldr	r3, [r5, #0]
   1fa1e:	781b      	ldrb	r3, [r3, #0]
   1fa20:	2b00      	cmp	r3, #0
   1fa22:	bf14      	ite	ne
   1fa24:	2302      	movne	r3, #2
   1fa26:	2301      	moveq	r3, #1
   1fa28:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1fa2a:	68a3      	ldr	r3, [r4, #8]
   1fa2c:	781b      	ldrb	r3, [r3, #0]
   1fa2e:	2b01      	cmp	r3, #1
   1fa30:	d003      	beq.n	1fa3a <find_info_cb+0x38>
   1fa32:	2b02      	cmp	r3, #2
   1fa34:	d019      	beq.n	1fa6a <find_info_cb+0x68>
   1fa36:	2000      	movs	r0, #0
   1fa38:	e016      	b.n	1fa68 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1fa3a:	682b      	ldr	r3, [r5, #0]
   1fa3c:	781b      	ldrb	r3, [r3, #0]
   1fa3e:	2b00      	cmp	r3, #0
   1fa40:	d1f9      	bne.n	1fa36 <find_info_cb+0x34>
   1fa42:	6860      	ldr	r0, [r4, #4]
   1fa44:	2104      	movs	r1, #4
   1fa46:	300c      	adds	r0, #12
   1fa48:	f000 ff72 	bl	20930 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1fa4c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1fa4e:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1fa50:	682a      	ldr	r2, [r5, #0]
   1fa52:	68e3      	ldr	r3, [r4, #12]
   1fa54:	8852      	ldrh	r2, [r2, #2]
   1fa56:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1fa58:	6863      	ldr	r3, [r4, #4]
   1fa5a:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1fa5c:	8a1b      	ldrh	r3, [r3, #16]
   1fa5e:	1ac0      	subs	r0, r0, r3
   1fa60:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1fa62:	bf94      	ite	ls
   1fa64:	2000      	movls	r0, #0
   1fa66:	2001      	movhi	r0, #1
}
   1fa68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1fa6a:	682b      	ldr	r3, [r5, #0]
   1fa6c:	781b      	ldrb	r3, [r3, #0]
   1fa6e:	2b02      	cmp	r3, #2
   1fa70:	d1e1      	bne.n	1fa36 <find_info_cb+0x34>
   1fa72:	6860      	ldr	r0, [r4, #4]
   1fa74:	2112      	movs	r1, #18
   1fa76:	300c      	adds	r0, #12
   1fa78:	f000 ff5a 	bl	20930 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1fa7c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1fa7e:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1fa80:	6829      	ldr	r1, [r5, #0]
   1fa82:	68e0      	ldr	r0, [r4, #12]
   1fa84:	2210      	movs	r2, #16
   1fa86:	3101      	adds	r1, #1
   1fa88:	3002      	adds	r0, #2
   1fa8a:	f7ff fb86 	bl	1f19a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1fa8e:	6863      	ldr	r3, [r4, #4]
   1fa90:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1fa92:	8a1b      	ldrh	r3, [r3, #16]
   1fa94:	1ac0      	subs	r0, r0, r3
   1fa96:	2812      	cmp	r0, #18
   1fa98:	e7e3      	b.n	1fa62 <find_info_cb+0x60>

0001fa9a <att_chan_mtu_updated>:
{
   1fa9a:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1fa9c:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1fa9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1faa0:	b352      	cbz	r2, 1faf8 <att_chan_mtu_updated+0x5e>
	return node->next;
   1faa2:	6813      	ldr	r3, [r2, #0]
   1faa4:	b103      	cbz	r3, 1faa8 <att_chan_mtu_updated+0xe>
   1faa6:	3be0      	subs	r3, #224	; 0xe0
   1faa8:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   1faac:	2200      	movs	r2, #0
   1faae:	4611      	mov	r1, r2
   1fab0:	e000      	b.n	1fab4 <att_chan_mtu_updated+0x1a>
   1fab2:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   1fab4:	4284      	cmp	r4, r0
   1fab6:	d007      	beq.n	1fac8 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1fab8:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1faba:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1fabc:	42b1      	cmp	r1, r6
   1fabe:	bf38      	it	cc
   1fac0:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1fac2:	42a2      	cmp	r2, r4
   1fac4:	bf38      	it	cc
   1fac6:	4622      	movcc	r2, r4
   1fac8:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1faca:	b12b      	cbz	r3, 1fad8 <att_chan_mtu_updated+0x3e>
   1facc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1fad0:	2b00      	cmp	r3, #0
   1fad2:	d1ee      	bne.n	1fab2 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1fad4:	4284      	cmp	r4, r0
   1fad6:	d1ef      	bne.n	1fab8 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1fad8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1fada:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1fadc:	428b      	cmp	r3, r1
   1fade:	d801      	bhi.n	1fae4 <att_chan_mtu_updated+0x4a>
   1fae0:	4290      	cmp	r0, r2
   1fae2:	d90b      	bls.n	1fafc <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1fae4:	4282      	cmp	r2, r0
   1fae6:	bf38      	it	cc
   1fae8:	4602      	movcc	r2, r0
   1faea:	4299      	cmp	r1, r3
   1faec:	6828      	ldr	r0, [r5, #0]
   1faee:	bf38      	it	cc
   1faf0:	4619      	movcc	r1, r3
}
   1faf2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1faf4:	f7f9 ba5e 	b.w	18fb4 <bt_gatt_att_max_mtu_changed>
   1faf8:	4611      	mov	r1, r2
   1fafa:	e7ed      	b.n	1fad8 <att_chan_mtu_updated+0x3e>
}
   1fafc:	bc70      	pop	{r4, r5, r6}
   1fafe:	4770      	bx	lr

0001fb00 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1fb00:	68d0      	ldr	r0, [r2, #12]
   1fb02:	7803      	ldrb	r3, [r0, #0]
   1fb04:	3104      	adds	r1, #4
   1fb06:	b913      	cbnz	r3, 1fb0e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1fb08:	7001      	strb	r1, [r0, #0]
	return true;
   1fb0a:	2001      	movs	r0, #1
   1fb0c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1fb0e:	428b      	cmp	r3, r1
   1fb10:	d0fb      	beq.n	1fb0a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1fb12:	6891      	ldr	r1, [r2, #8]
   1fb14:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   1fb16:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1fb18:	3b04      	subs	r3, #4
   1fb1a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   1fb1c:	6110      	str	r0, [r2, #16]
}
   1fb1e:	4770      	bx	lr

0001fb20 <z_log_msg_static_create.constprop.0>:
   1fb20:	2300      	movs	r3, #0
   1fb22:	f7f2 bd93 	b.w	1264c <z_impl_z_log_msg_static_create>

0001fb26 <chan_req_send>:
{
   1fb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb28:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1fb2a:	6888      	ldr	r0, [r1, #8]
   1fb2c:	f7ff ff0a 	bl	1f944 <net_buf_frags_len>
   1fb30:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   1fb32:	4283      	cmp	r3, r0
{
   1fb34:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1fb36:	d30d      	bcc.n	1fb54 <chan_req_send+0x2e>
	chan->req = req;
   1fb38:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   1fb3c:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   1fb3e:	2600      	movs	r6, #0
   1fb40:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1fb42:	4628      	mov	r0, r5
   1fb44:	4639      	mov	r1, r7
   1fb46:	f7f7 fcfd 	bl	17544 <chan_send>
	if (err) {
   1fb4a:	b110      	cbz	r0, 1fb52 <chan_req_send+0x2c>
		req->buf = buf;
   1fb4c:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1fb4e:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   1fb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1fb54:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1fb58:	e7fb      	b.n	1fb52 <chan_req_send+0x2c>

0001fb5a <process_queue>:
{
   1fb5a:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1fb5c:	2200      	movs	r2, #0
{
   1fb5e:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1fb60:	2300      	movs	r3, #0
   1fb62:	4608      	mov	r0, r1
{
   1fb64:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1fb66:	f000 fe88 	bl	2087a <net_buf_get>
	if (buf) {
   1fb6a:	4605      	mov	r5, r0
   1fb6c:	b158      	cbz	r0, 1fb86 <process_queue+0x2c>
	return chan_send(chan, buf);
   1fb6e:	4601      	mov	r1, r0
   1fb70:	4620      	mov	r0, r4
   1fb72:	f7f7 fce7 	bl	17544 <chan_send>
		if (err) {
   1fb76:	4604      	mov	r4, r0
   1fb78:	b118      	cbz	r0, 1fb82 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1fb7a:	4629      	mov	r1, r5
   1fb7c:	4630      	mov	r0, r6
   1fb7e:	f001 fb96 	bl	212ae <k_queue_prepend>
}
   1fb82:	4620      	mov	r0, r4
   1fb84:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1fb86:	f06f 0401 	mvn.w	r4, #1
   1fb8a:	e7fa      	b.n	1fb82 <process_queue+0x28>

0001fb8c <bt_att_chan_send_rsp>:
{
   1fb8c:	b538      	push	{r3, r4, r5, lr}
   1fb8e:	4604      	mov	r4, r0
   1fb90:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1fb92:	f7f7 fcd7 	bl	17544 <chan_send>
	if (err) {
   1fb96:	b130      	cbz	r0, 1fba6 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1fb98:	4629      	mov	r1, r5
   1fb9a:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   1fb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1fba2:	f000 be9d 	b.w	208e0 <net_buf_put>
}
   1fba6:	bd38      	pop	{r3, r4, r5, pc}

0001fba8 <att_chan_read>:
{
   1fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbac:	4680      	mov	r8, r0
   1fbae:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1fbb0:	4610      	mov	r0, r2
{
   1fbb2:	4699      	mov	r9, r3
   1fbb4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1fbb6:	f7ff fec5 	bl	1f944 <net_buf_frags_len>
   1fbba:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1fbbe:	4283      	cmp	r3, r0
{
   1fbc0:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1fbc2:	d97a      	bls.n	1fcba <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1fbc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1fbc8:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1fbca:	4630      	mov	r0, r6
   1fbcc:	f000 fe8e 	bl	208ec <net_buf_frag_last>
	size_t len, total = 0;
   1fbd0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1fbd4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1fbd6:	4630      	mov	r0, r6
   1fbd8:	f7ff feb4 	bl	1f944 <net_buf_frags_len>
   1fbdc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1fbe0:	f105 070c 	add.w	r7, r5, #12
   1fbe4:	1a24      	subs	r4, r4, r0
   1fbe6:	4638      	mov	r0, r7
   1fbe8:	f000 fedd 	bl	209a6 <net_buf_simple_tailroom>
   1fbec:	4284      	cmp	r4, r0
   1fbee:	d211      	bcs.n	1fc14 <att_chan_read+0x6c>
   1fbf0:	4630      	mov	r0, r6
   1fbf2:	f7ff fea7 	bl	1f944 <net_buf_frags_len>
   1fbf6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1fbfa:	1a24      	subs	r4, r4, r0
		if (!len) {
   1fbfc:	bb34      	cbnz	r4, 1fc4c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1fbfe:	7ab0      	ldrb	r0, [r6, #10]
   1fc00:	f7f9 fa36 	bl	19070 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1fc04:	2200      	movs	r2, #0
   1fc06:	2300      	movs	r3, #0
   1fc08:	f000 fe32 	bl	20870 <net_buf_alloc_fixed>
			if (!frag) {
   1fc0c:	4605      	mov	r5, r0
   1fc0e:	b930      	cbnz	r0, 1fc1e <att_chan_read+0x76>
	return total;
   1fc10:	4657      	mov	r7, sl
   1fc12:	e02c      	b.n	1fc6e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1fc14:	4638      	mov	r0, r7
   1fc16:	f000 fec6 	bl	209a6 <net_buf_simple_tailroom>
   1fc1a:	4604      	mov	r4, r0
   1fc1c:	e7ee      	b.n	1fbfc <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1fc1e:	4601      	mov	r1, r0
   1fc20:	4630      	mov	r0, r6
   1fc22:	f000 fe74 	bl	2090e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1fc26:	4630      	mov	r0, r6
   1fc28:	f7ff fe8c 	bl	1f944 <net_buf_frags_len>
   1fc2c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1fc30:	f105 070c 	add.w	r7, r5, #12
   1fc34:	1a24      	subs	r4, r4, r0
   1fc36:	4638      	mov	r0, r7
   1fc38:	f000 feb5 	bl	209a6 <net_buf_simple_tailroom>
   1fc3c:	4284      	cmp	r4, r0
   1fc3e:	d21a      	bcs.n	1fc76 <att_chan_read+0xce>
   1fc40:	4630      	mov	r0, r6
   1fc42:	f7ff fe7f 	bl	1f944 <net_buf_frags_len>
   1fc46:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1fc4a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1fc4c:	68e9      	ldr	r1, [r5, #12]
   1fc4e:	8a2a      	ldrh	r2, [r5, #16]
   1fc50:	f8cd 9000 	str.w	r9, [sp]
   1fc54:	f8db 7004 	ldr.w	r7, [fp, #4]
   1fc58:	9803      	ldr	r0, [sp, #12]
   1fc5a:	440a      	add	r2, r1
   1fc5c:	b2a3      	uxth	r3, r4
   1fc5e:	4659      	mov	r1, fp
   1fc60:	47b8      	blx	r7
		if (read < 0) {
   1fc62:	1e07      	subs	r7, r0, #0
   1fc64:	da0c      	bge.n	1fc80 <att_chan_read+0xd8>
				return total;
   1fc66:	f1ba 0f00 	cmp.w	sl, #0
   1fc6a:	bf18      	it	ne
   1fc6c:	4657      	movne	r7, sl
}
   1fc6e:	4638      	mov	r0, r7
   1fc70:	b005      	add	sp, #20
   1fc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc76:	4638      	mov	r0, r7
   1fc78:	f000 fe95 	bl	209a6 <net_buf_simple_tailroom>
   1fc7c:	4604      	mov	r4, r0
   1fc7e:	e7e5      	b.n	1fc4c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1fc80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fc82:	b993      	cbnz	r3, 1fcaa <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1fc84:	4639      	mov	r1, r7
   1fc86:	f105 000c 	add.w	r0, r5, #12
   1fc8a:	f000 fe51 	bl	20930 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1fc8e:	4630      	mov	r0, r6
   1fc90:	f7ff fe58 	bl	1f944 <net_buf_frags_len>
   1fc94:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1fc98:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1fc9a:	4283      	cmp	r3, r0
		total += read;
   1fc9c:	44ba      	add	sl, r7
		offset += read;
   1fc9e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1fca2:	d9b5      	bls.n	1fc10 <att_chan_read+0x68>
   1fca4:	42a7      	cmp	r7, r4
   1fca6:	d096      	beq.n	1fbd6 <att_chan_read+0x2e>
   1fca8:	e7b2      	b.n	1fc10 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1fcaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fcac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fcae:	4639      	mov	r1, r7
   1fcb0:	4628      	mov	r0, r5
   1fcb2:	4798      	blx	r3
   1fcb4:	2800      	cmp	r0, #0
   1fcb6:	d1e5      	bne.n	1fc84 <att_chan_read+0xdc>
   1fcb8:	e7aa      	b.n	1fc10 <att_chan_read+0x68>
		return 0;
   1fcba:	2700      	movs	r7, #0
   1fcbc:	e7d7      	b.n	1fc6e <att_chan_read+0xc6>

0001fcbe <sys_slist_find_and_remove.isra.0>:
	return list->head;
   1fcbe:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fcc0:	2200      	movs	r2, #0
   1fcc2:	b903      	cbnz	r3, 1fcc6 <sys_slist_find_and_remove.isra.0+0x8>
   1fcc4:	4770      	bx	lr
   1fcc6:	428b      	cmp	r3, r1
   1fcc8:	d10f      	bne.n	1fcea <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1fcca:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fccc:	b93a      	cbnz	r2, 1fcde <sys_slist_find_and_remove.isra.0+0x20>
   1fcce:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1fcd0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fcd2:	4291      	cmp	r1, r2
   1fcd4:	d100      	bne.n	1fcd8 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1fcd6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1fcd8:	2300      	movs	r3, #0
   1fcda:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fcdc:	4770      	bx	lr
	parent->next = child;
   1fcde:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fce0:	6843      	ldr	r3, [r0, #4]
   1fce2:	4299      	cmp	r1, r3
	list->tail = node;
   1fce4:	bf08      	it	eq
   1fce6:	6042      	streq	r2, [r0, #4]
}
   1fce8:	e7f6      	b.n	1fcd8 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1fcea:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fcec:	681b      	ldr	r3, [r3, #0]
   1fcee:	e7e8      	b.n	1fcc2 <sys_slist_find_and_remove.isra.0+0x4>

0001fcf0 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1fcf0:	2006      	movs	r0, #6
   1fcf2:	4770      	bx	lr

0001fcf4 <atomic_test_and_set_bit>:
{
   1fcf4:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fcf6:	2301      	movs	r3, #1
   1fcf8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fcfc:	f3bf 8f5b 	dmb	ish
   1fd00:	e850 3f00 	ldrex	r3, [r0]
   1fd04:	ea43 0201 	orr.w	r2, r3, r1
   1fd08:	e840 2400 	strex	r4, r2, [r0]
   1fd0c:	2c00      	cmp	r4, #0
   1fd0e:	d1f7      	bne.n	1fd00 <atomic_test_and_set_bit+0xc>
   1fd10:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1fd14:	4219      	tst	r1, r3
}
   1fd16:	bf14      	ite	ne
   1fd18:	2001      	movne	r0, #1
   1fd1a:	2000      	moveq	r0, #0
   1fd1c:	bd10      	pop	{r4, pc}

0001fd1e <read_cb>:
{
   1fd1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   1fd20:	6816      	ldr	r6, [r2, #0]
{
   1fd22:	4605      	mov	r5, r0
	data->err = 0x00;
   1fd24:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1fd26:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   1fd28:	7313      	strb	r3, [r2, #12]
{
   1fd2a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1fd2c:	4629      	mov	r1, r5
   1fd2e:	2295      	movs	r2, #149	; 0x95
   1fd30:	f000 fc7e 	bl	20630 <bt_gatt_check_perm>
   1fd34:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1fd36:	b980      	cbnz	r0, 1fd5a <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1fd38:	e9cd 0000 	strd	r0, r0, [sp]
   1fd3c:	4629      	mov	r1, r5
   1fd3e:	88a3      	ldrh	r3, [r4, #4]
   1fd40:	68a2      	ldr	r2, [r4, #8]
   1fd42:	4630      	mov	r0, r6
   1fd44:	f7ff ff30 	bl	1fba8 <att_chan_read>
	if (ret < 0) {
   1fd48:	2800      	cmp	r0, #0
   1fd4a:	da09      	bge.n	1fd60 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1fd4c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1fd50:	bf26      	itte	cs
   1fd52:	4240      	negcs	r0, r0
   1fd54:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1fd56:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   1fd58:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1fd5a:	2000      	movs	r0, #0
}
   1fd5c:	b002      	add	sp, #8
   1fd5e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1fd60:	2001      	movs	r0, #1
   1fd62:	e7fb      	b.n	1fd5c <read_cb+0x3e>

0001fd64 <read_vl_cb>:
{
   1fd64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1fd68:	f8d2 8000 	ldr.w	r8, [r2]
{
   1fd6c:	4606      	mov	r6, r0
	data->err = 0x00;
   1fd6e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1fd70:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   1fd74:	7313      	strb	r3, [r2, #12]
{
   1fd76:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1fd78:	4631      	mov	r1, r6
   1fd7a:	2295      	movs	r2, #149	; 0x95
   1fd7c:	f000 fc58 	bl	20630 <bt_gatt_check_perm>
   1fd80:	4605      	mov	r5, r0
   1fd82:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1fd84:	b9e0      	cbnz	r0, 1fdc0 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1fd86:	68a0      	ldr	r0, [r4, #8]
   1fd88:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1fd8c:	8a02      	ldrh	r2, [r0, #16]
   1fd8e:	1a9b      	subs	r3, r3, r2
   1fd90:	2b01      	cmp	r3, #1
   1fd92:	dd15      	ble.n	1fdc0 <read_vl_cb+0x5c>
   1fd94:	2102      	movs	r1, #2
   1fd96:	300c      	adds	r0, #12
   1fd98:	f000 fdca 	bl	20930 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1fd9c:	e9cd 5500 	strd	r5, r5, [sp]
   1fda0:	4607      	mov	r7, r0
   1fda2:	88a3      	ldrh	r3, [r4, #4]
   1fda4:	68a2      	ldr	r2, [r4, #8]
   1fda6:	4631      	mov	r1, r6
   1fda8:	4640      	mov	r0, r8
   1fdaa:	f7ff fefd 	bl	1fba8 <att_chan_read>
	if (read < 0) {
   1fdae:	1e03      	subs	r3, r0, #0
   1fdb0:	da0a      	bge.n	1fdc8 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1fdb2:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1fdb6:	bf26      	itte	cs
   1fdb8:	425b      	negcs	r3, r3
   1fdba:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1fdbc:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   1fdbe:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1fdc0:	2000      	movs	r0, #0
}
   1fdc2:	b002      	add	sp, #8
   1fdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   1fdc8:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1fdca:	2001      	movs	r0, #1
   1fdcc:	e7f9      	b.n	1fdc2 <read_vl_cb+0x5e>

0001fdce <bt_att_sent>:
{
   1fdce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdd0:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1fdd2:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fdd4:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   1fdd8:	f850 4c04 	ldr.w	r4, [r0, #-4]
   1fddc:	f3bf 8f5b 	dmb	ish
   1fde0:	e853 1f00 	ldrex	r1, [r3]
   1fde4:	f021 0110 	bic.w	r1, r1, #16
   1fde8:	e843 1200 	strex	r2, r1, [r3]
   1fdec:	2a00      	cmp	r2, #0
   1fdee:	d1f7      	bne.n	1fde0 <bt_att_sent+0x12>
   1fdf0:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1fdf4:	b30c      	cbz	r4, 1fe3a <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1fdf6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1fdfa:	b98b      	cbnz	r3, 1fe20 <bt_att_sent+0x52>
   1fdfc:	6863      	ldr	r3, [r4, #4]
   1fdfe:	b17b      	cbz	r3, 1fe20 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1fe00:	1d20      	adds	r0, r4, #4
   1fe02:	f7ff fd95 	bl	1f930 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fe06:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1fe08:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fe0a:	4638      	mov	r0, r7
   1fe0c:	f7ff fe8b 	bl	1fb26 <chan_req_send>
   1fe10:	2800      	cmp	r0, #0
   1fe12:	da12      	bge.n	1fe3a <bt_att_sent+0x6c>
	return list->head;
   1fe14:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1fe16:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fe18:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1fe1a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fe1c:	b903      	cbnz	r3, 1fe20 <bt_att_sent+0x52>
	list->tail = node;
   1fe1e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1fe20:	f105 0194 	add.w	r1, r5, #148	; 0x94
   1fe24:	4638      	mov	r0, r7
   1fe26:	f7ff fe98 	bl	1fb5a <process_queue>
	if (!err) {
   1fe2a:	b130      	cbz	r0, 1fe3a <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   1fe2c:	f104 010c 	add.w	r1, r4, #12
   1fe30:	4638      	mov	r0, r7
}
   1fe32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1fe36:	f7ff be90 	b.w	1fb5a <process_queue>
}
   1fe3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fe3c <att_req_send_process>:
{
   1fe3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1fe40:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1fe42:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fe44:	2c00      	cmp	r4, #0
   1fe46:	d03b      	beq.n	1fec0 <att_req_send_process+0x84>
	return node->next;
   1fe48:	f854 69e0 	ldr.w	r6, [r4], #-224
   1fe4c:	b106      	cbz	r6, 1fe50 <att_req_send_process+0x14>
   1fe4e:	3ee0      	subs	r6, #224	; 0xe0
{
   1fe50:	2300      	movs	r3, #0
   1fe52:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   1fe54:	f108 0704 	add.w	r7, r8, #4
   1fe58:	e013      	b.n	1fe82 <att_req_send_process+0x46>
		if (!req && prev &&
   1fe5a:	b1c3      	cbz	r3, 1fe8e <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1fe5c:	2103      	movs	r1, #3
   1fe5e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1fe62:	f7ff fd89 	bl	1f978 <atomic_test_bit>
   1fe66:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1fe68:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1fe6c:	f7ff fd84 	bl	1f978 <atomic_test_bit>
		if (!req && prev &&
   1fe70:	4282      	cmp	r2, r0
   1fe72:	d10c      	bne.n	1fe8e <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fe74:	b326      	cbz	r6, 1fec0 <att_req_send_process+0x84>
   1fe76:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   1fe7a:	b102      	cbz	r2, 1fe7e <att_req_send_process+0x42>
   1fe7c:	3ae0      	subs	r2, #224	; 0xe0
{
   1fe7e:	4634      	mov	r4, r6
   1fe80:	4616      	mov	r6, r2
		if (chan->req) {
   1fe82:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1fe86:	2a00      	cmp	r2, #0
   1fe88:	d1f4      	bne.n	1fe74 <att_req_send_process+0x38>
		if (!req && prev &&
   1fe8a:	2d00      	cmp	r5, #0
   1fe8c:	d0e5      	beq.n	1fe5a <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1fe8e:	4638      	mov	r0, r7
   1fe90:	f7ff fd4e 	bl	1f930 <sys_slist_get>
	if (node) {
   1fe94:	4605      	mov	r5, r0
   1fe96:	b908      	cbnz	r0, 1fe9c <att_req_send_process+0x60>
   1fe98:	4623      	mov	r3, r4
   1fe9a:	e7eb      	b.n	1fe74 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   1fe9c:	4601      	mov	r1, r0
   1fe9e:	4620      	mov	r0, r4
   1fea0:	f7ff fe41 	bl	1fb26 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1fea4:	2800      	cmp	r0, #0
   1fea6:	da0b      	bge.n	1fec0 <att_req_send_process+0x84>
	return list->head;
   1fea8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1feac:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1feae:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1feb2:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1feb6:	2b00      	cmp	r3, #0
   1feb8:	d1ee      	bne.n	1fe98 <att_req_send_process+0x5c>
	list->tail = node;
   1feba:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1febe:	e7eb      	b.n	1fe98 <att_req_send_process+0x5c>
}
   1fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fec4 <bt_att_status>:
{
   1fec4:	b538      	push	{r3, r4, r5, lr}
   1fec6:	4605      	mov	r5, r0
   1fec8:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1feca:	2100      	movs	r1, #0
   1fecc:	f7ff fd54 	bl	1f978 <atomic_test_bit>
   1fed0:	b1c0      	cbz	r0, 1ff04 <bt_att_status+0x40>
	if (!chan->att) {
   1fed2:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1fed6:	b1a8      	cbz	r0, 1ff04 <bt_att_status+0x40>
	if (chan->req) {
   1fed8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1fedc:	b993      	cbnz	r3, 1ff04 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1fede:	3004      	adds	r0, #4
   1fee0:	f7ff fd26 	bl	1f930 <sys_slist_get>
	if (!node) {
   1fee4:	4604      	mov	r4, r0
   1fee6:	b168      	cbz	r0, 1ff04 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   1fee8:	4601      	mov	r1, r0
   1feea:	1f28      	subs	r0, r5, #4
   1feec:	f7ff fe1b 	bl	1fb26 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fef0:	2800      	cmp	r0, #0
   1fef2:	da07      	bge.n	1ff04 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1fef4:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1fef8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1fefa:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fefc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1fefe:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ff00:	b902      	cbnz	r2, 1ff04 <bt_att_status+0x40>
	list->tail = node;
   1ff02:	609c      	str	r4, [r3, #8]
}
   1ff04:	bd38      	pop	{r3, r4, r5, pc}

0001ff06 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1ff06:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1ff08:	6883      	ldr	r3, [r0, #8]
   1ff0a:	699b      	ldr	r3, [r3, #24]
   1ff0c:	b10b      	cbz	r3, 1ff12 <att_sent+0xc>
		chan->ops->sent(chan);
   1ff0e:	3004      	adds	r0, #4
   1ff10:	4718      	bx	r3
}
   1ff12:	4770      	bx	lr

0001ff14 <att_unknown>:
{
   1ff14:	b510      	push	{r4, lr}
   1ff16:	460c      	mov	r4, r1
	if (!err) {
   1ff18:	b90a      	cbnz	r2, 1ff1e <att_unknown+0xa>
		att_sent(conn, user_data);
   1ff1a:	f7ff fff4 	bl	1ff06 <att_sent>
	tx_meta_data_free(user_data);
   1ff1e:	4620      	mov	r0, r4
}
   1ff20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1ff24:	f7f7 ba40 	b.w	173a8 <tx_meta_data_free>

0001ff28 <att_tx_complete>:
{
   1ff28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff2c:	4606      	mov	r6, r0
   1ff2e:	460d      	mov	r5, r1
	if (!err) {
   1ff30:	4614      	mov	r4, r2
   1ff32:	b122      	cbz	r2, 1ff3e <att_tx_complete+0x16>
}
   1ff34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1ff38:	4608      	mov	r0, r1
   1ff3a:	f7f7 ba35 	b.w	173a8 <tx_meta_data_free>
		att_sent(conn, user_data);
   1ff3e:	f7ff ffe2 	bl	1ff06 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1ff42:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   1ff44:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1ff48:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1ff4c:	4628      	mov	r0, r5
   1ff4e:	f7f7 fa2b 	bl	173a8 <tx_meta_data_free>
	if (!err && func) {
   1ff52:	b92f      	cbnz	r7, 1ff60 <att_tx_complete+0x38>
}
   1ff54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1ff58:	4649      	mov	r1, r9
   1ff5a:	4630      	mov	r0, r6
   1ff5c:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1ff5e:	3401      	adds	r4, #1
   1ff60:	b2a3      	uxth	r3, r4
   1ff62:	4543      	cmp	r3, r8
   1ff64:	d3f8      	bcc.n	1ff58 <att_tx_complete+0x30>
   1ff66:	e7f5      	b.n	1ff54 <att_tx_complete+0x2c>

0001ff68 <att_req_sent>:
{
   1ff68:	b510      	push	{r4, lr}
   1ff6a:	460c      	mov	r4, r1
	if (!err) {
   1ff6c:	b90a      	cbnz	r2, 1ff72 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1ff6e:	f7ff ffca 	bl	1ff06 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1ff72:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1ff74:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1ff78:	b12b      	cbz	r3, 1ff86 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ff7a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ff7e:	2300      	movs	r3, #0
   1ff80:	30b0      	adds	r0, #176	; 0xb0
   1ff82:	f7fc fe67 	bl	1cc54 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1ff86:	4620      	mov	r0, r4
}
   1ff88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1ff8c:	f7f7 ba0c 	b.w	173a8 <tx_meta_data_free>

0001ff90 <att_cfm_sent>:
{
   1ff90:	b510      	push	{r4, lr}
   1ff92:	460c      	mov	r4, r1
	if (!err) {
   1ff94:	b90a      	cbnz	r2, 1ff9a <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1ff96:	f7ff ffb6 	bl	1ff06 <att_sent>
   1ff9a:	6823      	ldr	r3, [r4, #0]
   1ff9c:	f3bf 8f5b 	dmb	ish
   1ffa0:	3390      	adds	r3, #144	; 0x90
   1ffa2:	e853 1f00 	ldrex	r1, [r3]
   1ffa6:	f021 0102 	bic.w	r1, r1, #2
   1ffaa:	e843 1200 	strex	r2, r1, [r3]
   1ffae:	2a00      	cmp	r2, #0
   1ffb0:	d1f7      	bne.n	1ffa2 <att_cfm_sent+0x12>
   1ffb2:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1ffb6:	4620      	mov	r0, r4
}
   1ffb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1ffbc:	f7f7 b9f4 	b.w	173a8 <tx_meta_data_free>

0001ffc0 <att_rsp_sent>:
{
   1ffc0:	b510      	push	{r4, lr}
   1ffc2:	460c      	mov	r4, r1
	if (!err) {
   1ffc4:	b90a      	cbnz	r2, 1ffca <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1ffc6:	f7ff ff9e 	bl	1ff06 <att_sent>
   1ffca:	6823      	ldr	r3, [r4, #0]
   1ffcc:	f3bf 8f5b 	dmb	ish
   1ffd0:	3390      	adds	r3, #144	; 0x90
   1ffd2:	e853 1f00 	ldrex	r1, [r3]
   1ffd6:	f021 0101 	bic.w	r1, r1, #1
   1ffda:	e843 1200 	strex	r2, r1, [r3]
   1ffde:	2a00      	cmp	r2, #0
   1ffe0:	d1f7      	bne.n	1ffd2 <att_rsp_sent+0x12>
   1ffe2:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1ffe6:	4620      	mov	r0, r4
}
   1ffe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1ffec:	f7f7 b9dc 	b.w	173a8 <tx_meta_data_free>

0001fff0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1fff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fff4:	4688      	mov	r8, r1
   1fff6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1fff8:	2101      	movs	r1, #1
   1fffa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1fffc:	4605      	mov	r5, r0
   1fffe:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   20000:	f7f7 fc7a 	bl	178f8 <bt_att_chan_create_pdu>
	if (!buf) {
   20004:	4604      	mov	r4, r0
   20006:	b170      	cbz	r0, 20026 <CONFIG_PM_SRAM_SIZE+0x26>
   20008:	2104      	movs	r1, #4
   2000a:	300c      	adds	r0, #12
   2000c:	f000 fc90 	bl	20930 <net_buf_simple_add>
	rsp->request = req;
   20010:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   20014:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   20018:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2001a:	4621      	mov	r1, r4
   2001c:	4628      	mov	r0, r5
}
   2001e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   20022:	f7ff bdb3 	b.w	1fb8c <bt_att_chan_send_rsp>
}
   20026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002002a <att_write_req>:
{
   2002a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2002c:	460c      	mov	r4, r1
   2002e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   20030:	f101 000c 	add.w	r0, r1, #12
   20034:	f000 fcab 	bl	2098e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   20038:	8a22      	ldrh	r2, [r4, #16]
   2003a:	9201      	str	r2, [sp, #4]
   2003c:	68e2      	ldr	r2, [r4, #12]
   2003e:	9200      	str	r2, [sp, #0]
   20040:	4603      	mov	r3, r0
   20042:	2213      	movs	r2, #19
   20044:	2112      	movs	r1, #18
   20046:	4628      	mov	r0, r5
   20048:	f7f7 fd70 	bl	17b2c <att_write_rsp.constprop.0>
}
   2004c:	b003      	add	sp, #12
   2004e:	bd30      	pop	{r4, r5, pc}

00020050 <att_write_cmd>:
{
   20050:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20052:	460c      	mov	r4, r1
   20054:	4605      	mov	r5, r0
   20056:	f101 000c 	add.w	r0, r1, #12
   2005a:	f000 fc98 	bl	2098e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2005e:	8a22      	ldrh	r2, [r4, #16]
   20060:	9201      	str	r2, [sp, #4]
   20062:	68e2      	ldr	r2, [r4, #12]
   20064:	9200      	str	r2, [sp, #0]
   20066:	2200      	movs	r2, #0
   20068:	4603      	mov	r3, r0
   2006a:	4611      	mov	r1, r2
   2006c:	4628      	mov	r0, r5
   2006e:	f7f7 fd5d 	bl	17b2c <att_write_rsp.constprop.0>
}
   20072:	b003      	add	sp, #12
   20074:	bd30      	pop	{r4, r5, pc}

00020076 <att_read_blob_req>:
{
   20076:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   20078:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2007a:	8813      	ldrh	r3, [r2, #0]
   2007c:	8852      	ldrh	r2, [r2, #2]
   2007e:	9200      	str	r2, [sp, #0]
   20080:	210c      	movs	r1, #12
   20082:	220d      	movs	r2, #13
   20084:	f7f7 ff18 	bl	17eb8 <att_read_rsp>
}
   20088:	b003      	add	sp, #12
   2008a:	f85d fb04 	ldr.w	pc, [sp], #4

0002008e <att_read_req>:
{
   2008e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   20090:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   20092:	2200      	movs	r2, #0
   20094:	881b      	ldrh	r3, [r3, #0]
   20096:	9200      	str	r2, [sp, #0]
   20098:	210a      	movs	r1, #10
   2009a:	220b      	movs	r2, #11
   2009c:	f7f7 ff0c 	bl	17eb8 <att_read_rsp>
}
   200a0:	b003      	add	sp, #12
   200a2:	f85d fb04 	ldr.w	pc, [sp], #4

000200a6 <att_mtu_req>:
{
   200a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200a8:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   200aa:	f850 2b90 	ldr.w	r2, [r0], #144
{
   200ae:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   200b0:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   200b2:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   200b4:	f7ff fc60 	bl	1f978 <atomic_test_bit>
   200b8:	4604      	mov	r4, r0
   200ba:	b9d8      	cbnz	r0, 200f4 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   200bc:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   200be:	881b      	ldrh	r3, [r3, #0]
   200c0:	2b16      	cmp	r3, #22
   200c2:	d919      	bls.n	200f8 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   200c4:	4630      	mov	r0, r6
   200c6:	2202      	movs	r2, #2
   200c8:	f7f7 fd94 	bl	17bf4 <bt_att_create_pdu>
	if (!pdu) {
   200cc:	4606      	mov	r6, r0
   200ce:	b1a8      	cbz	r0, 200fc <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   200d0:	2102      	movs	r1, #2
   200d2:	300c      	adds	r0, #12
   200d4:	f000 fc2c 	bl	20930 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   200d8:	2717      	movs	r7, #23
   200da:	7007      	strb	r7, [r0, #0]
   200dc:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   200de:	4631      	mov	r1, r6
   200e0:	4628      	mov	r0, r5
   200e2:	f7ff fd53 	bl	1fb8c <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   200e6:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   200e8:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   200ea:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   200ec:	f7ff fcd5 	bl	1fa9a <att_chan_mtu_updated>
	return 0;
   200f0:	4620      	mov	r0, r4
}
   200f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   200f4:	2006      	movs	r0, #6
   200f6:	e7fc      	b.n	200f2 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   200f8:	2004      	movs	r0, #4
   200fa:	e7fa      	b.n	200f2 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   200fc:	200e      	movs	r0, #14
   200fe:	e7f8      	b.n	200f2 <att_mtu_req+0x4c>

00020100 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   20100:	8a0a      	ldrh	r2, [r1, #16]
   20102:	68c9      	ldr	r1, [r1, #12]
   20104:	2300      	movs	r3, #0
   20106:	f7f8 b883 	b.w	18210 <att_handle_rsp>

0002010a <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2010a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2010c:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2010e:	f7f7 fa77 	bl	17600 <att_get>
	if (!att) {
   20112:	4604      	mov	r4, r0
   20114:	b940      	cbnz	r0, 20128 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   20116:	69a8      	ldr	r0, [r5, #24]
   20118:	f7f7 f946 	bl	173a8 <tx_meta_data_free>
		net_buf_unref(buf);
   2011c:	4628      	mov	r0, r5
   2011e:	f7f9 f869 	bl	191f4 <net_buf_unref>
		return -ENOTCONN;
   20122:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   20126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   20128:	f100 060c 	add.w	r6, r0, #12
   2012c:	4629      	mov	r1, r5
   2012e:	4630      	mov	r0, r6
   20130:	f000 fbd6 	bl	208e0 <net_buf_put>
	return list->head;
   20134:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20136:	b14d      	cbz	r5, 2014c <bt_att_send+0x42>
	return node->next;
   20138:	f855 49e0 	ldr.w	r4, [r5], #-224
   2013c:	b104      	cbz	r4, 20140 <bt_att_send+0x36>
   2013e:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   20140:	4631      	mov	r1, r6
   20142:	4628      	mov	r0, r5
   20144:	f7ff fd09 	bl	1fb5a <process_queue>
		if (!err) {
   20148:	4603      	mov	r3, r0
   2014a:	b980      	cbnz	r0, 2016e <bt_att_send+0x64>
	return 0;
   2014c:	2000      	movs	r0, #0
   2014e:	e7ea      	b.n	20126 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   20150:	2103      	movs	r1, #3
   20152:	f104 0090 	add.w	r0, r4, #144	; 0x90
   20156:	f7ff fc0f 	bl	1f978 <atomic_test_bit>
   2015a:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2015c:	f105 0090 	add.w	r0, r5, #144	; 0x90
   20160:	f7ff fc0a 	bl	1f978 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   20164:	4287      	cmp	r7, r0
   20166:	f06f 0301 	mvn.w	r3, #1
   2016a:	d107      	bne.n	2017c <bt_att_send+0x72>
   2016c:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2016e:	2c00      	cmp	r4, #0
   20170:	d0ec      	beq.n	2014c <bt_att_send+0x42>
   20172:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   20176:	b922      	cbnz	r2, 20182 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   20178:	3302      	adds	r3, #2
   2017a:	d0e9      	beq.n	20150 <bt_att_send+0x46>
{
   2017c:	4625      	mov	r5, r4
   2017e:	4614      	mov	r4, r2
   20180:	e7de      	b.n	20140 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20182:	3ae0      	subs	r2, #224	; 0xe0
   20184:	e7f8      	b.n	20178 <bt_att_send+0x6e>

00020186 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   20186:	b510      	push	{r4, lr}
   20188:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2018a:	f7f7 fa39 	bl	17600 <att_get>
	if (!att) {
   2018e:	b160      	cbz	r0, 201aa <bt_att_req_send+0x24>
	parent->next = child;
   20190:	2300      	movs	r3, #0
   20192:	6023      	str	r3, [r4, #0]
	return list->tail;
   20194:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   20196:	b92b      	cbnz	r3, 201a4 <bt_att_req_send+0x1e>
	list->head = node;
   20198:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2019c:	f7ff fe4e 	bl	1fe3c <att_req_send_process>

	return 0;
   201a0:	2000      	movs	r0, #0
}
   201a2:	bd10      	pop	{r4, pc}
	parent->next = child;
   201a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   201a6:	6084      	str	r4, [r0, #8]
}
   201a8:	e7f8      	b.n	2019c <bt_att_req_send+0x16>
		return -ENOTCONN;
   201aa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   201ae:	e7f8      	b.n	201a2 <bt_att_req_send+0x1c>

000201b0 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   201b0:	2001      	movs	r0, #1
   201b2:	4770      	bx	lr

000201b4 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   201b4:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   201b6:	f7f7 fa23 	bl	17600 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   201ba:	b198      	cbz	r0, 201e4 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   201bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   201be:	b18b      	cbz	r3, 201e4 <bt_att_clear_out_of_sync_sent+0x30>
   201c0:	f3bf 8f5b 	dmb	ish
   201c4:	3be0      	subs	r3, #224	; 0xe0
   201c6:	f103 0290 	add.w	r2, r3, #144	; 0x90
   201ca:	e852 0f00 	ldrex	r0, [r2]
   201ce:	f020 0020 	bic.w	r0, r0, #32
   201d2:	e842 0100 	strex	r1, r0, [r2]
   201d6:	2900      	cmp	r1, #0
   201d8:	d1f7      	bne.n	201ca <bt_att_clear_out_of_sync_sent+0x16>
   201da:	f3bf 8f5b 	dmb	ish
	return node->next;
   201de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   201e2:	e7ec      	b.n	201be <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   201e4:	bd08      	pop	{r3, pc}

000201e6 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   201e6:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   201e8:	2104      	movs	r1, #4
   201ea:	f7ff fb96 	bl	1f91a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   201ee:	b128      	cbz	r0, 201fc <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   201f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   201f4:	2105      	movs	r1, #5
   201f6:	308c      	adds	r0, #140	; 0x8c
   201f8:	f7ff bbbe 	b.w	1f978 <atomic_test_bit>
}
   201fc:	bd08      	pop	{r3, pc}

000201fe <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   201fe:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   20200:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   20204:	2201      	movs	r2, #1
   20206:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   20208:	7403      	strb	r3, [r0, #16]
}
   2020a:	4770      	bx	lr

0002020c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2020c:	6010      	str	r0, [r2, #0]
}
   2020e:	2000      	movs	r0, #0
   20210:	4770      	bx	lr

00020212 <gatt_ccc_changed>:
{
   20212:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   20214:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   20216:	895a      	ldrh	r2, [r3, #10]
   20218:	428a      	cmp	r2, r1
   2021a:	d003      	beq.n	20224 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2021c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2021e:	68db      	ldr	r3, [r3, #12]
   20220:	b103      	cbz	r3, 20224 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   20222:	4718      	bx	r3
}
   20224:	4770      	bx	lr

00020226 <gatt_indicate_rsp>:
{
   20226:	b510      	push	{r4, lr}
   20228:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2022a:	68a3      	ldr	r3, [r4, #8]
{
   2022c:	460a      	mov	r2, r1
	if (params->func) {
   2022e:	b10b      	cbz	r3, 20234 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   20230:	4621      	mov	r1, r4
   20232:	4798      	blx	r3
	params->_ref--;
   20234:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   20236:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   20238:	3b01      	subs	r3, #1
   2023a:	b2db      	uxtb	r3, r3
   2023c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2023e:	b122      	cbz	r2, 2024a <gatt_indicate_rsp+0x24>
   20240:	b91b      	cbnz	r3, 2024a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   20242:	4620      	mov	r0, r4
}
   20244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   20248:	4710      	bx	r2
}
   2024a:	bd10      	pop	{r4, pc}

0002024c <match_uuid>:
	data->attr = attr;
   2024c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2024e:	8091      	strh	r1, [r2, #4]
}
   20250:	2000      	movs	r0, #0
   20252:	4770      	bx	lr

00020254 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   20254:	2207      	movs	r2, #7
   20256:	f7fe bfa0 	b.w	1f19a <memcpy>

0002025a <write_name>:
{
   2025a:	b570      	push	{r4, r5, r6, lr}
   2025c:	b088      	sub	sp, #32
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2025e:	2100      	movs	r1, #0
{
   20260:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   20264:	9101      	str	r1, [sp, #4]
{
   20266:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   20268:	a802      	add	r0, sp, #8
   2026a:	2218      	movs	r2, #24
{
   2026c:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2026e:	f7fe ff9f 	bl	1f1b0 <memset>
	if (offset >= sizeof(value)) {
   20272:	2d1b      	cmp	r5, #27
   20274:	d80d      	bhi.n	20292 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   20276:	4425      	add	r5, r4
   20278:	2d1b      	cmp	r5, #27
   2027a:	dc0d      	bgt.n	20298 <write_name+0x3e>
	memcpy(value, buf, len);
   2027c:	4622      	mov	r2, r4
   2027e:	4631      	mov	r1, r6
   20280:	a801      	add	r0, sp, #4
   20282:	f7fe ff8a 	bl	1f19a <memcpy>
	bt_set_name(value);
   20286:	a801      	add	r0, sp, #4
   20288:	f7f5 fa78 	bl	1577c <bt_set_name>
}
   2028c:	4620      	mov	r0, r4
   2028e:	b008      	add	sp, #32
   20290:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20292:	f06f 0406 	mvn.w	r4, #6
   20296:	e7f9      	b.n	2028c <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   20298:	f06f 040c 	mvn.w	r4, #12
   2029c:	e7f6      	b.n	2028c <write_name+0x32>

0002029e <gen_hash_m>:
{
   2029e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   202a0:	6807      	ldr	r7, [r0, #0]
   202a2:	783d      	ldrb	r5, [r7, #0]
{
   202a4:	b089      	sub	sp, #36	; 0x24
   202a6:	4606      	mov	r6, r0
   202a8:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   202aa:	b9dd      	cbnz	r5, 202e4 <gen_hash_m+0x46>
	switch (u16->val) {
   202ac:	887b      	ldrh	r3, [r7, #2]
   202ae:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   202b2:	d004      	beq.n	202be <gen_hash_m+0x20>
   202b4:	d810      	bhi.n	202d8 <gen_hash_m+0x3a>
   202b6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   202ba:	2b03      	cmp	r3, #3
   202bc:	d812      	bhi.n	202e4 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   202be:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   202c2:	2202      	movs	r2, #2
   202c4:	f10d 010a 	add.w	r1, sp, #10
   202c8:	4620      	mov	r0, r4
   202ca:	f7fe fe6b 	bl	1efa4 <tc_cmac_update>
   202ce:	b968      	cbnz	r0, 202ec <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   202d0:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   202d4:	65a2      	str	r2, [r4, #88]	; 0x58
   202d6:	e006      	b.n	202e6 <gen_hash_m+0x48>
	switch (u16->val) {
   202d8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   202dc:	33ff      	adds	r3, #255	; 0xff
   202de:	b29b      	uxth	r3, r3
   202e0:	2b04      	cmp	r3, #4
   202e2:	d91e      	bls.n	20322 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   202e4:	2501      	movs	r5, #1
}
   202e6:	4628      	mov	r0, r5
   202e8:	b009      	add	sp, #36	; 0x24
   202ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   202ec:	887b      	ldrh	r3, [r7, #2]
   202ee:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   202f2:	2202      	movs	r2, #2
   202f4:	f10d 010a 	add.w	r1, sp, #10
   202f8:	4620      	mov	r0, r4
   202fa:	f7fe fe53 	bl	1efa4 <tc_cmac_update>
   202fe:	2800      	cmp	r0, #0
   20300:	d0e6      	beq.n	202d0 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   20302:	2000      	movs	r0, #0
   20304:	9000      	str	r0, [sp, #0]
   20306:	aa03      	add	r2, sp, #12
   20308:	6877      	ldr	r7, [r6, #4]
   2030a:	2313      	movs	r3, #19
   2030c:	4631      	mov	r1, r6
   2030e:	47b8      	blx	r7
		if (len < 0) {
   20310:	1e02      	subs	r2, r0, #0
   20312:	dbdf      	blt.n	202d4 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   20314:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20316:	4620      	mov	r0, r4
   20318:	f7fe fe44 	bl	1efa4 <tc_cmac_update>
   2031c:	2800      	cmp	r0, #0
   2031e:	d1e1      	bne.n	202e4 <gen_hash_m+0x46>
   20320:	e7d6      	b.n	202d0 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   20322:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20326:	2202      	movs	r2, #2
   20328:	f10d 010a 	add.w	r1, sp, #10
   2032c:	4620      	mov	r0, r4
   2032e:	f7fe fe39 	bl	1efa4 <tc_cmac_update>
   20332:	2800      	cmp	r0, #0
   20334:	d0cc      	beq.n	202d0 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   20336:	887b      	ldrh	r3, [r7, #2]
   20338:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2033c:	2202      	movs	r2, #2
   2033e:	f10d 010a 	add.w	r1, sp, #10
   20342:	e7e8      	b.n	20316 <gen_hash_m+0x78>

00020344 <bt_addr_le_eq>:
{
   20344:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   20346:	2207      	movs	r2, #7
   20348:	f7fe ff17 	bl	1f17a <memcmp>
}
   2034c:	fab0 f080 	clz	r0, r0
   20350:	0940      	lsrs	r0, r0, #5
   20352:	bd08      	pop	{r3, pc}

00020354 <z_log_msg_static_create.constprop.0>:
   20354:	2300      	movs	r3, #0
   20356:	f7f2 b979 	b.w	1264c <z_impl_z_log_msg_static_create>

0002035a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2035a:	2301      	movs	r3, #1
   2035c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2035e:	f3bf 8f5b 	dmb	ish
   20362:	e850 2f00 	ldrex	r2, [r0]
   20366:	431a      	orrs	r2, r3
   20368:	e840 2100 	strex	r1, r2, [r0]
   2036c:	2900      	cmp	r1, #0
   2036e:	d1f8      	bne.n	20362 <atomic_set_bit+0x8>
   20370:	f3bf 8f5b 	dmb	ish
}
   20374:	4770      	bx	lr

00020376 <sc_restore_rsp>:
{
   20376:	b538      	push	{r3, r4, r5, lr}
   20378:	4604      	mov	r4, r0
   2037a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2037c:	f7ff ff18 	bl	201b0 <bt_att_fixed_chan_only>
   20380:	b150      	cbz	r0, 20398 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   20382:	4620      	mov	r0, r4
   20384:	f7f8 f808 	bl	18398 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   20388:	b130      	cbz	r0, 20398 <sc_restore_rsp+0x22>
   2038a:	7a03      	ldrb	r3, [r0, #8]
   2038c:	07db      	lsls	r3, r3, #31
   2038e:	d503      	bpl.n	20398 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   20390:	2100      	movs	r1, #0
   20392:	300c      	adds	r0, #12
   20394:	f7ff ffe1 	bl	2035a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   20398:	b965      	cbnz	r5, 203b4 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2039a:	7a20      	ldrb	r0, [r4, #8]
   2039c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   203a0:	f7f8 f812 	bl	183c8 <find_sc_cfg>
		if (sc_cfg) {
   203a4:	b130      	cbz	r0, 203b4 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   203a6:	4629      	mov	r1, r5
   203a8:	2204      	movs	r2, #4
}
   203aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   203ae:	3008      	adds	r0, #8
   203b0:	f7fe befe 	b.w	1f1b0 <memset>
}
   203b4:	bd38      	pop	{r3, r4, r5, pc}

000203b6 <sc_clear>:
{
   203b6:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   203b8:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   203bc:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   203be:	4631      	mov	r1, r6
   203c0:	7a00      	ldrb	r0, [r0, #8]
   203c2:	f7ff f841 	bl	1f448 <bt_addr_le_is_bonded>
   203c6:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   203c8:	4631      	mov	r1, r6
   203ca:	f7f7 fffd 	bl	183c8 <find_sc_cfg>
	if (!cfg) {
   203ce:	b128      	cbz	r0, 203dc <sc_clear+0x26>
}
   203d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   203d4:	220c      	movs	r2, #12
   203d6:	2100      	movs	r1, #0
   203d8:	f7fe beea 	b.w	1f1b0 <memset>
}
   203dc:	bd70      	pop	{r4, r5, r6, pc}

000203de <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   203de:	2a02      	cmp	r2, #2
{
   203e0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   203e2:	d108      	bne.n	203f6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   203e4:	2300      	movs	r3, #0
   203e6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   203ea:	461a      	mov	r2, r3
   203ec:	7a00      	ldrb	r0, [r0, #8]
   203ee:	f7f8 f88f 	bl	18510 <sc_save>
}
   203f2:	2002      	movs	r0, #2
   203f4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   203f6:	f7ff ffde 	bl	203b6 <sc_clear>
   203fa:	e7fa      	b.n	203f2 <sc_ccc_cfg_write+0x14>

000203fc <read_appearance>:
{
   203fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   203fe:	4615      	mov	r5, r2
   20400:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   20404:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   20406:	f7ff f81c 	bl	1f442 <bt_get_appearance>
	if (offset > value_len) {
   2040a:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2040c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   20410:	d80e      	bhi.n	20430 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   20412:	f1c6 0402 	rsb	r4, r6, #2
   20416:	42bc      	cmp	r4, r7
   20418:	bfa8      	it	ge
   2041a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2041c:	f10d 0306 	add.w	r3, sp, #6
   20420:	4622      	mov	r2, r4
   20422:	1999      	adds	r1, r3, r6
   20424:	4628      	mov	r0, r5
   20426:	f7fe feb8 	bl	1f19a <memcpy>
}
   2042a:	4620      	mov	r0, r4
   2042c:	b003      	add	sp, #12
   2042e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20430:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   20434:	e7f9      	b.n	2042a <read_appearance+0x2e>

00020436 <read_name>:
{
   20436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2043a:	4698      	mov	r8, r3
   2043c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   20440:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   20442:	f7f5 fa67 	bl	15914 <bt_get_name>
   20446:	4607      	mov	r7, r0
				 strlen(name));
   20448:	f7fe fe7b 	bl	1f142 <strlen>
	if (offset > value_len) {
   2044c:	b283      	uxth	r3, r0
   2044e:	42b3      	cmp	r3, r6
   20450:	d30c      	bcc.n	2046c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   20452:	1b9c      	subs	r4, r3, r6
   20454:	4544      	cmp	r4, r8
   20456:	bfa8      	it	ge
   20458:	4644      	movge	r4, r8
   2045a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2045c:	4622      	mov	r2, r4
   2045e:	19b9      	adds	r1, r7, r6
   20460:	4628      	mov	r0, r5
   20462:	f7fe fe9a 	bl	1f19a <memcpy>
}
   20466:	4620      	mov	r0, r4
   20468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2046c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   20470:	e7f9      	b.n	20466 <read_name+0x30>

00020472 <cf_read>:
{
   20472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20474:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   20476:	2300      	movs	r3, #0
{
   20478:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2047c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20480:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   20482:	f7f7 ff89 	bl	18398 <find_cf_cfg>
	if (cfg) {
   20486:	b128      	cbz	r0, 20494 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   20488:	f100 0108 	add.w	r1, r0, #8
   2048c:	2201      	movs	r2, #1
   2048e:	a801      	add	r0, sp, #4
   20490:	f7fe fe83 	bl	1f19a <memcpy>
	if (offset > value_len) {
   20494:	2e01      	cmp	r6, #1
   20496:	d80d      	bhi.n	204b4 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   20498:	f1c6 0401 	rsb	r4, r6, #1
   2049c:	42bc      	cmp	r4, r7
   2049e:	bfa8      	it	ge
   204a0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   204a2:	ab01      	add	r3, sp, #4
   204a4:	4622      	mov	r2, r4
   204a6:	1999      	adds	r1, r3, r6
   204a8:	4628      	mov	r0, r5
   204aa:	f7fe fe76 	bl	1f19a <memcpy>
}
   204ae:	4620      	mov	r0, r4
   204b0:	b003      	add	sp, #12
   204b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   204b4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   204b8:	e7f9      	b.n	204ae <cf_read+0x3c>

000204ba <bt_gatt_attr_read_service>:
{
   204ba:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   204bc:	68c9      	ldr	r1, [r1, #12]
{
   204be:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   204c0:	780a      	ldrb	r2, [r1, #0]
{
   204c2:	461c      	mov	r4, r3
   204c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   204c8:	b992      	cbnz	r2, 204f0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   204ca:	884a      	ldrh	r2, [r1, #2]
   204cc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   204d0:	2b02      	cmp	r3, #2
   204d2:	d818      	bhi.n	20506 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   204d4:	f1c3 0202 	rsb	r2, r3, #2
   204d8:	4294      	cmp	r4, r2
   204da:	bfa8      	it	ge
   204dc:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   204de:	4622      	mov	r2, r4
   204e0:	f10d 0106 	add.w	r1, sp, #6
   204e4:	4419      	add	r1, r3
   204e6:	f7fe fe58 	bl	1f19a <memcpy>
}
   204ea:	4620      	mov	r0, r4
   204ec:	b002      	add	sp, #8
   204ee:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   204f0:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   204f2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   204f6:	d806      	bhi.n	20506 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   204f8:	f1c3 0210 	rsb	r2, r3, #16
   204fc:	4294      	cmp	r4, r2
   204fe:	bfa8      	it	ge
   20500:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   20502:	4622      	mov	r2, r4
   20504:	e7ee      	b.n	204e4 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20506:	f06f 0406 	mvn.w	r4, #6
   2050a:	e7ee      	b.n	204ea <bt_gatt_attr_read_service+0x30>

0002050c <bt_gatt_attr_read_ccc>:
{
   2050c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2050e:	68c9      	ldr	r1, [r1, #12]
{
   20510:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   20514:	4615      	mov	r5, r2
   20516:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   20518:	f7f7 ff66 	bl	183e8 <find_ccc_cfg>
	if (cfg) {
   2051c:	b100      	cbz	r0, 20520 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2051e:	8900      	ldrh	r0, [r0, #8]
   20520:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   20524:	2e02      	cmp	r6, #2
   20526:	d80e      	bhi.n	20546 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   20528:	f1c6 0402 	rsb	r4, r6, #2
   2052c:	42bc      	cmp	r4, r7
   2052e:	bfa8      	it	ge
   20530:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   20532:	f10d 0306 	add.w	r3, sp, #6
   20536:	4622      	mov	r2, r4
   20538:	1999      	adds	r1, r3, r6
   2053a:	4628      	mov	r0, r5
   2053c:	f7fe fe2d 	bl	1f19a <memcpy>
}
   20540:	4620      	mov	r0, r4
   20542:	b003      	add	sp, #12
   20544:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20546:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2054a:	e7f9      	b.n	20540 <bt_gatt_attr_read_ccc+0x34>

0002054c <bt_gatt_attr_read>:
{
   2054c:	b510      	push	{r4, lr}
   2054e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   20552:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   20556:	42a1      	cmp	r1, r4
{
   20558:	4610      	mov	r0, r2
	if (offset > value_len) {
   2055a:	d80b      	bhi.n	20574 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2055c:	1a64      	subs	r4, r4, r1
   2055e:	429c      	cmp	r4, r3
   20560:	bfa8      	it	ge
   20562:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20564:	9b03      	ldr	r3, [sp, #12]
   20566:	b2a4      	uxth	r4, r4
   20568:	4622      	mov	r2, r4
   2056a:	4419      	add	r1, r3
   2056c:	f7fe fe15 	bl	1f19a <memcpy>
}
   20570:	4620      	mov	r0, r4
   20572:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20574:	f06f 0406 	mvn.w	r4, #6
   20578:	e7fa      	b.n	20570 <bt_gatt_attr_read+0x24>

0002057a <bt_gatt_attr_value_handle>:
{
   2057a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2057c:	4604      	mov	r4, r0
   2057e:	b910      	cbnz	r0, 20586 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   20580:	2000      	movs	r0, #0
}
   20582:	b002      	add	sp, #8
   20584:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   20586:	2300      	movs	r3, #0
   20588:	f88d 3004 	strb.w	r3, [sp, #4]
   2058c:	6800      	ldr	r0, [r0, #0]
   2058e:	f642 0303 	movw	r3, #10243	; 0x2803
   20592:	a901      	add	r1, sp, #4
   20594:	f8ad 3006 	strh.w	r3, [sp, #6]
   20598:	f7fe fe28 	bl	1f1ec <bt_uuid_cmp>
   2059c:	2800      	cmp	r0, #0
   2059e:	d1ef      	bne.n	20580 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   205a0:	68e3      	ldr	r3, [r4, #12]
   205a2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   205a4:	2800      	cmp	r0, #0
   205a6:	d1ec      	bne.n	20582 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   205a8:	4620      	mov	r0, r4
   205aa:	f7f8 f92d 	bl	18808 <bt_gatt_attr_get_handle>
   205ae:	3001      	adds	r0, #1
   205b0:	b280      	uxth	r0, r0
	return handle;
   205b2:	e7e6      	b.n	20582 <bt_gatt_attr_value_handle+0x8>

000205b4 <bt_gatt_attr_read_chrc>:
{
   205b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   205b6:	68cc      	ldr	r4, [r1, #12]
{
   205b8:	b087      	sub	sp, #28
   205ba:	4608      	mov	r0, r1
   205bc:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   205be:	79a3      	ldrb	r3, [r4, #6]
   205c0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   205c4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   205c8:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   205ca:	f7ff ffd6 	bl	2057a <bt_gatt_attr_value_handle>
   205ce:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   205d2:	6821      	ldr	r1, [r4, #0]
   205d4:	780b      	ldrb	r3, [r1, #0]
   205d6:	b99b      	cbnz	r3, 20600 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   205d8:	884b      	ldrh	r3, [r1, #2]
   205da:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   205de:	2405      	movs	r4, #5
	if (offset > value_len) {
   205e0:	42b4      	cmp	r4, r6
   205e2:	d315      	bcc.n	20610 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   205e4:	1ba4      	subs	r4, r4, r6
   205e6:	42bc      	cmp	r4, r7
   205e8:	bfa8      	it	ge
   205ea:	463c      	movge	r4, r7
   205ec:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   205ee:	ab01      	add	r3, sp, #4
   205f0:	4622      	mov	r2, r4
   205f2:	1999      	adds	r1, r3, r6
   205f4:	4628      	mov	r0, r5
   205f6:	f7fe fdd0 	bl	1f19a <memcpy>
}
   205fa:	4620      	mov	r0, r4
   205fc:	b007      	add	sp, #28
   205fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   20600:	2210      	movs	r2, #16
   20602:	3101      	adds	r1, #1
   20604:	f10d 0007 	add.w	r0, sp, #7
   20608:	f7fe fdc7 	bl	1f19a <memcpy>
		value_len += 16U;
   2060c:	2413      	movs	r4, #19
   2060e:	e7e7      	b.n	205e0 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20610:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   20614:	e7f1      	b.n	205fa <bt_gatt_attr_read_chrc+0x46>

00020616 <bt_gatt_foreach_attr>:
{
   20616:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20618:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2061c:	2300      	movs	r3, #0
   2061e:	9300      	str	r3, [sp, #0]
   20620:	461a      	mov	r2, r3
   20622:	f7f8 f921 	bl	18868 <bt_gatt_foreach_attr_type>
}
   20626:	b005      	add	sp, #20
   20628:	f85d fb04 	ldr.w	pc, [sp], #4

0002062c <db_hash_process>:
	db_hash_gen(true);
   2062c:	f7f8 b976 	b.w	1891c <db_hash_gen.constprop.0>

00020630 <bt_gatt_check_perm>:
{
   20630:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   20632:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   20634:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   20636:	d504      	bpl.n	20642 <bt_gatt_check_perm+0x12>
   20638:	f013 0f95 	tst.w	r3, #149	; 0x95
   2063c:	d01d      	beq.n	2067a <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2063e:	684c      	ldr	r4, [r1, #4]
   20640:	b1dc      	cbz	r4, 2067a <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   20642:	0794      	lsls	r4, r2, #30
   20644:	d504      	bpl.n	20650 <bt_gatt_check_perm+0x20>
   20646:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2064a:	d018      	beq.n	2067e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2064c:	6889      	ldr	r1, [r1, #8]
   2064e:	b1b1      	cbz	r1, 2067e <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   20650:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   20654:	f414 7fc0 	tst.w	r4, #384	; 0x180
   20658:	d001      	beq.n	2065e <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   2065a:	2005      	movs	r0, #5
}
   2065c:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2065e:	f014 0f30 	tst.w	r4, #48	; 0x30
   20662:	d105      	bne.n	20670 <bt_gatt_check_perm+0x40>
	return 0;
   20664:	f014 0f0c 	tst.w	r4, #12
   20668:	bf14      	ite	ne
   2066a:	200f      	movne	r0, #15
   2066c:	2000      	moveq	r0, #0
   2066e:	e7f5      	b.n	2065c <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   20670:	f7ff f8a0 	bl	1f7b4 <bt_conn_get_security>
   20674:	2802      	cmp	r0, #2
   20676:	d8f5      	bhi.n	20664 <bt_gatt_check_perm+0x34>
   20678:	e7ef      	b.n	2065a <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2067a:	2002      	movs	r0, #2
   2067c:	e7ee      	b.n	2065c <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2067e:	2003      	movs	r0, #3
   20680:	e7ec      	b.n	2065c <bt_gatt_check_perm+0x2c>

00020682 <bt_gatt_is_subscribed>:
{
   20682:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   20686:	7a83      	ldrb	r3, [r0, #10]
   20688:	2b07      	cmp	r3, #7
{
   2068a:	4605      	mov	r5, r0
   2068c:	460c      	mov	r4, r1
   2068e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   20690:	d110      	bne.n	206b4 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   20692:	2300      	movs	r3, #0
   20694:	f88d 300c 	strb.w	r3, [sp, #12]
   20698:	6820      	ldr	r0, [r4, #0]
   2069a:	f642 0303 	movw	r3, #10243	; 0x2803
   2069e:	a903      	add	r1, sp, #12
   206a0:	f8ad 300e 	strh.w	r3, [sp, #14]
   206a4:	f7fe fda2 	bl	1f1ec <bt_uuid_cmp>
   206a8:	b960      	cbnz	r0, 206c4 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   206aa:	68e3      	ldr	r3, [r4, #12]
   206ac:	799b      	ldrb	r3, [r3, #6]
   206ae:	f013 0f30 	tst.w	r3, #48	; 0x30
   206b2:	d103      	bne.n	206bc <bt_gatt_is_subscribed+0x3a>
		return false;
   206b4:	2000      	movs	r0, #0
}
   206b6:	b004      	add	sp, #16
   206b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   206bc:	4620      	mov	r0, r4
   206be:	f7f8 f9bd 	bl	18a3c <bt_gatt_attr_next>
   206c2:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   206c4:	2300      	movs	r3, #0
   206c6:	6820      	ldr	r0, [r4, #0]
   206c8:	f88d 300c 	strb.w	r3, [sp, #12]
   206cc:	a903      	add	r1, sp, #12
   206ce:	f642 1302 	movw	r3, #10498	; 0x2902
   206d2:	f8ad 300e 	strh.w	r3, [sp, #14]
   206d6:	f7fe fd89 	bl	1f1ec <bt_uuid_cmp>
   206da:	b118      	cbz	r0, 206e4 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   206dc:	4620      	mov	r0, r4
   206de:	f7f8 f9ad 	bl	18a3c <bt_gatt_attr_next>
   206e2:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   206e4:	2600      	movs	r6, #0
   206e6:	f642 1802 	movw	r8, #10498	; 0x2902
   206ea:	6820      	ldr	r0, [r4, #0]
   206ec:	f88d 6000 	strb.w	r6, [sp]
   206f0:	4669      	mov	r1, sp
   206f2:	f8ad 8002 	strh.w	r8, [sp, #2]
   206f6:	f7fe fd79 	bl	1f1ec <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   206fa:	b9d8      	cbnz	r0, 20734 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   206fc:	2300      	movs	r3, #0
   206fe:	6820      	ldr	r0, [r4, #0]
   20700:	f88d 300c 	strb.w	r3, [sp, #12]
   20704:	a903      	add	r1, sp, #12
   20706:	f642 1302 	movw	r3, #10498	; 0x2902
   2070a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2070e:	f7fe fd6d 	bl	1f1ec <bt_uuid_cmp>
   20712:	2800      	cmp	r0, #0
   20714:	d1ce      	bne.n	206b4 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   20716:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   20718:	4622      	mov	r2, r4
   2071a:	4628      	mov	r0, r5
   2071c:	f812 1b01 	ldrb.w	r1, [r2], #1
   20720:	f7ff f84a 	bl	1f7b8 <bt_conn_is_peer_addr_le>
   20724:	2800      	cmp	r0, #0
   20726:	d0c5      	beq.n	206b4 <bt_gatt_is_subscribed+0x32>
   20728:	8923      	ldrh	r3, [r4, #8]
   2072a:	421f      	tst	r7, r3
   2072c:	bf14      	ite	ne
   2072e:	2001      	movne	r0, #1
   20730:	2000      	moveq	r0, #0
   20732:	e7c0      	b.n	206b6 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   20734:	6820      	ldr	r0, [r4, #0]
   20736:	f88d 6004 	strb.w	r6, [sp, #4]
   2073a:	f642 0303 	movw	r3, #10243	; 0x2803
   2073e:	a901      	add	r1, sp, #4
   20740:	f8ad 3006 	strh.w	r3, [sp, #6]
   20744:	f7fe fd52 	bl	1f1ec <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   20748:	2800      	cmp	r0, #0
   2074a:	d0d7      	beq.n	206fc <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2074c:	6820      	ldr	r0, [r4, #0]
   2074e:	f88d 6008 	strb.w	r6, [sp, #8]
   20752:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   20756:	a902      	add	r1, sp, #8
   20758:	f8ad 300a 	strh.w	r3, [sp, #10]
   2075c:	f7fe fd46 	bl	1f1ec <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   20760:	2800      	cmp	r0, #0
   20762:	d0cb      	beq.n	206fc <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   20764:	6820      	ldr	r0, [r4, #0]
   20766:	f88d 600c 	strb.w	r6, [sp, #12]
   2076a:	f642 0301 	movw	r3, #10241	; 0x2801
   2076e:	a903      	add	r1, sp, #12
   20770:	f8ad 300e 	strh.w	r3, [sp, #14]
   20774:	f7fe fd3a 	bl	1f1ec <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   20778:	2800      	cmp	r0, #0
   2077a:	d0bf      	beq.n	206fc <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2077c:	4620      	mov	r0, r4
   2077e:	f7f8 f95d 	bl	18a3c <bt_gatt_attr_next>
		if (!attr) {
   20782:	4604      	mov	r4, r0
   20784:	2800      	cmp	r0, #0
   20786:	d1b0      	bne.n	206ea <bt_gatt_is_subscribed+0x68>
   20788:	e794      	b.n	206b4 <bt_gatt_is_subscribed+0x32>

0002078a <bt_gatt_change_aware>:
{
   2078a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2078c:	4606      	mov	r6, r0
   2078e:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   20790:	f7f7 fe02 	bl	18398 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   20794:	b318      	cbz	r0, 207de <bt_gatt_change_aware+0x54>
   20796:	7a03      	ldrb	r3, [r0, #8]
   20798:	07db      	lsls	r3, r3, #31
   2079a:	d520      	bpl.n	207de <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2079c:	f3bf 8f5b 	dmb	ish
   207a0:	68c5      	ldr	r5, [r0, #12]
   207a2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   207a6:	f015 0501 	ands.w	r5, r5, #1
   207aa:	f100 040c 	add.w	r4, r0, #12
   207ae:	d116      	bne.n	207de <bt_gatt_change_aware+0x54>
	if (!req) {
   207b0:	b1b7      	cbz	r7, 207e0 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   207b2:	f3bf 8f5b 	dmb	ish
   207b6:	e854 1f00 	ldrex	r1, [r4]
   207ba:	f021 0302 	bic.w	r3, r1, #2
   207be:	e844 3200 	strex	r2, r3, [r4]
   207c2:	2a00      	cmp	r2, #0
   207c4:	d1f7      	bne.n	207b6 <bt_gatt_change_aware+0x2c>
   207c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   207ca:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   207ce:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   207d0:	d008      	beq.n	207e4 <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   207d2:	f7ff fcef 	bl	201b4 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   207d6:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   207d8:	4620      	mov	r0, r4
   207da:	f7ff fdbe 	bl	2035a <atomic_set_bit>
		return true;
   207de:	2501      	movs	r5, #1
}
   207e0:	4628      	mov	r0, r5
   207e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   207e4:	f7ff fce4 	bl	201b0 <bt_att_fixed_chan_only>
   207e8:	2800      	cmp	r0, #0
   207ea:	d0f9      	beq.n	207e0 <bt_gatt_change_aware+0x56>
   207ec:	4630      	mov	r0, r6
   207ee:	f7ff fcfa 	bl	201e6 <bt_att_out_of_sync_sent_on_fixed>
   207f2:	2800      	cmp	r0, #0
   207f4:	d0f4      	beq.n	207e0 <bt_gatt_change_aware+0x56>
   207f6:	f3bf 8f5b 	dmb	ish
   207fa:	e854 3f00 	ldrex	r3, [r4]
   207fe:	f023 0302 	bic.w	r3, r3, #2
   20802:	e844 3200 	strex	r2, r3, [r4]
   20806:	2a00      	cmp	r2, #0
   20808:	d1f7      	bne.n	207fa <bt_gatt_change_aware+0x70>
   2080a:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2080e:	4630      	mov	r0, r6
   20810:	f7ff fcd0 	bl	201b4 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   20814:	4639      	mov	r1, r7
   20816:	e7df      	b.n	207d8 <bt_gatt_change_aware+0x4e>

00020818 <bt_smp_recv>:
{
   20818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2081a:	2100      	movs	r1, #0
   2081c:	f04f 32ff 	mov.w	r2, #4294967295
   20820:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   20824:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   20826:	4608      	mov	r0, r1
   20828:	f7ff f85b 	bl	1f8e2 <bt_l2cap_create_pdu_timeout>
   2082c:	f100 060c 	add.w	r6, r0, #12
   20830:	4604      	mov	r4, r0
   20832:	2101      	movs	r1, #1
   20834:	4630      	mov	r0, r6
   20836:	f000 f87b 	bl	20930 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2083a:	2505      	movs	r5, #5
   2083c:	7005      	strb	r5, [r0, #0]
   2083e:	2101      	movs	r1, #1
   20840:	4630      	mov	r0, r6
   20842:	f000 f875 	bl	20930 <net_buf_simple_add>
   20846:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   20848:	7005      	strb	r5, [r0, #0]
   2084a:	4622      	mov	r2, r4
   2084c:	9300      	str	r3, [sp, #0]
   2084e:	2106      	movs	r1, #6
   20850:	4638      	mov	r0, r7
   20852:	f7ff f849 	bl	1f8e8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   20856:	b110      	cbz	r0, 2085e <bt_smp_recv+0x46>
		net_buf_unref(buf);
   20858:	4620      	mov	r0, r4
   2085a:	f7f8 fccb 	bl	191f4 <net_buf_unref>
}
   2085e:	2000      	movs	r0, #0
   20860:	b003      	add	sp, #12
   20862:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020864 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   20864:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20868:	4770      	bx	lr

0002086a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2086a:	2000      	movs	r0, #0
   2086c:	4770      	bx	lr

0002086e <fixed_data_unref>:
}
   2086e:	4770      	bx	lr

00020870 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20870:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   20872:	6849      	ldr	r1, [r1, #4]
   20874:	6809      	ldr	r1, [r1, #0]
   20876:	f7f8 bc2b 	b.w	190d0 <net_buf_alloc_len>

0002087a <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2087a:	f7fc b83b 	b.w	1c8f4 <z_impl_k_queue_get>

0002087e <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2087e:	6883      	ldr	r3, [r0, #8]
   20880:	440b      	add	r3, r1
   20882:	6003      	str	r3, [r0, #0]
}
   20884:	4770      	bx	lr

00020886 <net_buf_slist_put>:
	__asm__ volatile(
   20886:	f04f 0340 	mov.w	r3, #64	; 0x40
   2088a:	f3ef 8211 	mrs	r2, BASEPRI
   2088e:	f383 8812 	msr	BASEPRI_MAX, r3
   20892:	f3bf 8f6f 	isb	sy
	parent->next = child;
   20896:	2300      	movs	r3, #0
   20898:	600b      	str	r3, [r1, #0]
	return list->tail;
   2089a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2089c:	b933      	cbnz	r3, 208ac <net_buf_slist_put+0x26>
	list->head = node;
   2089e:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   208a2:	f382 8811 	msr	BASEPRI, r2
   208a6:	f3bf 8f6f 	isb	sy
}
   208aa:	4770      	bx	lr
	parent->next = child;
   208ac:	6019      	str	r1, [r3, #0]
	list->tail = node;
   208ae:	6041      	str	r1, [r0, #4]
}
   208b0:	e7f7      	b.n	208a2 <net_buf_slist_put+0x1c>

000208b2 <net_buf_slist_get>:
{
   208b2:	b510      	push	{r4, lr}
   208b4:	4603      	mov	r3, r0
	__asm__ volatile(
   208b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   208ba:	f3ef 8111 	mrs	r1, BASEPRI
   208be:	f382 8812 	msr	BASEPRI_MAX, r2
   208c2:	f3bf 8f6f 	isb	sy
	return list->head;
   208c6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   208c8:	b128      	cbz	r0, 208d6 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   208ca:	685c      	ldr	r4, [r3, #4]
	return node->next;
   208cc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   208ce:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   208d0:	42a0      	cmp	r0, r4
	list->tail = node;
   208d2:	bf08      	it	eq
   208d4:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   208d6:	f381 8811 	msr	BASEPRI, r1
   208da:	f3bf 8f6f 	isb	sy
}
   208de:	bd10      	pop	{r4, pc}

000208e0 <net_buf_put>:
	k_fifo_put(fifo, buf);
   208e0:	f000 bcda 	b.w	21298 <k_queue_append>

000208e4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   208e4:	7a02      	ldrb	r2, [r0, #8]
   208e6:	3201      	adds	r2, #1
   208e8:	7202      	strb	r2, [r0, #8]
	return buf;
}
   208ea:	4770      	bx	lr

000208ec <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   208ec:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   208ee:	4618      	mov	r0, r3
   208f0:	685b      	ldr	r3, [r3, #4]
   208f2:	2b00      	cmp	r3, #0
   208f4:	d1fb      	bne.n	208ee <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   208f6:	4770      	bx	lr

000208f8 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   208f8:	6842      	ldr	r2, [r0, #4]
{
   208fa:	b510      	push	{r4, lr}
	if (parent->frags) {
   208fc:	b12a      	cbz	r2, 2090a <net_buf_frag_insert+0x12>
   208fe:	460b      	mov	r3, r1
	while (buf->frags) {
   20900:	461c      	mov	r4, r3
   20902:	685b      	ldr	r3, [r3, #4]
   20904:	2b00      	cmp	r3, #0
   20906:	d1fb      	bne.n	20900 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   20908:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2090a:	6041      	str	r1, [r0, #4]
}
   2090c:	bd10      	pop	{r4, pc}

0002090e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2090e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   20910:	4604      	mov	r4, r0
   20912:	b920      	cbnz	r0, 2091e <net_buf_frag_add+0x10>
	buf->ref++;
   20914:	7a0b      	ldrb	r3, [r1, #8]
   20916:	3301      	adds	r3, #1
   20918:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   2091a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2091c:	bd10      	pop	{r4, pc}
   2091e:	4603      	mov	r3, r0
	while (buf->frags) {
   20920:	4618      	mov	r0, r3
   20922:	685b      	ldr	r3, [r3, #4]
   20924:	2b00      	cmp	r3, #0
   20926:	d1fb      	bne.n	20920 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   20928:	f7ff ffe6 	bl	208f8 <net_buf_frag_insert>
   2092c:	4620      	mov	r0, r4
   2092e:	e7f5      	b.n	2091c <net_buf_frag_add+0xe>

00020930 <net_buf_simple_add>:
	return buf->data + buf->len;
   20930:	8883      	ldrh	r3, [r0, #4]
   20932:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   20934:	4419      	add	r1, r3
   20936:	8081      	strh	r1, [r0, #4]
	return tail;
}
   20938:	18d0      	adds	r0, r2, r3
   2093a:	4770      	bx	lr

0002093c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2093c:	b430      	push	{r4, r5}
   2093e:	8884      	ldrh	r4, [r0, #4]
   20940:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   20942:	18a3      	adds	r3, r4, r2
   20944:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   20946:	1928      	adds	r0, r5, r4
}
   20948:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2094a:	f7fe bc26 	b.w	1f19a <memcpy>

0002094e <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2094e:	b510      	push	{r4, lr}
   20950:	8883      	ldrh	r3, [r0, #4]
   20952:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   20954:	1c5c      	adds	r4, r3, #1
   20956:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   20958:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2095a:	18d0      	adds	r0, r2, r3
   2095c:	bd10      	pop	{r4, pc}

0002095e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2095e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   20960:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   20962:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   20964:	1a40      	subs	r0, r0, r1
	buf->len += len;
   20966:	4411      	add	r1, r2
	buf->data -= len;
   20968:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2096a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2096c:	4770      	bx	lr

0002096e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2096e:	8882      	ldrh	r2, [r0, #4]
   20970:	1a52      	subs	r2, r2, r1
{
   20972:	4603      	mov	r3, r0
	buf->len -= len;
   20974:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   20976:	6800      	ldr	r0, [r0, #0]
   20978:	4408      	add	r0, r1
   2097a:	6018      	str	r0, [r3, #0]
}
   2097c:	4770      	bx	lr

0002097e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2097e:	4603      	mov	r3, r0
	void *data = buf->data;
   20980:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20982:	889a      	ldrh	r2, [r3, #4]
   20984:	1a52      	subs	r2, r2, r1
	buf->data += len;
   20986:	4401      	add	r1, r0
	buf->len -= len;
   20988:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2098a:	6019      	str	r1, [r3, #0]

	return data;
}
   2098c:	4770      	bx	lr

0002098e <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2098e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   20990:	6803      	ldr	r3, [r0, #0]
   20992:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   20994:	2102      	movs	r1, #2
   20996:	f7ff ffea 	bl	2096e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2099a:	4620      	mov	r0, r4
   2099c:	bd10      	pop	{r4, pc}

0002099e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2099e:	6802      	ldr	r2, [r0, #0]
   209a0:	6880      	ldr	r0, [r0, #8]
}
   209a2:	1a10      	subs	r0, r2, r0
   209a4:	4770      	bx	lr

000209a6 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   209a6:	8883      	ldrh	r3, [r0, #4]
   209a8:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   209aa:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   209ac:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   209ae:	6803      	ldr	r3, [r0, #0]
   209b0:	1a5b      	subs	r3, r3, r1
}
   209b2:	1ad0      	subs	r0, r2, r3
   209b4:	4770      	bx	lr

000209b6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   209b6:	6903      	ldr	r3, [r0, #16]
   209b8:	b2c9      	uxtb	r1, r1
   209ba:	220c      	movs	r2, #12
   209bc:	fb01 3302 	mla	r3, r1, r2, r3
   209c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   209c2:	f000 0007 	and.w	r0, r0, #7
   209c6:	4770      	bx	lr

000209c8 <set_on_state>:
	__asm__ volatile(
   209c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   209cc:	f3ef 8211 	mrs	r2, BASEPRI
   209d0:	f383 8812 	msr	BASEPRI_MAX, r3
   209d4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   209d8:	6803      	ldr	r3, [r0, #0]
   209da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   209de:	f043 0302 	orr.w	r3, r3, #2
   209e2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   209e4:	f382 8811 	msr	BASEPRI, r2
   209e8:	f3bf 8f6f 	isb	sy
}
   209ec:	4770      	bx	lr

000209ee <stop>:
{
   209ee:	b570      	push	{r4, r5, r6, lr}
   209f0:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   209f2:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   209f4:	f04f 0440 	mov.w	r4, #64	; 0x40
   209f8:	f3ef 8511 	mrs	r5, BASEPRI
   209fc:	f384 8812 	msr	BASEPRI_MAX, r4
   20a00:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20a04:	260c      	movs	r6, #12
   20a06:	fb06 3401 	mla	r4, r6, r1, r3
   20a0a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   20a0c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   20a10:	d008      	beq.n	20a24 <stop+0x36>
   20a12:	42a2      	cmp	r2, r4
   20a14:	d006      	beq.n	20a24 <stop+0x36>
	__asm__ volatile(
   20a16:	f385 8811 	msr	BASEPRI, r5
   20a1a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   20a1e:	f04f 30ff 	mov.w	r0, #4294967295
}
   20a22:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   20a24:	4371      	muls	r1, r6
   20a26:	440b      	add	r3, r1
   20a28:	2201      	movs	r2, #1
   20a2a:	641a      	str	r2, [r3, #64]	; 0x40
   20a2c:	f385 8811 	msr	BASEPRI, r5
   20a30:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   20a34:	6843      	ldr	r3, [r0, #4]
   20a36:	440b      	add	r3, r1
   20a38:	685b      	ldr	r3, [r3, #4]
   20a3a:	4798      	blx	r3
	return 0;
   20a3c:	2000      	movs	r0, #0
   20a3e:	e7f0      	b.n	20a22 <stop+0x34>

00020a40 <api_stop>:
	return stop(dev, subsys, CTX_API);
   20a40:	2280      	movs	r2, #128	; 0x80
   20a42:	f7ff bfd4 	b.w	209ee <stop>

00020a46 <async_start>:
{
   20a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a48:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   20a4a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   20a4c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   20a4e:	f04f 0540 	mov.w	r5, #64	; 0x40
   20a52:	f3ef 8611 	mrs	r6, BASEPRI
   20a56:	f385 8812 	msr	BASEPRI_MAX, r5
   20a5a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20a5e:	250c      	movs	r5, #12
   20a60:	4369      	muls	r1, r5
   20a62:	440c      	add	r4, r1
   20a64:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   20a66:	f005 0c07 	and.w	ip, r5, #7
   20a6a:	f1bc 0f01 	cmp.w	ip, #1
   20a6e:	d10b      	bne.n	20a88 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   20a70:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   20a72:	f386 8811 	msr	BASEPRI, r6
   20a76:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   20a7a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   20a7e:	6843      	ldr	r3, [r0, #4]
   20a80:	585b      	ldr	r3, [r3, r1]
   20a82:	4798      	blx	r3
	return 0;
   20a84:	2000      	movs	r0, #0
}
   20a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   20a88:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   20a8c:	42af      	cmp	r7, r5
   20a8e:	f386 8811 	msr	BASEPRI, r6
   20a92:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   20a96:	bf0c      	ite	eq
   20a98:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   20a9c:	f04f 30ff 	movne.w	r0, #4294967295
   20aa0:	e7f1      	b.n	20a86 <async_start+0x40>

00020aa2 <api_start>:
{
   20aa2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   20aa4:	2480      	movs	r4, #128	; 0x80
   20aa6:	9400      	str	r4, [sp, #0]
   20aa8:	f7ff ffcd 	bl	20a46 <async_start>
}
   20aac:	b002      	add	sp, #8
   20aae:	bd10      	pop	{r4, pc}

00020ab0 <onoff_started_callback>:
{
   20ab0:	b410      	push	{r4}
	return &data->mgr[type];
   20ab2:	6900      	ldr	r0, [r0, #16]
   20ab4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   20ab6:	241c      	movs	r4, #28
   20ab8:	fb03 0004 	mla	r0, r3, r4, r0
   20abc:	2100      	movs	r1, #0
}
   20abe:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   20ac2:	4710      	bx	r2

00020ac4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   20ac4:	2000      	movs	r0, #0
   20ac6:	f7fa bbbd 	b.w	1b244 <nrfx_clock_start>

00020aca <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20aca:	2000      	movs	r0, #0
   20acc:	f000 b92b 	b.w	20d26 <nrfx_clock_stop>

00020ad0 <blocking_start_callback>:
{
   20ad0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   20ad2:	f7fb bf43 	b.w	1c95c <z_impl_k_sem_give>

00020ad6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20ad6:	6843      	ldr	r3, [r0, #4]
   20ad8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   20ada:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   20ade:	600b      	str	r3, [r1, #0]
}
   20ae0:	2000      	movs	r0, #0
   20ae2:	4770      	bx	lr

00020ae4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20ae4:	6843      	ldr	r3, [r0, #4]
   20ae6:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   20ae8:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   20aec:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   20af0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   20af4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   20af8:	2000      	movs	r0, #0
   20afa:	4770      	bx	lr

00020afc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20afc:	6843      	ldr	r3, [r0, #4]
   20afe:	685b      	ldr	r3, [r3, #4]
}
   20b00:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   20b02:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   20b06:	4770      	bx	lr

00020b08 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20b08:	6843      	ldr	r3, [r0, #4]
   20b0a:	685b      	ldr	r3, [r3, #4]
}
   20b0c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   20b0e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   20b12:	4770      	bx	lr

00020b14 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20b14:	6843      	ldr	r3, [r0, #4]
   20b16:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20b18:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   20b1c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   20b20:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   20b22:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   20b26:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   20b2a:	2000      	movs	r0, #0
   20b2c:	4770      	bx	lr

00020b2e <gpio_nrfx_manage_callback>:
{
   20b2e:	b510      	push	{r4, lr}
	return port->data;
   20b30:	6903      	ldr	r3, [r0, #16]
	return list->head;
   20b32:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   20b34:	b1f8      	cbz	r0, 20b76 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20b36:	4288      	cmp	r0, r1
   20b38:	d119      	bne.n	20b6e <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   20b3a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   20b3c:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   20b3e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   20b40:	42a1      	cmp	r1, r4
   20b42:	d100      	bne.n	20b46 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   20b44:	6098      	str	r0, [r3, #8]
	parent->next = child;
   20b46:	2000      	movs	r0, #0
   20b48:	6008      	str	r0, [r1, #0]
	if (set) {
   20b4a:	b12a      	cbz	r2, 20b58 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   20b4c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   20b4e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   20b50:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   20b52:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   20b54:	b902      	cbnz	r2, 20b58 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   20b56:	6099      	str	r1, [r3, #8]
	return 0;
   20b58:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20b5a:	e010      	b.n	20b7e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20b5c:	4281      	cmp	r1, r0
   20b5e:	d106      	bne.n	20b6e <gpio_nrfx_manage_callback+0x40>
	return node->next;
   20b60:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   20b62:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   20b64:	6898      	ldr	r0, [r3, #8]
   20b66:	4281      	cmp	r1, r0
   20b68:	d1ed      	bne.n	20b46 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   20b6a:	609c      	str	r4, [r3, #8]
}
   20b6c:	e7eb      	b.n	20b46 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   20b6e:	4604      	mov	r4, r0
   20b70:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20b72:	2800      	cmp	r0, #0
   20b74:	d1f2      	bne.n	20b5c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   20b76:	2a00      	cmp	r2, #0
   20b78:	d1e8      	bne.n	20b4c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   20b7a:	f06f 0015 	mvn.w	r0, #21
}
   20b7e:	bd10      	pop	{r4, pc}

00020b80 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   20b80:	2000      	movs	r0, #0
   20b82:	4770      	bx	lr

00020b84 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   20b84:	b538      	push	{r3, r4, r5, lr}
   20b86:	460c      	mov	r4, r1
   20b88:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   20b8a:	f7f4 fdeb 	bl	15764 <bt_is_ready>
   20b8e:	b128      	cbz	r0, 20b9c <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   20b90:	4629      	mov	r1, r5
   20b92:	4620      	mov	r0, r4
}
   20b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   20b98:	f7f3 bff4 	b.w	14b84 <bt_hci_le_rand>
}
   20b9c:	f06f 000a 	mvn.w	r0, #10
   20ba0:	bd38      	pop	{r3, r4, r5, pc}

00020ba2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   20ba2:	4770      	bx	lr

00020ba4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20ba4:	f100 0350 	add.w	r3, r0, #80	; 0x50
   20ba8:	009b      	lsls	r3, r3, #2
   20baa:	b29b      	uxth	r3, r3
   20bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20bb0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   20bb4:	2200      	movs	r2, #0
   20bb6:	601a      	str	r2, [r3, #0]
   20bb8:	681b      	ldr	r3, [r3, #0]
}
   20bba:	4770      	bx	lr

00020bbc <sys_clock_cycle_get_32>:
{
   20bbc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   20bbe:	f7f9 f95d 	bl	19e7c <z_nrf_rtc_timer_read>
}
   20bc2:	bd08      	pop	{r3, pc}

00020bc4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   20bc4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   20bc6:	6843      	ldr	r3, [r0, #4]
   20bc8:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   20bca:	7a05      	ldrb	r5, [r0, #8]
   20bcc:	6844      	ldr	r4, [r0, #4]
   20bce:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   20bd2:	42a3      	cmp	r3, r4
   20bd4:	d302      	bcc.n	20bdc <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   20bd6:	f06f 0001 	mvn.w	r0, #1
}
   20bda:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   20bdc:	795c      	ldrb	r4, [r3, #5]
   20bde:	428c      	cmp	r4, r1
   20be0:	d001      	beq.n	20be6 <pinctrl_lookup_state+0x22>
		(*state)++;
   20be2:	3308      	adds	r3, #8
   20be4:	e7f0      	b.n	20bc8 <pinctrl_lookup_state+0x4>
			return 0;
   20be6:	2000      	movs	r0, #0
   20be8:	e7f7      	b.n	20bda <pinctrl_lookup_state+0x16>

00020bea <hci_driver_close>:
{
   20bea:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   20bec:	f7fa fa5a 	bl	1b0a4 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   20bf0:	f04f 30ff 	mov.w	r0, #4294967295
   20bf4:	f04f 31ff 	mov.w	r1, #4294967295
   20bf8:	f7f9 fb0a 	bl	1a210 <multithreading_lock_acquire>
	if (err) {
   20bfc:	4604      	mov	r4, r0
   20bfe:	b920      	cbnz	r0, 20c0a <hci_driver_close+0x20>
	err = sdc_disable();
   20c00:	f7df fe68 	bl	8d4 <sdc_disable>
	if (err) {
   20c04:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   20c06:	f7f9 fb0b 	bl	1a220 <multithreading_lock_release>
}
   20c0a:	4620      	mov	r0, r4
   20c0c:	bd10      	pop	{r4, pc}

00020c0e <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   20c0e:	f7f9 bb47 	b.w	1a2a0 <rand_prio_low_vector_get>

00020c12 <hci_driver_send>:
{
   20c12:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   20c14:	8a03      	ldrh	r3, [r0, #16]
{
   20c16:	4605      	mov	r5, r0
	if (!buf->len) {
   20c18:	b373      	cbz	r3, 20c78 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   20c1a:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   20c1c:	b1a3      	cbz	r3, 20c48 <hci_driver_send+0x36>
   20c1e:	2b02      	cmp	r3, #2
   20c20:	d12a      	bne.n	20c78 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20c22:	f04f 30ff 	mov.w	r0, #4294967295
   20c26:	f04f 31ff 	mov.w	r1, #4294967295
   20c2a:	f7f9 faf1 	bl	1a210 <multithreading_lock_acquire>
	if (!errcode) {
   20c2e:	4604      	mov	r4, r0
   20c30:	b940      	cbnz	r0, 20c44 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   20c32:	68e8      	ldr	r0, [r5, #12]
   20c34:	f7eb fd41 	bl	c6ba <sdc_hci_data_put>
   20c38:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20c3a:	f7f9 faf1 	bl	1a220 <multithreading_lock_release>
		if (errcode) {
   20c3e:	b1b4      	cbz	r4, 20c6e <hci_driver_send+0x5c>
			receive_signal_raise();
   20c40:	f7f9 fb42 	bl	1a2c8 <receive_signal_raise>
}
   20c44:	4620      	mov	r0, r4
   20c46:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20c48:	f04f 30ff 	mov.w	r0, #4294967295
   20c4c:	f04f 31ff 	mov.w	r1, #4294967295
   20c50:	f7f9 fade 	bl	1a210 <multithreading_lock_acquire>
	if (!errcode) {
   20c54:	4604      	mov	r4, r0
   20c56:	2800      	cmp	r0, #0
   20c58:	d1f4      	bne.n	20c44 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   20c5a:	68e8      	ldr	r0, [r5, #12]
   20c5c:	f7f9 fcba 	bl	1a5d4 <hci_internal_cmd_put>
   20c60:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20c62:	f7f9 fadd 	bl	1a220 <multithreading_lock_release>
	if (errcode) {
   20c66:	2c00      	cmp	r4, #0
   20c68:	d1ec      	bne.n	20c44 <hci_driver_send+0x32>
	receive_signal_raise();
   20c6a:	f7f9 fb2d 	bl	1a2c8 <receive_signal_raise>
		net_buf_unref(buf);
   20c6e:	4628      	mov	r0, r5
   20c70:	f7f8 fac0 	bl	191f4 <net_buf_unref>
   20c74:	2400      	movs	r4, #0
   20c76:	e7e5      	b.n	20c44 <hci_driver_send+0x32>
	switch (type) {
   20c78:	f06f 0415 	mvn.w	r4, #21
   20c7c:	e7e2      	b.n	20c44 <hci_driver_send+0x32>

00020c7e <receive_work_handler>:
	hci_driver_receive_process();
   20c7e:	f7f9 bc2d 	b.w	1a4dc <hci_driver_receive_process>

00020c82 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   20c82:	f101 0320 	add.w	r3, r1, #32
   20c86:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   20c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20c8c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   20c90:	428b      	cmp	r3, r1
   20c92:	d1f9      	bne.n	20c88 <sys_memcpy_swap.constprop.0+0x6>
}
   20c94:	4770      	bx	lr

00020c96 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   20c96:	2100      	movs	r1, #0
   20c98:	f7fa ba26 	b.w	1b0e8 <cmd_le_generate_dhkey>

00020c9c <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   20c9c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   20ca0:	2901      	cmp	r1, #1
   20ca2:	d801      	bhi.n	20ca8 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   20ca4:	f7fa ba20 	b.w	1b0e8 <cmd_le_generate_dhkey>
}
   20ca8:	2012      	movs	r0, #18
   20caa:	4770      	bx	lr

00020cac <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   20cac:	4668      	mov	r0, sp
   20cae:	f020 0107 	bic.w	r1, r0, #7
   20cb2:	468d      	mov	sp, r1
   20cb4:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   20cb6:	f7e9 ff0b 	bl	aad0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   20cba:	f7f2 fa83 	bl	131c4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   20cbe:	f7f2 fbfb 	bl	134b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   20cc2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20cc6:	4685      	mov	sp, r0
   20cc8:	4770      	bx	lr

00020cca <mpsl_low_prio_work_handler>:
{
   20cca:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20ccc:	f04f 31ff 	mov.w	r1, #4294967295
   20cd0:	f04f 30ff 	mov.w	r0, #4294967295
   20cd4:	f7f9 fa9c 	bl	1a210 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   20cd8:	f7ef fabc 	bl	10254 <mpsl_low_priority_process>
}
   20cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   20ce0:	f7f9 ba9e 	b.w	1a220 <multithreading_lock_release>

00020ce4 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   20ce4:	4668      	mov	r0, sp
   20ce6:	f020 0107 	bic.w	r1, r0, #7
   20cea:	468d      	mov	sp, r1
   20cec:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   20cee:	f7e9 fe65 	bl	a9bc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   20cf2:	f7f2 fa67 	bl	131c4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   20cf6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20cfa:	4685      	mov	sp, r0
   20cfc:	4770      	bx	lr

00020cfe <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   20cfe:	4668      	mov	r0, sp
   20d00:	f020 0107 	bic.w	r1, r0, #7
   20d04:	468d      	mov	sp, r1
   20d06:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   20d08:	f7e7 fbc2 	bl	8490 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   20d0c:	f7f2 fa5a 	bl	131c4 <_arch_isr_direct_pm>
   20d10:	f7f2 fbd2 	bl	134b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   20d14:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20d18:	4685      	mov	sp, r0
   20d1a:	4770      	bx	lr

00020d1c <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   20d1c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   20d1e:	f7ef fc60 	bl	105e2 <mpsl_fem_init>

	return 0;
}
   20d22:	2000      	movs	r0, #0
   20d24:	bd08      	pop	{r3, pc}

00020d26 <nrfx_clock_stop>:
	switch (domain) {
   20d26:	2801      	cmp	r0, #1
   20d28:	d101      	bne.n	20d2e <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   20d2a:	f7ea bd4b 	b.w	b7c4 <mpsl_clock_hfclk_release>
}
   20d2e:	4770      	bx	lr

00020d30 <nrfx_clock_enable>:
}
   20d30:	4770      	bx	lr

00020d32 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   20d32:	f7ea bb51 	b.w	b3d8 <MPSL_IRQ_CLOCK_Handler>

00020d36 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   20d36:	4700      	bx	r0

00020d38 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   20d38:	f000 bd39 	b.w	217ae <z_impl_k_busy_wait>

00020d3c <nrf_gpio_reconfigure>:
{
   20d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20d3e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20d40:	a801      	add	r0, sp, #4
{
   20d42:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   20d46:	4616      	mov	r6, r2
   20d48:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20d4a:	f7fa fb91 	bl	1b470 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20d4e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   20d50:	f1b6 0c00 	subs.w	ip, r6, #0
   20d54:	bf18      	it	ne
   20d56:	f04f 0c01 	movne.w	ip, #1
   20d5a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20d5e:	1e0b      	subs	r3, r1, #0
   20d60:	bf18      	it	ne
   20d62:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20d64:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20d66:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20d6a:	bf14      	ite	ne
   20d6c:	f04f 0c0c 	movne.w	ip, #12
   20d70:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   20d74:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   20d76:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   20d7a:	bf14      	ite	ne
   20d7c:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   20d80:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   20d84:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20d86:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20d8a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   20d8e:	bf14      	ite	ne
   20d90:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   20d94:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20d98:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   20d9c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20da0:	b101      	cbz	r1, 20da4 <nrf_gpio_reconfigure+0x68>
   20da2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   20da4:	b10e      	cbz	r6, 20daa <nrf_gpio_reconfigure+0x6e>
   20da6:	7836      	ldrb	r6, [r6, #0]
   20da8:	0076      	lsls	r6, r6, #1
   20daa:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20dac:	b10d      	cbz	r5, 20db2 <nrf_gpio_reconfigure+0x76>
   20dae:	782d      	ldrb	r5, [r5, #0]
   20db0:	00ad      	lsls	r5, r5, #2
   20db2:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   20db4:	b10c      	cbz	r4, 20dba <nrf_gpio_reconfigure+0x7e>
   20db6:	7824      	ldrb	r4, [r4, #0]
   20db8:	0224      	lsls	r4, r4, #8
   20dba:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   20dbc:	b10f      	cbz	r7, 20dc2 <nrf_gpio_reconfigure+0x86>
   20dbe:	783f      	ldrb	r7, [r7, #0]
   20dc0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20dc2:	430c      	orrs	r4, r1
   20dc4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   20dc6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   20dca:	b003      	add	sp, #12
   20dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020dce <nrf_gpio_cfg_sense_set>:
{
   20dce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   20dd0:	f10d 030f 	add.w	r3, sp, #15
   20dd4:	9301      	str	r3, [sp, #4]
   20dd6:	2300      	movs	r3, #0
{
   20dd8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   20ddc:	9300      	str	r3, [sp, #0]
   20dde:	461a      	mov	r2, r3
   20de0:	4619      	mov	r1, r3
   20de2:	f7ff ffab 	bl	20d3c <nrf_gpio_reconfigure>
}
   20de6:	b005      	add	sp, #20
   20de8:	f85d fb04 	ldr.w	pc, [sp], #4

00020dec <twi_transfer>:
{
   20dec:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20dee:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   20df2:	b12b      	cbz	r3, 20e00 <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20df4:	2300      	movs	r3, #0
   20df6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   20dfa:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   20dfe:	2301      	movs	r3, #1
    if (p_cb->error)
   20e00:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   20e04:	b322      	cbz	r2, 20e50 <twi_transfer+0x64>
   20e06:	2200      	movs	r2, #0
   20e08:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   20e0c:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
   20e10:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
   20e14:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
   20e18:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   20e1c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
   20e20:	2b00      	cmp	r3, #0
   20e22:	d079      	beq.n	20f18 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   20e24:	2200      	movs	r2, #0
   20e26:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
   20e2a:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   20e2e:	2a00      	cmp	r2, #0
   20e30:	d137      	bne.n	20ea2 <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   20e32:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   20e34:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   20e36:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   20e38:	bf1f      	itttt	ne
   20e3a:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   20e3c:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   20e40:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
   20e44:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   20e46:	f083 0301 	eor.w	r3, r3, #1
   20e4a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
   20e4e:	e028      	b.n	20ea2 <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e50:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   20e54:	b114      	cbz	r4, 20e5c <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20e56:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   20e5a:	e00e      	b.n	20e7a <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e5c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   20e60:	b36a      	cbz	r2, 20ebe <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20e62:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
   20e66:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   20e6a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   20e6c:	3201      	adds	r2, #1
   20e6e:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e70:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   20e74:	b145      	cbz	r5, 20e88 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20e76:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
   20e7a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20e7e:	2201      	movs	r2, #1
   20e80:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
   20e82:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
   20e86:	e7cb      	b.n	20e20 <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   20e88:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   20e8a:	42a2      	cmp	r2, r4
   20e8c:	d204      	bcs.n	20e98 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   20e8e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
   20e90:	5ca2      	ldrb	r2, [r4, r2]
   20e92:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   20e96:	e7c3      	b.n	20e20 <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
   20e98:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
   20e9c:	b11a      	cbz	r2, 20ea6 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20e9e:	2301      	movs	r3, #1
   20ea0:	61c3      	str	r3, [r0, #28]
                    return false;
   20ea2:	2000      	movs	r0, #0
}
   20ea4:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   20ea6:	6a0a      	ldr	r2, [r1, #32]
   20ea8:	f012 0f40 	tst.w	r2, #64	; 0x40
   20eac:	f04f 0201 	mov.w	r2, #1
   20eb0:	d003      	beq.n	20eba <twi_transfer+0xce>
   20eb2:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   20eb4:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   20eb8:	e7f3      	b.n	20ea2 <twi_transfer+0xb6>
   20eba:	6142      	str	r2, [r0, #20]
   20ebc:	e7b0      	b.n	20e20 <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ebe:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   20ec2:	2c00      	cmp	r4, #0
   20ec4:	d0ac      	beq.n	20e20 <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ec6:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   20eca:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ece:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   20ed2:	2c00      	cmp	r4, #0
   20ed4:	d1bf      	bne.n	20e56 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   20ed6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   20ed8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   20eda:	42a2      	cmp	r2, r4
   20edc:	d2a0      	bcs.n	20e20 <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   20ede:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   20ee0:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
   20ee4:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
   20ee6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   20ee8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   20eea:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   20eec:	1e65      	subs	r5, r4, #1
   20eee:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
   20ef0:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   20ef2:	d108      	bne.n	20f06 <twi_transfer+0x11a>
   20ef4:	6a0a      	ldr	r2, [r1, #32]
   20ef6:	0654      	lsls	r4, r2, #25
   20ef8:	d402      	bmi.n	20f00 <twi_transfer+0x114>
    p_reg->SHORTS = mask;
   20efa:	2202      	movs	r2, #2
   20efc:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20f00:	2201      	movs	r2, #1
   20f02:	6202      	str	r2, [r0, #32]
   20f04:	e78c      	b.n	20e20 <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   20f06:	42a2      	cmp	r2, r4
   20f08:	d1fa      	bne.n	20f00 <twi_transfer+0x114>
   20f0a:	6a0a      	ldr	r2, [r1, #32]
   20f0c:	0652      	lsls	r2, r2, #25
   20f0e:	d587      	bpl.n	20e20 <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   20f10:	2302      	movs	r3, #2
   20f12:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   20f16:	e7c4      	b.n	20ea2 <twi_transfer+0xb6>
    return true;
   20f18:	2001      	movs	r0, #1
   20f1a:	e7c3      	b.n	20ea4 <twi_transfer+0xb8>

00020f1c <nrf_gpio_pin_set>:
{
   20f1c:	b507      	push	{r0, r1, r2, lr}
   20f1e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20f20:	a801      	add	r0, sp, #4
   20f22:	f7fb f86b 	bl	1bffc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20f26:	9a01      	ldr	r2, [sp, #4]
   20f28:	2301      	movs	r3, #1
   20f2a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   20f2c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   20f30:	b003      	add	sp, #12
   20f32:	f85d fb04 	ldr.w	pc, [sp], #4

00020f36 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   20f36:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   20f38:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   20f3a:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   20f3c:	bf9c      	itt	ls
   20f3e:	6881      	ldrls	r1, [r0, #8]
   20f40:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
   20f42:	3b01      	subs	r3, #1
   20f44:	1a98      	subs	r0, r3, r2
}
   20f46:	4770      	bx	lr

00020f48 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   20f4c:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20f50:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   20f52:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20f56:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   20f58:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20f5a:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20f5c:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   20f5e:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   20f60:	d904      	bls.n	20f6c <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   20f62:	f7fe f91a 	bl	1f19a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   20f66:	60ec      	str	r4, [r5, #12]
}
   20f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   20f6c:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   20f6e:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   20f72:	f7fe f912 	bl	1f19a <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   20f76:	6868      	ldr	r0, [r5, #4]
   20f78:	4622      	mov	r2, r4
   20f7a:	19b9      	adds	r1, r7, r6
   20f7c:	e7f1      	b.n	20f62 <_WriteNoCheck+0x1a>

00020f7e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   20f7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   20f82:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   20f84:	4606      	mov	r6, r0
   20f86:	4689      	mov	r9, r1
   20f88:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   20f8a:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   20f8e:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   20f90:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20f92:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   20f94:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   20f96:	bf28      	it	cs
   20f98:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   20f9a:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   20f9c:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   20f9e:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   20fa2:	bf28      	it	cs
   20fa4:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   20fa6:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   20fa8:	429c      	cmp	r4, r3
   20faa:	bf28      	it	cs
   20fac:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   20fae:	4649      	mov	r1, r9
   20fb0:	4428      	add	r0, r5
   20fb2:	4622      	mov	r2, r4
   20fb4:	f7fe f8f1 	bl	1f19a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   20fb8:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   20fba:	4425      	add	r5, r4
      WrOff = 0u;
   20fbc:	42ab      	cmp	r3, r5
   20fbe:	bf08      	it	eq
   20fc0:	2500      	moveq	r5, #0
  } while (NumBytes);
   20fc2:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   20fc4:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   20fc6:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   20fc8:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   20fca:	d1e0      	bne.n	20f8e <_WriteBlocking+0x10>
}
   20fcc:	4640      	mov	r0, r8
   20fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020fd2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   20fd2:	f7fb b885 	b.w	1c0e0 <_DoInit>

00020fd6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   20fd6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   20fd8:	f7ff fffb 	bl	20fd2 <SEGGER_RTT_Init>

	return 0;
}
   20fdc:	2000      	movs	r0, #0
   20fde:	bd08      	pop	{r3, pc}

00020fe0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   20fe0:	4770      	bx	lr

00020fe2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   20fe2:	b140      	cbz	r0, 20ff6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   20fe4:	68c3      	ldr	r3, [r0, #12]
   20fe6:	7858      	ldrb	r0, [r3, #1]
   20fe8:	f010 0001 	ands.w	r0, r0, #1
   20fec:	bf1e      	ittt	ne
   20fee:	7818      	ldrbne	r0, [r3, #0]
   20ff0:	fab0 f080 	clzne	r0, r0
   20ff4:	0940      	lsrne	r0, r0, #5
}
   20ff6:	4770      	bx	lr

00020ff8 <z_early_memset>:
	(void) memset(dst, c, n);
   20ff8:	f7fe b8da 	b.w	1f1b0 <memset>

00020ffc <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   20ffc:	f7fe b8cd 	b.w	1f19a <memcpy>

00021000 <k_heap_init>:
{
   21000:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   21002:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   21006:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2100a:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2100e:	f7fd b9da 	b.w	1e3c6 <sys_heap_init>

00021012 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21016:	b085      	sub	sp, #20
   21018:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2101c:	4607      	mov	r7, r0
   2101e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21020:	4650      	mov	r0, sl
   21022:	4621      	mov	r1, r4
{
   21024:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21026:	f000 fbc6 	bl	217b6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2102a:	f1b4 3fff 	cmp.w	r4, #4294967295
   2102e:	bf08      	it	eq
   21030:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21034:	4605      	mov	r5, r0
   21036:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   21038:	bf04      	itt	eq
   2103a:	f04f 35ff 	moveq.w	r5, #4294967295
   2103e:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21042:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   21046:	f04f 0340 	mov.w	r3, #64	; 0x40
   2104a:	f3ef 8411 	mrs	r4, BASEPRI
   2104e:	f383 8812 	msr	BASEPRI_MAX, r3
   21052:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21056:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2105a:	464a      	mov	r2, r9
   2105c:	4641      	mov	r1, r8
   2105e:	4638      	mov	r0, r7
   21060:	f7fd f94a 	bl	1e2f8 <sys_heap_aligned_alloc>
   21064:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   21066:	f7fc fa95 	bl	1d594 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2106a:	9b03      	ldr	r3, [sp, #12]
   2106c:	b13b      	cbz	r3, 2107e <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2106e:	f384 8811 	msr	BASEPRI, r4
   21072:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21076:	4618      	mov	r0, r3
   21078:	b005      	add	sp, #20
   2107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2107e:	1a28      	subs	r0, r5, r0
   21080:	eb66 0101 	sbc.w	r1, r6, r1
   21084:	2801      	cmp	r0, #1
   21086:	f171 0200 	sbcs.w	r2, r1, #0
   2108a:	dbf0      	blt.n	2106e <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2108c:	e9cd 0100 	strd	r0, r1, [sp]
   21090:	465a      	mov	r2, fp
   21092:	4621      	mov	r1, r4
   21094:	4650      	mov	r0, sl
   21096:	f7fb ff27 	bl	1cee8 <z_pend_curr>
	__asm__ volatile(
   2109a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2109e:	f3ef 8411 	mrs	r4, BASEPRI
   210a2:	f383 8812 	msr	BASEPRI_MAX, r3
   210a6:	f3bf 8f6f 	isb	sy
	return k;
   210aa:	e7d6      	b.n	2105a <k_heap_aligned_alloc+0x48>

000210ac <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   210ac:	b538      	push	{r3, r4, r5, lr}
   210ae:	4604      	mov	r4, r0
   210b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   210b4:	f3ef 8511 	mrs	r5, BASEPRI
   210b8:	f383 8812 	msr	BASEPRI_MAX, r3
   210bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   210c0:	f7fd f8e2 	bl	1e288 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   210c4:	f104 000c 	add.w	r0, r4, #12
   210c8:	f000 faf6 	bl	216b8 <z_unpend_all>
   210cc:	b130      	cbz	r0, 210dc <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   210ce:	4629      	mov	r1, r5
   210d0:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   210d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   210d8:	f7fb bf6a 	b.w	1cfb0 <z_reschedule>
	__asm__ volatile(
   210dc:	f385 8811 	msr	BASEPRI, r5
   210e0:	f3bf 8f6f 	isb	sy
}
   210e4:	bd38      	pop	{r3, r4, r5, pc}

000210e6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   210e6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   210ea:	4313      	orrs	r3, r2
   210ec:	f013 0303 	ands.w	r3, r3, #3
   210f0:	d10c      	bne.n	2110c <create_free_list+0x26>
	slab->free_list = NULL;
   210f2:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   210f4:	6881      	ldr	r1, [r0, #8]
   210f6:	4299      	cmp	r1, r3
   210f8:	d801      	bhi.n	210fe <create_free_list+0x18>
	return 0;
   210fa:	2000      	movs	r0, #0
   210fc:	4770      	bx	lr
		*(char **)p = slab->free_list;
   210fe:	6941      	ldr	r1, [r0, #20]
   21100:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   21102:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   21104:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21106:	3301      	adds	r3, #1
		p += slab->block_size;
   21108:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2110a:	e7f3      	b.n	210f4 <create_free_list+0xe>
		return -EINVAL;
   2110c:	f06f 0015 	mvn.w	r0, #21
}
   21110:	4770      	bx	lr

00021112 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21114:	4604      	mov	r4, r0
   21116:	460d      	mov	r5, r1
	__asm__ volatile(
   21118:	f04f 0340 	mov.w	r3, #64	; 0x40
   2111c:	f3ef 8611 	mrs	r6, BASEPRI
   21120:	f383 8812 	msr	BASEPRI_MAX, r3
   21124:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   21128:	6947      	ldr	r7, [r0, #20]
   2112a:	b977      	cbnz	r7, 2114a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2112c:	f000 fa7e 	bl	2162c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   21130:	b158      	cbz	r0, 2114a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21132:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   21134:	6142      	str	r2, [r0, #20]
   21136:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   21138:	f000 fa41 	bl	215be <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2113c:	4631      	mov	r1, r6
   2113e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   21142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   21146:	f7fb bf33 	b.w	1cfb0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2114a:	682b      	ldr	r3, [r5, #0]
   2114c:	6962      	ldr	r2, [r4, #20]
   2114e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21150:	682b      	ldr	r3, [r5, #0]
   21152:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   21154:	69a3      	ldr	r3, [r4, #24]
   21156:	3b01      	subs	r3, #1
   21158:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2115a:	f386 8811 	msr	BASEPRI, r6
   2115e:	f3bf 8f6f 	isb	sy
}
   21162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021164 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21164:	f3ef 8005 	mrs	r0, IPSR
}
   21168:	3800      	subs	r0, #0
   2116a:	bf18      	it	ne
   2116c:	2001      	movne	r0, #1
   2116e:	4770      	bx	lr

00021170 <z_impl_k_thread_name_set>:
}
   21170:	f06f 0057 	mvn.w	r0, #87	; 0x57
   21174:	4770      	bx	lr

00021176 <k_thread_name_get>:
}
   21176:	2000      	movs	r0, #0
   21178:	4770      	bx	lr

0002117a <z_impl_k_thread_start>:
	z_sched_start(thread);
   2117a:	f7fb bf2b 	b.w	1cfd4 <z_sched_start>

0002117e <z_pm_save_idle_exit>:
{
   2117e:	b508      	push	{r3, lr}
	pm_system_resume();
   21180:	f7f1 fd9e 	bl	12cc0 <pm_system_resume>
}
   21184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   21188:	f7ff bd0b 	b.w	20ba2 <sys_clock_idle_exit>

0002118c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2118c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21190:	428b      	cmp	r3, r1
   21192:	d001      	beq.n	21198 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   21194:	f7fb bec6 	b.w	1cf24 <z_set_prio>
}
   21198:	2000      	movs	r0, #0
   2119a:	4770      	bx	lr

0002119c <queue_insert>:
{
   2119c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   211a0:	4699      	mov	r9, r3
   211a2:	4604      	mov	r4, r0
   211a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   211a8:	460d      	mov	r5, r1
   211aa:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   211ac:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   211b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   211b4:	f3ef 8711 	mrs	r7, BASEPRI
   211b8:	f382 8812 	msr	BASEPRI_MAX, r2
   211bc:	f3bf 8f6f 	isb	sy
	if (is_append) {
   211c0:	b103      	cbz	r3, 211c4 <queue_insert+0x28>
	return list->tail;
   211c2:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   211c4:	4630      	mov	r0, r6
   211c6:	f000 fa31 	bl	2162c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   211ca:	b158      	cbz	r0, 211e4 <queue_insert+0x48>
   211cc:	2300      	movs	r3, #0
   211ce:	67c3      	str	r3, [r0, #124]	; 0x7c
   211d0:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   211d4:	f000 f9f3 	bl	215be <z_ready_thread>
	z_reschedule(&queue->lock, key);
   211d8:	4630      	mov	r0, r6
   211da:	4639      	mov	r1, r7
   211dc:	f7fb fee8 	bl	1cfb0 <z_reschedule>
		return 0;
   211e0:	2000      	movs	r0, #0
   211e2:	e00c      	b.n	211fe <queue_insert+0x62>
	if (alloc) {
   211e4:	f1b9 0f00 	cmp.w	r9, #0
   211e8:	d01b      	beq.n	21222 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   211ea:	2108      	movs	r1, #8
   211ec:	f7fc fb26 	bl	1d83c <z_thread_aligned_alloc>
		if (anode == NULL) {
   211f0:	b938      	cbnz	r0, 21202 <queue_insert+0x66>
	__asm__ volatile(
   211f2:	f387 8811 	msr	BASEPRI, r7
   211f6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   211fa:	f06f 000b 	mvn.w	r0, #11
}
   211fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   21202:	2201      	movs	r2, #1
		anode->data = data;
   21204:	f8c0 8004 	str.w	r8, [r0, #4]
   21208:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2120a:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2120c:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   21210:	b95d      	cbnz	r5, 2122a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21212:	6822      	ldr	r2, [r4, #0]
   21214:	430a      	orrs	r2, r1
   21216:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21218:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2121a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2121c:	b96a      	cbnz	r2, 2123a <queue_insert+0x9e>
	list->tail = node;
   2121e:	6060      	str	r0, [r4, #4]
}
   21220:	e00b      	b.n	2123a <queue_insert+0x9e>
	node->next_and_flags = flags;
   21222:	f8c8 9000 	str.w	r9, [r8]
}
   21226:	4640      	mov	r0, r8
   21228:	e7ef      	b.n	2120a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2122a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2122c:	2a03      	cmp	r2, #3
   2122e:	d810      	bhi.n	21252 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21230:	6001      	str	r1, [r0, #0]
	return list->tail;
   21232:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   21234:	b939      	cbnz	r1, 21246 <queue_insert+0xaa>
	list->head = node;
   21236:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2123a:	2104      	movs	r1, #4
   2123c:	f104 0010 	add.w	r0, r4, #16
   21240:	f000 fc44 	bl	21acc <z_handle_obj_poll_events>
   21244:	e7c8      	b.n	211d8 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21246:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21248:	f002 0203 	and.w	r2, r2, #3
   2124c:	4302      	orrs	r2, r0
   2124e:	600a      	str	r2, [r1, #0]
   21250:	e7e5      	b.n	2121e <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21252:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   21256:	430a      	orrs	r2, r1
   21258:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2125a:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2125c:	f002 0203 	and.w	r2, r2, #3
   21260:	ea40 0302 	orr.w	r3, r0, r2
   21264:	602b      	str	r3, [r5, #0]
}
   21266:	e7e8      	b.n	2123a <queue_insert+0x9e>

00021268 <z_queue_node_peek>:
{
   21268:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2126a:	4604      	mov	r4, r0
   2126c:	b130      	cbz	r0, 2127c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2126e:	6802      	ldr	r2, [r0, #0]
   21270:	0793      	lsls	r3, r2, #30
   21272:	d003      	beq.n	2127c <z_queue_node_peek+0x14>
		ret = anode->data;
   21274:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21276:	b109      	cbz	r1, 2127c <z_queue_node_peek+0x14>
			k_free(anode);
   21278:	f000 fc3e 	bl	21af8 <k_free>
}
   2127c:	4620      	mov	r0, r4
   2127e:	bd10      	pop	{r4, pc}

00021280 <z_impl_k_queue_init>:
	list->head = NULL;
   21280:	2300      	movs	r3, #0
	list->tail = NULL;
   21282:	e9c0 3300 	strd	r3, r3, [r0]
   21286:	f100 0308 	add.w	r3, r0, #8
   2128a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2128e:	f100 0310 	add.w	r3, r0, #16
   21292:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   21296:	4770      	bx	lr

00021298 <k_queue_append>:
{
   21298:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2129a:	2301      	movs	r3, #1
   2129c:	9300      	str	r3, [sp, #0]
   2129e:	2300      	movs	r3, #0
{
   212a0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   212a2:	4619      	mov	r1, r3
   212a4:	f7ff ff7a 	bl	2119c <queue_insert>
}
   212a8:	b003      	add	sp, #12
   212aa:	f85d fb04 	ldr.w	pc, [sp], #4

000212ae <k_queue_prepend>:
{
   212ae:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   212b0:	2300      	movs	r3, #0
{
   212b2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   212b4:	9300      	str	r3, [sp, #0]
   212b6:	4619      	mov	r1, r3
   212b8:	f7ff ff70 	bl	2119c <queue_insert>
}
   212bc:	b003      	add	sp, #12
   212be:	f85d fb04 	ldr.w	pc, [sp], #4

000212c2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   212c2:	b15a      	cbz	r2, 212dc <z_impl_k_sem_init+0x1a>
   212c4:	428a      	cmp	r2, r1
   212c6:	d309      	bcc.n	212dc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   212c8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   212cc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   212d0:	e9c0 0000 	strd	r0, r0, [r0]
   212d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   212d8:	2000      	movs	r0, #0
   212da:	4770      	bx	lr
		return -EINVAL;
   212dc:	f06f 0015 	mvn.w	r0, #21
}
   212e0:	4770      	bx	lr

000212e2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   212e2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   212e4:	2301      	movs	r3, #1
   212e6:	408b      	lsls	r3, r1
   212e8:	ea22 0303 	bic.w	r3, r2, r3
   212ec:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   212ee:	fa22 f001 	lsr.w	r0, r2, r1
}
   212f2:	f000 0001 	and.w	r0, r0, #1
   212f6:	4770      	bx	lr

000212f8 <unschedule_locked>:
{
   212f8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   212fa:	2103      	movs	r1, #3
{
   212fc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   212fe:	300c      	adds	r0, #12
   21300:	f7ff ffef 	bl	212e2 <flag_test_and_clear>
   21304:	4604      	mov	r4, r0
   21306:	b118      	cbz	r0, 21310 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   21308:	f105 0010 	add.w	r0, r5, #16
   2130c:	f000 fa07 	bl	2171e <z_abort_timeout>
}
   21310:	4620      	mov	r0, r4
   21312:	bd38      	pop	{r3, r4, r5, pc}

00021314 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   21314:	b120      	cbz	r0, 21320 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   21316:	2200      	movs	r2, #0
   21318:	4611      	mov	r1, r2
   2131a:	30d0      	adds	r0, #208	; 0xd0
   2131c:	f000 b9dc 	b.w	216d8 <z_sched_wake>
}
   21320:	4770      	bx	lr

00021322 <cancel_async_locked>:
{
   21322:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21324:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21326:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2132a:	079b      	lsls	r3, r3, #30
{
   2132c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2132e:	d416      	bmi.n	2135e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   21330:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   21332:	2102      	movs	r1, #2
   21334:	300c      	adds	r0, #12
   21336:	f7ff ffd4 	bl	212e2 <flag_test_and_clear>
   2133a:	b180      	cbz	r0, 2135e <cancel_async_locked+0x3c>
	return list->head;
   2133c:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21340:	b16a      	cbz	r2, 2135e <cancel_async_locked+0x3c>
   21342:	4294      	cmp	r4, r2
   21344:	d11d      	bne.n	21382 <cancel_async_locked+0x60>
	return node->next;
   21346:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   21348:	b99e      	cbnz	r6, 21372 <cancel_async_locked+0x50>
   2134a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	list->head = node;
   2134e:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   21352:	429c      	cmp	r4, r3
   21354:	d101      	bne.n	2135a <cancel_async_locked+0x38>
	list->tail = node;
   21356:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
	parent->next = child;
   2135a:	2300      	movs	r3, #0
   2135c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2135e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   21360:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   21364:	bf1e      	ittt	ne
   21366:	f043 0302 	orrne.w	r3, r3, #2
   2136a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2136c:	f040 0002 	orrne.w	r0, r0, #2
}
   21370:	bd70      	pop	{r4, r5, r6, pc}
   21372:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   21374:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
   21378:	4294      	cmp	r4, r2
	list->tail = node;
   2137a:	bf08      	it	eq
   2137c:	f8c5 60cc 	streq.w	r6, [r5, #204]	; 0xcc
}
   21380:	e7eb      	b.n	2135a <cancel_async_locked+0x38>
	return node->next;
   21382:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21384:	6812      	ldr	r2, [r2, #0]
   21386:	e7db      	b.n	21340 <cancel_async_locked+0x1e>

00021388 <work_timeout>:
{
   21388:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2138a:	4604      	mov	r4, r0
	__asm__ volatile(
   2138c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21390:	f3ef 8511 	mrs	r5, BASEPRI
   21394:	f383 8812 	msr	BASEPRI_MAX, r3
   21398:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2139c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2139e:	f1a0 0610 	sub.w	r6, r0, #16
   213a2:	2103      	movs	r1, #3
   213a4:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   213a6:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   213a8:	f7ff ff9b 	bl	212e2 <flag_test_and_clear>
   213ac:	b128      	cbz	r0, 213ba <work_timeout+0x32>
		queue = dw->queue;
   213ae:	69a3      	ldr	r3, [r4, #24]
   213b0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   213b2:	a901      	add	r1, sp, #4
   213b4:	4630      	mov	r0, r6
   213b6:	f7fb fb57 	bl	1ca68 <submit_to_queue_locked>
	__asm__ volatile(
   213ba:	f385 8811 	msr	BASEPRI, r5
   213be:	f3bf 8f6f 	isb	sy
}
   213c2:	b002      	add	sp, #8
   213c4:	bd70      	pop	{r4, r5, r6, pc}

000213c6 <k_work_init>:
{
   213c6:	b538      	push	{r3, r4, r5, lr}
   213c8:	4604      	mov	r4, r0
   213ca:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   213cc:	2210      	movs	r2, #16
   213ce:	2100      	movs	r1, #0
   213d0:	f7fd feee 	bl	1f1b0 <memset>
   213d4:	6065      	str	r5, [r4, #4]
}
   213d6:	bd38      	pop	{r3, r4, r5, pc}

000213d8 <k_work_busy_get>:
	__asm__ volatile(
   213d8:	f04f 0240 	mov.w	r2, #64	; 0x40
   213dc:	f3ef 8311 	mrs	r3, BASEPRI
   213e0:	f382 8812 	msr	BASEPRI_MAX, r2
   213e4:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   213e8:	68c0      	ldr	r0, [r0, #12]
   213ea:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   213ee:	f383 8811 	msr	BASEPRI, r3
   213f2:	f3bf 8f6f 	isb	sy
}
   213f6:	4770      	bx	lr

000213f8 <z_work_submit_to_queue>:
{
   213f8:	b513      	push	{r0, r1, r4, lr}
   213fa:	9001      	str	r0, [sp, #4]
   213fc:	4608      	mov	r0, r1
	__asm__ volatile(
   213fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   21402:	f3ef 8411 	mrs	r4, BASEPRI
   21406:	f383 8812 	msr	BASEPRI_MAX, r3
   2140a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2140e:	a901      	add	r1, sp, #4
   21410:	f7fb fb2a 	bl	1ca68 <submit_to_queue_locked>
	__asm__ volatile(
   21414:	f384 8811 	msr	BASEPRI, r4
   21418:	f3bf 8f6f 	isb	sy
}
   2141c:	b002      	add	sp, #8
   2141e:	bd10      	pop	{r4, pc}

00021420 <k_work_submit_to_queue>:
{
   21420:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   21422:	f7ff ffe9 	bl	213f8 <z_work_submit_to_queue>
	if (ret > 0) {
   21426:	1e04      	subs	r4, r0, #0
   21428:	dd09      	ble.n	2143e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2142a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2142e:	f3ef 8011 	mrs	r0, BASEPRI
   21432:	f383 8812 	msr	BASEPRI_MAX, r3
   21436:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2143a:	f000 f927 	bl	2168c <z_reschedule_irqlock>
}
   2143e:	4620      	mov	r0, r4
   21440:	bd10      	pop	{r4, pc}

00021442 <k_work_queue_init>:
{
   21442:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   21444:	22e8      	movs	r2, #232	; 0xe8
   21446:	2100      	movs	r1, #0
   21448:	f7fd feb2 	bl	1f1b0 <memset>
}
   2144c:	bd08      	pop	{r3, pc}

0002144e <k_work_init_delayable>:
{
   2144e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   21450:	2230      	movs	r2, #48	; 0x30
{
   21452:	4604      	mov	r4, r0
   21454:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   21456:	2100      	movs	r1, #0
   21458:	f7fd feaa 	bl	1f1b0 <memset>
   2145c:	f44f 7380 	mov.w	r3, #256	; 0x100
   21460:	6065      	str	r5, [r4, #4]
   21462:	60e3      	str	r3, [r4, #12]
}
   21464:	bd38      	pop	{r3, r4, r5, pc}

00021466 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   21466:	f7ff bfb7 	b.w	213d8 <k_work_busy_get>

0002146a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2146a:	b538      	push	{r3, r4, r5, lr}
   2146c:	4604      	mov	r4, r0
   2146e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21472:	f3ef 8511 	mrs	r5, BASEPRI
   21476:	f383 8812 	msr	BASEPRI_MAX, r3
   2147a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2147e:	f7ff ff3b 	bl	212f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21482:	4620      	mov	r0, r4
   21484:	f7ff ff4d 	bl	21322 <cancel_async_locked>
	__asm__ volatile(
   21488:	f385 8811 	msr	BASEPRI, r5
   2148c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   21490:	bd38      	pop	{r3, r4, r5, pc}

00021492 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   21492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21494:	4604      	mov	r4, r0
   21496:	460d      	mov	r5, r1
	__asm__ volatile(
   21498:	f04f 0340 	mov.w	r3, #64	; 0x40
   2149c:	f3ef 8611 	mrs	r6, BASEPRI
   214a0:	f383 8812 	msr	BASEPRI_MAX, r3
   214a4:	f3bf 8f6f 	isb	sy
	return *flagp;
   214a8:	68c3      	ldr	r3, [r0, #12]
   214aa:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   214ae:	2b00      	cmp	r3, #0
   214b0:	bf14      	ite	ne
   214b2:	2701      	movne	r7, #1
   214b4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   214b6:	d105      	bne.n	214c4 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   214b8:	f386 8811 	msr	BASEPRI, r6
   214bc:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   214c0:	4638      	mov	r0, r7
   214c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   214c4:	f7ff ff18 	bl	212f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   214c8:	4620      	mov	r0, r4
   214ca:	f7ff ff2a 	bl	21322 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   214ce:	4629      	mov	r1, r5
   214d0:	4620      	mov	r0, r4
   214d2:	f7fb faab 	bl	1ca2c <cancel_sync_locked>
   214d6:	f386 8811 	msr	BASEPRI, r6
   214da:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   214de:	2800      	cmp	r0, #0
   214e0:	d0ee      	beq.n	214c0 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   214e2:	f04f 32ff 	mov.w	r2, #4294967295
   214e6:	f04f 33ff 	mov.w	r3, #4294967295
   214ea:	f105 0008 	add.w	r0, r5, #8
   214ee:	f7fb fa5b 	bl	1c9a8 <z_impl_k_sem_take>
   214f2:	e7e5      	b.n	214c0 <k_work_cancel_delayable_sync+0x2e>

000214f4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   214f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   214f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   214fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   214fc:	2300      	movs	r3, #0
	node->prev = NULL;
   214fe:	e9c0 3300 	strd	r3, r3, [r0]
}
   21502:	4770      	bx	lr

00021504 <unpend_thread_no_timeout>:
{
   21504:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   21506:	f7ff fff5 	bl	214f4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2150a:	7b43      	ldrb	r3, [r0, #13]
   2150c:	f023 0302 	bic.w	r3, r3, #2
   21510:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   21512:	2300      	movs	r3, #0
   21514:	6083      	str	r3, [r0, #8]
}
   21516:	bd08      	pop	{r3, pc}

00021518 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   21518:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2151c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   21520:	4283      	cmp	r3, r0
		return b2 - b1;
   21522:	bf14      	ite	ne
   21524:	1ac0      	subne	r0, r0, r3
	return 0;
   21526:	2000      	moveq	r0, #0
}
   21528:	4770      	bx	lr

0002152a <z_thread_timeout>:
{
   2152a:	b510      	push	{r4, lr}
   2152c:	4601      	mov	r1, r0
	__asm__ volatile(
   2152e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21532:	f3ef 8411 	mrs	r4, BASEPRI
   21536:	f383 8812 	msr	BASEPRI_MAX, r3
   2153a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2153e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   21542:	f013 0f28 	tst.w	r3, #40	; 0x28
   21546:	d10d      	bne.n	21564 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   21548:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2154c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2154e:	b10b      	cbz	r3, 21554 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   21550:	f7ff ffd8 	bl	21504 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21554:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   21558:	f023 0314 	bic.w	r3, r3, #20
   2155c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   21560:	f7fb fbea 	bl	1cd38 <ready_thread>
	__asm__ volatile(
   21564:	f384 8811 	msr	BASEPRI, r4
   21568:	f3bf 8f6f 	isb	sy
}
   2156c:	bd10      	pop	{r4, pc}

0002156e <add_to_waitq_locked>:
{
   2156e:	b538      	push	{r3, r4, r5, lr}
   21570:	4604      	mov	r4, r0
   21572:	460d      	mov	r5, r1
	unready_thread(thread);
   21574:	f7fb fc14 	bl	1cda0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21578:	7b63      	ldrb	r3, [r4, #13]
   2157a:	f043 0302 	orr.w	r3, r3, #2
   2157e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21580:	b1e5      	cbz	r5, 215bc <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   21582:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   21584:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21586:	429d      	cmp	r5, r3
   21588:	d109      	bne.n	2159e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2158a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2158c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21590:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21592:	606c      	str	r4, [r5, #4]
}
   21594:	e012      	b.n	215bc <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   21596:	686a      	ldr	r2, [r5, #4]
   21598:	4293      	cmp	r3, r2
   2159a:	d0f6      	beq.n	2158a <add_to_waitq_locked+0x1c>
   2159c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2159e:	2b00      	cmp	r3, #0
   215a0:	d0f3      	beq.n	2158a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   215a2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   215a6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   215aa:	428a      	cmp	r2, r1
   215ac:	d0f3      	beq.n	21596 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   215ae:	4291      	cmp	r1, r2
   215b0:	ddf1      	ble.n	21596 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   215b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   215b4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   215b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   215ba:	605c      	str	r4, [r3, #4]
}
   215bc:	bd38      	pop	{r3, r4, r5, pc}

000215be <z_ready_thread>:
{
   215be:	b510      	push	{r4, lr}
	__asm__ volatile(
   215c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   215c4:	f3ef 8411 	mrs	r4, BASEPRI
   215c8:	f383 8812 	msr	BASEPRI_MAX, r3
   215cc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   215d0:	f7fb fbb2 	bl	1cd38 <ready_thread>
	__asm__ volatile(
   215d4:	f384 8811 	msr	BASEPRI, r4
   215d8:	f3bf 8f6f 	isb	sy
}
   215dc:	bd10      	pop	{r4, pc}

000215de <z_unpend_thread_no_timeout>:
{
   215de:	b508      	push	{r3, lr}
	__asm__ volatile(
   215e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   215e4:	f3ef 8111 	mrs	r1, BASEPRI
   215e8:	f383 8812 	msr	BASEPRI_MAX, r3
   215ec:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   215f0:	f7ff ff88 	bl	21504 <unpend_thread_no_timeout>
	__asm__ volatile(
   215f4:	f381 8811 	msr	BASEPRI, r1
   215f8:	f3bf 8f6f 	isb	sy
}
   215fc:	bd08      	pop	{r3, pc}

000215fe <z_unpend1_no_timeout>:
{
   215fe:	b508      	push	{r3, lr}
   21600:	4603      	mov	r3, r0
	__asm__ volatile(
   21602:	f04f 0240 	mov.w	r2, #64	; 0x40
   21606:	f3ef 8111 	mrs	r1, BASEPRI
   2160a:	f382 8812 	msr	BASEPRI_MAX, r2
   2160e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   21612:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21614:	4283      	cmp	r3, r0
   21616:	d007      	beq.n	21628 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   21618:	b108      	cbz	r0, 2161e <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2161a:	f7ff ff73 	bl	21504 <unpend_thread_no_timeout>
	__asm__ volatile(
   2161e:	f381 8811 	msr	BASEPRI, r1
   21622:	f3bf 8f6f 	isb	sy
}
   21626:	bd08      	pop	{r3, pc}
   21628:	2000      	movs	r0, #0
   2162a:	e7f8      	b.n	2161e <z_unpend1_no_timeout+0x20>

0002162c <z_unpend_first_thread>:
{
   2162c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2162e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21632:	f3ef 8511 	mrs	r5, BASEPRI
   21636:	f383 8812 	msr	BASEPRI_MAX, r3
   2163a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2163e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21640:	42a0      	cmp	r0, r4
   21642:	d00d      	beq.n	21660 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   21644:	b134      	cbz	r4, 21654 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   21646:	4620      	mov	r0, r4
   21648:	f7ff ff5c 	bl	21504 <unpend_thread_no_timeout>
   2164c:	f104 0018 	add.w	r0, r4, #24
   21650:	f000 f865 	bl	2171e <z_abort_timeout>
	__asm__ volatile(
   21654:	f385 8811 	msr	BASEPRI, r5
   21658:	f3bf 8f6f 	isb	sy
}
   2165c:	4620      	mov	r0, r4
   2165e:	bd38      	pop	{r3, r4, r5, pc}
   21660:	2400      	movs	r4, #0
   21662:	e7f7      	b.n	21654 <z_unpend_first_thread+0x28>

00021664 <z_unpend_thread>:
{
   21664:	b510      	push	{r4, lr}
	__asm__ volatile(
   21666:	f04f 0340 	mov.w	r3, #64	; 0x40
   2166a:	f3ef 8411 	mrs	r4, BASEPRI
   2166e:	f383 8812 	msr	BASEPRI_MAX, r3
   21672:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   21676:	f7ff ff45 	bl	21504 <unpend_thread_no_timeout>
	__asm__ volatile(
   2167a:	f384 8811 	msr	BASEPRI, r4
   2167e:	f3bf 8f6f 	isb	sy
}
   21682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21686:	3018      	adds	r0, #24
   21688:	f000 b849 	b.w	2171e <z_abort_timeout>

0002168c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2168c:	4603      	mov	r3, r0
   2168e:	b920      	cbnz	r0, 2169a <z_reschedule_irqlock+0xe>
   21690:	f3ef 8205 	mrs	r2, IPSR
   21694:	b90a      	cbnz	r2, 2169a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   21696:	f7f1 bdd5 	b.w	13244 <arch_swap>
   2169a:	f383 8811 	msr	BASEPRI, r3
   2169e:	f3bf 8f6f 	isb	sy
}
   216a2:	4770      	bx	lr

000216a4 <z_reschedule_unlocked>:
	__asm__ volatile(
   216a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   216a8:	f3ef 8011 	mrs	r0, BASEPRI
   216ac:	f383 8812 	msr	BASEPRI_MAX, r3
   216b0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   216b4:	f7ff bfea 	b.w	2168c <z_reschedule_irqlock>

000216b8 <z_unpend_all>:
{
   216b8:	b538      	push	{r3, r4, r5, lr}
   216ba:	4605      	mov	r5, r0
	int need_sched = 0;
   216bc:	2000      	movs	r0, #0
	return list->head == list;
   216be:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216c0:	42a5      	cmp	r5, r4
   216c2:	d000      	beq.n	216c6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   216c4:	b904      	cbnz	r4, 216c8 <z_unpend_all+0x10>
}
   216c6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   216c8:	4620      	mov	r0, r4
   216ca:	f7ff ffcb 	bl	21664 <z_unpend_thread>
		z_ready_thread(thread);
   216ce:	4620      	mov	r0, r4
   216d0:	f7ff ff75 	bl	215be <z_ready_thread>
		need_sched = 1;
   216d4:	2001      	movs	r0, #1
   216d6:	e7f2      	b.n	216be <z_unpend_all+0x6>

000216d8 <z_sched_wake>:
{
   216d8:	b538      	push	{r3, r4, r5, lr}
   216da:	f04f 0340 	mov.w	r3, #64	; 0x40
   216de:	f3ef 8511 	mrs	r5, BASEPRI
   216e2:	f383 8812 	msr	BASEPRI_MAX, r3
   216e6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   216ea:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216ec:	42a0      	cmp	r0, r4
   216ee:	d012      	beq.n	21716 <z_sched_wake+0x3e>
		if (thread != NULL) {
   216f0:	b19c      	cbz	r4, 2171a <z_sched_wake+0x42>
   216f2:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   216f4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   216f6:	4620      	mov	r0, r4
   216f8:	f7ff ff04 	bl	21504 <unpend_thread_no_timeout>
   216fc:	f104 0018 	add.w	r0, r4, #24
   21700:	f000 f80d 	bl	2171e <z_abort_timeout>
			ready_thread(thread);
   21704:	4620      	mov	r0, r4
   21706:	f7fb fb17 	bl	1cd38 <ready_thread>
			ret = true;
   2170a:	2001      	movs	r0, #1
	__asm__ volatile(
   2170c:	f385 8811 	msr	BASEPRI, r5
   21710:	f3bf 8f6f 	isb	sy
}
   21714:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   21716:	2000      	movs	r0, #0
   21718:	e7f8      	b.n	2170c <z_sched_wake+0x34>
   2171a:	4620      	mov	r0, r4
   2171c:	e7f6      	b.n	2170c <z_sched_wake+0x34>

0002171e <z_abort_timeout>:
{
   2171e:	b510      	push	{r4, lr}
	__asm__ volatile(
   21720:	f04f 0240 	mov.w	r2, #64	; 0x40
   21724:	f3ef 8411 	mrs	r4, BASEPRI
   21728:	f382 8812 	msr	BASEPRI_MAX, r2
   2172c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   21730:	6803      	ldr	r3, [r0, #0]
   21732:	b13b      	cbz	r3, 21744 <z_abort_timeout+0x26>
			remove_timeout(to);
   21734:	f7fb fe3a 	bl	1d3ac <remove_timeout>
			ret = 0;
   21738:	2000      	movs	r0, #0
	__asm__ volatile(
   2173a:	f384 8811 	msr	BASEPRI, r4
   2173e:	f3bf 8f6f 	isb	sy
}
   21742:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   21744:	f06f 0015 	mvn.w	r0, #21
   21748:	e7f7      	b.n	2173a <z_abort_timeout+0x1c>

0002174a <z_get_next_timeout_expiry>:
{
   2174a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2174c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21750:	f3ef 8411 	mrs	r4, BASEPRI
   21754:	f383 8812 	msr	BASEPRI_MAX, r3
   21758:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2175c:	f7fb fdfe 	bl	1d35c <next_timeout>
	__asm__ volatile(
   21760:	f384 8811 	msr	BASEPRI, r4
   21764:	f3bf 8f6f 	isb	sy
}
   21768:	bd10      	pop	{r4, pc}

0002176a <z_set_timeout_expiry>:
{
   2176a:	b570      	push	{r4, r5, r6, lr}
   2176c:	4604      	mov	r4, r0
   2176e:	460d      	mov	r5, r1
	__asm__ volatile(
   21770:	f04f 0340 	mov.w	r3, #64	; 0x40
   21774:	f3ef 8611 	mrs	r6, BASEPRI
   21778:	f383 8812 	msr	BASEPRI_MAX, r3
   2177c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   21780:	f7fb fdec 	bl	1d35c <next_timeout>
			      || (ticks <= next_to);
   21784:	2801      	cmp	r0, #1
   21786:	dd07      	ble.n	21798 <z_set_timeout_expiry+0x2e>
   21788:	42a0      	cmp	r0, r4
   2178a:	db05      	blt.n	21798 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2178c:	42a0      	cmp	r0, r4
   2178e:	4629      	mov	r1, r5
   21790:	bfa8      	it	ge
   21792:	4620      	movge	r0, r4
   21794:	f7f8 fcc4 	bl	1a120 <sys_clock_set_timeout>
	__asm__ volatile(
   21798:	f386 8811 	msr	BASEPRI, r6
   2179c:	f3bf 8f6f 	isb	sy
}
   217a0:	bd70      	pop	{r4, r5, r6, pc}

000217a2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   217a2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   217a4:	f7fb fef6 	bl	1d594 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   217a8:	bd08      	pop	{r3, pc}

000217aa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   217aa:	f7fb bef3 	b.w	1d594 <sys_clock_tick_get>

000217ae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   217ae:	b108      	cbz	r0, 217b4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   217b0:	f7f2 bb2e 	b.w	13e10 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   217b4:	4770      	bx	lr

000217b6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   217b6:	f1b1 3fff 	cmp.w	r1, #4294967295
   217ba:	bf08      	it	eq
   217bc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   217c0:	b538      	push	{r3, r4, r5, lr}
   217c2:	460c      	mov	r4, r1
   217c4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   217c6:	d014      	beq.n	217f2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   217c8:	4308      	orrs	r0, r1
   217ca:	d103      	bne.n	217d4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   217cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   217d0:	f7fb bee0 	b.w	1d594 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   217d4:	f06f 0001 	mvn.w	r0, #1
   217d8:	1b40      	subs	r0, r0, r5
   217da:	f04f 33ff 	mov.w	r3, #4294967295
   217de:	eb63 0101 	sbc.w	r1, r3, r1
   217e2:	2900      	cmp	r1, #0
   217e4:	da04      	bge.n	217f0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   217e6:	f7fb fed5 	bl	1d594 <sys_clock_tick_get>
   217ea:	1940      	adds	r0, r0, r5
   217ec:	eb41 0104 	adc.w	r1, r1, r4
}
   217f0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   217f2:	f04f 30ff 	mov.w	r0, #4294967295
   217f6:	4601      	mov	r1, r0
   217f8:	e7fa      	b.n	217f0 <sys_clock_timeout_end_calc+0x3a>

000217fa <k_timer_init>:
	timer->status = 0U;
   217fa:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   217fc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   21800:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   21804:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   21808:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2180c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2180e:	6343      	str	r3, [r0, #52]	; 0x34
}
   21810:	4770      	bx	lr

00021812 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   21812:	b510      	push	{r4, lr}
   21814:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   21816:	f7ff ff82 	bl	2171e <z_abort_timeout>

	if (inactive) {
   2181a:	b9b0      	cbnz	r0, 2184a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2181c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2181e:	b10b      	cbz	r3, 21824 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   21820:	4620      	mov	r0, r4
   21822:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   21824:	f104 0018 	add.w	r0, r4, #24
   21828:	f7ff fee9 	bl	215fe <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2182c:	b168      	cbz	r0, 2184a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2182e:	f7ff fec6 	bl	215be <z_ready_thread>
	__asm__ volatile(
   21832:	f04f 0340 	mov.w	r3, #64	; 0x40
   21836:	f3ef 8011 	mrs	r0, BASEPRI
   2183a:	f383 8812 	msr	BASEPRI_MAX, r3
   2183e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   21842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21846:	f7ff bf21 	b.w	2168c <z_reschedule_irqlock>
   2184a:	bd10      	pop	{r4, pc}

0002184c <add_event>:
{
   2184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2184e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   21850:	e9d0 1300 	ldrd	r1, r3, [r0]
   21854:	4288      	cmp	r0, r1
   21856:	4604      	mov	r4, r0
   21858:	d105      	bne.n	21866 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2185a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2185c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   21860:	601d      	str	r5, [r3, #0]
	list->tail = node;
   21862:	6065      	str	r5, [r4, #4]
   21864:	e01d      	b.n	218a2 <add_event+0x56>
	if ((pending == NULL) ||
   21866:	2b00      	cmp	r3, #0
   21868:	d0f7      	beq.n	2185a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2186a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2186c:	b100      	cbz	r0, 21870 <add_event+0x24>
   2186e:	3860      	subs	r0, #96	; 0x60
   21870:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   21874:	4639      	mov	r1, r7
   21876:	f7ff fe4f 	bl	21518 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2187a:	2800      	cmp	r0, #0
   2187c:	dced      	bgt.n	2185a <add_event+0xe>
	return list->head == list;
   2187e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21880:	42b4      	cmp	r4, r6
   21882:	d0ea      	beq.n	2185a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21884:	2e00      	cmp	r6, #0
   21886:	d0e8      	beq.n	2185a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   21888:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2188a:	b101      	cbz	r1, 2188e <add_event+0x42>
   2188c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2188e:	4638      	mov	r0, r7
   21890:	f7ff fe42 	bl	21518 <z_sched_prio_cmp>
   21894:	2800      	cmp	r0, #0
   21896:	dd05      	ble.n	218a4 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   21898:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2189a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2189e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   218a0:	6075      	str	r5, [r6, #4]
}
   218a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   218a4:	6863      	ldr	r3, [r4, #4]
   218a6:	429e      	cmp	r6, r3
   218a8:	d0d7      	beq.n	2185a <add_event+0xe>
   218aa:	6836      	ldr	r6, [r6, #0]
   218ac:	e7ea      	b.n	21884 <add_event+0x38>

000218ae <register_events>:
{
   218ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   218b2:	2500      	movs	r5, #0
{
   218b4:	468b      	mov	fp, r1
   218b6:	4614      	mov	r4, r2
   218b8:	461f      	mov	r7, r3
   218ba:	4682      	mov	sl, r0
	int events_registered = 0;
   218bc:	462e      	mov	r6, r5
	event->poller = NULL;
   218be:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   218c0:	455d      	cmp	r5, fp
   218c2:	db02      	blt.n	218ca <register_events+0x1c>
}
   218c4:	4630      	mov	r0, r6
   218c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   218ce:	f3ef 8911 	mrs	r9, BASEPRI
   218d2:	f383 8812 	msr	BASEPRI_MAX, r3
   218d6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   218da:	f89a 300d 	ldrb.w	r3, [sl, #13]
   218de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   218e2:	3b01      	subs	r3, #1
   218e4:	2b07      	cmp	r3, #7
   218e6:	d80f      	bhi.n	21908 <register_events+0x5a>
   218e8:	e8df f003 	tbb	[pc, r3]
   218ec:	0a0e041e 	.word	0x0a0e041e
   218f0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   218f4:	f8da 3010 	ldr.w	r3, [sl, #16]
   218f8:	689b      	ldr	r3, [r3, #8]
   218fa:	b12b      	cbz	r3, 21908 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   218fc:	2302      	movs	r3, #2
   218fe:	e020      	b.n	21942 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   21900:	f8da 3010 	ldr.w	r3, [sl, #16]
   21904:	681b      	ldr	r3, [r3, #0]
   21906:	bb8b      	cbnz	r3, 2196c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   21908:	bb47      	cbnz	r7, 2195c <register_events+0xae>
   2190a:	7823      	ldrb	r3, [r4, #0]
   2190c:	b333      	cbz	r3, 2195c <register_events+0xae>
	switch (event->type) {
   2190e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   21912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21916:	3b01      	subs	r3, #1
   21918:	2b07      	cmp	r3, #7
   2191a:	d830      	bhi.n	2197e <register_events+0xd0>
   2191c:	e8df f003 	tbb	[pc, r3]
   21920:	282f2833 	.word	0x282f2833
   21924:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   21928:	f8da 3010 	ldr.w	r3, [sl, #16]
   2192c:	689b      	ldr	r3, [r3, #8]
   2192e:	2b00      	cmp	r3, #0
   21930:	d0ea      	beq.n	21908 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   21932:	2301      	movs	r3, #1
   21934:	e005      	b.n	21942 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   21936:	f8da 3010 	ldr.w	r3, [sl, #16]
   2193a:	6a1b      	ldr	r3, [r3, #32]
   2193c:	2b00      	cmp	r3, #0
   2193e:	d0e3      	beq.n	21908 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   21940:	2310      	movs	r3, #16
	event->state |= state;
   21942:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   21946:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2194a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2194e:	430b      	orrs	r3, r1
   21950:	f363 3294 	bfi	r2, r3, #14, #7
   21954:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   21958:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2195c:	f389 8811 	msr	BASEPRI, r9
   21960:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   21964:	3501      	adds	r5, #1
   21966:	f10a 0a14 	add.w	sl, sl, #20
   2196a:	e7a9      	b.n	218c0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2196c:	2304      	movs	r3, #4
   2196e:	e7e8      	b.n	21942 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   21970:	f8da 0010 	ldr.w	r0, [sl, #16]
   21974:	4622      	mov	r2, r4
   21976:	4651      	mov	r1, sl
   21978:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2197a:	f7ff ff67 	bl	2184c <add_event>
	event->poller = poller;
   2197e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   21982:	3601      	adds	r6, #1
   21984:	e7ea      	b.n	2195c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   21986:	f8da 0010 	ldr.w	r0, [sl, #16]
   2198a:	4622      	mov	r2, r4
   2198c:	4651      	mov	r1, sl
   2198e:	e7f4      	b.n	2197a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   21990:	f8da 0010 	ldr.w	r0, [sl, #16]
   21994:	4622      	mov	r2, r4
   21996:	4651      	mov	r1, sl
   21998:	3024      	adds	r0, #36	; 0x24
   2199a:	e7ee      	b.n	2197a <register_events+0xcc>

0002199c <signal_poll_event>:
{
   2199c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   219a0:	6884      	ldr	r4, [r0, #8]
{
   219a2:	4605      	mov	r5, r0
   219a4:	460e      	mov	r6, r1
	if (poller != NULL) {
   219a6:	b144      	cbz	r4, 219ba <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   219a8:	7863      	ldrb	r3, [r4, #1]
   219aa:	2b01      	cmp	r3, #1
   219ac:	d12e      	bne.n	21a0c <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   219ae:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   219b2:	f013 0302 	ands.w	r3, r3, #2
   219b6:	d10a      	bne.n	219ce <signal_poll_event+0x32>
		poller->is_polling = false;
   219b8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   219ba:	68eb      	ldr	r3, [r5, #12]
   219bc:	f3c3 3286 	ubfx	r2, r3, #14, #7
   219c0:	4316      	orrs	r6, r2
	event->poller = NULL;
   219c2:	2000      	movs	r0, #0
	event->state |= state;
   219c4:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   219c8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   219ca:	60eb      	str	r3, [r5, #12]
	return retcode;
   219cc:	e03e      	b.n	21a4c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   219ce:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   219d2:	f1b3 3fff 	cmp.w	r3, #4294967295
   219d6:	bf08      	it	eq
   219d8:	f112 0f02 	cmneq.w	r2, #2
   219dc:	d032      	beq.n	21a44 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   219de:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   219e2:	4640      	mov	r0, r8
   219e4:	f7ff fe3e 	bl	21664 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   219e8:	2e08      	cmp	r6, #8
   219ea:	bf0c      	ite	eq
   219ec:	f06f 0303 	mvneq.w	r3, #3
   219f0:	2300      	movne	r3, #0
   219f2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   219f4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   219f8:	06db      	lsls	r3, r3, #27
   219fa:	d109      	bne.n	21a10 <signal_poll_event+0x74>
   219fc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   21a00:	b937      	cbnz	r7, 21a10 <signal_poll_event+0x74>
	z_ready_thread(thread);
   21a02:	4640      	mov	r0, r8
   21a04:	f7ff fddb 	bl	215be <z_ready_thread>
		poller->is_polling = false;
   21a08:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   21a0a:	e7d6      	b.n	219ba <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   21a0c:	2b02      	cmp	r3, #2
   21a0e:	d001      	beq.n	21a14 <signal_poll_event+0x78>
		poller->is_polling = false;
   21a10:	2300      	movs	r3, #0
   21a12:	e7d1      	b.n	219b8 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   21a14:	7823      	ldrb	r3, [r4, #0]
   21a16:	2b00      	cmp	r3, #0
   21a18:	d0cf      	beq.n	219ba <signal_poll_event+0x1e>
   21a1a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   21a1e:	2f00      	cmp	r7, #0
   21a20:	d0f2      	beq.n	21a08 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   21a22:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   21a26:	f1a4 0914 	sub.w	r9, r4, #20
   21a2a:	f104 0014 	add.w	r0, r4, #20
   21a2e:	f7ff fe76 	bl	2171e <z_abort_timeout>
		twork->poll_result = 0;
   21a32:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   21a36:	4649      	mov	r1, r9
   21a38:	4638      	mov	r0, r7
   21a3a:	f7ff fcdd 	bl	213f8 <z_work_submit_to_queue>
		poller->is_polling = false;
   21a3e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   21a42:	e7ba      	b.n	219ba <signal_poll_event+0x1e>
		poller->is_polling = false;
   21a44:	2300      	movs	r3, #0
   21a46:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   21a48:	f06f 000a 	mvn.w	r0, #10
}
   21a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021a50 <clear_event_registrations>:
	while (num_events--) {
   21a50:	2314      	movs	r3, #20
{
   21a52:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a54:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   21a58:	2400      	movs	r4, #0
	switch (event->type) {
   21a5a:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   21a5e:	b901      	cbnz	r1, 21a62 <clear_event_registrations+0x12>
}
   21a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   21a62:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   21a66:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   21a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21a6e:	2b08      	cmp	r3, #8
   21a70:	f1a0 0714 	sub.w	r7, r0, #20
   21a74:	d80c      	bhi.n	21a90 <clear_event_registrations+0x40>
   21a76:	fa26 f303 	lsr.w	r3, r6, r3
   21a7a:	07db      	lsls	r3, r3, #31
   21a7c:	d508      	bpl.n	21a90 <clear_event_registrations+0x40>
	return node->next != NULL;
   21a7e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   21a82:	b12b      	cbz	r3, 21a90 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   21a84:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   21a88:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   21a8a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   21a8c:	e940 4405 	strd	r4, r4, [r0, #-20]
   21a90:	f382 8811 	msr	BASEPRI, r2
   21a94:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21a98:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a9c:	f3ef 8211 	mrs	r2, BASEPRI
   21aa0:	f383 8812 	msr	BASEPRI_MAX, r3
   21aa4:	f3bf 8f6f 	isb	sy
   21aa8:	3901      	subs	r1, #1
   21aaa:	4638      	mov	r0, r7
   21aac:	e7d7      	b.n	21a5e <clear_event_registrations+0xe>

00021aae <k_poll_event_init>:
{
   21aae:	b510      	push	{r4, lr}
	event->type = type;
   21ab0:	0552      	lsls	r2, r2, #21
   21ab2:	0209      	lsls	r1, r1, #8
   21ab4:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   21ab8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   21abc:	430a      	orrs	r2, r1
   21abe:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   21ac0:	2400      	movs	r4, #0
	event->type = type;
   21ac2:	430a      	orrs	r2, r1
	event->obj = obj;
   21ac4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   21ac8:	6084      	str	r4, [r0, #8]
}
   21aca:	bd10      	pop	{r4, pc}

00021acc <z_handle_obj_poll_events>:
{
   21acc:	4603      	mov	r3, r0
	return list->head == list;
   21ace:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   21ad0:	4283      	cmp	r3, r0
   21ad2:	d008      	beq.n	21ae6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   21ad4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21ad8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21ada:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21adc:	2300      	movs	r3, #0
	node->prev = NULL;
   21ade:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   21ae2:	f7ff bf5b 	b.w	2199c <signal_poll_event>
}
   21ae6:	4770      	bx	lr

00021ae8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   21ae8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   21aea:	e9c0 0000 	strd	r0, r0, [r0]
   21aee:	6083      	str	r3, [r0, #8]
}
   21af0:	4770      	bx	lr

00021af2 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   21af2:	2300      	movs	r3, #0
   21af4:	6083      	str	r3, [r0, #8]
}
   21af6:	4770      	bx	lr

00021af8 <k_free>:
	if (ptr != NULL) {
   21af8:	b120      	cbz	r0, 21b04 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   21afa:	1f01      	subs	r1, r0, #4
   21afc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   21b00:	f7ff bad4 	b.w	210ac <k_heap_free>
}
   21b04:	4770      	bx	lr

00021b06 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   21b06:	4770      	bx	lr
