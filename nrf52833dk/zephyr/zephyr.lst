
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	80 15 00 20 ad 14 00 00 e9 3e 00 00 81 14 00 00     ... .....>......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	81 14 00 00 81 14 00 00 81 14 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	7d 11 00 00 81 14 00 00 00 00 00 00 29 11 00 00     }...........)...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	81 14 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
			switch (*fmt) {
  c0:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
  d0:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
  e0:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...
  f0:	2d 12 00 00 2d 12 00 00 2d 12 00 00 2d 12 00 00     -...-...-...-...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				align = VA_STACK_ALIGN(void *);
     120:	f000 f808 	bl	134 <__udivmoddi4>
			switch (*fmt) {
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
		buf = (void *) ROUND_UP(buf, align);
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_FLASH_SIZE+0xd0>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
		if (is_str_arg) {
     162:	4095      	lsls	r5, r2
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	ea43 0c0c 	orr.w	ip, r3, ip
			int v = va_arg(ap, int);
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
				arg_idx--;
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     17a:	fb08 f900 	mul.w	r9, r8, r0
				continue;
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
				if (fmt[-1] == 'l') {
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
					if (fmt[-2] == 'l') {
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
				parsing = false;
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
					if (fmt[-2] == 'l') {
     192:	f1a8 0702 	sub.w	r7, r8, #2
						align = VA_STACK_ALIGN(long long);
     196:	442b      	add	r3, r5
				size = sizeof(void *);
     198:	eba3 0309 	sub.w	r3, r3, r9
					v.ld = va_arg(ap, long double);
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
				buf = (void *) ROUND_UP(buf, align);
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				if (buf0 != NULL) {
     1ae:	42a0      	cmp	r0, r4
					if (BUF_OFFSET + size > len) {
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
						*(long double *)buf = v.ld;
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
				buf += size;
     1be:	f1ac 0302 	sub.w	r3, ip, #2
				parsing = false;
     1c2:	442c      	add	r4, r5
			switch (*fmt) {
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			if (*++fmt == '\0') {
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
			if (!parsing) {
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
				if (*fmt == '%') {
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
					arg_idx++;
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_FLASH_SIZE+0x48>
     1e2:	1b43      	subs	r3, r0, r5
					parsing = true;
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				align = VA_STACK_ALIGN(size_t);
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
			switch (*fmt) {
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
				parsing = false;
     1f6:	fb0c f807 	mul.w	r8, ip, r7

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
					return -EINVAL;
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_FLASH_SIZE+0xc8>
			long long v = va_arg(ap, long long);
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	f1ac 0002 	sub.w	r0, ip, #2
				}
			}
			buf += sizeof(long long);
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
		if (is_str_arg) {
     218:	b2a4      	uxth	r4, r4
		} else if (size == sizeof(int)) {
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
			int v = va_arg(ap, int);
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
			if (buf0 != NULL) {
     222:	fb0c f707 	mul.w	r7, ip, r7
		} else if (size == sizeof(long long)) {
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
			if (buf0 != NULL) {
     234:	d204      	bcs.n	240 <CONFIG_FLASH_SIZE+0x40>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_FLASH_SIZE+0x40>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
			s = va_arg(ap, char *);
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (is_ro && !do_ro) {
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25e:	b2af      	uxth	r7, r5
				if (buf0 != NULL) {
     260:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
					str_ptr_arg[s_idx] = arg_idx;
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
					if (is_ro) {
     278:	d922      	bls.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     280:	d204      	bcs.n	28c <CONFIG_FLASH_SIZE+0x8c>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_FLASH_SIZE+0x8c>
						s_ro_cnt++;
     286:	f1ac 0002 	sub.w	r0, ip, #2
				s_idx++;
     28a:	4429      	add	r1, r5
					if (BUF_OFFSET + size > len) {
     28c:	eba1 0108 	sub.w	r1, r1, r8
			buf += sizeof(char *);
     290:	b29b      	uxth	r3, r3
					if (BUF_OFFSET + size > len) {
     292:	fbb1 fcfe 	udiv	ip, r1, lr
			switch (*fmt) {
     296:	fb0e 111c 	mls	r1, lr, ip, r1
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
				} else if (is_ro) {
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
					len += 1;
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
					len += 2;
     2ac:	d204      	bcs.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
				} else if (rws_pos_en) {
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
					len += strlen(s) + 1 + 1;
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_FLASH_SIZE+0x8c>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_FLASH_SIZE+0x14>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	4663      	mov	r3, ip
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ce:	e7b7      	b.n	240 <CONFIG_FLASH_SIZE+0x40>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_FLASH_SIZE+0xe2>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_FLASH_SIZE+0xdc>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7f9      	b.n	2d6 <CONFIG_FLASH_SIZE+0xd6>
	*(char **)buf0 = NULL;
     2e2:	fab3 f783 	clz	r7, r3
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_FLASH_SIZE+0x10c>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_FLASH_SIZE+0xf0>
	if (rws_pos_en) {
     2ec:	4572      	cmp	r2, lr
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	d808      	bhi.n	302 <CONFIG_FLASH_SIZE+0x102>
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
		for (i = 0; i < s_idx; i++) {
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_FLASH_SIZE+0x106>
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
		for (i = 0; i < s_idx; i++) {
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_FLASH_SIZE+0xfc>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     310:	40bb      	lsls	r3, r7
		if (BUF_OFFSET + 1 + size > len) {
     312:	fa22 f40c 	lsr.w	r4, r2, ip
			*buf++ = str_ptr_arg[i];
     316:	431c      	orrs	r4, r3
	for (i = 0; i < s_idx; i++) {
     318:	fa2e f10c 	lsr.w	r1, lr, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	40b8      	lsls	r0, r7
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	4301      	orrs	r1, r0
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
			if (BUF_OFFSET + 1 > len) {
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     334:	fb09 3018 	mls	r0, r9, r8, r3
			if (BUF_OFFSET + 1 > len) {
     338:	0c0b      	lsrs	r3, r1, #16
			*buf++ = pos;
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
		for (i = 0; i < s_idx; i++) {
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_FLASH_SIZE+0x1cc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
		if (rws_pos_en) {
     350:	d204      	bcs.n	35c <CONFIG_FLASH_SIZE+0x15c>
     352:	459a      	cmp	sl, r3
			*buf++ = str_ptr_arg[i];
     354:	d902      	bls.n	35c <CONFIG_FLASH_SIZE+0x15c>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
			size = 0;
     35c:	eba3 030a 	sub.w	r3, r3, sl
		if (BUF_OFFSET + 1 + size > len) {
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
		*buf++ = str_ptr_pos[i];
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
		memcpy(buf, s, size);
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_FLASH_SIZE+0x1d0>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
		buf += size;
     37c:	d204      	bcs.n	388 <CONFIG_FLASH_SIZE+0x188>
     37e:	458e      	cmp	lr, r1
	for (i = 0; i < s_idx; i++) {
     380:	d902      	bls.n	388 <CONFIG_FLASH_SIZE+0x188>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
			size = strlen(s) + 1;
     39a:	d302      	bcc.n	3a2 <CONFIG_FLASH_SIZE+0x1a2>
     39c:	d106      	bne.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
		return -EFAULT;
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_FLASH_SIZE+0x15c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_FLASH_SIZE+0x188>

000003d4 <main>:

#include <zephyr/kernel.h>

void main(void)
{
	printk("Hello World! %s\n", CONFIG_BOARD);
     3d4:	4901      	ldr	r1, [pc, #4]	; (3dc <main+0x8>)
     3d6:	4802      	ldr	r0, [pc, #8]	; (3e0 <main+0xc>)
     3d8:	f003 bc2e 	b.w	3c38 <printk>
     3dc:	00004b00 	.word	0x00004b00
     3e0:	00004b14 	.word	0x00004b14

000003e4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     3e4:	4b01      	ldr	r3, [pc, #4]	; (3ec <char_out+0x8>)
     3e6:	681b      	ldr	r3, [r3, #0]
     3e8:	4718      	bx	r3
     3ea:	bf00      	nop
     3ec:	20000000 	.word	0x20000000

000003f0 <__printk_hook_install>:
	_char_out = fn;
     3f0:	4b01      	ldr	r3, [pc, #4]	; (3f8 <__printk_hook_install+0x8>)
     3f2:	6018      	str	r0, [r3, #0]
}
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop
     3f8:	20000000 	.word	0x20000000

000003fc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     3fc:	b507      	push	{r0, r1, r2, lr}
     3fe:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     400:	2100      	movs	r1, #0
     402:	4602      	mov	r2, r0
     404:	9100      	str	r1, [sp, #0]
     406:	4803      	ldr	r0, [pc, #12]	; (414 <CONFIG_MAIN_STACK_SIZE+0x14>)
     408:	f000 f914 	bl	634 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     40c:	b003      	add	sp, #12
     40e:	f85d fb04 	ldr.w	pc, [sp], #4
     412:	bf00      	nop
     414:	000003e5 	.word	0x000003e5

00000418 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     41c:	8b05      	ldrh	r5, [r0, #24]
{
     41e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     420:	0728      	lsls	r0, r5, #28
{
     422:	4690      	mov	r8, r2
	if (processing) {
     424:	d411      	bmi.n	44a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     426:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     428:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     42c:	f040 80cd 	bne.w	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
			evt = process_recheck(mgr);
     430:	4620      	mov	r0, r4
     432:	f003 fc18 	bl	3c66 <process_recheck>
		}

		if (evt == EVT_NOP) {
     436:	b178      	cbz	r0, 458 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     438:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     43a:	8b21      	ldrh	r1, [r4, #24]
     43c:	2804      	cmp	r0, #4
     43e:	d811      	bhi.n	464 <process_event+0x4c>
     440:	e8df f000 	tbb	[pc, r0]
     444:	856d10c3 	.word	0x856d10c3
     448:	95          	.byte	0x95
     449:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     44a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     44c:	bf0c      	ite	eq
     44e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     452:	f045 0520 	orrne.w	r5, r5, #32
     456:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     458:	f388 8811 	msr	BASEPRI, r8
     45c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     464:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     468:	45aa      	cmp	sl, r5
     46a:	f000 80a6 	beq.w	5ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     46e:	2700      	movs	r7, #0
     470:	46b9      	mov	r9, r7
     472:	463e      	mov	r6, r7
     474:	68a3      	ldr	r3, [r4, #8]
     476:	2b00      	cmp	r3, #0
     478:	f000 80bd 	beq.w	5f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10e>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     47c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     480:	8321      	strh	r1, [r4, #24]
     482:	f388 8811 	msr	BASEPRI, r8
     486:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     48a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     48c:	2900      	cmp	r1, #0
     48e:	f000 80bb 	beq.w	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
	return node->next;
     492:	680d      	ldr	r5, [r1, #0]
     494:	2900      	cmp	r1, #0
     496:	f000 80b7 	beq.w	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
		mon->callback(mgr, mon, state, res);
     49a:	f8d1 8004 	ldr.w	r8, [r1, #4]
     49e:	4633      	mov	r3, r6
     4a0:	4652      	mov	r2, sl
     4a2:	4620      	mov	r0, r4
     4a4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     4a6:	2d00      	cmp	r5, #0
     4a8:	d076      	beq.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
     4aa:	682b      	ldr	r3, [r5, #0]
     4ac:	4629      	mov	r1, r5
     4ae:	461d      	mov	r5, r3
     4b0:	e7f0      	b.n	494 <process_event+0x7c>
     4b2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     4b6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     4b8:	2a01      	cmp	r2, #1
     4ba:	d81b      	bhi.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
	list->head = NULL;
     4bc:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4be:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     4c2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     4c4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4c6:	b289      	uxth	r1, r1
	list->tail = NULL;
     4c8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     4cc:	d109      	bne.n	4e2 <process_event+0xca>
     4ce:	463b      	mov	r3, r7
     4d0:	e003      	b.n	4da <process_event+0xc2>
				mgr->refs += 1U;
     4d2:	8b62      	ldrh	r2, [r4, #26]
     4d4:	3201      	adds	r2, #1
     4d6:	8362      	strh	r2, [r4, #26]
	return node->next;
     4d8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4da:	2b00      	cmp	r3, #0
     4dc:	d1f9      	bne.n	4d2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4de:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     4e2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     4e4:	4620      	mov	r0, r4
     4e6:	f003 fbbe 	bl	3c66 <process_recheck>
     4ea:	2800      	cmp	r0, #0
     4ec:	d07b      	beq.n	5e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfe>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4ee:	f041 0120 	orr.w	r1, r1, #32
     4f2:	e077      	b.n	5e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     4f4:	2b04      	cmp	r3, #4
     4f6:	d10a      	bne.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4f8:	f021 0107 	bic.w	r1, r1, #7
     4fc:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     4fe:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     500:	4620      	mov	r0, r4
     502:	f003 fbb0 	bl	3c66 <process_recheck>
     506:	b110      	cbz	r0, 50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     508:	f041 0120 	orr.w	r1, r1, #32
     50c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     50e:	8b21      	ldrh	r1, [r4, #24]
     510:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     514:	45aa      	cmp	sl, r5
     516:	d050      	beq.n	5ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd2>
     518:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     51a:	46b9      	mov	r9, r7
     51c:	e7aa      	b.n	474 <process_event+0x5c>
			transit = mgr->transitions->start;
     51e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     520:	f021 0107 	bic.w	r1, r1, #7
     524:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     528:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     52a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     52e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     530:	d12d      	bne.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
		    || (transit != NULL)) {
     532:	f1b9 0f00 	cmp.w	r9, #0
     536:	d040      	beq.n	5ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     538:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     53c:	8321      	strh	r1, [r4, #24]
     53e:	f388 8811 	msr	BASEPRI, r8
     542:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     546:	493a      	ldr	r1, [pc, #232]	; (630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>)
     548:	4620      	mov	r0, r4
     54a:	47c8      	blx	r9
     54c:	e029      	b.n	5a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     54e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     552:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     554:	f041 0104 	orr.w	r1, r1, #4
     558:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     55a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     55c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     560:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     562:	d0e6      	beq.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     564:	2700      	movs	r7, #0
		res = 0;
     566:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     568:	f04f 0a04 	mov.w	sl, #4
     56c:	e782      	b.n	474 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     56e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     572:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     574:	f041 0105 	orr.w	r1, r1, #5
     578:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     57a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     57c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     580:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     582:	d0d6      	beq.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     584:	2700      	movs	r7, #0
		res = 0;
     586:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     588:	f04f 0a05 	mov.w	sl, #5
     58c:	e772      	b.n	474 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     58e:	2700      	movs	r7, #0
		res = 0;
     590:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     592:	f04f 0a06 	mov.w	sl, #6
     596:	e76d      	b.n	474 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     598:	462b      	mov	r3, r5
     59a:	e787      	b.n	4ac <process_event+0x94>
			if (transit != NULL) {
     59c:	f1b9 0f00 	cmp.w	r9, #0
     5a0:	d1d1      	bne.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
	__asm__ volatile(
     5a2:	f04f 0320 	mov.w	r3, #32
     5a6:	f3ef 8811 	mrs	r8, BASEPRI
     5aa:	f383 8812 	msr	BASEPRI_MAX, r3
     5ae:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     5b2:	8b23      	ldrh	r3, [r4, #24]
     5b4:	f023 0308 	bic.w	r3, r3, #8
     5b8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     5ba:	8b25      	ldrh	r5, [r4, #24]
     5bc:	06ea      	lsls	r2, r5, #27
     5be:	d52e      	bpl.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     5c0:	f025 0310 	bic.w	r3, r5, #16
     5c4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     5c6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     5ca:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5cc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     5ce:	2e00      	cmp	r6, #0
     5d0:	f6bf af6f 	bge.w	4b2 <process_event+0x9a>
	list->head = NULL;
     5d4:	2300      	movs	r3, #0
		*clients = mgr->clients;
     5d6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     5d8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5dc:	f021 0107 	bic.w	r1, r1, #7
     5e0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5e4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5e6:	8b21      	ldrh	r1, [r4, #24]
     5e8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5ec:	45aa      	cmp	sl, r5
     5ee:	f04f 0900 	mov.w	r9, #0
     5f2:	f47f af3f 	bne.w	474 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     5f6:	2f00      	cmp	r7, #0
     5f8:	d09b      	beq.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5fa:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5fe:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     600:	f388 8811 	msr	BASEPRI, r8
     604:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     608:	2f00      	cmp	r7, #0
     60a:	d0c7      	beq.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
	return node->next;
     60c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     60e:	4639      	mov	r1, r7
     610:	4633      	mov	r3, r6
     612:	4652      	mov	r2, sl
     614:	4620      	mov	r0, r4
     616:	f003 fb52 	bl	3cbe <notify_one>
	list->head = node;
     61a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     61c:	e7f4      	b.n	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     61e:	06ab      	lsls	r3, r5, #26
     620:	f57f af1a 	bpl.w	458 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     624:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     628:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     62a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     62e:	e6ff      	b.n	430 <process_event+0x18>
     630:	00003ceb 	.word	0x00003ceb

00000634 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     638:	4681      	mov	r9, r0
     63a:	b095      	sub	sp, #84	; 0x54
     63c:	468b      	mov	fp, r1
     63e:	4617      	mov	r7, r2
     640:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     642:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     644:	7838      	ldrb	r0, [r7, #0]
     646:	b908      	cbnz	r0, 64c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     648:	4628      	mov	r0, r5
     64a:	e358      	b.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
			OUTC(*fp++);
     64c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     64e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     650:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     652:	d006      	beq.n	662 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     654:	4659      	mov	r1, fp
     656:	47c8      	blx	r9
     658:	2800      	cmp	r0, #0
     65a:	f2c0 8350 	blt.w	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     65e:	3501      	adds	r5, #1
		if (bps == NULL) {
     660:	e1fb      	b.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
		} state = {
     662:	2218      	movs	r2, #24
     664:	2100      	movs	r1, #0
     666:	a80e      	add	r0, sp, #56	; 0x38
     668:	f003 fc6a 	bl	3f40 <memset>
	if (*sp == '%') {
     66c:	787b      	ldrb	r3, [r7, #1]
     66e:	2b25      	cmp	r3, #37	; 0x25
     670:	d07d      	beq.n	76e <z_cbvprintf_impl+0x13a>
     672:	2300      	movs	r3, #0
     674:	1c78      	adds	r0, r7, #1
     676:	4698      	mov	r8, r3
     678:	469e      	mov	lr, r3
     67a:	469c      	mov	ip, r3
     67c:	461e      	mov	r6, r3
     67e:	4601      	mov	r1, r0
		switch (*sp) {
     680:	f810 2b01 	ldrb.w	r2, [r0], #1
     684:	2a2b      	cmp	r2, #43	; 0x2b
     686:	f000 80a1 	beq.w	7cc <z_cbvprintf_impl+0x198>
     68a:	f200 8098 	bhi.w	7be <z_cbvprintf_impl+0x18a>
     68e:	2a20      	cmp	r2, #32
     690:	f000 809f 	beq.w	7d2 <z_cbvprintf_impl+0x19e>
     694:	2a23      	cmp	r2, #35	; 0x23
     696:	f000 809f 	beq.w	7d8 <z_cbvprintf_impl+0x1a4>
     69a:	b12b      	cbz	r3, 6a8 <z_cbvprintf_impl+0x74>
     69c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     6a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     6a8:	f1b8 0f00 	cmp.w	r8, #0
     6ac:	d005      	beq.n	6ba <z_cbvprintf_impl+0x86>
     6ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6b2:	f043 0320 	orr.w	r3, r3, #32
     6b6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     6ba:	f1be 0f00 	cmp.w	lr, #0
     6be:	d005      	beq.n	6cc <z_cbvprintf_impl+0x98>
     6c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6c4:	f043 0310 	orr.w	r3, r3, #16
     6c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     6cc:	f1bc 0f00 	cmp.w	ip, #0
     6d0:	d005      	beq.n	6de <z_cbvprintf_impl+0xaa>
     6d2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6d6:	f043 0308 	orr.w	r3, r3, #8
     6da:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     6de:	b12e      	cbz	r6, 6ec <z_cbvprintf_impl+0xb8>
     6e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6e4:	f043 0304 	orr.w	r3, r3, #4
     6e8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     6ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6f0:	f003 0044 	and.w	r0, r3, #68	; 0x44
     6f4:	2844      	cmp	r0, #68	; 0x44
     6f6:	d103      	bne.n	700 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     6f8:	f36f 1386 	bfc	r3, #6, #1
     6fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     700:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     704:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     70a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     70e:	d17f      	bne.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		conv->width_star = true;
     710:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     714:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     718:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     71a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     71e:	781a      	ldrb	r2, [r3, #0]
     720:	2a2e      	cmp	r2, #46	; 0x2e
     722:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     726:	bf0c      	ite	eq
     728:	2101      	moveq	r1, #1
     72a:	2100      	movne	r1, #0
     72c:	f361 0241 	bfi	r2, r1, #1, #1
     730:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     734:	d178      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
	if (*sp == '*') {
     736:	785a      	ldrb	r2, [r3, #1]
     738:	2a2a      	cmp	r2, #42	; 0x2a
     73a:	d06e      	beq.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
	++sp;
     73c:	3301      	adds	r3, #1
	size_t val = 0;
     73e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     740:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     744:	4619      	mov	r1, r3
     746:	f811 0b01 	ldrb.w	r0, [r1], #1
     74a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     74e:	2e09      	cmp	r6, #9
     750:	f240 8095 	bls.w	87e <__z_interrupt_stack_SIZEOF+0x3e>
	conv->unsupported |= ((conv->prec_value < 0)
     754:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     758:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     75a:	f3c1 0040 	ubfx	r0, r1, #1, #1
     75e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     762:	460a      	mov	r2, r1
     764:	f360 0241 	bfi	r2, r0, #1, #1
     768:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     76c:	e05c      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
		conv->specifier = *sp++;
     76e:	1cba      	adds	r2, r7, #2
     770:	9203      	str	r2, [sp, #12]
     772:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     776:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     77a:	07da      	lsls	r2, r3, #31
     77c:	f140 812e 	bpl.w	9dc <__z_interrupt_stack_SIZEOF+0x19c>
			width = va_arg(ap, int);
     780:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     784:	f1b8 0f00 	cmp.w	r8, #0
     788:	da07      	bge.n	79a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
     78a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     78e:	f042 0204 	orr.w	r2, r2, #4
     792:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     796:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     79a:	075e      	lsls	r6, r3, #29
     79c:	f140 8127 	bpl.w	9ee <__z_interrupt_stack_SIZEOF+0x1ae>
			int arg = va_arg(ap, int);
     7a0:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     7a4:	f1ba 0f00 	cmp.w	sl, #0
     7a8:	f280 8126 	bge.w	9f8 <__z_interrupt_stack_SIZEOF+0x1b8>
				conv->prec_present = false;
     7ac:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     7b0:	f36f 0341 	bfc	r3, #1, #1
     7b4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     7b8:	f04f 3aff 	mov.w	sl, #4294967295
     7bc:	e11c      	b.n	9f8 <__z_interrupt_stack_SIZEOF+0x1b8>
		switch (*sp) {
     7be:	2a2d      	cmp	r2, #45	; 0x2d
     7c0:	d00d      	beq.n	7de <z_cbvprintf_impl+0x1aa>
     7c2:	2a30      	cmp	r2, #48	; 0x30
     7c4:	f47f af69 	bne.w	69a <z_cbvprintf_impl+0x66>
     7c8:	2301      	movs	r3, #1
	} while (loop);
     7ca:	e758      	b.n	67e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     7cc:	f04f 0c01 	mov.w	ip, #1
     7d0:	e755      	b.n	67e <z_cbvprintf_impl+0x4a>
     7d2:	f04f 0e01 	mov.w	lr, #1
     7d6:	e752      	b.n	67e <z_cbvprintf_impl+0x4a>
     7d8:	f04f 0801 	mov.w	r8, #1
     7dc:	e74f      	b.n	67e <z_cbvprintf_impl+0x4a>
     7de:	2601      	movs	r6, #1
     7e0:	e74d      	b.n	67e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     7e2:	fb0e 6202 	mla	r2, lr, r2, r6
     7e6:	3a30      	subs	r2, #48	; 0x30
     7e8:	4603      	mov	r3, r0
     7ea:	4618      	mov	r0, r3
     7ec:	f810 6b01 	ldrb.w	r6, [r0], #1
     7f0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7f4:	f1bc 0f09 	cmp.w	ip, #9
     7f8:	d9f3      	bls.n	7e2 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
     7fa:	4299      	cmp	r1, r3
     7fc:	d08f      	beq.n	71e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     7fe:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     802:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     804:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     806:	f362 0141 	bfi	r1, r2, #1, #1
     80a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     80e:	e786      	b.n	71e <z_cbvprintf_impl+0xea>
     810:	460b      	mov	r3, r1
	size_t val = 0;
     812:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     814:	f04f 0e0a 	mov.w	lr, #10
     818:	e7e7      	b.n	7ea <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
     81a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     81e:	f042 0204 	orr.w	r2, r2, #4
     822:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     826:	3302      	adds	r3, #2
	switch (*sp) {
     828:	781a      	ldrb	r2, [r3, #0]
     82a:	2a6c      	cmp	r2, #108	; 0x6c
     82c:	d047      	beq.n	8be <__z_interrupt_stack_SIZEOF+0x7e>
     82e:	d82b      	bhi.n	888 <__z_interrupt_stack_SIZEOF+0x48>
     830:	2a68      	cmp	r2, #104	; 0x68
     832:	d031      	beq.n	898 <__z_interrupt_stack_SIZEOF+0x58>
     834:	2a6a      	cmp	r2, #106	; 0x6a
     836:	d04b      	beq.n	8d0 <__z_interrupt_stack_SIZEOF+0x90>
     838:	2a4c      	cmp	r2, #76	; 0x4c
     83a:	d051      	beq.n	8e0 <__z_interrupt_stack_SIZEOF+0xa0>
	conv->specifier = *sp++;
     83c:	461a      	mov	r2, r3
     83e:	f812 3b01 	ldrb.w	r3, [r2], #1
     842:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     844:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     846:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     84a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     84e:	f200 80be 	bhi.w	9ce <__z_interrupt_stack_SIZEOF+0x18e>
     852:	2b6d      	cmp	r3, #109	; 0x6d
     854:	d851      	bhi.n	8fa <__z_interrupt_stack_SIZEOF+0xba>
     856:	2b69      	cmp	r3, #105	; 0x69
     858:	f200 80b9 	bhi.w	9ce <__z_interrupt_stack_SIZEOF+0x18e>
     85c:	2b57      	cmp	r3, #87	; 0x57
     85e:	d867      	bhi.n	930 <__z_interrupt_stack_SIZEOF+0xf0>
     860:	2b41      	cmp	r3, #65	; 0x41
     862:	d003      	beq.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     864:	3b45      	subs	r3, #69	; 0x45
     866:	2b02      	cmp	r3, #2
     868:	f200 80b1 	bhi.w	9ce <__z_interrupt_stack_SIZEOF+0x18e>
		conv->specifier_cat = SPECIFIER_FP;
     86c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     870:	2204      	movs	r2, #4
     872:	f362 0302 	bfi	r3, r2, #0, #3
     876:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     87a:	2301      	movs	r3, #1
			break;
     87c:	e073      	b.n	966 <__z_interrupt_stack_SIZEOF+0x126>
		val = 10U * val + *sp++ - '0';
     87e:	fb0c 0202 	mla	r2, ip, r2, r0
     882:	3a30      	subs	r2, #48	; 0x30
     884:	460b      	mov	r3, r1
     886:	e75d      	b.n	744 <z_cbvprintf_impl+0x110>
	switch (*sp) {
     888:	2a74      	cmp	r2, #116	; 0x74
     88a:	d025      	beq.n	8d8 <__z_interrupt_stack_SIZEOF+0x98>
     88c:	2a7a      	cmp	r2, #122	; 0x7a
     88e:	d1d5      	bne.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
		conv->length_mod = LENGTH_Z;
     890:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     894:	2106      	movs	r1, #6
     896:	e00c      	b.n	8b2 <__z_interrupt_stack_SIZEOF+0x72>
		if (*++sp == 'h') {
     898:	785a      	ldrb	r2, [r3, #1]
     89a:	2a68      	cmp	r2, #104	; 0x68
     89c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8a0:	d106      	bne.n	8b0 <__z_interrupt_stack_SIZEOF+0x70>
			conv->length_mod = LENGTH_HH;
     8a2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     8a4:	f361 02c6 	bfi	r2, r1, #3, #4
     8a8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     8ac:	3302      	adds	r3, #2
     8ae:	e7c5      	b.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
			conv->length_mod = LENGTH_H;
     8b0:	2102      	movs	r1, #2
     8b2:	f361 02c6 	bfi	r2, r1, #3, #4
     8b6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     8ba:	3301      	adds	r3, #1
     8bc:	e7be      	b.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
		if (*++sp == 'l') {
     8be:	785a      	ldrb	r2, [r3, #1]
     8c0:	2a6c      	cmp	r2, #108	; 0x6c
     8c2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8c6:	d101      	bne.n	8cc <__z_interrupt_stack_SIZEOF+0x8c>
			conv->length_mod = LENGTH_LL;
     8c8:	2104      	movs	r1, #4
     8ca:	e7eb      	b.n	8a4 <__z_interrupt_stack_SIZEOF+0x64>
			conv->length_mod = LENGTH_L;
     8cc:	2103      	movs	r1, #3
     8ce:	e7f0      	b.n	8b2 <__z_interrupt_stack_SIZEOF+0x72>
		conv->length_mod = LENGTH_J;
     8d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8d4:	2105      	movs	r1, #5
     8d6:	e7ec      	b.n	8b2 <__z_interrupt_stack_SIZEOF+0x72>
		conv->length_mod = LENGTH_T;
     8d8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8dc:	2107      	movs	r1, #7
     8de:	e7e8      	b.n	8b2 <__z_interrupt_stack_SIZEOF+0x72>
		conv->unsupported = true;
     8e0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     8e4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     8e8:	f022 0202 	bic.w	r2, r2, #2
     8ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     8f0:	f042 0202 	orr.w	r2, r2, #2
     8f4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     8f8:	e7df      	b.n	8ba <__z_interrupt_stack_SIZEOF+0x7a>
	switch (conv->specifier) {
     8fa:	3b6e      	subs	r3, #110	; 0x6e
     8fc:	b2d9      	uxtb	r1, r3
     8fe:	2301      	movs	r3, #1
     900:	408b      	lsls	r3, r1
     902:	f240 4182 	movw	r1, #1154	; 0x482
     906:	420b      	tst	r3, r1
     908:	d137      	bne.n	97a <__z_interrupt_stack_SIZEOF+0x13a>
     90a:	f013 0f24 	tst.w	r3, #36	; 0x24
     90e:	d151      	bne.n	9b4 <__z_interrupt_stack_SIZEOF+0x174>
     910:	07d8      	lsls	r0, r3, #31
     912:	d55c      	bpl.n	9ce <__z_interrupt_stack_SIZEOF+0x18e>
		conv->specifier_cat = SPECIFIER_PTR;
     914:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     918:	2103      	movs	r1, #3
     91a:	f361 0302 	bfi	r3, r1, #0, #3
     91e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     922:	f002 0378 	and.w	r3, r2, #120	; 0x78
     926:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     92a:	424b      	negs	r3, r1
     92c:	414b      	adcs	r3, r1
     92e:	e01a      	b.n	966 <__z_interrupt_stack_SIZEOF+0x126>
	switch (conv->specifier) {
     930:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     934:	b2c9      	uxtb	r1, r1
     936:	2001      	movs	r0, #1
     938:	fa00 f101 	lsl.w	r1, r0, r1
     93c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     940:	d194      	bne.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     942:	f640 0601 	movw	r6, #2049	; 0x801
     946:	4231      	tst	r1, r6
     948:	d11d      	bne.n	986 <__z_interrupt_stack_SIZEOF+0x146>
     94a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     94e:	d03e      	beq.n	9ce <__z_interrupt_stack_SIZEOF+0x18e>
		conv->specifier_cat = SPECIFIER_SINT;
     950:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     954:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     958:	f002 0278 	and.w	r2, r2, #120	; 0x78
     95c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     95e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     962:	d034      	beq.n	9ce <__z_interrupt_stack_SIZEOF+0x18e>
	bool unsupported = false;
     964:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     966:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     96a:	f3c2 0140 	ubfx	r1, r2, #1, #1
     96e:	430b      	orrs	r3, r1
     970:	f363 0241 	bfi	r2, r3, #1, #1
     974:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     978:	e6fd      	b.n	776 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
     97a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     97e:	2102      	movs	r1, #2
     980:	f361 0302 	bfi	r3, r1, #0, #3
     984:	e7e8      	b.n	958 <__z_interrupt_stack_SIZEOF+0x118>
     986:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     98a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     98c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     990:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     994:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     996:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     99a:	bf02      	ittt	eq
     99c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     9a0:	f041 0101 	orreq.w	r1, r1, #1
     9a4:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     9a8:	2b63      	cmp	r3, #99	; 0x63
     9aa:	d1db      	bne.n	964 <__z_interrupt_stack_SIZEOF+0x124>
			unsupported = (conv->length_mod != LENGTH_NONE);
     9ac:	1e13      	subs	r3, r2, #0
     9ae:	bf18      	it	ne
     9b0:	2301      	movne	r3, #1
     9b2:	e7d8      	b.n	966 <__z_interrupt_stack_SIZEOF+0x126>
		conv->specifier_cat = SPECIFIER_PTR;
     9b4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9b8:	2103      	movs	r1, #3
     9ba:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     9be:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     9c2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     9c6:	bf14      	ite	ne
     9c8:	2301      	movne	r3, #1
     9ca:	2300      	moveq	r3, #0
     9cc:	e7cb      	b.n	966 <__z_interrupt_stack_SIZEOF+0x126>
		conv->invalid = true;
     9ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     9d2:	f043 0301 	orr.w	r3, r3, #1
     9d6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     9da:	e7c3      	b.n	964 <__z_interrupt_stack_SIZEOF+0x124>
		} else if (conv->width_present) {
     9dc:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     9e0:	2a00      	cmp	r2, #0
			width = conv->width_value;
     9e2:	bfb4      	ite	lt
     9e4:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     9e8:	f04f 38ff 	movge.w	r8, #4294967295
     9ec:	e6d5      	b.n	79a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
     9ee:	0798      	lsls	r0, r3, #30
     9f0:	f57f aee2 	bpl.w	7b8 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
     9f4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     9f8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     9fc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     9fe:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     a02:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     a06:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a0a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a0c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a10:	d133      	bne.n	a7a <__z_interrupt_stack_SIZEOF+0x23a>
			switch (length_mod) {
     a12:	1ecb      	subs	r3, r1, #3
     a14:	2b04      	cmp	r3, #4
     a16:	d804      	bhi.n	a22 <__z_interrupt_stack_SIZEOF+0x1e2>
     a18:	e8df f003 	tbb	[pc, r3]
     a1c:	21464621 	.word	0x21464621
     a20:	21          	.byte	0x21
     a21:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a22:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     a24:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     a26:	ea4f 72e3 	mov.w	r2, r3, asr #31
     a2a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     a2e:	d11c      	bne.n	a6a <__z_interrupt_stack_SIZEOF+0x22a>
				value->sint = (signed char)value->sint;
     a30:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     a34:	17da      	asrs	r2, r3, #31
     a36:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     a3a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     a3c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     a40:	f013 0603 	ands.w	r6, r3, #3
     a44:	d050      	beq.n	ae8 <__z_interrupt_stack_SIZEOF+0x2a8>
			OUTS(sp, fp);
     a46:	9b03      	ldr	r3, [sp, #12]
     a48:	463a      	mov	r2, r7
     a4a:	4659      	mov	r1, fp
     a4c:	4648      	mov	r0, r9
     a4e:	f003 fa29 	bl	3ea4 <outs>
     a52:	2800      	cmp	r0, #0
     a54:	f2c0 8153 	blt.w	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     a58:	4405      	add	r5, r0
			continue;
     a5a:	9f03      	ldr	r7, [sp, #12]
     a5c:	e5f2      	b.n	644 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a5e:	f854 3b04 	ldr.w	r3, [r4], #4
     a62:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     a64:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     a68:	e7e8      	b.n	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
			} else if (length_mod == LENGTH_H) {
     a6a:	2902      	cmp	r1, #2
     a6c:	d1e5      	bne.n	a3a <__z_interrupt_stack_SIZEOF+0x1fa>
				value->sint = (short)value->sint;
     a6e:	b21a      	sxth	r2, r3
     a70:	f343 33c0 	sbfx	r3, r3, #15, #1
     a74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     a78:	e7df      	b.n	a3a <__z_interrupt_stack_SIZEOF+0x1fa>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a7a:	2b02      	cmp	r3, #2
     a7c:	d124      	bne.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
			switch (length_mod) {
     a7e:	1ecb      	subs	r3, r1, #3
     a80:	2b04      	cmp	r3, #4
     a82:	d804      	bhi.n	a8e <__z_interrupt_stack_SIZEOF+0x24e>
     a84:	e8df f003 	tbb	[pc, r3]
     a88:	18101018 	.word	0x18101018
     a8c:	18          	.byte	0x18
     a8d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     a8e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     a90:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     a94:	f04f 0200 	mov.w	r2, #0
     a98:	d014      	beq.n	ac4 <__z_interrupt_stack_SIZEOF+0x284>
			} else if (length_mod == LENGTH_H) {
     a9a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     a9c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     aa0:	d1cc      	bne.n	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
				value->uint = (unsigned short)value->uint;
     aa2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     aa4:	930e      	str	r3, [sp, #56]	; 0x38
     aa6:	e7c9      	b.n	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
					(uint_value_type)va_arg(ap,
     aa8:	3407      	adds	r4, #7
     aaa:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     aae:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     ab2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     ab6:	e7c1      	b.n	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
					(uint_value_type)va_arg(ap, size_t);
     ab8:	f854 3b04 	ldr.w	r3, [r4], #4
     abc:	930e      	str	r3, [sp, #56]	; 0x38
     abe:	2300      	movs	r3, #0
     ac0:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     ac2:	e7bb      	b.n	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
				value->uint = (unsigned char)value->uint;
     ac4:	b2db      	uxtb	r3, r3
     ac6:	e7cd      	b.n	a64 <__z_interrupt_stack_SIZEOF+0x224>
		} else if (specifier_cat == SPECIFIER_FP) {
     ac8:	2b04      	cmp	r3, #4
     aca:	d108      	bne.n	ade <__z_interrupt_stack_SIZEOF+0x29e>
					(sint_value_type)va_arg(ap, long long);
     acc:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     ace:	f024 0407 	bic.w	r4, r4, #7
     ad2:	e9d4 2300 	ldrd	r2, r3, [r4]
     ad6:	3408      	adds	r4, #8
     ad8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     adc:	e7ae      	b.n	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
		} else if (specifier_cat == SPECIFIER_PTR) {
     ade:	2b03      	cmp	r3, #3
     ae0:	d1ac      	bne.n	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
			value->ptr = va_arg(ap, void *);
     ae2:	f854 3b04 	ldr.w	r3, [r4], #4
     ae6:	e7dd      	b.n	aa4 <__z_interrupt_stack_SIZEOF+0x264>
		switch (conv->specifier) {
     ae8:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     aec:	2878      	cmp	r0, #120	; 0x78
     aee:	d8b4      	bhi.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
     af0:	2862      	cmp	r0, #98	; 0x62
     af2:	d81c      	bhi.n	b2e <__z_interrupt_stack_SIZEOF+0x2ee>
     af4:	2825      	cmp	r0, #37	; 0x25
     af6:	f43f adad 	beq.w	654 <z_cbvprintf_impl+0x20>
     afa:	2858      	cmp	r0, #88	; 0x58
     afc:	d1ad      	bne.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
			bps = encode_uint(value->uint, conv, buf, bpe);
     afe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b02:	9300      	str	r3, [sp, #0]
     b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     b08:	ab08      	add	r3, sp, #32
     b0a:	aa10      	add	r2, sp, #64	; 0x40
     b0c:	f003 f984 	bl	3e18 <encode_uint>
			if (precision >= 0) {
     b10:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     b14:	4607      	mov	r7, r0
			if (precision >= 0) {
     b16:	f280 809a 	bge.w	c4e <__z_interrupt_stack_SIZEOF+0x40e>
		if (bps == NULL) {
     b1a:	2f00      	cmp	r7, #0
     b1c:	d09d      	beq.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
		size_t nj_len = (bpe - bps);
     b1e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b22:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     b24:	2e00      	cmp	r6, #0
     b26:	f000 80c1 	beq.w	cac <__z_interrupt_stack_SIZEOF+0x46c>
			nj_len += 1U;
     b2a:	3001      	adds	r0, #1
     b2c:	e0be      	b.n	cac <__z_interrupt_stack_SIZEOF+0x46c>
		switch (conv->specifier) {
     b2e:	3863      	subs	r0, #99	; 0x63
     b30:	2815      	cmp	r0, #21
     b32:	d892      	bhi.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
     b34:	a201      	add	r2, pc, #4	; (adr r2, b3c <__z_interrupt_stack_SIZEOF+0x2fc>)
     b36:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     b3a:	bf00      	nop
     b3c:	00000c11 	.word	0x00000c11
     b40:	00000c23 	.word	0x00000c23
     b44:	00000a5b 	.word	0x00000a5b
     b48:	00000a5b 	.word	0x00000a5b
     b4c:	00000a5b 	.word	0x00000a5b
     b50:	00000a5b 	.word	0x00000a5b
     b54:	00000c23 	.word	0x00000c23
     b58:	00000a5b 	.word	0x00000a5b
     b5c:	00000a5b 	.word	0x00000a5b
     b60:	00000a5b 	.word	0x00000a5b
     b64:	00000a5b 	.word	0x00000a5b
     b68:	00000cb1 	.word	0x00000cb1
     b6c:	00000c49 	.word	0x00000c49
     b70:	00000c6f 	.word	0x00000c6f
     b74:	00000a5b 	.word	0x00000a5b
     b78:	00000a5b 	.word	0x00000a5b
     b7c:	00000b95 	.word	0x00000b95
     b80:	00000a5b 	.word	0x00000a5b
     b84:	00000c49 	.word	0x00000c49
     b88:	00000a5b 	.word	0x00000a5b
     b8c:	00000a5b 	.word	0x00000a5b
     b90:	00000c49 	.word	0x00000c49
			if (precision >= 0) {
     b94:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     b98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     b9a:	db35      	blt.n	c08 <__z_interrupt_stack_SIZEOF+0x3c8>
				len = strnlen(bps, precision);
     b9c:	4651      	mov	r1, sl
     b9e:	4638      	mov	r0, r7
     ba0:	f003 f9ba 	bl	3f18 <strnlen>
			bpe = bps + len;
     ba4:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     ba8:	2f00      	cmp	r7, #0
     baa:	f43f af56 	beq.w	a5a <__z_interrupt_stack_SIZEOF+0x21a>
		char sign = 0;
     bae:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     bb0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     bb4:	f013 0210 	ands.w	r2, r3, #16
     bb8:	9205      	str	r2, [sp, #20]
     bba:	f000 8093 	beq.w	ce4 <__z_interrupt_stack_SIZEOF+0x4a4>
			nj_len += 2U;
     bbe:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     bc0:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     bc4:	bf48      	it	mi
     bc6:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     bc8:	9204      	str	r2, [sp, #16]
     bca:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     bcc:	bf48      	it	mi
     bce:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     bd0:	f1b8 0f00 	cmp.w	r8, #0
     bd4:	f340 80a0 	ble.w	d18 <__z_interrupt_stack_SIZEOF+0x4d8>
			if (!conv->flag_dash) {
     bd8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     bdc:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     be0:	f3c2 0380 	ubfx	r3, r2, #2, #1
     be4:	0750      	lsls	r0, r2, #29
     be6:	9306      	str	r3, [sp, #24]
     be8:	f100 8096 	bmi.w	d18 <__z_interrupt_stack_SIZEOF+0x4d8>
				if (conv->flag_zero) {
     bec:	0651      	lsls	r1, r2, #25
     bee:	f140 8089 	bpl.w	d04 <__z_interrupt_stack_SIZEOF+0x4c4>
					if (sign != 0) {
     bf2:	b13e      	cbz	r6, c04 <__z_interrupt_stack_SIZEOF+0x3c4>
						OUTC(sign);
     bf4:	4659      	mov	r1, fp
     bf6:	4630      	mov	r0, r6
     bf8:	47c8      	blx	r9
     bfa:	2800      	cmp	r0, #0
     bfc:	db7f      	blt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     bfe:	9b06      	ldr	r3, [sp, #24]
     c00:	3501      	adds	r5, #1
     c02:	461e      	mov	r6, r3
					pad = '0';
     c04:	2230      	movs	r2, #48	; 0x30
     c06:	e07e      	b.n	d06 <__z_interrupt_stack_SIZEOF+0x4c6>
				len = strlen(bps);
     c08:	4638      	mov	r0, r7
     c0a:	f003 f97e 	bl	3f0a <strlen>
     c0e:	e7c9      	b.n	ba4 <__z_interrupt_stack_SIZEOF+0x364>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     c12:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
     c16:	2600      	movs	r6, #0
			bps = buf;
     c18:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     c1a:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
     c1e:	2001      	movs	r0, #1
     c20:	e7c6      	b.n	bb0 <__z_interrupt_stack_SIZEOF+0x370>
			if (conv->flag_plus) {
     c22:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     c24:	bf5c      	itt	pl
     c26:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     c2a:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
     c2c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
     c30:	bf48      	it	mi
     c32:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
     c34:	2b00      	cmp	r3, #0
     c36:	f6bf af62 	bge.w	afe <__z_interrupt_stack_SIZEOF+0x2be>
				value->uint = (uint_value_type)-sint;
     c3a:	4252      	negs	r2, r2
     c3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
     c44:	262d      	movs	r6, #45	; 0x2d
     c46:	e75a      	b.n	afe <__z_interrupt_stack_SIZEOF+0x2be>
		switch (conv->specifier) {
     c48:	2600      	movs	r6, #0
     c4a:	e758      	b.n	afe <__z_interrupt_stack_SIZEOF+0x2be>
		char sign = 0;
     c4c:	2600      	movs	r6, #0
				conv->flag_zero = false;
     c4e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     c52:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c56:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     c58:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     c5c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     c5e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     c62:	f67f af5a 	bls.w	b1a <__z_interrupt_stack_SIZEOF+0x2da>
					conv->pad0_value = precision - (int)len;
     c66:	ebaa 0303 	sub.w	r3, sl, r3
     c6a:	9311      	str	r3, [sp, #68]	; 0x44
     c6c:	e755      	b.n	b1a <__z_interrupt_stack_SIZEOF+0x2da>
			if (value->ptr != NULL) {
     c6e:	980e      	ldr	r0, [sp, #56]	; 0x38
     c70:	b390      	cbz	r0, cd8 <__z_interrupt_stack_SIZEOF+0x498>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c72:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c76:	9300      	str	r3, [sp, #0]
     c78:	aa10      	add	r2, sp, #64	; 0x40
     c7a:	ab08      	add	r3, sp, #32
     c7c:	2100      	movs	r1, #0
     c7e:	f003 f8cb 	bl	3e18 <encode_uint>
				conv->altform_0c = true;
     c82:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
     c86:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c8a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c8e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
     c92:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c96:	4607      	mov	r7, r0
				conv->altform_0c = true;
     c98:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     c9c:	dad6      	bge.n	c4c <__z_interrupt_stack_SIZEOF+0x40c>
		if (bps == NULL) {
     c9e:	2800      	cmp	r0, #0
     ca0:	f43f aedb 	beq.w	a5a <__z_interrupt_stack_SIZEOF+0x21a>
		size_t nj_len = (bpe - bps);
     ca4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     ca8:	1a18      	subs	r0, r3, r0
		char sign = 0;
     caa:	2600      	movs	r6, #0
     cac:	469a      	mov	sl, r3
     cae:	e77f      	b.n	bb0 <__z_interrupt_stack_SIZEOF+0x370>
				store_count(conv, value->ptr, count);
     cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     cb2:	2907      	cmp	r1, #7
     cb4:	f63f aed1 	bhi.w	a5a <__z_interrupt_stack_SIZEOF+0x21a>
     cb8:	e8df f001 	tbb	[pc, r1]
     cbc:	0c06040c 	.word	0x0c06040c
     cc0:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     cc4:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     cc6:	e6c8      	b.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
		*(short *)dp = (short)count;
     cc8:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     cca:	e6c6      	b.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
		*(intmax_t *)dp = (intmax_t)count;
     ccc:	17ea      	asrs	r2, r5, #31
     cce:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     cd2:	e6c2      	b.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     cd4:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     cd6:	e6c0      	b.n	a5a <__z_interrupt_stack_SIZEOF+0x21a>
     cd8:	4f2e      	ldr	r7, [pc, #184]	; (d94 <__z_interrupt_stack_SIZEOF+0x554>)
		char sign = 0;
     cda:	4606      	mov	r6, r0
			bpe = bps + 5;
     cdc:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     ce0:	2005      	movs	r0, #5
     ce2:	e765      	b.n	bb0 <__z_interrupt_stack_SIZEOF+0x370>
		} else if (conv->altform_0) {
     ce4:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     ce6:	bf48      	it	mi
     ce8:	3001      	addmi	r0, #1
     cea:	e769      	b.n	bc0 <__z_interrupt_stack_SIZEOF+0x380>
     cec:	9307      	str	r3, [sp, #28]
					OUTC(pad);
     cee:	4610      	mov	r0, r2
     cf0:	9206      	str	r2, [sp, #24]
     cf2:	4659      	mov	r1, fp
     cf4:	47c8      	blx	r9
     cf6:	2800      	cmp	r0, #0
     cf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     cfc:	da04      	bge.n	d08 <__z_interrupt_stack_SIZEOF+0x4c8>
#undef OUTS
#undef OUTC
}
     cfe:	b015      	add	sp, #84	; 0x54
     d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d04:	2220      	movs	r2, #32
					pad = '0';
     d06:	4643      	mov	r3, r8
				while (width-- > 0) {
     d08:	4619      	mov	r1, r3
     d0a:	2900      	cmp	r1, #0
     d0c:	f103 33ff 	add.w	r3, r3, #4294967295
     d10:	dcec      	bgt.n	cec <__z_interrupt_stack_SIZEOF+0x4ac>
     d12:	4445      	add	r5, r8
     d14:	1a6d      	subs	r5, r5, r1
     d16:	4698      	mov	r8, r3
		if (sign != 0) {
     d18:	b12e      	cbz	r6, d26 <__z_interrupt_stack_SIZEOF+0x4e6>
			OUTC(sign);
     d1a:	4659      	mov	r1, fp
     d1c:	4630      	mov	r0, r6
     d1e:	47c8      	blx	r9
     d20:	2800      	cmp	r0, #0
     d22:	dbec      	blt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     d24:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d26:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     d2a:	06da      	lsls	r2, r3, #27
     d2c:	d401      	bmi.n	d32 <__z_interrupt_stack_SIZEOF+0x4f2>
     d2e:	071b      	lsls	r3, r3, #28
     d30:	d505      	bpl.n	d3e <__z_interrupt_stack_SIZEOF+0x4fe>
				OUTC('0');
     d32:	4659      	mov	r1, fp
     d34:	2030      	movs	r0, #48	; 0x30
     d36:	47c8      	blx	r9
     d38:	2800      	cmp	r0, #0
     d3a:	dbe0      	blt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     d3c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d3e:	9b05      	ldr	r3, [sp, #20]
     d40:	b133      	cbz	r3, d50 <__z_interrupt_stack_SIZEOF+0x510>
				OUTC(conv->specifier);
     d42:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     d46:	4659      	mov	r1, fp
     d48:	47c8      	blx	r9
     d4a:	2800      	cmp	r0, #0
     d4c:	dbd7      	blt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     d4e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d50:	9e04      	ldr	r6, [sp, #16]
     d52:	442e      	add	r6, r5
     d54:	e005      	b.n	d62 <__z_interrupt_stack_SIZEOF+0x522>
				OUTC('0');
     d56:	4659      	mov	r1, fp
     d58:	2030      	movs	r0, #48	; 0x30
     d5a:	47c8      	blx	r9
     d5c:	2800      	cmp	r0, #0
     d5e:	dbce      	blt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     d60:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d62:	1b73      	subs	r3, r6, r5
     d64:	2b00      	cmp	r3, #0
     d66:	dcf6      	bgt.n	d56 <__z_interrupt_stack_SIZEOF+0x516>
			OUTS(bps, bpe);
     d68:	4653      	mov	r3, sl
     d6a:	463a      	mov	r2, r7
     d6c:	4659      	mov	r1, fp
     d6e:	4648      	mov	r0, r9
     d70:	f003 f898 	bl	3ea4 <outs>
     d74:	2800      	cmp	r0, #0
     d76:	dbc2      	blt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     d78:	4405      	add	r5, r0
		while (width > 0) {
     d7a:	44a8      	add	r8, r5
     d7c:	eba8 0305 	sub.w	r3, r8, r5
     d80:	2b00      	cmp	r3, #0
     d82:	f77f ae6a 	ble.w	a5a <__z_interrupt_stack_SIZEOF+0x21a>
			OUTC(' ');
     d86:	4659      	mov	r1, fp
     d88:	2020      	movs	r0, #32
     d8a:	47c8      	blx	r9
     d8c:	2800      	cmp	r0, #0
     d8e:	dbb6      	blt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     d90:	3501      	adds	r5, #1
			--width;
     d92:	e7f3      	b.n	d7c <__z_interrupt_stack_SIZEOF+0x53c>
     d94:	00004b36 	.word	0x00004b36

00000d98 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     d98:	f001 bc36 	b.w	2608 <SystemInit>

00000d9c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     da0:	4605      	mov	r5, r0
	__asm__ volatile(
     da2:	f04f 0320 	mov.w	r3, #32
     da6:	f3ef 8611 	mrs	r6, BASEPRI
     daa:	f383 8812 	msr	BASEPRI_MAX, r3
     dae:	f3bf 8f6f 	isb	sy
	return list->head;
     db2:	4b0e      	ldr	r3, [pc, #56]	; (dec <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     db4:	4f0e      	ldr	r7, [pc, #56]	; (df0 <pm_state_notify+0x54>)
     db6:	681c      	ldr	r4, [r3, #0]
     db8:	f8df 8038 	ldr.w	r8, [pc, #56]	; df4 <pm_state_notify+0x58>
     dbc:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dc0:	b92c      	cbnz	r4, dce <pm_state_notify+0x32>
	__asm__ volatile(
     dc2:	f386 8811 	msr	BASEPRI, r6
     dc6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     dce:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     dd2:	2d00      	cmp	r5, #0
     dd4:	bf18      	it	ne
     dd6:	4613      	movne	r3, r2
		if (callback) {
     dd8:	b12b      	cbz	r3, de6 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     dda:	f898 2014 	ldrb.w	r2, [r8, #20]
     dde:	fb09 f202 	mul.w	r2, r9, r2
     de2:	5cb8      	ldrb	r0, [r7, r2]
     de4:	4798      	blx	r3
	return node->next;
     de6:	6824      	ldr	r4, [r4, #0]
     de8:	e7ea      	b.n	dc0 <pm_state_notify+0x24>
     dea:	bf00      	nop
     dec:	20000210 	.word	0x20000210
     df0:	20000204 	.word	0x20000204
     df4:	20000364 	.word	0x20000364

00000df8 <pm_system_resume>:

void pm_system_resume(void)
{
     df8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     dfa:	4b19      	ldr	r3, [pc, #100]	; (e60 <pm_system_resume+0x68>)
     dfc:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     dfe:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e02:	f004 031f 	and.w	r3, r4, #31
     e06:	2201      	movs	r2, #1
     e08:	409a      	lsls	r2, r3
     e0a:	4b16      	ldr	r3, [pc, #88]	; (e64 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     e0c:	0961      	lsrs	r1, r4, #5
     e0e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     e12:	43d0      	mvns	r0, r2
     e14:	e853 1f00 	ldrex	r1, [r3]
     e18:	ea01 0500 	and.w	r5, r1, r0
     e1c:	e843 5600 	strex	r6, r5, [r3]
     e20:	2e00      	cmp	r6, #0
     e22:	d1f7      	bne.n	e14 <pm_system_resume+0x1c>
     e24:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     e28:	420a      	tst	r2, r1
     e2a:	d013      	beq.n	e54 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
     e2c:	4b0e      	ldr	r3, [pc, #56]	; (e68 <pm_system_resume+0x70>)
     e2e:	4d0f      	ldr	r5, [pc, #60]	; (e6c <pm_system_resume+0x74>)
     e30:	b18b      	cbz	r3, e56 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
     e32:	230c      	movs	r3, #12
     e34:	4363      	muls	r3, r4
     e36:	18ea      	adds	r2, r5, r3
     e38:	5ce8      	ldrb	r0, [r5, r3]
     e3a:	7851      	ldrb	r1, [r2, #1]
     e3c:	f003 f898 	bl	3f70 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     e40:	2000      	movs	r0, #0
     e42:	f7ff ffab 	bl	d9c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     e46:	230c      	movs	r3, #12
     e48:	435c      	muls	r4, r3
     e4a:	192a      	adds	r2, r5, r4
     e4c:	2300      	movs	r3, #0
     e4e:	512b      	str	r3, [r5, r4]
     e50:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     e54:	bd70      	pop	{r4, r5, r6, pc}
     e56:	f383 8811 	msr	BASEPRI, r3
     e5a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     e5e:	e7ef      	b.n	e40 <pm_system_resume+0x48>
     e60:	20000364 	.word	0x20000364
     e64:	20000218 	.word	0x20000218
     e68:	00003f71 	.word	0x00003f71
     e6c:	20000204 	.word	0x20000204

00000e70 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
     e74:	4b35      	ldr	r3, [pc, #212]	; (f4c <pm_system_suspend+0xdc>)
{
     e76:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
     e78:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
     e7a:	f04f 0320 	mov.w	r3, #32
     e7e:	f3ef 8811 	mrs	r8, BASEPRI
     e82:	f383 8812 	msr	BASEPRI_MAX, r3
     e86:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     e8a:	240c      	movs	r4, #12
     e8c:	4b30      	ldr	r3, [pc, #192]	; (f50 <pm_system_suspend+0xe0>)
     e8e:	4e31      	ldr	r6, [pc, #196]	; (f54 <pm_system_suspend+0xe4>)
     e90:	436c      	muls	r4, r5
     e92:	191a      	adds	r2, r3, r4
     e94:	5d19      	ldrb	r1, [r3, r4]
     e96:	2900      	cmp	r1, #0
     e98:	d04c      	beq.n	f34 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     e9a:	ca07      	ldmia	r2, {r0, r1, r2}
     e9c:	eb06 0c04 	add.w	ip, r6, r4
     ea0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     ea4:	2200      	movs	r2, #0
     ea6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
     ea8:	f388 8811 	msr	BASEPRI, r8
     eac:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     eb0:	230c      	movs	r3, #12
     eb2:	436b      	muls	r3, r5
     eb4:	18f2      	adds	r2, r6, r3
     eb6:	5cf0      	ldrb	r0, [r6, r3]
     eb8:	2800      	cmp	r0, #0
     eba:	d039      	beq.n	f30 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     ebc:	1c7b      	adds	r3, r7, #1
     ebe:	d010      	beq.n	ee2 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     ec0:	f8d2 c008 	ldr.w	ip, [r2, #8]
     ec4:	4c24      	ldr	r4, [pc, #144]	; (f58 <pm_system_suspend+0xe8>)
     ec6:	4a25      	ldr	r2, [pc, #148]	; (f5c <pm_system_suspend+0xec>)
     ec8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     ecc:	2100      	movs	r1, #0
     ece:	fbec 4100 	umlal	r4, r1, ip, r0
     ed2:	2300      	movs	r3, #0
     ed4:	4620      	mov	r0, r4
     ed6:	f7ff f913 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     eda:	2101      	movs	r1, #1
     edc:	1a38      	subs	r0, r7, r0
     ede:	f003 fbe4 	bl	46aa <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     ee2:	f002 fc09 	bl	36f8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     ee6:	2001      	movs	r0, #1
     ee8:	f7ff ff58 	bl	d9c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     eec:	f3bf 8f5b 	dmb	ish
     ef0:	4b1b      	ldr	r3, [pc, #108]	; (f60 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     ef2:	096a      	lsrs	r2, r5, #5
     ef4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
     ef8:	f005 011f 	and.w	r1, r5, #31
     efc:	2201      	movs	r2, #1
     efe:	408a      	lsls	r2, r1
     f00:	e853 0f00 	ldrex	r0, [r3]
     f04:	4310      	orrs	r0, r2
     f06:	e843 0100 	strex	r1, r0, [r3]
     f0a:	2900      	cmp	r1, #0
     f0c:	d1f8      	bne.n	f00 <pm_system_suspend+0x90>
     f0e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
     f12:	4b14      	ldr	r3, [pc, #80]	; (f64 <pm_system_suspend+0xf4>)
     f14:	b13b      	cbz	r3, f26 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
     f16:	230c      	movs	r3, #12
     f18:	fb03 f005 	mul.w	r0, r3, r5
     f1c:	1833      	adds	r3, r6, r0
     f1e:	5c30      	ldrb	r0, [r6, r0]
     f20:	7859      	ldrb	r1, [r3, #1]
     f22:	f003 f819 	bl	3f58 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     f26:	f7ff ff67 	bl	df8 <pm_system_resume>
	k_sched_unlock();
     f2a:	f002 fbf9 	bl	3720 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     f2e:	2001      	movs	r0, #1
}
     f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
     f34:	4601      	mov	r1, r0
     f36:	4628      	mov	r0, r5
     f38:	f000 f816 	bl	f68 <pm_policy_next_state>
		if (info != NULL) {
     f3c:	2800      	cmp	r0, #0
     f3e:	d0b3      	beq.n	ea8 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
     f40:	c807      	ldmia	r0, {r0, r1, r2}
     f42:	4434      	add	r4, r6
     f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
     f48:	e7ae      	b.n	ea8 <pm_system_suspend+0x38>
     f4a:	bf00      	nop
     f4c:	20000364 	.word	0x20000364
     f50:	200001f8 	.word	0x200001f8
     f54:	20000204 	.word	0x20000204
     f58:	000f423f 	.word	0x000f423f
     f5c:	000f4240 	.word	0x000f4240
     f60:	20000218 	.word	0x20000218
     f64:	00003f59 	.word	0x00003f59

00000f68 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f6c:	b085      	sub	sp, #20
     f6e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     f70:	a903      	add	r1, sp, #12
     f72:	f000 f843 	bl	ffc <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     f76:	4b1e      	ldr	r3, [pc, #120]	; (ff0 <pm_policy_next_state+0x88>)
     f78:	9d03      	ldr	r5, [sp, #12]
     f7a:	f8d3 a000 	ldr.w	sl, [r3]
     f7e:	f8df 8074 	ldr.w	r8, [pc, #116]	; ff4 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f82:	1e43      	subs	r3, r0, #1
     f84:	b21b      	sxth	r3, r3
     f86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     f8a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f8c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     f90:	f44f 4700 	mov.w	r7, #32768	; 0x8000
     f94:	f04f 0b00 	mov.w	fp, #0
     f98:	b924      	cbnz	r4, fa4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
     f9a:	46a1      	mov	r9, r4
}
     f9c:	4648      	mov	r0, r9
     f9e:	b005      	add	sp, #20
     fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fa4:	6868      	ldr	r0, [r5, #4]
     fa6:	4a14      	ldr	r2, [pc, #80]	; (ff8 <pm_policy_next_state+0x90>)
     fa8:	46c4      	mov	ip, r8
     faa:	4659      	mov	r1, fp
     fac:	fbe0 c107 	umlal	ip, r1, r0, r7
     fb0:	2300      	movs	r3, #0
     fb2:	4660      	mov	r0, ip
     fb4:	f7ff f8a4 	bl	100 <__aeabi_uldivmod>
     fb8:	9001      	str	r0, [sp, #4]
     fba:	68a8      	ldr	r0, [r5, #8]
     fbc:	4a0e      	ldr	r2, [pc, #56]	; (ff8 <pm_policy_next_state+0x90>)
     fbe:	46c4      	mov	ip, r8
     fc0:	4659      	mov	r1, fp
     fc2:	fbe0 c107 	umlal	ip, r1, r0, r7
     fc6:	2300      	movs	r3, #0
     fc8:	4660      	mov	r0, ip
     fca:	f7ff f899 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     fce:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
     fd2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     fd4:	d001      	beq.n	fda <pm_policy_next_state+0x72>
     fd6:	4582      	cmp	sl, r0
     fd8:	d905      	bls.n	fe6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
     fda:	1c73      	adds	r3, r6, #1
     fdc:	d0de      	beq.n	f9c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
     fde:	9b01      	ldr	r3, [sp, #4]
     fe0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
     fe2:	42b0      	cmp	r0, r6
     fe4:	d9da      	bls.n	f9c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     fe6:	3c01      	subs	r4, #1
     fe8:	b2a4      	uxth	r4, r4
     fea:	3d0c      	subs	r5, #12
     fec:	e7d4      	b.n	f98 <pm_policy_next_state+0x30>
     fee:	bf00      	nop
     ff0:	20000004 	.word	0x20000004
     ff4:	000f423f 	.word	0x000f423f
     ff8:	000f4240 	.word	0x000f4240

00000ffc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
     ffc:	b908      	cbnz	r0, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
		return 0;
	}

	*states = cpus_states[cpu];
     ffe:	4b02      	ldr	r3, [pc, #8]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
    1000:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1002:	2000      	movs	r0, #0
    1004:	4770      	bx	lr
    1006:	bf00      	nop
    1008:	000049c8 	.word	0x000049c8

0000100c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    100c:	4901      	ldr	r1, [pc, #4]	; (1014 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    100e:	2210      	movs	r2, #16
	str	r2, [r1]
    1010:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1012:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1014:	e000ed10 	.word	0xe000ed10

00001018 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1018:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    101a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    101c:	f380 8811 	msr	BASEPRI, r0
	isb
    1020:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1024:	f3bf 8f4f 	dsb	sy
    1028:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    102a:	b662      	cpsie	i
	isb
    102c:	f3bf 8f6f 	isb	sy

	bx	lr
    1030:	4770      	bx	lr
    1032:	bf00      	nop

00001034 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1034:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1036:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1038:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    103c:	f3bf 8f4f 	dsb	sy
    1040:	bf20      	wfe

	msr	BASEPRI, r0
    1042:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1046:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1048:	4770      	bx	lr
    104a:	bf00      	nop

0000104c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    104c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    104e:	2800      	cmp	r0, #0
    1050:	db07      	blt.n	1062 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1052:	4a04      	ldr	r2, [pc, #16]	; (1064 <arch_irq_enable+0x18>)
    1054:	0941      	lsrs	r1, r0, #5
    1056:	2301      	movs	r3, #1
    1058:	f000 001f 	and.w	r0, r0, #31
    105c:	4083      	lsls	r3, r0
    105e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1062:	4770      	bx	lr
    1064:	e000e100 	.word	0xe000e100

00001068 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1068:	4b05      	ldr	r3, [pc, #20]	; (1080 <arch_irq_is_enabled+0x18>)
    106a:	0942      	lsrs	r2, r0, #5
    106c:	f000 001f 	and.w	r0, r0, #31
    1070:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1074:	2301      	movs	r3, #1
    1076:	fa03 f000 	lsl.w	r0, r3, r0
}
    107a:	4010      	ands	r0, r2
    107c:	4770      	bx	lr
    107e:	bf00      	nop
    1080:	e000e100 	.word	0xe000e100

00001084 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1084:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1086:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1088:	bfa8      	it	ge
    108a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    108e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1092:	bfb8      	it	lt
    1094:	4b06      	ldrlt	r3, [pc, #24]	; (10b0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1096:	ea4f 1141 	mov.w	r1, r1, lsl #5
    109a:	bfac      	ite	ge
    109c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10a0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10a4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10a6:	bfb4      	ite	lt
    10a8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10aa:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    10ae:	4770      	bx	lr
    10b0:	e000ed14 	.word	0xe000ed14

000010b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    10b4:	bf30      	wfi
    b z_SysNmiOnReset
    10b6:	f7ff bffd 	b.w	10b4 <z_SysNmiOnReset>
    10ba:	bf00      	nop

000010bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    10bc:	4a0b      	ldr	r2, [pc, #44]	; (10ec <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    10be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    10c0:	4b0b      	ldr	r3, [pc, #44]	; (10f0 <z_arm_prep_c+0x34>)
    10c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    10c6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    10c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    10d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    10d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    10d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    10dc:	f001 ffa4 	bl	3028 <z_bss_zero>
	z_data_copy();
    10e0:	f002 fc48 	bl	3974 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    10e4:	f000 f9d6 	bl	1494 <z_arm_interrupt_init>
	z_cstart();
    10e8:	f001 ffe2 	bl	30b0 <z_cstart>
    10ec:	00000000 	.word	0x00000000
    10f0:	e000ed00 	.word	0xe000ed00

000010f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    10f4:	4a09      	ldr	r2, [pc, #36]	; (111c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    10f6:	490a      	ldr	r1, [pc, #40]	; (1120 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    10f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    10fa:	6809      	ldr	r1, [r1, #0]
    10fc:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    10fe:	4909      	ldr	r1, [pc, #36]	; (1124 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1100:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1102:	684b      	ldr	r3, [r1, #4]
    1104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1108:	604b      	str	r3, [r1, #4]
    110a:	2300      	movs	r3, #0
    110c:	f383 8811 	msr	BASEPRI, r3
    1110:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1114:	6893      	ldr	r3, [r2, #8]
}
    1116:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1118:	4770      	bx	lr
    111a:	bf00      	nop
    111c:	20000364 	.word	0x20000364
    1120:	00004ae4 	.word	0x00004ae4
    1124:	e000ed00 	.word	0xe000ed00

00001128 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1128:	4912      	ldr	r1, [pc, #72]	; (1174 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    112a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    112c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1130:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1132:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1136:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    113a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    113c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1140:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1144:	4f0c      	ldr	r7, [pc, #48]	; (1178 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1146:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    114a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    114c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    114e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1150:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1152:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1154:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1156:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    115a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    115c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    115e:	f000 fa35 	bl	15cc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1162:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1166:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    116a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    116e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1172:	4770      	bx	lr
    ldr r1, =_kernel
    1174:	20000364 	.word	0x20000364
    ldr v4, =_SCS_ICSR
    1178:	e000ed04 	.word	0xe000ed04

0000117c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    117c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1180:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1182:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1186:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    118a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    118c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1190:	2902      	cmp	r1, #2
    beq _oops
    1192:	d0ff      	beq.n	1194 <_oops>

00001194 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1194:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1196:	f002 fe9f 	bl	3ed8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    119a:	bd01      	pop	{r0, pc}

0000119c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    119c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    11a0:	9b00      	ldr	r3, [sp, #0]
    11a2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    11a6:	490a      	ldr	r1, [pc, #40]	; (11d0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    11a8:	9b01      	ldr	r3, [sp, #4]
    11aa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    11ae:	9b02      	ldr	r3, [sp, #8]
    11b0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    11b4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    11b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    11bc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    11c0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    11c4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    11c6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    11c8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    11ca:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    11cc:	4770      	bx	lr
    11ce:	bf00      	nop
    11d0:	00003c53 	.word	0x00003c53

000011d4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    11d4:	4a09      	ldr	r2, [pc, #36]	; (11fc <z_check_thread_stack_fail+0x28>)
{
    11d6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    11d8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    11da:	b170      	cbz	r0, 11fa <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    11dc:	f113 0f16 	cmn.w	r3, #22
    11e0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    11e2:	d005      	beq.n	11f0 <z_check_thread_stack_fail+0x1c>
    11e4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    11e8:	429a      	cmp	r2, r3
    11ea:	d805      	bhi.n	11f8 <z_check_thread_stack_fail+0x24>
    11ec:	4283      	cmp	r3, r0
    11ee:	d203      	bcs.n	11f8 <z_check_thread_stack_fail+0x24>
		return 0;
    11f0:	4281      	cmp	r1, r0
    11f2:	bf28      	it	cs
    11f4:	2000      	movcs	r0, #0
    11f6:	4770      	bx	lr
    11f8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    11fa:	4770      	bx	lr
    11fc:	20000364 	.word	0x20000364

00001200 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1200:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1202:	4b09      	ldr	r3, [pc, #36]	; (1228 <arch_switch_to_main_thread+0x28>)
    1204:	6098      	str	r0, [r3, #8]
{
    1206:	460d      	mov	r5, r1
    1208:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    120a:	f000 f9df 	bl	15cc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    120e:	4620      	mov	r0, r4
    1210:	f385 8809 	msr	PSP, r5
    1214:	2100      	movs	r1, #0
    1216:	b663      	cpsie	if
    1218:	f381 8811 	msr	BASEPRI, r1
    121c:	f3bf 8f6f 	isb	sy
    1220:	2200      	movs	r2, #0
    1222:	2300      	movs	r3, #0
    1224:	f002 fd15 	bl	3c52 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1228:	20000364 	.word	0x20000364

0000122c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    122c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    122e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1230:	4a0b      	ldr	r2, [pc, #44]	; (1260 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1232:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1234:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1236:	bf1e      	ittt	ne
	movne	r1, #0
    1238:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    123a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    123c:	f003 f96a 	blne	4514 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1240:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1242:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1246:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    124a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    124e:	4905      	ldr	r1, [pc, #20]	; (1264 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1250:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1252:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1254:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1256:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    125a:	4903      	ldr	r1, [pc, #12]	; (1268 <_isr_wrapper+0x3c>)
	bx r1
    125c:	4708      	bx	r1
    125e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1260:	20000364 	.word	0x20000364
	ldr r1, =_sw_isr_table
    1264:	000047bc 	.word	0x000047bc
	ldr r1, =z_arm_int_exit
    1268:	0000126d 	.word	0x0000126d

0000126c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    126c:	4b04      	ldr	r3, [pc, #16]	; (1280 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    126e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1270:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1272:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1274:	d003      	beq.n	127e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1276:	4903      	ldr	r1, [pc, #12]	; (1284 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    127c:	600a      	str	r2, [r1, #0]

0000127e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    127e:	4770      	bx	lr
	ldr r3, =_kernel
    1280:	20000364 	.word	0x20000364
	ldr r1, =_SCS_ICSR
    1284:	e000ed04 	.word	0xe000ed04

00001288 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1288:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    128a:	4b1d      	ldr	r3, [pc, #116]	; (1300 <mem_manage_fault+0x78>)
{
    128c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1294:	0792      	lsls	r2, r2, #30
{
    1296:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1298:	d522      	bpl.n	12e0 <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    129a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    129c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    129e:	0614      	lsls	r4, r2, #24
    12a0:	d51e      	bpl.n	12e0 <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    12a2:	b119      	cbz	r1, 12ac <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    12a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    12aa:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    12ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    12ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    12b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12b2:	4c13      	ldr	r4, [pc, #76]	; (1300 <mem_manage_fault+0x78>)
    12b4:	f012 0f10 	tst.w	r2, #16
    12b8:	d115      	bne.n	12e6 <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    12ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    12bc:	0799      	lsls	r1, r3, #30
    12be:	d412      	bmi.n	12e6 <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    12c0:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    12c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    12c4:	4a0e      	ldr	r2, [pc, #56]	; (1300 <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    12c6:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    12c8:	bf42      	ittt	mi
    12ca:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    12cc:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    12d0:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    12d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    12d4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    12d8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    12da:	2300      	movs	r3, #0
    12dc:	702b      	strb	r3, [r5, #0]

	return reason;
}
    12de:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    12e0:	f06f 0015 	mvn.w	r0, #21
    12e4:	e7e2      	b.n	12ac <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    12e6:	6863      	ldr	r3, [r4, #4]
    12e8:	051a      	lsls	r2, r3, #20
    12ea:	d5e9      	bpl.n	12c0 <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    12ec:	4631      	mov	r1, r6
    12ee:	f7ff ff71 	bl	11d4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    12f2:	2800      	cmp	r0, #0
    12f4:	d0e4      	beq.n	12c0 <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    12f6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    12fa:	2002      	movs	r0, #2
    12fc:	e7e1      	b.n	12c2 <mem_manage_fault+0x3a>
    12fe:	bf00      	nop
    1300:	e000ed00 	.word	0xe000ed00

00001304 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1304:	4b0d      	ldr	r3, [pc, #52]	; (133c <bus_fault.constprop.0+0x38>)
    1306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    130a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    130c:	0592      	lsls	r2, r2, #22
    130e:	d508      	bpl.n	1322 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1310:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1314:	0412      	lsls	r2, r2, #16
    1316:	d504      	bpl.n	1322 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1318:	b118      	cbz	r0, 1322 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    131a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    131c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1320:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1326:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1328:	4a04      	ldr	r2, [pc, #16]	; (133c <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    132a:	bf58      	it	pl
    132c:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    132e:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1330:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1332:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1336:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1338:	7008      	strb	r0, [r1, #0]

	return reason;
}
    133a:	4770      	bx	lr
    133c:	e000ed00 	.word	0xe000ed00

00001340 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1340:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1342:	4b4a      	ldr	r3, [pc, #296]	; (146c <z_arm_fault+0x12c>)
    1344:	685b      	ldr	r3, [r3, #4]
{
    1346:	b08a      	sub	sp, #40	; 0x28
    1348:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    134a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    134e:	2600      	movs	r6, #0
    1350:	f386 8811 	msr	BASEPRI, r6
    1354:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1358:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    135c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1360:	d111      	bne.n	1386 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1362:	f002 000c 	and.w	r0, r2, #12
    1366:	2808      	cmp	r0, #8
    1368:	d00d      	beq.n	1386 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    136a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    136c:	bf4c      	ite	mi
    136e:	460d      	movmi	r5, r1
			*nested_exc = true;
    1370:	2601      	movpl	r6, #1
	*recoverable = false;
    1372:	2200      	movs	r2, #0
	switch (fault) {
    1374:	3b03      	subs	r3, #3
	*recoverable = false;
    1376:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    137a:	2b03      	cmp	r3, #3
    137c:	d84d      	bhi.n	141a <z_arm_fault+0xda>
    137e:	e8df f003 	tbb	[pc, r3]
    1382:	6504      	.short	0x6504
    1384:	6d69      	.short	0x6d69
		return NULL;
    1386:	4635      	mov	r5, r6
    1388:	e7f3      	b.n	1372 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    138a:	4b38      	ldr	r3, [pc, #224]	; (146c <z_arm_fault+0x12c>)
    138c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    138e:	0791      	lsls	r1, r2, #30
    1390:	d443      	bmi.n	141a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1394:	2a00      	cmp	r2, #0
    1396:	db40      	blt.n	141a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    139a:	0052      	lsls	r2, r2, #1
    139c:	d53d      	bpl.n	141a <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    139e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    13a0:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    13a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    13a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    13a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13ac:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    13b0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    13b2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    13b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    13ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    13bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13c0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    13c4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    13c8:	4291      	cmp	r1, r2
    13ca:	d009      	beq.n	13e0 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    13cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13ce:	b2d2      	uxtb	r2, r2
    13d0:	b142      	cbz	r2, 13e4 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    13d2:	f10d 0207 	add.w	r2, sp, #7
    13d6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    13d8:	4628      	mov	r0, r5
    13da:	f7ff ff55 	bl	1288 <mem_manage_fault>
    13de:	e00a      	b.n	13f6 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    13e0:	682c      	ldr	r4, [r5, #0]
    13e2:	e01b      	b.n	141c <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    13e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13e6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    13ea:	d006      	beq.n	13fa <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    13ec:	f10d 0107 	add.w	r1, sp, #7
    13f0:	2001      	movs	r0, #1
    13f2:	f7ff ff87 	bl	1304 <bus_fault.constprop.0>
    13f6:	4604      	mov	r4, r0
    13f8:	e010      	b.n	141c <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    13fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    1400:	d30b      	bcc.n	141a <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    140c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    140e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1410:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1414:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1418:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    141a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    141c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1420:	b993      	cbnz	r3, 1448 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1422:	2220      	movs	r2, #32
    1424:	4629      	mov	r1, r5
    1426:	a802      	add	r0, sp, #8
    1428:	f002 fd7f 	bl	3f2a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    142c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    142e:	b1be      	cbz	r6, 1460 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1430:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1434:	b922      	cbnz	r2, 1440 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1436:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    143a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    143e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1440:	a902      	add	r1, sp, #8
    1442:	4620      	mov	r0, r4
    1444:	f002 fd46 	bl	3ed4 <z_arm_fatal_error>
}
    1448:	b00a      	add	sp, #40	; 0x28
    144a:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    144c:	f10d 0207 	add.w	r2, sp, #7
    1450:	2100      	movs	r1, #0
    1452:	e7c1      	b.n	13d8 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    1454:	f10d 0107 	add.w	r1, sp, #7
    1458:	2000      	movs	r0, #0
    145a:	e7ca      	b.n	13f2 <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    145c:	4b03      	ldr	r3, [pc, #12]	; (146c <z_arm_fault+0x12c>)
    145e:	e7d0      	b.n	1402 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1460:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1464:	f023 0301 	bic.w	r3, r3, #1
    1468:	e7e9      	b.n	143e <z_arm_fault+0xfe>
    146a:	bf00      	nop
    146c:	e000ed00 	.word	0xe000ed00

00001470 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1470:	4a02      	ldr	r2, [pc, #8]	; (147c <z_arm_fault_init+0xc>)
    1472:	6953      	ldr	r3, [r2, #20]
    1474:	f043 0310 	orr.w	r3, r3, #16
    1478:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    147a:	4770      	bx	lr
    147c:	e000ed00 	.word	0xe000ed00

00001480 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1480:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1484:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1488:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    148a:	4672      	mov	r2, lr
	bl z_arm_fault
    148c:	f7ff ff58 	bl	1340 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1490:	bd01      	pop	{r0, pc}
    1492:	bf00      	nop

00001494 <z_arm_interrupt_init>:
    1494:	4804      	ldr	r0, [pc, #16]	; (14a8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1496:	2300      	movs	r3, #0
    1498:	2120      	movs	r1, #32
    149a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    149c:	3301      	adds	r3, #1
    149e:	2b30      	cmp	r3, #48	; 0x30
    14a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    14a4:	d1f9      	bne.n	149a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    14a6:	4770      	bx	lr
    14a8:	e000e100 	.word	0xe000e100

000014ac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    14ac:	2000      	movs	r0, #0
    msr CONTROL, r0
    14ae:	f380 8814 	msr	CONTROL, r0
    isb
    14b2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    14b6:	f7ff fc6f 	bl	d98 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    14ba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    14bc:	490d      	ldr	r1, [pc, #52]	; (14f4 <__start+0x48>)
    str r0, [r1]
    14be:	6008      	str	r0, [r1, #0]
    dsb
    14c0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    14c4:	480c      	ldr	r0, [pc, #48]	; (14f8 <__start+0x4c>)
    msr msp, r0
    14c6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    14ca:	f000 f82b 	bl	1524 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14ce:	2020      	movs	r0, #32
    msr BASEPRI, r0
    14d0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    14d4:	4809      	ldr	r0, [pc, #36]	; (14fc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    14d6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    14da:	1840      	adds	r0, r0, r1
    msr PSP, r0
    14dc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    14e0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    14e4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    14e6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    14e8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    14ec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    14f0:	f7ff fde4 	bl	10bc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    14f4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    14f8:	20001580 	.word	0x20001580
    ldr r0, =z_interrupt_stacks
    14fc:	200007c0 	.word	0x200007c0

00001500 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1500:	4907      	ldr	r1, [pc, #28]	; (1520 <z_arm_clear_arm_mpu_config+0x20>)
    1502:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1506:	2300      	movs	r3, #0
	int num_regions =
    1508:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    150c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    150e:	4293      	cmp	r3, r2
    1510:	db00      	blt.n	1514 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1512:	4770      	bx	lr
  MPU->RNR = rnr;
    1514:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1518:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    151c:	3301      	adds	r3, #1
    151e:	e7f6      	b.n	150e <z_arm_clear_arm_mpu_config+0xe>
    1520:	e000ed00 	.word	0xe000ed00

00001524 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1524:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1526:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1528:	2300      	movs	r3, #0
    152a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    152e:	f7ff ffe7 	bl	1500 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1532:	4b14      	ldr	r3, [pc, #80]	; (1584 <z_arm_init_arch_hw_at_boot+0x60>)
    1534:	f04f 32ff 	mov.w	r2, #4294967295
    1538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    153c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    154c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1550:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1554:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1558:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    155c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1560:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1564:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1568:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    156c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1570:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1574:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1578:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    157a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    157e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1582:	bd08      	pop	{r3, pc}
    1584:	e000e100 	.word	0xe000e100

00001588 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1588:	4b08      	ldr	r3, [pc, #32]	; (15ac <z_impl_k_thread_abort+0x24>)
    158a:	689b      	ldr	r3, [r3, #8]
    158c:	4283      	cmp	r3, r0
    158e:	d10b      	bne.n	15a8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1590:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1594:	b143      	cbz	r3, 15a8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1596:	4b06      	ldr	r3, [pc, #24]	; (15b0 <z_impl_k_thread_abort+0x28>)
    1598:	685a      	ldr	r2, [r3, #4]
    159a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    159e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    15a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    15a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    15a6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    15a8:	f002 b984 	b.w	38b4 <z_thread_abort>
    15ac:	20000364 	.word	0x20000364
    15b0:	e000ed00 	.word	0xe000ed00

000015b4 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    15b4:	4b02      	ldr	r3, [pc, #8]	; (15c0 <z_arm_configure_static_mpu_regions+0xc>)
    15b6:	4a03      	ldr	r2, [pc, #12]	; (15c4 <z_arm_configure_static_mpu_regions+0x10>)
    15b8:	4803      	ldr	r0, [pc, #12]	; (15c8 <z_arm_configure_static_mpu_regions+0x14>)
    15ba:	2101      	movs	r1, #1
    15bc:	f000 b870 	b.w	16a0 <arm_core_mpu_configure_static_mpu_regions>
    15c0:	20020000 	.word	0x20020000
    15c4:	20000000 	.word	0x20000000
    15c8:	000049c8 	.word	0x000049c8

000015cc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    15cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    15d0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    15d2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    15d4:	4a04      	ldr	r2, [pc, #16]	; (15e8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    15d6:	2140      	movs	r1, #64	; 0x40
    15d8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    15dc:	4618      	mov	r0, r3
    15de:	2101      	movs	r1, #1
    15e0:	f000 b868 	b.w	16b4 <arm_core_mpu_configure_dynamic_mpu_regions>
    15e4:	2000021c 	.word	0x2000021c
    15e8:	150b0000 	.word	0x150b0000

000015ec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    15ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    15ee:	4e20      	ldr	r6, [pc, #128]	; (1670 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    15f0:	2500      	movs	r5, #0
    15f2:	428d      	cmp	r5, r1
    15f4:	da39      	bge.n	166a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    15f6:	6844      	ldr	r4, [r0, #4]
    15f8:	b374      	cbz	r4, 1658 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    15fa:	b153      	cbz	r3, 1612 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    15fc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1600:	ea14 0f0c 	tst.w	r4, ip
    1604:	d12f      	bne.n	1666 <mpu_configure_regions+0x7a>
		&&
    1606:	2c1f      	cmp	r4, #31
    1608:	d92d      	bls.n	1666 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    160a:	6807      	ldr	r7, [r0, #0]
		&&
    160c:	ea1c 0f07 	tst.w	ip, r7
    1610:	d129      	bne.n	1666 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1612:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1614:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1616:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    161a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    161e:	d91e      	bls.n	165e <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    1620:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1624:	d81d      	bhi.n	1662 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1626:	3c01      	subs	r4, #1
    1628:	fab4 f484 	clz	r4, r4
    162c:	f1c4 041f 	rsb	r4, r4, #31
    1630:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1632:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1636:	ea4c 0c04 	orr.w	ip, ip, r4
    163a:	d814      	bhi.n	1666 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    163c:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1640:	4314      	orrs	r4, r2
    1642:	f044 0410 	orr.w	r4, r4, #16
    1646:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    164a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    164e:	f04c 0401 	orr.w	r4, ip, #1
    1652:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    1656:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1658:	3501      	adds	r5, #1
    165a:	300c      	adds	r0, #12
    165c:	e7c9      	b.n	15f2 <mpu_configure_regions+0x6>
		return REGION_32B;
    165e:	2408      	movs	r4, #8
    1660:	e7e7      	b.n	1632 <mpu_configure_regions+0x46>
		return REGION_4G;
    1662:	243e      	movs	r4, #62	; 0x3e
    1664:	e7e5      	b.n	1632 <mpu_configure_regions+0x46>
			return -EINVAL;
    1666:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    166a:	4610      	mov	r0, r2
    166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    166e:	bf00      	nop
    1670:	e000ed00 	.word	0xe000ed00

00001674 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1674:	4b04      	ldr	r3, [pc, #16]	; (1688 <arm_core_mpu_enable+0x14>)
    1676:	2205      	movs	r2, #5
    1678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    167c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1680:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1684:	4770      	bx	lr
    1686:	bf00      	nop
    1688:	e000ed00 	.word	0xe000ed00

0000168c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    168c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1690:	4b02      	ldr	r3, [pc, #8]	; (169c <arm_core_mpu_disable+0x10>)
    1692:	2200      	movs	r2, #0
    1694:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1698:	4770      	bx	lr
    169a:	bf00      	nop
    169c:	e000ed00 	.word	0xe000ed00

000016a0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    16a0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    16a2:	4c03      	ldr	r4, [pc, #12]	; (16b0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    16a4:	2301      	movs	r3, #1
    16a6:	7822      	ldrb	r2, [r4, #0]
    16a8:	f7ff ffa0 	bl	15ec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    16ac:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	2000039c 	.word	0x2000039c

000016b4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    16b4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    16b6:	4a09      	ldr	r2, [pc, #36]	; (16dc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    16b8:	2300      	movs	r3, #0
    16ba:	7812      	ldrb	r2, [r2, #0]
    16bc:	f7ff ff96 	bl	15ec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    16c0:	f110 0f16 	cmn.w	r0, #22
    16c4:	d002      	beq.n	16cc <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    16c6:	4a06      	ldr	r2, [pc, #24]	; (16e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    16c8:	2807      	cmp	r0, #7
    16ca:	dd00      	ble.n	16ce <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    16cc:	bd08      	pop	{r3, pc}
    16ce:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    16d2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    16d6:	3001      	adds	r0, #1
    16d8:	e7f6      	b.n	16c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    16da:	bf00      	nop
    16dc:	2000039c 	.word	0x2000039c
    16e0:	e000ed00 	.word	0xe000ed00

000016e4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    16e4:	4914      	ldr	r1, [pc, #80]	; (1738 <z_arm_mpu_init+0x54>)
    16e6:	6808      	ldr	r0, [r1, #0]
    16e8:	2808      	cmp	r0, #8
{
    16ea:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    16ec:	d821      	bhi.n	1732 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    16ee:	f7ff ffcd 	bl	168c <arm_core_mpu_disable>
    16f2:	4c12      	ldr	r4, [pc, #72]	; (173c <z_arm_mpu_init+0x58>)
    16f4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    16f6:	2200      	movs	r2, #0
    16f8:	4290      	cmp	r0, r2
    16fa:	f101 010c 	add.w	r1, r1, #12
    16fe:	d105      	bne.n	170c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1700:	4b0f      	ldr	r3, [pc, #60]	; (1740 <z_arm_mpu_init+0x5c>)
    1702:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1704:	f7ff ffb6 	bl	1674 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1708:	2000      	movs	r0, #0
}
    170a:	bd10      	pop	{r4, pc}
    170c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1710:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1714:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1718:	4313      	orrs	r3, r2
    171a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    171e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1722:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1726:	f043 0301 	orr.w	r3, r3, #1
    172a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    172e:	3201      	adds	r2, #1
    1730:	e7e2      	b.n	16f8 <z_arm_mpu_init+0x14>
		return -1;
    1732:	f04f 30ff 	mov.w	r0, #4294967295
    1736:	e7e8      	b.n	170a <z_arm_mpu_init+0x26>
    1738:	000049d4 	.word	0x000049d4
    173c:	e000ed00 	.word	0xe000ed00
    1740:	2000039c 	.word	0x2000039c

00001744 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1744:	4b01      	ldr	r3, [pc, #4]	; (174c <__stdout_hook_install+0x8>)
    1746:	6018      	str	r0, [r3, #0]
}
    1748:	4770      	bx	lr
    174a:	bf00      	nop
    174c:	20000008 	.word	0x20000008

00001750 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1750:	f04f 0320 	mov.w	r3, #32
    1754:	f3ef 8211 	mrs	r2, BASEPRI
    1758:	f383 8812 	msr	BASEPRI_MAX, r3
    175c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1760:	4906      	ldr	r1, [pc, #24]	; (177c <nordicsemi_nrf52_init+0x2c>)
    1762:	2301      	movs	r3, #1
    1764:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1768:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    176c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1770:	f382 8811 	msr	BASEPRI, r2
    1774:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1778:	2000      	movs	r0, #0
    177a:	4770      	bx	lr
    177c:	4001e000 	.word	0x4001e000

00001780 <sys_arch_reboot>:
    *p_gpregret = val;
    1780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1784:	b2c0      	uxtb	r0, r0
    1786:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    178a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    178e:	4905      	ldr	r1, [pc, #20]	; (17a4 <sys_arch_reboot+0x24>)
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <sys_arch_reboot+0x28>)
    1792:	68ca      	ldr	r2, [r1, #12]
    1794:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1798:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    179a:	60cb      	str	r3, [r1, #12]
    179c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    17a0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    17a2:	e7fd      	b.n	17a0 <sys_arch_reboot+0x20>
    17a4:	e000ed00 	.word	0xe000ed00
    17a8:	05fa0004 	.word	0x05fa0004

000017ac <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    17ac:	b120      	cbz	r0, 17b8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    17ae:	4b03      	ldr	r3, [pc, #12]	; (17bc <arch_busy_wait+0x10>)
    17b0:	0180      	lsls	r0, r0, #6
    17b2:	f043 0301 	orr.w	r3, r3, #1
    17b6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    17b8:	4770      	bx	lr
    17ba:	bf00      	nop
    17bc:	000049c0 	.word	0x000049c0

000017c0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    17c0:	4b08      	ldr	r3, [pc, #32]	; (17e4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    17c2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    17c4:	1ac3      	subs	r3, r0, r3
{
    17c6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    17c8:	4907      	ldr	r1, [pc, #28]	; (17e8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    17ca:	109b      	asrs	r3, r3, #2
{
    17cc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    17ce:	4359      	muls	r1, r3
    17d0:	4806      	ldr	r0, [pc, #24]	; (17ec <onoff_stop+0x2c>)
    17d2:	2240      	movs	r2, #64	; 0x40
    17d4:	f002 fbee 	bl	3fb4 <stop>
	notify(mgr, res);
    17d8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    17da:	4601      	mov	r1, r0
	notify(mgr, res);
    17dc:	4620      	mov	r0, r4
}
    17de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    17e2:	4718      	bx	r3
    17e4:	2000023c 	.word	0x2000023c
    17e8:	b6db6db7 	.word	0xb6db6db7
    17ec:	00004744 	.word	0x00004744

000017f0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    17f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    17f2:	4c0c      	ldr	r4, [pc, #48]	; (1824 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17f4:	4a0c      	ldr	r2, [pc, #48]	; (1828 <onoff_start+0x38>)
    17f6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    17f8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17fa:	9300      	str	r3, [sp, #0]
{
    17fc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17fe:	460b      	mov	r3, r1
    1800:	490a      	ldr	r1, [pc, #40]	; (182c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1802:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1804:	4361      	muls	r1, r4
{
    1806:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1808:	4809      	ldr	r0, [pc, #36]	; (1830 <onoff_start+0x40>)
    180a:	f002 fc00 	bl	400e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    180e:	1e01      	subs	r1, r0, #0
    1810:	da05      	bge.n	181e <onoff_start+0x2e>
		notify(mgr, err);
    1812:	4630      	mov	r0, r6
    1814:	462b      	mov	r3, r5
	}
}
    1816:	b002      	add	sp, #8
    1818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    181c:	4718      	bx	r3
}
    181e:	b002      	add	sp, #8
    1820:	bd70      	pop	{r4, r5, r6, pc}
    1822:	bf00      	nop
    1824:	2000023c 	.word	0x2000023c
    1828:	0000407b 	.word	0x0000407b
    182c:	b6db6db7 	.word	0xb6db6db7
    1830:	00004744 	.word	0x00004744

00001834 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1834:	2200      	movs	r2, #0
{
    1836:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1838:	2101      	movs	r1, #1
{
    183a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    183c:	4610      	mov	r0, r2
    183e:	f7ff fc21 	bl	1084 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1842:	480f      	ldr	r0, [pc, #60]	; (1880 <clk_init+0x4c>)
    1844:	f000 ffce 	bl	27e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1848:	4b0e      	ldr	r3, [pc, #56]	; (1884 <clk_init+0x50>)
    184a:	4298      	cmp	r0, r3
    184c:	d115      	bne.n	187a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    184e:	f002 fd86 	bl	435e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1852:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1854:	490c      	ldr	r1, [pc, #48]	; (1888 <clk_init+0x54>)
    1856:	4630      	mov	r0, r6
    1858:	f002 fa55 	bl	3d06 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    185c:	2800      	cmp	r0, #0
    185e:	db0b      	blt.n	1878 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1860:	2501      	movs	r5, #1
    1862:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1864:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1866:	4908      	ldr	r1, [pc, #32]	; (1888 <clk_init+0x54>)
    1868:	f104 001c 	add.w	r0, r4, #28
    186c:	f002 fa4b 	bl	3d06 <onoff_manager_init>
		if (err < 0) {
    1870:	2800      	cmp	r0, #0
    1872:	db01      	blt.n	1878 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1874:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1876:	2000      	movs	r0, #0
}
    1878:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    187a:	f06f 0004 	mvn.w	r0, #4
    187e:	e7fb      	b.n	1878 <clk_init+0x44>
    1880:	000018c1 	.word	0x000018c1
    1884:	0bad0000 	.word	0x0bad0000
    1888:	000049f4 	.word	0x000049f4

0000188c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1890:	230c      	movs	r3, #12
    1892:	4809      	ldr	r0, [pc, #36]	; (18b8 <clkstarted_handle.constprop.0+0x2c>)
    1894:	434b      	muls	r3, r1
    1896:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1898:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    189c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    189e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    18a0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    18a2:	4418      	add	r0, r3
    18a4:	f002 fb73 	bl	3f8e <set_on_state>
	if (callback) {
    18a8:	b12d      	cbz	r5, 18b6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    18aa:	4632      	mov	r2, r6
    18ac:	462b      	mov	r3, r5
    18ae:	4803      	ldr	r0, [pc, #12]	; (18bc <clkstarted_handle.constprop.0+0x30>)
}
    18b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    18b4:	4718      	bx	r3
}
    18b6:	bd70      	pop	{r4, r5, r6, pc}
    18b8:	2000023c 	.word	0x2000023c
    18bc:	00004744 	.word	0x00004744

000018c0 <clock_event_handler>:
	switch (event) {
    18c0:	b110      	cbz	r0, 18c8 <clock_event_handler+0x8>
    18c2:	2801      	cmp	r0, #1
    18c4:	d004      	beq.n	18d0 <clock_event_handler+0x10>
    18c6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    18c8:	4b03      	ldr	r3, [pc, #12]	; (18d8 <clock_event_handler+0x18>)
    18ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    18cc:	075b      	lsls	r3, r3, #29
    18ce:	d101      	bne.n	18d4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    18d0:	f7ff bfdc 	b.w	188c <clkstarted_handle.constprop.0>
}
    18d4:	4770      	bx	lr
    18d6:	bf00      	nop
    18d8:	2000023c 	.word	0x2000023c

000018dc <generic_hfclk_start>:
{
    18dc:	b508      	push	{r3, lr}
	__asm__ volatile(
    18de:	f04f 0320 	mov.w	r3, #32
    18e2:	f3ef 8111 	mrs	r1, BASEPRI
    18e6:	f383 8812 	msr	BASEPRI_MAX, r3
    18ea:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    18ee:	4a12      	ldr	r2, [pc, #72]	; (1938 <generic_hfclk_start+0x5c>)
    18f0:	6813      	ldr	r3, [r2, #0]
    18f2:	f043 0002 	orr.w	r0, r3, #2
    18f6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    18f8:	07da      	lsls	r2, r3, #31
    18fa:	d408      	bmi.n	190e <generic_hfclk_start+0x32>
	__asm__ volatile(
    18fc:	f381 8811 	msr	BASEPRI, r1
    1900:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1904:	2001      	movs	r0, #1
}
    1906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    190a:	f002 bd35 	b.w	4378 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    190e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1912:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1916:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    191a:	07d3      	lsls	r3, r2, #31
    191c:	d5ee      	bpl.n	18fc <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    191e:	4807      	ldr	r0, [pc, #28]	; (193c <generic_hfclk_start+0x60>)
    1920:	f002 fb35 	bl	3f8e <set_on_state>
    1924:	f381 8811 	msr	BASEPRI, r1
    1928:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    192c:	2000      	movs	r0, #0
}
    192e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1932:	f7ff bfab 	b.w	188c <clkstarted_handle.constprop.0>
    1936:	bf00      	nop
    1938:	2000028c 	.word	0x2000028c
    193c:	2000027c 	.word	0x2000027c

00001940 <api_blocking_start>:
{
    1940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1942:	2200      	movs	r2, #0
    1944:	2301      	movs	r3, #1
    1946:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    194a:	4a09      	ldr	r2, [pc, #36]	; (1970 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    194c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1950:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1952:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1956:	f002 fb89 	bl	406c <api_start>
	if (err < 0) {
    195a:	2800      	cmp	r0, #0
    195c:	db05      	blt.n	196a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    195e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1962:	2300      	movs	r3, #0
    1964:	4668      	mov	r0, sp
    1966:	f001 fcdb 	bl	3320 <z_impl_k_sem_take>
}
    196a:	b005      	add	sp, #20
    196c:	f85d fb04 	ldr.w	pc, [sp], #4
    1970:	00004099 	.word	0x00004099

00001974 <generic_hfclk_stop>:
{
    1974:	b510      	push	{r4, lr}
	__asm__ volatile(
    1976:	f04f 0320 	mov.w	r3, #32
    197a:	f3ef 8411 	mrs	r4, BASEPRI
    197e:	f383 8812 	msr	BASEPRI_MAX, r3
    1982:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1986:	4a07      	ldr	r2, [pc, #28]	; (19a4 <generic_hfclk_stop+0x30>)
    1988:	6813      	ldr	r3, [r2, #0]
    198a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    198e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1990:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1992:	d402      	bmi.n	199a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1994:	2001      	movs	r0, #1
    1996:	f002 fd2b 	bl	43f0 <nrfx_clock_stop>
	__asm__ volatile(
    199a:	f384 8811 	msr	BASEPRI, r4
    199e:	f3bf 8f6f 	isb	sy
}
    19a2:	bd10      	pop	{r4, pc}
    19a4:	2000028c 	.word	0x2000028c

000019a8 <z_nrf_clock_control_lf_on>:
{
    19a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    19ac:	4938      	ldr	r1, [pc, #224]	; (1a90 <z_nrf_clock_control_lf_on+0xe8>)
    19ae:	f3bf 8f5b 	dmb	ish
    19b2:	4607      	mov	r7, r0
    19b4:	2201      	movs	r2, #1
    19b6:	e851 3f00 	ldrex	r3, [r1]
    19ba:	e841 2000 	strex	r0, r2, [r1]
    19be:	2800      	cmp	r0, #0
    19c0:	d1f9      	bne.n	19b6 <z_nrf_clock_control_lf_on+0xe>
    19c2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    19c6:	b933      	cbnz	r3, 19d6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    19c8:	4932      	ldr	r1, [pc, #200]	; (1a94 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    19ca:	4833      	ldr	r0, [pc, #204]	; (1a98 <z_nrf_clock_control_lf_on+0xf0>)
    19cc:	604b      	str	r3, [r1, #4]
    19ce:	60cb      	str	r3, [r1, #12]
    19d0:	608a      	str	r2, [r1, #8]
    19d2:	f002 f9ab 	bl	3d2c <onoff_request>
	switch (start_mode) {
    19d6:	1e7b      	subs	r3, r7, #1
    19d8:	2b01      	cmp	r3, #1
    19da:	d82b      	bhi.n	1a34 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    19dc:	2f01      	cmp	r7, #1
    19de:	d107      	bne.n	19f0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    19e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    19e4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    19e8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    19ec:	2b01      	cmp	r3, #1
    19ee:	d021      	beq.n	1a34 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    19f0:	f002 fd8a 	bl	4508 <k_is_in_isr>
    19f4:	4605      	mov	r5, r0
    19f6:	b9f8      	cbnz	r0, 1a38 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    19f8:	4b28      	ldr	r3, [pc, #160]	; (1a9c <z_nrf_clock_control_lf_on+0xf4>)
    19fa:	781b      	ldrb	r3, [r3, #0]
    19fc:	b1e3      	cbz	r3, 1a38 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    19fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a02:	2202      	movs	r2, #2
    1a04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1a08:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a0a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1aa0 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1a0e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1a12:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1a16:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1a1a:	03d2      	lsls	r2, r2, #15
    1a1c:	d516      	bpl.n	1a4c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1a1e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1a22:	2b01      	cmp	r3, #1
    1a24:	d001      	beq.n	1a2a <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1a26:	2f01      	cmp	r7, #1
    1a28:	d110      	bne.n	1a4c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    1a2a:	b35d      	cbz	r5, 1a84 <z_nrf_clock_control_lf_on+0xdc>
    1a2c:	f386 8811 	msr	BASEPRI, r6
    1a30:	f3bf 8f6f 	isb	sy
}
    1a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1a38:	f04f 0320 	mov.w	r3, #32
    1a3c:	f3ef 8611 	mrs	r6, BASEPRI
    1a40:	f383 8812 	msr	BASEPRI_MAX, r3
    1a44:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1a48:	2501      	movs	r5, #1
    1a4a:	e7de      	b.n	1a0a <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1a4c:	b1ad      	cbz	r5, 1a7a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1a4e:	4630      	mov	r0, r6
    1a50:	f7ff faf0 	bl	1034 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1a54:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d1da      	bne.n	1a12 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1a5c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1a60:	2a00      	cmp	r2, #0
    1a62:	d0d6      	beq.n	1a12 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1a64:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1a68:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1a6c:	2301      	movs	r3, #1
    1a6e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    1a72:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1a76:	60a3      	str	r3, [r4, #8]
}
    1a78:	e7cb      	b.n	1a12 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    1a7a:	2100      	movs	r1, #0
    1a7c:	2021      	movs	r0, #33	; 0x21
    1a7e:	f001 fef9 	bl	3874 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1a82:	e7e7      	b.n	1a54 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    1a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a88:	2202      	movs	r2, #2
    1a8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1a8e:	e7d1      	b.n	1a34 <z_nrf_clock_control_lf_on+0x8c>
    1a90:	20000238 	.word	0x20000238
    1a94:	20000228 	.word	0x20000228
    1a98:	20000258 	.word	0x20000258
    1a9c:	200007b1 	.word	0x200007b1
    1aa0:	e000e100 	.word	0xe000e100

00001aa4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1aa4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1aa6:	4807      	ldr	r0, [pc, #28]	; (1ac4 <uart_console_init+0x20>)
    1aa8:	f002 fd04 	bl	44b4 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1aac:	b138      	cbz	r0, 1abe <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    1aae:	4806      	ldr	r0, [pc, #24]	; (1ac8 <uart_console_init+0x24>)
    1ab0:	f7ff fe48 	bl	1744 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1ab4:	4804      	ldr	r0, [pc, #16]	; (1ac8 <uart_console_init+0x24>)
    1ab6:	f7fe fc9b 	bl	3f0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1aba:	2000      	movs	r0, #0
}
    1abc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1abe:	f06f 0012 	mvn.w	r0, #18
    1ac2:	e7fb      	b.n	1abc <uart_console_init+0x18>
    1ac4:	000047a4 	.word	0x000047a4
    1ac8:	00001acd 	.word	0x00001acd

00001acc <console_out>:
	if ('\n' == c) {
    1acc:	280a      	cmp	r0, #10
{
    1ace:	b538      	push	{r3, r4, r5, lr}
    1ad0:	4d07      	ldr	r5, [pc, #28]	; (1af0 <console_out+0x24>)
    1ad2:	4604      	mov	r4, r0
	if ('\n' == c) {
    1ad4:	d104      	bne.n	1ae0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1ad6:	68ab      	ldr	r3, [r5, #8]
    1ad8:	210d      	movs	r1, #13
    1ada:	685b      	ldr	r3, [r3, #4]
    1adc:	4628      	mov	r0, r5
    1ade:	4798      	blx	r3
    1ae0:	68ab      	ldr	r3, [r5, #8]
    1ae2:	4803      	ldr	r0, [pc, #12]	; (1af0 <console_out+0x24>)
    1ae4:	685b      	ldr	r3, [r3, #4]
    1ae6:	b2e1      	uxtb	r1, r4
    1ae8:	4798      	blx	r3
}
    1aea:	4620      	mov	r0, r4
    1aec:	bd38      	pop	{r3, r4, r5, pc}
    1aee:	bf00      	nop
    1af0:	000047a4 	.word	0x000047a4

00001af4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1af4:	b530      	push	{r4, r5, lr}
	return port->config;
    1af6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1af8:	7b05      	ldrb	r5, [r0, #12]
    1afa:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1afe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    1b02:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1b04:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1b08:	d105      	bne.n	1b16 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    1b0a:	4620      	mov	r0, r4
    1b0c:	f001 f8ea 	bl	2ce4 <nrfx_gpiote_trigger_disable>

		return 0;
    1b10:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    1b12:	b005      	add	sp, #20
    1b14:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    1b16:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    1b18:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1b1c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1b20:	d114      	bne.n	1b4c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1b26:	bf0c      	ite	eq
    1b28:	2304      	moveq	r3, #4
    1b2a:	2305      	movne	r3, #5
    1b2c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1b30:	2300      	movs	r3, #0
    1b32:	4619      	mov	r1, r3
    1b34:	aa02      	add	r2, sp, #8
    1b36:	4620      	mov	r0, r4
    1b38:	f000 ff12 	bl	2960 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1b3c:	4b1f      	ldr	r3, [pc, #124]	; (1bbc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1b3e:	4298      	cmp	r0, r3
    1b40:	d139      	bne.n	1bb6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1b42:	2101      	movs	r1, #1
    1b44:	4620      	mov	r0, r4
    1b46:	f001 f885 	bl	2c54 <nrfx_gpiote_trigger_enable>
	return 0;
    1b4a:	e7e1      	b.n	1b10 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1b4c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1b50:	d026      	beq.n	1ba0 <gpio_nrfx_pin_interrupt_configure+0xac>
    1b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1b56:	bf14      	ite	ne
    1b58:	2301      	movne	r3, #1
    1b5a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1b5c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1b60:	6883      	ldr	r3, [r0, #8]
    1b62:	40cb      	lsrs	r3, r1
    1b64:	07d9      	lsls	r1, r3, #31
    1b66:	d4e3      	bmi.n	1b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
    1b68:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1b6c:	d1e0      	bne.n	1b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1b6e:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    1b70:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1b72:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    1b76:	4a12      	ldr	r2, [pc, #72]	; (1bc0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1b78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    1b7c:	bf18      	it	ne
    1b7e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1b86:	07db      	lsls	r3, r3, #31
    1b88:	d4d2      	bmi.n	1b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1b8a:	f10d 0507 	add.w	r5, sp, #7
    1b8e:	4629      	mov	r1, r5
    1b90:	4620      	mov	r0, r4
    1b92:	f001 f80b 	bl	2bac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1b96:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    1b98:	4298      	cmp	r0, r3
    1b9a:	d003      	beq.n	1ba4 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    1b9c:	9503      	str	r5, [sp, #12]
    1b9e:	e7c7      	b.n	1b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1ba0:	2303      	movs	r3, #3
    1ba2:	e7db      	b.n	1b5c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    1ba4:	4628      	mov	r0, r5
    1ba6:	f001 f84f 	bl	2c48 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1baa:	4b04      	ldr	r3, [pc, #16]	; (1bbc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1bac:	4298      	cmp	r0, r3
    1bae:	d0f5      	beq.n	1b9c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    1bb0:	f06f 000b 	mvn.w	r0, #11
    1bb4:	e7ad      	b.n	1b12 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    1bb6:	f06f 0015 	mvn.w	r0, #21
    1bba:	e7aa      	b.n	1b12 <gpio_nrfx_pin_interrupt_configure+0x1e>
    1bbc:	0bad0000 	.word	0x0bad0000
    1bc0:	50000300 	.word	0x50000300
    1bc4:	0bad0004 	.word	0x0bad0004

00001bc8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1bc8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1bca:	f001 f82d 	bl	2c28 <nrfx_gpiote_is_init>
    1bce:	4604      	mov	r4, r0
    1bd0:	b968      	cbnz	r0, 1bee <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1bd2:	f001 f801 	bl	2bd8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1bd6:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <gpio_nrfx_init+0x30>)
    1bd8:	4298      	cmp	r0, r3
    1bda:	d10a      	bne.n	1bf2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1bdc:	4807      	ldr	r0, [pc, #28]	; (1bfc <gpio_nrfx_init+0x34>)
    1bde:	4621      	mov	r1, r4
    1be0:	f000 ffde 	bl	2ba0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1be4:	4622      	mov	r2, r4
    1be6:	2105      	movs	r1, #5
    1be8:	2006      	movs	r0, #6
    1bea:	f7ff fa4b 	bl	1084 <z_arm_irq_priority_set>
		return 0;
    1bee:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1bf0:	bd10      	pop	{r4, pc}
		return -EIO;
    1bf2:	f06f 0004 	mvn.w	r0, #4
    1bf6:	e7fb      	b.n	1bf0 <gpio_nrfx_init+0x28>
    1bf8:	0bad0000 	.word	0x0bad0000
    1bfc:	00001c01 	.word	0x00001c01

00001c00 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1c00:	0942      	lsrs	r2, r0, #5
{
    1c02:	b570      	push	{r4, r5, r6, lr}
    1c04:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1c06:	d002      	beq.n	1c0e <nrfx_gpio_handler+0xe>
    1c08:	2a01      	cmp	r2, #1
    1c0a:	d017      	beq.n	1c3c <nrfx_gpio_handler+0x3c>
}
    1c0c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1c0e:	4e0d      	ldr	r6, [pc, #52]	; (1c44 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    1c10:	6932      	ldr	r2, [r6, #16]
    1c12:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1c14:	2900      	cmp	r1, #0
    1c16:	d0f9      	beq.n	1c0c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    1c18:	f003 031f 	and.w	r3, r3, #31
    1c1c:	2501      	movs	r5, #1
    1c1e:	680c      	ldr	r4, [r1, #0]
    1c20:	409d      	lsls	r5, r3
    1c22:	2900      	cmp	r1, #0
    1c24:	d0f2      	beq.n	1c0c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    1c26:	688a      	ldr	r2, [r1, #8]
    1c28:	402a      	ands	r2, r5
    1c2a:	d002      	beq.n	1c32 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1c2c:	684b      	ldr	r3, [r1, #4]
    1c2e:	4630      	mov	r0, r6
    1c30:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1c32:	b12c      	cbz	r4, 1c40 <nrfx_gpio_handler+0x40>
    1c34:	6823      	ldr	r3, [r4, #0]
    1c36:	4621      	mov	r1, r4
    1c38:	461c      	mov	r4, r3
    1c3a:	e7f2      	b.n	1c22 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1c3c:	4e02      	ldr	r6, [pc, #8]	; (1c48 <nrfx_gpio_handler+0x48>)
    1c3e:	e7e7      	b.n	1c10 <nrfx_gpio_handler+0x10>
    1c40:	4623      	mov	r3, r4
    1c42:	e7f8      	b.n	1c36 <nrfx_gpio_handler+0x36>
    1c44:	00004774 	.word	0x00004774
    1c48:	0000475c 	.word	0x0000475c

00001c4c <gpio_nrfx_pin_configure>:
{
    1c4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    1c50:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1c52:	7b3b      	ldrb	r3, [r7, #12]
    1c54:	f001 051f 	and.w	r5, r1, #31
    1c58:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    1c5c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1c5e:	4628      	mov	r0, r5
    1c60:	f10d 0103 	add.w	r1, sp, #3
{
    1c64:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1c66:	f000 ffa1 	bl	2bac <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1c6a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1c6e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1c70:	d10b      	bne.n	1c8a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    1c72:	4628      	mov	r0, r5
    1c74:	f001 f85e 	bl	2d34 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    1c78:	4b3d      	ldr	r3, [pc, #244]	; (1d70 <gpio_nrfx_pin_configure+0x124>)
    1c7a:	4598      	cmp	r8, r3
    1c7c:	d103      	bne.n	1c86 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    1c7e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1c82:	f000 ffdb 	bl	2c3c <nrfx_gpiote_channel_free>
		return 0;
    1c86:	2000      	movs	r0, #0
    1c88:	e00c      	b.n	1ca4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c8a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1c8c:	4619      	mov	r1, r3
    1c8e:	aa02      	add	r2, sp, #8
    1c90:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c92:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1c96:	f000 fe63 	bl	2960 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1c9a:	4b35      	ldr	r3, [pc, #212]	; (1d70 <gpio_nrfx_pin_configure+0x124>)
    1c9c:	4298      	cmp	r0, r3
    1c9e:	d004      	beq.n	1caa <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    1ca0:	f06f 0015 	mvn.w	r0, #21
}
    1ca4:	b004      	add	sp, #16
    1ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    1caa:	4580      	cmp	r8, r0
    1cac:	d103      	bne.n	1cb6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    1cae:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1cb2:	f000 ffc3 	bl	2c3c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    1cb6:	03a3      	lsls	r3, r4, #14
    1cb8:	d54b      	bpl.n	1d52 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1cba:	f240 3306 	movw	r3, #774	; 0x306
    1cbe:	4023      	ands	r3, r4
    1cc0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    1cc4:	d019      	beq.n	1cfa <gpio_nrfx_pin_configure+0xae>
    1cc6:	d80c      	bhi.n	1ce2 <gpio_nrfx_pin_configure+0x96>
    1cc8:	2b06      	cmp	r3, #6
    1cca:	d017      	beq.n	1cfc <gpio_nrfx_pin_configure+0xb0>
    1ccc:	d804      	bhi.n	1cd8 <gpio_nrfx_pin_configure+0x8c>
    1cce:	b1ab      	cbz	r3, 1cfc <gpio_nrfx_pin_configure+0xb0>
    1cd0:	2b02      	cmp	r3, #2
    1cd2:	d1e5      	bne.n	1ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    1cd4:	2304      	movs	r3, #4
    1cd6:	e011      	b.n	1cfc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1cdc:	d1e0      	bne.n	1ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    1cde:	2301      	movs	r3, #1
    1ce0:	e00c      	b.n	1cfc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1ce2:	f240 2202 	movw	r2, #514	; 0x202
    1ce6:	4293      	cmp	r3, r2
    1ce8:	d027      	beq.n	1d3a <gpio_nrfx_pin_configure+0xee>
    1cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1cee:	d026      	beq.n	1d3e <gpio_nrfx_pin_configure+0xf2>
    1cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1cf4:	d1d4      	bne.n	1ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    1cf6:	2302      	movs	r3, #2
    1cf8:	e000      	b.n	1cfc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    1cfa:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    1cfc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1d00:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    1d04:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    1d08:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1d0a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    1d0e:	bf54      	ite	pl
    1d10:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1d14:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1d16:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    1d18:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1d1c:	d511      	bpl.n	1d42 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1d1e:	687a      	ldr	r2, [r7, #4]
    1d20:	2301      	movs	r3, #1
    1d22:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    1d24:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1d28:	2200      	movs	r2, #0
    1d2a:	a901      	add	r1, sp, #4
    1d2c:	4628      	mov	r0, r5
    1d2e:	f000 fec5 	bl	2abc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1d32:	4b0f      	ldr	r3, [pc, #60]	; (1d70 <gpio_nrfx_pin_configure+0x124>)
    1d34:	4298      	cmp	r0, r3
    1d36:	d0a6      	beq.n	1c86 <gpio_nrfx_pin_configure+0x3a>
    1d38:	e7b2      	b.n	1ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    1d3a:	2305      	movs	r3, #5
    1d3c:	e7de      	b.n	1cfc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1d3e:	2303      	movs	r3, #3
    1d40:	e7dc      	b.n	1cfc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1d42:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1d44:	bf41      	itttt	mi
    1d46:	2301      	movmi	r3, #1
    1d48:	687a      	ldrmi	r2, [r7, #4]
    1d4a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    1d4c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    1d50:	e7ea      	b.n	1d28 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    1d52:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1d54:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    1d58:	bf54      	ite	pl
    1d5a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1d5e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1d60:	461a      	mov	r2, r3
    1d62:	a901      	add	r1, sp, #4
    1d64:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1d66:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1d6a:	f000 fdf9 	bl	2960 <nrfx_gpiote_input_configure>
    1d6e:	e7e0      	b.n	1d32 <gpio_nrfx_pin_configure+0xe6>
    1d70:	0bad0000 	.word	0x0bad0000

00001d74 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1d74:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1d76:	794b      	ldrb	r3, [r1, #5]
    1d78:	2b01      	cmp	r3, #1
    1d7a:	d029      	beq.n	1dd0 <uarte_nrfx_configure+0x5c>
    1d7c:	2b03      	cmp	r3, #3
    1d7e:	d124      	bne.n	1dca <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1d80:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1d82:	798b      	ldrb	r3, [r1, #6]
    1d84:	2b03      	cmp	r3, #3
    1d86:	d120      	bne.n	1dca <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1d88:	79ce      	ldrb	r6, [r1, #7]
    1d8a:	b10e      	cbz	r6, 1d90 <uarte_nrfx_configure+0x1c>
    1d8c:	2e01      	cmp	r6, #1
    1d8e:	d11c      	bne.n	1dca <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1d90:	790a      	ldrb	r2, [r1, #4]
    1d92:	2a01      	cmp	r2, #1
    1d94:	d01e      	beq.n	1dd4 <uarte_nrfx_configure+0x60>
    1d96:	2a02      	cmp	r2, #2
    1d98:	d020      	beq.n	1ddc <uarte_nrfx_configure+0x68>
    1d9a:	b9b2      	cbnz	r2, 1dca <uarte_nrfx_configure+0x56>
    1d9c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1d9e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1da0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1da2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1da6:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    1daa:	d06e      	beq.n	1e8a <uarte_nrfx_configure+0x116>
    1dac:	d833      	bhi.n	1e16 <uarte_nrfx_configure+0xa2>
    1dae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1db2:	d06d      	beq.n	1e90 <uarte_nrfx_configure+0x11c>
    1db4:	d81c      	bhi.n	1df0 <uarte_nrfx_configure+0x7c>
    1db6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1dba:	d06b      	beq.n	1e94 <uarte_nrfx_configure+0x120>
    1dbc:	d810      	bhi.n	1de0 <uarte_nrfx_configure+0x6c>
    1dbe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1dc2:	d06a      	beq.n	1e9a <uarte_nrfx_configure+0x126>
    1dc4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1dc8:	d06a      	beq.n	1ea0 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    1dca:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1dce:	e05b      	b.n	1e88 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    1dd0:	2700      	movs	r7, #0
    1dd2:	e7d6      	b.n	1d82 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    1dd4:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1dd8:	220e      	movs	r2, #14
    1dda:	e7e0      	b.n	1d9e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    1ddc:	2400      	movs	r4, #0
    1dde:	e7fb      	b.n	1dd8 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    1de0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1de4:	d05f      	beq.n	1ea6 <uarte_nrfx_configure+0x132>
    1de6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1dea:	d1ee      	bne.n	1dca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1dec:	4b38      	ldr	r3, [pc, #224]	; (1ed0 <uarte_nrfx_configure+0x15c>)
    1dee:	e03c      	b.n	1e6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    1df0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1df4:	d05a      	beq.n	1eac <uarte_nrfx_configure+0x138>
    1df6:	d807      	bhi.n	1e08 <uarte_nrfx_configure+0x94>
    1df8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1dfc:	d058      	beq.n	1eb0 <uarte_nrfx_configure+0x13c>
    1dfe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1e02:	d1e2      	bne.n	1dca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1e04:	4b33      	ldr	r3, [pc, #204]	; (1ed4 <uarte_nrfx_configure+0x160>)
    1e06:	e030      	b.n	1e6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    1e08:	f647 2512 	movw	r5, #31250	; 0x7a12
    1e0c:	42ab      	cmp	r3, r5
    1e0e:	d1dc      	bne.n	1dca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1e10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1e14:	e029      	b.n	1e6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    1e16:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1e1a:	d04b      	beq.n	1eb4 <uarte_nrfx_configure+0x140>
    1e1c:	d813      	bhi.n	1e46 <uarte_nrfx_configure+0xd2>
    1e1e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1e22:	d04a      	beq.n	1eba <uarte_nrfx_configure+0x146>
    1e24:	d809      	bhi.n	1e3a <uarte_nrfx_configure+0xc6>
    1e26:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    1e2a:	42ab      	cmp	r3, r5
    1e2c:	d047      	beq.n	1ebe <uarte_nrfx_configure+0x14a>
    1e2e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1e32:	d1ca      	bne.n	1dca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1e34:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1e38:	e017      	b.n	1e6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    1e3a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1e3e:	d1c4      	bne.n	1dca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1e40:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1e44:	e011      	b.n	1e6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    1e46:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1e4a:	d03b      	beq.n	1ec4 <uarte_nrfx_configure+0x150>
    1e4c:	d808      	bhi.n	1e60 <uarte_nrfx_configure+0xec>
    1e4e:	4d22      	ldr	r5, [pc, #136]	; (1ed8 <uarte_nrfx_configure+0x164>)
    1e50:	42ab      	cmp	r3, r5
    1e52:	d03a      	beq.n	1eca <uarte_nrfx_configure+0x156>
    1e54:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1e58:	d1b7      	bne.n	1dca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1e5a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1e5e:	e004      	b.n	1e6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    1e60:	4d1e      	ldr	r5, [pc, #120]	; (1edc <uarte_nrfx_configure+0x168>)
    1e62:	42ab      	cmp	r3, r5
    1e64:	d1b1      	bne.n	1dca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1e66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    1e6a:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1e6c:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    1e70:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    1e72:	433a      	orrs	r2, r7
    1e74:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    1e76:	4334      	orrs	r4, r6
    1e78:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1e7a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    1e7e:	c903      	ldmia	r1, {r0, r1}
    1e80:	1d2b      	adds	r3, r5, #4
    1e82:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1e86:	2000      	movs	r0, #0
}
    1e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1e8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1e8e:	e7ec      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1e90:	4b13      	ldr	r3, [pc, #76]	; (1ee0 <uarte_nrfx_configure+0x16c>)
    1e92:	e7ea      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1e94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1e98:	e7e7      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    1e9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1e9e:	e7e4      	b.n	1e6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    1ea0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1ea4:	e7e1      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1ea6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1eaa:	e7de      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1eac:	4b0d      	ldr	r3, [pc, #52]	; (1ee4 <uarte_nrfx_configure+0x170>)
    1eae:	e7dc      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1eb0:	4b0d      	ldr	r3, [pc, #52]	; (1ee8 <uarte_nrfx_configure+0x174>)
    1eb2:	e7da      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1eb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1eb8:	e7d7      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1eba:	4b0c      	ldr	r3, [pc, #48]	; (1eec <uarte_nrfx_configure+0x178>)
    1ebc:	e7d5      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1ebe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1ec2:	e7d2      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1ec4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1ec8:	e7cf      	b.n	1e6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1eca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1ece:	e7cc      	b.n	1e6a <uarte_nrfx_configure+0xf6>
    1ed0:	0013b000 	.word	0x0013b000
    1ed4:	004ea000 	.word	0x004ea000
    1ed8:	0003d090 	.word	0x0003d090
    1edc:	000f4240 	.word	0x000f4240
    1ee0:	00275000 	.word	0x00275000
    1ee4:	0075c000 	.word	0x0075c000
    1ee8:	003af000 	.word	0x003af000
    1eec:	013a9000 	.word	0x013a9000

00001ef0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    1ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    1ef4:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    1ef6:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    1ef8:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1efa:	2100      	movs	r1, #0
    1efc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    1f00:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    1f02:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
    1f06:	4680      	mov	r8, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    1f08:	aa01      	add	r2, sp, #4
    1f0a:	4648      	mov	r0, r9
    1f0c:	f002 f9b3 	bl	4276 <pinctrl_lookup_state>
	if (ret < 0) {
    1f10:	1e05      	subs	r5, r0, #0
    1f12:	db54      	blt.n	1fbe <uarte_instance_init.constprop.0+0xce>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    1f14:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    1f16:	f8d9 2000 	ldr.w	r2, [r9]
    1f1a:	7919      	ldrb	r1, [r3, #4]
    1f1c:	6818      	ldr	r0, [r3, #0]
    1f1e:	f000 facb 	bl	24b8 <pinctrl_configure_pins>
	if (err < 0) {
    1f22:	1e05      	subs	r5, r0, #0
    1f24:	db4b      	blt.n	1fbe <uarte_instance_init.constprop.0+0xce>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    1f26:	1d31      	adds	r1, r6, #4
    1f28:	4640      	mov	r0, r8
    1f2a:	f7ff ff23 	bl	1d74 <uarte_nrfx_configure>
	if (err) {
    1f2e:	4605      	mov	r5, r0
    1f30:	2800      	cmp	r0, #0
    1f32:	d144      	bne.n	1fbe <uarte_instance_init.constprop.0+0xce>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    1f34:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    1f36:	0799      	lsls	r1, r3, #30
    1f38:	d51a      	bpl.n	1f70 <uarte_instance_init.constprop.0+0x80>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    1f3a:	f106 0018 	add.w	r0, r6, #24
    1f3e:	f000 fffb 	bl	2f38 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    1f42:	4b22      	ldr	r3, [pc, #136]	; (1fcc <uarte_instance_init.constprop.0+0xdc>)
    1f44:	4298      	cmp	r0, r3
    1f46:	d13e      	bne.n	1fc6 <uarte_instance_init.constprop.0+0xd6>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    1f48:	7e33      	ldrb	r3, [r6, #24]
    1f4a:	00db      	lsls	r3, r3, #3
    1f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1f50:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    1f54:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    1f58:	f504 7190 	add.w	r1, r4, #288	; 0x120
    1f5c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    1f60:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    1f64:	7e32      	ldrb	r2, [r6, #24]
    1f66:	2301      	movs	r3, #1
    1f68:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    1f6a:	4a19      	ldr	r2, [pc, #100]	; (1fd0 <uarte_instance_init.constprop.0+0xe0>)
    1f6c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1f70:	2308      	movs	r3, #8
    1f72:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    1f76:	7a3b      	ldrb	r3, [r7, #8]
    1f78:	b953      	cbnz	r3, 1f90 <uarte_instance_init.constprop.0+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f7a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    1f7e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1f82:	6973      	ldr	r3, [r6, #20]
    1f84:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1f88:	2301      	movs	r3, #1
    1f8a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1f8e:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    1f94:	bf5c      	itt	pl
    1f96:	f44f 7380 	movpl.w	r3, #256	; 0x100
    1f9a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	06db      	lsls	r3, r3, #27
    1fa2:	bf44      	itt	mi
    1fa4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    1fa8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1fac:	6933      	ldr	r3, [r6, #16]
    1fae:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1fb2:	2300      	movs	r3, #0
    1fb4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1fb8:	2301      	movs	r3, #1
    1fba:	60a3      	str	r3, [r4, #8]
    1fbc:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    1fbe:	4628      	mov	r0, r5
    1fc0:	b003      	add	sp, #12
    1fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1fc6:	f06f 0504 	mvn.w	r5, #4
    1fca:	e7f8      	b.n	1fbe <uarte_instance_init.constprop.0+0xce>
    1fcc:	0bad0000 	.word	0x0bad0000
    1fd0:	4001f000 	.word	0x4001f000

00001fd4 <uarte_nrfx_poll_out>:
{
    1fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fd6:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    1fd8:	6907      	ldr	r7, [r0, #16]
{
    1fda:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fdc:	f002 fa94 	bl	4508 <k_is_in_isr>
    1fe0:	b9b0      	cbnz	r0, 2010 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    1fe2:	4b2e      	ldr	r3, [pc, #184]	; (209c <uarte_nrfx_poll_out+0xc8>)
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	b19b      	cbz	r3, 2010 <uarte_nrfx_poll_out+0x3c>
{
    1fe8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    1fea:	6860      	ldr	r0, [r4, #4]
    1fec:	f002 f8cf 	bl	418e <is_tx_ready.isra.0>
    1ff0:	bb00      	cbnz	r0, 2034 <uarte_nrfx_poll_out+0x60>
    1ff2:	2001      	movs	r0, #1
    1ff4:	f002 f957 	bl	42a6 <nrfx_busy_wait>
    1ff8:	3e01      	subs	r6, #1
    1ffa:	d1f6      	bne.n	1fea <uarte_nrfx_poll_out+0x16>
    1ffc:	2100      	movs	r1, #0
    1ffe:	2021      	movs	r0, #33	; 0x21
    2000:	f001 fc38 	bl	3874 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2004:	e7f0      	b.n	1fe8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2006:	f386 8811 	msr	BASEPRI, r6
    200a:	f3bf 8f6f 	isb	sy
}
    200e:	e7f5      	b.n	1ffc <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    2010:	f04f 0320 	mov.w	r3, #32
    2014:	f3ef 8611 	mrs	r6, BASEPRI
    2018:	f383 8812 	msr	BASEPRI_MAX, r3
    201c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2020:	6860      	ldr	r0, [r4, #4]
    2022:	4631      	mov	r1, r6
    2024:	f002 f8b3 	bl	418e <is_tx_ready.isra.0>
    2028:	b990      	cbnz	r0, 2050 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    202a:	f386 8811 	msr	BASEPRI, r6
    202e:	f3bf 8f6f 	isb	sy
}
    2032:	e7ed      	b.n	2010 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    2034:	f04f 0320 	mov.w	r3, #32
    2038:	f3ef 8611 	mrs	r6, BASEPRI
    203c:	f383 8812 	msr	BASEPRI_MAX, r3
    2040:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2044:	6860      	ldr	r0, [r4, #4]
    2046:	4631      	mov	r1, r6
    2048:	f002 f8a1 	bl	418e <is_tx_ready.isra.0>
    204c:	2800      	cmp	r0, #0
    204e:	d0da      	beq.n	2006 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    2050:	693b      	ldr	r3, [r7, #16]
    2052:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    2054:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2056:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    2058:	6813      	ldr	r3, [r2, #0]
    205a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    205e:	2001      	movs	r0, #1
    2060:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2064:	2000      	movs	r0, #0
    2066:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    206a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    206e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2072:	6852      	ldr	r2, [r2, #4]
    2074:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    2078:	06d2      	lsls	r2, r2, #27
    207a:	d508      	bpl.n	208e <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    207c:	6862      	ldr	r2, [r4, #4]
    207e:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2080:	2008      	movs	r0, #8
    2082:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2086:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    208a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    208e:	2201      	movs	r2, #1
    2090:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2092:	f381 8811 	msr	BASEPRI, r1
    2096:	f3bf 8f6f 	isb	sy
}
    209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    209c:	200007b1 	.word	0x200007b1

000020a0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    20a0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    20a2:	2301      	movs	r3, #1
    20a4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    20a6:	4a0e      	ldr	r2, [pc, #56]	; (20e0 <compare_int_lock+0x40>)
    20a8:	f3bf 8f5b 	dmb	ish
    20ac:	43dc      	mvns	r4, r3
    20ae:	e852 1f00 	ldrex	r1, [r2]
    20b2:	ea01 0504 	and.w	r5, r1, r4
    20b6:	e842 5600 	strex	r6, r5, [r2]
    20ba:	2e00      	cmp	r6, #0
    20bc:	d1f7      	bne.n	20ae <compare_int_lock+0xe>
    20be:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    20c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    20c6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    20c8:	4806      	ldr	r0, [pc, #24]	; (20e4 <compare_int_lock+0x44>)
    20ca:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    20ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20d2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    20d6:	420b      	tst	r3, r1
}
    20d8:	bf14      	ite	ne
    20da:	2001      	movne	r0, #1
    20dc:	2000      	moveq	r0, #0
    20de:	bd70      	pop	{r4, r5, r6, pc}
    20e0:	200002ac 	.word	0x200002ac
    20e4:	40011000 	.word	0x40011000

000020e8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    20e8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    20ea:	490e      	ldr	r1, [pc, #56]	; (2124 <sys_clock_timeout_handler+0x3c>)
    20ec:	e9d1 3400 	ldrd	r3, r4, [r1]
    20f0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    20f2:	18c3      	adds	r3, r0, r3
    20f4:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    20f8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    20fc:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2100:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2104:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2108:	d209      	bcs.n	211e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    210a:	4b07      	ldr	r3, [pc, #28]	; (2128 <sys_clock_timeout_handler+0x40>)
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	0a1a      	lsrs	r2, r3, #8
    2110:	061b      	lsls	r3, r3, #24
    2112:	199c      	adds	r4, r3, r6
    2114:	4b05      	ldr	r3, [pc, #20]	; (212c <sys_clock_timeout_handler+0x44>)
    2116:	f142 0500 	adc.w	r5, r2, #0
    211a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    211e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    2120:	f001 bd0e 	b.w	3b40 <sys_clock_announce>
    2124:	200000e0 	.word	0x200000e0
    2128:	200002b0 	.word	0x200002b0
    212c:	200000e8 	.word	0x200000e8

00002130 <compare_int_unlock>:
	if (key) {
    2130:	b311      	cbz	r1, 2178 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2132:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2136:	2301      	movs	r3, #1
    2138:	4a10      	ldr	r2, [pc, #64]	; (217c <compare_int_unlock+0x4c>)
    213a:	4083      	lsls	r3, r0
    213c:	e852 cf00 	ldrex	ip, [r2]
    2140:	ea4c 0c03 	orr.w	ip, ip, r3
    2144:	e842 c100 	strex	r1, ip, [r2]
    2148:	2900      	cmp	r1, #0
    214a:	d1f7      	bne.n	213c <compare_int_unlock+0xc>
    214c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2150:	4a0b      	ldr	r2, [pc, #44]	; (2180 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2156:	4083      	lsls	r3, r0
    2158:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    215c:	4b09      	ldr	r3, [pc, #36]	; (2184 <compare_int_unlock+0x54>)
    215e:	f3bf 8f5b 	dmb	ish
    2162:	681b      	ldr	r3, [r3, #0]
    2164:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2168:	40c3      	lsrs	r3, r0
    216a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    216c:	bf42      	ittt	mi
    216e:	4b06      	ldrmi	r3, [pc, #24]	; (2188 <compare_int_unlock+0x58>)
    2170:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2174:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2178:	4770      	bx	lr
    217a:	bf00      	nop
    217c:	200002ac 	.word	0x200002ac
    2180:	40011000 	.word	0x40011000
    2184:	200002a8 	.word	0x200002a8
    2188:	e000e100 	.word	0xe000e100

0000218c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    218c:	4b0d      	ldr	r3, [pc, #52]	; (21c4 <z_nrf_rtc_timer_read+0x38>)
    218e:	6818      	ldr	r0, [r3, #0]
    2190:	0a01      	lsrs	r1, r0, #8
    2192:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2194:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2198:	4b0b      	ldr	r3, [pc, #44]	; (21c8 <z_nrf_rtc_timer_read+0x3c>)
    219a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    219e:	1818      	adds	r0, r3, r0
    21a0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    21a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    21a8:	d20a      	bcs.n	21c0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    21aa:	4b08      	ldr	r3, [pc, #32]	; (21cc <z_nrf_rtc_timer_read+0x40>)
    21ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    21b0:	4290      	cmp	r0, r2
    21b2:	eb71 0303 	sbcs.w	r3, r1, r3
    21b6:	d203      	bcs.n	21c0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    21b8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    21bc:	f141 0100 	adc.w	r1, r1, #0
}
    21c0:	4770      	bx	lr
    21c2:	bf00      	nop
    21c4:	200002b0 	.word	0x200002b0
    21c8:	40011000 	.word	0x40011000
    21cc:	200000e8 	.word	0x200000e8

000021d0 <compare_set>:
{
    21d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21d4:	4616      	mov	r6, r2
    21d6:	461f      	mov	r7, r3
    21d8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    21da:	f7ff ff61 	bl	20a0 <compare_int_lock>
    21de:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    21e0:	f7ff ffd4 	bl	218c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    21e4:	42b0      	cmp	r0, r6
    21e6:	eb71 0307 	sbcs.w	r3, r1, r7
    21ea:	d251      	bcs.n	2290 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    21ec:	4b3a      	ldr	r3, [pc, #232]	; (22d8 <compare_set+0x108>)
    21ee:	1a30      	subs	r0, r6, r0
    21f0:	eb67 0101 	sbc.w	r1, r7, r1
    21f4:	4298      	cmp	r0, r3
    21f6:	f171 0100 	sbcs.w	r1, r1, #0
    21fa:	d26a      	bcs.n	22d2 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    21fc:	4b37      	ldr	r3, [pc, #220]	; (22dc <compare_set+0x10c>)
    21fe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2202:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2206:	429f      	cmp	r7, r3
    2208:	bf08      	it	eq
    220a:	4296      	cmpeq	r6, r2
    220c:	d04e      	beq.n	22ac <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    220e:	4934      	ldr	r1, [pc, #208]	; (22e0 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2210:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2214:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2218:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    221c:	00ad      	lsls	r5, r5, #2
    221e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    2222:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2224:	b2ad      	uxth	r5, r5
    2226:	f002 f81a 	bl	425e <event_clear>
	return absolute_time & COUNTER_MAX;
    222a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    222e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    2232:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2236:	4a2b      	ldr	r2, [pc, #172]	; (22e4 <compare_set+0x114>)
    2238:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    223a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    223e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2240:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    2244:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2246:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    224a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    224e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    2252:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2256:	f06f 0002 	mvn.w	r0, #2
    225a:	eba0 0008 	sub.w	r0, r0, r8
    225e:	4460      	add	r0, ip
    2260:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2264:	4290      	cmp	r0, r2
    2266:	d921      	bls.n	22ac <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2268:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    226a:	b160      	cbz	r0, 2286 <compare_set+0xb6>
     return p_reg->COUNTER;
    226c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2270:	eba8 000b 	sub.w	r0, r8, fp
    2274:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    2278:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    227c:	d916      	bls.n	22ac <compare_set+0xdc>
					event_clear(chan);
    227e:	4620      	mov	r0, r4
    2280:	f001 ffed 	bl	425e <event_clear>
    2284:	4a17      	ldr	r2, [pc, #92]	; (22e4 <compare_set+0x114>)
			cc_val = now + cc_inc;
    2286:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    228a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    228e:	e7d9      	b.n	2244 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    2290:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2292:	4a15      	ldr	r2, [pc, #84]	; (22e8 <compare_set+0x118>)
    2294:	f3bf 8f5b 	dmb	ish
    2298:	40a3      	lsls	r3, r4
    229a:	e852 0f00 	ldrex	r0, [r2]
    229e:	4318      	orrs	r0, r3
    22a0:	e842 0100 	strex	r1, r0, [r2]
    22a4:	2900      	cmp	r1, #0
    22a6:	d1f8      	bne.n	229a <compare_set+0xca>
    22a8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    22ac:	490b      	ldr	r1, [pc, #44]	; (22dc <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    22ae:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    22b0:	0123      	lsls	r3, r4, #4
    22b2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    22b6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    22ba:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    22bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    22be:	6053      	str	r3, [r2, #4]
	return ret;
    22c0:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    22c2:	4620      	mov	r0, r4
    22c4:	9900      	ldr	r1, [sp, #0]
    22c6:	f7ff ff33 	bl	2130 <compare_int_unlock>
}
    22ca:	4628      	mov	r0, r5
    22cc:	b003      	add	sp, #12
    22ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    22d2:	f06f 0515 	mvn.w	r5, #21
    22d6:	e7f4      	b.n	22c2 <compare_set+0xf2>
    22d8:	00800001 	.word	0x00800001
    22dc:	200000d0 	.word	0x200000d0
    22e0:	40011000 	.word	0x40011000
    22e4:	007ffffd 	.word	0x007ffffd
    22e8:	200002a8 	.word	0x200002a8

000022ec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    22ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    22ee:	4b19      	ldr	r3, [pc, #100]	; (2354 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    22f0:	4d19      	ldr	r5, [pc, #100]	; (2358 <sys_clock_driver_init+0x6c>)
    22f2:	2400      	movs	r4, #0
    22f4:	f04f 30ff 	mov.w	r0, #4294967295
    22f8:	f04f 31ff 	mov.w	r1, #4294967295
    22fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2300:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2308:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    230c:	4b13      	ldr	r3, [pc, #76]	; (235c <sys_clock_driver_init+0x70>)
    230e:	2602      	movs	r6, #2
    2310:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2314:	2101      	movs	r1, #1
    2316:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    231a:	2011      	movs	r0, #17
    231c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2320:	4622      	mov	r2, r4
    2322:	f7fe feaf 	bl	1084 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2326:	2011      	movs	r0, #17
    2328:	f7fe fe90 	bl	104c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    232c:	4a0c      	ldr	r2, [pc, #48]	; (2360 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    232e:	2301      	movs	r3, #1
    2330:	60ab      	str	r3, [r5, #8]
    2332:	602b      	str	r3, [r5, #0]
    2334:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2336:	4b0b      	ldr	r3, [pc, #44]	; (2364 <sys_clock_driver_init+0x78>)
    2338:	4a0b      	ldr	r2, [pc, #44]	; (2368 <sys_clock_driver_init+0x7c>)
    233a:	9300      	str	r3, [sp, #0]
    233c:	9401      	str	r4, [sp, #4]
    233e:	2300      	movs	r3, #0
    2340:	4620      	mov	r0, r4
    2342:	f7ff ff45 	bl	21d0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2346:	4630      	mov	r0, r6
    2348:	f7ff fb2e 	bl	19a8 <z_nrf_clock_control_lf_on>

	return 0;
}
    234c:	4620      	mov	r0, r4
    234e:	b002      	add	sp, #8
    2350:	bd70      	pop	{r4, r5, r6, pc}
    2352:	bf00      	nop
    2354:	200000d0 	.word	0x200000d0
    2358:	40011000 	.word	0x40011000
    235c:	e000e100 	.word	0xe000e100
    2360:	200002ac 	.word	0x200002ac
    2364:	000020e9 	.word	0x000020e9
    2368:	007fffff 	.word	0x007fffff

0000236c <rtc_nrf_isr>:
{
    236c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2370:	4c2f      	ldr	r4, [pc, #188]	; (2430 <rtc_nrf_isr+0xc4>)
    2372:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2376:	0799      	lsls	r1, r3, #30
    2378:	d50b      	bpl.n	2392 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    237a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    237e:	b143      	cbz	r3, 2392 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2380:	4a2c      	ldr	r2, [pc, #176]	; (2434 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2382:	2300      	movs	r3, #0
    2384:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2388:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    238c:	6813      	ldr	r3, [r2, #0]
    238e:	3301      	adds	r3, #1
    2390:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2392:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2396:	03da      	lsls	r2, r3, #15
    2398:	d52a      	bpl.n	23f0 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    239a:	f3bf 8f5b 	dmb	ish
    239e:	4b26      	ldr	r3, [pc, #152]	; (2438 <rtc_nrf_isr+0xcc>)
    23a0:	e853 2f00 	ldrex	r2, [r3]
    23a4:	f022 0101 	bic.w	r1, r2, #1
    23a8:	e843 1000 	strex	r0, r1, [r3]
    23ac:	2800      	cmp	r0, #0
    23ae:	d1f7      	bne.n	23a0 <rtc_nrf_isr+0x34>
    23b0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    23b4:	07d3      	lsls	r3, r2, #31
    23b6:	d402      	bmi.n	23be <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    23b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    23bc:	b1c3      	cbz	r3, 23f0 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    23be:	2500      	movs	r5, #0
    23c0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    23c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    23c8:	f7ff fee0 	bl	218c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    23cc:	f04f 0320 	mov.w	r3, #32
    23d0:	f3ef 8211 	mrs	r2, BASEPRI
    23d4:	f383 8812 	msr	BASEPRI_MAX, r3
    23d8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    23dc:	4b17      	ldr	r3, [pc, #92]	; (243c <rtc_nrf_isr+0xd0>)
    23de:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    23e2:	42b0      	cmp	r0, r6
    23e4:	41b9      	sbcs	r1, r7
    23e6:	d206      	bcs.n	23f6 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    23e8:	f382 8811 	msr	BASEPRI, r2
    23ec:	f3bf 8f6f 	isb	sy
}
    23f0:	b003      	add	sp, #12
    23f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    23f6:	f04f 38ff 	mov.w	r8, #4294967295
    23fa:	f04f 39ff 	mov.w	r9, #4294967295
    23fe:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    2402:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    2406:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    2408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    240c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2410:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2414:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2418:	f382 8811 	msr	BASEPRI, r2
    241c:	f3bf 8f6f 	isb	sy
		if (handler) {
    2420:	2900      	cmp	r1, #0
    2422:	d0e5      	beq.n	23f0 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    2424:	9000      	str	r0, [sp, #0]
    2426:	4632      	mov	r2, r6
    2428:	463b      	mov	r3, r7
    242a:	4628      	mov	r0, r5
    242c:	4788      	blx	r1
    242e:	e7df      	b.n	23f0 <rtc_nrf_isr+0x84>
    2430:	40011000 	.word	0x40011000
    2434:	200002b0 	.word	0x200002b0
    2438:	200002a8 	.word	0x200002a8
    243c:	200000d0 	.word	0x200000d0

00002440 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    2440:	1c43      	adds	r3, r0, #1
{
    2442:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2444:	d022      	beq.n	248c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2446:	2801      	cmp	r0, #1
    2448:	dd22      	ble.n	2490 <sys_clock_set_timeout+0x50>
    244a:	4a12      	ldr	r2, [pc, #72]	; (2494 <sys_clock_set_timeout+0x54>)
    244c:	4b12      	ldr	r3, [pc, #72]	; (2498 <sys_clock_set_timeout+0x58>)
    244e:	4290      	cmp	r0, r2
    2450:	bfd4      	ite	le
    2452:	4604      	movle	r4, r0
    2454:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2456:	f7ff fe99 	bl	218c <z_nrf_rtc_timer_read>
    245a:	4b10      	ldr	r3, [pc, #64]	; (249c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    245c:	490e      	ldr	r1, [pc, #56]	; (2498 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    245e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2462:	1a80      	subs	r0, r0, r2
		cyc = 0;
    2464:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2468:	bf28      	it	cs
    246a:	2400      	movcs	r4, #0
	cyc += unannounced;
    246c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    246e:	428c      	cmp	r4, r1
    2470:	bf28      	it	cs
    2472:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    2474:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2476:	490a      	ldr	r1, [pc, #40]	; (24a0 <sys_clock_set_timeout+0x60>)
    2478:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    247a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    247e:	9001      	str	r0, [sp, #4]
    2480:	f143 0300 	adc.w	r3, r3, #0
    2484:	f7ff fea4 	bl	21d0 <compare_set>
}
    2488:	b002      	add	sp, #8
    248a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    248c:	4c02      	ldr	r4, [pc, #8]	; (2498 <sys_clock_set_timeout+0x58>)
    248e:	e7e2      	b.n	2456 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2490:	2401      	movs	r4, #1
    2492:	e7e0      	b.n	2456 <sys_clock_set_timeout+0x16>
    2494:	007ffffe 	.word	0x007ffffe
    2498:	007fffff 	.word	0x007fffff
    249c:	200000e0 	.word	0x200000e0
    24a0:	000020e9 	.word	0x000020e9

000024a4 <sys_clock_elapsed>:
{
    24a4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    24a6:	f7ff fe71 	bl	218c <z_nrf_rtc_timer_read>
    24aa:	4b02      	ldr	r3, [pc, #8]	; (24b4 <sys_clock_elapsed+0x10>)
    24ac:	681b      	ldr	r3, [r3, #0]
}
    24ae:	1ac0      	subs	r0, r0, r3
    24b0:	bd08      	pop	{r3, pc}
    24b2:	bf00      	nop
    24b4:	200000e0 	.word	0x200000e0

000024b8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    24b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    24bc:	4e4d      	ldr	r6, [pc, #308]	; (25f4 <pinctrl_configure_pins+0x13c>)
    24be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    24c2:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    24c4:	4281      	cmp	r1, r0
    24c6:	d102      	bne.n	24ce <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    24c8:	2000      	movs	r0, #0
}
    24ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    24ce:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    24d0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    24d4:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    24d8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    24da:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    24de:	bf08      	it	eq
    24e0:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    24e4:	2d19      	cmp	r5, #25
    24e6:	f200 8081 	bhi.w	25ec <pinctrl_configure_pins+0x134>
    24ea:	e8df f005 	tbb	[pc, r5]
    24ee:	1f0d      	.short	0x1f0d
    24f0:	3e2a2724 	.word	0x3e2a2724
    24f4:	7f7f7f27 	.word	0x7f7f7f27
    24f8:	7f6b427f 	.word	0x7f6b427f
    24fc:	7f7f7f7f 	.word	0x7f7f7f7f
    2500:	7f7f7f7f 	.word	0x7f7f7f7f
    2504:	7c79766e 	.word	0x7c79766e
			NRF_PSEL_UART(reg, TXD) = pin;
    2508:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    250c:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    2510:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    2514:	f003 051f 	and.w	r5, r3, #31
        case 1: return NRF_P1;
    2518:	bf14      	ite	ne
    251a:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    251e:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2520:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    2524:	f8cc 5508 	str.w	r5, [ip, #1288]	; 0x508
    2528:	2501      	movs	r5, #1
    252a:	e002      	b.n	2532 <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RXD) = pin;
    252c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2530:	2500      	movs	r5, #0
    2532:	46ae      	mov	lr, r5
    2534:	e024      	b.n	2580 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
    2536:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    253a:	e7e7      	b.n	250c <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
    253c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    2540:	e7f6      	b.n	2530 <pinctrl_configure_pins+0x78>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2542:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2546:	2500      	movs	r5, #0
    return pin_number >> 5;
    2548:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    254c:	f1be 0f01 	cmp.w	lr, #1
    2550:	bf14      	ite	ne
    2552:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    2556:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    2558:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    255c:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    2560:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    2564:	f04f 0e01 	mov.w	lr, #1
    2568:	e00a      	b.n	2580 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    256a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    256e:	2501      	movs	r5, #1
    2570:	e7ea      	b.n	2548 <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2572:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2576:	2c00      	cmp	r4, #0
    2578:	d1da      	bne.n	2530 <pinctrl_configure_pins+0x78>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    257a:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    257c:	46ae      	mov	lr, r5
				drive = NRF_DRIVE_S0D1;
    257e:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2580:	f850 cb04 	ldr.w	ip, [r0], #4
    2584:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2588:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    258c:	ea4f 2404 	mov.w	r4, r4, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2590:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    2594:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    2598:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    259c:	bf1c      	itt	ne
    259e:	2501      	movne	r5, #1
    25a0:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    25a4:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
        case 0: return NRF_P0;
    25a8:	2b01      	cmp	r3, #1
    25aa:	bf0c      	ite	eq
    25ac:	4633      	moveq	r3, r6
    25ae:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    25b2:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
    25b6:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    25ba:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    25be:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    25c2:	e77f      	b.n	24c4 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    25c4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    25c8:	e7d5      	b.n	2576 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    25ca:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    25ce:	6805      	ldr	r5, [r0, #0]
    25d0:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    25d4:	2d00      	cmp	r5, #0
    25d6:	d0ca      	beq.n	256e <pinctrl_configure_pins+0xb6>
    25d8:	e798      	b.n	250c <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    25da:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    25de:	e7f6      	b.n	25ce <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    25e0:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    25e4:	e7f3      	b.n	25ce <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    25e6:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    25ea:	e7f0      	b.n	25ce <pinctrl_configure_pins+0x116>
		switch (NRF_GET_FUN(pins[i])) {
    25ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    25f0:	e76b      	b.n	24ca <pinctrl_configure_pins+0x12>
    25f2:	bf00      	nop
    25f4:	50000300 	.word	0x50000300

000025f8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    25f8:	4a02      	ldr	r2, [pc, #8]	; (2604 <nvmc_wait+0xc>)
    25fa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    25fe:	2b00      	cmp	r3, #0
    2600:	d0fb      	beq.n	25fa <nvmc_wait+0x2>
}
    2602:	4770      	bx	lr
    2604:	4001e000 	.word	0x4001e000

00002608 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2608:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    260a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    260e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2612:	2a0d      	cmp	r2, #13
    2614:	d155      	bne.n	26c2 <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    2616:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    261a:	2200      	movs	r2, #0
    261c:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2620:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2624:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2628:	4a48      	ldr	r2, [pc, #288]	; (274c <SystemInit+0x144>)
    262a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    262e:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2632:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    2636:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    263a:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    263e:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2642:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    2646:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    264a:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    264e:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2652:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    2656:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    265a:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    265e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2662:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    2666:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    266a:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    266e:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2672:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    2676:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    267a:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    267e:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2682:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    2686:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    268a:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    268e:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2692:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    2696:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    269a:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    269e:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    26a2:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    26a6:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    26aa:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    26ae:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    26b2:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    26b6:	07db      	lsls	r3, r3, #31
    26b8:	d509      	bpl.n	26ce <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    26ba:	f06f 0301 	mvn.w	r3, #1
    26be:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    26c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    26c6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    26ca:	2b0d      	cmp	r3, #13
    26cc:	d10c      	bne.n	26e8 <SystemInit+0xe0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    26ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            {
                switch(var2)
    26d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    26d6:	b13b      	cbz	r3, 26e8 <SystemInit+0xe0>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    26d8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    26dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    26e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26e4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    26e8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    26ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    26f0:	2a00      	cmp	r2, #0
    26f2:	db03      	blt.n	26fc <SystemInit+0xf4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    26f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    26f8:	2b00      	cmp	r3, #0
    26fa:	da22      	bge.n	2742 <SystemInit+0x13a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    26fc:	4914      	ldr	r1, [pc, #80]	; (2750 <SystemInit+0x148>)
    26fe:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2700:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2704:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2708:	2412      	movs	r4, #18
    nvmc_wait();
    270a:	f7ff ff75 	bl	25f8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    270e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2712:	f7ff ff71 	bl	25f8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2716:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    271a:	f7ff ff6d 	bl	25f8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    271e:	2300      	movs	r3, #0
    2720:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2724:	f7ff ff68 	bl	25f8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2728:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    272c:	4909      	ldr	r1, [pc, #36]	; (2754 <SystemInit+0x14c>)
    272e:	4b0a      	ldr	r3, [pc, #40]	; (2758 <SystemInit+0x150>)
    2730:	68ca      	ldr	r2, [r1, #12]
    2732:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2736:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2738:	60cb      	str	r3, [r1, #12]
    273a:	f3bf 8f4f 	dsb	sy
    __NOP();
    273e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2740:	e7fd      	b.n	273e <SystemInit+0x136>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2742:	4b06      	ldr	r3, [pc, #24]	; (275c <SystemInit+0x154>)
    2744:	4a06      	ldr	r2, [pc, #24]	; (2760 <SystemInit+0x158>)
    2746:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2748:	bd10      	pop	{r4, pc}
    274a:	bf00      	nop
    274c:	4000c000 	.word	0x4000c000
    2750:	4001e000 	.word	0x4001e000
    2754:	e000ed00 	.word	0xe000ed00
    2758:	05fa0004 	.word	0x05fa0004
    275c:	20000044 	.word	0x20000044
    2760:	03d09000 	.word	0x03d09000

00002764 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2764:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2766:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2768:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    276a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    276e:	fab2 f382 	clz	r3, r2
    2772:	f1c3 031f 	rsb	r3, r3, #31
    2776:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2778:	fa05 f403 	lsl.w	r4, r5, r3
    277c:	ea22 0404 	bic.w	r4, r2, r4
    2780:	e850 6f00 	ldrex	r6, [r0]
    2784:	4296      	cmp	r6, r2
    2786:	d104      	bne.n	2792 <nrfx_flag32_alloc+0x2e>
    2788:	e840 4c00 	strex	ip, r4, [r0]
    278c:	f1bc 0f00 	cmp.w	ip, #0
    2790:	d1f6      	bne.n	2780 <nrfx_flag32_alloc+0x1c>
    2792:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2796:	d1e7      	bne.n	2768 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2798:	4801      	ldr	r0, [pc, #4]	; (27a0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    279a:	700b      	strb	r3, [r1, #0]
}
    279c:	bd70      	pop	{r4, r5, r6, pc}
    279e:	bf00      	nop
    27a0:	0bad0000 	.word	0x0bad0000

000027a4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    27a4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    27a6:	6803      	ldr	r3, [r0, #0]
    27a8:	40cb      	lsrs	r3, r1
    27aa:	07db      	lsls	r3, r3, #31
    27ac:	d414      	bmi.n	27d8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    27ae:	2301      	movs	r3, #1
    27b0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    27b2:	6802      	ldr	r2, [r0, #0]
    27b4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    27b8:	ea43 0102 	orr.w	r1, r3, r2
    27bc:	e850 4f00 	ldrex	r4, [r0]
    27c0:	4294      	cmp	r4, r2
    27c2:	d104      	bne.n	27ce <nrfx_flag32_free+0x2a>
    27c4:	e840 1c00 	strex	ip, r1, [r0]
    27c8:	f1bc 0f00 	cmp.w	ip, #0
    27cc:	d1f6      	bne.n	27bc <nrfx_flag32_free+0x18>
    27ce:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    27d2:	d1ee      	bne.n	27b2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    27d4:	4801      	ldr	r0, [pc, #4]	; (27dc <nrfx_flag32_free+0x38>)
}
    27d6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    27d8:	4801      	ldr	r0, [pc, #4]	; (27e0 <nrfx_flag32_free+0x3c>)
    27da:	e7fc      	b.n	27d6 <nrfx_flag32_free+0x32>
    27dc:	0bad0000 	.word	0x0bad0000
    27e0:	0bad0004 	.word	0x0bad0004

000027e4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    27e4:	4b04      	ldr	r3, [pc, #16]	; (27f8 <nrfx_clock_init+0x14>)
    27e6:	791a      	ldrb	r2, [r3, #4]
    27e8:	b922      	cbnz	r2, 27f4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    27ea:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    27ec:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    27ee:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    27f0:	4802      	ldr	r0, [pc, #8]	; (27fc <nrfx_clock_init+0x18>)
    27f2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    27f4:	4802      	ldr	r0, [pc, #8]	; (2800 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    27f6:	4770      	bx	lr
    27f8:	200002b4 	.word	0x200002b4
    27fc:	0bad0000 	.word	0x0bad0000
    2800:	0bad000c 	.word	0x0bad000c

00002804 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2804:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    280a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    280e:	b152      	cbz	r2, 2826 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2810:	2000      	movs	r0, #0
    2812:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2816:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    281a:	2201      	movs	r2, #1
    281c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2820:	4b10      	ldr	r3, [pc, #64]	; (2864 <nrfx_power_clock_irq_handler+0x60>)
    2822:	681b      	ldr	r3, [r3, #0]
    2824:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    282a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    282e:	b172      	cbz	r2, 284e <nrfx_power_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2830:	2200      	movs	r2, #0
    2832:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2836:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    283a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    283e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2842:	0792      	lsls	r2, r2, #30
    2844:	d104      	bne.n	2850 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2846:	2201      	movs	r2, #1
    2848:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    284c:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    284e:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2850:	2202      	movs	r2, #2
    2852:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2856:	4b03      	ldr	r3, [pc, #12]	; (2864 <nrfx_power_clock_irq_handler+0x60>)
}
    2858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    285c:	681b      	ldr	r3, [r3, #0]
    285e:	2001      	movs	r0, #1
    2860:	4718      	bx	r3
    2862:	bf00      	nop
    2864:	200002b4 	.word	0x200002b4

00002868 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2868:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    286a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    286e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    2870:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    2872:	6002      	str	r2, [r0, #0]
}
    2874:	4802      	ldr	r0, [pc, #8]	; (2880 <nrf_gpio_pin_port_decode+0x18>)
    2876:	bf18      	it	ne
    2878:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    287c:	4770      	bx	lr
    287e:	bf00      	nop
    2880:	50000300 	.word	0x50000300

00002884 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2884:	4b03      	ldr	r3, [pc, #12]	; (2894 <pin_in_use_by_te+0x10>)
    2886:	3008      	adds	r0, #8
    2888:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    288c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2890:	4770      	bx	lr
    2892:	bf00      	nop
    2894:	20000048 	.word	0x20000048

00002898 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2898:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    289a:	f100 0308 	add.w	r3, r0, #8
    289e:	4c0c      	ldr	r4, [pc, #48]	; (28d0 <call_handler+0x38>)
    28a0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    28a4:	05da      	lsls	r2, r3, #23
{
    28a6:	4605      	mov	r5, r0
    28a8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    28aa:	d507      	bpl.n	28bc <call_handler+0x24>
    28ac:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    28b0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    28b4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    28b8:	6852      	ldr	r2, [r2, #4]
    28ba:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    28bc:	68a3      	ldr	r3, [r4, #8]
    28be:	b12b      	cbz	r3, 28cc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    28c0:	68e2      	ldr	r2, [r4, #12]
    28c2:	4631      	mov	r1, r6
    28c4:	4628      	mov	r0, r5
    }
}
    28c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    28ca:	4718      	bx	r3
}
    28cc:	bd70      	pop	{r4, r5, r6, pc}
    28ce:	bf00      	nop
    28d0:	20000048 	.word	0x20000048

000028d4 <release_handler>:
{
    28d4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    28d6:	4a12      	ldr	r2, [pc, #72]	; (2920 <release_handler+0x4c>)
    28d8:	3008      	adds	r0, #8
    28da:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    28de:	05d9      	lsls	r1, r3, #23
    28e0:	d51b      	bpl.n	291a <release_handler+0x46>
    28e2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    28e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    28ea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    28ee:	f102 040e 	add.w	r4, r2, #14
    28f2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    28f4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    28f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    28fc:	d003      	beq.n	2906 <release_handler+0x32>
    28fe:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2902:	4299      	cmp	r1, r3
    2904:	d009      	beq.n	291a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2906:	3001      	adds	r0, #1
    2908:	282a      	cmp	r0, #42	; 0x2a
    290a:	d1f3      	bne.n	28f4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    290c:	2300      	movs	r3, #0
    290e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2912:	4804      	ldr	r0, [pc, #16]	; (2924 <release_handler+0x50>)
}
    2914:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2916:	f7ff bf45 	b.w	27a4 <nrfx_flag32_free>
}
    291a:	bc10      	pop	{r4}
    291c:	4770      	bx	lr
    291e:	bf00      	nop
    2920:	20000048 	.word	0x20000048
    2924:	200000b0 	.word	0x200000b0

00002928 <pin_handler_trigger_uninit>:
{
    2928:	b538      	push	{r3, r4, r5, lr}
    292a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    292c:	f7ff ffaa 	bl	2884 <pin_in_use_by_te>
    2930:	4c09      	ldr	r4, [pc, #36]	; (2958 <pin_handler_trigger_uninit+0x30>)
    2932:	f102 0508 	add.w	r5, r2, #8
    2936:	b140      	cbz	r0, 294a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2938:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    293c:	4907      	ldr	r1, [pc, #28]	; (295c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    293e:	0b5b      	lsrs	r3, r3, #13
    2940:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2944:	2000      	movs	r0, #0
    2946:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    294a:	4610      	mov	r0, r2
    294c:	f7ff ffc2 	bl	28d4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2950:	2300      	movs	r3, #0
    2952:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2956:	bd38      	pop	{r3, r4, r5, pc}
    2958:	20000048 	.word	0x20000048
    295c:	40006000 	.word	0x40006000

00002960 <nrfx_gpiote_input_configure>:
{
    2960:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2964:	4604      	mov	r4, r0
    2966:	4616      	mov	r6, r2
    2968:	461d      	mov	r5, r3
    if (p_input_config)
    296a:	b301      	cbz	r1, 29ae <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    296c:	4f4e      	ldr	r7, [pc, #312]	; (2aa8 <nrfx_gpiote_input_configure+0x148>)
    296e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2972:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    2976:	079b      	lsls	r3, r3, #30
    2978:	d502      	bpl.n	2980 <nrfx_gpiote_input_configure+0x20>
    297a:	f7ff ff83 	bl	2884 <pin_in_use_by_te>
    297e:	bb10      	cbnz	r0, 29c6 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2980:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2982:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2986:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    298a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    298e:	f10d 020f 	add.w	r2, sp, #15
    2992:	460b      	mov	r3, r1
    2994:	4620      	mov	r0, r4
    2996:	f10d 010e 	add.w	r1, sp, #14
    299a:	f001 fd2b 	bl	43f4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    299e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    29a2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    29a6:	f043 0301 	orr.w	r3, r3, #1
    29aa:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    29ae:	b346      	cbz	r6, 2a02 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    29b0:	4b3d      	ldr	r3, [pc, #244]	; (2aa8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    29b2:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    29b6:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    29b8:	f104 0708 	add.w	r7, r4, #8
    29bc:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    29c0:	0788      	lsls	r0, r1, #30
    29c2:	d502      	bpl.n	29ca <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    29c4:	b1aa      	cbz	r2, 29f2 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    29c6:	4839      	ldr	r0, [pc, #228]	; (2aac <nrfx_gpiote_input_configure+0x14c>)
    29c8:	e01d      	b.n	2a06 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    29ca:	f021 0120 	bic.w	r1, r1, #32
    29ce:	04c9      	lsls	r1, r1, #19
    29d0:	0cc9      	lsrs	r1, r1, #19
    29d2:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    29d6:	b162      	cbz	r2, 29f2 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    29d8:	f1bc 0f03 	cmp.w	ip, #3
    29dc:	d8f3      	bhi.n	29c6 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    29de:	6872      	ldr	r2, [r6, #4]
    29e0:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    29e2:	f1bc 0f00 	cmp.w	ip, #0
    29e6:	d111      	bne.n	2a0c <nrfx_gpiote_input_configure+0xac>
    29e8:	4a31      	ldr	r2, [pc, #196]	; (2ab0 <nrfx_gpiote_input_configure+0x150>)
    29ea:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    29ee:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    29f2:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    29f6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    29fa:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    29fe:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    2a02:	bb45      	cbnz	r5, 2a56 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    2a04:	482b      	ldr	r0, [pc, #172]	; (2ab4 <nrfx_gpiote_input_configure+0x154>)
}
    2a06:	b004      	add	sp, #16
    2a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2a0c:	00b2      	lsls	r2, r6, #2
    2a0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2a12:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2a16:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    2a1a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2a1e:	f020 0003 	bic.w	r0, r0, #3
    2a22:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2a26:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2a2a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    2a2e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    2a32:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a36:	0220      	lsls	r0, r4, #8
    2a38:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2a3c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    2a40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    2a44:	ea40 000e 	orr.w	r0, r0, lr
    2a48:	f041 0120 	orr.w	r1, r1, #32
    2a4c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    2a50:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    2a54:	e7cd      	b.n	29f2 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2a56:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    2a5a:	4620      	mov	r0, r4
    2a5c:	f7ff ff3a 	bl	28d4 <release_handler>
    if (!handler)
    2a60:	2e00      	cmp	r6, #0
    2a62:	d0cf      	beq.n	2a04 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2a64:	4d10      	ldr	r5, [pc, #64]	; (2aa8 <nrfx_gpiote_input_configure+0x148>)
    2a66:	e9d5 2300 	ldrd	r2, r3, [r5]
    2a6a:	4296      	cmp	r6, r2
    2a6c:	d101      	bne.n	2a72 <nrfx_gpiote_input_configure+0x112>
    2a6e:	429f      	cmp	r7, r3
    2a70:	d018      	beq.n	2aa4 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2a72:	4811      	ldr	r0, [pc, #68]	; (2ab8 <nrfx_gpiote_input_configure+0x158>)
    2a74:	f10d 010f 	add.w	r1, sp, #15
    2a78:	f7ff fe74 	bl	2764 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2a7c:	4b0d      	ldr	r3, [pc, #52]	; (2ab4 <nrfx_gpiote_input_configure+0x154>)
    2a7e:	4298      	cmp	r0, r3
    2a80:	d1c1      	bne.n	2a06 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    2a82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    2a86:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    2a8a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2a8e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2a90:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2a92:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    2a96:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2a9e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    2aa2:	e7af      	b.n	2a04 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2aa4:	2200      	movs	r2, #0
    2aa6:	e7ee      	b.n	2a86 <nrfx_gpiote_input_configure+0x126>
    2aa8:	20000048 	.word	0x20000048
    2aac:	0bad0004 	.word	0x0bad0004
    2ab0:	40006000 	.word	0x40006000
    2ab4:	0bad0000 	.word	0x0bad0000
    2ab8:	200000b0 	.word	0x200000b0

00002abc <nrfx_gpiote_output_configure>:
{
    2abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2abe:	4604      	mov	r4, r0
    2ac0:	b085      	sub	sp, #20
    2ac2:	4615      	mov	r5, r2
    if (p_config)
    2ac4:	b319      	cbz	r1, 2b0e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ac6:	4e33      	ldr	r6, [pc, #204]	; (2b94 <nrfx_gpiote_output_configure+0xd8>)
    2ac8:	f100 0708 	add.w	r7, r0, #8
    2acc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2ad0:	0793      	lsls	r3, r2, #30
    2ad2:	d403      	bmi.n	2adc <nrfx_gpiote_output_configure+0x20>
    2ad4:	f7ff fed6 	bl	2884 <pin_in_use_by_te>
    2ad8:	2800      	cmp	r0, #0
    2ada:	d158      	bne.n	2b8e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2adc:	f012 0f1c 	tst.w	r2, #28
    2ae0:	d002      	beq.n	2ae8 <nrfx_gpiote_output_configure+0x2c>
    2ae2:	784b      	ldrb	r3, [r1, #1]
    2ae4:	2b01      	cmp	r3, #1
    2ae6:	d052      	beq.n	2b8e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2ae8:	2301      	movs	r3, #1
    2aea:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    2aee:	2300      	movs	r3, #0
    2af0:	e9cd 1300 	strd	r1, r3, [sp]
    2af4:	1c4a      	adds	r2, r1, #1
    2af6:	1c8b      	adds	r3, r1, #2
    2af8:	4620      	mov	r0, r4
    2afa:	f10d 010f 	add.w	r1, sp, #15
    2afe:	f001 fc79 	bl	43f4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2b02:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2b06:	f043 0303 	orr.w	r3, r3, #3
    2b0a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    2b0e:	b915      	cbnz	r5, 2b16 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    2b10:	4821      	ldr	r0, [pc, #132]	; (2b98 <nrfx_gpiote_output_configure+0xdc>)
}
    2b12:	b005      	add	sp, #20
    2b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2b16:	4e1f      	ldr	r6, [pc, #124]	; (2b94 <nrfx_gpiote_output_configure+0xd8>)
    2b18:	f104 0708 	add.w	r7, r4, #8
    2b1c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2b20:	0783      	lsls	r3, r0, #30
    2b22:	d534      	bpl.n	2b8e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    2b24:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    2b28:	4661      	mov	r1, ip
    2b2a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2b2c:	f020 0020 	bic.w	r0, r0, #32
    2b30:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2b34:	04c0      	lsls	r0, r0, #19
    2b36:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    2b3a:	0cc0      	lsrs	r0, r0, #19
    2b3c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2b40:	2300      	movs	r3, #0
    2b42:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2b46:	786a      	ldrb	r2, [r5, #1]
    2b48:	2a00      	cmp	r2, #0
    2b4a:	d0e1      	beq.n	2b10 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    2b4c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    2b50:	78ad      	ldrb	r5, [r5, #2]
    2b52:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    2b56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2b5a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2b5e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    2b62:	0223      	lsls	r3, r4, #8
    2b64:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2b68:	0412      	lsls	r2, r2, #16
    2b6a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2b6e:	ea43 030e 	orr.w	r3, r3, lr
    2b72:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2b74:	052a      	lsls	r2, r5, #20
    2b76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2b7a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2b7e:	4313      	orrs	r3, r2
    2b80:	f040 0020 	orr.w	r0, r0, #32
    2b84:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2b88:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2b8c:	e7c0      	b.n	2b10 <nrfx_gpiote_output_configure+0x54>
{
    2b8e:	4803      	ldr	r0, [pc, #12]	; (2b9c <nrfx_gpiote_output_configure+0xe0>)
    2b90:	e7bf      	b.n	2b12 <nrfx_gpiote_output_configure+0x56>
    2b92:	bf00      	nop
    2b94:	20000048 	.word	0x20000048
    2b98:	0bad0000 	.word	0x0bad0000
    2b9c:	0bad0004 	.word	0x0bad0004

00002ba0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2ba0:	4b01      	ldr	r3, [pc, #4]	; (2ba8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    2ba2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    2ba6:	4770      	bx	lr
    2ba8:	20000048 	.word	0x20000048

00002bac <nrfx_gpiote_channel_get>:
{
    2bac:	b508      	push	{r3, lr}
    2bae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2bb0:	f7ff fe68 	bl	2884 <pin_in_use_by_te>
    2bb4:	b138      	cbz	r0, 2bc6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2bb6:	4b05      	ldr	r3, [pc, #20]	; (2bcc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    2bb8:	4805      	ldr	r0, [pc, #20]	; (2bd0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2bba:	3208      	adds	r2, #8
    2bbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2bc0:	0b5b      	lsrs	r3, r3, #13
    2bc2:	700b      	strb	r3, [r1, #0]
}
    2bc4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2bc6:	4803      	ldr	r0, [pc, #12]	; (2bd4 <nrfx_gpiote_channel_get+0x28>)
    2bc8:	e7fc      	b.n	2bc4 <nrfx_gpiote_channel_get+0x18>
    2bca:	bf00      	nop
    2bcc:	20000048 	.word	0x20000048
    2bd0:	0bad0000 	.word	0x0bad0000
    2bd4:	0bad0004 	.word	0x0bad0004

00002bd8 <nrfx_gpiote_init>:
{
    2bd8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2bda:	4c0f      	ldr	r4, [pc, #60]	; (2c18 <nrfx_gpiote_init+0x40>)
    2bdc:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
    2be0:	b9bd      	cbnz	r5, 2c12 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2be2:	2254      	movs	r2, #84	; 0x54
    2be4:	4629      	mov	r1, r5
    2be6:	f104 0010 	add.w	r0, r4, #16
    2bea:	f001 f9a9 	bl	3f40 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2bee:	2006      	movs	r0, #6
    2bf0:	f7fe fa2c 	bl	104c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2bf4:	4b09      	ldr	r3, [pc, #36]	; (2c1c <nrfx_gpiote_init+0x44>)
    return err_code;
    2bf6:	480a      	ldr	r0, [pc, #40]	; (2c20 <nrfx_gpiote_init+0x48>)
    2bf8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    2bfc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2c00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2c04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2c08:	2301      	movs	r3, #1
    2c0a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2c0e:	66a3      	str	r3, [r4, #104]	; 0x68
}
    2c10:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    2c12:	4804      	ldr	r0, [pc, #16]	; (2c24 <nrfx_gpiote_init+0x4c>)
    2c14:	e7fc      	b.n	2c10 <nrfx_gpiote_init+0x38>
    2c16:	bf00      	nop
    2c18:	20000048 	.word	0x20000048
    2c1c:	40006000 	.word	0x40006000
    2c20:	0bad0000 	.word	0x0bad0000
    2c24:	0bad0005 	.word	0x0bad0005

00002c28 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2c28:	4b03      	ldr	r3, [pc, #12]	; (2c38 <nrfx_gpiote_is_init+0x10>)
    2c2a:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    2c2e:	3800      	subs	r0, #0
    2c30:	bf18      	it	ne
    2c32:	2001      	movne	r0, #1
    2c34:	4770      	bx	lr
    2c36:	bf00      	nop
    2c38:	20000048 	.word	0x20000048

00002c3c <nrfx_gpiote_channel_free>:
{
    2c3c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2c3e:	4801      	ldr	r0, [pc, #4]	; (2c44 <nrfx_gpiote_channel_free+0x8>)
    2c40:	f7ff bdb0 	b.w	27a4 <nrfx_flag32_free>
    2c44:	200000ac 	.word	0x200000ac

00002c48 <nrfx_gpiote_channel_alloc>:
{
    2c48:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2c4a:	4801      	ldr	r0, [pc, #4]	; (2c50 <nrfx_gpiote_channel_alloc+0x8>)
    2c4c:	f7ff bd8a 	b.w	2764 <nrfx_flag32_alloc>
    2c50:	200000ac 	.word	0x200000ac

00002c54 <nrfx_gpiote_trigger_enable>:
{
    2c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2c56:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2c58:	f7ff fe14 	bl	2884 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2c5c:	f104 0208 	add.w	r2, r4, #8
    2c60:	4b1e      	ldr	r3, [pc, #120]	; (2cdc <nrfx_gpiote_trigger_enable+0x88>)
    2c62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2c66:	b1e8      	cbz	r0, 2ca4 <nrfx_gpiote_trigger_enable+0x50>
    2c68:	f013 0502 	ands.w	r5, r3, #2
    2c6c:	d11a      	bne.n	2ca4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2c6e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    2c70:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    2c72:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    2c76:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    2c7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2c7e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c82:	6005      	str	r5, [r0, #0]
    2c84:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2c86:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2c8a:	f040 0001 	orr.w	r0, r0, #1
    2c8e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    2c92:	b129      	cbz	r1, 2ca0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    2c94:	2201      	movs	r2, #1
    2c96:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    2c9a:	4a11      	ldr	r2, [pc, #68]	; (2ce0 <nrfx_gpiote_trigger_enable+0x8c>)
    2c9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2ca0:	b003      	add	sp, #12
    2ca2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2ca4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2ca8:	2b04      	cmp	r3, #4
    2caa:	d012      	beq.n	2cd2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2cac:	2b05      	cmp	r3, #5
    2cae:	d012      	beq.n	2cd6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2cb0:	a801      	add	r0, sp, #4
    2cb2:	9401      	str	r4, [sp, #4]
    2cb4:	f7ff fdd8 	bl	2868 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2cb8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    2cba:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2cbe:	40d9      	lsrs	r1, r3
    2cc0:	f001 0101 	and.w	r1, r1, #1
    2cc4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2cc6:	4620      	mov	r0, r4
}
    2cc8:	b003      	add	sp, #12
    2cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2cce:	f001 bbda 	b.w	4486 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2cd2:	2103      	movs	r1, #3
    2cd4:	e7f7      	b.n	2cc6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2cd6:	2102      	movs	r1, #2
    2cd8:	e7f5      	b.n	2cc6 <nrfx_gpiote_trigger_enable+0x72>
    2cda:	bf00      	nop
    2cdc:	20000048 	.word	0x20000048
    2ce0:	40006000 	.word	0x40006000

00002ce4 <nrfx_gpiote_trigger_disable>:
{
    2ce4:	b508      	push	{r3, lr}
    2ce6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2ce8:	f7ff fdcc 	bl	2884 <pin_in_use_by_te>
    2cec:	b1c0      	cbz	r0, 2d20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2cee:	f102 0108 	add.w	r1, r2, #8
    2cf2:	4b0e      	ldr	r3, [pc, #56]	; (2d2c <nrfx_gpiote_trigger_disable+0x48>)
    2cf4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2cf8:	0799      	lsls	r1, r3, #30
    2cfa:	d411      	bmi.n	2d20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2cfc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2cfe:	2201      	movs	r2, #1
    2d00:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    2d02:	009b      	lsls	r3, r3, #2
    2d04:	490a      	ldr	r1, [pc, #40]	; (2d30 <nrfx_gpiote_trigger_disable+0x4c>)
    2d06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2d0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2d0e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2d12:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2d16:	f022 0203 	bic.w	r2, r2, #3
    2d1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    2d1e:	bd08      	pop	{r3, pc}
    2d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2d24:	2100      	movs	r1, #0
    2d26:	4610      	mov	r0, r2
    2d28:	f001 bbad 	b.w	4486 <nrf_gpio_cfg_sense_set>
    2d2c:	20000048 	.word	0x20000048
    2d30:	40006000 	.word	0x40006000

00002d34 <nrfx_gpiote_pin_uninit>:
{
    2d34:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2d36:	4b0e      	ldr	r3, [pc, #56]	; (2d70 <nrfx_gpiote_pin_uninit+0x3c>)
    2d38:	f100 0208 	add.w	r2, r0, #8
{
    2d3c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2d3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    2d42:	07db      	lsls	r3, r3, #31
    2d44:	d511      	bpl.n	2d6a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    2d46:	f7ff ffcd 	bl	2ce4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    2d4a:	4620      	mov	r0, r4
    2d4c:	f7ff fdec 	bl	2928 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d50:	a801      	add	r0, sp, #4
    2d52:	9401      	str	r4, [sp, #4]
    2d54:	f7ff fd88 	bl	2868 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2d58:	9b01      	ldr	r3, [sp, #4]
    2d5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2d5e:	2202      	movs	r2, #2
    2d60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    2d64:	4803      	ldr	r0, [pc, #12]	; (2d74 <nrfx_gpiote_pin_uninit+0x40>)
}
    2d66:	b002      	add	sp, #8
    2d68:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2d6a:	4803      	ldr	r0, [pc, #12]	; (2d78 <nrfx_gpiote_pin_uninit+0x44>)
    2d6c:	e7fb      	b.n	2d66 <nrfx_gpiote_pin_uninit+0x32>
    2d6e:	bf00      	nop
    2d70:	20000048 	.word	0x20000048
    2d74:	0bad0000 	.word	0x0bad0000
    2d78:	0bad0004 	.word	0x0bad0004

00002d7c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    2d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d80:	4b68      	ldr	r3, [pc, #416]	; (2f24 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    2d82:	4869      	ldr	r0, [pc, #420]	; (2f28 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2d84:	4969      	ldr	r1, [pc, #420]	; (2f2c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    2d86:	2600      	movs	r6, #0
{
    2d88:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    2d8a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d8c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d8e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    2d90:	b135      	cbz	r5, 2da0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    2d92:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    2d96:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d98:	bf1e      	ittt	ne
    2d9a:	601c      	strne	r4, [r3, #0]
    2d9c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    2d9e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2da0:	3304      	adds	r3, #4
    2da2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    2da4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2da8:	d1f1      	bne.n	2d8e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2daa:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2f28 <nrfx_gpiote_irq_handler+0x1ac>
    2dae:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    2db2:	2b00      	cmp	r3, #0
    2db4:	f000 8099 	beq.w	2eea <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    2db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2dbc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    2dc0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2dc2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    2dc6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    2dca:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    2dcc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2dd0:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    2dd4:	f10d 0a10 	add.w	sl, sp, #16
    2dd8:	ea4f 1348 	mov.w	r3, r8, lsl #5
    2ddc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    2dde:	f04f 0b01 	mov.w	fp, #1
    2de2:	e049      	b.n	2e78 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    2de4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2de6:	4a52      	ldr	r2, [pc, #328]	; (2f30 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    2de8:	fa94 f4a4 	rbit	r4, r4
    2dec:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    2df0:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    2df2:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2df4:	f104 0308 	add.w	r3, r4, #8
    2df8:	9403      	str	r4, [sp, #12]
    2dfa:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    2dfe:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    2e02:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    2e06:	fa0b f202 	lsl.w	r2, fp, r2
    2e0a:	ea23 0302 	bic.w	r3, r3, r2
    2e0e:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e12:	a803      	add	r0, sp, #12
    2e14:	f7ff fd28 	bl	2868 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2e18:	9b03      	ldr	r3, [sp, #12]
    2e1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2e1e:	08b9      	lsrs	r1, r7, #2
    2e20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    2e24:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    2e28:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2e2a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    2e2c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    2e30:	d52c      	bpl.n	2e8c <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    2e32:	4620      	mov	r0, r4
    2e34:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2e36:	b2dd      	uxtb	r5, r3
    2e38:	f7ff fd2e 	bl	2898 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e3c:	a803      	add	r0, sp, #12
    2e3e:	9403      	str	r4, [sp, #12]
    2e40:	f7ff fd12 	bl	2868 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2e44:	9b03      	ldr	r3, [sp, #12]
    2e46:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2e4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    2e4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    2e52:	429d      	cmp	r5, r3
    2e54:	d107      	bne.n	2e66 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2e56:	2100      	movs	r1, #0
    2e58:	4620      	mov	r0, r4
    2e5a:	f001 fb14 	bl	4486 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    2e5e:	4629      	mov	r1, r5
    2e60:	4620      	mov	r0, r4
    2e62:	f001 fb10 	bl	4486 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e66:	a803      	add	r0, sp, #12
    2e68:	9403      	str	r4, [sp, #12]
    2e6a:	f7ff fcfd 	bl	2868 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    2e6e:	9b03      	ldr	r3, [sp, #12]
    2e70:	fa0b f303 	lsl.w	r3, fp, r3
    2e74:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    2e78:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    2e7c:	2c00      	cmp	r4, #0
    2e7e:	d1b1      	bne.n	2de4 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2e80:	f1b8 0f00 	cmp.w	r8, #0
    2e84:	d11d      	bne.n	2ec2 <nrfx_gpiote_irq_handler+0x146>
    2e86:	f04f 0801 	mov.w	r8, #1
    2e8a:	e7a5      	b.n	2dd8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2e8c:	2b02      	cmp	r3, #2
    2e8e:	d10c      	bne.n	2eaa <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    2e90:	2103      	movs	r1, #3
    2e92:	4620      	mov	r0, r4
    2e94:	f001 faf7 	bl	4486 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2e98:	f005 0305 	and.w	r3, r5, #5
    2e9c:	2b01      	cmp	r3, #1
    2e9e:	d1e2      	bne.n	2e66 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    2ea0:	4639      	mov	r1, r7
    2ea2:	4620      	mov	r0, r4
    2ea4:	f7ff fcf8 	bl	2898 <call_handler>
    2ea8:	e7dd      	b.n	2e66 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    2eaa:	2102      	movs	r1, #2
    2eac:	4620      	mov	r0, r4
    2eae:	9301      	str	r3, [sp, #4]
    2eb0:	f001 fae9 	bl	4486 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2eb4:	2d03      	cmp	r5, #3
    2eb6:	d0f3      	beq.n	2ea0 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	2b03      	cmp	r3, #3
    2ebc:	d1d3      	bne.n	2e66 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    2ebe:	2d02      	cmp	r5, #2
    2ec0:	e7ed      	b.n	2e9e <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    2ec2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ec6:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    2eca:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    2ece:	4919      	ldr	r1, [pc, #100]	; (2f34 <nrfx_gpiote_irq_handler+0x1b8>)
    2ed0:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    2ed4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2ed6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    2eda:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    2ede:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    2ee0:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    2ee2:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    2ee6:	f47f af73 	bne.w	2dd0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    2eea:	2401      	movs	r4, #1
    while (mask)
    2eec:	b916      	cbnz	r6, 2ef4 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    2eee:	b007      	add	sp, #28
    2ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    2ef4:	fa96 f3a6 	rbit	r3, r6
    2ef8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    2efc:	fa04 f203 	lsl.w	r2, r4, r3
    2f00:	009b      	lsls	r3, r3, #2
    2f02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f06:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2f0a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2f0e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    2f12:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    2f16:	f3c0 2005 	ubfx	r0, r0, #8, #6
    2f1a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    2f1e:	f7ff fcbb 	bl	2898 <call_handler>
    2f22:	e7e3      	b.n	2eec <nrfx_gpiote_irq_handler+0x170>
    2f24:	40006100 	.word	0x40006100
    2f28:	40006000 	.word	0x40006000
    2f2c:	40006120 	.word	0x40006120
    2f30:	20000048 	.word	0x20000048
    2f34:	50000300 	.word	0x50000300

00002f38 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    2f38:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    2f3a:	4801      	ldr	r0, [pc, #4]	; (2f40 <nrfx_ppi_channel_alloc+0x8>)
    2f3c:	f7ff bc12 	b.w	2764 <nrfx_flag32_alloc>
    2f40:	200000b8 	.word	0x200000b8

00002f44 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    2f44:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2f46:	4c14      	ldr	r4, [pc, #80]	; (2f98 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2f48:	4a14      	ldr	r2, [pc, #80]	; (2f9c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    2f4a:	4915      	ldr	r1, [pc, #84]	; (2fa0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2f4c:	2303      	movs	r3, #3
    2f4e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2f50:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2f52:	4b14      	ldr	r3, [pc, #80]	; (2fa4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    2f54:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2f56:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    2f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2f5c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    2f5e:	2300      	movs	r3, #0
    2f60:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2f62:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2f64:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    2f66:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    2f68:	4a0f      	ldr	r2, [pc, #60]	; (2fa8 <_DoInit+0x64>)
    2f6a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    2f6c:	2210      	movs	r2, #16
    2f6e:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    2f70:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    2f72:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2f74:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2f76:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    2f78:	f000 ffbd 	bl	3ef6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2f7c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    2f80:	490a      	ldr	r1, [pc, #40]	; (2fac <_DoInit+0x68>)
    2f82:	4620      	mov	r0, r4
    2f84:	f000 ffb7 	bl	3ef6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2f88:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    2f8c:	2320      	movs	r3, #32
    2f8e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2f90:	f3bf 8f5f 	dmb	sy
}
    2f94:	bd10      	pop	{r4, pc}
    2f96:	bf00      	nop
    2f98:	200002bc 	.word	0x200002bc
    2f9c:	00004be7 	.word	0x00004be7
    2fa0:	00004bf0 	.word	0x00004bf0
    2fa4:	200003b1 	.word	0x200003b1
    2fa8:	200003a1 	.word	0x200003a1
    2fac:	00004bf4 	.word	0x00004bf4

00002fb0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2fb0:	4b0f      	ldr	r3, [pc, #60]	; (2ff0 <z_sys_init_run_level+0x40>)
{
    2fb2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2fb4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2fb8:	3001      	adds	r0, #1
    2fba:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2fbe:	42a6      	cmp	r6, r4
    2fc0:	d800      	bhi.n	2fc4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2fc2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2fc4:	e9d4 3500 	ldrd	r3, r5, [r4]
    2fc8:	4628      	mov	r0, r5
    2fca:	4798      	blx	r3
		if (dev != NULL) {
    2fcc:	b16d      	cbz	r5, 2fea <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    2fce:	b138      	cbz	r0, 2fe0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2fd0:	2800      	cmp	r0, #0
    2fd2:	bfb8      	it	lt
    2fd4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    2fd6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    2fd8:	28ff      	cmp	r0, #255	; 0xff
    2fda:	bfa8      	it	ge
    2fdc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    2fde:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2fe0:	68ea      	ldr	r2, [r5, #12]
    2fe2:	7853      	ldrb	r3, [r2, #1]
    2fe4:	f043 0301 	orr.w	r3, r3, #1
    2fe8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2fea:	3408      	adds	r4, #8
    2fec:	e7e7      	b.n	2fbe <z_sys_init_run_level+0xe>
    2fee:	bf00      	nop
    2ff0:	00004ae8 	.word	0x00004ae8

00002ff4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2ff4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2ff6:	4b0a      	ldr	r3, [pc, #40]	; (3020 <bg_thread_main+0x2c>)
    2ff8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    2ffa:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    2ffc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    2ffe:	f7ff ffd7 	bl	2fb0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3002:	f000 fe11 	bl	3c28 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3006:	2004      	movs	r0, #4
    3008:	f7ff ffd2 	bl	2fb0 <z_sys_init_run_level>

	z_init_static_threads();
    300c:	f000 f8f0 	bl	31f0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    3010:	f7fd f9e0 	bl	3d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3014:	4a03      	ldr	r2, [pc, #12]	; (3024 <bg_thread_main+0x30>)
    3016:	7b13      	ldrb	r3, [r2, #12]
    3018:	f023 0301 	bic.w	r3, r3, #1
    301c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    301e:	bd08      	pop	{r3, pc}
    3020:	200007b1 	.word	0x200007b1
    3024:	20000170 	.word	0x20000170

00003028 <z_bss_zero>:
{
    3028:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    302a:	4803      	ldr	r0, [pc, #12]	; (3038 <z_bss_zero+0x10>)
    302c:	4a03      	ldr	r2, [pc, #12]	; (303c <z_bss_zero+0x14>)
    302e:	2100      	movs	r1, #0
    3030:	1a12      	subs	r2, r2, r0
    3032:	f001 fa65 	bl	4500 <z_early_memset>
}
    3036:	bd08      	pop	{r3, pc}
    3038:	200000d0 	.word	0x200000d0
    303c:	200007b4 	.word	0x200007b4

00003040 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3040:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    3042:	2300      	movs	r3, #0
{
    3044:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3046:	2201      	movs	r2, #1
    3048:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    304c:	4e13      	ldr	r6, [pc, #76]	; (309c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    304e:	4d14      	ldr	r5, [pc, #80]	; (30a0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3050:	9301      	str	r3, [sp, #4]
    3052:	220f      	movs	r2, #15
    3054:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3058:	4912      	ldr	r1, [pc, #72]	; (30a4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    305a:	2318      	movs	r3, #24
    305c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3060:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3064:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    3066:	f44f 70c0 	mov.w	r0, #384	; 0x180
    306a:	fb00 1104 	mla	r1, r0, r4, r1
    306e:	4b0e      	ldr	r3, [pc, #56]	; (30a8 <z_init_cpu+0x68>)
    3070:	9500      	str	r5, [sp, #0]
    3072:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3076:	4630      	mov	r0, r6
    3078:	f000 f888 	bl	318c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    307c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    307e:	4a0b      	ldr	r2, [pc, #44]	; (30ac <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3080:	60ee      	str	r6, [r5, #12]
    3082:	f023 0304 	bic.w	r3, r3, #4
    3086:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3088:	f44f 6304 	mov.w	r3, #2112	; 0x840
    308c:	fb04 3303 	mla	r3, r4, r3, r3
    3090:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    3092:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    3094:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3096:	b006      	add	sp, #24
    3098:	bd70      	pop	{r4, r5, r6, pc}
    309a:	bf00      	nop
    309c:	200000f0 	.word	0x200000f0
    30a0:	20000364 	.word	0x20000364
    30a4:	20001000 	.word	0x20001000
    30a8:	000032a9 	.word	0x000032a9
    30ac:	200007c0 	.word	0x200007c0

000030b0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    30b0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    30b2:	2000      	movs	r0, #0
{
    30b4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    30b6:	f7ff ff7b 	bl	2fb0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    30ba:	4b2d      	ldr	r3, [pc, #180]	; (3170 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    30bc:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    30c0:	4d2c      	ldr	r5, [pc, #176]	; (3174 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    30c2:	4e2d      	ldr	r6, [pc, #180]	; (3178 <z_cstart+0xc8>)
    30c4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30c6:	4f2d      	ldr	r7, [pc, #180]	; (317c <z_cstart+0xcc>)
    30c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    30cc:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30ce:	2400      	movs	r4, #0
    30d0:	23e0      	movs	r3, #224	; 0xe0
    30d2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    30d6:	77ec      	strb	r4, [r5, #31]
    30d8:	762c      	strb	r4, [r5, #24]
    30da:	766c      	strb	r4, [r5, #25]
    30dc:	76ac      	strb	r4, [r5, #26]
    30de:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    30e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    30e8:	626b      	str	r3, [r5, #36]	; 0x24
    30ea:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    30ee:	f7fe f9bf 	bl	1470 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    30f2:	f7fd ff8b 	bl	100c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    30f6:	f04f 33ff 	mov.w	r3, #4294967295
    30fa:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    30fc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    30fe:	f7fe faf1 	bl	16e4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3102:	f7fe fa57 	bl	15b4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3106:	f240 1301 	movw	r3, #257	; 0x101
    310a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    310e:	ab06      	add	r3, sp, #24
    3110:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3112:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    3116:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3118:	f001 f9cb 	bl	44b2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    311c:	2001      	movs	r0, #1
    311e:	f7ff ff47 	bl	2fb0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3122:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    3124:	4d16      	ldr	r5, [pc, #88]	; (3180 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3126:	f7ff ff43 	bl	2fb0 <z_sys_init_run_level>
	z_sched_init();
    312a:	f000 fb15 	bl	3758 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    312e:	4b15      	ldr	r3, [pc, #84]	; (3184 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    3130:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3132:	9305      	str	r3, [sp, #20]
    3134:	2301      	movs	r3, #1
    3136:	4914      	ldr	r1, [pc, #80]	; (3188 <z_cstart+0xd8>)
    3138:	9400      	str	r4, [sp, #0]
    313a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    313e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3142:	463b      	mov	r3, r7
    3144:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3148:	4628      	mov	r0, r5
    314a:	f000 f81f 	bl	318c <z_setup_new_thread>
    314e:	7b6a      	ldrb	r2, [r5, #13]
    3150:	4606      	mov	r6, r0
    3152:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3156:	4628      	mov	r0, r5
    3158:	736a      	strb	r2, [r5, #13]
    315a:	f001 fa3e 	bl	45da <z_ready_thread>
	z_init_cpu(0);
    315e:	4620      	mov	r0, r4
    3160:	f7ff ff6e 	bl	3040 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3164:	463a      	mov	r2, r7
    3166:	4631      	mov	r1, r6
    3168:	4628      	mov	r0, r5
    316a:	f7fe f849 	bl	1200 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    316e:	bf00      	nop
    3170:	20001000 	.word	0x20001000
    3174:	e000ed00 	.word	0xe000ed00
    3178:	20000364 	.word	0x20000364
    317c:	00002ff5 	.word	0x00002ff5
    3180:	20000170 	.word	0x20000170
    3184:	00004bfb 	.word	0x00004bfb
    3188:	20001180 	.word	0x20001180

0000318c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    318c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3190:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3192:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3194:	2604      	movs	r6, #4
    3196:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3198:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    319a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    319c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    31a0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    31a2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    31a4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    31a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    31aa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    31ac:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    31b0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    31b2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    31b6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    31ba:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    31bc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    31be:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    31c0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    31c4:	9202      	str	r2, [sp, #8]
    31c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    31c8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    31ca:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    31cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31ce:	9200      	str	r2, [sp, #0]
    31d0:	4642      	mov	r2, r8
{
    31d2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    31d4:	f7fd ffe2 	bl	119c <arch_new_thread>
	if (!_current) {
    31d8:	4b04      	ldr	r3, [pc, #16]	; (31ec <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    31da:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    31dc:	689b      	ldr	r3, [r3, #8]
    31de:	b103      	cbz	r3, 31e2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    31e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    31e2:	6723      	str	r3, [r4, #112]	; 0x70
}
    31e4:	4640      	mov	r0, r8
    31e6:	b004      	add	sp, #16
    31e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31ec:	20000364 	.word	0x20000364

000031f0 <z_init_static_threads>:
{
    31f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    31f4:	4c29      	ldr	r4, [pc, #164]	; (329c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    31f6:	4d2a      	ldr	r5, [pc, #168]	; (32a0 <z_init_static_threads+0xb0>)
{
    31f8:	b087      	sub	sp, #28
    31fa:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    31fc:	42ae      	cmp	r6, r5
    31fe:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3202:	d30f      	bcc.n	3224 <z_init_static_threads+0x34>
	k_sched_lock();
    3204:	f000 fa78 	bl	36f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3208:	4c24      	ldr	r4, [pc, #144]	; (329c <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    320a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 32a4 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    320e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3212:	f240 37e7 	movw	r7, #999	; 0x3e7
    3216:	42ac      	cmp	r4, r5
    3218:	d320      	bcc.n	325c <z_init_static_threads+0x6c>
}
    321a:	b007      	add	sp, #28
    321c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3220:	f000 ba7e 	b.w	3720 <k_sched_unlock>
		z_setup_new_thread(
    3224:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3228:	9305      	str	r3, [sp, #20]
    322a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    322e:	9304      	str	r3, [sp, #16]
    3230:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3234:	9303      	str	r3, [sp, #12]
    3236:	f854 3c18 	ldr.w	r3, [r4, #-24]
    323a:	9302      	str	r3, [sp, #8]
    323c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3240:	9301      	str	r3, [sp, #4]
    3242:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3246:	9300      	str	r3, [sp, #0]
    3248:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    324c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3250:	f7ff ff9c 	bl	318c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3254:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3258:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    325a:	e7ce      	b.n	31fa <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    325c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    325e:	1c5a      	adds	r2, r3, #1
    3260:	d00d      	beq.n	327e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3262:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3266:	2100      	movs	r1, #0
    3268:	4638      	mov	r0, r7
    326a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    326e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3272:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3276:	d104      	bne.n	3282 <z_init_static_threads+0x92>
	z_sched_start(thread);
    3278:	4640      	mov	r0, r8
    327a:	f000 f9ed 	bl	3658 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    327e:	3430      	adds	r4, #48	; 0x30
    3280:	e7c9      	b.n	3216 <z_init_static_threads+0x26>
    3282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3286:	2300      	movs	r3, #0
    3288:	f7fc ff3a 	bl	100 <__aeabi_uldivmod>
    328c:	4602      	mov	r2, r0
    328e:	460b      	mov	r3, r1
    3290:	f108 0018 	add.w	r0, r8, #24
    3294:	4649      	mov	r1, r9
    3296:	f000 fbd5 	bl	3a44 <z_add_timeout>
    329a:	e7f0      	b.n	327e <z_init_static_threads+0x8e>
    329c:	0000493c 	.word	0x0000493c
    32a0:	0000493c 	.word	0x0000493c
    32a4:	00004547 	.word	0x00004547

000032a8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    32a8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    32aa:	4c0b      	ldr	r4, [pc, #44]	; (32d8 <idle+0x30>)
	return !z_sys_post_kernel;
    32ac:	4d0b      	ldr	r5, [pc, #44]	; (32dc <idle+0x34>)
	__asm__ volatile(
    32ae:	f04f 0220 	mov.w	r2, #32
    32b2:	f3ef 8311 	mrs	r3, BASEPRI
    32b6:	f382 8812 	msr	BASEPRI_MAX, r2
    32ba:	f3bf 8f6f 	isb	sy
    32be:	f001 f9e4 	bl	468a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    32c2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    32c4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    32c6:	b913      	cbnz	r3, 32ce <idle+0x26>
	arch_cpu_idle();
    32c8:	f7fd fea6 	bl	1018 <arch_cpu_idle>
}
    32cc:	e7ef      	b.n	32ae <idle+0x6>
    32ce:	f7fd fdcf 	bl	e70 <pm_system_suspend>
    32d2:	2800      	cmp	r0, #0
    32d4:	d1eb      	bne.n	32ae <idle+0x6>
    32d6:	e7f7      	b.n	32c8 <idle+0x20>
    32d8:	20000364 	.word	0x20000364
    32dc:	200007b1 	.word	0x200007b1

000032e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    32e0:	b538      	push	{r3, r4, r5, lr}
    32e2:	4604      	mov	r4, r0
    32e4:	f04f 0320 	mov.w	r3, #32
    32e8:	f3ef 8511 	mrs	r5, BASEPRI
    32ec:	f383 8812 	msr	BASEPRI_MAX, r3
    32f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    32f4:	f001 f981 	bl	45fa <z_unpend_first_thread>

	if (thread != NULL) {
    32f8:	b148      	cbz	r0, 330e <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    32fa:	2200      	movs	r2, #0
    32fc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    32fe:	f001 f96c 	bl	45da <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3302:	4629      	mov	r1, r5
    3304:	4805      	ldr	r0, [pc, #20]	; (331c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    330a:	f000 b993 	b.w	3634 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    330e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3312:	429a      	cmp	r2, r3
    3314:	bf18      	it	ne
    3316:	3301      	addne	r3, #1
    3318:	60a3      	str	r3, [r4, #8]
}
    331a:	e7f2      	b.n	3302 <z_impl_k_sem_give+0x22>
    331c:	200007b2 	.word	0x200007b2

00003320 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3320:	b513      	push	{r0, r1, r4, lr}
    3322:	f04f 0420 	mov.w	r4, #32
    3326:	f3ef 8111 	mrs	r1, BASEPRI
    332a:	f384 8812 	msr	BASEPRI_MAX, r4
    332e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3332:	6884      	ldr	r4, [r0, #8]
    3334:	b144      	cbz	r4, 3348 <z_impl_k_sem_take+0x28>
		sem->count--;
    3336:	3c01      	subs	r4, #1
    3338:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    333a:	f381 8811 	msr	BASEPRI, r1
    333e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3342:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3344:	b002      	add	sp, #8
    3346:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3348:	ea52 0403 	orrs.w	r4, r2, r3
    334c:	d106      	bne.n	335c <z_impl_k_sem_take+0x3c>
    334e:	f381 8811 	msr	BASEPRI, r1
    3352:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3356:	f06f 000f 	mvn.w	r0, #15
    335a:	e7f3      	b.n	3344 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    335c:	e9cd 2300 	strd	r2, r3, [sp]
    3360:	4602      	mov	r2, r0
    3362:	4802      	ldr	r0, [pc, #8]	; (336c <z_impl_k_sem_take+0x4c>)
    3364:	f000 f948 	bl	35f8 <z_pend_curr>
	return ret;
    3368:	e7ec      	b.n	3344 <z_impl_k_sem_take+0x24>
    336a:	bf00      	nop
    336c:	200007b2 	.word	0x200007b2

00003370 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3370:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3372:	4d07      	ldr	r5, [pc, #28]	; (3390 <z_reset_time_slice+0x20>)
    3374:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3376:	b154      	cbz	r4, 338e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3378:	f7ff f894 	bl	24a4 <sys_clock_elapsed>
    337c:	4b05      	ldr	r3, [pc, #20]	; (3394 <z_reset_time_slice+0x24>)
    337e:	4404      	add	r4, r0
    3380:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3382:	6828      	ldr	r0, [r5, #0]
    3384:	2100      	movs	r1, #0
	}
}
    3386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    338a:	f001 b98e 	b.w	46aa <z_set_timeout_expiry>
}
    338e:	bd38      	pop	{r3, r4, r5, pc}
    3390:	20000394 	.word	0x20000394
    3394:	20000364 	.word	0x20000364

00003398 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3398:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    339a:	4d0d      	ldr	r5, [pc, #52]	; (33d0 <update_cache+0x38>)
    339c:	462b      	mov	r3, r5
    339e:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    33a2:	429c      	cmp	r4, r3
    33a4:	d000      	beq.n	33a8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    33a6:	b904      	cbnz	r4, 33aa <update_cache+0x12>
    33a8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    33aa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    33ac:	b938      	cbnz	r0, 33be <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    33ae:	7b5a      	ldrb	r2, [r3, #13]
    33b0:	06d2      	lsls	r2, r2, #27
    33b2:	d104      	bne.n	33be <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    33b4:	69a2      	ldr	r2, [r4, #24]
    33b6:	b912      	cbnz	r2, 33be <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    33b8:	89da      	ldrh	r2, [r3, #14]
    33ba:	2a7f      	cmp	r2, #127	; 0x7f
    33bc:	d805      	bhi.n	33ca <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    33be:	429c      	cmp	r4, r3
    33c0:	d002      	beq.n	33c8 <update_cache+0x30>
			z_reset_time_slice(thread);
    33c2:	4620      	mov	r0, r4
    33c4:	f7ff ffd4 	bl	3370 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    33c8:	4623      	mov	r3, r4
    33ca:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    33cc:	bd38      	pop	{r3, r4, r5, pc}
    33ce:	bf00      	nop
    33d0:	20000364 	.word	0x20000364

000033d4 <move_thread_to_end_of_prio_q>:
{
    33d4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    33d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    33da:	7b43      	ldrb	r3, [r0, #13]
    33dc:	2a00      	cmp	r2, #0
{
    33de:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    33e0:	da04      	bge.n	33ec <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    33e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    33e6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    33e8:	f001 f89b 	bl	4522 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    33ec:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    33ee:	4a15      	ldr	r2, [pc, #84]	; (3444 <move_thread_to_end_of_prio_q+0x70>)
    33f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33f4:	4610      	mov	r0, r2
    33f6:	734b      	strb	r3, [r1, #13]
    33f8:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    33fc:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    33fe:	4283      	cmp	r3, r0
    3400:	bf08      	it	eq
    3402:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3404:	b923      	cbnz	r3, 3410 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3406:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    340a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    340c:	6251      	str	r1, [r2, #36]	; 0x24
}
    340e:	e00c      	b.n	342a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    3410:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3414:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3418:	42b5      	cmp	r5, r6
    341a:	d00e      	beq.n	343a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    341c:	42ae      	cmp	r6, r5
    341e:	dd0c      	ble.n	343a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3420:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3422:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3426:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3428:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    342a:	6890      	ldr	r0, [r2, #8]
    342c:	1a43      	subs	r3, r0, r1
    342e:	4258      	negs	r0, r3
}
    3430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3434:	4158      	adcs	r0, r3
    3436:	f7ff bfaf 	b.w	3398 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    343a:	429c      	cmp	r4, r3
    343c:	d0e3      	beq.n	3406 <move_thread_to_end_of_prio_q+0x32>
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	e7e0      	b.n	3404 <move_thread_to_end_of_prio_q+0x30>
    3442:	bf00      	nop
    3444:	20000364 	.word	0x20000364

00003448 <ready_thread>:
{
    3448:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    344a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    344e:	7b42      	ldrb	r2, [r0, #13]
    3450:	2b00      	cmp	r3, #0
    3452:	db29      	blt.n	34a8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3454:	06d3      	lsls	r3, r2, #27
    3456:	d127      	bne.n	34a8 <ready_thread+0x60>
	return node->next != NULL;
    3458:	6983      	ldr	r3, [r0, #24]
    345a:	bb2b      	cbnz	r3, 34a8 <ready_thread+0x60>
	return list->head == list;
    345c:	4913      	ldr	r1, [pc, #76]	; (34ac <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    345e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3462:	7342      	strb	r2, [r0, #13]
    3464:	460a      	mov	r2, r1
    3466:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    346a:	4294      	cmp	r4, r2
    346c:	bf18      	it	ne
    346e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3470:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3472:	b923      	cbnz	r3, 347e <ready_thread+0x36>
	node->prev = tail;
    3474:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3478:	6020      	str	r0, [r4, #0]
	list->tail = node;
    347a:	6248      	str	r0, [r1, #36]	; 0x24
}
    347c:	e00c      	b.n	3498 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    347e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3482:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3486:	42b5      	cmp	r5, r6
    3488:	d00a      	beq.n	34a0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    348a:	42ae      	cmp	r6, r5
    348c:	dd08      	ble.n	34a0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    348e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3490:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3494:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3496:	6058      	str	r0, [r3, #4]
}
    3498:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    349a:	2000      	movs	r0, #0
    349c:	f7ff bf7c 	b.w	3398 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    34a0:	42a3      	cmp	r3, r4
    34a2:	d0e7      	beq.n	3474 <ready_thread+0x2c>
    34a4:	681b      	ldr	r3, [r3, #0]
    34a6:	e7e4      	b.n	3472 <ready_thread+0x2a>
}
    34a8:	bc70      	pop	{r4, r5, r6}
    34aa:	4770      	bx	lr
    34ac:	20000364 	.word	0x20000364

000034b0 <unready_thread>:
{
    34b0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    34b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    34b6:	7b43      	ldrb	r3, [r0, #13]
    34b8:	2a00      	cmp	r2, #0
{
    34ba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    34bc:	da04      	bge.n	34c8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    34be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    34c2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    34c4:	f001 f82d 	bl	4522 <sys_dlist_remove>
	update_cache(thread == _current);
    34c8:	4b04      	ldr	r3, [pc, #16]	; (34dc <unready_thread+0x2c>)
    34ca:	6898      	ldr	r0, [r3, #8]
    34cc:	1a43      	subs	r3, r0, r1
    34ce:	4258      	negs	r0, r3
    34d0:	4158      	adcs	r0, r3
}
    34d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    34d6:	f7ff bf5f 	b.w	3398 <update_cache>
    34da:	bf00      	nop
    34dc:	20000364 	.word	0x20000364

000034e0 <pend_locked>:
{
    34e0:	b570      	push	{r4, r5, r6, lr}
    34e2:	4615      	mov	r5, r2
    34e4:	461c      	mov	r4, r3
    34e6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    34e8:	f001 f84f 	bl	458a <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    34ec:	f1b4 3fff 	cmp.w	r4, #4294967295
    34f0:	bf08      	it	eq
    34f2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    34f6:	d008      	beq.n	350a <pend_locked+0x2a>
    34f8:	462a      	mov	r2, r5
    34fa:	4623      	mov	r3, r4
    34fc:	f106 0018 	add.w	r0, r6, #24
    3500:	4902      	ldr	r1, [pc, #8]	; (350c <pend_locked+0x2c>)
}
    3502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3506:	f000 ba9d 	b.w	3a44 <z_add_timeout>
    350a:	bd70      	pop	{r4, r5, r6, pc}
    350c:	00004547 	.word	0x00004547

00003510 <k_sched_time_slice_set>:
{
    3510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3512:	4604      	mov	r4, r0
    3514:	460d      	mov	r5, r1
	__asm__ volatile(
    3516:	f04f 0320 	mov.w	r3, #32
    351a:	f3ef 8711 	mrs	r7, BASEPRI
    351e:	f383 8812 	msr	BASEPRI_MAX, r3
    3522:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    3526:	2600      	movs	r6, #0
    3528:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    352c:	f240 30e7 	movw	r0, #999	; 0x3e7
    3530:	4631      	mov	r1, r6
    3532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3536:	2300      	movs	r3, #0
    3538:	fbe4 010c 	umlal	r0, r1, r4, ip
    353c:	f7fc fde0 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3540:	42b4      	cmp	r4, r6
    3542:	dd02      	ble.n	354a <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    3544:	2802      	cmp	r0, #2
    3546:	bfb8      	it	lt
    3548:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    354a:	4a07      	ldr	r2, [pc, #28]	; (3568 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    354c:	4b07      	ldr	r3, [pc, #28]	; (356c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    354e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    3550:	4a07      	ldr	r2, [pc, #28]	; (3570 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    3552:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    3554:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    3556:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    3558:	f7ff ff0a 	bl	3370 <z_reset_time_slice>
	__asm__ volatile(
    355c:	f387 8811 	msr	BASEPRI, r7
    3560:	f3bf 8f6f 	isb	sy
}
    3564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3566:	bf00      	nop
    3568:	20000394 	.word	0x20000394
    356c:	20000364 	.word	0x20000364
    3570:	20000390 	.word	0x20000390

00003574 <z_time_slice>:
{
    3574:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3576:	f04f 0320 	mov.w	r3, #32
    357a:	f3ef 8511 	mrs	r5, BASEPRI
    357e:	f383 8812 	msr	BASEPRI_MAX, r3
    3582:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3586:	4b17      	ldr	r3, [pc, #92]	; (35e4 <z_time_slice+0x70>)
    3588:	4a17      	ldr	r2, [pc, #92]	; (35e8 <z_time_slice+0x74>)
    358a:	689c      	ldr	r4, [r3, #8]
    358c:	6811      	ldr	r1, [r2, #0]
    358e:	428c      	cmp	r4, r1
    3590:	d107      	bne.n	35a2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    3592:	4620      	mov	r0, r4
    3594:	f7ff feec 	bl	3370 <z_reset_time_slice>
	__asm__ volatile(
    3598:	f385 8811 	msr	BASEPRI, r5
    359c:	f3bf 8f6f 	isb	sy
}
    35a0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    35a2:	2100      	movs	r1, #0
    35a4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    35a6:	4a11      	ldr	r2, [pc, #68]	; (35ec <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    35a8:	6812      	ldr	r2, [r2, #0]
    35aa:	b1c2      	cbz	r2, 35de <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    35ac:	89e2      	ldrh	r2, [r4, #14]
    35ae:	2a7f      	cmp	r2, #127	; 0x7f
    35b0:	d815      	bhi.n	35de <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    35b2:	7b62      	ldrb	r2, [r4, #13]
    35b4:	06d2      	lsls	r2, r2, #27
    35b6:	d112      	bne.n	35de <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    35b8:	4a0d      	ldr	r2, [pc, #52]	; (35f0 <z_time_slice+0x7c>)
    35ba:	f994 100e 	ldrsb.w	r1, [r4, #14]
    35be:	6812      	ldr	r2, [r2, #0]
    35c0:	4291      	cmp	r1, r2
    35c2:	db0c      	blt.n	35de <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    35c4:	4a0b      	ldr	r2, [pc, #44]	; (35f4 <z_time_slice+0x80>)
    35c6:	4294      	cmp	r4, r2
    35c8:	d009      	beq.n	35de <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    35ca:	691a      	ldr	r2, [r3, #16]
    35cc:	4282      	cmp	r2, r0
    35ce:	dc03      	bgt.n	35d8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    35d0:	4620      	mov	r0, r4
    35d2:	f7ff feff 	bl	33d4 <move_thread_to_end_of_prio_q>
    35d6:	e7dc      	b.n	3592 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    35d8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    35da:	611a      	str	r2, [r3, #16]
    35dc:	e7dc      	b.n	3598 <z_time_slice+0x24>
    35de:	2200      	movs	r2, #0
    35e0:	e7fb      	b.n	35da <z_time_slice+0x66>
    35e2:	bf00      	nop
    35e4:	20000364 	.word	0x20000364
    35e8:	2000038c 	.word	0x2000038c
    35ec:	20000394 	.word	0x20000394
    35f0:	20000390 	.word	0x20000390
    35f4:	200000f0 	.word	0x200000f0

000035f8 <z_pend_curr>:
{
    35f8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    35fa:	480c      	ldr	r0, [pc, #48]	; (362c <z_pend_curr+0x34>)
    35fc:	4d0c      	ldr	r5, [pc, #48]	; (3630 <z_pend_curr+0x38>)
    35fe:	6886      	ldr	r6, [r0, #8]
    3600:	602e      	str	r6, [r5, #0]
{
    3602:	460c      	mov	r4, r1
    3604:	4611      	mov	r1, r2
    3606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    360a:	f04f 0620 	mov.w	r6, #32
    360e:	f3ef 8511 	mrs	r5, BASEPRI
    3612:	f386 8812 	msr	BASEPRI_MAX, r6
    3616:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    361a:	6880      	ldr	r0, [r0, #8]
    361c:	f7ff ff60 	bl	34e0 <pend_locked>
	ret = arch_swap(key);
    3620:	4620      	mov	r0, r4
}
    3622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3626:	f7fd bd65 	b.w	10f4 <arch_swap>
    362a:	bf00      	nop
    362c:	20000364 	.word	0x20000364
    3630:	2000038c 	.word	0x2000038c

00003634 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3634:	b949      	cbnz	r1, 364a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3636:	f3ef 8005 	mrs	r0, IPSR
    363a:	b930      	cbnz	r0, 364a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    363c:	4b05      	ldr	r3, [pc, #20]	; (3654 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    363e:	69da      	ldr	r2, [r3, #28]
    3640:	689b      	ldr	r3, [r3, #8]
    3642:	429a      	cmp	r2, r3
    3644:	d001      	beq.n	364a <z_reschedule+0x16>
    3646:	f7fd bd55 	b.w	10f4 <arch_swap>
	__asm__ volatile(
    364a:	f381 8811 	msr	BASEPRI, r1
    364e:	f3bf 8f6f 	isb	sy
}
    3652:	4770      	bx	lr
    3654:	20000364 	.word	0x20000364

00003658 <z_sched_start>:
{
    3658:	b510      	push	{r4, lr}
	__asm__ volatile(
    365a:	f04f 0220 	mov.w	r2, #32
    365e:	f3ef 8411 	mrs	r4, BASEPRI
    3662:	f382 8812 	msr	BASEPRI_MAX, r2
    3666:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    366a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    366c:	0751      	lsls	r1, r2, #29
    366e:	d404      	bmi.n	367a <z_sched_start+0x22>
	__asm__ volatile(
    3670:	f384 8811 	msr	BASEPRI, r4
    3674:	f3bf 8f6f 	isb	sy
}
    3678:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    367a:	f022 0204 	bic.w	r2, r2, #4
    367e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3680:	f7ff fee2 	bl	3448 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3684:	4621      	mov	r1, r4
    3686:	4802      	ldr	r0, [pc, #8]	; (3690 <z_sched_start+0x38>)
}
    3688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    368c:	f7ff bfd2 	b.w	3634 <z_reschedule>
    3690:	200007b2 	.word	0x200007b2

00003694 <z_impl_k_thread_suspend>:
{
    3694:	b570      	push	{r4, r5, r6, lr}
    3696:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3698:	3018      	adds	r0, #24
    369a:	f000 ffe0 	bl	465e <z_abort_timeout>
	__asm__ volatile(
    369e:	f04f 0320 	mov.w	r3, #32
    36a2:	f3ef 8611 	mrs	r6, BASEPRI
    36a6:	f383 8812 	msr	BASEPRI_MAX, r3
    36aa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    36ae:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    36b2:	7b63      	ldrb	r3, [r4, #13]
    36b4:	2a00      	cmp	r2, #0
    36b6:	da05      	bge.n	36c4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    36b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    36bc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    36be:	4620      	mov	r0, r4
    36c0:	f000 ff2f 	bl	4522 <sys_dlist_remove>
		update_cache(thread == _current);
    36c4:	4d0b      	ldr	r5, [pc, #44]	; (36f4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    36c6:	7b63      	ldrb	r3, [r4, #13]
    36c8:	68a8      	ldr	r0, [r5, #8]
    36ca:	f043 0310 	orr.w	r3, r3, #16
    36ce:	7363      	strb	r3, [r4, #13]
    36d0:	1b03      	subs	r3, r0, r4
    36d2:	4258      	negs	r0, r3
    36d4:	4158      	adcs	r0, r3
    36d6:	f7ff fe5f 	bl	3398 <update_cache>
	__asm__ volatile(
    36da:	f386 8811 	msr	BASEPRI, r6
    36de:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    36e2:	68ab      	ldr	r3, [r5, #8]
    36e4:	42a3      	cmp	r3, r4
    36e6:	d103      	bne.n	36f0 <z_impl_k_thread_suspend+0x5c>
}
    36e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    36ec:	f000 bfad 	b.w	464a <z_reschedule_unlocked>
}
    36f0:	bd70      	pop	{r4, r5, r6, pc}
    36f2:	bf00      	nop
    36f4:	20000364 	.word	0x20000364

000036f8 <k_sched_lock>:
	__asm__ volatile(
    36f8:	f04f 0320 	mov.w	r3, #32
    36fc:	f3ef 8111 	mrs	r1, BASEPRI
    3700:	f383 8812 	msr	BASEPRI_MAX, r3
    3704:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3708:	4b04      	ldr	r3, [pc, #16]	; (371c <k_sched_lock+0x24>)
    370a:	689a      	ldr	r2, [r3, #8]
    370c:	7bd3      	ldrb	r3, [r2, #15]
    370e:	3b01      	subs	r3, #1
    3710:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3712:	f381 8811 	msr	BASEPRI, r1
    3716:	f3bf 8f6f 	isb	sy
}
    371a:	4770      	bx	lr
    371c:	20000364 	.word	0x20000364

00003720 <k_sched_unlock>:
{
    3720:	b510      	push	{r4, lr}
	__asm__ volatile(
    3722:	f04f 0320 	mov.w	r3, #32
    3726:	f3ef 8411 	mrs	r4, BASEPRI
    372a:	f383 8812 	msr	BASEPRI_MAX, r3
    372e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3732:	4b08      	ldr	r3, [pc, #32]	; (3754 <k_sched_unlock+0x34>)
    3734:	689a      	ldr	r2, [r3, #8]
    3736:	7bd3      	ldrb	r3, [r2, #15]
    3738:	3301      	adds	r3, #1
    373a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    373c:	2000      	movs	r0, #0
    373e:	f7ff fe2b 	bl	3398 <update_cache>
	__asm__ volatile(
    3742:	f384 8811 	msr	BASEPRI, r4
    3746:	f3bf 8f6f 	isb	sy
}
    374a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    374e:	f000 bf7c 	b.w	464a <z_reschedule_unlocked>
    3752:	bf00      	nop
    3754:	20000364 	.word	0x20000364

00003758 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3758:	4b04      	ldr	r3, [pc, #16]	; (376c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    375a:	2100      	movs	r1, #0
    375c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3760:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3764:	4608      	mov	r0, r1
    3766:	f7ff bed3 	b.w	3510 <k_sched_time_slice_set>
    376a:	bf00      	nop
    376c:	20000364 	.word	0x20000364

00003770 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    3770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3772:	f04f 0320 	mov.w	r3, #32
    3776:	f3ef 8511 	mrs	r5, BASEPRI
    377a:	f383 8812 	msr	BASEPRI_MAX, r3
    377e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3782:	4919      	ldr	r1, [pc, #100]	; (37e8 <z_impl_k_yield+0x78>)
    3784:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3786:	7b43      	ldrb	r3, [r0, #13]
    3788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    378c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    378e:	f000 fec8 	bl	4522 <sys_dlist_remove>
	}
	queue_thread(_current);
    3792:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3794:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3796:	4608      	mov	r0, r1
    3798:	f062 027f 	orn	r2, r2, #127	; 0x7f
    379c:	735a      	strb	r2, [r3, #13]
    379e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    37a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37a4:	4282      	cmp	r2, r0
    37a6:	bf08      	it	eq
    37a8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    37aa:	b922      	cbnz	r2, 37b6 <z_impl_k_yield+0x46>
	node->prev = tail;
    37ac:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    37b0:	6023      	str	r3, [r4, #0]
	list->tail = node;
    37b2:	624b      	str	r3, [r1, #36]	; 0x24
}
    37b4:	e00c      	b.n	37d0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    37b6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    37ba:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    37be:	42be      	cmp	r6, r7
    37c0:	d00e      	beq.n	37e0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    37c2:	42b7      	cmp	r7, r6
    37c4:	dd0c      	ble.n	37e0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    37c6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    37c8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    37cc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    37ce:	6053      	str	r3, [r2, #4]
	update_cache(1);
    37d0:	2001      	movs	r0, #1
    37d2:	f7ff fde1 	bl	3398 <update_cache>
    37d6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    37d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    37dc:	f7fd bc8a 	b.w	10f4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    37e0:	42a2      	cmp	r2, r4
    37e2:	d0e3      	beq.n	37ac <z_impl_k_yield+0x3c>
    37e4:	6812      	ldr	r2, [r2, #0]
    37e6:	e7e0      	b.n	37aa <z_impl_k_yield+0x3a>
    37e8:	20000364 	.word	0x20000364

000037ec <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    37ec:	ea50 0301 	orrs.w	r3, r0, r1
{
    37f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37f4:	4605      	mov	r5, r0
    37f6:	460e      	mov	r6, r1
	if (ticks == 0) {
    37f8:	d103      	bne.n	3802 <z_tick_sleep+0x16>
	z_impl_k_yield();
    37fa:	f7ff ffb9 	bl	3770 <z_impl_k_yield>
		k_yield();
		return 0;
    37fe:	2000      	movs	r0, #0
    3800:	e02c      	b.n	385c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    3802:	1c83      	adds	r3, r0, #2
    3804:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    3808:	db2a      	blt.n	3860 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    380a:	f000 ff6a 	bl	46e2 <sys_clock_tick_get_32>
    380e:	182c      	adds	r4, r5, r0
    3810:	f04f 0320 	mov.w	r3, #32
    3814:	f3ef 8811 	mrs	r8, BASEPRI
    3818:	f383 8812 	msr	BASEPRI_MAX, r3
    381c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3820:	4f11      	ldr	r7, [pc, #68]	; (3868 <z_tick_sleep+0x7c>)
    3822:	4b12      	ldr	r3, [pc, #72]	; (386c <z_tick_sleep+0x80>)
    3824:	68b8      	ldr	r0, [r7, #8]
    3826:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3828:	f7ff fe42 	bl	34b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    382c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    382e:	4910      	ldr	r1, [pc, #64]	; (3870 <z_tick_sleep+0x84>)
    3830:	462a      	mov	r2, r5
    3832:	4633      	mov	r3, r6
    3834:	3018      	adds	r0, #24
    3836:	f000 f905 	bl	3a44 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    383a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    383c:	7b53      	ldrb	r3, [r2, #13]
    383e:	f043 0310 	orr.w	r3, r3, #16
    3842:	7353      	strb	r3, [r2, #13]
    3844:	4640      	mov	r0, r8
    3846:	f7fd fc55 	bl	10f4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    384a:	f000 ff4a 	bl	46e2 <sys_clock_tick_get_32>
    384e:	1a20      	subs	r0, r4, r0
    3850:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3854:	2801      	cmp	r0, #1
    3856:	f173 0300 	sbcs.w	r3, r3, #0
    385a:	dbd0      	blt.n	37fe <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3860:	f06f 0401 	mvn.w	r4, #1
    3864:	1a24      	subs	r4, r4, r0
    3866:	e7d3      	b.n	3810 <z_tick_sleep+0x24>
    3868:	20000364 	.word	0x20000364
    386c:	2000038c 	.word	0x2000038c
    3870:	00004547 	.word	0x00004547

00003874 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3874:	f1b1 3fff 	cmp.w	r1, #4294967295
    3878:	bf08      	it	eq
    387a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    387e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3880:	d106      	bne.n	3890 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3882:	4b08      	ldr	r3, [pc, #32]	; (38a4 <z_impl_k_sleep+0x30>)
    3884:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3886:	f7ff ff05 	bl	3694 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    388a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    388e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3890:	f7ff ffac 	bl	37ec <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    3894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3898:	fb80 0303 	smull	r0, r3, r0, r3
    389c:	0bc0      	lsrs	r0, r0, #15
    389e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    38a2:	e7f4      	b.n	388e <z_impl_k_sleep+0x1a>
    38a4:	20000364 	.word	0x20000364

000038a8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    38a8:	4b01      	ldr	r3, [pc, #4]	; (38b0 <z_impl_z_current_get+0x8>)
    38aa:	6898      	ldr	r0, [r3, #8]
    38ac:	4770      	bx	lr
    38ae:	bf00      	nop
    38b0:	20000364 	.word	0x20000364

000038b4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    38b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b8:	4604      	mov	r4, r0
    38ba:	f04f 0320 	mov.w	r3, #32
    38be:	f3ef 8611 	mrs	r6, BASEPRI
    38c2:	f383 8812 	msr	BASEPRI_MAX, r3
    38c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    38ca:	7b03      	ldrb	r3, [r0, #12]
    38cc:	07d9      	lsls	r1, r3, #31
    38ce:	d50b      	bpl.n	38e8 <z_thread_abort+0x34>
	__asm__ volatile(
    38d0:	f386 8811 	msr	BASEPRI, r6
    38d4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    38d8:	4040      	eors	r0, r0
    38da:	f380 8811 	msr	BASEPRI, r0
    38de:	f04f 0004 	mov.w	r0, #4
    38e2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    38e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    38e8:	7b43      	ldrb	r3, [r0, #13]
    38ea:	071a      	lsls	r2, r3, #28
    38ec:	d504      	bpl.n	38f8 <z_thread_abort+0x44>
    38ee:	f386 8811 	msr	BASEPRI, r6
    38f2:	f3bf 8f6f 	isb	sy
    38f6:	e7f5      	b.n	38e4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    38f8:	f023 0220 	bic.w	r2, r3, #32
    38fc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3900:	09d2      	lsrs	r2, r2, #7
    3902:	d120      	bne.n	3946 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3904:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3906:	68a3      	ldr	r3, [r4, #8]
    3908:	b113      	cbz	r3, 3910 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    390a:	4620      	mov	r0, r4
    390c:	f000 fe11 	bl	4532 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3910:	f104 0018 	add.w	r0, r4, #24
    3914:	f000 fea3 	bl	465e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3918:	f104 0758 	add.w	r7, r4, #88	; 0x58
    391c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    3920:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3922:	42bd      	cmp	r5, r7
    3924:	d000      	beq.n	3928 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3926:	b9b5      	cbnz	r5, 3956 <z_thread_abort+0xa2>
		update_cache(1);
    3928:	2001      	movs	r0, #1
    392a:	f7ff fd35 	bl	3398 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    392e:	4b10      	ldr	r3, [pc, #64]	; (3970 <z_thread_abort+0xbc>)
    3930:	689b      	ldr	r3, [r3, #8]
    3932:	42a3      	cmp	r3, r4
    3934:	d1db      	bne.n	38ee <z_thread_abort+0x3a>
    3936:	f3ef 8305 	mrs	r3, IPSR
    393a:	2b00      	cmp	r3, #0
    393c:	d1d7      	bne.n	38ee <z_thread_abort+0x3a>
    393e:	4630      	mov	r0, r6
    3940:	f7fd fbd8 	bl	10f4 <arch_swap>
	return ret;
    3944:	e7d3      	b.n	38ee <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3946:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    394a:	f043 0308 	orr.w	r3, r3, #8
    394e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3950:	f000 fde7 	bl	4522 <sys_dlist_remove>
}
    3954:	e7d7      	b.n	3906 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    3956:	4628      	mov	r0, r5
    3958:	f000 fdeb 	bl	4532 <unpend_thread_no_timeout>
    395c:	f105 0018 	add.w	r0, r5, #24
    3960:	f000 fe7d 	bl	465e <z_abort_timeout>
    3964:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3968:	4628      	mov	r0, r5
    396a:	f7ff fd6d 	bl	3448 <ready_thread>
    396e:	e7d7      	b.n	3920 <z_thread_abort+0x6c>
    3970:	20000364 	.word	0x20000364

00003974 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3974:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3976:	4806      	ldr	r0, [pc, #24]	; (3990 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3978:	4a06      	ldr	r2, [pc, #24]	; (3994 <z_data_copy+0x20>)
    397a:	4907      	ldr	r1, [pc, #28]	; (3998 <z_data_copy+0x24>)
    397c:	1a12      	subs	r2, r2, r0
    397e:	f000 fdc1 	bl	4504 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3986:	4a05      	ldr	r2, [pc, #20]	; (399c <z_data_copy+0x28>)
    3988:	4905      	ldr	r1, [pc, #20]	; (39a0 <z_data_copy+0x2c>)
    398a:	4806      	ldr	r0, [pc, #24]	; (39a4 <z_data_copy+0x30>)
    398c:	f000 bdba 	b.w	4504 <z_early_memcpy>
    3990:	20000000 	.word	0x20000000
    3994:	200000ce 	.word	0x200000ce
    3998:	00004c34 	.word	0x00004c34
    399c:	00000000 	.word	0x00000000
    39a0:	00004c34 	.word	0x00004c34
    39a4:	20000000 	.word	0x20000000

000039a8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    39a8:	4b03      	ldr	r3, [pc, #12]	; (39b8 <elapsed+0x10>)
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	b90b      	cbnz	r3, 39b2 <elapsed+0xa>
    39ae:	f7fe bd79 	b.w	24a4 <sys_clock_elapsed>
}
    39b2:	2000      	movs	r0, #0
    39b4:	4770      	bx	lr
    39b6:	bf00      	nop
    39b8:	20000398 	.word	0x20000398

000039bc <next_timeout>:

static int32_t next_timeout(void)
{
    39bc:	b510      	push	{r4, lr}
	return list->head == list;
    39be:	4b11      	ldr	r3, [pc, #68]	; (3a04 <next_timeout+0x48>)
    39c0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39c2:	429c      	cmp	r4, r3
    39c4:	d10a      	bne.n	39dc <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    39c6:	f7ff ffef 	bl	39a8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    39ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    39ce:	4b0e      	ldr	r3, [pc, #56]	; (3a08 <next_timeout+0x4c>)
    39d0:	691b      	ldr	r3, [r3, #16]
    39d2:	b113      	cbz	r3, 39da <next_timeout+0x1e>
    39d4:	4298      	cmp	r0, r3
    39d6:	bfa8      	it	ge
    39d8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    39da:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    39dc:	f7ff ffe4 	bl	39a8 <elapsed>
	if ((to == NULL) ||
    39e0:	2c00      	cmp	r4, #0
    39e2:	d0f2      	beq.n	39ca <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    39e4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    39e8:	1a1b      	subs	r3, r3, r0
    39ea:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    39ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    39f2:	f172 0100 	sbcs.w	r1, r2, #0
    39f6:	dae8      	bge.n	39ca <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    39f8:	2a00      	cmp	r2, #0
    39fa:	bfac      	ite	ge
    39fc:	4618      	movge	r0, r3
    39fe:	2000      	movlt	r0, #0
    3a00:	e7e5      	b.n	39ce <next_timeout+0x12>
    3a02:	bf00      	nop
    3a04:	200000bc 	.word	0x200000bc
    3a08:	20000364 	.word	0x20000364

00003a0c <remove_timeout>:
{
    3a0c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3a0e:	b170      	cbz	r0, 3a2e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3a10:	4b0b      	ldr	r3, [pc, #44]	; (3a40 <remove_timeout+0x34>)
    3a12:	685b      	ldr	r3, [r3, #4]
    3a14:	4298      	cmp	r0, r3
    3a16:	d00a      	beq.n	3a2e <remove_timeout+0x22>
    3a18:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    3a1a:	b143      	cbz	r3, 3a2e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3a1c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3a20:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3a24:	1912      	adds	r2, r2, r4
    3a26:	eb41 0105 	adc.w	r1, r1, r5
    3a2a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3a2e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    3a32:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3a34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3a36:	2300      	movs	r3, #0
	node->prev = NULL;
    3a38:	e9c0 3300 	strd	r3, r3, [r0]
}
    3a3c:	bd30      	pop	{r4, r5, pc}
    3a3e:	bf00      	nop
    3a40:	200000bc 	.word	0x200000bc

00003a44 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3a44:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a48:	bf08      	it	eq
    3a4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    3a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a50:	4604      	mov	r4, r0
    3a52:	461d      	mov	r5, r3
    3a54:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3a56:	d061      	beq.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3a58:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3a5a:	f04f 0320 	mov.w	r3, #32
    3a5e:	f3ef 8711 	mrs	r7, BASEPRI
    3a62:	f383 8812 	msr	BASEPRI_MAX, r3
    3a66:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3a6a:	3201      	adds	r2, #1
    3a6c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    3a70:	da24      	bge.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3a72:	4930      	ldr	r1, [pc, #192]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a74:	e9d1 2000 	ldrd	r2, r0, [r1]
    3a78:	f06f 0301 	mvn.w	r3, #1
    3a7c:	1a9b      	subs	r3, r3, r2
    3a7e:	f04f 32ff 	mov.w	r2, #4294967295
    3a82:	eb62 0000 	sbc.w	r0, r2, r0
    3a86:	1b9e      	subs	r6, r3, r6
    3a88:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    3a8c:	2e01      	cmp	r6, #1
    3a8e:	f170 0300 	sbcs.w	r3, r0, #0
    3a92:	da01      	bge.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a94:	2601      	movs	r6, #1
    3a96:	2000      	movs	r0, #0
    3a98:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    3a9c:	4e26      	ldr	r6, [pc, #152]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a9e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    3aa2:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3aa4:	45b4      	cmp	ip, r6
    3aa6:	bf08      	it	eq
    3aa8:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    3aac:	f1bc 0f00 	cmp.w	ip, #0
    3ab0:	d10d      	bne.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
	node->prev = tail;
    3ab2:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    3ab6:	602c      	str	r4, [r5, #0]
	list->tail = node;
    3ab8:	6074      	str	r4, [r6, #4]
}
    3aba:	e01c      	b.n	3af6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e>
			to->dticks = timeout.ticks + 1 + elapsed();
    3abc:	f7ff ff74 	bl	39a8 <elapsed>
    3ac0:	3601      	adds	r6, #1
    3ac2:	f145 0500 	adc.w	r5, r5, #0
    3ac6:	1836      	adds	r6, r6, r0
    3ac8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    3acc:	e7e4      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
			if (t->dticks > to->dticks) {
    3ace:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    3ad2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    3ad6:	4293      	cmp	r3, r2
    3ad8:	eb71 0e00 	sbcs.w	lr, r1, r0
    3adc:	da1f      	bge.n	3b1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86>
				t->dticks -= to->dticks;
    3ade:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    3ae0:	f8dc 3004 	ldr.w	r3, [ip, #4]
    3ae4:	eb60 0001 	sbc.w	r0, r0, r1
    3ae8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    3aec:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    3af0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3af2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    3af6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3af8:	42b3      	cmp	r3, r6
    3afa:	d00b      	beq.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3afc:	429c      	cmp	r4, r3
    3afe:	d109      	bne.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3b00:	f7ff ff5c 	bl	39bc <next_timeout>

			if (next_time == 0 ||
    3b04:	b118      	cbz	r0, 3b0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76>
			    _current_cpu->slice_ticks != next_time) {
    3b06:	4b0d      	ldr	r3, [pc, #52]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
			if (next_time == 0 ||
    3b08:	691b      	ldr	r3, [r3, #16]
    3b0a:	4283      	cmp	r3, r0
    3b0c:	d002      	beq.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
				sys_clock_set_timeout(next_time, false);
    3b0e:	2100      	movs	r1, #0
    3b10:	f7fe fc96 	bl	2440 <sys_clock_set_timeout>
	__asm__ volatile(
    3b14:	f387 8811 	msr	BASEPRI, r7
    3b18:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    3b1e:	1a9b      	subs	r3, r3, r2
    3b20:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3b24:	45ac      	cmp	ip, r5
    3b26:	e9c4 3104 	strd	r3, r1, [r4, #16]
    3b2a:	d0c2      	beq.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3b2c:	f8dc c000 	ldr.w	ip, [ip]
    3b30:	e7bc      	b.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3b32:	bf00      	nop
    3b34:	200001f0 	.word	0x200001f0
    3b38:	200000bc 	.word	0x200000bc
    3b3c:	20000364 	.word	0x20000364

00003b40 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b44:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3b46:	f7ff fd15 	bl	3574 <z_time_slice>
	__asm__ volatile(
    3b4a:	f04f 0320 	mov.w	r3, #32
    3b4e:	f3ef 8611 	mrs	r6, BASEPRI
    3b52:	f383 8812 	msr	BASEPRI_MAX, r3
    3b56:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    3b5a:	4f23      	ldr	r7, [pc, #140]	; (3be8 <sys_clock_announce+0xa8>)
	return list->head == list;
    3b5c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3bec <sys_clock_announce+0xac>
    3b60:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3b64:	4a22      	ldr	r2, [pc, #136]	; (3bf0 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    3b66:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b68:	4540      	cmp	r0, r8
		curr_tick += dt;
    3b6a:	e9d2 3e00 	ldrd	r3, lr, [r2]
    3b6e:	ea4f 71e4 	mov.w	r1, r4, asr #31
    3b72:	d00b      	beq.n	3b8c <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3b74:	b150      	cbz	r0, 3b8c <sys_clock_announce+0x4c>
    3b76:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    3b7a:	42ac      	cmp	r4, r5
    3b7c:	eb71 090c 	sbcs.w	r9, r1, ip
    3b80:	da16      	bge.n	3bb0 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3b82:	1b2d      	subs	r5, r5, r4
    3b84:	eb6c 0c01 	sbc.w	ip, ip, r1
    3b88:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    3b8c:	18e3      	adds	r3, r4, r3
    3b8e:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    3b92:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3b94:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    3b98:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3b9a:	f7ff ff0f 	bl	39bc <next_timeout>
    3b9e:	4621      	mov	r1, r4
    3ba0:	f7fe fc4e 	bl	2440 <sys_clock_set_timeout>
	__asm__ volatile(
    3ba4:	f386 8811 	msr	BASEPRI, r6
    3ba8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3bb0:	18eb      	adds	r3, r5, r3
    3bb2:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    3bb6:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    3bba:	2200      	movs	r2, #0
    3bbc:	2300      	movs	r3, #0
    3bbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    3bc2:	f7ff ff23 	bl	3a0c <remove_timeout>
    3bc6:	f386 8811 	msr	BASEPRI, r6
    3bca:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3bce:	6883      	ldr	r3, [r0, #8]
    3bd0:	4798      	blx	r3
	__asm__ volatile(
    3bd2:	f04f 0320 	mov.w	r3, #32
    3bd6:	f3ef 8611 	mrs	r6, BASEPRI
    3bda:	f383 8812 	msr	BASEPRI_MAX, r3
    3bde:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    3be2:	683c      	ldr	r4, [r7, #0]
    3be4:	1b64      	subs	r4, r4, r5
    3be6:	e7bb      	b.n	3b60 <sys_clock_announce+0x20>
    3be8:	20000398 	.word	0x20000398
    3bec:	200000bc 	.word	0x200000bc
    3bf0:	200001f0 	.word	0x200001f0

00003bf4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3bf4:	b510      	push	{r4, lr}
    3bf6:	f04f 0320 	mov.w	r3, #32
    3bfa:	f3ef 8411 	mrs	r4, BASEPRI
    3bfe:	f383 8812 	msr	BASEPRI_MAX, r3
    3c02:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    3c06:	f7ff fecf 	bl	39a8 <elapsed>
    3c0a:	4a06      	ldr	r2, [pc, #24]	; (3c24 <sys_clock_tick_get+0x30>)
    3c0c:	4603      	mov	r3, r0
    3c0e:	e9d2 0100 	ldrd	r0, r1, [r2]
    3c12:	1818      	adds	r0, r3, r0
    3c14:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    3c18:	f384 8811 	msr	BASEPRI, r4
    3c1c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3c20:	bd10      	pop	{r4, pc}
    3c22:	bf00      	nop
    3c24:	200001f0 	.word	0x200001f0

00003c28 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    3c28:	4801      	ldr	r0, [pc, #4]	; (3c30 <boot_banner+0x8>)
    3c2a:	f000 b805 	b.w	3c38 <printk>
    3c2e:	bf00      	nop
    3c30:	00004c03 	.word	0x00004c03

00003c34 <arch_printk_char_out>:
}
    3c34:	2000      	movs	r0, #0
    3c36:	4770      	bx	lr

00003c38 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    3c38:	b40f      	push	{r0, r1, r2, r3}
    3c3a:	b507      	push	{r0, r1, r2, lr}
    3c3c:	a904      	add	r1, sp, #16
    3c3e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3c42:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    3c44:	f7fc fbda 	bl	3fc <vprintk>

	va_end(ap);
}
    3c48:	b003      	add	sp, #12
    3c4a:	f85d eb04 	ldr.w	lr, [sp], #4
    3c4e:	b004      	add	sp, #16
    3c50:	4770      	bx	lr

00003c52 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3c52:	4604      	mov	r4, r0
    3c54:	b508      	push	{r3, lr}
    3c56:	4608      	mov	r0, r1
    3c58:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    3c5a:	461a      	mov	r2, r3
    3c5c:	47a0      	blx	r4
	return z_impl_z_current_get();
    3c5e:	f7ff fe23 	bl	38a8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    3c62:	f7fd fc91 	bl	1588 <z_impl_k_thread_abort>

00003c66 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c66:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3c68:	f013 0307 	ands.w	r3, r3, #7
    3c6c:	d105      	bne.n	3c7a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3c6e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    3c70:	2b00      	cmp	r3, #0
    3c72:	bf0c      	ite	eq
    3c74:	2000      	moveq	r0, #0
    3c76:	2003      	movne	r0, #3
    3c78:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3c7a:	2b02      	cmp	r3, #2
    3c7c:	d105      	bne.n	3c8a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3c7e:	8b40      	ldrh	r0, [r0, #26]
    3c80:	fab0 f080 	clz	r0, r0
    3c84:	0940      	lsrs	r0, r0, #5
    3c86:	0080      	lsls	r0, r0, #2
    3c88:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3c8a:	2b01      	cmp	r3, #1
    3c8c:	d105      	bne.n	3c9a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3c8e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    3c90:	2b00      	cmp	r3, #0
    3c92:	bf0c      	ite	eq
    3c94:	2000      	moveq	r0, #0
    3c96:	2005      	movne	r0, #5
    3c98:	4770      	bx	lr
	int evt = EVT_NOP;
    3c9a:	2000      	movs	r0, #0
}
    3c9c:	4770      	bx	lr

00003c9e <validate_args>:
{
    3c9e:	b510      	push	{r4, lr}
    3ca0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3ca2:	b100      	cbz	r0, 3ca6 <validate_args+0x8>
    3ca4:	b911      	cbnz	r1, 3cac <validate_args+0xe>
		return -EINVAL;
    3ca6:	f06f 0015 	mvn.w	r0, #21
}
    3caa:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    3cac:	1d08      	adds	r0, r1, #4
    3cae:	f000 f895 	bl	3ddc <sys_notify_validate>
	if ((rv == 0)
    3cb2:	2800      	cmp	r0, #0
    3cb4:	d1f9      	bne.n	3caa <validate_args+0xc>
	    && ((cli->notify.flags
    3cb6:	68a3      	ldr	r3, [r4, #8]
    3cb8:	2b03      	cmp	r3, #3
    3cba:	d9f6      	bls.n	3caa <validate_args+0xc>
    3cbc:	e7f3      	b.n	3ca6 <validate_args+0x8>

00003cbe <notify_one>:
{
    3cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cc2:	460d      	mov	r5, r1
    3cc4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3cc6:	4619      	mov	r1, r3
    3cc8:	1d28      	adds	r0, r5, #4
{
    3cca:	4690      	mov	r8, r2
    3ccc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3cce:	f000 f896 	bl	3dfe <sys_notify_finalize>
	if (cb) {
    3cd2:	4604      	mov	r4, r0
    3cd4:	b138      	cbz	r0, 3ce6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    3cd6:	4633      	mov	r3, r6
    3cd8:	4642      	mov	r2, r8
    3cda:	4629      	mov	r1, r5
    3cdc:	4638      	mov	r0, r7
    3cde:	46a4      	mov	ip, r4
}
    3ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    3ce4:	4760      	bx	ip
}
    3ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003cea <transition_complete>:
{
    3cea:	b410      	push	{r4}
	__asm__ volatile(
    3cec:	f04f 0420 	mov.w	r4, #32
    3cf0:	f3ef 8211 	mrs	r2, BASEPRI
    3cf4:	f384 8812 	msr	BASEPRI_MAX, r4
    3cf8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3cfc:	6141      	str	r1, [r0, #20]
}
    3cfe:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3d00:	2101      	movs	r1, #1
    3d02:	f7fc bb89 	b.w	418 <process_event>

00003d06 <onoff_manager_init>:
{
    3d06:	b538      	push	{r3, r4, r5, lr}
    3d08:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3d0a:	4605      	mov	r5, r0
    3d0c:	b158      	cbz	r0, 3d26 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3d0e:	b151      	cbz	r1, 3d26 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3d10:	680b      	ldr	r3, [r1, #0]
    3d12:	b143      	cbz	r3, 3d26 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3d14:	684b      	ldr	r3, [r1, #4]
    3d16:	b133      	cbz	r3, 3d26 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3d18:	221c      	movs	r2, #28
    3d1a:	2100      	movs	r1, #0
    3d1c:	f000 f910 	bl	3f40 <memset>
    3d20:	612c      	str	r4, [r5, #16]
	return 0;
    3d22:	2000      	movs	r0, #0
}
    3d24:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3d26:	f06f 0015 	mvn.w	r0, #21
    3d2a:	e7fb      	b.n	3d24 <onoff_manager_init+0x1e>

00003d2c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3d2c:	b570      	push	{r4, r5, r6, lr}
    3d2e:	4605      	mov	r5, r0
    3d30:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3d32:	f7ff ffb4 	bl	3c9e <validate_args>

	if (rv < 0) {
    3d36:	1e04      	subs	r4, r0, #0
    3d38:	db15      	blt.n	3d66 <onoff_request+0x3a>
    3d3a:	f04f 0320 	mov.w	r3, #32
    3d3e:	f3ef 8211 	mrs	r2, BASEPRI
    3d42:	f383 8812 	msr	BASEPRI_MAX, r3
    3d46:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3d4a:	8b6b      	ldrh	r3, [r5, #26]
    3d4c:	8b2c      	ldrh	r4, [r5, #24]
    3d4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3d52:	428b      	cmp	r3, r1
    3d54:	f004 0407 	and.w	r4, r4, #7
    3d58:	d107      	bne.n	3d6a <onoff_request+0x3e>
	__asm__ volatile(
    3d5a:	f382 8811 	msr	BASEPRI, r2
    3d5e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    3d62:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    3d66:	4620      	mov	r0, r4
    3d68:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    3d6a:	2c02      	cmp	r4, #2
    3d6c:	d10c      	bne.n	3d88 <onoff_request+0x5c>
		mgr->refs += 1U;
    3d6e:	3301      	adds	r3, #1
    3d70:	836b      	strh	r3, [r5, #26]
    3d72:	f382 8811 	msr	BASEPRI, r2
    3d76:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    3d7a:	2300      	movs	r3, #0
    3d7c:	4622      	mov	r2, r4
    3d7e:	4631      	mov	r1, r6
    3d80:	4628      	mov	r0, r5
    3d82:	f7ff ff9c 	bl	3cbe <notify_one>
    3d86:	e7ee      	b.n	3d66 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    3d88:	2c06      	cmp	r4, #6
    3d8a:	d814      	bhi.n	3db6 <onoff_request+0x8a>
    3d8c:	e8df f004 	tbb	[pc, r4]
    3d90:	13131304 	.word	0x13131304
    3d94:	1a04      	.short	0x1a04
    3d96:	04          	.byte	0x04
    3d97:	00          	.byte	0x00
	parent->next = child;
    3d98:	2300      	movs	r3, #0
    3d9a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3d9c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3d9e:	b93b      	cbnz	r3, 3db0 <onoff_request+0x84>
	list->head = node;
    3da0:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    3da4:	b9ac      	cbnz	r4, 3dd2 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    3da6:	2102      	movs	r1, #2
    3da8:	4628      	mov	r0, r5
    3daa:	f7fc fb35 	bl	418 <process_event>
    3dae:	e7da      	b.n	3d66 <onoff_request+0x3a>
	parent->next = child;
    3db0:	601e      	str	r6, [r3, #0]
	list->tail = node;
    3db2:	606e      	str	r6, [r5, #4]
}
    3db4:	e7f6      	b.n	3da4 <onoff_request+0x78>
    3db6:	f382 8811 	msr	BASEPRI, r2
    3dba:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    3dbe:	f06f 0404 	mvn.w	r4, #4
    3dc2:	e7d0      	b.n	3d66 <onoff_request+0x3a>
    3dc4:	f382 8811 	msr	BASEPRI, r2
    3dc8:	f3bf 8f6f 	isb	sy
    3dcc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3dd0:	e7c9      	b.n	3d66 <onoff_request+0x3a>
    3dd2:	f382 8811 	msr	BASEPRI, r2
    3dd6:	f3bf 8f6f 	isb	sy
		if (notify) {
    3dda:	e7c4      	b.n	3d66 <onoff_request+0x3a>

00003ddc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3ddc:	4603      	mov	r3, r0
    3dde:	b158      	cbz	r0, 3df8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3de0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3de2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3de6:	2a01      	cmp	r2, #1
    3de8:	d003      	beq.n	3df2 <sys_notify_validate+0x16>
    3dea:	2a03      	cmp	r2, #3
    3dec:	d104      	bne.n	3df8 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3dee:	6802      	ldr	r2, [r0, #0]
    3df0:	b112      	cbz	r2, 3df8 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3df2:	2000      	movs	r0, #0
    3df4:	6098      	str	r0, [r3, #8]
    3df6:	4770      	bx	lr
    3df8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3dfc:	4770      	bx	lr

00003dfe <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3dfe:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3e00:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    3e02:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    3e06:	2a03      	cmp	r2, #3
    3e08:	f04f 0200 	mov.w	r2, #0
{
    3e0c:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3e0e:	bf0c      	ite	eq
    3e10:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    3e12:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3e14:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3e16:	4770      	bx	lr

00003e18 <encode_uint>:
{
    3e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e1c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    3e1e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    3e20:	2b6f      	cmp	r3, #111	; 0x6f
{
    3e22:	4680      	mov	r8, r0
    3e24:	460f      	mov	r7, r1
    3e26:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    3e28:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    3e2c:	d029      	beq.n	3e82 <encode_uint+0x6a>
    3e2e:	d824      	bhi.n	3e7a <encode_uint+0x62>
		return 10;
    3e30:	2b58      	cmp	r3, #88	; 0x58
    3e32:	bf0c      	ite	eq
    3e34:	2610      	moveq	r6, #16
    3e36:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    3e38:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    3e3c:	4632      	mov	r2, r6
    3e3e:	2300      	movs	r3, #0
    3e40:	4640      	mov	r0, r8
    3e42:	4639      	mov	r1, r7
    3e44:	f7fc f95c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e48:	2a09      	cmp	r2, #9
    3e4a:	b2d4      	uxtb	r4, r2
    3e4c:	d81e      	bhi.n	3e8c <encode_uint+0x74>
    3e4e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    3e50:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e52:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    3e54:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e58:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    3e5c:	d301      	bcc.n	3e62 <encode_uint+0x4a>
    3e5e:	45d1      	cmp	r9, sl
    3e60:	d811      	bhi.n	3e86 <encode_uint+0x6e>
	if (conv->flag_hash) {
    3e62:	782b      	ldrb	r3, [r5, #0]
    3e64:	069b      	lsls	r3, r3, #26
    3e66:	d505      	bpl.n	3e74 <encode_uint+0x5c>
		if (radix == 8) {
    3e68:	2e08      	cmp	r6, #8
    3e6a:	d115      	bne.n	3e98 <encode_uint+0x80>
			conv->altform_0 = true;
    3e6c:	78ab      	ldrb	r3, [r5, #2]
    3e6e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    3e72:	70ab      	strb	r3, [r5, #2]
}
    3e74:	4648      	mov	r0, r9
    3e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    3e7a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    3e7e:	2b70      	cmp	r3, #112	; 0x70
    3e80:	e7d7      	b.n	3e32 <encode_uint+0x1a>
	switch (specifier) {
    3e82:	2608      	movs	r6, #8
    3e84:	e7d8      	b.n	3e38 <encode_uint+0x20>
		value /= radix;
    3e86:	4680      	mov	r8, r0
    3e88:	460f      	mov	r7, r1
    3e8a:	e7d7      	b.n	3e3c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3e8c:	f1bb 0f19 	cmp.w	fp, #25
    3e90:	bf94      	ite	ls
    3e92:	3437      	addls	r4, #55	; 0x37
    3e94:	3457      	addhi	r4, #87	; 0x57
    3e96:	e7db      	b.n	3e50 <encode_uint+0x38>
		} else if (radix == 16) {
    3e98:	2e10      	cmp	r6, #16
    3e9a:	d1eb      	bne.n	3e74 <encode_uint+0x5c>
			conv->altform_0c = true;
    3e9c:	78ab      	ldrb	r3, [r5, #2]
    3e9e:	f043 0310 	orr.w	r3, r3, #16
    3ea2:	e7e6      	b.n	3e72 <encode_uint+0x5a>

00003ea4 <outs>:
{
    3ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ea8:	4607      	mov	r7, r0
    3eaa:	4688      	mov	r8, r1
    3eac:	4615      	mov	r5, r2
    3eae:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3eb0:	4614      	mov	r4, r2
    3eb2:	42b4      	cmp	r4, r6
    3eb4:	d305      	bcc.n	3ec2 <outs+0x1e>
    3eb6:	b10e      	cbz	r6, 3ebc <outs+0x18>
	return (int)count;
    3eb8:	1b60      	subs	r0, r4, r5
    3eba:	e008      	b.n	3ece <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3ebc:	7823      	ldrb	r3, [r4, #0]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d0fa      	beq.n	3eb8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    3ec2:	f814 0b01 	ldrb.w	r0, [r4], #1
    3ec6:	4641      	mov	r1, r8
    3ec8:	47b8      	blx	r7
		if (rc < 0) {
    3eca:	2800      	cmp	r0, #0
    3ecc:	daf1      	bge.n	3eb2 <outs+0xe>
}
    3ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003ed2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3ed2:	4770      	bx	lr

00003ed4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3ed4:	f000 baf9 	b.w	44ca <z_fatal_error>

00003ed8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    3ed8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3eda:	6800      	ldr	r0, [r0, #0]
    3edc:	f000 baf5 	b.w	44ca <z_fatal_error>

00003ee0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    3ee0:	2100      	movs	r1, #0
    3ee2:	2001      	movs	r0, #1
    3ee4:	f7ff bff6 	b.w	3ed4 <z_arm_fatal_error>

00003ee8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    3ee8:	b508      	push	{r3, lr}
	handler();
    3eea:	f7fd f8e3 	bl	10b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    3eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    3ef2:	f7fd b9bb 	b.w	126c <z_arm_exc_exit>

00003ef6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    3ef6:	3901      	subs	r1, #1
    3ef8:	4603      	mov	r3, r0
    3efa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3efe:	b90a      	cbnz	r2, 3f04 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    3f00:	701a      	strb	r2, [r3, #0]

	return dest;
}
    3f02:	4770      	bx	lr
		*d = *s;
    3f04:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    3f08:	e7f7      	b.n	3efa <strcpy+0x4>

00003f0a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    3f0a:	4603      	mov	r3, r0
	size_t n = 0;
    3f0c:	2000      	movs	r0, #0

	while (*s != '\0') {
    3f0e:	5c1a      	ldrb	r2, [r3, r0]
    3f10:	b902      	cbnz	r2, 3f14 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    3f12:	4770      	bx	lr
		n++;
    3f14:	3001      	adds	r0, #1
    3f16:	e7fa      	b.n	3f0e <strlen+0x4>

00003f18 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    3f18:	4603      	mov	r3, r0
	size_t n = 0;
    3f1a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    3f1c:	5c1a      	ldrb	r2, [r3, r0]
    3f1e:	b10a      	cbz	r2, 3f24 <strnlen+0xc>
    3f20:	4288      	cmp	r0, r1
    3f22:	d100      	bne.n	3f26 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    3f24:	4770      	bx	lr
		n++;
    3f26:	3001      	adds	r0, #1
    3f28:	e7f8      	b.n	3f1c <strnlen+0x4>

00003f2a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    3f2a:	b510      	push	{r4, lr}
    3f2c:	1e43      	subs	r3, r0, #1
    3f2e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    3f30:	4291      	cmp	r1, r2
    3f32:	d100      	bne.n	3f36 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3f34:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    3f36:	f811 4b01 	ldrb.w	r4, [r1], #1
    3f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3f3e:	e7f7      	b.n	3f30 <memcpy+0x6>

00003f40 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    3f40:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    3f42:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    3f44:	4603      	mov	r3, r0
	while (n > 0) {
    3f46:	4293      	cmp	r3, r2
    3f48:	d100      	bne.n	3f4c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3f4a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    3f4c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3f50:	e7f9      	b.n	3f46 <memset+0x6>

00003f52 <_stdout_hook_default>:
}
    3f52:	f04f 30ff 	mov.w	r0, #4294967295
    3f56:	4770      	bx	lr

00003f58 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    3f58:	2806      	cmp	r0, #6
    3f5a:	d108      	bne.n	3f6e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    3f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f60:	2201      	movs	r2, #1
    3f62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    3f66:	f3bf 8f4f 	dsb	sy
        __WFE();
    3f6a:	bf20      	wfe
    while (true)
    3f6c:	e7fd      	b.n	3f6a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    3f6e:	4770      	bx	lr

00003f70 <pm_state_exit_post_ops>:
    3f70:	2300      	movs	r3, #0
    3f72:	f383 8811 	msr	BASEPRI, r3
    3f76:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    3f7a:	4770      	bx	lr

00003f7c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3f7c:	6903      	ldr	r3, [r0, #16]
    3f7e:	b2c9      	uxtb	r1, r1
    3f80:	220c      	movs	r2, #12
    3f82:	fb01 3302 	mla	r3, r1, r2, r3
    3f86:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    3f88:	f000 0007 	and.w	r0, r0, #7
    3f8c:	4770      	bx	lr

00003f8e <set_on_state>:
	__asm__ volatile(
    3f8e:	f04f 0320 	mov.w	r3, #32
    3f92:	f3ef 8211 	mrs	r2, BASEPRI
    3f96:	f383 8812 	msr	BASEPRI_MAX, r3
    3f9a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    3f9e:	6803      	ldr	r3, [r0, #0]
    3fa0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3fa4:	f043 0302 	orr.w	r3, r3, #2
    3fa8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    3faa:	f382 8811 	msr	BASEPRI, r2
    3fae:	f3bf 8f6f 	isb	sy
}
    3fb2:	4770      	bx	lr

00003fb4 <stop>:
{
    3fb4:	b570      	push	{r4, r5, r6, lr}
    3fb6:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    3fb8:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    3fba:	f04f 0420 	mov.w	r4, #32
    3fbe:	f3ef 8511 	mrs	r5, BASEPRI
    3fc2:	f384 8812 	msr	BASEPRI_MAX, r4
    3fc6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3fca:	260c      	movs	r6, #12
    3fcc:	fb06 3401 	mla	r4, r6, r1, r3
    3fd0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3fd2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    3fd6:	d008      	beq.n	3fea <stop+0x36>
    3fd8:	42a2      	cmp	r2, r4
    3fda:	d006      	beq.n	3fea <stop+0x36>
	__asm__ volatile(
    3fdc:	f385 8811 	msr	BASEPRI, r5
    3fe0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    3fe4:	f04f 30ff 	mov.w	r0, #4294967295
}
    3fe8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3fea:	fb06 3301 	mla	r3, r6, r1, r3
    3fee:	2201      	movs	r2, #1
    3ff0:	641a      	str	r2, [r3, #64]	; 0x40
    3ff2:	f385 8811 	msr	BASEPRI, r5
    3ff6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    3ffa:	6843      	ldr	r3, [r0, #4]
    3ffc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4000:	685b      	ldr	r3, [r3, #4]
    4002:	4798      	blx	r3
	return 0;
    4004:	2000      	movs	r0, #0
    4006:	e7ef      	b.n	3fe8 <stop+0x34>

00004008 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4008:	2280      	movs	r2, #128	; 0x80
    400a:	f7ff bfd3 	b.w	3fb4 <stop>

0000400e <async_start>:
{
    400e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4010:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4012:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4014:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4016:	f04f 0520 	mov.w	r5, #32
    401a:	f3ef 8611 	mrs	r6, BASEPRI
    401e:	f385 8812 	msr	BASEPRI_MAX, r5
    4022:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4026:	250c      	movs	r5, #12
    4028:	fb05 4401 	mla	r4, r5, r1, r4
    402c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    402e:	f005 0c07 	and.w	ip, r5, #7
    4032:	f1bc 0f01 	cmp.w	ip, #1
    4036:	d10c      	bne.n	4052 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4038:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    403a:	f386 8811 	msr	BASEPRI, r6
    403e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4042:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4046:	6843      	ldr	r3, [r0, #4]
    4048:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    404c:	4798      	blx	r3
	return 0;
    404e:	2000      	movs	r0, #0
}
    4050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4052:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4056:	42af      	cmp	r7, r5
    4058:	f386 8811 	msr	BASEPRI, r6
    405c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    4060:	bf0c      	ite	eq
    4062:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    4066:	f04f 30ff 	movne.w	r0, #4294967295
    406a:	e7f1      	b.n	4050 <async_start+0x42>

0000406c <api_start>:
{
    406c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    406e:	2480      	movs	r4, #128	; 0x80
    4070:	9400      	str	r4, [sp, #0]
    4072:	f7ff ffcc 	bl	400e <async_start>
}
    4076:	b002      	add	sp, #8
    4078:	bd10      	pop	{r4, pc}

0000407a <onoff_started_callback>:
{
    407a:	b410      	push	{r4}
	return &data->mgr[type];
    407c:	6900      	ldr	r0, [r0, #16]
    407e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4080:	241c      	movs	r4, #28
    4082:	fb03 0004 	mla	r0, r3, r4, r0
    4086:	2100      	movs	r1, #0
}
    4088:	bc10      	pop	{r4}
	notify(mgr, 0);
    408a:	4710      	bx	r2

0000408c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    408c:	2000      	movs	r0, #0
    408e:	f000 b973 	b.w	4378 <nrfx_clock_start>

00004092 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4092:	2000      	movs	r0, #0
    4094:	f000 b9ac 	b.w	43f0 <nrfx_clock_stop>

00004098 <blocking_start_callback>:
{
    4098:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    409a:	f7ff b921 	b.w	32e0 <z_impl_k_sem_give>

0000409e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    409e:	6843      	ldr	r3, [r0, #4]
    40a0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    40a2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    40a6:	600b      	str	r3, [r1, #0]
}
    40a8:	2000      	movs	r0, #0
    40aa:	4770      	bx	lr

000040ac <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    40ac:	6843      	ldr	r3, [r0, #4]
    40ae:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    40b0:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    40b4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    40b8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    40bc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    40c0:	2000      	movs	r0, #0
    40c2:	4770      	bx	lr

000040c4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    40c4:	6843      	ldr	r3, [r0, #4]
    40c6:	685b      	ldr	r3, [r3, #4]
}
    40c8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    40ca:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    40ce:	4770      	bx	lr

000040d0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    40d0:	6843      	ldr	r3, [r0, #4]
    40d2:	685b      	ldr	r3, [r3, #4]
}
    40d4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    40d6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    40da:	4770      	bx	lr

000040dc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    40dc:	6843      	ldr	r3, [r0, #4]
    40de:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    40e0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    40e4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    40e8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    40ea:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    40ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    40f2:	2000      	movs	r0, #0
    40f4:	4770      	bx	lr

000040f6 <gpio_nrfx_manage_callback>:
{
    40f6:	b510      	push	{r4, lr}
	return port->data;
    40f8:	6903      	ldr	r3, [r0, #16]
	return list->head;
    40fa:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    40fc:	b1f8      	cbz	r0, 413e <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    40fe:	4288      	cmp	r0, r1
    4100:	d119      	bne.n	4136 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4102:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4104:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4106:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4108:	42a1      	cmp	r1, r4
    410a:	d100      	bne.n	410e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    410c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    410e:	2000      	movs	r0, #0
    4110:	6008      	str	r0, [r1, #0]
	if (set) {
    4112:	b12a      	cbz	r2, 4120 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    4114:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4116:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4118:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    411a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    411c:	b902      	cbnz	r2, 4120 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    411e:	6099      	str	r1, [r3, #8]
	return 0;
    4120:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4122:	e010      	b.n	4146 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4124:	4281      	cmp	r1, r0
    4126:	d106      	bne.n	4136 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4128:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    412a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    412c:	6898      	ldr	r0, [r3, #8]
    412e:	4281      	cmp	r1, r0
    4130:	d1ed      	bne.n	410e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4132:	609c      	str	r4, [r3, #8]
}
    4134:	e7eb      	b.n	410e <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4136:	4604      	mov	r4, r0
    4138:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    413a:	2800      	cmp	r0, #0
    413c:	d1f2      	bne.n	4124 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    413e:	2a00      	cmp	r2, #0
    4140:	d1e8      	bne.n	4114 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4142:	f06f 0015 	mvn.w	r0, #21
}
    4146:	bd10      	pop	{r4, pc}

00004148 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    4148:	6902      	ldr	r2, [r0, #16]
{
    414a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    414c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4150:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4154:	2000      	movs	r0, #0
    4156:	4770      	bx	lr

00004158 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4158:	6843      	ldr	r3, [r0, #4]
    415a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    415c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4160:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4164:	4770      	bx	lr

00004166 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4166:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4168:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    416a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    416c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4170:	b150      	cbz	r0, 4188 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    4172:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4174:	2000      	movs	r0, #0
    4176:	7812      	ldrb	r2, [r2, #0]
    4178:	700a      	strb	r2, [r1, #0]
    417a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    417e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4182:	2201      	movs	r2, #1
    4184:	601a      	str	r2, [r3, #0]
	return 0;
    4186:	4770      	bx	lr
		return -1;
    4188:	f04f 30ff 	mov.w	r0, #4294967295
}
    418c:	4770      	bx	lr

0000418e <is_tx_ready.isra.0>:
	return config->uarte_regs;
    418e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4190:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4192:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4196:	b940      	cbnz	r0, 41aa <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4198:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    419a:	079b      	lsls	r3, r3, #30
    419c:	d406      	bmi.n	41ac <is_tx_ready.isra.0+0x1e>
    419e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    41a2:	3800      	subs	r0, #0
    41a4:	bf18      	it	ne
    41a6:	2001      	movne	r0, #1
    41a8:	4770      	bx	lr
    41aa:	2001      	movs	r0, #1
}
    41ac:	4770      	bx	lr

000041ae <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    41ae:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    41b0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    41b2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    41b6:	05c9      	lsls	r1, r1, #23
    41b8:	d518      	bpl.n	41ec <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41ba:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    41be:	b1a9      	cbz	r1, 41ec <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    41c0:	f04f 0020 	mov.w	r0, #32
    41c4:	f3ef 8111 	mrs	r1, BASEPRI
    41c8:	f380 8812 	msr	BASEPRI_MAX, r0
    41cc:	f3bf 8f6f 	isb	sy
    41d0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    41d4:	b130      	cbz	r0, 41e4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41d6:	2000      	movs	r0, #0
    41d8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    41dc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41e0:	2001      	movs	r0, #1
    41e2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    41e4:	f381 8811 	msr	BASEPRI, r1
    41e8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    41ec:	6852      	ldr	r2, [r2, #4]
    41ee:	06d2      	lsls	r2, r2, #27
    41f0:	d515      	bpl.n	421e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    41f2:	f04f 0120 	mov.w	r1, #32
    41f6:	f3ef 8211 	mrs	r2, BASEPRI
    41fa:	f381 8812 	msr	BASEPRI_MAX, r1
    41fe:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4202:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4206:	b111      	cbz	r1, 420e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4208:	2100      	movs	r1, #0
    420a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    420e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4212:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4216:	f382 8811 	msr	BASEPRI, r2
    421a:	f3bf 8f6f 	isb	sy
}
    421e:	4770      	bx	lr

00004220 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    4220:	b510      	push	{r4, lr}
    4222:	2200      	movs	r2, #0
    4224:	4604      	mov	r4, r0
    4226:	2101      	movs	r1, #1
    4228:	2028      	movs	r0, #40	; 0x28
    422a:	f7fc ff2b 	bl	1084 <z_arm_irq_priority_set>
    422e:	2028      	movs	r0, #40	; 0x28
    4230:	f7fc ff0c 	bl	104c <arch_irq_enable>
    4234:	4620      	mov	r0, r4
    4236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    423a:	f7fd be59 	b.w	1ef0 <uarte_instance_init.constprop.0>

0000423e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    423e:	b510      	push	{r4, lr}
    4240:	2200      	movs	r2, #0
    4242:	4604      	mov	r4, r0
    4244:	2101      	movs	r1, #1
    4246:	2002      	movs	r0, #2
    4248:	f7fc ff1c 	bl	1084 <z_arm_irq_priority_set>
    424c:	2002      	movs	r0, #2
    424e:	f7fc fefd 	bl	104c <arch_irq_enable>
    4252:	4620      	mov	r0, r4
    4254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4258:	f7fd be4a 	b.w	1ef0 <uarte_instance_init.constprop.0>

0000425c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    425c:	4770      	bx	lr

0000425e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    425e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    4262:	009b      	lsls	r3, r3, #2
    4264:	b29b      	uxth	r3, r3
    4266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    426a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    426e:	2200      	movs	r2, #0
    4270:	601a      	str	r2, [r3, #0]
    4272:	681b      	ldr	r3, [r3, #0]
}
    4274:	4770      	bx	lr

00004276 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4276:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    4278:	6843      	ldr	r3, [r0, #4]
    427a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    427c:	7a05      	ldrb	r5, [r0, #8]
    427e:	6844      	ldr	r4, [r0, #4]
    4280:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4284:	42a3      	cmp	r3, r4
    4286:	d302      	bcc.n	428e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    4288:	f06f 0001 	mvn.w	r0, #1
}
    428c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    428e:	795c      	ldrb	r4, [r3, #5]
    4290:	428c      	cmp	r4, r1
    4292:	d001      	beq.n	4298 <pinctrl_lookup_state+0x22>
		(*state)++;
    4294:	3308      	adds	r3, #8
    4296:	e7f0      	b.n	427a <pinctrl_lookup_state+0x4>
			return 0;
    4298:	2000      	movs	r0, #0
    429a:	e7f7      	b.n	428c <pinctrl_lookup_state+0x16>

0000429c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    429c:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    429e:	2000      	movs	r0, #0
    42a0:	f7fd fa6e 	bl	1780 <sys_arch_reboot>

000042a4 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    42a4:	4700      	bx	r0

000042a6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    42a6:	f000 ba20 	b.w	46ea <z_impl_k_busy_wait>

000042aa <clock_stop>:
{
    42aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    42ac:	4604      	mov	r4, r0
    42ae:	b118      	cbz	r0, 42b8 <clock_stop+0xe>
    42b0:	2801      	cmp	r0, #1
    42b2:	d020      	beq.n	42f6 <clock_stop+0x4c>
}
    42b4:	b003      	add	sp, #12
    42b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42bc:	2202      	movs	r2, #2
    42be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42c2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    42c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42ca:	2201      	movs	r2, #1
    42cc:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    42ce:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    42d0:	2301      	movs	r3, #1
    42d2:	f88d 3007 	strb.w	r3, [sp, #7]
    42d6:	f242 7510 	movw	r5, #10000	; 0x2710
    42da:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    42de:	b1bc      	cbz	r4, 4310 <clock_stop+0x66>
    42e0:	2c01      	cmp	r4, #1
    42e2:	d1e7      	bne.n	42b4 <clock_stop+0xa>
            if (p_clk_src != NULL)
    42e4:	b38f      	cbz	r7, 434a <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    42e6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    42ea:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    42ee:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    42f0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    42f4:	e014      	b.n	4320 <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    42f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42fa:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    42fc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4300:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4304:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4308:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    430a:	f10d 0707 	add.w	r7, sp, #7
    430e:	e7df      	b.n	42d0 <clock_stop+0x26>
            if (p_clk_src != NULL)
    4310:	b18f      	cbz	r7, 4336 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4312:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4316:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    431a:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    431c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4320:	03da      	lsls	r2, r3, #15
    4322:	d5c7      	bpl.n	42b4 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4324:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4328:	2801      	cmp	r0, #1
    432a:	d1c3      	bne.n	42b4 <clock_stop+0xa>
    432c:	f7ff ffbb 	bl	42a6 <nrfx_busy_wait>
    4330:	3d01      	subs	r5, #1
    4332:	d1d4      	bne.n	42de <clock_stop+0x34>
    4334:	e7be      	b.n	42b4 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4336:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    433a:	03d9      	lsls	r1, r3, #15
    433c:	d5ba      	bpl.n	42b4 <clock_stop+0xa>
    433e:	2001      	movs	r0, #1
    4340:	f7ff ffb1 	bl	42a6 <nrfx_busy_wait>
    4344:	3d01      	subs	r5, #1
    4346:	d1f6      	bne.n	4336 <clock_stop+0x8c>
    4348:	e7b4      	b.n	42b4 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    434a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    434e:	03db      	lsls	r3, r3, #15
    4350:	d5b0      	bpl.n	42b4 <clock_stop+0xa>
    4352:	2001      	movs	r0, #1
    4354:	f7ff ffa7 	bl	42a6 <nrfx_busy_wait>
    4358:	3d01      	subs	r5, #1
    435a:	d1f6      	bne.n	434a <clock_stop+0xa0>
    435c:	e7aa      	b.n	42b4 <clock_stop+0xa>

0000435e <nrfx_clock_enable>:
{
    435e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4360:	2000      	movs	r0, #0
    4362:	f7fc fe81 	bl	1068 <arch_irq_is_enabled>
    4366:	b908      	cbnz	r0, 436c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4368:	f7fc fe70 	bl	104c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    436c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4370:	2200      	movs	r2, #0
    4372:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4376:	bd08      	pop	{r3, pc}

00004378 <nrfx_clock_start>:
{
    4378:	b508      	push	{r3, lr}
    switch (domain)
    437a:	b110      	cbz	r0, 4382 <nrfx_clock_start+0xa>
    437c:	2801      	cmp	r0, #1
    437e:	d02c      	beq.n	43da <nrfx_clock_start+0x62>
}
    4380:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4386:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    438a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    438e:	03c8      	lsls	r0, r1, #15
    4390:	d40b      	bmi.n	43aa <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4392:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4396:	07d9      	lsls	r1, r3, #31
    4398:	d50f      	bpl.n	43ba <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    439a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    439e:	079b      	lsls	r3, r3, #30
    43a0:	d408      	bmi.n	43b4 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    43a2:	2302      	movs	r3, #2
    43a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    43a8:	e7ea      	b.n	4380 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    43aa:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    43ae:	2b01      	cmp	r3, #1
    43b0:	d004      	beq.n	43bc <nrfx_clock_start+0x44>
    43b2:	b113      	cbz	r3, 43ba <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    43b4:	2000      	movs	r0, #0
    43b6:	f7ff ff78 	bl	42aa <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    43ba:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    43bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    43c0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43c4:	2300      	movs	r3, #0
    43c6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    43ca:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    43ce:	2302      	movs	r3, #2
    43d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43d4:	2301      	movs	r3, #1
    43d6:	6093      	str	r3, [r2, #8]
}
    43d8:	e7d2      	b.n	4380 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43de:	2200      	movs	r2, #0
    43e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    43e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    43e8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43ec:	6018      	str	r0, [r3, #0]
}
    43ee:	e7c7      	b.n	4380 <nrfx_clock_start+0x8>

000043f0 <nrfx_clock_stop>:
    clock_stop(domain);
    43f0:	f7ff bf5b 	b.w	42aa <clock_stop>

000043f4 <nrf_gpio_reconfigure>:
{
    43f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    43f6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    43f8:	a801      	add	r0, sp, #4
{
    43fa:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    43fe:	4616      	mov	r6, r2
    4400:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4402:	f7fe fa31 	bl	2868 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4406:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4408:	f1b6 0c00 	subs.w	ip, r6, #0
    440c:	bf18      	it	ne
    440e:	f04f 0c01 	movne.w	ip, #1
    4412:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4416:	1e0b      	subs	r3, r1, #0
    4418:	bf18      	it	ne
    441a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    441c:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    441e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4422:	bf14      	ite	ne
    4424:	f04f 0c0c 	movne.w	ip, #12
    4428:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    442c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    442e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4432:	bf14      	ite	ne
    4434:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    4438:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    443c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    443e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4442:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4446:	bf14      	ite	ne
    4448:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    444c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4450:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    4454:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4458:	b101      	cbz	r1, 445c <nrf_gpio_reconfigure+0x68>
    445a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    445c:	b10e      	cbz	r6, 4462 <nrf_gpio_reconfigure+0x6e>
    445e:	7836      	ldrb	r6, [r6, #0]
    4460:	0076      	lsls	r6, r6, #1
    4462:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4464:	b10d      	cbz	r5, 446a <nrf_gpio_reconfigure+0x76>
    4466:	782d      	ldrb	r5, [r5, #0]
    4468:	00ad      	lsls	r5, r5, #2
    446a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    446c:	b10c      	cbz	r4, 4472 <nrf_gpio_reconfigure+0x7e>
    446e:	7824      	ldrb	r4, [r4, #0]
    4470:	0224      	lsls	r4, r4, #8
    4472:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    4474:	b10f      	cbz	r7, 447a <nrf_gpio_reconfigure+0x86>
    4476:	783f      	ldrb	r7, [r7, #0]
    4478:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    447a:	430c      	orrs	r4, r1
    447c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    447e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    4482:	b003      	add	sp, #12
    4484:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004486 <nrf_gpio_cfg_sense_set>:
{
    4486:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4488:	f10d 030f 	add.w	r3, sp, #15
    448c:	9301      	str	r3, [sp, #4]
    448e:	2300      	movs	r3, #0
{
    4490:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4494:	9300      	str	r3, [sp, #0]
    4496:	461a      	mov	r2, r3
    4498:	4619      	mov	r1, r3
    449a:	f7ff ffab 	bl	43f4 <nrf_gpio_reconfigure>
}
    449e:	b005      	add	sp, #20
    44a0:	f85d fb04 	ldr.w	pc, [sp], #4

000044a4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    44a4:	f7fe bd4e 	b.w	2f44 <_DoInit>

000044a8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    44a8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    44aa:	f7ff fffb 	bl	44a4 <SEGGER_RTT_Init>

	return 0;
}
    44ae:	2000      	movs	r0, #0
    44b0:	bd08      	pop	{r3, pc}

000044b2 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    44b2:	4770      	bx	lr

000044b4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    44b4:	b140      	cbz	r0, 44c8 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    44b6:	68c3      	ldr	r3, [r0, #12]
    44b8:	7858      	ldrb	r0, [r3, #1]
    44ba:	f010 0001 	ands.w	r0, r0, #1
    44be:	bf1e      	ittt	ne
    44c0:	7818      	ldrbne	r0, [r3, #0]
    44c2:	fab0 f080 	clzne	r0, r0
    44c6:	0940      	lsrne	r0, r0, #5
}
    44c8:	4770      	bx	lr

000044ca <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    44ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44cc:	4605      	mov	r5, r0
    44ce:	460e      	mov	r6, r1
	__asm__ volatile(
    44d0:	f04f 0320 	mov.w	r3, #32
    44d4:	f3ef 8711 	mrs	r7, BASEPRI
    44d8:	f383 8812 	msr	BASEPRI_MAX, r3
    44dc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    44e0:	f7ff f9e2 	bl	38a8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    44e4:	4631      	mov	r1, r6
    44e6:	4604      	mov	r4, r0
    44e8:	4628      	mov	r0, r5
    44ea:	f7ff fed7 	bl	429c <k_sys_fatal_error_handler>
	__asm__ volatile(
    44ee:	f387 8811 	msr	BASEPRI, r7
    44f2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    44f6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    44f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    44fc:	f7fd b844 	b.w	1588 <z_impl_k_thread_abort>

00004500 <z_early_memset>:
	(void) memset(dst, c, n);
    4500:	f7ff bd1e 	b.w	3f40 <memset>

00004504 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4504:	f7ff bd11 	b.w	3f2a <memcpy>

00004508 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4508:	f3ef 8005 	mrs	r0, IPSR
}
    450c:	3800      	subs	r0, #0
    450e:	bf18      	it	ne
    4510:	2001      	movne	r0, #1
    4512:	4770      	bx	lr

00004514 <z_pm_save_idle_exit>:
{
    4514:	b508      	push	{r3, lr}
	pm_system_resume();
    4516:	f7fc fc6f 	bl	df8 <pm_system_resume>
}
    451a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    451e:	f7ff be9d 	b.w	425c <sys_clock_idle_exit>

00004522 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4522:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4526:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4528:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    452a:	2300      	movs	r3, #0
	node->prev = NULL;
    452c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4530:	4770      	bx	lr

00004532 <unpend_thread_no_timeout>:
{
    4532:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4534:	f7ff fff5 	bl	4522 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4538:	7b43      	ldrb	r3, [r0, #13]
    453a:	f023 0302 	bic.w	r3, r3, #2
    453e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4540:	2300      	movs	r3, #0
    4542:	6083      	str	r3, [r0, #8]
}
    4544:	bd08      	pop	{r3, pc}

00004546 <z_thread_timeout>:
{
    4546:	b510      	push	{r4, lr}
    4548:	4601      	mov	r1, r0
	__asm__ volatile(
    454a:	f04f 0320 	mov.w	r3, #32
    454e:	f3ef 8411 	mrs	r4, BASEPRI
    4552:	f383 8812 	msr	BASEPRI_MAX, r3
    4556:	f3bf 8f6f 	isb	sy
		if (!killed) {
    455a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    455e:	f013 0f28 	tst.w	r3, #40	; 0x28
    4562:	d10d      	bne.n	4580 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    4564:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4568:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    456a:	b10b      	cbz	r3, 4570 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    456c:	f7ff ffe1 	bl	4532 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4570:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    4574:	f023 0314 	bic.w	r3, r3, #20
    4578:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    457c:	f7fe ff64 	bl	3448 <ready_thread>
	__asm__ volatile(
    4580:	f384 8811 	msr	BASEPRI, r4
    4584:	f3bf 8f6f 	isb	sy
}
    4588:	bd10      	pop	{r4, pc}

0000458a <add_to_waitq_locked>:
{
    458a:	b538      	push	{r3, r4, r5, lr}
    458c:	4604      	mov	r4, r0
    458e:	460d      	mov	r5, r1
	unready_thread(thread);
    4590:	f7fe ff8e 	bl	34b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4594:	7b63      	ldrb	r3, [r4, #13]
    4596:	f043 0302 	orr.w	r3, r3, #2
    459a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    459c:	b1e5      	cbz	r5, 45d8 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    459e:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    45a0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45a2:	429d      	cmp	r5, r3
    45a4:	d109      	bne.n	45ba <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    45a6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    45a8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    45ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
    45ae:	606c      	str	r4, [r5, #4]
}
    45b0:	e012      	b.n	45d8 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    45b2:	686a      	ldr	r2, [r5, #4]
    45b4:	4293      	cmp	r3, r2
    45b6:	d0f6      	beq.n	45a6 <add_to_waitq_locked+0x1c>
    45b8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45ba:	2b00      	cmp	r3, #0
    45bc:	d0f3      	beq.n	45a6 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    45be:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    45c2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    45c6:	428a      	cmp	r2, r1
    45c8:	d0f3      	beq.n	45b2 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    45ca:	4291      	cmp	r1, r2
    45cc:	ddf1      	ble.n	45b2 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    45ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    45d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    45d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    45d6:	605c      	str	r4, [r3, #4]
}
    45d8:	bd38      	pop	{r3, r4, r5, pc}

000045da <z_ready_thread>:
{
    45da:	b510      	push	{r4, lr}
	__asm__ volatile(
    45dc:	f04f 0320 	mov.w	r3, #32
    45e0:	f3ef 8411 	mrs	r4, BASEPRI
    45e4:	f383 8812 	msr	BASEPRI_MAX, r3
    45e8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    45ec:	f7fe ff2c 	bl	3448 <ready_thread>
	__asm__ volatile(
    45f0:	f384 8811 	msr	BASEPRI, r4
    45f4:	f3bf 8f6f 	isb	sy
}
    45f8:	bd10      	pop	{r4, pc}

000045fa <z_unpend_first_thread>:
{
    45fa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    45fc:	f04f 0320 	mov.w	r3, #32
    4600:	f3ef 8511 	mrs	r5, BASEPRI
    4604:	f383 8812 	msr	BASEPRI_MAX, r3
    4608:	f3bf 8f6f 	isb	sy
	return list->head == list;
    460c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    460e:	42a0      	cmp	r0, r4
    4610:	d00d      	beq.n	462e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    4612:	b134      	cbz	r4, 4622 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    4614:	4620      	mov	r0, r4
    4616:	f7ff ff8c 	bl	4532 <unpend_thread_no_timeout>
    461a:	f104 0018 	add.w	r0, r4, #24
    461e:	f000 f81e 	bl	465e <z_abort_timeout>
	__asm__ volatile(
    4622:	f385 8811 	msr	BASEPRI, r5
    4626:	f3bf 8f6f 	isb	sy
}
    462a:	4620      	mov	r0, r4
    462c:	bd38      	pop	{r3, r4, r5, pc}
    462e:	2400      	movs	r4, #0
    4630:	e7f7      	b.n	4622 <z_unpend_first_thread+0x28>

00004632 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4632:	4603      	mov	r3, r0
    4634:	b920      	cbnz	r0, 4640 <z_reschedule_irqlock+0xe>
    4636:	f3ef 8205 	mrs	r2, IPSR
    463a:	b90a      	cbnz	r2, 4640 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    463c:	f7fc bd5a 	b.w	10f4 <arch_swap>
    4640:	f383 8811 	msr	BASEPRI, r3
    4644:	f3bf 8f6f 	isb	sy
}
    4648:	4770      	bx	lr

0000464a <z_reschedule_unlocked>:
	__asm__ volatile(
    464a:	f04f 0320 	mov.w	r3, #32
    464e:	f3ef 8011 	mrs	r0, BASEPRI
    4652:	f383 8812 	msr	BASEPRI_MAX, r3
    4656:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    465a:	f7ff bfea 	b.w	4632 <z_reschedule_irqlock>

0000465e <z_abort_timeout>:
{
    465e:	b510      	push	{r4, lr}
    4660:	f04f 0220 	mov.w	r2, #32
    4664:	f3ef 8411 	mrs	r4, BASEPRI
    4668:	f382 8812 	msr	BASEPRI_MAX, r2
    466c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4670:	6803      	ldr	r3, [r0, #0]
    4672:	b13b      	cbz	r3, 4684 <z_abort_timeout+0x26>
			remove_timeout(to);
    4674:	f7ff f9ca 	bl	3a0c <remove_timeout>
			ret = 0;
    4678:	2000      	movs	r0, #0
	__asm__ volatile(
    467a:	f384 8811 	msr	BASEPRI, r4
    467e:	f3bf 8f6f 	isb	sy
}
    4682:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4684:	f06f 0015 	mvn.w	r0, #21
    4688:	e7f7      	b.n	467a <z_abort_timeout+0x1c>

0000468a <z_get_next_timeout_expiry>:
{
    468a:	b510      	push	{r4, lr}
	__asm__ volatile(
    468c:	f04f 0320 	mov.w	r3, #32
    4690:	f3ef 8411 	mrs	r4, BASEPRI
    4694:	f383 8812 	msr	BASEPRI_MAX, r3
    4698:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    469c:	f7ff f98e 	bl	39bc <next_timeout>
	__asm__ volatile(
    46a0:	f384 8811 	msr	BASEPRI, r4
    46a4:	f3bf 8f6f 	isb	sy
}
    46a8:	bd10      	pop	{r4, pc}

000046aa <z_set_timeout_expiry>:
{
    46aa:	b570      	push	{r4, r5, r6, lr}
    46ac:	4604      	mov	r4, r0
    46ae:	460d      	mov	r5, r1
	__asm__ volatile(
    46b0:	f04f 0320 	mov.w	r3, #32
    46b4:	f3ef 8611 	mrs	r6, BASEPRI
    46b8:	f383 8812 	msr	BASEPRI_MAX, r3
    46bc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    46c0:	f7ff f97c 	bl	39bc <next_timeout>
			      || (ticks <= next_to);
    46c4:	2801      	cmp	r0, #1
    46c6:	dd07      	ble.n	46d8 <z_set_timeout_expiry+0x2e>
    46c8:	42a0      	cmp	r0, r4
    46ca:	db05      	blt.n	46d8 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    46cc:	42a0      	cmp	r0, r4
    46ce:	4629      	mov	r1, r5
    46d0:	bfa8      	it	ge
    46d2:	4620      	movge	r0, r4
    46d4:	f7fd feb4 	bl	2440 <sys_clock_set_timeout>
	__asm__ volatile(
    46d8:	f386 8811 	msr	BASEPRI, r6
    46dc:	f3bf 8f6f 	isb	sy
}
    46e0:	bd70      	pop	{r4, r5, r6, pc}

000046e2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    46e2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    46e4:	f7ff fa86 	bl	3bf4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    46e8:	bd08      	pop	{r3, pc}

000046ea <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    46ea:	b108      	cbz	r0, 46f0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    46ec:	f7fd b85e 	b.w	17ac <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    46f0:	4770      	bx	lr

000046f2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    46f2:	4770      	bx	lr
